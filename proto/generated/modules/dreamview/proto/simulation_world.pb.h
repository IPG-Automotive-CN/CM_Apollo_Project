// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/simulation_world.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/monitor_log/proto/monitor_log.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/perception/proto/perception_obstacle.pb.h"
#include "modules/planning/proto/planning_internal.pb.h"
#include "modules/prediction/proto/feature.pb.h"
#include "modules/routing/proto/routing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
namespace apollo {
namespace dreamview {
class ControlData;
class ControlDataDefaultTypeInternal;
extern ControlDataDefaultTypeInternal _ControlData_default_instance_;
class Decision;
class DecisionDefaultTypeInternal;
extern DecisionDefaultTypeInternal _Decision_default_instance_;
class DelaysInMs;
class DelaysInMsDefaultTypeInternal;
extern DelaysInMsDefaultTypeInternal _DelaysInMs_default_instance_;
class Latency;
class LatencyDefaultTypeInternal;
extern LatencyDefaultTypeInternal _Latency_default_instance_;
class MapElementIds;
class MapElementIdsDefaultTypeInternal;
extern MapElementIdsDefaultTypeInternal _MapElementIds_default_instance_;
class Notification;
class NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class PolygonPoint;
class PolygonPointDefaultTypeInternal;
extern PolygonPointDefaultTypeInternal _PolygonPoint_default_instance_;
class Prediction;
class PredictionDefaultTypeInternal;
extern PredictionDefaultTypeInternal _Prediction_default_instance_;
class RoutePath;
class RoutePathDefaultTypeInternal;
extern RoutePathDefaultTypeInternal _RoutePath_default_instance_;
class SimulationWorld;
class SimulationWorldDefaultTypeInternal;
extern SimulationWorldDefaultTypeInternal _SimulationWorld_default_instance_;
class SimulationWorld_LatencyEntry_DoNotUse;
class SimulationWorld_LatencyEntry_DoNotUseDefaultTypeInternal;
extern SimulationWorld_LatencyEntry_DoNotUseDefaultTypeInternal _SimulationWorld_LatencyEntry_DoNotUse_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::ControlData* Arena::CreateMaybeMessage<::apollo::dreamview::ControlData>(Arena*);
template<> ::apollo::dreamview::Decision* Arena::CreateMaybeMessage<::apollo::dreamview::Decision>(Arena*);
template<> ::apollo::dreamview::DelaysInMs* Arena::CreateMaybeMessage<::apollo::dreamview::DelaysInMs>(Arena*);
template<> ::apollo::dreamview::Latency* Arena::CreateMaybeMessage<::apollo::dreamview::Latency>(Arena*);
template<> ::apollo::dreamview::MapElementIds* Arena::CreateMaybeMessage<::apollo::dreamview::MapElementIds>(Arena*);
template<> ::apollo::dreamview::Notification* Arena::CreateMaybeMessage<::apollo::dreamview::Notification>(Arena*);
template<> ::apollo::dreamview::Object* Arena::CreateMaybeMessage<::apollo::dreamview::Object>(Arena*);
template<> ::apollo::dreamview::PolygonPoint* Arena::CreateMaybeMessage<::apollo::dreamview::PolygonPoint>(Arena*);
template<> ::apollo::dreamview::Prediction* Arena::CreateMaybeMessage<::apollo::dreamview::Prediction>(Arena*);
template<> ::apollo::dreamview::RoutePath* Arena::CreateMaybeMessage<::apollo::dreamview::RoutePath>(Arena*);
template<> ::apollo::dreamview::SimulationWorld* Arena::CreateMaybeMessage<::apollo::dreamview::SimulationWorld>(Arena*);
template<> ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum Decision_Type : int {
  Decision_Type_IGNORE = 0,
  Decision_Type_STOP = 1,
  Decision_Type_NUDGE = 2,
  Decision_Type_YIELD = 3,
  Decision_Type_OVERTAKE = 4,
  Decision_Type_FOLLOW = 5,
  Decision_Type_SIDEPASS = 6
};
bool Decision_Type_IsValid(int value);
constexpr Decision_Type Decision_Type_Type_MIN = Decision_Type_IGNORE;
constexpr Decision_Type Decision_Type_Type_MAX = Decision_Type_SIDEPASS;
constexpr int Decision_Type_Type_ARRAYSIZE = Decision_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Decision_Type_descriptor();
template<typename T>
inline const std::string& Decision_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Decision_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Decision_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Decision_Type_descriptor(), enum_t_value);
}
inline bool Decision_Type_Parse(
    const std::string& name, Decision_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Decision_Type>(
    Decision_Type_descriptor(), name, value);
}
enum Decision_StopReasonCode : int {
  Decision_StopReasonCode_STOP_REASON_HEAD_VEHICLE = 1,
  Decision_StopReasonCode_STOP_REASON_DESTINATION = 2,
  Decision_StopReasonCode_STOP_REASON_PEDESTRIAN = 3,
  Decision_StopReasonCode_STOP_REASON_OBSTACLE = 4,
  Decision_StopReasonCode_STOP_REASON_SIGNAL = 100,
  Decision_StopReasonCode_STOP_REASON_STOP_SIGN = 101,
  Decision_StopReasonCode_STOP_REASON_YIELD_SIGN = 102,
  Decision_StopReasonCode_STOP_REASON_CLEAR_ZONE = 103,
  Decision_StopReasonCode_STOP_REASON_CROSSWALK = 104,
  Decision_StopReasonCode_STOP_REASON_EMERGENCY = 105,
  Decision_StopReasonCode_STOP_REASON_NOT_READY = 106,
  Decision_StopReasonCode_STOP_REASON_PULL_OVER = 107
};
bool Decision_StopReasonCode_IsValid(int value);
constexpr Decision_StopReasonCode Decision_StopReasonCode_StopReasonCode_MIN = Decision_StopReasonCode_STOP_REASON_HEAD_VEHICLE;
constexpr Decision_StopReasonCode Decision_StopReasonCode_StopReasonCode_MAX = Decision_StopReasonCode_STOP_REASON_PULL_OVER;
constexpr int Decision_StopReasonCode_StopReasonCode_ARRAYSIZE = Decision_StopReasonCode_StopReasonCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Decision_StopReasonCode_descriptor();
template<typename T>
inline const std::string& Decision_StopReasonCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Decision_StopReasonCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Decision_StopReasonCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Decision_StopReasonCode_descriptor(), enum_t_value);
}
inline bool Decision_StopReasonCode_Parse(
    const std::string& name, Decision_StopReasonCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Decision_StopReasonCode>(
    Decision_StopReasonCode_descriptor(), name, value);
}
enum Object_DisengageType : int {
  Object_DisengageType_DISENGAGE_NONE = 0,
  Object_DisengageType_DISENGAGE_UNKNOWN = 1,
  Object_DisengageType_DISENGAGE_MANUAL = 2,
  Object_DisengageType_DISENGAGE_EMERGENCY = 3,
  Object_DisengageType_DISENGAGE_AUTO_STEER_ONLY = 4,
  Object_DisengageType_DISENGAGE_AUTO_SPEED_ONLY = 5,
  Object_DisengageType_DISENGAGE_CHASSIS_ERROR = 6
};
bool Object_DisengageType_IsValid(int value);
constexpr Object_DisengageType Object_DisengageType_DisengageType_MIN = Object_DisengageType_DISENGAGE_NONE;
constexpr Object_DisengageType Object_DisengageType_DisengageType_MAX = Object_DisengageType_DISENGAGE_CHASSIS_ERROR;
constexpr int Object_DisengageType_DisengageType_ARRAYSIZE = Object_DisengageType_DisengageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_DisengageType_descriptor();
template<typename T>
inline const std::string& Object_DisengageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Object_DisengageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Object_DisengageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Object_DisengageType_descriptor(), enum_t_value);
}
inline bool Object_DisengageType_Parse(
    const std::string& name, Object_DisengageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Object_DisengageType>(
    Object_DisengageType_descriptor(), name, value);
}
enum Object_Type : int {
  Object_Type_UNKNOWN = 0,
  Object_Type_UNKNOWN_MOVABLE = 1,
  Object_Type_UNKNOWN_UNMOVABLE = 2,
  Object_Type_PEDESTRIAN = 3,
  Object_Type_BICYCLE = 4,
  Object_Type_VEHICLE = 5,
  Object_Type_VIRTUAL = 6,
  Object_Type_CIPV = 7
};
bool Object_Type_IsValid(int value);
constexpr Object_Type Object_Type_Type_MIN = Object_Type_UNKNOWN;
constexpr Object_Type Object_Type_Type_MAX = Object_Type_CIPV;
constexpr int Object_Type_Type_ARRAYSIZE = Object_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_Type_descriptor();
template<typename T>
inline const std::string& Object_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Object_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Object_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Object_Type_descriptor(), enum_t_value);
}
inline bool Object_Type_Parse(
    const std::string& name, Object_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Object_Type>(
    Object_Type_descriptor(), name, value);
}
// ===================================================================

class PolygonPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.PolygonPoint) */ {
 public:
  PolygonPoint();
  virtual ~PolygonPoint();

  PolygonPoint(const PolygonPoint& from);
  PolygonPoint(PolygonPoint&& from) noexcept
    : PolygonPoint() {
    *this = ::std::move(from);
  }

  inline PolygonPoint& operator=(const PolygonPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolygonPoint& operator=(PolygonPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolygonPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolygonPoint* internal_default_instance() {
    return reinterpret_cast<const PolygonPoint*>(
               &_PolygonPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PolygonPoint& a, PolygonPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PolygonPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolygonPoint* New() const final {
    return CreateMaybeMessage<PolygonPoint>(nullptr);
  }

  PolygonPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolygonPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolygonPoint& from);
  void MergeFrom(const PolygonPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolygonPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.PolygonPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3 [default = 0];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.PolygonPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class Prediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Prediction) */ {
 public:
  Prediction();
  virtual ~Prediction();

  Prediction(const Prediction& from);
  Prediction(Prediction&& from) noexcept
    : Prediction() {
    *this = ::std::move(from);
  }

  inline Prediction& operator=(const Prediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prediction& operator=(Prediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prediction* internal_default_instance() {
    return reinterpret_cast<const Prediction*>(
               &_Prediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Prediction& a, Prediction& b) {
    a.Swap(&b);
  }
  inline void Swap(Prediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prediction* New() const final {
    return CreateMaybeMessage<Prediction>(nullptr);
  }

  Prediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prediction& from);
  void MergeFrom(const Prediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Prediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictedTrajectoryFieldNumber = 2,
    kProbabilityFieldNumber = 1,
  };
  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  int predicted_trajectory_size() const;
  private:
  int _internal_predicted_trajectory_size() const;
  public:
  void clear_predicted_trajectory();
  ::apollo::dreamview::PolygonPoint* mutable_predicted_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
      mutable_predicted_trajectory();
  private:
  const ::apollo::dreamview::PolygonPoint& _internal_predicted_trajectory(int index) const;
  ::apollo::dreamview::PolygonPoint* _internal_add_predicted_trajectory();
  public:
  const ::apollo::dreamview::PolygonPoint& predicted_trajectory(int index) const;
  ::apollo::dreamview::PolygonPoint* add_predicted_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
      predicted_trajectory() const;

  // optional double probability = 1;
  bool has_probability() const;
  private:
  bool _internal_has_probability() const;
  public:
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Prediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint > predicted_trajectory_;
  double probability_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class Decision :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Decision) */ {
 public:
  Decision();
  virtual ~Decision();

  Decision(const Decision& from);
  Decision(Decision&& from) noexcept
    : Decision() {
    *this = ::std::move(from);
  }

  inline Decision& operator=(const Decision& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decision& operator=(Decision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decision* internal_default_instance() {
    return reinterpret_cast<const Decision*>(
               &_Decision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Decision& a, Decision& b) {
    a.Swap(&b);
  }
  inline void Swap(Decision* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decision* New() const final {
    return CreateMaybeMessage<Decision>(nullptr);
  }

  Decision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decision& from);
  void MergeFrom(const Decision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Decision";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Decision_Type Type;
  static constexpr Type IGNORE =
    Decision_Type_IGNORE;
  static constexpr Type STOP =
    Decision_Type_STOP;
  static constexpr Type NUDGE =
    Decision_Type_NUDGE;
  static constexpr Type YIELD =
    Decision_Type_YIELD;
  static constexpr Type OVERTAKE =
    Decision_Type_OVERTAKE;
  static constexpr Type FOLLOW =
    Decision_Type_FOLLOW;
  static constexpr Type SIDEPASS =
    Decision_Type_SIDEPASS;
  static inline bool Type_IsValid(int value) {
    return Decision_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Decision_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Decision_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Decision_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Decision_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Decision_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Decision_Type_Parse(name, value);
  }

  typedef Decision_StopReasonCode StopReasonCode;
  static constexpr StopReasonCode STOP_REASON_HEAD_VEHICLE =
    Decision_StopReasonCode_STOP_REASON_HEAD_VEHICLE;
  static constexpr StopReasonCode STOP_REASON_DESTINATION =
    Decision_StopReasonCode_STOP_REASON_DESTINATION;
  static constexpr StopReasonCode STOP_REASON_PEDESTRIAN =
    Decision_StopReasonCode_STOP_REASON_PEDESTRIAN;
  static constexpr StopReasonCode STOP_REASON_OBSTACLE =
    Decision_StopReasonCode_STOP_REASON_OBSTACLE;
  static constexpr StopReasonCode STOP_REASON_SIGNAL =
    Decision_StopReasonCode_STOP_REASON_SIGNAL;
  static constexpr StopReasonCode STOP_REASON_STOP_SIGN =
    Decision_StopReasonCode_STOP_REASON_STOP_SIGN;
  static constexpr StopReasonCode STOP_REASON_YIELD_SIGN =
    Decision_StopReasonCode_STOP_REASON_YIELD_SIGN;
  static constexpr StopReasonCode STOP_REASON_CLEAR_ZONE =
    Decision_StopReasonCode_STOP_REASON_CLEAR_ZONE;
  static constexpr StopReasonCode STOP_REASON_CROSSWALK =
    Decision_StopReasonCode_STOP_REASON_CROSSWALK;
  static constexpr StopReasonCode STOP_REASON_EMERGENCY =
    Decision_StopReasonCode_STOP_REASON_EMERGENCY;
  static constexpr StopReasonCode STOP_REASON_NOT_READY =
    Decision_StopReasonCode_STOP_REASON_NOT_READY;
  static constexpr StopReasonCode STOP_REASON_PULL_OVER =
    Decision_StopReasonCode_STOP_REASON_PULL_OVER;
  static inline bool StopReasonCode_IsValid(int value) {
    return Decision_StopReasonCode_IsValid(value);
  }
  static constexpr StopReasonCode StopReasonCode_MIN =
    Decision_StopReasonCode_StopReasonCode_MIN;
  static constexpr StopReasonCode StopReasonCode_MAX =
    Decision_StopReasonCode_StopReasonCode_MAX;
  static constexpr int StopReasonCode_ARRAYSIZE =
    Decision_StopReasonCode_StopReasonCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StopReasonCode_descriptor() {
    return Decision_StopReasonCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StopReasonCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StopReasonCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StopReasonCode_Name.");
    return Decision_StopReasonCode_Name(enum_t_value);
  }
  static inline bool StopReasonCode_Parse(const std::string& name,
      StopReasonCode* value) {
    return Decision_StopReasonCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonPointFieldNumber = 2,
    kHeadingFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kPositionXFieldNumber = 6,
    kTypeFieldNumber = 1,
    kChangeLaneTypeFieldNumber = 12,
    kPositionYFieldNumber = 7,
    kStopReasonFieldNumber = 11,
    kLengthFieldNumber = 8,
    kWidthFieldNumber = 9,
    kHeightFieldNumber = 10,
  };
  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  int polygon_point_size() const;
  private:
  int _internal_polygon_point_size() const;
  public:
  void clear_polygon_point();
  ::apollo::dreamview::PolygonPoint* mutable_polygon_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
      mutable_polygon_point();
  private:
  const ::apollo::dreamview::PolygonPoint& _internal_polygon_point(int index) const;
  ::apollo::dreamview::PolygonPoint* _internal_add_polygon_point();
  public:
  const ::apollo::dreamview::PolygonPoint& polygon_point(int index) const;
  ::apollo::dreamview::PolygonPoint* add_polygon_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
      polygon_point() const;

  // optional double heading = 3;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double latitude = 4;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // optional double longitude = 5;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // optional double position_x = 6;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  double position_x() const;
  void set_position_x(double value);
  private:
  double _internal_position_x() const;
  void _internal_set_position_x(double value);
  public:

  // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::dreamview::Decision_Type type() const;
  void set_type(::apollo::dreamview::Decision_Type value);
  private:
  ::apollo::dreamview::Decision_Type _internal_type() const;
  void _internal_set_type(::apollo::dreamview::Decision_Type value);
  public:

  // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
  bool has_change_lane_type() const;
  private:
  bool _internal_has_change_lane_type() const;
  public:
  void clear_change_lane_type();
  ::apollo::routing::ChangeLaneType change_lane_type() const;
  void set_change_lane_type(::apollo::routing::ChangeLaneType value);
  private:
  ::apollo::routing::ChangeLaneType _internal_change_lane_type() const;
  void _internal_set_change_lane_type(::apollo::routing::ChangeLaneType value);
  public:

  // optional double position_y = 7;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  double position_y() const;
  void set_position_y(double value);
  private:
  double _internal_position_y() const;
  void _internal_set_position_y(double value);
  public:

  // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
  bool has_stopreason() const;
  private:
  bool _internal_has_stopreason() const;
  public:
  void clear_stopreason();
  ::apollo::dreamview::Decision_StopReasonCode stopreason() const;
  void set_stopreason(::apollo::dreamview::Decision_StopReasonCode value);
  private:
  ::apollo::dreamview::Decision_StopReasonCode _internal_stopreason() const;
  void _internal_set_stopreason(::apollo::dreamview::Decision_StopReasonCode value);
  public:

  // optional double length = 8 [default = 2.8];
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double width = 9 [default = 1.4];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 10 [default = 1.8];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Decision)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint > polygon_point_;
  double heading_;
  double latitude_;
  double longitude_;
  double position_x_;
  int type_;
  int change_lane_type_;
  double position_y_;
  int stopreason_;
  double length_;
  double width_;
  double height_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class Object :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Object";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Object_DisengageType DisengageType;
  static constexpr DisengageType DISENGAGE_NONE =
    Object_DisengageType_DISENGAGE_NONE;
  static constexpr DisengageType DISENGAGE_UNKNOWN =
    Object_DisengageType_DISENGAGE_UNKNOWN;
  static constexpr DisengageType DISENGAGE_MANUAL =
    Object_DisengageType_DISENGAGE_MANUAL;
  static constexpr DisengageType DISENGAGE_EMERGENCY =
    Object_DisengageType_DISENGAGE_EMERGENCY;
  static constexpr DisengageType DISENGAGE_AUTO_STEER_ONLY =
    Object_DisengageType_DISENGAGE_AUTO_STEER_ONLY;
  static constexpr DisengageType DISENGAGE_AUTO_SPEED_ONLY =
    Object_DisengageType_DISENGAGE_AUTO_SPEED_ONLY;
  static constexpr DisengageType DISENGAGE_CHASSIS_ERROR =
    Object_DisengageType_DISENGAGE_CHASSIS_ERROR;
  static inline bool DisengageType_IsValid(int value) {
    return Object_DisengageType_IsValid(value);
  }
  static constexpr DisengageType DisengageType_MIN =
    Object_DisengageType_DisengageType_MIN;
  static constexpr DisengageType DisengageType_MAX =
    Object_DisengageType_DisengageType_MAX;
  static constexpr int DisengageType_ARRAYSIZE =
    Object_DisengageType_DisengageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DisengageType_descriptor() {
    return Object_DisengageType_descriptor();
  }
  template<typename T>
  static inline const std::string& DisengageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DisengageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DisengageType_Name.");
    return Object_DisengageType_Name(enum_t_value);
  }
  static inline bool DisengageType_Parse(const std::string& name,
      DisengageType* value) {
    return Object_DisengageType_Parse(name, value);
  }

  typedef Object_Type Type;
  static constexpr Type UNKNOWN =
    Object_Type_UNKNOWN;
  static constexpr Type UNKNOWN_MOVABLE =
    Object_Type_UNKNOWN_MOVABLE;
  static constexpr Type UNKNOWN_UNMOVABLE =
    Object_Type_UNKNOWN_UNMOVABLE;
  static constexpr Type PEDESTRIAN =
    Object_Type_PEDESTRIAN;
  static constexpr Type BICYCLE =
    Object_Type_BICYCLE;
  static constexpr Type VEHICLE =
    Object_Type_VEHICLE;
  static constexpr Type VIRTUAL =
    Object_Type_VIRTUAL;
  static constexpr Type CIPV =
    Object_Type_CIPV;
  static inline bool Type_IsValid(int value) {
    return Object_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Object_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Object_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Object_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Object_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Object_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Object_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPolygonPointFieldNumber = 2,
    kSignalSetFieldNumber = 19,
    kDecisionFieldNumber = 22,
    kPredictionFieldNumber = 30,
    kIdFieldNumber = 1,
    kCurrentSignalFieldNumber = 20,
    kObstaclePriorityFieldNumber = 33,
    kHeadingFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kPositionXFieldNumber = 6,
    kPositionYFieldNumber = 7,
    kSpeedFieldNumber = 11,
    kSpeedAccelerationFieldNumber = 12,
    kSpeedJerkFieldNumber = 13,
    kSpinFieldNumber = 14,
    kSpinAccelerationFieldNumber = 15,
    kSpinJerkFieldNumber = 16,
    kSpeedHeadingFieldNumber = 17,
    kKappaFieldNumber = 18,
    kTimestampSecFieldNumber = 21,
    kThrottlePercentageFieldNumber = 23,
    kBrakePercentageFieldNumber = 24,
    kSteeringPercentageFieldNumber = 25,
    kSteeringAngleFieldNumber = 26,
    kSteeringRatioFieldNumber = 27,
    kDisengageTypeFieldNumber = 28,
    kTypeFieldNumber = 29,
    kYieldedObstacleFieldNumber = 32,
    kSubTypeFieldNumber = 34,
    kDkappaFieldNumber = 35,
    kLengthFieldNumber = 8,
    kWidthFieldNumber = 9,
    kHeightFieldNumber = 10,
    kConfidenceFieldNumber = 31,
  };
  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  int polygon_point_size() const;
  private:
  int _internal_polygon_point_size() const;
  public:
  void clear_polygon_point();
  ::apollo::dreamview::PolygonPoint* mutable_polygon_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
      mutable_polygon_point();
  private:
  const ::apollo::dreamview::PolygonPoint& _internal_polygon_point(int index) const;
  ::apollo::dreamview::PolygonPoint* _internal_add_polygon_point();
  public:
  const ::apollo::dreamview::PolygonPoint& polygon_point(int index) const;
  ::apollo::dreamview::PolygonPoint* add_polygon_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
      polygon_point() const;

  // repeated string signal_set = 19;
  int signal_set_size() const;
  private:
  int _internal_signal_set_size() const;
  public:
  void clear_signal_set();
  const std::string& signal_set(int index) const;
  std::string* mutable_signal_set(int index);
  void set_signal_set(int index, const std::string& value);
  void set_signal_set(int index, std::string&& value);
  void set_signal_set(int index, const char* value);
  void set_signal_set(int index, const char* value, size_t size);
  std::string* add_signal_set();
  void add_signal_set(const std::string& value);
  void add_signal_set(std::string&& value);
  void add_signal_set(const char* value);
  void add_signal_set(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signal_set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signal_set();
  private:
  const std::string& _internal_signal_set(int index) const;
  std::string* _internal_add_signal_set();
  public:

  // repeated .apollo.dreamview.Decision decision = 22;
  int decision_size() const;
  private:
  int _internal_decision_size() const;
  public:
  void clear_decision();
  ::apollo::dreamview::Decision* mutable_decision(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Decision >*
      mutable_decision();
  private:
  const ::apollo::dreamview::Decision& _internal_decision(int index) const;
  ::apollo::dreamview::Decision* _internal_add_decision();
  public:
  const ::apollo::dreamview::Decision& decision(int index) const;
  ::apollo::dreamview::Decision* add_decision();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Decision >&
      decision() const;

  // repeated .apollo.dreamview.Prediction prediction = 30;
  int prediction_size() const;
  private:
  int _internal_prediction_size() const;
  public:
  void clear_prediction();
  ::apollo::dreamview::Prediction* mutable_prediction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Prediction >*
      mutable_prediction();
  private:
  const ::apollo::dreamview::Prediction& _internal_prediction(int index) const;
  ::apollo::dreamview::Prediction* _internal_add_prediction();
  public:
  const ::apollo::dreamview::Prediction& prediction(int index) const;
  ::apollo::dreamview::Prediction* add_prediction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Prediction >&
      prediction() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string current_signal = 20;
  bool has_current_signal() const;
  private:
  bool _internal_has_current_signal() const;
  public:
  void clear_current_signal();
  const std::string& current_signal() const;
  void set_current_signal(const std::string& value);
  void set_current_signal(std::string&& value);
  void set_current_signal(const char* value);
  void set_current_signal(const char* value, size_t size);
  std::string* mutable_current_signal();
  std::string* release_current_signal();
  void set_allocated_current_signal(std::string* current_signal);
  private:
  const std::string& _internal_current_signal() const;
  void _internal_set_current_signal(const std::string& value);
  std::string* _internal_mutable_current_signal();
  public:

  // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
  bool has_obstacle_priority() const;
  private:
  bool _internal_has_obstacle_priority() const;
  public:
  void clear_obstacle_priority();
  const ::apollo::prediction::ObstaclePriority& obstacle_priority() const;
  ::apollo::prediction::ObstaclePriority* release_obstacle_priority();
  ::apollo::prediction::ObstaclePriority* mutable_obstacle_priority();
  void set_allocated_obstacle_priority(::apollo::prediction::ObstaclePriority* obstacle_priority);
  private:
  const ::apollo::prediction::ObstaclePriority& _internal_obstacle_priority() const;
  ::apollo::prediction::ObstaclePriority* _internal_mutable_obstacle_priority();
  public:

  // optional double heading = 3;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double latitude = 4;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // optional double longitude = 5;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // optional double position_x = 6;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  double position_x() const;
  void set_position_x(double value);
  private:
  double _internal_position_x() const;
  void _internal_set_position_x(double value);
  public:

  // optional double position_y = 7;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  double position_y() const;
  void set_position_y(double value);
  private:
  double _internal_position_y() const;
  void _internal_set_position_y(double value);
  public:

  // optional double speed = 11;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double speed_acceleration = 12;
  bool has_speed_acceleration() const;
  private:
  bool _internal_has_speed_acceleration() const;
  public:
  void clear_speed_acceleration();
  double speed_acceleration() const;
  void set_speed_acceleration(double value);
  private:
  double _internal_speed_acceleration() const;
  void _internal_set_speed_acceleration(double value);
  public:

  // optional double speed_jerk = 13;
  bool has_speed_jerk() const;
  private:
  bool _internal_has_speed_jerk() const;
  public:
  void clear_speed_jerk();
  double speed_jerk() const;
  void set_speed_jerk(double value);
  private:
  double _internal_speed_jerk() const;
  void _internal_set_speed_jerk(double value);
  public:

  // optional double spin = 14;
  bool has_spin() const;
  private:
  bool _internal_has_spin() const;
  public:
  void clear_spin();
  double spin() const;
  void set_spin(double value);
  private:
  double _internal_spin() const;
  void _internal_set_spin(double value);
  public:

  // optional double spin_acceleration = 15;
  bool has_spin_acceleration() const;
  private:
  bool _internal_has_spin_acceleration() const;
  public:
  void clear_spin_acceleration();
  double spin_acceleration() const;
  void set_spin_acceleration(double value);
  private:
  double _internal_spin_acceleration() const;
  void _internal_set_spin_acceleration(double value);
  public:

  // optional double spin_jerk = 16;
  bool has_spin_jerk() const;
  private:
  bool _internal_has_spin_jerk() const;
  public:
  void clear_spin_jerk();
  double spin_jerk() const;
  void set_spin_jerk(double value);
  private:
  double _internal_spin_jerk() const;
  void _internal_set_spin_jerk(double value);
  public:

  // optional double speed_heading = 17;
  bool has_speed_heading() const;
  private:
  bool _internal_has_speed_heading() const;
  public:
  void clear_speed_heading();
  double speed_heading() const;
  void set_speed_heading(double value);
  private:
  double _internal_speed_heading() const;
  void _internal_set_speed_heading(double value);
  public:

  // optional double kappa = 18;
  bool has_kappa() const;
  private:
  bool _internal_has_kappa() const;
  public:
  void clear_kappa();
  double kappa() const;
  void set_kappa(double value);
  private:
  double _internal_kappa() const;
  void _internal_set_kappa(double value);
  public:

  // optional double timestamp_sec = 21;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  double timestamp_sec() const;
  void set_timestamp_sec(double value);
  private:
  double _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(double value);
  public:

  // optional double throttle_percentage = 23;
  bool has_throttle_percentage() const;
  private:
  bool _internal_has_throttle_percentage() const;
  public:
  void clear_throttle_percentage();
  double throttle_percentage() const;
  void set_throttle_percentage(double value);
  private:
  double _internal_throttle_percentage() const;
  void _internal_set_throttle_percentage(double value);
  public:

  // optional double brake_percentage = 24;
  bool has_brake_percentage() const;
  private:
  bool _internal_has_brake_percentage() const;
  public:
  void clear_brake_percentage();
  double brake_percentage() const;
  void set_brake_percentage(double value);
  private:
  double _internal_brake_percentage() const;
  void _internal_set_brake_percentage(double value);
  public:

  // optional double steering_percentage = 25;
  bool has_steering_percentage() const;
  private:
  bool _internal_has_steering_percentage() const;
  public:
  void clear_steering_percentage();
  double steering_percentage() const;
  void set_steering_percentage(double value);
  private:
  double _internal_steering_percentage() const;
  void _internal_set_steering_percentage(double value);
  public:

  // optional double steering_angle = 26;
  bool has_steering_angle() const;
  private:
  bool _internal_has_steering_angle() const;
  public:
  void clear_steering_angle();
  double steering_angle() const;
  void set_steering_angle(double value);
  private:
  double _internal_steering_angle() const;
  void _internal_set_steering_angle(double value);
  public:

  // optional double steering_ratio = 27;
  bool has_steering_ratio() const;
  private:
  bool _internal_has_steering_ratio() const;
  public:
  void clear_steering_ratio();
  double steering_ratio() const;
  void set_steering_ratio(double value);
  private:
  double _internal_steering_ratio() const;
  void _internal_set_steering_ratio(double value);
  public:

  // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
  bool has_disengage_type() const;
  private:
  bool _internal_has_disengage_type() const;
  public:
  void clear_disengage_type();
  ::apollo::dreamview::Object_DisengageType disengage_type() const;
  void set_disengage_type(::apollo::dreamview::Object_DisengageType value);
  private:
  ::apollo::dreamview::Object_DisengageType _internal_disengage_type() const;
  void _internal_set_disengage_type(::apollo::dreamview::Object_DisengageType value);
  public:

  // optional .apollo.dreamview.Object.Type type = 29;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::dreamview::Object_Type type() const;
  void set_type(::apollo::dreamview::Object_Type value);
  private:
  ::apollo::dreamview::Object_Type _internal_type() const;
  void _internal_set_type(::apollo::dreamview::Object_Type value);
  public:

  // optional bool yielded_obstacle = 32 [default = false];
  bool has_yielded_obstacle() const;
  private:
  bool _internal_has_yielded_obstacle() const;
  public:
  void clear_yielded_obstacle();
  bool yielded_obstacle() const;
  void set_yielded_obstacle(bool value);
  private:
  bool _internal_yielded_obstacle() const;
  void _internal_set_yielded_obstacle(bool value);
  public:

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
  bool has_sub_type() const;
  private:
  bool _internal_has_sub_type() const;
  public:
  void clear_sub_type();
  ::apollo::perception::PerceptionObstacle_SubType sub_type() const;
  void set_sub_type(::apollo::perception::PerceptionObstacle_SubType value);
  private:
  ::apollo::perception::PerceptionObstacle_SubType _internal_sub_type() const;
  void _internal_set_sub_type(::apollo::perception::PerceptionObstacle_SubType value);
  public:

  // optional double dkappa = 35;
  bool has_dkappa() const;
  private:
  bool _internal_has_dkappa() const;
  public:
  void clear_dkappa();
  double dkappa() const;
  void set_dkappa(double value);
  private:
  double _internal_dkappa() const;
  void _internal_set_dkappa(double value);
  public:

  // optional double length = 8 [default = 2.8];
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double width = 9 [default = 1.4];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double height = 10 [default = 1.8];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double confidence = 31 [default = 1];
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Object)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint > polygon_point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signal_set_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Decision > decision_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Prediction > prediction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_signal_;
  ::apollo::prediction::ObstaclePriority* obstacle_priority_;
  double heading_;
  double latitude_;
  double longitude_;
  double position_x_;
  double position_y_;
  double speed_;
  double speed_acceleration_;
  double speed_jerk_;
  double spin_;
  double spin_acceleration_;
  double spin_jerk_;
  double speed_heading_;
  double kappa_;
  double timestamp_sec_;
  double throttle_percentage_;
  double brake_percentage_;
  double steering_percentage_;
  double steering_angle_;
  double steering_ratio_;
  int disengage_type_;
  int type_;
  bool yielded_obstacle_;
  int sub_type_;
  double dkappa_;
  double length_;
  double width_;
  double height_;
  double confidence_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class DelaysInMs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DelaysInMs) */ {
 public:
  DelaysInMs();
  virtual ~DelaysInMs();

  DelaysInMs(const DelaysInMs& from);
  DelaysInMs(DelaysInMs&& from) noexcept
    : DelaysInMs() {
    *this = ::std::move(from);
  }

  inline DelaysInMs& operator=(const DelaysInMs& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelaysInMs& operator=(DelaysInMs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelaysInMs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelaysInMs* internal_default_instance() {
    return reinterpret_cast<const DelaysInMs*>(
               &_DelaysInMs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DelaysInMs& a, DelaysInMs& b) {
    a.Swap(&b);
  }
  inline void Swap(DelaysInMs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelaysInMs* New() const final {
    return CreateMaybeMessage<DelaysInMs>(nullptr);
  }

  DelaysInMs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelaysInMs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelaysInMs& from);
  void MergeFrom(const DelaysInMs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelaysInMs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.DelaysInMs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChassisFieldNumber = 1,
    kLocalizationFieldNumber = 3,
    kPerceptionObstacleFieldNumber = 4,
    kPlanningFieldNumber = 5,
    kPredictionFieldNumber = 7,
    kTrafficLightFieldNumber = 8,
    kControlFieldNumber = 9,
  };
  // optional double chassis = 1;
  bool has_chassis() const;
  private:
  bool _internal_has_chassis() const;
  public:
  void clear_chassis();
  double chassis() const;
  void set_chassis(double value);
  private:
  double _internal_chassis() const;
  void _internal_set_chassis(double value);
  public:

  // optional double localization = 3;
  bool has_localization() const;
  private:
  bool _internal_has_localization() const;
  public:
  void clear_localization();
  double localization() const;
  void set_localization(double value);
  private:
  double _internal_localization() const;
  void _internal_set_localization(double value);
  public:

  // optional double perception_obstacle = 4;
  bool has_perception_obstacle() const;
  private:
  bool _internal_has_perception_obstacle() const;
  public:
  void clear_perception_obstacle();
  double perception_obstacle() const;
  void set_perception_obstacle(double value);
  private:
  double _internal_perception_obstacle() const;
  void _internal_set_perception_obstacle(double value);
  public:

  // optional double planning = 5;
  bool has_planning() const;
  private:
  bool _internal_has_planning() const;
  public:
  void clear_planning();
  double planning() const;
  void set_planning(double value);
  private:
  double _internal_planning() const;
  void _internal_set_planning(double value);
  public:

  // optional double prediction = 7;
  bool has_prediction() const;
  private:
  bool _internal_has_prediction() const;
  public:
  void clear_prediction();
  double prediction() const;
  void set_prediction(double value);
  private:
  double _internal_prediction() const;
  void _internal_set_prediction(double value);
  public:

  // optional double traffic_light = 8;
  bool has_traffic_light() const;
  private:
  bool _internal_has_traffic_light() const;
  public:
  void clear_traffic_light();
  double traffic_light() const;
  void set_traffic_light(double value);
  private:
  double _internal_traffic_light() const;
  void _internal_set_traffic_light(double value);
  public:

  // optional double control = 9;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  double control() const;
  void set_control(double value);
  private:
  double _internal_control() const;
  void _internal_set_control(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DelaysInMs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double chassis_;
  double localization_;
  double perception_obstacle_;
  double planning_;
  double prediction_;
  double traffic_light_;
  double control_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class RoutePath :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.RoutePath) */ {
 public:
  RoutePath();
  virtual ~RoutePath();

  RoutePath(const RoutePath& from);
  RoutePath(RoutePath&& from) noexcept
    : RoutePath() {
    *this = ::std::move(from);
  }

  inline RoutePath& operator=(const RoutePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutePath& operator=(RoutePath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutePath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutePath* internal_default_instance() {
    return reinterpret_cast<const RoutePath*>(
               &_RoutePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoutePath& a, RoutePath& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutePath* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutePath* New() const final {
    return CreateMaybeMessage<RoutePath>(nullptr);
  }

  RoutePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutePath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutePath& from);
  void MergeFrom(const RoutePath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutePath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.RoutePath";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .apollo.dreamview.PolygonPoint point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::dreamview::PolygonPoint* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
      mutable_point();
  private:
  const ::apollo::dreamview::PolygonPoint& _internal_point(int index) const;
  ::apollo::dreamview::PolygonPoint* _internal_add_point();
  public:
  const ::apollo::dreamview::PolygonPoint& point(int index) const;
  ::apollo::dreamview::PolygonPoint* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
      point() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.RoutePath)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint > point_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class Latency :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Latency) */ {
 public:
  Latency();
  virtual ~Latency();

  Latency(const Latency& from);
  Latency(Latency&& from) noexcept
    : Latency() {
    *this = ::std::move(from);
  }

  inline Latency& operator=(const Latency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Latency& operator=(Latency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Latency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Latency* internal_default_instance() {
    return reinterpret_cast<const Latency*>(
               &_Latency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Latency& a, Latency& b) {
    a.Swap(&b);
  }
  inline void Swap(Latency* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Latency* New() const final {
    return CreateMaybeMessage<Latency>(nullptr);
  }

  Latency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Latency>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Latency& from);
  void MergeFrom(const Latency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Latency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Latency";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampSecFieldNumber = 1,
    kTotalTimeMsFieldNumber = 2,
  };
  // optional double timestamp_sec = 1;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  double timestamp_sec() const;
  void set_timestamp_sec(double value);
  private:
  double _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(double value);
  public:

  // optional double total_time_ms = 2;
  bool has_total_time_ms() const;
  private:
  bool _internal_has_total_time_ms() const;
  public:
  void clear_total_time_ms();
  double total_time_ms() const;
  void set_total_time_ms(double value);
  private:
  double _internal_total_time_ms() const;
  void _internal_set_total_time_ms(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Latency)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double timestamp_sec_;
  double total_time_ms_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class MapElementIds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.MapElementIds) */ {
 public:
  MapElementIds();
  virtual ~MapElementIds();

  MapElementIds(const MapElementIds& from);
  MapElementIds(MapElementIds&& from) noexcept
    : MapElementIds() {
    *this = ::std::move(from);
  }

  inline MapElementIds& operator=(const MapElementIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapElementIds& operator=(MapElementIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapElementIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapElementIds* internal_default_instance() {
    return reinterpret_cast<const MapElementIds*>(
               &_MapElementIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MapElementIds& a, MapElementIds& b) {
    a.Swap(&b);
  }
  inline void Swap(MapElementIds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapElementIds* New() const final {
    return CreateMaybeMessage<MapElementIds>(nullptr);
  }

  MapElementIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapElementIds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapElementIds& from);
  void MergeFrom(const MapElementIds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapElementIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.MapElementIds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneFieldNumber = 1,
    kCrosswalkFieldNumber = 2,
    kJunctionFieldNumber = 3,
    kSignalFieldNumber = 4,
    kStopSignFieldNumber = 5,
    kYieldFieldNumber = 6,
    kOverlapFieldNumber = 7,
    kRoadFieldNumber = 8,
    kClearAreaFieldNumber = 9,
    kParkingSpaceFieldNumber = 10,
    kSpeedBumpFieldNumber = 11,
    kPncJunctionFieldNumber = 12,
  };
  // repeated string lane = 1;
  int lane_size() const;
  private:
  int _internal_lane_size() const;
  public:
  void clear_lane();
  const std::string& lane(int index) const;
  std::string* mutable_lane(int index);
  void set_lane(int index, const std::string& value);
  void set_lane(int index, std::string&& value);
  void set_lane(int index, const char* value);
  void set_lane(int index, const char* value, size_t size);
  std::string* add_lane();
  void add_lane(const std::string& value);
  void add_lane(std::string&& value);
  void add_lane(const char* value);
  void add_lane(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lane() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lane();
  private:
  const std::string& _internal_lane(int index) const;
  std::string* _internal_add_lane();
  public:

  // repeated string crosswalk = 2;
  int crosswalk_size() const;
  private:
  int _internal_crosswalk_size() const;
  public:
  void clear_crosswalk();
  const std::string& crosswalk(int index) const;
  std::string* mutable_crosswalk(int index);
  void set_crosswalk(int index, const std::string& value);
  void set_crosswalk(int index, std::string&& value);
  void set_crosswalk(int index, const char* value);
  void set_crosswalk(int index, const char* value, size_t size);
  std::string* add_crosswalk();
  void add_crosswalk(const std::string& value);
  void add_crosswalk(std::string&& value);
  void add_crosswalk(const char* value);
  void add_crosswalk(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& crosswalk() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_crosswalk();
  private:
  const std::string& _internal_crosswalk(int index) const;
  std::string* _internal_add_crosswalk();
  public:

  // repeated string junction = 3;
  int junction_size() const;
  private:
  int _internal_junction_size() const;
  public:
  void clear_junction();
  const std::string& junction(int index) const;
  std::string* mutable_junction(int index);
  void set_junction(int index, const std::string& value);
  void set_junction(int index, std::string&& value);
  void set_junction(int index, const char* value);
  void set_junction(int index, const char* value, size_t size);
  std::string* add_junction();
  void add_junction(const std::string& value);
  void add_junction(std::string&& value);
  void add_junction(const char* value);
  void add_junction(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& junction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_junction();
  private:
  const std::string& _internal_junction(int index) const;
  std::string* _internal_add_junction();
  public:

  // repeated string signal = 4;
  int signal_size() const;
  private:
  int _internal_signal_size() const;
  public:
  void clear_signal();
  const std::string& signal(int index) const;
  std::string* mutable_signal(int index);
  void set_signal(int index, const std::string& value);
  void set_signal(int index, std::string&& value);
  void set_signal(int index, const char* value);
  void set_signal(int index, const char* value, size_t size);
  std::string* add_signal();
  void add_signal(const std::string& value);
  void add_signal(std::string&& value);
  void add_signal(const char* value);
  void add_signal(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signal() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signal();
  private:
  const std::string& _internal_signal(int index) const;
  std::string* _internal_add_signal();
  public:

  // repeated string stop_sign = 5;
  int stop_sign_size() const;
  private:
  int _internal_stop_sign_size() const;
  public:
  void clear_stop_sign();
  const std::string& stop_sign(int index) const;
  std::string* mutable_stop_sign(int index);
  void set_stop_sign(int index, const std::string& value);
  void set_stop_sign(int index, std::string&& value);
  void set_stop_sign(int index, const char* value);
  void set_stop_sign(int index, const char* value, size_t size);
  std::string* add_stop_sign();
  void add_stop_sign(const std::string& value);
  void add_stop_sign(std::string&& value);
  void add_stop_sign(const char* value);
  void add_stop_sign(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stop_sign() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stop_sign();
  private:
  const std::string& _internal_stop_sign(int index) const;
  std::string* _internal_add_stop_sign();
  public:

  // repeated string yield = 6;
  int yield_size() const;
  private:
  int _internal_yield_size() const;
  public:
  void clear_yield();
  const std::string& yield(int index) const;
  std::string* mutable_yield(int index);
  void set_yield(int index, const std::string& value);
  void set_yield(int index, std::string&& value);
  void set_yield(int index, const char* value);
  void set_yield(int index, const char* value, size_t size);
  std::string* add_yield();
  void add_yield(const std::string& value);
  void add_yield(std::string&& value);
  void add_yield(const char* value);
  void add_yield(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& yield() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_yield();
  private:
  const std::string& _internal_yield(int index) const;
  std::string* _internal_add_yield();
  public:

  // repeated string overlap = 7;
  int overlap_size() const;
  private:
  int _internal_overlap_size() const;
  public:
  void clear_overlap();
  const std::string& overlap(int index) const;
  std::string* mutable_overlap(int index);
  void set_overlap(int index, const std::string& value);
  void set_overlap(int index, std::string&& value);
  void set_overlap(int index, const char* value);
  void set_overlap(int index, const char* value, size_t size);
  std::string* add_overlap();
  void add_overlap(const std::string& value);
  void add_overlap(std::string&& value);
  void add_overlap(const char* value);
  void add_overlap(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& overlap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_overlap();
  private:
  const std::string& _internal_overlap(int index) const;
  std::string* _internal_add_overlap();
  public:

  // repeated string road = 8;
  int road_size() const;
  private:
  int _internal_road_size() const;
  public:
  void clear_road();
  const std::string& road(int index) const;
  std::string* mutable_road(int index);
  void set_road(int index, const std::string& value);
  void set_road(int index, std::string&& value);
  void set_road(int index, const char* value);
  void set_road(int index, const char* value, size_t size);
  std::string* add_road();
  void add_road(const std::string& value);
  void add_road(std::string&& value);
  void add_road(const char* value);
  void add_road(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& road() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_road();
  private:
  const std::string& _internal_road(int index) const;
  std::string* _internal_add_road();
  public:

  // repeated string clear_area = 9;
  int clear_area_size() const;
  private:
  int _internal_clear_area_size() const;
  public:
  void clear_clear_area();
  const std::string& clear_area(int index) const;
  std::string* mutable_clear_area(int index);
  void set_clear_area(int index, const std::string& value);
  void set_clear_area(int index, std::string&& value);
  void set_clear_area(int index, const char* value);
  void set_clear_area(int index, const char* value, size_t size);
  std::string* add_clear_area();
  void add_clear_area(const std::string& value);
  void add_clear_area(std::string&& value);
  void add_clear_area(const char* value);
  void add_clear_area(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& clear_area() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_clear_area();
  private:
  const std::string& _internal_clear_area(int index) const;
  std::string* _internal_add_clear_area();
  public:

  // repeated string parking_space = 10;
  int parking_space_size() const;
  private:
  int _internal_parking_space_size() const;
  public:
  void clear_parking_space();
  const std::string& parking_space(int index) const;
  std::string* mutable_parking_space(int index);
  void set_parking_space(int index, const std::string& value);
  void set_parking_space(int index, std::string&& value);
  void set_parking_space(int index, const char* value);
  void set_parking_space(int index, const char* value, size_t size);
  std::string* add_parking_space();
  void add_parking_space(const std::string& value);
  void add_parking_space(std::string&& value);
  void add_parking_space(const char* value);
  void add_parking_space(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parking_space() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parking_space();
  private:
  const std::string& _internal_parking_space(int index) const;
  std::string* _internal_add_parking_space();
  public:

  // repeated string speed_bump = 11;
  int speed_bump_size() const;
  private:
  int _internal_speed_bump_size() const;
  public:
  void clear_speed_bump();
  const std::string& speed_bump(int index) const;
  std::string* mutable_speed_bump(int index);
  void set_speed_bump(int index, const std::string& value);
  void set_speed_bump(int index, std::string&& value);
  void set_speed_bump(int index, const char* value);
  void set_speed_bump(int index, const char* value, size_t size);
  std::string* add_speed_bump();
  void add_speed_bump(const std::string& value);
  void add_speed_bump(std::string&& value);
  void add_speed_bump(const char* value);
  void add_speed_bump(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& speed_bump() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_speed_bump();
  private:
  const std::string& _internal_speed_bump(int index) const;
  std::string* _internal_add_speed_bump();
  public:

  // repeated string pnc_junction = 12;
  int pnc_junction_size() const;
  private:
  int _internal_pnc_junction_size() const;
  public:
  void clear_pnc_junction();
  const std::string& pnc_junction(int index) const;
  std::string* mutable_pnc_junction(int index);
  void set_pnc_junction(int index, const std::string& value);
  void set_pnc_junction(int index, std::string&& value);
  void set_pnc_junction(int index, const char* value);
  void set_pnc_junction(int index, const char* value, size_t size);
  std::string* add_pnc_junction();
  void add_pnc_junction(const std::string& value);
  void add_pnc_junction(std::string&& value);
  void add_pnc_junction(const char* value);
  void add_pnc_junction(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pnc_junction() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pnc_junction();
  private:
  const std::string& _internal_pnc_junction(int index) const;
  std::string* _internal_add_pnc_junction();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.MapElementIds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lane_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> crosswalk_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> junction_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signal_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stop_sign_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> yield_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> overlap_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> road_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> clear_area_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parking_space_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> speed_bump_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pnc_junction_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class ControlData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ControlData) */ {
 public:
  ControlData();
  virtual ~ControlData();

  ControlData(const ControlData& from);
  ControlData(ControlData&& from) noexcept
    : ControlData() {
    *this = ::std::move(from);
  }

  inline ControlData& operator=(const ControlData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlData& operator=(ControlData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlData* internal_default_instance() {
    return reinterpret_cast<const ControlData*>(
               &_ControlData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ControlData& a, ControlData& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlData* New() const final {
    return CreateMaybeMessage<ControlData>(nullptr);
  }

  ControlData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlData& from);
  void MergeFrom(const ControlData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ControlData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentTargetPointFieldNumber = 5,
    kTimestampSecFieldNumber = 1,
    kStationErrorFieldNumber = 2,
    kLateralErrorFieldNumber = 3,
    kHeadingErrorFieldNumber = 4,
  };
  // optional .apollo.common.TrajectoryPoint current_target_point = 5;
  bool has_current_target_point() const;
  private:
  bool _internal_has_current_target_point() const;
  public:
  void clear_current_target_point();
  const ::apollo::common::TrajectoryPoint& current_target_point() const;
  ::apollo::common::TrajectoryPoint* release_current_target_point();
  ::apollo::common::TrajectoryPoint* mutable_current_target_point();
  void set_allocated_current_target_point(::apollo::common::TrajectoryPoint* current_target_point);
  private:
  const ::apollo::common::TrajectoryPoint& _internal_current_target_point() const;
  ::apollo::common::TrajectoryPoint* _internal_mutable_current_target_point();
  public:

  // optional double timestamp_sec = 1;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  double timestamp_sec() const;
  void set_timestamp_sec(double value);
  private:
  double _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(double value);
  public:

  // optional double station_error = 2;
  bool has_station_error() const;
  private:
  bool _internal_has_station_error() const;
  public:
  void clear_station_error();
  double station_error() const;
  void set_station_error(double value);
  private:
  double _internal_station_error() const;
  void _internal_set_station_error(double value);
  public:

  // optional double lateral_error = 3;
  bool has_lateral_error() const;
  private:
  bool _internal_has_lateral_error() const;
  public:
  void clear_lateral_error();
  double lateral_error() const;
  void set_lateral_error(double value);
  private:
  double _internal_lateral_error() const;
  void _internal_set_lateral_error(double value);
  public:

  // optional double heading_error = 4;
  bool has_heading_error() const;
  private:
  bool _internal_has_heading_error() const;
  public:
  void clear_heading_error();
  double heading_error() const;
  void set_heading_error(double value);
  private:
  double _internal_heading_error() const;
  void _internal_set_heading_error(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ControlData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::TrajectoryPoint* current_target_point_;
  double timestamp_sec_;
  double station_error_;
  double lateral_error_;
  double heading_error_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class Notification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Notification) */ {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notification* New() const final {
    return CreateMaybeMessage<Notification>(nullptr);
  }

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Notification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kTimestampSecFieldNumber = 1,
  };
  // optional .apollo.common.monitor.MonitorMessageItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::apollo::common::monitor::MonitorMessageItem& item() const;
  ::apollo::common::monitor::MonitorMessageItem* release_item();
  ::apollo::common::monitor::MonitorMessageItem* mutable_item();
  void set_allocated_item(::apollo::common::monitor::MonitorMessageItem* item);
  private:
  const ::apollo::common::monitor::MonitorMessageItem& _internal_item() const;
  ::apollo::common::monitor::MonitorMessageItem* _internal_mutable_item();
  public:

  // optional double timestamp_sec = 1;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  double timestamp_sec() const;
  void set_timestamp_sec(double value);
  private:
  double _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Notification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::monitor::MonitorMessageItem* item_;
  double timestamp_sec_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// -------------------------------------------------------------------

class SimulationWorld_LatencyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimulationWorld_LatencyEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Latency,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SimulationWorld_LatencyEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Latency,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SimulationWorld_LatencyEntry_DoNotUse();
  SimulationWorld_LatencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SimulationWorld_LatencyEntry_DoNotUse& other);
  static const SimulationWorld_LatencyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SimulationWorld_LatencyEntry_DoNotUse*>(&_SimulationWorld_LatencyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.SimulationWorld.LatencyEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class SimulationWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.SimulationWorld) */ {
 public:
  SimulationWorld();
  virtual ~SimulationWorld();

  SimulationWorld(const SimulationWorld& from);
  SimulationWorld(SimulationWorld&& from) noexcept
    : SimulationWorld() {
    *this = ::std::move(from);
  }

  inline SimulationWorld& operator=(const SimulationWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationWorld& operator=(SimulationWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulationWorld* internal_default_instance() {
    return reinterpret_cast<const SimulationWorld*>(
               &_SimulationWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SimulationWorld& a, SimulationWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationWorld* New() const final {
    return CreateMaybeMessage<SimulationWorld>(nullptr);
  }

  SimulationWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationWorld& from);
  void MergeFrom(const SimulationWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.SimulationWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 3,
    kRoutePathFieldNumber = 6,
    kPlanningTrajectoryFieldNumber = 8,
    kNotificationFieldNumber = 14,
    kLatencyFieldNumber = 16,
    kNavigationPathFieldNumber = 24,
    kEngageAdviceFieldNumber = 15,
    kAutoDrivingCarFieldNumber = 4,
    kTrafficSignalFieldNumber = 5,
    kMainStopFieldNumber = 9,
    kMainDecisionFieldNumber = 10,
    kDelayFieldNumber = 12,
    kMonitorFieldNumber = 13,
    kMapElementIdsFieldNumber = 17,
    kPlanningDataFieldNumber = 20,
    kGpsFieldNumber = 21,
    kLaneMarkerFieldNumber = 22,
    kControlDataFieldNumber = 23,
    kShadowLocalizationFieldNumber = 26,
    kTimestampFieldNumber = 1,
    kRoutingTimeFieldNumber = 7,
    kSpeedLimitFieldNumber = 11,
    kMapHashFieldNumber = 18,
    kMapRadiusFieldNumber = 19,
    kSequenceNumFieldNumber = 2,
    kIsRssSafeFieldNumber = 25,
  };
  // repeated .apollo.dreamview.Object object = 3;
  int object_size() const;
  private:
  int _internal_object_size() const;
  public:
  void clear_object();
  ::apollo::dreamview::Object* mutable_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >*
      mutable_object();
  private:
  const ::apollo::dreamview::Object& _internal_object(int index) const;
  ::apollo::dreamview::Object* _internal_add_object();
  public:
  const ::apollo::dreamview::Object& object(int index) const;
  ::apollo::dreamview::Object* add_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >&
      object() const;

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  int route_path_size() const;
  private:
  int _internal_route_path_size() const;
  public:
  void clear_route_path();
  ::apollo::dreamview::RoutePath* mutable_route_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::RoutePath >*
      mutable_route_path();
  private:
  const ::apollo::dreamview::RoutePath& _internal_route_path(int index) const;
  ::apollo::dreamview::RoutePath* _internal_add_route_path();
  public:
  const ::apollo::dreamview::RoutePath& route_path(int index) const;
  ::apollo::dreamview::RoutePath* add_route_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::RoutePath >&
      route_path() const;

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  int planning_trajectory_size() const;
  private:
  int _internal_planning_trajectory_size() const;
  public:
  void clear_planning_trajectory();
  ::apollo::dreamview::Object* mutable_planning_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >*
      mutable_planning_trajectory();
  private:
  const ::apollo::dreamview::Object& _internal_planning_trajectory(int index) const;
  ::apollo::dreamview::Object* _internal_add_planning_trajectory();
  public:
  const ::apollo::dreamview::Object& planning_trajectory(int index) const;
  ::apollo::dreamview::Object* add_planning_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >&
      planning_trajectory() const;

  // repeated .apollo.dreamview.Notification notification = 14;
  int notification_size() const;
  private:
  int _internal_notification_size() const;
  public:
  void clear_notification();
  ::apollo::dreamview::Notification* mutable_notification(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Notification >*
      mutable_notification();
  private:
  const ::apollo::dreamview::Notification& _internal_notification(int index) const;
  ::apollo::dreamview::Notification* _internal_add_notification();
  public:
  const ::apollo::dreamview::Notification& notification(int index) const;
  ::apollo::dreamview::Notification* add_notification();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Notification >&
      notification() const;

  // map<string, .apollo.dreamview.Latency> latency = 16;
  int latency_size() const;
  private:
  int _internal_latency_size() const;
  public:
  void clear_latency();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >&
      _internal_latency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >*
      _internal_mutable_latency();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >&
      latency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >*
      mutable_latency();

  // repeated .apollo.common.Path navigation_path = 24;
  int navigation_path_size() const;
  private:
  int _internal_navigation_path_size() const;
  public:
  void clear_navigation_path();
  ::apollo::common::Path* mutable_navigation_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >*
      mutable_navigation_path();
  private:
  const ::apollo::common::Path& _internal_navigation_path(int index) const;
  ::apollo::common::Path* _internal_add_navigation_path();
  public:
  const ::apollo::common::Path& navigation_path(int index) const;
  ::apollo::common::Path* add_navigation_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >&
      navigation_path() const;

  // optional string engage_advice = 15;
  bool has_engage_advice() const;
  private:
  bool _internal_has_engage_advice() const;
  public:
  void clear_engage_advice();
  const std::string& engage_advice() const;
  void set_engage_advice(const std::string& value);
  void set_engage_advice(std::string&& value);
  void set_engage_advice(const char* value);
  void set_engage_advice(const char* value, size_t size);
  std::string* mutable_engage_advice();
  std::string* release_engage_advice();
  void set_allocated_engage_advice(std::string* engage_advice);
  private:
  const std::string& _internal_engage_advice() const;
  void _internal_set_engage_advice(const std::string& value);
  std::string* _internal_mutable_engage_advice();
  public:

  // optional .apollo.dreamview.Object auto_driving_car = 4;
  bool has_auto_driving_car() const;
  private:
  bool _internal_has_auto_driving_car() const;
  public:
  void clear_auto_driving_car();
  const ::apollo::dreamview::Object& auto_driving_car() const;
  ::apollo::dreamview::Object* release_auto_driving_car();
  ::apollo::dreamview::Object* mutable_auto_driving_car();
  void set_allocated_auto_driving_car(::apollo::dreamview::Object* auto_driving_car);
  private:
  const ::apollo::dreamview::Object& _internal_auto_driving_car() const;
  ::apollo::dreamview::Object* _internal_mutable_auto_driving_car();
  public:

  // optional .apollo.dreamview.Object traffic_signal = 5;
  bool has_traffic_signal() const;
  private:
  bool _internal_has_traffic_signal() const;
  public:
  void clear_traffic_signal();
  const ::apollo::dreamview::Object& traffic_signal() const;
  ::apollo::dreamview::Object* release_traffic_signal();
  ::apollo::dreamview::Object* mutable_traffic_signal();
  void set_allocated_traffic_signal(::apollo::dreamview::Object* traffic_signal);
  private:
  const ::apollo::dreamview::Object& _internal_traffic_signal() const;
  ::apollo::dreamview::Object* _internal_mutable_traffic_signal();
  public:

  // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_main_stop() const;
  private:
  bool _internal_has_main_stop() const;
  public:
  PROTOBUF_DEPRECATED void clear_main_stop();
  PROTOBUF_DEPRECATED const ::apollo::dreamview::Object& main_stop() const;
  PROTOBUF_DEPRECATED ::apollo::dreamview::Object* release_main_stop();
  PROTOBUF_DEPRECATED ::apollo::dreamview::Object* mutable_main_stop();
  PROTOBUF_DEPRECATED void set_allocated_main_stop(::apollo::dreamview::Object* main_stop);
  private:
  const ::apollo::dreamview::Object& _internal_main_stop() const;
  ::apollo::dreamview::Object* _internal_mutable_main_stop();
  public:

  // optional .apollo.dreamview.Object main_decision = 10;
  bool has_main_decision() const;
  private:
  bool _internal_has_main_decision() const;
  public:
  void clear_main_decision();
  const ::apollo::dreamview::Object& main_decision() const;
  ::apollo::dreamview::Object* release_main_decision();
  ::apollo::dreamview::Object* mutable_main_decision();
  void set_allocated_main_decision(::apollo::dreamview::Object* main_decision);
  private:
  const ::apollo::dreamview::Object& _internal_main_decision() const;
  ::apollo::dreamview::Object* _internal_mutable_main_decision();
  public:

  // optional .apollo.dreamview.DelaysInMs delay = 12;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  const ::apollo::dreamview::DelaysInMs& delay() const;
  ::apollo::dreamview::DelaysInMs* release_delay();
  ::apollo::dreamview::DelaysInMs* mutable_delay();
  void set_allocated_delay(::apollo::dreamview::DelaysInMs* delay);
  private:
  const ::apollo::dreamview::DelaysInMs& _internal_delay() const;
  ::apollo::dreamview::DelaysInMs* _internal_mutable_delay();
  public:

  // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_monitor() const;
  private:
  bool _internal_has_monitor() const;
  public:
  PROTOBUF_DEPRECATED void clear_monitor();
  PROTOBUF_DEPRECATED const ::apollo::common::monitor::MonitorMessage& monitor() const;
  PROTOBUF_DEPRECATED ::apollo::common::monitor::MonitorMessage* release_monitor();
  PROTOBUF_DEPRECATED ::apollo::common::monitor::MonitorMessage* mutable_monitor();
  PROTOBUF_DEPRECATED void set_allocated_monitor(::apollo::common::monitor::MonitorMessage* monitor);
  private:
  const ::apollo::common::monitor::MonitorMessage& _internal_monitor() const;
  ::apollo::common::monitor::MonitorMessage* _internal_mutable_monitor();
  public:

  // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
  bool has_map_element_ids() const;
  private:
  bool _internal_has_map_element_ids() const;
  public:
  void clear_map_element_ids();
  const ::apollo::dreamview::MapElementIds& map_element_ids() const;
  ::apollo::dreamview::MapElementIds* release_map_element_ids();
  ::apollo::dreamview::MapElementIds* mutable_map_element_ids();
  void set_allocated_map_element_ids(::apollo::dreamview::MapElementIds* map_element_ids);
  private:
  const ::apollo::dreamview::MapElementIds& _internal_map_element_ids() const;
  ::apollo::dreamview::MapElementIds* _internal_mutable_map_element_ids();
  public:

  // optional .apollo.planning_internal.PlanningData planning_data = 20;
  bool has_planning_data() const;
  private:
  bool _internal_has_planning_data() const;
  public:
  void clear_planning_data();
  const ::apollo::planning_internal::PlanningData& planning_data() const;
  ::apollo::planning_internal::PlanningData* release_planning_data();
  ::apollo::planning_internal::PlanningData* mutable_planning_data();
  void set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data);
  private:
  const ::apollo::planning_internal::PlanningData& _internal_planning_data() const;
  ::apollo::planning_internal::PlanningData* _internal_mutable_planning_data();
  public:

  // optional .apollo.dreamview.Object gps = 21;
  bool has_gps() const;
  private:
  bool _internal_has_gps() const;
  public:
  void clear_gps();
  const ::apollo::dreamview::Object& gps() const;
  ::apollo::dreamview::Object* release_gps();
  ::apollo::dreamview::Object* mutable_gps();
  void set_allocated_gps(::apollo::dreamview::Object* gps);
  private:
  const ::apollo::dreamview::Object& _internal_gps() const;
  ::apollo::dreamview::Object* _internal_mutable_gps();
  public:

  // optional .apollo.perception.LaneMarkers lane_marker = 22;
  bool has_lane_marker() const;
  private:
  bool _internal_has_lane_marker() const;
  public:
  void clear_lane_marker();
  const ::apollo::perception::LaneMarkers& lane_marker() const;
  ::apollo::perception::LaneMarkers* release_lane_marker();
  ::apollo::perception::LaneMarkers* mutable_lane_marker();
  void set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker);
  private:
  const ::apollo::perception::LaneMarkers& _internal_lane_marker() const;
  ::apollo::perception::LaneMarkers* _internal_mutable_lane_marker();
  public:

  // optional .apollo.dreamview.ControlData control_data = 23;
  bool has_control_data() const;
  private:
  bool _internal_has_control_data() const;
  public:
  void clear_control_data();
  const ::apollo::dreamview::ControlData& control_data() const;
  ::apollo::dreamview::ControlData* release_control_data();
  ::apollo::dreamview::ControlData* mutable_control_data();
  void set_allocated_control_data(::apollo::dreamview::ControlData* control_data);
  private:
  const ::apollo::dreamview::ControlData& _internal_control_data() const;
  ::apollo::dreamview::ControlData* _internal_mutable_control_data();
  public:

  // optional .apollo.dreamview.Object shadow_localization = 26;
  bool has_shadow_localization() const;
  private:
  bool _internal_has_shadow_localization() const;
  public:
  void clear_shadow_localization();
  const ::apollo::dreamview::Object& shadow_localization() const;
  ::apollo::dreamview::Object* release_shadow_localization();
  ::apollo::dreamview::Object* mutable_shadow_localization();
  void set_allocated_shadow_localization(::apollo::dreamview::Object* shadow_localization);
  private:
  const ::apollo::dreamview::Object& _internal_shadow_localization() const;
  ::apollo::dreamview::Object* _internal_mutable_shadow_localization();
  public:

  // optional double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional double routing_time = 7;
  bool has_routing_time() const;
  private:
  bool _internal_has_routing_time() const;
  public:
  void clear_routing_time();
  double routing_time() const;
  void set_routing_time(double value);
  private:
  double _internal_routing_time() const;
  void _internal_set_routing_time(double value);
  public:

  // optional double speed_limit = 11;
  bool has_speed_limit() const;
  private:
  bool _internal_has_speed_limit() const;
  public:
  void clear_speed_limit();
  double speed_limit() const;
  void set_speed_limit(double value);
  private:
  double _internal_speed_limit() const;
  void _internal_set_speed_limit(double value);
  public:

  // optional uint64 map_hash = 18;
  bool has_map_hash() const;
  private:
  bool _internal_has_map_hash() const;
  public:
  void clear_map_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 map_hash() const;
  void set_map_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_map_hash() const;
  void _internal_set_map_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double map_radius = 19;
  bool has_map_radius() const;
  private:
  bool _internal_has_map_radius() const;
  public:
  void clear_map_radius();
  double map_radius() const;
  void set_map_radius(double value);
  private:
  double _internal_map_radius() const;
  void _internal_set_map_radius(double value);
  public:

  // optional uint32 sequence_num = 2;
  bool has_sequence_num() const;
  private:
  bool _internal_has_sequence_num() const;
  public:
  void clear_sequence_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_num() const;
  void set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_num() const;
  void _internal_set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_rss_safe = 25 [default = true];
  bool has_is_rss_safe() const;
  private:
  bool _internal_has_is_rss_safe() const;
  public:
  void clear_is_rss_safe();
  bool is_rss_safe() const;
  void set_is_rss_safe(bool value);
  private:
  bool _internal_is_rss_safe() const;
  void _internal_set_is_rss_safe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.SimulationWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object > object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::RoutePath > route_path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object > planning_trajectory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Notification > notification_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SimulationWorld_LatencyEntry_DoNotUse,
      std::string, ::apollo::dreamview::Latency,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > latency_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path > navigation_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engage_advice_;
  ::apollo::dreamview::Object* auto_driving_car_;
  ::apollo::dreamview::Object* traffic_signal_;
  ::apollo::dreamview::Object* main_stop_;
  ::apollo::dreamview::Object* main_decision_;
  ::apollo::dreamview::DelaysInMs* delay_;
  ::apollo::common::monitor::MonitorMessage* monitor_;
  ::apollo::dreamview::MapElementIds* map_element_ids_;
  ::apollo::planning_internal::PlanningData* planning_data_;
  ::apollo::dreamview::Object* gps_;
  ::apollo::perception::LaneMarkers* lane_marker_;
  ::apollo::dreamview::ControlData* control_data_;
  ::apollo::dreamview::Object* shadow_localization_;
  double timestamp_;
  double routing_time_;
  double speed_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 map_hash_;
  double map_radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_num_;
  bool is_rss_safe_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolygonPoint

// optional double x = 1;
inline bool PolygonPoint::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PolygonPoint::has_x() const {
  return _internal_has_x();
}
inline void PolygonPoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PolygonPoint::_internal_x() const {
  return x_;
}
inline double PolygonPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.x)
  return _internal_x();
}
inline void PolygonPoint::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void PolygonPoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.x)
}

// optional double y = 2;
inline bool PolygonPoint::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PolygonPoint::has_y() const {
  return _internal_has_y();
}
inline void PolygonPoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PolygonPoint::_internal_y() const {
  return y_;
}
inline double PolygonPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.y)
  return _internal_y();
}
inline void PolygonPoint::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void PolygonPoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.y)
}

// optional double z = 3 [default = 0];
inline bool PolygonPoint::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PolygonPoint::has_z() const {
  return _internal_has_z();
}
inline void PolygonPoint::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PolygonPoint::_internal_z() const {
  return z_;
}
inline double PolygonPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PolygonPoint.z)
  return _internal_z();
}
inline void PolygonPoint::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void PolygonPoint::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.PolygonPoint.z)
}

// -------------------------------------------------------------------

// Prediction

// optional double probability = 1;
inline bool Prediction::_internal_has_probability() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Prediction::has_probability() const {
  return _internal_has_probability();
}
inline void Prediction::clear_probability() {
  probability_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Prediction::_internal_probability() const {
  return probability_;
}
inline double Prediction::probability() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Prediction.probability)
  return _internal_probability();
}
inline void Prediction::_internal_set_probability(double value) {
  _has_bits_[0] |= 0x00000001u;
  probability_ = value;
}
inline void Prediction::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Prediction.probability)
}

// repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
inline int Prediction::_internal_predicted_trajectory_size() const {
  return predicted_trajectory_.size();
}
inline int Prediction::predicted_trajectory_size() const {
  return _internal_predicted_trajectory_size();
}
inline void Prediction::clear_predicted_trajectory() {
  predicted_trajectory_.Clear();
}
inline ::apollo::dreamview::PolygonPoint* Prediction::mutable_predicted_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Prediction::mutable_predicted_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Prediction.predicted_trajectory)
  return &predicted_trajectory_;
}
inline const ::apollo::dreamview::PolygonPoint& Prediction::_internal_predicted_trajectory(int index) const {
  return predicted_trajectory_.Get(index);
}
inline const ::apollo::dreamview::PolygonPoint& Prediction::predicted_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Prediction.predicted_trajectory)
  return _internal_predicted_trajectory(index);
}
inline ::apollo::dreamview::PolygonPoint* Prediction::_internal_add_predicted_trajectory() {
  return predicted_trajectory_.Add();
}
inline ::apollo::dreamview::PolygonPoint* Prediction::add_predicted_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Prediction.predicted_trajectory)
  return _internal_add_predicted_trajectory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Prediction::predicted_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Prediction.predicted_trajectory)
  return predicted_trajectory_;
}

// -------------------------------------------------------------------

// Decision

// optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
inline bool Decision::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Decision::has_type() const {
  return _internal_has_type();
}
inline void Decision::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::dreamview::Decision_Type Decision::_internal_type() const {
  return static_cast< ::apollo::dreamview::Decision_Type >(type_);
}
inline ::apollo::dreamview::Decision_Type Decision::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.type)
  return _internal_type();
}
inline void Decision::_internal_set_type(::apollo::dreamview::Decision_Type value) {
  assert(::apollo::dreamview::Decision_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void Decision::set_type(::apollo::dreamview::Decision_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.type)
}

// repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
inline int Decision::_internal_polygon_point_size() const {
  return polygon_point_.size();
}
inline int Decision::polygon_point_size() const {
  return _internal_polygon_point_size();
}
inline void Decision::clear_polygon_point() {
  polygon_point_.Clear();
}
inline ::apollo::dreamview::PolygonPoint* Decision::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Decision.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Decision::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Decision.polygon_point)
  return &polygon_point_;
}
inline const ::apollo::dreamview::PolygonPoint& Decision::_internal_polygon_point(int index) const {
  return polygon_point_.Get(index);
}
inline const ::apollo::dreamview::PolygonPoint& Decision::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.polygon_point)
  return _internal_polygon_point(index);
}
inline ::apollo::dreamview::PolygonPoint* Decision::_internal_add_polygon_point() {
  return polygon_point_.Add();
}
inline ::apollo::dreamview::PolygonPoint* Decision::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Decision.polygon_point)
  return _internal_add_polygon_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Decision::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Decision.polygon_point)
  return polygon_point_;
}

// optional double heading = 3;
inline bool Decision::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Decision::has_heading() const {
  return _internal_has_heading();
}
inline void Decision::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Decision::_internal_heading() const {
  return heading_;
}
inline double Decision::heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.heading)
  return _internal_heading();
}
inline void Decision::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000001u;
  heading_ = value;
}
inline void Decision::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.heading)
}

// optional double latitude = 4;
inline bool Decision::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Decision::has_latitude() const {
  return _internal_has_latitude();
}
inline void Decision::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Decision::_internal_latitude() const {
  return latitude_;
}
inline double Decision::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.latitude)
  return _internal_latitude();
}
inline void Decision::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  latitude_ = value;
}
inline void Decision::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.latitude)
}

// optional double longitude = 5;
inline bool Decision::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Decision::has_longitude() const {
  return _internal_has_longitude();
}
inline void Decision::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Decision::_internal_longitude() const {
  return longitude_;
}
inline double Decision::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.longitude)
  return _internal_longitude();
}
inline void Decision::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000004u;
  longitude_ = value;
}
inline void Decision::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.longitude)
}

// optional double position_x = 6;
inline bool Decision::_internal_has_position_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Decision::has_position_x() const {
  return _internal_has_position_x();
}
inline void Decision::clear_position_x() {
  position_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Decision::_internal_position_x() const {
  return position_x_;
}
inline double Decision::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.position_x)
  return _internal_position_x();
}
inline void Decision::_internal_set_position_x(double value) {
  _has_bits_[0] |= 0x00000008u;
  position_x_ = value;
}
inline void Decision::set_position_x(double value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.position_x)
}

// optional double position_y = 7;
inline bool Decision::_internal_has_position_y() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Decision::has_position_y() const {
  return _internal_has_position_y();
}
inline void Decision::clear_position_y() {
  position_y_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Decision::_internal_position_y() const {
  return position_y_;
}
inline double Decision::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.position_y)
  return _internal_position_y();
}
inline void Decision::_internal_set_position_y(double value) {
  _has_bits_[0] |= 0x00000040u;
  position_y_ = value;
}
inline void Decision::set_position_y(double value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.position_y)
}

// optional double length = 8 [default = 2.8];
inline bool Decision::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Decision::has_length() const {
  return _internal_has_length();
}
inline void Decision::clear_length() {
  length_ = 2.8;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Decision::_internal_length() const {
  return length_;
}
inline double Decision::length() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.length)
  return _internal_length();
}
inline void Decision::_internal_set_length(double value) {
  _has_bits_[0] |= 0x00000100u;
  length_ = value;
}
inline void Decision::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.length)
}

// optional double width = 9 [default = 1.4];
inline bool Decision::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Decision::has_width() const {
  return _internal_has_width();
}
inline void Decision::clear_width() {
  width_ = 1.4;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Decision::_internal_width() const {
  return width_;
}
inline double Decision::width() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.width)
  return _internal_width();
}
inline void Decision::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000200u;
  width_ = value;
}
inline void Decision::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.width)
}

// optional double height = 10 [default = 1.8];
inline bool Decision::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Decision::has_height() const {
  return _internal_has_height();
}
inline void Decision::clear_height() {
  height_ = 1.8;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Decision::_internal_height() const {
  return height_;
}
inline double Decision::height() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.height)
  return _internal_height();
}
inline void Decision::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000400u;
  height_ = value;
}
inline void Decision::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.height)
}

// optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
inline bool Decision::_internal_has_stopreason() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Decision::has_stopreason() const {
  return _internal_has_stopreason();
}
inline void Decision::clear_stopreason() {
  stopreason_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::dreamview::Decision_StopReasonCode Decision::_internal_stopreason() const {
  return static_cast< ::apollo::dreamview::Decision_StopReasonCode >(stopreason_);
}
inline ::apollo::dreamview::Decision_StopReasonCode Decision::stopreason() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.stopReason)
  return _internal_stopreason();
}
inline void Decision::_internal_set_stopreason(::apollo::dreamview::Decision_StopReasonCode value) {
  assert(::apollo::dreamview::Decision_StopReasonCode_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  stopreason_ = value;
}
inline void Decision::set_stopreason(::apollo::dreamview::Decision_StopReasonCode value) {
  _internal_set_stopreason(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.stopReason)
}

// optional .apollo.routing.ChangeLaneType change_lane_type = 12;
inline bool Decision::_internal_has_change_lane_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Decision::has_change_lane_type() const {
  return _internal_has_change_lane_type();
}
inline void Decision::clear_change_lane_type() {
  change_lane_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::routing::ChangeLaneType Decision::_internal_change_lane_type() const {
  return static_cast< ::apollo::routing::ChangeLaneType >(change_lane_type_);
}
inline ::apollo::routing::ChangeLaneType Decision::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Decision.change_lane_type)
  return _internal_change_lane_type();
}
inline void Decision::_internal_set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  change_lane_type_ = value;
}
inline void Decision::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  _internal_set_change_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Decision.change_lane_type)
}

// -------------------------------------------------------------------

// Object

// optional string id = 1;
inline bool Object::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Object::has_id() const {
  return _internal_has_id();
}
inline void Object::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Object::id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.id)
  return _internal_id();
}
inline void Object::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.id)
}
inline std::string* Object::mutable_id() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.id)
  return _internal_mutable_id();
}
inline const std::string& Object::_internal_id() const {
  return id_.GetNoArena();
}
inline void Object::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Object.id)
}
inline void Object::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.id)
}
inline void Object::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.id)
}
inline std::string* Object::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_id() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.id)
}

// repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
inline int Object::_internal_polygon_point_size() const {
  return polygon_point_.size();
}
inline int Object::polygon_point_size() const {
  return _internal_polygon_point_size();
}
inline void Object::clear_polygon_point() {
  polygon_point_.Clear();
}
inline ::apollo::dreamview::PolygonPoint* Object::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
Object::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.polygon_point)
  return &polygon_point_;
}
inline const ::apollo::dreamview::PolygonPoint& Object::_internal_polygon_point(int index) const {
  return polygon_point_.Get(index);
}
inline const ::apollo::dreamview::PolygonPoint& Object::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.polygon_point)
  return _internal_polygon_point(index);
}
inline ::apollo::dreamview::PolygonPoint* Object::_internal_add_polygon_point() {
  return polygon_point_.Add();
}
inline ::apollo::dreamview::PolygonPoint* Object::add_polygon_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.polygon_point)
  return _internal_add_polygon_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
Object::polygon_point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.polygon_point)
  return polygon_point_;
}

// optional double heading = 3;
inline bool Object::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Object::has_heading() const {
  return _internal_has_heading();
}
inline void Object::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Object::_internal_heading() const {
  return heading_;
}
inline double Object::heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.heading)
  return _internal_heading();
}
inline void Object::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000008u;
  heading_ = value;
}
inline void Object::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.heading)
}

// optional double latitude = 4;
inline bool Object::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Object::has_latitude() const {
  return _internal_has_latitude();
}
inline void Object::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Object::_internal_latitude() const {
  return latitude_;
}
inline double Object::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.latitude)
  return _internal_latitude();
}
inline void Object::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000010u;
  latitude_ = value;
}
inline void Object::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.latitude)
}

// optional double longitude = 5;
inline bool Object::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Object::has_longitude() const {
  return _internal_has_longitude();
}
inline void Object::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Object::_internal_longitude() const {
  return longitude_;
}
inline double Object::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.longitude)
  return _internal_longitude();
}
inline void Object::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000020u;
  longitude_ = value;
}
inline void Object::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.longitude)
}

// optional double position_x = 6;
inline bool Object::_internal_has_position_x() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Object::has_position_x() const {
  return _internal_has_position_x();
}
inline void Object::clear_position_x() {
  position_x_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Object::_internal_position_x() const {
  return position_x_;
}
inline double Object::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.position_x)
  return _internal_position_x();
}
inline void Object::_internal_set_position_x(double value) {
  _has_bits_[0] |= 0x00000040u;
  position_x_ = value;
}
inline void Object::set_position_x(double value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.position_x)
}

// optional double position_y = 7;
inline bool Object::_internal_has_position_y() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Object::has_position_y() const {
  return _internal_has_position_y();
}
inline void Object::clear_position_y() {
  position_y_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Object::_internal_position_y() const {
  return position_y_;
}
inline double Object::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.position_y)
  return _internal_position_y();
}
inline void Object::_internal_set_position_y(double value) {
  _has_bits_[0] |= 0x00000080u;
  position_y_ = value;
}
inline void Object::set_position_y(double value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.position_y)
}

// optional double length = 8 [default = 2.8];
inline bool Object::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Object::has_length() const {
  return _internal_has_length();
}
inline void Object::clear_length() {
  length_ = 2.8;
  _has_bits_[0] &= ~0x08000000u;
}
inline double Object::_internal_length() const {
  return length_;
}
inline double Object::length() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.length)
  return _internal_length();
}
inline void Object::_internal_set_length(double value) {
  _has_bits_[0] |= 0x08000000u;
  length_ = value;
}
inline void Object::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.length)
}

// optional double width = 9 [default = 1.4];
inline bool Object::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool Object::has_width() const {
  return _internal_has_width();
}
inline void Object::clear_width() {
  width_ = 1.4;
  _has_bits_[0] &= ~0x10000000u;
}
inline double Object::_internal_width() const {
  return width_;
}
inline double Object::width() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.width)
  return _internal_width();
}
inline void Object::_internal_set_width(double value) {
  _has_bits_[0] |= 0x10000000u;
  width_ = value;
}
inline void Object::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.width)
}

// optional double height = 10 [default = 1.8];
inline bool Object::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool Object::has_height() const {
  return _internal_has_height();
}
inline void Object::clear_height() {
  height_ = 1.8;
  _has_bits_[0] &= ~0x20000000u;
}
inline double Object::_internal_height() const {
  return height_;
}
inline double Object::height() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.height)
  return _internal_height();
}
inline void Object::_internal_set_height(double value) {
  _has_bits_[0] |= 0x20000000u;
  height_ = value;
}
inline void Object::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.height)
}

// optional double speed = 11;
inline bool Object::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Object::has_speed() const {
  return _internal_has_speed();
}
inline void Object::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Object::_internal_speed() const {
  return speed_;
}
inline double Object::speed() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed)
  return _internal_speed();
}
inline void Object::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000100u;
  speed_ = value;
}
inline void Object::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed)
}

// optional double speed_acceleration = 12;
inline bool Object::_internal_has_speed_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Object::has_speed_acceleration() const {
  return _internal_has_speed_acceleration();
}
inline void Object::clear_speed_acceleration() {
  speed_acceleration_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Object::_internal_speed_acceleration() const {
  return speed_acceleration_;
}
inline double Object::speed_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_acceleration)
  return _internal_speed_acceleration();
}
inline void Object::_internal_set_speed_acceleration(double value) {
  _has_bits_[0] |= 0x00000200u;
  speed_acceleration_ = value;
}
inline void Object::set_speed_acceleration(double value) {
  _internal_set_speed_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_acceleration)
}

// optional double speed_jerk = 13;
inline bool Object::_internal_has_speed_jerk() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Object::has_speed_jerk() const {
  return _internal_has_speed_jerk();
}
inline void Object::clear_speed_jerk() {
  speed_jerk_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Object::_internal_speed_jerk() const {
  return speed_jerk_;
}
inline double Object::speed_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_jerk)
  return _internal_speed_jerk();
}
inline void Object::_internal_set_speed_jerk(double value) {
  _has_bits_[0] |= 0x00000400u;
  speed_jerk_ = value;
}
inline void Object::set_speed_jerk(double value) {
  _internal_set_speed_jerk(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_jerk)
}

// optional double spin = 14;
inline bool Object::_internal_has_spin() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Object::has_spin() const {
  return _internal_has_spin();
}
inline void Object::clear_spin() {
  spin_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Object::_internal_spin() const {
  return spin_;
}
inline double Object::spin() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin)
  return _internal_spin();
}
inline void Object::_internal_set_spin(double value) {
  _has_bits_[0] |= 0x00000800u;
  spin_ = value;
}
inline void Object::set_spin(double value) {
  _internal_set_spin(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin)
}

// optional double spin_acceleration = 15;
inline bool Object::_internal_has_spin_acceleration() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Object::has_spin_acceleration() const {
  return _internal_has_spin_acceleration();
}
inline void Object::clear_spin_acceleration() {
  spin_acceleration_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Object::_internal_spin_acceleration() const {
  return spin_acceleration_;
}
inline double Object::spin_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin_acceleration)
  return _internal_spin_acceleration();
}
inline void Object::_internal_set_spin_acceleration(double value) {
  _has_bits_[0] |= 0x00001000u;
  spin_acceleration_ = value;
}
inline void Object::set_spin_acceleration(double value) {
  _internal_set_spin_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin_acceleration)
}

// optional double spin_jerk = 16;
inline bool Object::_internal_has_spin_jerk() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Object::has_spin_jerk() const {
  return _internal_has_spin_jerk();
}
inline void Object::clear_spin_jerk() {
  spin_jerk_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double Object::_internal_spin_jerk() const {
  return spin_jerk_;
}
inline double Object::spin_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.spin_jerk)
  return _internal_spin_jerk();
}
inline void Object::_internal_set_spin_jerk(double value) {
  _has_bits_[0] |= 0x00002000u;
  spin_jerk_ = value;
}
inline void Object::set_spin_jerk(double value) {
  _internal_set_spin_jerk(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.spin_jerk)
}

// optional double speed_heading = 17;
inline bool Object::_internal_has_speed_heading() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Object::has_speed_heading() const {
  return _internal_has_speed_heading();
}
inline void Object::clear_speed_heading() {
  speed_heading_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Object::_internal_speed_heading() const {
  return speed_heading_;
}
inline double Object::speed_heading() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.speed_heading)
  return _internal_speed_heading();
}
inline void Object::_internal_set_speed_heading(double value) {
  _has_bits_[0] |= 0x00004000u;
  speed_heading_ = value;
}
inline void Object::set_speed_heading(double value) {
  _internal_set_speed_heading(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.speed_heading)
}

// optional double kappa = 18;
inline bool Object::_internal_has_kappa() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Object::has_kappa() const {
  return _internal_has_kappa();
}
inline void Object::clear_kappa() {
  kappa_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double Object::_internal_kappa() const {
  return kappa_;
}
inline double Object::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.kappa)
  return _internal_kappa();
}
inline void Object::_internal_set_kappa(double value) {
  _has_bits_[0] |= 0x00008000u;
  kappa_ = value;
}
inline void Object::set_kappa(double value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.kappa)
}

// optional double dkappa = 35;
inline bool Object::_internal_has_dkappa() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Object::has_dkappa() const {
  return _internal_has_dkappa();
}
inline void Object::clear_dkappa() {
  dkappa_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double Object::_internal_dkappa() const {
  return dkappa_;
}
inline double Object::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.dkappa)
  return _internal_dkappa();
}
inline void Object::_internal_set_dkappa(double value) {
  _has_bits_[0] |= 0x04000000u;
  dkappa_ = value;
}
inline void Object::set_dkappa(double value) {
  _internal_set_dkappa(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.dkappa)
}

// repeated string signal_set = 19;
inline int Object::_internal_signal_set_size() const {
  return signal_set_.size();
}
inline int Object::signal_set_size() const {
  return _internal_signal_set_size();
}
inline void Object::clear_signal_set() {
  signal_set_.Clear();
}
inline std::string* Object::add_signal_set() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.Object.signal_set)
  return _internal_add_signal_set();
}
inline const std::string& Object::_internal_signal_set(int index) const {
  return signal_set_.Get(index);
}
inline const std::string& Object::signal_set(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.signal_set)
  return _internal_signal_set(index);
}
inline std::string* Object::mutable_signal_set(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.signal_set)
  return signal_set_.Mutable(index);
}
inline void Object::set_signal_set(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.signal_set)
  signal_set_.Mutable(index)->assign(value);
}
inline void Object::set_signal_set(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.signal_set)
  signal_set_.Mutable(index)->assign(std::move(value));
}
inline void Object::set_signal_set(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signal_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.signal_set)
}
inline void Object::set_signal_set(int index, const char* value, size_t size) {
  signal_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.signal_set)
}
inline std::string* Object::_internal_add_signal_set() {
  return signal_set_.Add();
}
inline void Object::add_signal_set(const std::string& value) {
  signal_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.signal_set)
}
inline void Object::add_signal_set(std::string&& value) {
  signal_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.signal_set)
}
inline void Object::add_signal_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signal_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.Object.signal_set)
}
inline void Object::add_signal_set(const char* value, size_t size) {
  signal_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.Object.signal_set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Object::signal_set() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.signal_set)
  return signal_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Object::mutable_signal_set() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.signal_set)
  return &signal_set_;
}

// optional string current_signal = 20;
inline bool Object::_internal_has_current_signal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Object::has_current_signal() const {
  return _internal_has_current_signal();
}
inline void Object::clear_current_signal() {
  current_signal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Object::current_signal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.current_signal)
  return _internal_current_signal();
}
inline void Object::set_current_signal(const std::string& value) {
  _internal_set_current_signal(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.current_signal)
}
inline std::string* Object::mutable_current_signal() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.current_signal)
  return _internal_mutable_current_signal();
}
inline const std::string& Object::_internal_current_signal() const {
  return current_signal_.GetNoArena();
}
inline void Object::_internal_set_current_signal(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  current_signal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Object::set_current_signal(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  current_signal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Object.current_signal)
}
inline void Object::set_current_signal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  current_signal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Object.current_signal)
}
inline void Object::set_current_signal(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  current_signal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Object.current_signal)
}
inline std::string* Object::_internal_mutable_current_signal() {
  _has_bits_[0] |= 0x00000002u;
  return current_signal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Object::release_current_signal() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.current_signal)
  if (!_internal_has_current_signal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return current_signal_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_current_signal(std::string* current_signal) {
  if (current_signal != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_signal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_signal);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.current_signal)
}

// optional double timestamp_sec = 21;
inline bool Object::_internal_has_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Object::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void Object::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double Object::_internal_timestamp_sec() const {
  return timestamp_sec_;
}
inline double Object::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void Object::_internal_set_timestamp_sec(double value) {
  _has_bits_[0] |= 0x00010000u;
  timestamp_sec_ = value;
}
inline void Object::set_timestamp_sec(double value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.timestamp_sec)
}

// repeated .apollo.dreamview.Decision decision = 22;
inline int Object::_internal_decision_size() const {
  return decision_.size();
}
inline int Object::decision_size() const {
  return _internal_decision_size();
}
inline void Object::clear_decision() {
  decision_.Clear();
}
inline ::apollo::dreamview::Decision* Object::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.decision)
  return decision_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Decision >*
Object::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.decision)
  return &decision_;
}
inline const ::apollo::dreamview::Decision& Object::_internal_decision(int index) const {
  return decision_.Get(index);
}
inline const ::apollo::dreamview::Decision& Object::decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.decision)
  return _internal_decision(index);
}
inline ::apollo::dreamview::Decision* Object::_internal_add_decision() {
  return decision_.Add();
}
inline ::apollo::dreamview::Decision* Object::add_decision() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.decision)
  return _internal_add_decision();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Decision >&
Object::decision() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.decision)
  return decision_;
}

// optional bool yielded_obstacle = 32 [default = false];
inline bool Object::_internal_has_yielded_obstacle() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Object::has_yielded_obstacle() const {
  return _internal_has_yielded_obstacle();
}
inline void Object::clear_yielded_obstacle() {
  yielded_obstacle_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool Object::_internal_yielded_obstacle() const {
  return yielded_obstacle_;
}
inline bool Object::yielded_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.yielded_obstacle)
  return _internal_yielded_obstacle();
}
inline void Object::_internal_set_yielded_obstacle(bool value) {
  _has_bits_[0] |= 0x01000000u;
  yielded_obstacle_ = value;
}
inline void Object::set_yielded_obstacle(bool value) {
  _internal_set_yielded_obstacle(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.yielded_obstacle)
}

// optional double throttle_percentage = 23;
inline bool Object::_internal_has_throttle_percentage() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Object::has_throttle_percentage() const {
  return _internal_has_throttle_percentage();
}
inline void Object::clear_throttle_percentage() {
  throttle_percentage_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double Object::_internal_throttle_percentage() const {
  return throttle_percentage_;
}
inline double Object::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.throttle_percentage)
  return _internal_throttle_percentage();
}
inline void Object::_internal_set_throttle_percentage(double value) {
  _has_bits_[0] |= 0x00020000u;
  throttle_percentage_ = value;
}
inline void Object::set_throttle_percentage(double value) {
  _internal_set_throttle_percentage(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.throttle_percentage)
}

// optional double brake_percentage = 24;
inline bool Object::_internal_has_brake_percentage() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Object::has_brake_percentage() const {
  return _internal_has_brake_percentage();
}
inline void Object::clear_brake_percentage() {
  brake_percentage_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double Object::_internal_brake_percentage() const {
  return brake_percentage_;
}
inline double Object::brake_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.brake_percentage)
  return _internal_brake_percentage();
}
inline void Object::_internal_set_brake_percentage(double value) {
  _has_bits_[0] |= 0x00040000u;
  brake_percentage_ = value;
}
inline void Object::set_brake_percentage(double value) {
  _internal_set_brake_percentage(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.brake_percentage)
}

// optional double steering_percentage = 25;
inline bool Object::_internal_has_steering_percentage() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Object::has_steering_percentage() const {
  return _internal_has_steering_percentage();
}
inline void Object::clear_steering_percentage() {
  steering_percentage_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double Object::_internal_steering_percentage() const {
  return steering_percentage_;
}
inline double Object::steering_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.steering_percentage)
  return _internal_steering_percentage();
}
inline void Object::_internal_set_steering_percentage(double value) {
  _has_bits_[0] |= 0x00080000u;
  steering_percentage_ = value;
}
inline void Object::set_steering_percentage(double value) {
  _internal_set_steering_percentage(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.steering_percentage)
}

// optional double steering_angle = 26;
inline bool Object::_internal_has_steering_angle() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Object::has_steering_angle() const {
  return _internal_has_steering_angle();
}
inline void Object::clear_steering_angle() {
  steering_angle_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double Object::_internal_steering_angle() const {
  return steering_angle_;
}
inline double Object::steering_angle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.steering_angle)
  return _internal_steering_angle();
}
inline void Object::_internal_set_steering_angle(double value) {
  _has_bits_[0] |= 0x00100000u;
  steering_angle_ = value;
}
inline void Object::set_steering_angle(double value) {
  _internal_set_steering_angle(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.steering_angle)
}

// optional double steering_ratio = 27;
inline bool Object::_internal_has_steering_ratio() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Object::has_steering_ratio() const {
  return _internal_has_steering_ratio();
}
inline void Object::clear_steering_ratio() {
  steering_ratio_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double Object::_internal_steering_ratio() const {
  return steering_ratio_;
}
inline double Object::steering_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.steering_ratio)
  return _internal_steering_ratio();
}
inline void Object::_internal_set_steering_ratio(double value) {
  _has_bits_[0] |= 0x00200000u;
  steering_ratio_ = value;
}
inline void Object::set_steering_ratio(double value) {
  _internal_set_steering_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.steering_ratio)
}

// optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
inline bool Object::_internal_has_disengage_type() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Object::has_disengage_type() const {
  return _internal_has_disengage_type();
}
inline void Object::clear_disengage_type() {
  disengage_type_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::apollo::dreamview::Object_DisengageType Object::_internal_disengage_type() const {
  return static_cast< ::apollo::dreamview::Object_DisengageType >(disengage_type_);
}
inline ::apollo::dreamview::Object_DisengageType Object::disengage_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.disengage_type)
  return _internal_disengage_type();
}
inline void Object::_internal_set_disengage_type(::apollo::dreamview::Object_DisengageType value) {
  assert(::apollo::dreamview::Object_DisengageType_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  disengage_type_ = value;
}
inline void Object::set_disengage_type(::apollo::dreamview::Object_DisengageType value) {
  _internal_set_disengage_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.disengage_type)
}

// optional .apollo.dreamview.Object.Type type = 29;
inline bool Object::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Object::has_type() const {
  return _internal_has_type();
}
inline void Object::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::apollo::dreamview::Object_Type Object::_internal_type() const {
  return static_cast< ::apollo::dreamview::Object_Type >(type_);
}
inline ::apollo::dreamview::Object_Type Object::type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.type)
  return _internal_type();
}
inline void Object::_internal_set_type(::apollo::dreamview::Object_Type value) {
  assert(::apollo::dreamview::Object_Type_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  type_ = value;
}
inline void Object::set_type(::apollo::dreamview::Object_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.type)
}

// optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
inline bool Object::_internal_has_sub_type() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Object::has_sub_type() const {
  return _internal_has_sub_type();
}
inline void Object::clear_sub_type() {
  sub_type_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::apollo::perception::PerceptionObstacle_SubType Object::_internal_sub_type() const {
  return static_cast< ::apollo::perception::PerceptionObstacle_SubType >(sub_type_);
}
inline ::apollo::perception::PerceptionObstacle_SubType Object::sub_type() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.sub_type)
  return _internal_sub_type();
}
inline void Object::_internal_set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  assert(::apollo::perception::PerceptionObstacle_SubType_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  sub_type_ = value;
}
inline void Object::set_sub_type(::apollo::perception::PerceptionObstacle_SubType value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.sub_type)
}

// repeated .apollo.dreamview.Prediction prediction = 30;
inline int Object::_internal_prediction_size() const {
  return prediction_.size();
}
inline int Object::prediction_size() const {
  return _internal_prediction_size();
}
inline void Object::clear_prediction() {
  prediction_.Clear();
}
inline ::apollo::dreamview::Prediction* Object::mutable_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.prediction)
  return prediction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Prediction >*
Object::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Object.prediction)
  return &prediction_;
}
inline const ::apollo::dreamview::Prediction& Object::_internal_prediction(int index) const {
  return prediction_.Get(index);
}
inline const ::apollo::dreamview::Prediction& Object::prediction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.prediction)
  return _internal_prediction(index);
}
inline ::apollo::dreamview::Prediction* Object::_internal_add_prediction() {
  return prediction_.Add();
}
inline ::apollo::dreamview::Prediction* Object::add_prediction() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Object.prediction)
  return _internal_add_prediction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Prediction >&
Object::prediction() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Object.prediction)
  return prediction_;
}

// optional double confidence = 31 [default = 1];
inline bool Object::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool Object::has_confidence() const {
  return _internal_has_confidence();
}
inline void Object::clear_confidence() {
  confidence_ = 1;
  _has_bits_[0] &= ~0x40000000u;
}
inline double Object::_internal_confidence() const {
  return confidence_;
}
inline double Object::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.confidence)
  return _internal_confidence();
}
inline void Object::_internal_set_confidence(double value) {
  _has_bits_[0] |= 0x40000000u;
  confidence_ = value;
}
inline void Object::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Object.confidence)
}

// optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
inline bool Object::_internal_has_obstacle_priority() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || obstacle_priority_ != nullptr);
  return value;
}
inline bool Object::has_obstacle_priority() const {
  return _internal_has_obstacle_priority();
}
inline const ::apollo::prediction::ObstaclePriority& Object::_internal_obstacle_priority() const {
  const ::apollo::prediction::ObstaclePriority* p = obstacle_priority_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::prediction::ObstaclePriority*>(
      &::apollo::prediction::_ObstaclePriority_default_instance_);
}
inline const ::apollo::prediction::ObstaclePriority& Object::obstacle_priority() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Object.obstacle_priority)
  return _internal_obstacle_priority();
}
inline ::apollo::prediction::ObstaclePriority* Object::release_obstacle_priority() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Object.obstacle_priority)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::prediction::ObstaclePriority* temp = obstacle_priority_;
  obstacle_priority_ = nullptr;
  return temp;
}
inline ::apollo::prediction::ObstaclePriority* Object::_internal_mutable_obstacle_priority() {
  _has_bits_[0] |= 0x00000004u;
  if (obstacle_priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstaclePriority>(GetArenaNoVirtual());
    obstacle_priority_ = p;
  }
  return obstacle_priority_;
}
inline ::apollo::prediction::ObstaclePriority* Object::mutable_obstacle_priority() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Object.obstacle_priority)
  return _internal_mutable_obstacle_priority();
}
inline void Object::set_allocated_obstacle_priority(::apollo::prediction::ObstaclePriority* obstacle_priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obstacle_priority_);
  }
  if (obstacle_priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obstacle_priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obstacle_priority, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  obstacle_priority_ = obstacle_priority;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Object.obstacle_priority)
}

// -------------------------------------------------------------------

// DelaysInMs

// optional double chassis = 1;
inline bool DelaysInMs::_internal_has_chassis() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelaysInMs::has_chassis() const {
  return _internal_has_chassis();
}
inline void DelaysInMs::clear_chassis() {
  chassis_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DelaysInMs::_internal_chassis() const {
  return chassis_;
}
inline double DelaysInMs::chassis() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.chassis)
  return _internal_chassis();
}
inline void DelaysInMs::_internal_set_chassis(double value) {
  _has_bits_[0] |= 0x00000001u;
  chassis_ = value;
}
inline void DelaysInMs::set_chassis(double value) {
  _internal_set_chassis(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.chassis)
}

// optional double localization = 3;
inline bool DelaysInMs::_internal_has_localization() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelaysInMs::has_localization() const {
  return _internal_has_localization();
}
inline void DelaysInMs::clear_localization() {
  localization_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DelaysInMs::_internal_localization() const {
  return localization_;
}
inline double DelaysInMs::localization() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.localization)
  return _internal_localization();
}
inline void DelaysInMs::_internal_set_localization(double value) {
  _has_bits_[0] |= 0x00000002u;
  localization_ = value;
}
inline void DelaysInMs::set_localization(double value) {
  _internal_set_localization(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.localization)
}

// optional double perception_obstacle = 4;
inline bool DelaysInMs::_internal_has_perception_obstacle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DelaysInMs::has_perception_obstacle() const {
  return _internal_has_perception_obstacle();
}
inline void DelaysInMs::clear_perception_obstacle() {
  perception_obstacle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DelaysInMs::_internal_perception_obstacle() const {
  return perception_obstacle_;
}
inline double DelaysInMs::perception_obstacle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.perception_obstacle)
  return _internal_perception_obstacle();
}
inline void DelaysInMs::_internal_set_perception_obstacle(double value) {
  _has_bits_[0] |= 0x00000004u;
  perception_obstacle_ = value;
}
inline void DelaysInMs::set_perception_obstacle(double value) {
  _internal_set_perception_obstacle(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.perception_obstacle)
}

// optional double planning = 5;
inline bool DelaysInMs::_internal_has_planning() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DelaysInMs::has_planning() const {
  return _internal_has_planning();
}
inline void DelaysInMs::clear_planning() {
  planning_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double DelaysInMs::_internal_planning() const {
  return planning_;
}
inline double DelaysInMs::planning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.planning)
  return _internal_planning();
}
inline void DelaysInMs::_internal_set_planning(double value) {
  _has_bits_[0] |= 0x00000008u;
  planning_ = value;
}
inline void DelaysInMs::set_planning(double value) {
  _internal_set_planning(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.planning)
}

// optional double prediction = 7;
inline bool DelaysInMs::_internal_has_prediction() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DelaysInMs::has_prediction() const {
  return _internal_has_prediction();
}
inline void DelaysInMs::clear_prediction() {
  prediction_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DelaysInMs::_internal_prediction() const {
  return prediction_;
}
inline double DelaysInMs::prediction() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.prediction)
  return _internal_prediction();
}
inline void DelaysInMs::_internal_set_prediction(double value) {
  _has_bits_[0] |= 0x00000010u;
  prediction_ = value;
}
inline void DelaysInMs::set_prediction(double value) {
  _internal_set_prediction(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.prediction)
}

// optional double traffic_light = 8;
inline bool DelaysInMs::_internal_has_traffic_light() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DelaysInMs::has_traffic_light() const {
  return _internal_has_traffic_light();
}
inline void DelaysInMs::clear_traffic_light() {
  traffic_light_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double DelaysInMs::_internal_traffic_light() const {
  return traffic_light_;
}
inline double DelaysInMs::traffic_light() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.traffic_light)
  return _internal_traffic_light();
}
inline void DelaysInMs::_internal_set_traffic_light(double value) {
  _has_bits_[0] |= 0x00000020u;
  traffic_light_ = value;
}
inline void DelaysInMs::set_traffic_light(double value) {
  _internal_set_traffic_light(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.traffic_light)
}

// optional double control = 9;
inline bool DelaysInMs::_internal_has_control() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DelaysInMs::has_control() const {
  return _internal_has_control();
}
inline void DelaysInMs::clear_control() {
  control_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double DelaysInMs::_internal_control() const {
  return control_;
}
inline double DelaysInMs::control() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DelaysInMs.control)
  return _internal_control();
}
inline void DelaysInMs::_internal_set_control(double value) {
  _has_bits_[0] |= 0x00000040u;
  control_ = value;
}
inline void DelaysInMs::set_control(double value) {
  _internal_set_control(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DelaysInMs.control)
}

// -------------------------------------------------------------------

// RoutePath

// repeated .apollo.dreamview.PolygonPoint point = 1;
inline int RoutePath::_internal_point_size() const {
  return point_.size();
}
inline int RoutePath::point_size() const {
  return _internal_point_size();
}
inline void RoutePath::clear_point() {
  point_.Clear();
}
inline ::apollo::dreamview::PolygonPoint* RoutePath::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.RoutePath.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >*
RoutePath::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.RoutePath.point)
  return &point_;
}
inline const ::apollo::dreamview::PolygonPoint& RoutePath::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::apollo::dreamview::PolygonPoint& RoutePath::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.RoutePath.point)
  return _internal_point(index);
}
inline ::apollo::dreamview::PolygonPoint* RoutePath::_internal_add_point() {
  return point_.Add();
}
inline ::apollo::dreamview::PolygonPoint* RoutePath::add_point() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.RoutePath.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::PolygonPoint >&
RoutePath::point() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.RoutePath.point)
  return point_;
}

// -------------------------------------------------------------------

// Latency

// optional double timestamp_sec = 1;
inline bool Latency::_internal_has_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Latency::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void Latency::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Latency::_internal_timestamp_sec() const {
  return timestamp_sec_;
}
inline double Latency::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Latency.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void Latency::_internal_set_timestamp_sec(double value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_sec_ = value;
}
inline void Latency::set_timestamp_sec(double value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Latency.timestamp_sec)
}

// optional double total_time_ms = 2;
inline bool Latency::_internal_has_total_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Latency::has_total_time_ms() const {
  return _internal_has_total_time_ms();
}
inline void Latency::clear_total_time_ms() {
  total_time_ms_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Latency::_internal_total_time_ms() const {
  return total_time_ms_;
}
inline double Latency::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Latency.total_time_ms)
  return _internal_total_time_ms();
}
inline void Latency::_internal_set_total_time_ms(double value) {
  _has_bits_[0] |= 0x00000002u;
  total_time_ms_ = value;
}
inline void Latency::set_total_time_ms(double value) {
  _internal_set_total_time_ms(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Latency.total_time_ms)
}

// -------------------------------------------------------------------

// MapElementIds

// repeated string lane = 1;
inline int MapElementIds::_internal_lane_size() const {
  return lane_.size();
}
inline int MapElementIds::lane_size() const {
  return _internal_lane_size();
}
inline void MapElementIds::clear_lane() {
  lane_.Clear();
}
inline std::string* MapElementIds::add_lane() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.lane)
  return _internal_add_lane();
}
inline const std::string& MapElementIds::_internal_lane(int index) const {
  return lane_.Get(index);
}
inline const std::string& MapElementIds::lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.lane)
  return _internal_lane(index);
}
inline std::string* MapElementIds::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.lane)
  return lane_.Mutable(index);
}
inline void MapElementIds::set_lane(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.lane)
  lane_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_lane(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.lane)
  lane_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_lane(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lane_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.lane)
}
inline void MapElementIds::set_lane(int index, const char* value, size_t size) {
  lane_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.lane)
}
inline std::string* MapElementIds::_internal_add_lane() {
  return lane_.Add();
}
inline void MapElementIds::add_lane(const std::string& value) {
  lane_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.lane)
}
inline void MapElementIds::add_lane(std::string&& value) {
  lane_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.lane)
}
inline void MapElementIds::add_lane(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lane_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.lane)
}
inline void MapElementIds::add_lane(const char* value, size_t size) {
  lane_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.lane)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::lane() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.lane)
  return lane_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.lane)
  return &lane_;
}

// repeated string crosswalk = 2;
inline int MapElementIds::_internal_crosswalk_size() const {
  return crosswalk_.size();
}
inline int MapElementIds::crosswalk_size() const {
  return _internal_crosswalk_size();
}
inline void MapElementIds::clear_crosswalk() {
  crosswalk_.Clear();
}
inline std::string* MapElementIds::add_crosswalk() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.crosswalk)
  return _internal_add_crosswalk();
}
inline const std::string& MapElementIds::_internal_crosswalk(int index) const {
  return crosswalk_.Get(index);
}
inline const std::string& MapElementIds::crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.crosswalk)
  return _internal_crosswalk(index);
}
inline std::string* MapElementIds::mutable_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.crosswalk)
  return crosswalk_.Mutable(index);
}
inline void MapElementIds::set_crosswalk(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.crosswalk)
  crosswalk_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_crosswalk(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.crosswalk)
  crosswalk_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_crosswalk(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  crosswalk_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.crosswalk)
}
inline void MapElementIds::set_crosswalk(int index, const char* value, size_t size) {
  crosswalk_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.crosswalk)
}
inline std::string* MapElementIds::_internal_add_crosswalk() {
  return crosswalk_.Add();
}
inline void MapElementIds::add_crosswalk(const std::string& value) {
  crosswalk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.crosswalk)
}
inline void MapElementIds::add_crosswalk(std::string&& value) {
  crosswalk_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.crosswalk)
}
inline void MapElementIds::add_crosswalk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  crosswalk_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.crosswalk)
}
inline void MapElementIds::add_crosswalk(const char* value, size_t size) {
  crosswalk_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.crosswalk)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::crosswalk() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.crosswalk)
  return crosswalk_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.crosswalk)
  return &crosswalk_;
}

// repeated string junction = 3;
inline int MapElementIds::_internal_junction_size() const {
  return junction_.size();
}
inline int MapElementIds::junction_size() const {
  return _internal_junction_size();
}
inline void MapElementIds::clear_junction() {
  junction_.Clear();
}
inline std::string* MapElementIds::add_junction() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.junction)
  return _internal_add_junction();
}
inline const std::string& MapElementIds::_internal_junction(int index) const {
  return junction_.Get(index);
}
inline const std::string& MapElementIds::junction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.junction)
  return _internal_junction(index);
}
inline std::string* MapElementIds::mutable_junction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.junction)
  return junction_.Mutable(index);
}
inline void MapElementIds::set_junction(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.junction)
  junction_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_junction(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.junction)
  junction_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_junction(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  junction_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.junction)
}
inline void MapElementIds::set_junction(int index, const char* value, size_t size) {
  junction_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.junction)
}
inline std::string* MapElementIds::_internal_add_junction() {
  return junction_.Add();
}
inline void MapElementIds::add_junction(const std::string& value) {
  junction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.junction)
}
inline void MapElementIds::add_junction(std::string&& value) {
  junction_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.junction)
}
inline void MapElementIds::add_junction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  junction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.junction)
}
inline void MapElementIds::add_junction(const char* value, size_t size) {
  junction_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.junction)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::junction() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.junction)
  return junction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_junction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.junction)
  return &junction_;
}

// repeated string signal = 4;
inline int MapElementIds::_internal_signal_size() const {
  return signal_.size();
}
inline int MapElementIds::signal_size() const {
  return _internal_signal_size();
}
inline void MapElementIds::clear_signal() {
  signal_.Clear();
}
inline std::string* MapElementIds::add_signal() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.signal)
  return _internal_add_signal();
}
inline const std::string& MapElementIds::_internal_signal(int index) const {
  return signal_.Get(index);
}
inline const std::string& MapElementIds::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.signal)
  return _internal_signal(index);
}
inline std::string* MapElementIds::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.signal)
  return signal_.Mutable(index);
}
inline void MapElementIds::set_signal(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.signal)
  signal_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_signal(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.signal)
  signal_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_signal(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signal_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.signal)
}
inline void MapElementIds::set_signal(int index, const char* value, size_t size) {
  signal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.signal)
}
inline std::string* MapElementIds::_internal_add_signal() {
  return signal_.Add();
}
inline void MapElementIds::add_signal(const std::string& value) {
  signal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.signal)
}
inline void MapElementIds::add_signal(std::string&& value) {
  signal_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.signal)
}
inline void MapElementIds::add_signal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.signal)
}
inline void MapElementIds::add_signal(const char* value, size_t size) {
  signal_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.signal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::signal() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.signal)
  return signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.signal)
  return &signal_;
}

// repeated string stop_sign = 5;
inline int MapElementIds::_internal_stop_sign_size() const {
  return stop_sign_.size();
}
inline int MapElementIds::stop_sign_size() const {
  return _internal_stop_sign_size();
}
inline void MapElementIds::clear_stop_sign() {
  stop_sign_.Clear();
}
inline std::string* MapElementIds::add_stop_sign() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.stop_sign)
  return _internal_add_stop_sign();
}
inline const std::string& MapElementIds::_internal_stop_sign(int index) const {
  return stop_sign_.Get(index);
}
inline const std::string& MapElementIds::stop_sign(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.stop_sign)
  return _internal_stop_sign(index);
}
inline std::string* MapElementIds::mutable_stop_sign(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.stop_sign)
  return stop_sign_.Mutable(index);
}
inline void MapElementIds::set_stop_sign(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.stop_sign)
  stop_sign_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_stop_sign(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.stop_sign)
  stop_sign_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_stop_sign(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stop_sign_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.stop_sign)
}
inline void MapElementIds::set_stop_sign(int index, const char* value, size_t size) {
  stop_sign_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.stop_sign)
}
inline std::string* MapElementIds::_internal_add_stop_sign() {
  return stop_sign_.Add();
}
inline void MapElementIds::add_stop_sign(const std::string& value) {
  stop_sign_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.stop_sign)
}
inline void MapElementIds::add_stop_sign(std::string&& value) {
  stop_sign_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.stop_sign)
}
inline void MapElementIds::add_stop_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stop_sign_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.stop_sign)
}
inline void MapElementIds::add_stop_sign(const char* value, size_t size) {
  stop_sign_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.stop_sign)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::stop_sign() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.stop_sign)
  return stop_sign_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_stop_sign() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.stop_sign)
  return &stop_sign_;
}

// repeated string yield = 6;
inline int MapElementIds::_internal_yield_size() const {
  return yield_.size();
}
inline int MapElementIds::yield_size() const {
  return _internal_yield_size();
}
inline void MapElementIds::clear_yield() {
  yield_.Clear();
}
inline std::string* MapElementIds::add_yield() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.yield)
  return _internal_add_yield();
}
inline const std::string& MapElementIds::_internal_yield(int index) const {
  return yield_.Get(index);
}
inline const std::string& MapElementIds::yield(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.yield)
  return _internal_yield(index);
}
inline std::string* MapElementIds::mutable_yield(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.yield)
  return yield_.Mutable(index);
}
inline void MapElementIds::set_yield(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.yield)
  yield_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_yield(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.yield)
  yield_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_yield(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yield_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.yield)
}
inline void MapElementIds::set_yield(int index, const char* value, size_t size) {
  yield_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.yield)
}
inline std::string* MapElementIds::_internal_add_yield() {
  return yield_.Add();
}
inline void MapElementIds::add_yield(const std::string& value) {
  yield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.yield)
}
inline void MapElementIds::add_yield(std::string&& value) {
  yield_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.yield)
}
inline void MapElementIds::add_yield(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  yield_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.yield)
}
inline void MapElementIds::add_yield(const char* value, size_t size) {
  yield_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.yield)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::yield() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.yield)
  return yield_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_yield() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.yield)
  return &yield_;
}

// repeated string overlap = 7;
inline int MapElementIds::_internal_overlap_size() const {
  return overlap_.size();
}
inline int MapElementIds::overlap_size() const {
  return _internal_overlap_size();
}
inline void MapElementIds::clear_overlap() {
  overlap_.Clear();
}
inline std::string* MapElementIds::add_overlap() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.overlap)
  return _internal_add_overlap();
}
inline const std::string& MapElementIds::_internal_overlap(int index) const {
  return overlap_.Get(index);
}
inline const std::string& MapElementIds::overlap(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.overlap)
  return _internal_overlap(index);
}
inline std::string* MapElementIds::mutable_overlap(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.overlap)
  return overlap_.Mutable(index);
}
inline void MapElementIds::set_overlap(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.overlap)
  overlap_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_overlap(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.overlap)
  overlap_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_overlap(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  overlap_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.overlap)
}
inline void MapElementIds::set_overlap(int index, const char* value, size_t size) {
  overlap_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.overlap)
}
inline std::string* MapElementIds::_internal_add_overlap() {
  return overlap_.Add();
}
inline void MapElementIds::add_overlap(const std::string& value) {
  overlap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.overlap)
}
inline void MapElementIds::add_overlap(std::string&& value) {
  overlap_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.overlap)
}
inline void MapElementIds::add_overlap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  overlap_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.overlap)
}
inline void MapElementIds::add_overlap(const char* value, size_t size) {
  overlap_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.overlap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::overlap() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.overlap)
  return overlap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_overlap() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.overlap)
  return &overlap_;
}

// repeated string road = 8;
inline int MapElementIds::_internal_road_size() const {
  return road_.size();
}
inline int MapElementIds::road_size() const {
  return _internal_road_size();
}
inline void MapElementIds::clear_road() {
  road_.Clear();
}
inline std::string* MapElementIds::add_road() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.road)
  return _internal_add_road();
}
inline const std::string& MapElementIds::_internal_road(int index) const {
  return road_.Get(index);
}
inline const std::string& MapElementIds::road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.road)
  return _internal_road(index);
}
inline std::string* MapElementIds::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.road)
  return road_.Mutable(index);
}
inline void MapElementIds::set_road(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.road)
  road_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_road(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.road)
  road_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_road(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.road)
}
inline void MapElementIds::set_road(int index, const char* value, size_t size) {
  road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.road)
}
inline std::string* MapElementIds::_internal_add_road() {
  return road_.Add();
}
inline void MapElementIds::add_road(const std::string& value) {
  road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.road)
}
inline void MapElementIds::add_road(std::string&& value) {
  road_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.road)
}
inline void MapElementIds::add_road(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.road)
}
inline void MapElementIds::add_road(const char* value, size_t size) {
  road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.road)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::road() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.road)
  return road_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.road)
  return &road_;
}

// repeated string clear_area = 9;
inline int MapElementIds::_internal_clear_area_size() const {
  return clear_area_.size();
}
inline int MapElementIds::clear_area_size() const {
  return _internal_clear_area_size();
}
inline void MapElementIds::clear_clear_area() {
  clear_area_.Clear();
}
inline std::string* MapElementIds::add_clear_area() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.clear_area)
  return _internal_add_clear_area();
}
inline const std::string& MapElementIds::_internal_clear_area(int index) const {
  return clear_area_.Get(index);
}
inline const std::string& MapElementIds::clear_area(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.clear_area)
  return _internal_clear_area(index);
}
inline std::string* MapElementIds::mutable_clear_area(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.clear_area)
  return clear_area_.Mutable(index);
}
inline void MapElementIds::set_clear_area(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.clear_area)
  clear_area_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_clear_area(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.clear_area)
  clear_area_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_clear_area(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clear_area_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.clear_area)
}
inline void MapElementIds::set_clear_area(int index, const char* value, size_t size) {
  clear_area_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.clear_area)
}
inline std::string* MapElementIds::_internal_add_clear_area() {
  return clear_area_.Add();
}
inline void MapElementIds::add_clear_area(const std::string& value) {
  clear_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.clear_area)
}
inline void MapElementIds::add_clear_area(std::string&& value) {
  clear_area_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.clear_area)
}
inline void MapElementIds::add_clear_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  clear_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.clear_area)
}
inline void MapElementIds::add_clear_area(const char* value, size_t size) {
  clear_area_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.clear_area)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::clear_area() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.clear_area)
  return clear_area_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_clear_area() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.clear_area)
  return &clear_area_;
}

// repeated string parking_space = 10;
inline int MapElementIds::_internal_parking_space_size() const {
  return parking_space_.size();
}
inline int MapElementIds::parking_space_size() const {
  return _internal_parking_space_size();
}
inline void MapElementIds::clear_parking_space() {
  parking_space_.Clear();
}
inline std::string* MapElementIds::add_parking_space() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.parking_space)
  return _internal_add_parking_space();
}
inline const std::string& MapElementIds::_internal_parking_space(int index) const {
  return parking_space_.Get(index);
}
inline const std::string& MapElementIds::parking_space(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.parking_space)
  return _internal_parking_space(index);
}
inline std::string* MapElementIds::mutable_parking_space(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.parking_space)
  return parking_space_.Mutable(index);
}
inline void MapElementIds::set_parking_space(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.parking_space)
  parking_space_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_parking_space(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.parking_space)
  parking_space_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_parking_space(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parking_space_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.parking_space)
}
inline void MapElementIds::set_parking_space(int index, const char* value, size_t size) {
  parking_space_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.parking_space)
}
inline std::string* MapElementIds::_internal_add_parking_space() {
  return parking_space_.Add();
}
inline void MapElementIds::add_parking_space(const std::string& value) {
  parking_space_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.parking_space)
}
inline void MapElementIds::add_parking_space(std::string&& value) {
  parking_space_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.parking_space)
}
inline void MapElementIds::add_parking_space(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parking_space_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.parking_space)
}
inline void MapElementIds::add_parking_space(const char* value, size_t size) {
  parking_space_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.parking_space)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::parking_space() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.parking_space)
  return parking_space_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_parking_space() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.parking_space)
  return &parking_space_;
}

// repeated string speed_bump = 11;
inline int MapElementIds::_internal_speed_bump_size() const {
  return speed_bump_.size();
}
inline int MapElementIds::speed_bump_size() const {
  return _internal_speed_bump_size();
}
inline void MapElementIds::clear_speed_bump() {
  speed_bump_.Clear();
}
inline std::string* MapElementIds::add_speed_bump() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.speed_bump)
  return _internal_add_speed_bump();
}
inline const std::string& MapElementIds::_internal_speed_bump(int index) const {
  return speed_bump_.Get(index);
}
inline const std::string& MapElementIds::speed_bump(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.speed_bump)
  return _internal_speed_bump(index);
}
inline std::string* MapElementIds::mutable_speed_bump(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.speed_bump)
  return speed_bump_.Mutable(index);
}
inline void MapElementIds::set_speed_bump(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.speed_bump)
  speed_bump_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_speed_bump(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.speed_bump)
  speed_bump_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_speed_bump(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  speed_bump_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.speed_bump)
}
inline void MapElementIds::set_speed_bump(int index, const char* value, size_t size) {
  speed_bump_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.speed_bump)
}
inline std::string* MapElementIds::_internal_add_speed_bump() {
  return speed_bump_.Add();
}
inline void MapElementIds::add_speed_bump(const std::string& value) {
  speed_bump_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.speed_bump)
}
inline void MapElementIds::add_speed_bump(std::string&& value) {
  speed_bump_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.speed_bump)
}
inline void MapElementIds::add_speed_bump(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  speed_bump_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.speed_bump)
}
inline void MapElementIds::add_speed_bump(const char* value, size_t size) {
  speed_bump_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.speed_bump)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::speed_bump() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.speed_bump)
  return speed_bump_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_speed_bump() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.speed_bump)
  return &speed_bump_;
}

// repeated string pnc_junction = 12;
inline int MapElementIds::_internal_pnc_junction_size() const {
  return pnc_junction_.size();
}
inline int MapElementIds::pnc_junction_size() const {
  return _internal_pnc_junction_size();
}
inline void MapElementIds::clear_pnc_junction() {
  pnc_junction_.Clear();
}
inline std::string* MapElementIds::add_pnc_junction() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.MapElementIds.pnc_junction)
  return _internal_add_pnc_junction();
}
inline const std::string& MapElementIds::_internal_pnc_junction(int index) const {
  return pnc_junction_.Get(index);
}
inline const std::string& MapElementIds::pnc_junction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MapElementIds.pnc_junction)
  return _internal_pnc_junction(index);
}
inline std::string* MapElementIds::mutable_pnc_junction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MapElementIds.pnc_junction)
  return pnc_junction_.Mutable(index);
}
inline void MapElementIds::set_pnc_junction(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.pnc_junction)
  pnc_junction_.Mutable(index)->assign(value);
}
inline void MapElementIds::set_pnc_junction(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.MapElementIds.pnc_junction)
  pnc_junction_.Mutable(index)->assign(std::move(value));
}
inline void MapElementIds::set_pnc_junction(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pnc_junction_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.MapElementIds.pnc_junction)
}
inline void MapElementIds::set_pnc_junction(int index, const char* value, size_t size) {
  pnc_junction_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.MapElementIds.pnc_junction)
}
inline std::string* MapElementIds::_internal_add_pnc_junction() {
  return pnc_junction_.Add();
}
inline void MapElementIds::add_pnc_junction(const std::string& value) {
  pnc_junction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.pnc_junction)
}
inline void MapElementIds::add_pnc_junction(std::string&& value) {
  pnc_junction_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.MapElementIds.pnc_junction)
}
inline void MapElementIds::add_pnc_junction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pnc_junction_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.MapElementIds.pnc_junction)
}
inline void MapElementIds::add_pnc_junction(const char* value, size_t size) {
  pnc_junction_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.MapElementIds.pnc_junction)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapElementIds::pnc_junction() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.MapElementIds.pnc_junction)
  return pnc_junction_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapElementIds::mutable_pnc_junction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.MapElementIds.pnc_junction)
  return &pnc_junction_;
}

// -------------------------------------------------------------------

// ControlData

// optional double timestamp_sec = 1;
inline bool ControlData::_internal_has_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlData::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void ControlData::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ControlData::_internal_timestamp_sec() const {
  return timestamp_sec_;
}
inline double ControlData::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void ControlData::_internal_set_timestamp_sec(double value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_sec_ = value;
}
inline void ControlData::set_timestamp_sec(double value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ControlData.timestamp_sec)
}

// optional double station_error = 2;
inline bool ControlData::_internal_has_station_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlData::has_station_error() const {
  return _internal_has_station_error();
}
inline void ControlData::clear_station_error() {
  station_error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ControlData::_internal_station_error() const {
  return station_error_;
}
inline double ControlData::station_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.station_error)
  return _internal_station_error();
}
inline void ControlData::_internal_set_station_error(double value) {
  _has_bits_[0] |= 0x00000004u;
  station_error_ = value;
}
inline void ControlData::set_station_error(double value) {
  _internal_set_station_error(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ControlData.station_error)
}

// optional double lateral_error = 3;
inline bool ControlData::_internal_has_lateral_error() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControlData::has_lateral_error() const {
  return _internal_has_lateral_error();
}
inline void ControlData::clear_lateral_error() {
  lateral_error_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ControlData::_internal_lateral_error() const {
  return lateral_error_;
}
inline double ControlData::lateral_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.lateral_error)
  return _internal_lateral_error();
}
inline void ControlData::_internal_set_lateral_error(double value) {
  _has_bits_[0] |= 0x00000008u;
  lateral_error_ = value;
}
inline void ControlData::set_lateral_error(double value) {
  _internal_set_lateral_error(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ControlData.lateral_error)
}

// optional double heading_error = 4;
inline bool ControlData::_internal_has_heading_error() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ControlData::has_heading_error() const {
  return _internal_has_heading_error();
}
inline void ControlData::clear_heading_error() {
  heading_error_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double ControlData::_internal_heading_error() const {
  return heading_error_;
}
inline double ControlData::heading_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.heading_error)
  return _internal_heading_error();
}
inline void ControlData::_internal_set_heading_error(double value) {
  _has_bits_[0] |= 0x00000010u;
  heading_error_ = value;
}
inline void ControlData::set_heading_error(double value) {
  _internal_set_heading_error(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ControlData.heading_error)
}

// optional .apollo.common.TrajectoryPoint current_target_point = 5;
inline bool ControlData::_internal_has_current_target_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || current_target_point_ != nullptr);
  return value;
}
inline bool ControlData::has_current_target_point() const {
  return _internal_has_current_target_point();
}
inline const ::apollo::common::TrajectoryPoint& ControlData::_internal_current_target_point() const {
  const ::apollo::common::TrajectoryPoint* p = current_target_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::TrajectoryPoint*>(
      &::apollo::common::_TrajectoryPoint_default_instance_);
}
inline const ::apollo::common::TrajectoryPoint& ControlData::current_target_point() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ControlData.current_target_point)
  return _internal_current_target_point();
}
inline ::apollo::common::TrajectoryPoint* ControlData::release_current_target_point() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ControlData.current_target_point)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::TrajectoryPoint* temp = current_target_point_;
  current_target_point_ = nullptr;
  return temp;
}
inline ::apollo::common::TrajectoryPoint* ControlData::_internal_mutable_current_target_point() {
  _has_bits_[0] |= 0x00000001u;
  if (current_target_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::TrajectoryPoint>(GetArenaNoVirtual());
    current_target_point_ = p;
  }
  return current_target_point_;
}
inline ::apollo::common::TrajectoryPoint* ControlData::mutable_current_target_point() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ControlData.current_target_point)
  return _internal_mutable_current_target_point();
}
inline void ControlData::set_allocated_current_target_point(::apollo::common::TrajectoryPoint* current_target_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_target_point_);
  }
  if (current_target_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_target_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_target_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_target_point_ = current_target_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ControlData.current_target_point)
}

// -------------------------------------------------------------------

// Notification

// optional double timestamp_sec = 1;
inline bool Notification::_internal_has_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Notification::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void Notification::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Notification::_internal_timestamp_sec() const {
  return timestamp_sec_;
}
inline double Notification::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Notification.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void Notification::_internal_set_timestamp_sec(double value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_sec_ = value;
}
inline void Notification::set_timestamp_sec(double value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Notification.timestamp_sec)
}

// optional .apollo.common.monitor.MonitorMessageItem item = 2;
inline bool Notification::_internal_has_item() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || item_ != nullptr);
  return value;
}
inline bool Notification::has_item() const {
  return _internal_has_item();
}
inline const ::apollo::common::monitor::MonitorMessageItem& Notification::_internal_item() const {
  const ::apollo::common::monitor::MonitorMessageItem* p = item_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::monitor::MonitorMessageItem*>(
      &::apollo::common::monitor::_MonitorMessageItem_default_instance_);
}
inline const ::apollo::common::monitor::MonitorMessageItem& Notification::item() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Notification.item)
  return _internal_item();
}
inline ::apollo::common::monitor::MonitorMessageItem* Notification::release_item() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Notification.item)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::monitor::MonitorMessageItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::apollo::common::monitor::MonitorMessageItem* Notification::_internal_mutable_item() {
  _has_bits_[0] |= 0x00000001u;
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::monitor::MonitorMessageItem>(GetArenaNoVirtual());
    item_ = p;
  }
  return item_;
}
inline ::apollo::common::monitor::MonitorMessageItem* Notification::mutable_item() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Notification.item)
  return _internal_mutable_item();
}
inline void Notification::set_allocated_item(::apollo::common::monitor::MonitorMessageItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Notification.item)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SimulationWorld

// optional double timestamp = 1;
inline bool SimulationWorld::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SimulationWorld::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void SimulationWorld::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double SimulationWorld::_internal_timestamp() const {
  return timestamp_;
}
inline double SimulationWorld::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.timestamp)
  return _internal_timestamp();
}
inline void SimulationWorld::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00002000u;
  timestamp_ = value;
}
inline void SimulationWorld::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.timestamp)
}

// optional uint32 sequence_num = 2;
inline bool SimulationWorld::_internal_has_sequence_num() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool SimulationWorld::has_sequence_num() const {
  return _internal_has_sequence_num();
}
inline void SimulationWorld::clear_sequence_num() {
  sequence_num_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimulationWorld::_internal_sequence_num() const {
  return sequence_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SimulationWorld::sequence_num() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.sequence_num)
  return _internal_sequence_num();
}
inline void SimulationWorld::_internal_set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  sequence_num_ = value;
}
inline void SimulationWorld::set_sequence_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_num(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.sequence_num)
}

// repeated .apollo.dreamview.Object object = 3;
inline int SimulationWorld::_internal_object_size() const {
  return object_.size();
}
inline int SimulationWorld::object_size() const {
  return _internal_object_size();
}
inline void SimulationWorld::clear_object() {
  object_.Clear();
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.object)
  return object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >*
SimulationWorld::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.object)
  return &object_;
}
inline const ::apollo::dreamview::Object& SimulationWorld::_internal_object(int index) const {
  return object_.Get(index);
}
inline const ::apollo::dreamview::Object& SimulationWorld::object(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.object)
  return _internal_object(index);
}
inline ::apollo::dreamview::Object* SimulationWorld::_internal_add_object() {
  return object_.Add();
}
inline ::apollo::dreamview::Object* SimulationWorld::add_object() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.object)
  return _internal_add_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >&
SimulationWorld::object() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.object)
  return object_;
}

// optional .apollo.dreamview.Object auto_driving_car = 4;
inline bool SimulationWorld::_internal_has_auto_driving_car() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || auto_driving_car_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_auto_driving_car() const {
  return _internal_has_auto_driving_car();
}
inline void SimulationWorld::clear_auto_driving_car() {
  if (auto_driving_car_ != nullptr) auto_driving_car_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::dreamview::Object& SimulationWorld::_internal_auto_driving_car() const {
  const ::apollo::dreamview::Object* p = auto_driving_car_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::Object*>(
      &::apollo::dreamview::_Object_default_instance_);
}
inline const ::apollo::dreamview::Object& SimulationWorld::auto_driving_car() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.auto_driving_car)
  return _internal_auto_driving_car();
}
inline ::apollo::dreamview::Object* SimulationWorld::release_auto_driving_car() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.auto_driving_car)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::Object* temp = auto_driving_car_;
  auto_driving_car_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Object* SimulationWorld::_internal_mutable_auto_driving_car() {
  _has_bits_[0] |= 0x00000002u;
  if (auto_driving_car_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Object>(GetArenaNoVirtual());
    auto_driving_car_ = p;
  }
  return auto_driving_car_;
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_auto_driving_car() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.auto_driving_car)
  return _internal_mutable_auto_driving_car();
}
inline void SimulationWorld::set_allocated_auto_driving_car(::apollo::dreamview::Object* auto_driving_car) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete auto_driving_car_;
  }
  if (auto_driving_car) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_driving_car = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_driving_car, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auto_driving_car_ = auto_driving_car;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.auto_driving_car)
}

// optional .apollo.dreamview.Object traffic_signal = 5;
inline bool SimulationWorld::_internal_has_traffic_signal() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || traffic_signal_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_traffic_signal() const {
  return _internal_has_traffic_signal();
}
inline void SimulationWorld::clear_traffic_signal() {
  if (traffic_signal_ != nullptr) traffic_signal_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::dreamview::Object& SimulationWorld::_internal_traffic_signal() const {
  const ::apollo::dreamview::Object* p = traffic_signal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::Object*>(
      &::apollo::dreamview::_Object_default_instance_);
}
inline const ::apollo::dreamview::Object& SimulationWorld::traffic_signal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.traffic_signal)
  return _internal_traffic_signal();
}
inline ::apollo::dreamview::Object* SimulationWorld::release_traffic_signal() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.traffic_signal)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::Object* temp = traffic_signal_;
  traffic_signal_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Object* SimulationWorld::_internal_mutable_traffic_signal() {
  _has_bits_[0] |= 0x00000004u;
  if (traffic_signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Object>(GetArenaNoVirtual());
    traffic_signal_ = p;
  }
  return traffic_signal_;
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_traffic_signal() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.traffic_signal)
  return _internal_mutable_traffic_signal();
}
inline void SimulationWorld::set_allocated_traffic_signal(::apollo::dreamview::Object* traffic_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete traffic_signal_;
  }
  if (traffic_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      traffic_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_signal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  traffic_signal_ = traffic_signal;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.traffic_signal)
}

// repeated .apollo.dreamview.RoutePath route_path = 6;
inline int SimulationWorld::_internal_route_path_size() const {
  return route_path_.size();
}
inline int SimulationWorld::route_path_size() const {
  return _internal_route_path_size();
}
inline void SimulationWorld::clear_route_path() {
  route_path_.Clear();
}
inline ::apollo::dreamview::RoutePath* SimulationWorld::mutable_route_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.route_path)
  return route_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::RoutePath >*
SimulationWorld::mutable_route_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.route_path)
  return &route_path_;
}
inline const ::apollo::dreamview::RoutePath& SimulationWorld::_internal_route_path(int index) const {
  return route_path_.Get(index);
}
inline const ::apollo::dreamview::RoutePath& SimulationWorld::route_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.route_path)
  return _internal_route_path(index);
}
inline ::apollo::dreamview::RoutePath* SimulationWorld::_internal_add_route_path() {
  return route_path_.Add();
}
inline ::apollo::dreamview::RoutePath* SimulationWorld::add_route_path() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.route_path)
  return _internal_add_route_path();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::RoutePath >&
SimulationWorld::route_path() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.route_path)
  return route_path_;
}

// optional double routing_time = 7;
inline bool SimulationWorld::_internal_has_routing_time() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SimulationWorld::has_routing_time() const {
  return _internal_has_routing_time();
}
inline void SimulationWorld::clear_routing_time() {
  routing_time_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double SimulationWorld::_internal_routing_time() const {
  return routing_time_;
}
inline double SimulationWorld::routing_time() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.routing_time)
  return _internal_routing_time();
}
inline void SimulationWorld::_internal_set_routing_time(double value) {
  _has_bits_[0] |= 0x00004000u;
  routing_time_ = value;
}
inline void SimulationWorld::set_routing_time(double value) {
  _internal_set_routing_time(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.routing_time)
}

// repeated .apollo.dreamview.Object planning_trajectory = 8;
inline int SimulationWorld::_internal_planning_trajectory_size() const {
  return planning_trajectory_.size();
}
inline int SimulationWorld::planning_trajectory_size() const {
  return _internal_planning_trajectory_size();
}
inline void SimulationWorld::clear_planning_trajectory() {
  planning_trajectory_.Clear();
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_planning_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >*
SimulationWorld::mutable_planning_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.planning_trajectory)
  return &planning_trajectory_;
}
inline const ::apollo::dreamview::Object& SimulationWorld::_internal_planning_trajectory(int index) const {
  return planning_trajectory_.Get(index);
}
inline const ::apollo::dreamview::Object& SimulationWorld::planning_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.planning_trajectory)
  return _internal_planning_trajectory(index);
}
inline ::apollo::dreamview::Object* SimulationWorld::_internal_add_planning_trajectory() {
  return planning_trajectory_.Add();
}
inline ::apollo::dreamview::Object* SimulationWorld::add_planning_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.planning_trajectory)
  return _internal_add_planning_trajectory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Object >&
SimulationWorld::planning_trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.planning_trajectory)
  return planning_trajectory_;
}

// optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
inline bool SimulationWorld::_internal_has_main_stop() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || main_stop_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_main_stop() const {
  return _internal_has_main_stop();
}
inline void SimulationWorld::clear_main_stop() {
  if (main_stop_ != nullptr) main_stop_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::dreamview::Object& SimulationWorld::_internal_main_stop() const {
  const ::apollo::dreamview::Object* p = main_stop_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::Object*>(
      &::apollo::dreamview::_Object_default_instance_);
}
inline const ::apollo::dreamview::Object& SimulationWorld::main_stop() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.main_stop)
  return _internal_main_stop();
}
inline ::apollo::dreamview::Object* SimulationWorld::release_main_stop() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.main_stop)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::dreamview::Object* temp = main_stop_;
  main_stop_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Object* SimulationWorld::_internal_mutable_main_stop() {
  _has_bits_[0] |= 0x00000008u;
  if (main_stop_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Object>(GetArenaNoVirtual());
    main_stop_ = p;
  }
  return main_stop_;
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_main_stop() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.main_stop)
  return _internal_mutable_main_stop();
}
inline void SimulationWorld::set_allocated_main_stop(::apollo::dreamview::Object* main_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete main_stop_;
  }
  if (main_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      main_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, main_stop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  main_stop_ = main_stop;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.main_stop)
}

// optional .apollo.dreamview.Object main_decision = 10;
inline bool SimulationWorld::_internal_has_main_decision() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || main_decision_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_main_decision() const {
  return _internal_has_main_decision();
}
inline void SimulationWorld::clear_main_decision() {
  if (main_decision_ != nullptr) main_decision_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::dreamview::Object& SimulationWorld::_internal_main_decision() const {
  const ::apollo::dreamview::Object* p = main_decision_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::Object*>(
      &::apollo::dreamview::_Object_default_instance_);
}
inline const ::apollo::dreamview::Object& SimulationWorld::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.main_decision)
  return _internal_main_decision();
}
inline ::apollo::dreamview::Object* SimulationWorld::release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.main_decision)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::dreamview::Object* temp = main_decision_;
  main_decision_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Object* SimulationWorld::_internal_mutable_main_decision() {
  _has_bits_[0] |= 0x00000010u;
  if (main_decision_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Object>(GetArenaNoVirtual());
    main_decision_ = p;
  }
  return main_decision_;
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_main_decision() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.main_decision)
  return _internal_mutable_main_decision();
}
inline void SimulationWorld::set_allocated_main_decision(::apollo::dreamview::Object* main_decision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete main_decision_;
  }
  if (main_decision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      main_decision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, main_decision, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  main_decision_ = main_decision;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.main_decision)
}

// optional double speed_limit = 11;
inline bool SimulationWorld::_internal_has_speed_limit() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SimulationWorld::has_speed_limit() const {
  return _internal_has_speed_limit();
}
inline void SimulationWorld::clear_speed_limit() {
  speed_limit_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double SimulationWorld::_internal_speed_limit() const {
  return speed_limit_;
}
inline double SimulationWorld::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.speed_limit)
  return _internal_speed_limit();
}
inline void SimulationWorld::_internal_set_speed_limit(double value) {
  _has_bits_[0] |= 0x00008000u;
  speed_limit_ = value;
}
inline void SimulationWorld::set_speed_limit(double value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.speed_limit)
}

// optional .apollo.dreamview.DelaysInMs delay = 12;
inline bool SimulationWorld::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || delay_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_delay() const {
  return _internal_has_delay();
}
inline void SimulationWorld::clear_delay() {
  if (delay_ != nullptr) delay_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::dreamview::DelaysInMs& SimulationWorld::_internal_delay() const {
  const ::apollo::dreamview::DelaysInMs* p = delay_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::DelaysInMs*>(
      &::apollo::dreamview::_DelaysInMs_default_instance_);
}
inline const ::apollo::dreamview::DelaysInMs& SimulationWorld::delay() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.delay)
  return _internal_delay();
}
inline ::apollo::dreamview::DelaysInMs* SimulationWorld::release_delay() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.delay)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::dreamview::DelaysInMs* temp = delay_;
  delay_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::DelaysInMs* SimulationWorld::_internal_mutable_delay() {
  _has_bits_[0] |= 0x00000020u;
  if (delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::DelaysInMs>(GetArenaNoVirtual());
    delay_ = p;
  }
  return delay_;
}
inline ::apollo::dreamview::DelaysInMs* SimulationWorld::mutable_delay() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.delay)
  return _internal_mutable_delay();
}
inline void SimulationWorld::set_allocated_delay(::apollo::dreamview::DelaysInMs* delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete delay_;
  }
  if (delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  delay_ = delay;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.delay)
}

// optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
inline bool SimulationWorld::_internal_has_monitor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || monitor_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_monitor() const {
  return _internal_has_monitor();
}
inline const ::apollo::common::monitor::MonitorMessage& SimulationWorld::_internal_monitor() const {
  const ::apollo::common::monitor::MonitorMessage* p = monitor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::monitor::MonitorMessage*>(
      &::apollo::common::monitor::_MonitorMessage_default_instance_);
}
inline const ::apollo::common::monitor::MonitorMessage& SimulationWorld::monitor() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.monitor)
  return _internal_monitor();
}
inline ::apollo::common::monitor::MonitorMessage* SimulationWorld::release_monitor() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.monitor)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::common::monitor::MonitorMessage* temp = monitor_;
  monitor_ = nullptr;
  return temp;
}
inline ::apollo::common::monitor::MonitorMessage* SimulationWorld::_internal_mutable_monitor() {
  _has_bits_[0] |= 0x00000040u;
  if (monitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::monitor::MonitorMessage>(GetArenaNoVirtual());
    monitor_ = p;
  }
  return monitor_;
}
inline ::apollo::common::monitor::MonitorMessage* SimulationWorld::mutable_monitor() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.monitor)
  return _internal_mutable_monitor();
}
inline void SimulationWorld::set_allocated_monitor(::apollo::common::monitor::MonitorMessage* monitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitor_);
  }
  if (monitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      monitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  monitor_ = monitor;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.monitor)
}

// repeated .apollo.dreamview.Notification notification = 14;
inline int SimulationWorld::_internal_notification_size() const {
  return notification_.size();
}
inline int SimulationWorld::notification_size() const {
  return _internal_notification_size();
}
inline void SimulationWorld::clear_notification() {
  notification_.Clear();
}
inline ::apollo::dreamview::Notification* SimulationWorld::mutable_notification(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.notification)
  return notification_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Notification >*
SimulationWorld::mutable_notification() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.notification)
  return &notification_;
}
inline const ::apollo::dreamview::Notification& SimulationWorld::_internal_notification(int index) const {
  return notification_.Get(index);
}
inline const ::apollo::dreamview::Notification& SimulationWorld::notification(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.notification)
  return _internal_notification(index);
}
inline ::apollo::dreamview::Notification* SimulationWorld::_internal_add_notification() {
  return notification_.Add();
}
inline ::apollo::dreamview::Notification* SimulationWorld::add_notification() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.notification)
  return _internal_add_notification();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Notification >&
SimulationWorld::notification() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.notification)
  return notification_;
}

// optional string engage_advice = 15;
inline bool SimulationWorld::_internal_has_engage_advice() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SimulationWorld::has_engage_advice() const {
  return _internal_has_engage_advice();
}
inline void SimulationWorld::clear_engage_advice() {
  engage_advice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimulationWorld::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.engage_advice)
  return _internal_engage_advice();
}
inline void SimulationWorld::set_engage_advice(const std::string& value) {
  _internal_set_engage_advice(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.engage_advice)
}
inline std::string* SimulationWorld::mutable_engage_advice() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.engage_advice)
  return _internal_mutable_engage_advice();
}
inline const std::string& SimulationWorld::_internal_engage_advice() const {
  return engage_advice_.GetNoArena();
}
inline void SimulationWorld::_internal_set_engage_advice(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  engage_advice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SimulationWorld::set_engage_advice(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  engage_advice_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.SimulationWorld.engage_advice)
}
inline void SimulationWorld::set_engage_advice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  engage_advice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.SimulationWorld.engage_advice)
}
inline void SimulationWorld::set_engage_advice(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  engage_advice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.SimulationWorld.engage_advice)
}
inline std::string* SimulationWorld::_internal_mutable_engage_advice() {
  _has_bits_[0] |= 0x00000001u;
  return engage_advice_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SimulationWorld::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.engage_advice)
  if (!_internal_has_engage_advice()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return engage_advice_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SimulationWorld::set_allocated_engage_advice(std::string* engage_advice) {
  if (engage_advice != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  engage_advice_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), engage_advice);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.engage_advice)
}

// map<string, .apollo.dreamview.Latency> latency = 16;
inline int SimulationWorld::_internal_latency_size() const {
  return latency_.size();
}
inline int SimulationWorld::latency_size() const {
  return _internal_latency_size();
}
inline void SimulationWorld::clear_latency() {
  latency_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >&
SimulationWorld::_internal_latency() const {
  return latency_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >&
SimulationWorld::latency() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.SimulationWorld.latency)
  return _internal_latency();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >*
SimulationWorld::_internal_mutable_latency() {
  return latency_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >*
SimulationWorld::mutable_latency() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.SimulationWorld.latency)
  return _internal_mutable_latency();
}

// optional .apollo.dreamview.MapElementIds map_element_ids = 17;
inline bool SimulationWorld::_internal_has_map_element_ids() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || map_element_ids_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_map_element_ids() const {
  return _internal_has_map_element_ids();
}
inline void SimulationWorld::clear_map_element_ids() {
  if (map_element_ids_ != nullptr) map_element_ids_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::dreamview::MapElementIds& SimulationWorld::_internal_map_element_ids() const {
  const ::apollo::dreamview::MapElementIds* p = map_element_ids_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::MapElementIds*>(
      &::apollo::dreamview::_MapElementIds_default_instance_);
}
inline const ::apollo::dreamview::MapElementIds& SimulationWorld::map_element_ids() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.map_element_ids)
  return _internal_map_element_ids();
}
inline ::apollo::dreamview::MapElementIds* SimulationWorld::release_map_element_ids() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.map_element_ids)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::dreamview::MapElementIds* temp = map_element_ids_;
  map_element_ids_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::MapElementIds* SimulationWorld::_internal_mutable_map_element_ids() {
  _has_bits_[0] |= 0x00000080u;
  if (map_element_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::MapElementIds>(GetArenaNoVirtual());
    map_element_ids_ = p;
  }
  return map_element_ids_;
}
inline ::apollo::dreamview::MapElementIds* SimulationWorld::mutable_map_element_ids() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.map_element_ids)
  return _internal_mutable_map_element_ids();
}
inline void SimulationWorld::set_allocated_map_element_ids(::apollo::dreamview::MapElementIds* map_element_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_element_ids_;
  }
  if (map_element_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_element_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_element_ids, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  map_element_ids_ = map_element_ids;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.map_element_ids)
}

// optional uint64 map_hash = 18;
inline bool SimulationWorld::_internal_has_map_hash() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SimulationWorld::has_map_hash() const {
  return _internal_has_map_hash();
}
inline void SimulationWorld::clear_map_hash() {
  map_hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimulationWorld::_internal_map_hash() const {
  return map_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SimulationWorld::map_hash() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.map_hash)
  return _internal_map_hash();
}
inline void SimulationWorld::_internal_set_map_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  map_hash_ = value;
}
inline void SimulationWorld::set_map_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_map_hash(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.map_hash)
}

// optional double map_radius = 19;
inline bool SimulationWorld::_internal_has_map_radius() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool SimulationWorld::has_map_radius() const {
  return _internal_has_map_radius();
}
inline void SimulationWorld::clear_map_radius() {
  map_radius_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double SimulationWorld::_internal_map_radius() const {
  return map_radius_;
}
inline double SimulationWorld::map_radius() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.map_radius)
  return _internal_map_radius();
}
inline void SimulationWorld::_internal_set_map_radius(double value) {
  _has_bits_[0] |= 0x00020000u;
  map_radius_ = value;
}
inline void SimulationWorld::set_map_radius(double value) {
  _internal_set_map_radius(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.map_radius)
}

// optional .apollo.planning_internal.PlanningData planning_data = 20;
inline bool SimulationWorld::_internal_has_planning_data() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || planning_data_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_planning_data() const {
  return _internal_has_planning_data();
}
inline const ::apollo::planning_internal::PlanningData& SimulationWorld::_internal_planning_data() const {
  const ::apollo::planning_internal::PlanningData* p = planning_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::planning_internal::PlanningData*>(
      &::apollo::planning_internal::_PlanningData_default_instance_);
}
inline const ::apollo::planning_internal::PlanningData& SimulationWorld::planning_data() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.planning_data)
  return _internal_planning_data();
}
inline ::apollo::planning_internal::PlanningData* SimulationWorld::release_planning_data() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.planning_data)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::planning_internal::PlanningData* temp = planning_data_;
  planning_data_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::PlanningData* SimulationWorld::_internal_mutable_planning_data() {
  _has_bits_[0] |= 0x00000100u;
  if (planning_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::PlanningData>(GetArenaNoVirtual());
    planning_data_ = p;
  }
  return planning_data_;
}
inline ::apollo::planning_internal::PlanningData* SimulationWorld::mutable_planning_data() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.planning_data)
  return _internal_mutable_planning_data();
}
inline void SimulationWorld::set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(planning_data_);
  }
  if (planning_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      planning_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planning_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  planning_data_ = planning_data;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.planning_data)
}

// optional .apollo.dreamview.Object gps = 21;
inline bool SimulationWorld::_internal_has_gps() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || gps_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_gps() const {
  return _internal_has_gps();
}
inline void SimulationWorld::clear_gps() {
  if (gps_ != nullptr) gps_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::dreamview::Object& SimulationWorld::_internal_gps() const {
  const ::apollo::dreamview::Object* p = gps_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::Object*>(
      &::apollo::dreamview::_Object_default_instance_);
}
inline const ::apollo::dreamview::Object& SimulationWorld::gps() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.gps)
  return _internal_gps();
}
inline ::apollo::dreamview::Object* SimulationWorld::release_gps() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.gps)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::dreamview::Object* temp = gps_;
  gps_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Object* SimulationWorld::_internal_mutable_gps() {
  _has_bits_[0] |= 0x00000200u;
  if (gps_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Object>(GetArenaNoVirtual());
    gps_ = p;
  }
  return gps_;
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_gps() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.gps)
  return _internal_mutable_gps();
}
inline void SimulationWorld::set_allocated_gps(::apollo::dreamview::Object* gps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gps_;
  }
  if (gps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  gps_ = gps;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.gps)
}

// optional .apollo.perception.LaneMarkers lane_marker = 22;
inline bool SimulationWorld::_internal_has_lane_marker() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || lane_marker_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_lane_marker() const {
  return _internal_has_lane_marker();
}
inline const ::apollo::perception::LaneMarkers& SimulationWorld::_internal_lane_marker() const {
  const ::apollo::perception::LaneMarkers* p = lane_marker_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::perception::LaneMarkers*>(
      &::apollo::perception::_LaneMarkers_default_instance_);
}
inline const ::apollo::perception::LaneMarkers& SimulationWorld::lane_marker() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.lane_marker)
  return _internal_lane_marker();
}
inline ::apollo::perception::LaneMarkers* SimulationWorld::release_lane_marker() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.lane_marker)
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = nullptr;
  return temp;
}
inline ::apollo::perception::LaneMarkers* SimulationWorld::_internal_mutable_lane_marker() {
  _has_bits_[0] |= 0x00000400u;
  if (lane_marker_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::LaneMarkers>(GetArenaNoVirtual());
    lane_marker_ = p;
  }
  return lane_marker_;
}
inline ::apollo::perception::LaneMarkers* SimulationWorld::mutable_lane_marker() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.lane_marker)
  return _internal_mutable_lane_marker();
}
inline void SimulationWorld::set_allocated_lane_marker(::apollo::perception::LaneMarkers* lane_marker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_marker_);
  }
  if (lane_marker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_marker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_marker, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  lane_marker_ = lane_marker;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.lane_marker)
}

// optional .apollo.dreamview.ControlData control_data = 23;
inline bool SimulationWorld::_internal_has_control_data() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || control_data_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_control_data() const {
  return _internal_has_control_data();
}
inline void SimulationWorld::clear_control_data() {
  if (control_data_ != nullptr) control_data_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::dreamview::ControlData& SimulationWorld::_internal_control_data() const {
  const ::apollo::dreamview::ControlData* p = control_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::ControlData*>(
      &::apollo::dreamview::_ControlData_default_instance_);
}
inline const ::apollo::dreamview::ControlData& SimulationWorld::control_data() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.control_data)
  return _internal_control_data();
}
inline ::apollo::dreamview::ControlData* SimulationWorld::release_control_data() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.control_data)
  _has_bits_[0] &= ~0x00000800u;
  ::apollo::dreamview::ControlData* temp = control_data_;
  control_data_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ControlData* SimulationWorld::_internal_mutable_control_data() {
  _has_bits_[0] |= 0x00000800u;
  if (control_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ControlData>(GetArenaNoVirtual());
    control_data_ = p;
  }
  return control_data_;
}
inline ::apollo::dreamview::ControlData* SimulationWorld::mutable_control_data() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.control_data)
  return _internal_mutable_control_data();
}
inline void SimulationWorld::set_allocated_control_data(::apollo::dreamview::ControlData* control_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_data_;
  }
  if (control_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  control_data_ = control_data;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.control_data)
}

// repeated .apollo.common.Path navigation_path = 24;
inline int SimulationWorld::_internal_navigation_path_size() const {
  return navigation_path_.size();
}
inline int SimulationWorld::navigation_path_size() const {
  return _internal_navigation_path_size();
}
inline ::apollo::common::Path* SimulationWorld::mutable_navigation_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.navigation_path)
  return navigation_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >*
SimulationWorld::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.SimulationWorld.navigation_path)
  return &navigation_path_;
}
inline const ::apollo::common::Path& SimulationWorld::_internal_navigation_path(int index) const {
  return navigation_path_.Get(index);
}
inline const ::apollo::common::Path& SimulationWorld::navigation_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.navigation_path)
  return _internal_navigation_path(index);
}
inline ::apollo::common::Path* SimulationWorld::_internal_add_navigation_path() {
  return navigation_path_.Add();
}
inline ::apollo::common::Path* SimulationWorld::add_navigation_path() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.SimulationWorld.navigation_path)
  return _internal_add_navigation_path();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >&
SimulationWorld::navigation_path() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.SimulationWorld.navigation_path)
  return navigation_path_;
}

// optional bool is_rss_safe = 25 [default = true];
inline bool SimulationWorld::_internal_has_is_rss_safe() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool SimulationWorld::has_is_rss_safe() const {
  return _internal_has_is_rss_safe();
}
inline void SimulationWorld::clear_is_rss_safe() {
  is_rss_safe_ = true;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool SimulationWorld::_internal_is_rss_safe() const {
  return is_rss_safe_;
}
inline bool SimulationWorld::is_rss_safe() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.is_rss_safe)
  return _internal_is_rss_safe();
}
inline void SimulationWorld::_internal_set_is_rss_safe(bool value) {
  _has_bits_[0] |= 0x00080000u;
  is_rss_safe_ = value;
}
inline void SimulationWorld::set_is_rss_safe(bool value) {
  _internal_set_is_rss_safe(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.SimulationWorld.is_rss_safe)
}

// optional .apollo.dreamview.Object shadow_localization = 26;
inline bool SimulationWorld::_internal_has_shadow_localization() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || shadow_localization_ != nullptr);
  return value;
}
inline bool SimulationWorld::has_shadow_localization() const {
  return _internal_has_shadow_localization();
}
inline void SimulationWorld::clear_shadow_localization() {
  if (shadow_localization_ != nullptr) shadow_localization_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::dreamview::Object& SimulationWorld::_internal_shadow_localization() const {
  const ::apollo::dreamview::Object* p = shadow_localization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::Object*>(
      &::apollo::dreamview::_Object_default_instance_);
}
inline const ::apollo::dreamview::Object& SimulationWorld::shadow_localization() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.SimulationWorld.shadow_localization)
  return _internal_shadow_localization();
}
inline ::apollo::dreamview::Object* SimulationWorld::release_shadow_localization() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.SimulationWorld.shadow_localization)
  _has_bits_[0] &= ~0x00001000u;
  ::apollo::dreamview::Object* temp = shadow_localization_;
  shadow_localization_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::Object* SimulationWorld::_internal_mutable_shadow_localization() {
  _has_bits_[0] |= 0x00001000u;
  if (shadow_localization_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Object>(GetArenaNoVirtual());
    shadow_localization_ = p;
  }
  return shadow_localization_;
}
inline ::apollo::dreamview::Object* SimulationWorld::mutable_shadow_localization() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.SimulationWorld.shadow_localization)
  return _internal_mutable_shadow_localization();
}
inline void SimulationWorld::set_allocated_shadow_localization(::apollo::dreamview::Object* shadow_localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shadow_localization_;
  }
  if (shadow_localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shadow_localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shadow_localization, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  shadow_localization_ = shadow_localization;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.SimulationWorld.shadow_localization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::Decision_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Decision_Type>() {
  return ::apollo::dreamview::Decision_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::dreamview::Decision_StopReasonCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Decision_StopReasonCode>() {
  return ::apollo::dreamview::Decision_StopReasonCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::dreamview::Object_DisengageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Object_DisengageType>() {
  return ::apollo::dreamview::Object_DisengageType_descriptor();
}
template <> struct is_proto_enum< ::apollo::dreamview::Object_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Object_Type>() {
  return ::apollo::dreamview::Object_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto
