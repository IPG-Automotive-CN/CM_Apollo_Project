// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_mode.proto

#include "modules/dreamview/proto/hmi_mode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
namespace apollo {
namespace dreamview {
class ProcessMonitorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessMonitorConfig> _instance;
} _ProcessMonitorConfig_default_instance_;
class ChannelMonitorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMonitorConfig> _instance;
} _ChannelMonitorConfig_default_instance_;
class ResourceMonitorConfig_DiskSpaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMonitorConfig_DiskSpace> _instance;
} _ResourceMonitorConfig_DiskSpace_default_instance_;
class ResourceMonitorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMonitorConfig> _instance;
} _ResourceMonitorConfig_default_instance_;
class MonitoredComponentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MonitoredComponent> _instance;
} _MonitoredComponent_default_instance_;
class ModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Module> _instance;
} _Module_default_instance_;
class CyberModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CyberModule> _instance;
} _CyberModule_default_instance_;
class HMIMode_CyberModulesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode_CyberModulesEntry_DoNotUse> _instance;
} _HMIMode_CyberModulesEntry_DoNotUse_default_instance_;
class HMIMode_ModulesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode_ModulesEntry_DoNotUse> _instance;
} _HMIMode_ModulesEntry_DoNotUse_default_instance_;
class HMIMode_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode_MonitoredComponentsEntry_DoNotUse> _instance;
} _HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_;
class HMIModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIMode> _instance;
} _HMIMode_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ChannelMonitorConfig_default_instance_;
    new (ptr) ::apollo::dreamview::ChannelMonitorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::ChannelMonitorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_CyberModule_default_instance_;
    new (ptr) ::apollo::dreamview::CyberModule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::CyberModule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::HMIMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_CyberModulesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_ModulesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Module_default_instance_;
    new (ptr) ::apollo::dreamview::Module();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Module::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_MonitoredComponent_default_instance_;
    new (ptr) ::apollo::dreamview::MonitoredComponent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::MonitoredComponent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
      &scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ProcessMonitorConfig_default_instance_;
    new (ptr) ::apollo::dreamview::ProcessMonitorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::ProcessMonitorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static void InitDefaultsscc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ResourceMonitorConfig_default_instance_;
    new (ptr) ::apollo::dreamview::ResourceMonitorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::ResourceMonitorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {
      &scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,}};

static void InitDefaultsscc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ResourceMonitorConfig_DiskSpace_default_instance_;
    new (ptr) ::apollo::dreamview::ResourceMonitorConfig_DiskSpace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ProcessMonitorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ProcessMonitorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ProcessMonitorConfig, command_keywords_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ChannelMonitorConfig, delay_fatal_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, insufficient_space_warning_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig_DiskSpace, insufficient_space_error_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ResourceMonitorConfig, disk_spaces_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, process_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, resource_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MonitoredComponent, required_for_safety_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, start_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, stop_command_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, process_monitor_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Module, required_for_safety_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, dag_files_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, required_for_safety_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::CyberModule, process_group_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, cyber_modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIMode, monitored_components_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::dreamview::ProcessMonitorConfig)},
  { 7, 14, sizeof(::apollo::dreamview::ChannelMonitorConfig)},
  { 16, 24, sizeof(::apollo::dreamview::ResourceMonitorConfig_DiskSpace)},
  { 27, 33, sizeof(::apollo::dreamview::ResourceMonitorConfig)},
  { 34, 43, sizeof(::apollo::dreamview::MonitoredComponent)},
  { 47, 56, sizeof(::apollo::dreamview::Module)},
  { 60, 68, sizeof(::apollo::dreamview::CyberModule)},
  { 71, 78, sizeof(::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse)},
  { 80, 87, sizeof(::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse)},
  { 89, 96, sizeof(::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse)},
  { 98, 106, sizeof(::apollo::dreamview::HMIMode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ProcessMonitorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ChannelMonitorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ResourceMonitorConfig_DiskSpace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ResourceMonitorConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_MonitoredComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Module_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_CyberModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_CyberModulesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_ModulesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIMode_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/dreamview/proto/hmi_mode.proto"
  "\022\020apollo.dreamview\"0\n\024ProcessMonitorConf"
  "ig\022\030\n\020command_keywords\030\001 \003(\t\"<\n\024ChannelM"
  "onitorConfig\022\014\n\004name\030\001 \001(\t\022\026\n\013delay_fata"
  "l\030\002 \001(\001:\0013\"\300\001\n\025ResourceMonitorConfig\022F\n\013"
  "disk_spaces\030\001 \003(\01321.apollo.dreamview.Res"
  "ourceMonitorConfig.DiskSpace\032_\n\tDiskSpac"
  "e\022\014\n\004path\030\001 \001(\t\022\"\n\032insufficient_space_wa"
  "rning\030\002 \001(\005\022 \n\030insufficient_space_error\030"
  "\003 \001(\005\"\344\001\n\022MonitoredComponent\0227\n\007process\030"
  "\001 \001(\0132&.apollo.dreamview.ProcessMonitorC"
  "onfig\0227\n\007channel\030\002 \001(\0132&.apollo.dreamvie"
  "w.ChannelMonitorConfig\0229\n\010resource\030\003 \001(\013"
  "2\'.apollo.dreamview.ResourceMonitorConfi"
  "g\022!\n\023required_for_safety\030\004 \001(\010:\004true\"\240\001\n"
  "\006Module\022\025\n\rstart_command\030\001 \001(\t\022\024\n\014stop_c"
  "ommand\030\002 \001(\t\022F\n\026process_monitor_config\030\003"
  " \001(\0132&.apollo.dreamview.ProcessMonitorCo"
  "nfig\022!\n\023required_for_safety\030\004 \001(\010:\004true\""
  "Z\n\013CyberModule\022\021\n\tdag_files\030\001 \003(\t\022!\n\023req"
  "uired_for_safety\030\002 \001(\010:\004true\022\025\n\rprocess_"
  "group\030\003 \001(\t\"\330\003\n\007HMIMode\022B\n\rcyber_modules"
  "\030\001 \003(\0132+.apollo.dreamview.HMIMode.CyberM"
  "odulesEntry\0227\n\007modules\030\002 \003(\0132&.apollo.dr"
  "eamview.HMIMode.ModulesEntry\022P\n\024monitore"
  "d_components\030\003 \003(\01322.apollo.dreamview.HM"
  "IMode.MonitoredComponentsEntry\032R\n\021CyberM"
  "odulesEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132"
  "\035.apollo.dreamview.CyberModule:\0028\001\032H\n\014Mo"
  "dulesEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132\030"
  ".apollo.dreamview.Module:\0028\001\032`\n\030Monitore"
  "dComponentsEntry\022\013\n\003key\030\001 \001(\t\0223\n\005value\030\002"
  " \001(\0132$.apollo.dreamview.MonitoredCompone"
  "nt:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_sccs[11] = {
  &scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_CyberModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_ModulesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_HMIMode_MonitoredComponentsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
  &scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_once;
static bool descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto = {
  &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_initialized, descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto, "modules/dreamview/proto/hmi_mode.proto", 1326,
  &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_sccs, descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto, 11, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto), true);
namespace apollo {
namespace dreamview {

// ===================================================================

void ProcessMonitorConfig::InitAsDefaultInstance() {
}
class ProcessMonitorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessMonitorConfig>()._has_bits_);
};

ProcessMonitorConfig::ProcessMonitorConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.ProcessMonitorConfig)
}
ProcessMonitorConfig::ProcessMonitorConfig(const ProcessMonitorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      command_keywords_(from.command_keywords_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ProcessMonitorConfig)
}

void ProcessMonitorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
}

ProcessMonitorConfig::~ProcessMonitorConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ProcessMonitorConfig)
  SharedDtor();
}

void ProcessMonitorConfig::SharedDtor() {
}

void ProcessMonitorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessMonitorConfig& ProcessMonitorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ProcessMonitorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ProcessMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_keywords_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ProcessMonitorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string command_keywords = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_command_keywords();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ProcessMonitorConfig.command_keywords");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessMonitorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ProcessMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_keywords = 1;
  for (int i = 0, n = this->_internal_command_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_command_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ProcessMonitorConfig.command_keywords");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ProcessMonitorConfig)
  return target;
}

size_t ProcessMonitorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ProcessMonitorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command_keywords = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(command_keywords_.size());
  for (int i = 0, n = command_keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      command_keywords_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessMonitorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ProcessMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessMonitorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessMonitorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ProcessMonitorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ProcessMonitorConfig)
    MergeFrom(*source);
  }
}

void ProcessMonitorConfig::MergeFrom(const ProcessMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ProcessMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_keywords_.MergeFrom(from.command_keywords_);
}

void ProcessMonitorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ProcessMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessMonitorConfig::CopyFrom(const ProcessMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ProcessMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMonitorConfig::IsInitialized() const {
  return true;
}

void ProcessMonitorConfig::InternalSwap(ProcessMonitorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_keywords_.InternalSwap(&other->command_keywords_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMonitorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelMonitorConfig::InitAsDefaultInstance() {
}
class ChannelMonitorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelMonitorConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delay_fatal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChannelMonitorConfig::ChannelMonitorConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.ChannelMonitorConfig)
}
ChannelMonitorConfig::ChannelMonitorConfig(const ChannelMonitorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  delay_fatal_ = from.delay_fatal_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ChannelMonitorConfig)
}

void ChannelMonitorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delay_fatal_ = 3;
}

ChannelMonitorConfig::~ChannelMonitorConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ChannelMonitorConfig)
  SharedDtor();
}

void ChannelMonitorConfig::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelMonitorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMonitorConfig& ChannelMonitorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ChannelMonitorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ChannelMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    delay_fatal_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelMonitorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ChannelMonitorConfig.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double delay_fatal = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_delay_fatal(&has_bits);
          delay_fatal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMonitorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ChannelMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ChannelMonitorConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double delay_fatal = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_delay_fatal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ChannelMonitorConfig)
  return target;
}

size_t ChannelMonitorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ChannelMonitorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double delay_fatal = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMonitorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ChannelMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMonitorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMonitorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ChannelMonitorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ChannelMonitorConfig)
    MergeFrom(*source);
  }
}

void ChannelMonitorConfig::MergeFrom(const ChannelMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ChannelMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      delay_fatal_ = from.delay_fatal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelMonitorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ChannelMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMonitorConfig::CopyFrom(const ChannelMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ChannelMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMonitorConfig::IsInitialized() const {
  return true;
}

void ChannelMonitorConfig::InternalSwap(ChannelMonitorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delay_fatal_, other->delay_fatal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMonitorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceMonitorConfig_DiskSpace::InitAsDefaultInstance() {
}
class ResourceMonitorConfig_DiskSpace::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceMonitorConfig_DiskSpace>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_insufficient_space_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_insufficient_space_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ResourceMonitorConfig_DiskSpace::ResourceMonitorConfig_DiskSpace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
}
ResourceMonitorConfig_DiskSpace::ResourceMonitorConfig_DiskSpace(const ResourceMonitorConfig_DiskSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&insufficient_space_warning_, &from.insufficient_space_warning_,
    static_cast<size_t>(reinterpret_cast<char*>(&insufficient_space_error_) -
    reinterpret_cast<char*>(&insufficient_space_warning_)) + sizeof(insufficient_space_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
}

void ResourceMonitorConfig_DiskSpace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&insufficient_space_warning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&insufficient_space_error_) -
      reinterpret_cast<char*>(&insufficient_space_warning_)) + sizeof(insufficient_space_error_));
}

ResourceMonitorConfig_DiskSpace::~ResourceMonitorConfig_DiskSpace() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  SharedDtor();
}

void ResourceMonitorConfig_DiskSpace::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceMonitorConfig_DiskSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMonitorConfig_DiskSpace& ResourceMonitorConfig_DiskSpace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMonitorConfig_DiskSpace_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ResourceMonitorConfig_DiskSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&insufficient_space_warning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&insufficient_space_error_) -
        reinterpret_cast<char*>(&insufficient_space_warning_)) + sizeof(insufficient_space_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ResourceMonitorConfig_DiskSpace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.ResourceMonitorConfig.DiskSpace.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 insufficient_space_warning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_insufficient_space_warning(&has_bits);
          insufficient_space_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 insufficient_space_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_insufficient_space_error(&has_bits);
          insufficient_space_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMonitorConfig_DiskSpace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.ResourceMonitorConfig.DiskSpace.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional int32 insufficient_space_warning = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_insufficient_space_warning(), target);
  }

  // optional int32 insufficient_space_error = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_insufficient_space_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  return target;
}

size_t ResourceMonitorConfig_DiskSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional int32 insufficient_space_warning = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_insufficient_space_warning());
    }

    // optional int32 insufficient_space_error = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_insufficient_space_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMonitorConfig_DiskSpace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMonitorConfig_DiskSpace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMonitorConfig_DiskSpace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
    MergeFrom(*source);
  }
}

void ResourceMonitorConfig_DiskSpace::MergeFrom(const ResourceMonitorConfig_DiskSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      insufficient_space_warning_ = from.insufficient_space_warning_;
    }
    if (cached_has_bits & 0x00000004u) {
      insufficient_space_error_ = from.insufficient_space_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceMonitorConfig_DiskSpace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMonitorConfig_DiskSpace::CopyFrom(const ResourceMonitorConfig_DiskSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMonitorConfig_DiskSpace::IsInitialized() const {
  return true;
}

void ResourceMonitorConfig_DiskSpace::InternalSwap(ResourceMonitorConfig_DiskSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(insufficient_space_warning_, other->insufficient_space_warning_);
  swap(insufficient_space_error_, other->insufficient_space_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMonitorConfig_DiskSpace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceMonitorConfig::InitAsDefaultInstance() {
}
class ResourceMonitorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceMonitorConfig>()._has_bits_);
};

ResourceMonitorConfig::ResourceMonitorConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.ResourceMonitorConfig)
}
ResourceMonitorConfig::ResourceMonitorConfig(const ResourceMonitorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      disk_spaces_(from.disk_spaces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ResourceMonitorConfig)
}

void ResourceMonitorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
}

ResourceMonitorConfig::~ResourceMonitorConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ResourceMonitorConfig)
  SharedDtor();
}

void ResourceMonitorConfig::SharedDtor() {
}

void ResourceMonitorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMonitorConfig& ResourceMonitorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMonitorConfig_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void ResourceMonitorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ResourceMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disk_spaces_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ResourceMonitorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disk_spaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMonitorConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ResourceMonitorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_disk_spaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_disk_spaces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ResourceMonitorConfig)
  return target;
}

size_t ResourceMonitorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ResourceMonitorConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
  total_size += 1UL * this->_internal_disk_spaces_size();
  for (const auto& msg : this->disk_spaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMonitorConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ResourceMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMonitorConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMonitorConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ResourceMonitorConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ResourceMonitorConfig)
    MergeFrom(*source);
  }
}

void ResourceMonitorConfig::MergeFrom(const ResourceMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ResourceMonitorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disk_spaces_.MergeFrom(from.disk_spaces_);
}

void ResourceMonitorConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ResourceMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMonitorConfig::CopyFrom(const ResourceMonitorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ResourceMonitorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMonitorConfig::IsInitialized() const {
  return true;
}

void ResourceMonitorConfig::InternalSwap(ResourceMonitorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disk_spaces_.InternalSwap(&other->disk_spaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMonitorConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MonitoredComponent::InitAsDefaultInstance() {
  ::apollo::dreamview::_MonitoredComponent_default_instance_._instance.get_mutable()->process_ = const_cast< ::apollo::dreamview::ProcessMonitorConfig*>(
      ::apollo::dreamview::ProcessMonitorConfig::internal_default_instance());
  ::apollo::dreamview::_MonitoredComponent_default_instance_._instance.get_mutable()->channel_ = const_cast< ::apollo::dreamview::ChannelMonitorConfig*>(
      ::apollo::dreamview::ChannelMonitorConfig::internal_default_instance());
  ::apollo::dreamview::_MonitoredComponent_default_instance_._instance.get_mutable()->resource_ = const_cast< ::apollo::dreamview::ResourceMonitorConfig*>(
      ::apollo::dreamview::ResourceMonitorConfig::internal_default_instance());
}
class MonitoredComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<MonitoredComponent>()._has_bits_);
  static const ::apollo::dreamview::ProcessMonitorConfig& process(const MonitoredComponent* msg);
  static void set_has_process(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::dreamview::ChannelMonitorConfig& channel(const MonitoredComponent* msg);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::dreamview::ResourceMonitorConfig& resource(const MonitoredComponent* msg);
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_required_for_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::dreamview::ProcessMonitorConfig&
MonitoredComponent::_Internal::process(const MonitoredComponent* msg) {
  return *msg->process_;
}
const ::apollo::dreamview::ChannelMonitorConfig&
MonitoredComponent::_Internal::channel(const MonitoredComponent* msg) {
  return *msg->channel_;
}
const ::apollo::dreamview::ResourceMonitorConfig&
MonitoredComponent::_Internal::resource(const MonitoredComponent* msg) {
  return *msg->resource_;
}
MonitoredComponent::MonitoredComponent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.MonitoredComponent)
}
MonitoredComponent::MonitoredComponent(const MonitoredComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_process()) {
    process_ = new ::apollo::dreamview::ProcessMonitorConfig(*from.process_);
  } else {
    process_ = nullptr;
  }
  if (from._internal_has_channel()) {
    channel_ = new ::apollo::dreamview::ChannelMonitorConfig(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from._internal_has_resource()) {
    resource_ = new ::apollo::dreamview::ResourceMonitorConfig(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  required_for_safety_ = from.required_for_safety_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.MonitoredComponent)
}

void MonitoredComponent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  ::memset(&process_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&process_)) + sizeof(resource_));
  required_for_safety_ = true;
}

MonitoredComponent::~MonitoredComponent() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.MonitoredComponent)
  SharedDtor();
}

void MonitoredComponent::SharedDtor() {
  if (this != internal_default_instance()) delete process_;
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete resource_;
}

void MonitoredComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MonitoredComponent& MonitoredComponent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MonitoredComponent_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void MonitoredComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.MonitoredComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(process_ != nullptr);
      process_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(channel_ != nullptr);
      channel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resource_ != nullptr);
      resource_->Clear();
    }
    required_for_safety_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MonitoredComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_process(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool required_for_safety = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_required_for_safety(&has_bits);
          required_for_safety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MonitoredComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.MonitoredComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::process(this), target, stream);
  }

  // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel(this), target, stream);
  }

  // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resource(this), target, stream);
  }

  // optional bool required_for_safety = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_required_for_safety(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.MonitoredComponent)
  return target;
}

size_t MonitoredComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.MonitoredComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_);
    }

    // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_);
    }

    // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_);
    }

    // optional bool required_for_safety = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MonitoredComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.MonitoredComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const MonitoredComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MonitoredComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.MonitoredComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.MonitoredComponent)
    MergeFrom(*source);
  }
}

void MonitoredComponent::MergeFrom(const MonitoredComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.MonitoredComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_process()->::apollo::dreamview::ProcessMonitorConfig::MergeFrom(from._internal_process());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_channel()->::apollo::dreamview::ChannelMonitorConfig::MergeFrom(from._internal_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resource()->::apollo::dreamview::ResourceMonitorConfig::MergeFrom(from._internal_resource());
    }
    if (cached_has_bits & 0x00000008u) {
      required_for_safety_ = from.required_for_safety_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MonitoredComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.MonitoredComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitoredComponent::CopyFrom(const MonitoredComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.MonitoredComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitoredComponent::IsInitialized() const {
  return true;
}

void MonitoredComponent::InternalSwap(MonitoredComponent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(process_, other->process_);
  swap(channel_, other->channel_);
  swap(resource_, other->resource_);
  swap(required_for_safety_, other->required_for_safety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MonitoredComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Module::InitAsDefaultInstance() {
  ::apollo::dreamview::_Module_default_instance_._instance.get_mutable()->process_monitor_config_ = const_cast< ::apollo::dreamview::ProcessMonitorConfig*>(
      ::apollo::dreamview::ProcessMonitorConfig::internal_default_instance());
}
class Module::_Internal {
 public:
  using HasBits = decltype(std::declval<Module>()._has_bits_);
  static void set_has_start_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::dreamview::ProcessMonitorConfig& process_monitor_config(const Module* msg);
  static void set_has_process_monitor_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_required_for_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::dreamview::ProcessMonitorConfig&
Module::_Internal::process_monitor_config(const Module* msg) {
  return *msg->process_monitor_config_;
}
Module::Module()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Module)
}
Module::Module(const Module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_command()) {
    start_command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_command_);
  }
  stop_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stop_command()) {
    stop_command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_command_);
  }
  if (from._internal_has_process_monitor_config()) {
    process_monitor_config_ = new ::apollo::dreamview::ProcessMonitorConfig(*from.process_monitor_config_);
  } else {
    process_monitor_config_ = nullptr;
  }
  required_for_safety_ = from.required_for_safety_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Module)
}

void Module::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  start_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_monitor_config_ = nullptr;
  required_for_safety_ = true;
}

Module::~Module() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Module)
  SharedDtor();
}

void Module::SharedDtor() {
  start_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete process_monitor_config_;
}

void Module::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Module& Module::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Module_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void Module::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Module)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      start_command_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stop_command_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(process_monitor_config_ != nullptr);
      process_monitor_config_->Clear();
    }
    required_for_safety_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Module::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string start_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Module.start_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stop_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stop_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Module.stop_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_monitor_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool required_for_safety = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_required_for_safety(&has_bits);
          required_for_safety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Module::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Module)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string start_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_command().data(), static_cast<int>(this->_internal_start_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Module.start_command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start_command(), target);
  }

  // optional string stop_command = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stop_command().data(), static_cast<int>(this->_internal_stop_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Module.stop_command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stop_command(), target);
  }

  // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::process_monitor_config(this), target, stream);
  }

  // optional bool required_for_safety = 4 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_required_for_safety(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Module)
  return target;
}

size_t Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Module)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string start_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_command());
    }

    // optional string stop_command = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop_command());
    }

    // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *process_monitor_config_);
    }

    // optional bool required_for_safety = 4 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Module::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Module)
  GOOGLE_DCHECK_NE(&from, this);
  const Module* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Module>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Module)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Module)
    MergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      start_command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_command_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      stop_command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stop_command_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_process_monitor_config()->::apollo::dreamview::ProcessMonitorConfig::MergeFrom(from._internal_process_monitor_config());
    }
    if (cached_has_bits & 0x00000008u) {
      required_for_safety_ = from.required_for_safety_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Module::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  return true;
}

void Module::InternalSwap(Module* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  start_command_.Swap(&other->start_command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stop_command_.Swap(&other->stop_command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(process_monitor_config_, other->process_monitor_config_);
  swap(required_for_safety_, other->required_for_safety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Module::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CyberModule::InitAsDefaultInstance() {
}
class CyberModule::_Internal {
 public:
  using HasBits = decltype(std::declval<CyberModule>()._has_bits_);
  static void set_has_required_for_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_process_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CyberModule::CyberModule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.CyberModule)
}
CyberModule::CyberModule(const CyberModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dag_files_(from.dag_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_process_group()) {
    process_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_group_);
  }
  required_for_safety_ = from.required_for_safety_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.CyberModule)
}

void CyberModule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  process_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_for_safety_ = true;
}

CyberModule::~CyberModule() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.CyberModule)
  SharedDtor();
}

void CyberModule::SharedDtor() {
  process_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CyberModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CyberModule& CyberModule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CyberModule_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void CyberModule::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.CyberModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dag_files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      process_group_.ClearNonDefaultToEmptyNoArena();
    }
    required_for_safety_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CyberModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dag_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dag_files();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.CyberModule.dag_files");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool required_for_safety = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_required_for_safety(&has_bits);
          required_for_safety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string process_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_process_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.CyberModule.process_group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CyberModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.CyberModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dag_files = 1;
  for (int i = 0, n = this->_internal_dag_files_size(); i < n; i++) {
    const auto& s = this->_internal_dag_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.CyberModule.dag_files");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool required_for_safety = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_required_for_safety(), target);
  }

  // optional string process_group = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_process_group().data(), static_cast<int>(this->_internal_process_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.CyberModule.process_group");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_process_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.CyberModule)
  return target;
}

size_t CyberModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.CyberModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dag_files = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dag_files_.size());
  for (int i = 0, n = dag_files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dag_files_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string process_group = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_process_group());
    }

    // optional bool required_for_safety = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CyberModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.CyberModule)
  GOOGLE_DCHECK_NE(&from, this);
  const CyberModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CyberModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.CyberModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.CyberModule)
    MergeFrom(*source);
  }
}

void CyberModule::MergeFrom(const CyberModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.CyberModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dag_files_.MergeFrom(from.dag_files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      process_group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_group_);
    }
    if (cached_has_bits & 0x00000002u) {
      required_for_safety_ = from.required_for_safety_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CyberModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.CyberModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CyberModule::CopyFrom(const CyberModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.CyberModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CyberModule::IsInitialized() const {
  return true;
}

void CyberModule::InternalSwap(CyberModule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dag_files_.InternalSwap(&other->dag_files_);
  process_group_.Swap(&other->process_group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(required_for_safety_, other->required_for_safety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CyberModule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HMIMode_CyberModulesEntry_DoNotUse::HMIMode_CyberModulesEntry_DoNotUse() {}
HMIMode_CyberModulesEntry_DoNotUse::HMIMode_CyberModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIMode_CyberModulesEntry_DoNotUse::MergeFrom(const HMIMode_CyberModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIMode_CyberModulesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIMode_CyberModulesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HMIMode_ModulesEntry_DoNotUse::HMIMode_ModulesEntry_DoNotUse() {}
HMIMode_ModulesEntry_DoNotUse::HMIMode_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIMode_ModulesEntry_DoNotUse::MergeFrom(const HMIMode_ModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIMode_ModulesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIMode_ModulesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HMIMode_MonitoredComponentsEntry_DoNotUse::HMIMode_MonitoredComponentsEntry_DoNotUse() {}
HMIMode_MonitoredComponentsEntry_DoNotUse::HMIMode_MonitoredComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIMode_MonitoredComponentsEntry_DoNotUse::MergeFrom(const HMIMode_MonitoredComponentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIMode_MonitoredComponentsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIMode_MonitoredComponentsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HMIMode::InitAsDefaultInstance() {
}
class HMIMode::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIMode>()._has_bits_);
};

HMIMode::HMIMode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.HMIMode)
}
HMIMode::HMIMode(const HMIMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cyber_modules_.MergeFrom(from.cyber_modules_);
  modules_.MergeFrom(from.modules_);
  monitored_components_.MergeFrom(from.monitored_components_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.HMIMode)
}

void HMIMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
}

HMIMode::~HMIMode() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.HMIMode)
  SharedDtor();
}

void HMIMode::SharedDtor() {
}

void HMIMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HMIMode& HMIMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HMIMode_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.base);
  return *internal_default_instance();
}


void HMIMode::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.HMIMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cyber_modules_.Clear();
  modules_.Clear();
  monitored_components_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HMIMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cyber_modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.Module> modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&monitored_components_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.HMIMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
  if (!this->_internal_cyber_modules().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIMode.CyberModulesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cyber_modules().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cyber_modules().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::const_iterator
          it = this->_internal_cyber_modules().begin();
          it != this->_internal_cyber_modules().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIMode_CyberModulesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::const_iterator
          it = this->_internal_cyber_modules().begin();
          it != this->_internal_cyber_modules().end(); ++it) {
        target = HMIMode_CyberModulesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .apollo.dreamview.Module> modules = 2;
  if (!this->_internal_modules().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIMode.ModulesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_modules().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_modules().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::const_iterator
          it = this->_internal_modules().begin();
          it != this->_internal_modules().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIMode_ModulesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::const_iterator
          it = this->_internal_modules().begin();
          it != this->_internal_modules().end(); ++it) {
        target = HMIMode_ModulesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
  if (!this->_internal_monitored_components().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIMode.MonitoredComponentsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_monitored_components().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_monitored_components().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
          it = this->_internal_monitored_components().begin();
          it != this->_internal_monitored_components().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIMode_MonitoredComponentsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
          it = this->_internal_monitored_components().begin();
          it != this->_internal_monitored_components().end(); ++it) {
        target = HMIMode_MonitoredComponentsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.HMIMode)
  return target;
}

size_t HMIMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.HMIMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cyber_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >::const_iterator
      it = this->_internal_cyber_modules().begin();
      it != this->_internal_cyber_modules().end(); ++it) {
    total_size += HMIMode_CyberModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.Module> modules = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >::const_iterator
      it = this->_internal_modules().begin();
      it != this->_internal_modules().end(); ++it) {
    total_size += HMIMode_ModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_monitored_components_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >::const_iterator
      it = this->_internal_monitored_components().begin();
      it != this->_internal_monitored_components().end(); ++it) {
    total_size += HMIMode_MonitoredComponentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.HMIMode)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.HMIMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.HMIMode)
    MergeFrom(*source);
  }
}

void HMIMode::MergeFrom(const HMIMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.HMIMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cyber_modules_.MergeFrom(from.cyber_modules_);
  modules_.MergeFrom(from.modules_);
  monitored_components_.MergeFrom(from.monitored_components_);
}

void HMIMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.HMIMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIMode::CopyFrom(const HMIMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.HMIMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIMode::IsInitialized() const {
  return true;
}

void HMIMode::InternalSwap(HMIMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cyber_modules_.Swap(&other->cyber_modules_);
  modules_.Swap(&other->modules_);
  monitored_components_.Swap(&other->monitored_components_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIMode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ProcessMonitorConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::ProcessMonitorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::ProcessMonitorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ChannelMonitorConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::ChannelMonitorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::ChannelMonitorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* Arena::CreateMaybeMessage< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ResourceMonitorConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::ResourceMonitorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::ResourceMonitorConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::MonitoredComponent* Arena::CreateMaybeMessage< ::apollo::dreamview::MonitoredComponent >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::MonitoredComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Module* Arena::CreateMaybeMessage< ::apollo::dreamview::Module >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Module >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::CyberModule* Arena::CreateMaybeMessage< ::apollo::dreamview::CyberModule >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::CyberModule >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIMode* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIMode >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIMode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
