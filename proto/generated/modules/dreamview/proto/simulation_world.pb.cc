// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/simulation_world.proto

#include "modules/dreamview/proto/simulation_world.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MonitorMessage_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MonitorMessageItem_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlData_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Decision_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelaysInMs_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Latency_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapElementIds_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notification_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Prediction_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutePath_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimulationWorld_LatencyEntry_DoNotUse_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMarkers_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fprediction_2fproto_2ffeature_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto;
namespace apollo {
namespace dreamview {
class PolygonPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolygonPoint> _instance;
} _PolygonPoint_default_instance_;
class PredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prediction> _instance;
} _Prediction_default_instance_;
class DecisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decision> _instance;
} _Decision_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class DelaysInMsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelaysInMs> _instance;
} _DelaysInMs_default_instance_;
class RoutePathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutePath> _instance;
} _RoutePath_default_instance_;
class LatencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Latency> _instance;
} _Latency_default_instance_;
class MapElementIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapElementIds> _instance;
} _MapElementIds_default_instance_;
class ControlDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlData> _instance;
} _ControlData_default_instance_;
class NotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Notification> _instance;
} _Notification_default_instance_;
class SimulationWorld_LatencyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationWorld_LatencyEntry_DoNotUse> _instance;
} _SimulationWorld_LatencyEntry_DoNotUse_default_instance_;
class SimulationWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationWorld> _instance;
} _SimulationWorld_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_ControlData_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ControlData_default_instance_;
    new (ptr) ::apollo::dreamview::ControlData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::ControlData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlData_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ControlData_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {
      &scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_Decision_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Decision_default_instance_;
    new (ptr) ::apollo::dreamview::Decision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Decision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Decision_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Decision_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {
      &scc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,}};

static void InitDefaultsscc_info_DelaysInMs_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_DelaysInMs_default_instance_;
    new (ptr) ::apollo::dreamview::DelaysInMs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::DelaysInMs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelaysInMs_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelaysInMs_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {}};

static void InitDefaultsscc_info_Latency_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Latency_default_instance_;
    new (ptr) ::apollo::dreamview::Latency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Latency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Latency_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Latency_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {}};

static void InitDefaultsscc_info_MapElementIds_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_MapElementIds_default_instance_;
    new (ptr) ::apollo::dreamview::MapElementIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::MapElementIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapElementIds_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapElementIds_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {}};

static void InitDefaultsscc_info_Notification_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Notification_default_instance_;
    new (ptr) ::apollo::dreamview::Notification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Notification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notification_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Notification_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {
      &scc_info_MonitorMessageItem_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto.base,}};

static void InitDefaultsscc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Object_default_instance_;
    new (ptr) ::apollo::dreamview::Object();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Object::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {
      &scc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_Decision_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_Prediction_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_ObstaclePriority_modules_2fprediction_2fproto_2ffeature_2eproto.base,}};

static void InitDefaultsscc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_PolygonPoint_default_instance_;
    new (ptr) ::apollo::dreamview::PolygonPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::PolygonPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {}};

static void InitDefaultsscc_info_Prediction_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Prediction_default_instance_;
    new (ptr) ::apollo::dreamview::Prediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Prediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Prediction_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Prediction_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {
      &scc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,}};

static void InitDefaultsscc_info_RoutePath_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_RoutePath_default_instance_;
    new (ptr) ::apollo::dreamview::RoutePath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::RoutePath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutePath_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoutePath_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {
      &scc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,}};

static void InitDefaultsscc_info_SimulationWorld_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_SimulationWorld_default_instance_;
    new (ptr) ::apollo::dreamview::SimulationWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::SimulationWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_SimulationWorld_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_SimulationWorld_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {
      &scc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_RoutePath_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_DelaysInMs_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_MonitorMessage_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto.base,
      &scc_info_Notification_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_SimulationWorld_LatencyEntry_DoNotUse_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_MapElementIds_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_PlanningData_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto.base,
      &scc_info_LaneMarkers_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.base,
      &scc_info_ControlData_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
      &scc_info_Path_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_SimulationWorld_LatencyEntry_DoNotUse_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_SimulationWorld_LatencyEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse();
  }
  ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimulationWorld_LatencyEntry_DoNotUse_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimulationWorld_LatencyEntry_DoNotUse_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto}, {
      &scc_info_Latency_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Prediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Prediction, probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Prediction, predicted_trajectory_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, polygon_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, position_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, position_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, stopreason_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Decision, change_lane_type_),
  4,
  ~0u,
  0,
  1,
  2,
  3,
  6,
  8,
  9,
  10,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, polygon_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, position_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, position_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, speed_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, speed_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, spin_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, spin_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, spin_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, speed_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, dkappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, signal_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, current_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, yielded_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, steering_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, steering_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, disengage_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, sub_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, prediction_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Object, obstacle_priority_),
  0,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  27,
  28,
  29,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  26,
  ~0u,
  1,
  16,
  ~0u,
  24,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  25,
  ~0u,
  30,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, chassis_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, localization_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, planning_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, prediction_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, traffic_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, control_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::RoutePath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::RoutePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::RoutePath, point_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Latency, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Latency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Latency, timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Latency, total_time_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, yield_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, road_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, clear_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, parking_space_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, speed_bump_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::MapElementIds, pnc_junction_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, station_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, heading_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::ControlData, current_target_point_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Notification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Notification, timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Notification, item_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, sequence_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, object_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, auto_driving_car_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, traffic_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, route_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, routing_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, planning_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, main_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, main_decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, delay_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, monitor_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, notification_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, latency_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, map_element_ids_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, map_hash_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, map_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, planning_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, gps_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, control_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, navigation_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, is_rss_safe_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, shadow_localization_),
  13,
  18,
  ~0u,
  1,
  2,
  ~0u,
  14,
  ~0u,
  3,
  4,
  15,
  5,
  6,
  ~0u,
  0,
  ~0u,
  7,
  16,
  17,
  8,
  9,
  10,
  11,
  ~0u,
  19,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::dreamview::PolygonPoint)},
  { 11, 18, sizeof(::apollo::dreamview::Prediction)},
  { 20, 37, sizeof(::apollo::dreamview::Decision)},
  { 49, 89, sizeof(::apollo::dreamview::Object)},
  { 124, 136, sizeof(::apollo::dreamview::DelaysInMs)},
  { 143, 149, sizeof(::apollo::dreamview::RoutePath)},
  { 150, 157, sizeof(::apollo::dreamview::Latency)},
  { 159, 176, sizeof(::apollo::dreamview::MapElementIds)},
  { 188, 198, sizeof(::apollo::dreamview::ControlData)},
  { 203, 210, sizeof(::apollo::dreamview::Notification)},
  { 212, 219, sizeof(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse)},
  { 221, 252, sizeof(::apollo::dreamview::SimulationWorld)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_PolygonPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Prediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Decision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_DelaysInMs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_RoutePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Latency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_MapElementIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_ControlData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_SimulationWorld_LatencyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_SimulationWorld_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/dreamview/proto/simulation_wor"
  "ld.proto\022\020apollo.dreamview\0322modules/comm"
  "on/monitor_log/proto/monitor_log.proto\032$"
  "modules/common/proto/pnc_point.proto\0322mo"
  "dules/perception/proto/perception_obstac"
  "le.proto\032.modules/planning/proto/plannin"
  "g_internal.proto\032&modules/prediction/pro"
  "to/feature.proto\032#modules/routing/proto/"
  "routing.proto\"2\n\014PolygonPoint\022\t\n\001x\030\001 \001(\001"
  "\022\t\n\001y\030\002 \001(\001\022\014\n\001z\030\003 \001(\001:\0010\"_\n\nPrediction\022"
  "\023\n\013probability\030\001 \001(\001\022<\n\024predicted_trajec"
  "tory\030\002 \003(\0132\036.apollo.dreamview.PolygonPoi"
  "nt\"\304\006\n\010Decision\0225\n\004type\030\001 \001(\0162\037.apollo.d"
  "reamview.Decision.Type:\006IGNORE\0225\n\rpolygo"
  "n_point\030\002 \003(\0132\036.apollo.dreamview.Polygon"
  "Point\022\017\n\007heading\030\003 \001(\001\022\020\n\010latitude\030\004 \001(\001"
  "\022\021\n\tlongitude\030\005 \001(\001\022\022\n\nposition_x\030\006 \001(\001\022"
  "\022\n\nposition_y\030\007 \001(\001\022\023\n\006length\030\010 \001(\001:\0032.8"
  "\022\022\n\005width\030\t \001(\001:\0031.4\022\023\n\006height\030\n \001(\001:\0031."
  "8\022=\n\nstopReason\030\013 \001(\0162).apollo.dreamview"
  ".Decision.StopReasonCode\0228\n\020change_lane_"
  "type\030\014 \001(\0162\036.apollo.routing.ChangeLaneTy"
  "pe\"Z\n\004Type\022\n\n\006IGNORE\020\000\022\010\n\004STOP\020\001\022\t\n\005NUDG"
  "E\020\002\022\t\n\005YIELD\020\003\022\014\n\010OVERTAKE\020\004\022\n\n\006FOLLOW\020\005"
  "\022\014\n\010SIDEPASS\020\006\"\330\002\n\016StopReasonCode\022\034\n\030STO"
  "P_REASON_HEAD_VEHICLE\020\001\022\033\n\027STOP_REASON_D"
  "ESTINATION\020\002\022\032\n\026STOP_REASON_PEDESTRIAN\020\003"
  "\022\030\n\024STOP_REASON_OBSTACLE\020\004\022\026\n\022STOP_REASO"
  "N_SIGNAL\020d\022\031\n\025STOP_REASON_STOP_SIGN\020e\022\032\n"
  "\026STOP_REASON_YIELD_SIGN\020f\022\032\n\026STOP_REASON"
  "_CLEAR_ZONE\020g\022\031\n\025STOP_REASON_CROSSWALK\020h"
  "\022\031\n\025STOP_REASON_EMERGENCY\020i\022\031\n\025STOP_REAS"
  "ON_NOT_READY\020j\022\031\n\025STOP_REASON_PULL_OVER\020"
  "k\"\257\n\n\006Object\022\n\n\002id\030\001 \001(\t\0225\n\rpolygon_poin"
  "t\030\002 \003(\0132\036.apollo.dreamview.PolygonPoint\022"
  "\017\n\007heading\030\003 \001(\001\022\020\n\010latitude\030\004 \001(\001\022\021\n\tlo"
  "ngitude\030\005 \001(\001\022\022\n\nposition_x\030\006 \001(\001\022\022\n\npos"
  "ition_y\030\007 \001(\001\022\023\n\006length\030\010 \001(\001:\0032.8\022\022\n\005wi"
  "dth\030\t \001(\001:\0031.4\022\023\n\006height\030\n \001(\001:\0031.8\022\r\n\005s"
  "peed\030\013 \001(\001\022\032\n\022speed_acceleration\030\014 \001(\001\022\022"
  "\n\nspeed_jerk\030\r \001(\001\022\014\n\004spin\030\016 \001(\001\022\031\n\021spin"
  "_acceleration\030\017 \001(\001\022\021\n\tspin_jerk\030\020 \001(\001\022\025"
  "\n\rspeed_heading\030\021 \001(\001\022\r\n\005kappa\030\022 \001(\001\022\016\n\006"
  "dkappa\030# \001(\001\022\022\n\nsignal_set\030\023 \003(\t\022\026\n\016curr"
  "ent_signal\030\024 \001(\t\022\025\n\rtimestamp_sec\030\025 \001(\001\022"
  ",\n\010decision\030\026 \003(\0132\032.apollo.dreamview.Dec"
  "ision\022\037\n\020yielded_obstacle\030  \001(\010:\005false\022\033"
  "\n\023throttle_percentage\030\027 \001(\001\022\030\n\020brake_per"
  "centage\030\030 \001(\001\022\033\n\023steering_percentage\030\031 \001"
  "(\001\022\026\n\016steering_angle\030\032 \001(\001\022\026\n\016steering_r"
  "atio\030\033 \001(\001\022>\n\016disengage_type\030\034 \001(\0162&.apo"
  "llo.dreamview.Object.DisengageType\022+\n\004ty"
  "pe\030\035 \001(\0162\035.apollo.dreamview.Object.Type\022"
  "\?\n\010sub_type\030\" \001(\0162-.apollo.perception.Pe"
  "rceptionObstacle.SubType\0220\n\nprediction\030\036"
  " \003(\0132\034.apollo.dreamview.Prediction\022\025\n\nco"
  "nfidence\030\037 \001(\001:\0011\022>\n\021obstacle_priority\030!"
  " \001(\0132#.apollo.prediction.ObstaclePriorit"
  "y\"\304\001\n\rDisengageType\022\022\n\016DISENGAGE_NONE\020\000\022"
  "\025\n\021DISENGAGE_UNKNOWN\020\001\022\024\n\020DISENGAGE_MANU"
  "AL\020\002\022\027\n\023DISENGAGE_EMERGENCY\020\003\022\035\n\031DISENGA"
  "GE_AUTO_STEER_ONLY\020\004\022\035\n\031DISENGAGE_AUTO_S"
  "PEED_ONLY\020\005\022\033\n\027DISENGAGE_CHASSIS_ERROR\020\006"
  "\"\200\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017UNKNOWN_MOVABL"
  "E\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022\016\n\nPEDESTRIAN"
  "\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE\020\005\022\013\n\007VIRTUAL\020"
  "\006\022\010\n\004CIPV\020\007\"\236\001\n\nDelaysInMs\022\017\n\007chassis\030\001 "
  "\001(\001\022\024\n\014localization\030\003 \001(\001\022\033\n\023perception_"
  "obstacle\030\004 \001(\001\022\020\n\010planning\030\005 \001(\001\022\022\n\npred"
  "iction\030\007 \001(\001\022\025\n\rtraffic_light\030\010 \001(\001\022\017\n\007c"
  "ontrol\030\t \001(\001\":\n\tRoutePath\022-\n\005point\030\001 \003(\013"
  "2\036.apollo.dreamview.PolygonPoint\"7\n\007Late"
  "ncy\022\025\n\rtimestamp_sec\030\001 \001(\001\022\025\n\rtotal_time"
  "_ms\030\002 \001(\001\"\350\001\n\rMapElementIds\022\014\n\004lane\030\001 \003("
  "\t\022\021\n\tcrosswalk\030\002 \003(\t\022\020\n\010junction\030\003 \003(\t\022\016"
  "\n\006signal\030\004 \003(\t\022\021\n\tstop_sign\030\005 \003(\t\022\r\n\005yie"
  "ld\030\006 \003(\t\022\017\n\007overlap\030\007 \003(\t\022\014\n\004road\030\010 \003(\t\022"
  "\022\n\nclear_area\030\t \003(\t\022\025\n\rparking_space\030\n \003"
  "(\t\022\022\n\nspeed_bump\030\013 \003(\t\022\024\n\014pnc_junction\030\014"
  " \003(\t\"\247\001\n\013ControlData\022\025\n\rtimestamp_sec\030\001 "
  "\001(\001\022\025\n\rstation_error\030\002 \001(\001\022\025\n\rlateral_er"
  "ror\030\003 \001(\001\022\025\n\rheading_error\030\004 \001(\001\022<\n\024curr"
  "ent_target_point\030\005 \001(\0132\036.apollo.common.T"
  "rajectoryPoint\"^\n\014Notification\022\025\n\rtimest"
  "amp_sec\030\001 \001(\001\0227\n\004item\030\002 \001(\0132).apollo.com"
  "mon.monitor.MonitorMessageItem\"\261\t\n\017Simul"
  "ationWorld\022\021\n\ttimestamp\030\001 \001(\001\022\024\n\014sequenc"
  "e_num\030\002 \001(\r\022(\n\006object\030\003 \003(\0132\030.apollo.dre"
  "amview.Object\0222\n\020auto_driving_car\030\004 \001(\0132"
  "\030.apollo.dreamview.Object\0220\n\016traffic_sig"
  "nal\030\005 \001(\0132\030.apollo.dreamview.Object\022/\n\nr"
  "oute_path\030\006 \003(\0132\033.apollo.dreamview.Route"
  "Path\022\024\n\014routing_time\030\007 \001(\001\0225\n\023planning_t"
  "rajectory\030\010 \003(\0132\030.apollo.dreamview.Objec"
  "t\022/\n\tmain_stop\030\t \001(\0132\030.apollo.dreamview."
  "ObjectB\002\030\001\022/\n\rmain_decision\030\n \001(\0132\030.apol"
  "lo.dreamview.Object\022\023\n\013speed_limit\030\013 \001(\001"
  "\022+\n\005delay\030\014 \001(\0132\034.apollo.dreamview.Delay"
  "sInMs\022:\n\007monitor\030\r \001(\0132%.apollo.common.m"
  "onitor.MonitorMessageB\002\030\001\0224\n\014notificatio"
  "n\030\016 \003(\0132\036.apollo.dreamview.Notification\022"
  "\025\n\rengage_advice\030\017 \001(\t\022\?\n\007latency\030\020 \003(\0132"
  "..apollo.dreamview.SimulationWorld.Laten"
  "cyEntry\0228\n\017map_element_ids\030\021 \001(\0132\037.apoll"
  "o.dreamview.MapElementIds\022\020\n\010map_hash\030\022 "
  "\001(\004\022\022\n\nmap_radius\030\023 \001(\001\022=\n\rplanning_data"
  "\030\024 \001(\0132&.apollo.planning_internal.Planni"
  "ngData\022%\n\003gps\030\025 \001(\0132\030.apollo.dreamview.O"
  "bject\0223\n\013lane_marker\030\026 \001(\0132\036.apollo.perc"
  "eption.LaneMarkers\0223\n\014control_data\030\027 \001(\013"
  "2\035.apollo.dreamview.ControlData\022,\n\017navig"
  "ation_path\030\030 \003(\0132\023.apollo.common.Path\022\031\n"
  "\013is_rss_safe\030\031 \001(\010:\004true\0225\n\023shadow_local"
  "ization\030\032 \001(\0132\030.apollo.dreamview.Object\032"
  "I\n\014LatencyEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 "
  "\001(\0132\031.apollo.dreamview.Latency:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_deps[6] = {
  &::descriptor_table_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_sccs[12] = {
  &scc_info_ControlData_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_Decision_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_DelaysInMs_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_Latency_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_MapElementIds_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_Notification_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_Prediction_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_RoutePath_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_SimulationWorld_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
  &scc_info_SimulationWorld_LatencyEntry_DoNotUse_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once;
static bool descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto = {
  &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_initialized, descriptor_table_protodef_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto, "modules/dreamview/proto/simulation_world.proto", 4634,
  &descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_sccs, descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto_deps, 12, 6,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto, 12, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto), true);
namespace apollo {
namespace dreamview {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Decision_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[0];
}
bool Decision_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Decision_Type Decision::IGNORE;
constexpr Decision_Type Decision::STOP;
constexpr Decision_Type Decision::NUDGE;
constexpr Decision_Type Decision::YIELD;
constexpr Decision_Type Decision::OVERTAKE;
constexpr Decision_Type Decision::FOLLOW;
constexpr Decision_Type Decision::SIDEPASS;
constexpr Decision_Type Decision::Type_MIN;
constexpr Decision_Type Decision::Type_MAX;
constexpr int Decision::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Decision_StopReasonCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[1];
}
bool Decision_StopReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Decision_StopReasonCode Decision::STOP_REASON_HEAD_VEHICLE;
constexpr Decision_StopReasonCode Decision::STOP_REASON_DESTINATION;
constexpr Decision_StopReasonCode Decision::STOP_REASON_PEDESTRIAN;
constexpr Decision_StopReasonCode Decision::STOP_REASON_OBSTACLE;
constexpr Decision_StopReasonCode Decision::STOP_REASON_SIGNAL;
constexpr Decision_StopReasonCode Decision::STOP_REASON_STOP_SIGN;
constexpr Decision_StopReasonCode Decision::STOP_REASON_YIELD_SIGN;
constexpr Decision_StopReasonCode Decision::STOP_REASON_CLEAR_ZONE;
constexpr Decision_StopReasonCode Decision::STOP_REASON_CROSSWALK;
constexpr Decision_StopReasonCode Decision::STOP_REASON_EMERGENCY;
constexpr Decision_StopReasonCode Decision::STOP_REASON_NOT_READY;
constexpr Decision_StopReasonCode Decision::STOP_REASON_PULL_OVER;
constexpr Decision_StopReasonCode Decision::StopReasonCode_MIN;
constexpr Decision_StopReasonCode Decision::StopReasonCode_MAX;
constexpr int Decision::StopReasonCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_DisengageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[2];
}
bool Object_DisengageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_DisengageType Object::DISENGAGE_NONE;
constexpr Object_DisengageType Object::DISENGAGE_UNKNOWN;
constexpr Object_DisengageType Object::DISENGAGE_MANUAL;
constexpr Object_DisengageType Object::DISENGAGE_EMERGENCY;
constexpr Object_DisengageType Object::DISENGAGE_AUTO_STEER_ONLY;
constexpr Object_DisengageType Object::DISENGAGE_AUTO_SPEED_ONLY;
constexpr Object_DisengageType Object::DISENGAGE_CHASSIS_ERROR;
constexpr Object_DisengageType Object::DisengageType_MIN;
constexpr Object_DisengageType Object::DisengageType_MAX;
constexpr int Object::DisengageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Object_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto[3];
}
bool Object_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Object_Type Object::UNKNOWN;
constexpr Object_Type Object::UNKNOWN_MOVABLE;
constexpr Object_Type Object::UNKNOWN_UNMOVABLE;
constexpr Object_Type Object::PEDESTRIAN;
constexpr Object_Type Object::BICYCLE;
constexpr Object_Type Object::VEHICLE;
constexpr Object_Type Object::VIRTUAL;
constexpr Object_Type Object::CIPV;
constexpr Object_Type Object::Type_MIN;
constexpr Object_Type Object::Type_MAX;
constexpr int Object::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PolygonPoint::InitAsDefaultInstance() {
}
class PolygonPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PolygonPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PolygonPoint::PolygonPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.PolygonPoint)
}
PolygonPoint::PolygonPoint(const PolygonPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.PolygonPoint)
}

void PolygonPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

PolygonPoint::~PolygonPoint() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.PolygonPoint)
  SharedDtor();
}

void PolygonPoint::SharedDtor() {
}

void PolygonPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolygonPoint& PolygonPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolygonPoint_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void PolygonPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.PolygonPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PolygonPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolygonPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.PolygonPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.PolygonPoint)
  return target;
}

size_t PolygonPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.PolygonPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolygonPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.PolygonPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolygonPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.PolygonPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.PolygonPoint)
    MergeFrom(*source);
  }
}

void PolygonPoint::MergeFrom(const PolygonPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.PolygonPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolygonPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.PolygonPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonPoint::CopyFrom(const PolygonPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.PolygonPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonPoint::IsInitialized() const {
  return true;
}

void PolygonPoint::InternalSwap(PolygonPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolygonPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prediction::InitAsDefaultInstance() {
}
class Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<Prediction>()._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Prediction::Prediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Prediction)
}
Prediction::Prediction(const Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      predicted_trajectory_(from.predicted_trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Prediction)
}

void Prediction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prediction_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  probability_ = 0;
}

Prediction::~Prediction() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Prediction)
  SharedDtor();
}

void Prediction::SharedDtor() {
}

void Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prediction& Prediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prediction_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicted_trajectory_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Prediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predicted_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predicted_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_predicted_trajectory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Prediction)
  return target;
}

size_t Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Prediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  total_size += 1UL * this->_internal_predicted_trajectory_size();
  for (const auto& msg : this->predicted_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double probability = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const Prediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Prediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Prediction)
    MergeFrom(*source);
  }
}

void Prediction::MergeFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predicted_trajectory_.MergeFrom(from.predicted_trajectory_);
  if (from._internal_has_probability()) {
    _internal_set_probability(from._internal_probability());
  }
}

void Prediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prediction::CopyFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prediction::IsInitialized() const {
  return true;
}

void Prediction::InternalSwap(Prediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predicted_trajectory_.InternalSwap(&other->predicted_trajectory_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decision::InitAsDefaultInstance() {
}
class Decision::_Internal {
 public:
  using HasBits = decltype(std::declval<Decision>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stopreason(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Decision::Decision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Decision)
}
Decision::Decision(const Decision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Decision)
}

void Decision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decision_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_y_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(position_y_));
  stopreason_ = 1;
  length_ = 2.8;
  width_ = 1.4;
  height_ = 1.8;
}

Decision::~Decision() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Decision)
  SharedDtor();
}

void Decision::SharedDtor() {
}

void Decision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decision& Decision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decision_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void Decision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Decision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_y_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(position_y_));
    stopreason_ = 1;
  }
  if (cached_has_bits & 0x00000700u) {
    length_ = 2.8;
    width_ = 1.4;
    height_ = 1.8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Decision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Decision_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::dreamview::Decision_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double position_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_position_x(&has_bits);
          position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double position_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_position_y(&has_bits);
          position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length = 8 [default = 2.8];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 9 [default = 1.4];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 10 [default = 1.8];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Decision_StopReasonCode_IsValid(val))) {
            _internal_set_stopreason(static_cast<::apollo::dreamview::Decision_StopReasonCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::apollo::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decision::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Decision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_polygon_point(i), target, stream);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double latitude = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // optional double position_x = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_position_x(), target);
  }

  // optional double position_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_position_y(), target);
  }

  // optional double length = 8 [default = 2.8];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_length(), target);
  }

  // optional double width = 9 [default = 1.4];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_width(), target);
  }

  // optional double height = 10 [default = 1.8];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_height(), target);
  }

  // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_stopreason(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Decision)
  return target;
}

size_t Decision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Decision)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  total_size += 1UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double heading = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double position_x = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_lane_type());
    }

    // optional double position_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stopreason());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double length = 8 [default = 2.8];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double width = 9 [default = 1.4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double height = 10 [default = 1.8];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Decision)
  GOOGLE_DCHECK_NE(&from, this);
  const Decision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Decision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Decision)
    MergeFrom(*source);
  }
}

void Decision::MergeFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Decision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      change_lane_type_ = from.change_lane_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_y_ = from.position_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      stopreason_ = from.stopreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000400u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Decision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decision::CopyFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decision::IsInitialized() const {
  return true;
}

void Decision::InternalSwap(Decision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_point_.InternalSwap(&other->polygon_point_);
  swap(heading_, other->heading_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(position_x_, other->position_x_);
  swap(type_, other->type_);
  swap(change_lane_type_, other->change_lane_type_);
  swap(position_y_, other->position_y_);
  swap(stopreason_, other->stopreason_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::apollo::dreamview::_Object_default_instance_._instance.get_mutable()->obstacle_priority_ = const_cast< ::apollo::prediction::ObstaclePriority*>(
      ::apollo::prediction::ObstaclePriority::internal_default_instance());
}
class Object::_Internal {
 public:
  using HasBits = decltype(std::declval<Object>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speed_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spin(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_spin_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_spin_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_speed_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_current_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_yielded_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_throttle_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_brake_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_steering_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_steering_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_steering_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_disengage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::apollo::prediction::ObstaclePriority& obstacle_priority(const Object* msg);
  static void set_has_obstacle_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::prediction::ObstaclePriority&
Object::_Internal::obstacle_priority(const Object* msg) {
  return *msg->obstacle_priority_;
}
void Object::clear_obstacle_priority() {
  if (obstacle_priority_ != nullptr) obstacle_priority_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Object::Object()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_),
      signal_set_(from.signal_set_),
      decision_(from.decision_),
      prediction_(from.prediction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  current_signal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_signal()) {
    current_signal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_signal_);
  }
  if (from._internal_has_obstacle_priority()) {
    obstacle_priority_ = new ::apollo::prediction::ObstaclePriority(*from.obstacle_priority_);
  } else {
    obstacle_priority_ = nullptr;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Object)
}

void Object::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_signal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&obstacle_priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dkappa_) -
      reinterpret_cast<char*>(&obstacle_priority_)) + sizeof(dkappa_));
  length_ = 2.8;
  width_ = 1.4;
  height_ = 1.8;
  confidence_ = 1;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_signal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obstacle_priority_;
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Object_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  signal_set_.Clear();
  decision_.Clear();
  prediction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      current_signal_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(obstacle_priority_ != nullptr);
      obstacle_priority_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_y_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(position_y_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kappa_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(kappa_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(type_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&yielded_obstacle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dkappa_) -
        reinterpret_cast<char*>(&yielded_obstacle_)) + sizeof(dkappa_));
    length_ = 2.8;
    width_ = 1.4;
    height_ = 1.8;
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Object.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double position_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_position_x(&has_bits);
          position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double position_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_position_y(&has_bits);
          position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length = 8 [default = 2.8];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 9 [default = 1.4];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height = 10 [default = 1.8];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_acceleration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_speed_acceleration(&has_bits);
          speed_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_jerk = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_speed_jerk(&has_bits);
          speed_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double spin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_spin(&has_bits);
          spin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double spin_acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_spin_acceleration(&has_bits);
          spin_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double spin_jerk = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_spin_jerk(&has_bits);
          spin_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_heading = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_speed_heading(&has_bits);
          speed_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_kappa(&has_bits);
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string signal_set = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_signal_set();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Object.signal_set");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string current_signal = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_current_signal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Object.current_signal");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double timestamp_sec = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Decision decision = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_decision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double throttle_percentage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_throttle_percentage(&has_bits);
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_percentage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_brake_percentage(&has_bits);
          brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_percentage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_steering_percentage(&has_bits);
          steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_angle = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_steering_angle(&has_bits);
          steering_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_ratio = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_steering_ratio(&has_bits);
          steering_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Object_DisengageType_IsValid(val))) {
            _internal_set_disengage_type(static_cast<::apollo::dreamview::Object_DisengageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object.Type type = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::Object_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::dreamview::Object_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Prediction prediction = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_prediction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double confidence = 31 [default = 1];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool yielded_obstacle = 32 [default = false];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_yielded_obstacle(&has_bits);
          yielded_obstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_priority(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_SubType_IsValid(val))) {
            _internal_set_sub_type(static_cast<::apollo::perception::PerceptionObstacle_SubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(34, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double dkappa = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_dkappa(&has_bits);
          dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_polygon_point(i), target, stream);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double latitude = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // optional double position_x = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_position_x(), target);
  }

  // optional double position_y = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_position_y(), target);
  }

  // optional double length = 8 [default = 2.8];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_length(), target);
  }

  // optional double width = 9 [default = 1.4];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_width(), target);
  }

  // optional double height = 10 [default = 1.8];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_height(), target);
  }

  // optional double speed = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_speed(), target);
  }

  // optional double speed_acceleration = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_speed_acceleration(), target);
  }

  // optional double speed_jerk = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_speed_jerk(), target);
  }

  // optional double spin = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_spin(), target);
  }

  // optional double spin_acceleration = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_spin_acceleration(), target);
  }

  // optional double spin_jerk = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_spin_jerk(), target);
  }

  // optional double speed_heading = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_speed_heading(), target);
  }

  // optional double kappa = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_kappa(), target);
  }

  // repeated string signal_set = 19;
  for (int i = 0, n = this->_internal_signal_set_size(); i < n; i++) {
    const auto& s = this->_internal_signal_set(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.signal_set");
    target = stream->WriteString(19, s, target);
  }

  // optional string current_signal = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_signal().data(), static_cast<int>(this->_internal_current_signal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.current_signal");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_current_signal(), target);
  }

  // optional double timestamp_sec = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_timestamp_sec(), target);
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_decision_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_decision(i), target, stream);
  }

  // optional double throttle_percentage = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_throttle_percentage(), target);
  }

  // optional double brake_percentage = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_brake_percentage(), target);
  }

  // optional double steering_percentage = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_steering_percentage(), target);
  }

  // optional double steering_angle = 26;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_steering_angle(), target);
  }

  // optional double steering_ratio = 27;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_steering_ratio(), target);
  }

  // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_disengage_type(), target);
  }

  // optional .apollo.dreamview.Object.Type type = 29;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->_internal_type(), target);
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prediction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_prediction(i), target, stream);
  }

  // optional double confidence = 31 [default = 1];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_confidence(), target);
  }

  // optional bool yielded_obstacle = 32 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_yielded_obstacle(), target);
  }

  // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::obstacle_priority(this), target, stream);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      34, this->_internal_sub_type(), target);
  }

  // optional double dkappa = 35;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_dkappa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  total_size += 1UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string signal_set = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signal_set_.size());
  for (int i = 0, n = signal_set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signal_set_.Get(i));
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  total_size += 2UL * this->_internal_decision_size();
  for (const auto& msg : this->decision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  total_size += 2UL * this->_internal_prediction_size();
  for (const auto& msg : this->prediction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string current_signal = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_signal());
    }

    // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obstacle_priority_);
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double position_x = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double position_y = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double speed = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double speed_acceleration = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double speed_jerk = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double spin = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double spin_acceleration = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double spin_jerk = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double speed_heading = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double kappa = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double timestamp_sec = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double throttle_percentage = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double brake_percentage = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double steering_percentage = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double steering_angle = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double steering_ratio = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_disengage_type());
    }

    // optional .apollo.dreamview.Object.Type type = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional bool yielded_obstacle = 32 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sub_type());
    }

    // optional double dkappa = 35;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double length = 8 [default = 2.8];
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 8;
    }

    // optional double width = 9 [default = 1.4];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 + 8;
    }

    // optional double height = 10 [default = 1.8];
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 8;
    }

    // optional double confidence = 31 [default = 1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Object)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  signal_set_.MergeFrom(from.signal_set_);
  decision_.MergeFrom(from.decision_);
  prediction_.MergeFrom(from.prediction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      current_signal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.current_signal_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_obstacle_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from._internal_obstacle_priority());
    }
    if (cached_has_bits & 0x00000008u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      position_y_ = from.position_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000200u) {
      speed_acceleration_ = from.speed_acceleration_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_jerk_ = from.speed_jerk_;
    }
    if (cached_has_bits & 0x00000800u) {
      spin_ = from.spin_;
    }
    if (cached_has_bits & 0x00001000u) {
      spin_acceleration_ = from.spin_acceleration_;
    }
    if (cached_has_bits & 0x00002000u) {
      spin_jerk_ = from.spin_jerk_;
    }
    if (cached_has_bits & 0x00004000u) {
      speed_heading_ = from.speed_heading_;
    }
    if (cached_has_bits & 0x00008000u) {
      kappa_ = from.kappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00020000u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00040000u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00080000u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x00100000u) {
      steering_angle_ = from.steering_angle_;
    }
    if (cached_has_bits & 0x00200000u) {
      steering_ratio_ = from.steering_ratio_;
    }
    if (cached_has_bits & 0x00400000u) {
      disengage_type_ = from.disengage_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      yielded_obstacle_ = from.yielded_obstacle_;
    }
    if (cached_has_bits & 0x02000000u) {
      sub_type_ = from.sub_type_;
    }
    if (cached_has_bits & 0x04000000u) {
      dkappa_ = from.dkappa_;
    }
    if (cached_has_bits & 0x08000000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x10000000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x20000000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x40000000u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Object::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  polygon_point_.InternalSwap(&other->polygon_point_);
  signal_set_.InternalSwap(&other->signal_set_);
  decision_.InternalSwap(&other->decision_);
  prediction_.InternalSwap(&other->prediction_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_signal_.Swap(&other->current_signal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(obstacle_priority_, other->obstacle_priority_);
  swap(heading_, other->heading_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(position_x_, other->position_x_);
  swap(position_y_, other->position_y_);
  swap(speed_, other->speed_);
  swap(speed_acceleration_, other->speed_acceleration_);
  swap(speed_jerk_, other->speed_jerk_);
  swap(spin_, other->spin_);
  swap(spin_acceleration_, other->spin_acceleration_);
  swap(spin_jerk_, other->spin_jerk_);
  swap(speed_heading_, other->speed_heading_);
  swap(kappa_, other->kappa_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(throttle_percentage_, other->throttle_percentage_);
  swap(brake_percentage_, other->brake_percentage_);
  swap(steering_percentage_, other->steering_percentage_);
  swap(steering_angle_, other->steering_angle_);
  swap(steering_ratio_, other->steering_ratio_);
  swap(disengage_type_, other->disengage_type_);
  swap(type_, other->type_);
  swap(yielded_obstacle_, other->yielded_obstacle_);
  swap(sub_type_, other->sub_type_);
  swap(dkappa_, other->dkappa_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelaysInMs::InitAsDefaultInstance() {
}
class DelaysInMs::_Internal {
 public:
  using HasBits = decltype(std::declval<DelaysInMs>()._has_bits_);
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_perception_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_planning(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prediction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_traffic_light(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DelaysInMs::DelaysInMs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.DelaysInMs)
}
DelaysInMs::DelaysInMs(const DelaysInMs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chassis_, &from.chassis_,
    static_cast<size_t>(reinterpret_cast<char*>(&control_) -
    reinterpret_cast<char*>(&chassis_)) + sizeof(control_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.DelaysInMs)
}

void DelaysInMs::SharedCtor() {
  ::memset(&chassis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_) -
      reinterpret_cast<char*>(&chassis_)) + sizeof(control_));
}

DelaysInMs::~DelaysInMs() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.DelaysInMs)
  SharedDtor();
}

void DelaysInMs::SharedDtor() {
}

void DelaysInMs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelaysInMs& DelaysInMs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelaysInMs_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void DelaysInMs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.DelaysInMs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&chassis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&control_) -
        reinterpret_cast<char*>(&chassis_)) + sizeof(control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DelaysInMs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double chassis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_chassis(&has_bits);
          chassis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double localization = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_localization(&has_bits);
          localization_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double perception_obstacle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_perception_obstacle(&has_bits);
          perception_obstacle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double planning = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_planning(&has_bits);
          planning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double prediction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_prediction(&has_bits);
          prediction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double traffic_light = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_traffic_light(&has_bits);
          traffic_light_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double control = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_control(&has_bits);
          control_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelaysInMs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.DelaysInMs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double chassis = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_chassis(), target);
  }

  // optional double localization = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_localization(), target);
  }

  // optional double perception_obstacle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_perception_obstacle(), target);
  }

  // optional double planning = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_planning(), target);
  }

  // optional double prediction = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_prediction(), target);
  }

  // optional double traffic_light = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_traffic_light(), target);
  }

  // optional double control = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.DelaysInMs)
  return target;
}

size_t DelaysInMs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.DelaysInMs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double chassis = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double localization = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double perception_obstacle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double planning = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double prediction = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double traffic_light = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double control = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelaysInMs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.DelaysInMs)
  GOOGLE_DCHECK_NE(&from, this);
  const DelaysInMs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelaysInMs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.DelaysInMs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.DelaysInMs)
    MergeFrom(*source);
  }
}

void DelaysInMs::MergeFrom(const DelaysInMs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.DelaysInMs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      chassis_ = from.chassis_;
    }
    if (cached_has_bits & 0x00000002u) {
      localization_ = from.localization_;
    }
    if (cached_has_bits & 0x00000004u) {
      perception_obstacle_ = from.perception_obstacle_;
    }
    if (cached_has_bits & 0x00000008u) {
      planning_ = from.planning_;
    }
    if (cached_has_bits & 0x00000010u) {
      prediction_ = from.prediction_;
    }
    if (cached_has_bits & 0x00000020u) {
      traffic_light_ = from.traffic_light_;
    }
    if (cached_has_bits & 0x00000040u) {
      control_ = from.control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelaysInMs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.DelaysInMs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelaysInMs::CopyFrom(const DelaysInMs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.DelaysInMs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelaysInMs::IsInitialized() const {
  return true;
}

void DelaysInMs::InternalSwap(DelaysInMs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(chassis_, other->chassis_);
  swap(localization_, other->localization_);
  swap(perception_obstacle_, other->perception_obstacle_);
  swap(planning_, other->planning_);
  swap(prediction_, other->prediction_);
  swap(traffic_light_, other->traffic_light_);
  swap(control_, other->control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelaysInMs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutePath::InitAsDefaultInstance() {
}
class RoutePath::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutePath>()._has_bits_);
};

RoutePath::RoutePath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.RoutePath)
}
RoutePath::RoutePath(const RoutePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.RoutePath)
}

void RoutePath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutePath_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
}

RoutePath::~RoutePath() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.RoutePath)
  SharedDtor();
}

void RoutePath::SharedDtor() {
}

void RoutePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutePath& RoutePath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutePath_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void RoutePath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.RoutePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RoutePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.PolygonPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutePath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.RoutePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.RoutePath)
  return target;
}

size_t RoutePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.RoutePath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutePath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.RoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutePath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.RoutePath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.RoutePath)
    MergeFrom(*source);
  }
}

void RoutePath::MergeFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.RoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void RoutePath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePath::CopyFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePath::IsInitialized() const {
  return true;
}

void RoutePath::InternalSwap(RoutePath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_.InternalSwap(&other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutePath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Latency::InitAsDefaultInstance() {
}
class Latency::_Internal {
 public:
  using HasBits = decltype(std::declval<Latency>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Latency::Latency()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Latency)
}
Latency::Latency(const Latency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_ms_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(total_time_ms_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Latency)
}

void Latency::SharedCtor() {
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_ms_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(total_time_ms_));
}

Latency::~Latency() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Latency)
  SharedDtor();
}

void Latency::SharedDtor() {
}

void Latency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Latency& Latency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Latency_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void Latency::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Latency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_ms_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(total_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Latency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double total_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_total_time_ms(&has_bits);
          total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Latency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Latency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional double total_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Latency)
  return target;
}

size_t Latency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Latency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double total_time_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Latency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Latency)
  GOOGLE_DCHECK_NE(&from, this);
  const Latency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Latency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Latency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Latency)
    MergeFrom(*source);
  }
}

void Latency::MergeFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Latency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_time_ms_ = from.total_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Latency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Latency::CopyFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Latency::IsInitialized() const {
  return true;
}

void Latency::InternalSwap(Latency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(total_time_ms_, other->total_time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Latency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapElementIds::InitAsDefaultInstance() {
}
class MapElementIds::_Internal {
 public:
  using HasBits = decltype(std::declval<MapElementIds>()._has_bits_);
};

MapElementIds::MapElementIds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.MapElementIds)
}
MapElementIds::MapElementIds(const MapElementIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lane_(from.lane_),
      crosswalk_(from.crosswalk_),
      junction_(from.junction_),
      signal_(from.signal_),
      stop_sign_(from.stop_sign_),
      yield_(from.yield_),
      overlap_(from.overlap_),
      road_(from.road_),
      clear_area_(from.clear_area_),
      parking_space_(from.parking_space_),
      speed_bump_(from.speed_bump_),
      pnc_junction_(from.pnc_junction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.MapElementIds)
}

void MapElementIds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapElementIds_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
}

MapElementIds::~MapElementIds() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.MapElementIds)
  SharedDtor();
}

void MapElementIds::SharedDtor() {
}

void MapElementIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapElementIds& MapElementIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapElementIds_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void MapElementIds::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.MapElementIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_.Clear();
  crosswalk_.Clear();
  junction_.Clear();
  signal_.Clear();
  stop_sign_.Clear();
  yield_.Clear();
  overlap_.Clear();
  road_.Clear();
  clear_area_.Clear();
  parking_space_.Clear();
  speed_bump_.Clear();
  pnc_junction_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MapElementIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string lane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lane();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.lane");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string crosswalk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_crosswalk();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.crosswalk");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string junction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_junction();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.junction");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string signal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signal();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.signal");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string stop_sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stop_sign();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.stop_sign");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string yield = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_yield();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.yield");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string overlap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_overlap();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.overlap");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string road = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_road();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.road");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string clear_area = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_clear_area();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.clear_area");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string parking_space = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parking_space();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.parking_space");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string speed_bump = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_speed_bump();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.speed_bump");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string pnc_junction = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pnc_junction();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.MapElementIds.pnc_junction");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapElementIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.MapElementIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane = 1;
  for (int i = 0, n = this->_internal_lane_size(); i < n; i++) {
    const auto& s = this->_internal_lane(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.lane");
    target = stream->WriteString(1, s, target);
  }

  // repeated string crosswalk = 2;
  for (int i = 0, n = this->_internal_crosswalk_size(); i < n; i++) {
    const auto& s = this->_internal_crosswalk(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.crosswalk");
    target = stream->WriteString(2, s, target);
  }

  // repeated string junction = 3;
  for (int i = 0, n = this->_internal_junction_size(); i < n; i++) {
    const auto& s = this->_internal_junction(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.junction");
    target = stream->WriteString(3, s, target);
  }

  // repeated string signal = 4;
  for (int i = 0, n = this->_internal_signal_size(); i < n; i++) {
    const auto& s = this->_internal_signal(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.signal");
    target = stream->WriteString(4, s, target);
  }

  // repeated string stop_sign = 5;
  for (int i = 0, n = this->_internal_stop_sign_size(); i < n; i++) {
    const auto& s = this->_internal_stop_sign(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.stop_sign");
    target = stream->WriteString(5, s, target);
  }

  // repeated string yield = 6;
  for (int i = 0, n = this->_internal_yield_size(); i < n; i++) {
    const auto& s = this->_internal_yield(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.yield");
    target = stream->WriteString(6, s, target);
  }

  // repeated string overlap = 7;
  for (int i = 0, n = this->_internal_overlap_size(); i < n; i++) {
    const auto& s = this->_internal_overlap(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.overlap");
    target = stream->WriteString(7, s, target);
  }

  // repeated string road = 8;
  for (int i = 0, n = this->_internal_road_size(); i < n; i++) {
    const auto& s = this->_internal_road(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.road");
    target = stream->WriteString(8, s, target);
  }

  // repeated string clear_area = 9;
  for (int i = 0, n = this->_internal_clear_area_size(); i < n; i++) {
    const auto& s = this->_internal_clear_area(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.clear_area");
    target = stream->WriteString(9, s, target);
  }

  // repeated string parking_space = 10;
  for (int i = 0, n = this->_internal_parking_space_size(); i < n; i++) {
    const auto& s = this->_internal_parking_space(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.parking_space");
    target = stream->WriteString(10, s, target);
  }

  // repeated string speed_bump = 11;
  for (int i = 0, n = this->_internal_speed_bump_size(); i < n; i++) {
    const auto& s = this->_internal_speed_bump(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.speed_bump");
    target = stream->WriteString(11, s, target);
  }

  // repeated string pnc_junction = 12;
  for (int i = 0, n = this->_internal_pnc_junction_size(); i < n; i++) {
    const auto& s = this->_internal_pnc_junction(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.pnc_junction");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.MapElementIds)
  return target;
}

size_t MapElementIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.MapElementIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lane = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lane_.size());
  for (int i = 0, n = lane_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lane_.Get(i));
  }

  // repeated string crosswalk = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(crosswalk_.size());
  for (int i = 0, n = crosswalk_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      crosswalk_.Get(i));
  }

  // repeated string junction = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(junction_.size());
  for (int i = 0, n = junction_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      junction_.Get(i));
  }

  // repeated string signal = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signal_.size());
  for (int i = 0, n = signal_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signal_.Get(i));
  }

  // repeated string stop_sign = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stop_sign_.size());
  for (int i = 0, n = stop_sign_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stop_sign_.Get(i));
  }

  // repeated string yield = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(yield_.size());
  for (int i = 0, n = yield_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      yield_.Get(i));
  }

  // repeated string overlap = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(overlap_.size());
  for (int i = 0, n = overlap_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      overlap_.Get(i));
  }

  // repeated string road = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(road_.size());
  for (int i = 0, n = road_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      road_.Get(i));
  }

  // repeated string clear_area = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(clear_area_.size());
  for (int i = 0, n = clear_area_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      clear_area_.Get(i));
  }

  // repeated string parking_space = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(parking_space_.size());
  for (int i = 0, n = parking_space_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      parking_space_.Get(i));
  }

  // repeated string speed_bump = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(speed_bump_.size());
  for (int i = 0, n = speed_bump_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      speed_bump_.Get(i));
  }

  // repeated string pnc_junction = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pnc_junction_.size());
  for (int i = 0, n = pnc_junction_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pnc_junction_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapElementIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.MapElementIds)
  GOOGLE_DCHECK_NE(&from, this);
  const MapElementIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapElementIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.MapElementIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.MapElementIds)
    MergeFrom(*source);
  }
}

void MapElementIds::MergeFrom(const MapElementIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.MapElementIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_.MergeFrom(from.lane_);
  crosswalk_.MergeFrom(from.crosswalk_);
  junction_.MergeFrom(from.junction_);
  signal_.MergeFrom(from.signal_);
  stop_sign_.MergeFrom(from.stop_sign_);
  yield_.MergeFrom(from.yield_);
  overlap_.MergeFrom(from.overlap_);
  road_.MergeFrom(from.road_);
  clear_area_.MergeFrom(from.clear_area_);
  parking_space_.MergeFrom(from.parking_space_);
  speed_bump_.MergeFrom(from.speed_bump_);
  pnc_junction_.MergeFrom(from.pnc_junction_);
}

void MapElementIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.MapElementIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapElementIds::CopyFrom(const MapElementIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.MapElementIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapElementIds::IsInitialized() const {
  return true;
}

void MapElementIds::InternalSwap(MapElementIds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_.InternalSwap(&other->lane_);
  crosswalk_.InternalSwap(&other->crosswalk_);
  junction_.InternalSwap(&other->junction_);
  signal_.InternalSwap(&other->signal_);
  stop_sign_.InternalSwap(&other->stop_sign_);
  yield_.InternalSwap(&other->yield_);
  overlap_.InternalSwap(&other->overlap_);
  road_.InternalSwap(&other->road_);
  clear_area_.InternalSwap(&other->clear_area_);
  parking_space_.InternalSwap(&other->parking_space_);
  speed_bump_.InternalSwap(&other->speed_bump_);
  pnc_junction_.InternalSwap(&other->pnc_junction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapElementIds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlData::InitAsDefaultInstance() {
  ::apollo::dreamview::_ControlData_default_instance_._instance.get_mutable()->current_target_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
}
class ControlData::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlData>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::TrajectoryPoint& current_target_point(const ControlData* msg);
  static void set_has_current_target_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::TrajectoryPoint&
ControlData::_Internal::current_target_point(const ControlData* msg) {
  return *msg->current_target_point_;
}
void ControlData::clear_current_target_point() {
  if (current_target_point_ != nullptr) current_target_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ControlData::ControlData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.ControlData)
}
ControlData::ControlData(const ControlData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_current_target_point()) {
    current_target_point_ = new ::apollo::common::TrajectoryPoint(*from.current_target_point_);
  } else {
    current_target_point_ = nullptr;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_error_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(heading_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ControlData)
}

void ControlData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlData_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  ::memset(&current_target_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_error_) -
      reinterpret_cast<char*>(&current_target_point_)) + sizeof(heading_error_));
}

ControlData::~ControlData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ControlData)
  SharedDtor();
}

void ControlData::SharedDtor() {
  if (this != internal_default_instance()) delete current_target_point_;
}

void ControlData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlData& ControlData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlData_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void ControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(current_target_point_ != nullptr);
    current_target_point_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_error_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(heading_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ControlData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_station_error(&has_bits);
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lateral_error(&has_bits);
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading_error(&has_bits);
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint current_target_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_target_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ControlData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_station_error(), target);
  }

  // optional double lateral_error = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lateral_error(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional .apollo.common.TrajectoryPoint current_target_point = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::current_target_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ControlData)
  return target;
}

size_t ControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ControlData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.TrajectoryPoint current_target_point = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_target_point_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ControlData)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ControlData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ControlData)
    MergeFrom(*source);
  }
}

void ControlData::MergeFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ControlData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_target_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_current_target_point());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00000008u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_error_ = from.heading_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlData::CopyFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlData::IsInitialized() const {
  return true;
}

void ControlData::InternalSwap(ControlData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(current_target_point_, other->current_target_point_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(station_error_, other->station_error_);
  swap(lateral_error_, other->lateral_error_);
  swap(heading_error_, other->heading_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Notification::InitAsDefaultInstance() {
  ::apollo::dreamview::_Notification_default_instance_._instance.get_mutable()->item_ = const_cast< ::apollo::common::monitor::MonitorMessageItem*>(
      ::apollo::common::monitor::MonitorMessageItem::internal_default_instance());
}
class Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<Notification>()._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::monitor::MonitorMessageItem& item(const Notification* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::monitor::MonitorMessageItem&
Notification::_Internal::item(const Notification* msg) {
  return *msg->item_;
}
void Notification::clear_item() {
  if (item_ != nullptr) item_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Notification::Notification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::apollo::common::monitor::MonitorMessageItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Notification)
}

void Notification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Notification_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_sec_) -
      reinterpret_cast<char*>(&item_)) + sizeof(timestamp_sec_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
}

void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Notification& Notification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Notification_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_ != nullptr);
    item_->Clear();
  }
  timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.monitor.MonitorMessageItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Notification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional .apollo.common.monitor.MonitorMessageItem item = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Notification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.monitor.MonitorMessageItem item = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Notification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_item()->::apollo::common::monitor::MonitorMessageItem::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_, other->item_);
  swap(timestamp_sec_, other->timestamp_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SimulationWorld_LatencyEntry_DoNotUse::SimulationWorld_LatencyEntry_DoNotUse() {}
SimulationWorld_LatencyEntry_DoNotUse::SimulationWorld_LatencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimulationWorld_LatencyEntry_DoNotUse::MergeFrom(const SimulationWorld_LatencyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimulationWorld_LatencyEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SimulationWorld_LatencyEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SimulationWorld::InitAsDefaultInstance() {
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->auto_driving_car_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->traffic_signal_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->main_stop_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->main_decision_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->delay_ = const_cast< ::apollo::dreamview::DelaysInMs*>(
      ::apollo::dreamview::DelaysInMs::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->monitor_ = const_cast< ::apollo::common::monitor::MonitorMessage*>(
      ::apollo::common::monitor::MonitorMessage::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->map_element_ids_ = const_cast< ::apollo::dreamview::MapElementIds*>(
      ::apollo::dreamview::MapElementIds::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->planning_data_ = const_cast< ::apollo::planning_internal::PlanningData*>(
      ::apollo::planning_internal::PlanningData::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->gps_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->lane_marker_ = const_cast< ::apollo::perception::LaneMarkers*>(
      ::apollo::perception::LaneMarkers::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->control_data_ = const_cast< ::apollo::dreamview::ControlData*>(
      ::apollo::dreamview::ControlData::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->shadow_localization_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
}
class SimulationWorld::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulationWorld>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_sequence_num(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::dreamview::Object& auto_driving_car(const SimulationWorld* msg);
  static void set_has_auto_driving_car(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::dreamview::Object& traffic_signal(const SimulationWorld* msg);
  static void set_has_traffic_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_routing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::dreamview::Object& main_stop(const SimulationWorld* msg);
  static void set_has_main_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::dreamview::Object& main_decision(const SimulationWorld* msg);
  static void set_has_main_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::dreamview::DelaysInMs& delay(const SimulationWorld* msg);
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::common::monitor::MonitorMessage& monitor(const SimulationWorld* msg);
  static void set_has_monitor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::dreamview::MapElementIds& map_element_ids(const SimulationWorld* msg);
  static void set_has_map_element_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_map_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_map_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::planning_internal::PlanningData& planning_data(const SimulationWorld* msg);
  static void set_has_planning_data(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::dreamview::Object& gps(const SimulationWorld* msg);
  static void set_has_gps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::perception::LaneMarkers& lane_marker(const SimulationWorld* msg);
  static void set_has_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::dreamview::ControlData& control_data(const SimulationWorld* msg);
  static void set_has_control_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_rss_safe(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::dreamview::Object& shadow_localization(const SimulationWorld* msg);
  static void set_has_shadow_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::apollo::dreamview::Object&
SimulationWorld::_Internal::auto_driving_car(const SimulationWorld* msg) {
  return *msg->auto_driving_car_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::traffic_signal(const SimulationWorld* msg) {
  return *msg->traffic_signal_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::main_stop(const SimulationWorld* msg) {
  return *msg->main_stop_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::main_decision(const SimulationWorld* msg) {
  return *msg->main_decision_;
}
const ::apollo::dreamview::DelaysInMs&
SimulationWorld::_Internal::delay(const SimulationWorld* msg) {
  return *msg->delay_;
}
const ::apollo::common::monitor::MonitorMessage&
SimulationWorld::_Internal::monitor(const SimulationWorld* msg) {
  return *msg->monitor_;
}
const ::apollo::dreamview::MapElementIds&
SimulationWorld::_Internal::map_element_ids(const SimulationWorld* msg) {
  return *msg->map_element_ids_;
}
const ::apollo::planning_internal::PlanningData&
SimulationWorld::_Internal::planning_data(const SimulationWorld* msg) {
  return *msg->planning_data_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::gps(const SimulationWorld* msg) {
  return *msg->gps_;
}
const ::apollo::perception::LaneMarkers&
SimulationWorld::_Internal::lane_marker(const SimulationWorld* msg) {
  return *msg->lane_marker_;
}
const ::apollo::dreamview::ControlData&
SimulationWorld::_Internal::control_data(const SimulationWorld* msg) {
  return *msg->control_data_;
}
const ::apollo::dreamview::Object&
SimulationWorld::_Internal::shadow_localization(const SimulationWorld* msg) {
  return *msg->shadow_localization_;
}
void SimulationWorld::clear_monitor() {
  if (monitor_ != nullptr) monitor_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SimulationWorld::clear_planning_data() {
  if (planning_data_ != nullptr) planning_data_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void SimulationWorld::clear_lane_marker() {
  if (lane_marker_ != nullptr) lane_marker_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void SimulationWorld::clear_navigation_path() {
  navigation_path_.Clear();
}
SimulationWorld::SimulationWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.SimulationWorld)
}
SimulationWorld::SimulationWorld(const SimulationWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      object_(from.object_),
      route_path_(from.route_path_),
      planning_trajectory_(from.planning_trajectory_),
      notification_(from.notification_),
      navigation_path_(from.navigation_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latency_.MergeFrom(from.latency_);
  engage_advice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_engage_advice()) {
    engage_advice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.engage_advice_);
  }
  if (from._internal_has_auto_driving_car()) {
    auto_driving_car_ = new ::apollo::dreamview::Object(*from.auto_driving_car_);
  } else {
    auto_driving_car_ = nullptr;
  }
  if (from._internal_has_traffic_signal()) {
    traffic_signal_ = new ::apollo::dreamview::Object(*from.traffic_signal_);
  } else {
    traffic_signal_ = nullptr;
  }
  if (from._internal_has_main_stop()) {
    main_stop_ = new ::apollo::dreamview::Object(*from.main_stop_);
  } else {
    main_stop_ = nullptr;
  }
  if (from._internal_has_main_decision()) {
    main_decision_ = new ::apollo::dreamview::Object(*from.main_decision_);
  } else {
    main_decision_ = nullptr;
  }
  if (from._internal_has_delay()) {
    delay_ = new ::apollo::dreamview::DelaysInMs(*from.delay_);
  } else {
    delay_ = nullptr;
  }
  if (from._internal_has_monitor()) {
    monitor_ = new ::apollo::common::monitor::MonitorMessage(*from.monitor_);
  } else {
    monitor_ = nullptr;
  }
  if (from._internal_has_map_element_ids()) {
    map_element_ids_ = new ::apollo::dreamview::MapElementIds(*from.map_element_ids_);
  } else {
    map_element_ids_ = nullptr;
  }
  if (from._internal_has_planning_data()) {
    planning_data_ = new ::apollo::planning_internal::PlanningData(*from.planning_data_);
  } else {
    planning_data_ = nullptr;
  }
  if (from._internal_has_gps()) {
    gps_ = new ::apollo::dreamview::Object(*from.gps_);
  } else {
    gps_ = nullptr;
  }
  if (from._internal_has_lane_marker()) {
    lane_marker_ = new ::apollo::perception::LaneMarkers(*from.lane_marker_);
  } else {
    lane_marker_ = nullptr;
  }
  if (from._internal_has_control_data()) {
    control_data_ = new ::apollo::dreamview::ControlData(*from.control_data_);
  } else {
    control_data_ = nullptr;
  }
  if (from._internal_has_shadow_localization()) {
    shadow_localization_ = new ::apollo::dreamview::Object(*from.shadow_localization_);
  } else {
    shadow_localization_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_rss_safe_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(is_rss_safe_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.SimulationWorld)
}

void SimulationWorld::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationWorld_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  engage_advice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_driving_car_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&auto_driving_car_)) + sizeof(sequence_num_));
  is_rss_safe_ = true;
}

SimulationWorld::~SimulationWorld() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.SimulationWorld)
  SharedDtor();
}

void SimulationWorld::SharedDtor() {
  engage_advice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auto_driving_car_;
  if (this != internal_default_instance()) delete traffic_signal_;
  if (this != internal_default_instance()) delete main_stop_;
  if (this != internal_default_instance()) delete main_decision_;
  if (this != internal_default_instance()) delete delay_;
  if (this != internal_default_instance()) delete monitor_;
  if (this != internal_default_instance()) delete map_element_ids_;
  if (this != internal_default_instance()) delete planning_data_;
  if (this != internal_default_instance()) delete gps_;
  if (this != internal_default_instance()) delete lane_marker_;
  if (this != internal_default_instance()) delete control_data_;
  if (this != internal_default_instance()) delete shadow_localization_;
}

void SimulationWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationWorld& SimulationWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationWorld_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto.base);
  return *internal_default_instance();
}


void SimulationWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.SimulationWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  route_path_.Clear();
  planning_trajectory_.Clear();
  notification_.Clear();
  latency_.Clear();
  navigation_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      engage_advice_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auto_driving_car_ != nullptr);
      auto_driving_car_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(traffic_signal_ != nullptr);
      traffic_signal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(main_stop_ != nullptr);
      main_stop_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(main_decision_ != nullptr);
      main_decision_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(delay_ != nullptr);
      delay_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(monitor_ != nullptr);
      monitor_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(map_element_ids_ != nullptr);
      map_element_ids_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(planning_data_ != nullptr);
      planning_data_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(gps_ != nullptr);
      gps_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(lane_marker_ != nullptr);
      lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(control_data_ != nullptr);
      control_data_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(shadow_localization_ != nullptr);
      shadow_localization_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(speed_limit_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&map_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_num_) -
        reinterpret_cast<char*>(&map_hash_)) + sizeof(sequence_num_));
    is_rss_safe_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SimulationWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sequence_num(&has_bits);
          sequence_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Object object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object auto_driving_car = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_driving_car(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object traffic_signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.RoutePath route_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_route_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double routing_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_routing_time(&has_bits);
          routing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Object planning_trajectory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_planning_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object main_decision = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_decision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.DelaysInMs delay = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_monitor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Notification notification = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string engage_advice = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_engage_advice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.SimulationWorld.engage_advice");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .apollo.dreamview.Latency> latency = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&latency_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_element_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 map_hash = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_map_hash(&has_bits);
          map_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double map_radius = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_map_radius(&has_bits);
          map_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.PlanningData planning_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object gps = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.LaneMarkers lane_marker = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_marker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ControlData control_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Path navigation_path = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_navigation_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_rss_safe = 25 [default = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_is_rss_safe(&has_bits);
          is_rss_safe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.Object shadow_localization = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationWorld::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.SimulationWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint32 sequence_num = 2;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_num(), target);
  }

  // repeated .apollo.dreamview.Object object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_object(i), target, stream);
  }

  // optional .apollo.dreamview.Object auto_driving_car = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::auto_driving_car(this), target, stream);
  }

  // optional .apollo.dreamview.Object traffic_signal = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::traffic_signal(this), target, stream);
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_route_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_route_path(i), target, stream);
  }

  // optional double routing_time = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_routing_time(), target);
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_planning_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_planning_trajectory(i), target, stream);
  }

  // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::main_stop(this), target, stream);
  }

  // optional .apollo.dreamview.Object main_decision = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::main_decision(this), target, stream);
  }

  // optional double speed_limit = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_speed_limit(), target);
  }

  // optional .apollo.dreamview.DelaysInMs delay = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::delay(this), target, stream);
  }

  // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::monitor(this), target, stream);
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notification_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_notification(i), target, stream);
  }

  // optional string engage_advice = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_engage_advice().data(), static_cast<int>(this->_internal_engage_advice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimulationWorld.engage_advice");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_engage_advice(), target);
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  if (!this->_internal_latency().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.LatencyEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_latency().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_latency().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->_internal_latency().begin();
          it != this->_internal_latency().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SimulationWorld_LatencyEntry_DoNotUse::Funcs::InternalSerialize(16, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->_internal_latency().begin();
          it != this->_internal_latency().end(); ++it) {
        target = SimulationWorld_LatencyEntry_DoNotUse::Funcs::InternalSerialize(16, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::map_element_ids(this), target, stream);
  }

  // optional uint64 map_hash = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_map_hash(), target);
  }

  // optional double map_radius = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_map_radius(), target);
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::planning_data(this), target, stream);
  }

  // optional .apollo.dreamview.Object gps = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::gps(this), target, stream);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::lane_marker(this), target, stream);
  }

  // optional .apollo.dreamview.ControlData control_data = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::control_data(this), target, stream);
  }

  // repeated .apollo.common.Path navigation_path = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_navigation_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_navigation_path(i), target, stream);
  }

  // optional bool is_rss_safe = 25 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_is_rss_safe(), target);
  }

  // optional .apollo.dreamview.Object shadow_localization = 26;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::shadow_localization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.SimulationWorld)
  return target;
}

size_t SimulationWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.SimulationWorld)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Object object = 3;
  total_size += 1UL * this->_internal_object_size();
  for (const auto& msg : this->object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  total_size += 1UL * this->_internal_route_path_size();
  for (const auto& msg : this->route_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  total_size += 1UL * this->_internal_planning_trajectory_size();
  for (const auto& msg : this->planning_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  total_size += 1UL * this->_internal_notification_size();
  for (const auto& msg : this->notification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_latency_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Latency >::const_iterator
      it = this->_internal_latency().begin();
      it != this->_internal_latency().end(); ++it) {
    total_size += SimulationWorld_LatencyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .apollo.common.Path navigation_path = 24;
  total_size += 2UL * this->_internal_navigation_path_size();
  for (const auto& msg : this->navigation_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string engage_advice = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_engage_advice());
    }

    // optional .apollo.dreamview.Object auto_driving_car = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_driving_car_);
    }

    // optional .apollo.dreamview.Object traffic_signal = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *traffic_signal_);
    }

    // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *main_stop_);
    }

    // optional .apollo.dreamview.Object main_decision = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *main_decision_);
    }

    // optional .apollo.dreamview.DelaysInMs delay = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delay_);
    }

    // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *monitor_);
    }

    // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_element_ids_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.planning_internal.PlanningData planning_data = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *planning_data_);
    }

    // optional .apollo.dreamview.Object gps = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gps_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_marker_);
    }

    // optional .apollo.dreamview.ControlData control_data = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_data_);
    }

    // optional .apollo.dreamview.Object shadow_localization = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_localization_);
    }

    // optional double timestamp = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double routing_time = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint64 map_hash = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_map_hash());
    }

    // optional double map_radius = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional uint32 sequence_num = 2;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sequence_num());
    }

    // optional bool is_rss_safe = 25 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.SimulationWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.SimulationWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.SimulationWorld)
    MergeFrom(*source);
  }
}

void SimulationWorld::MergeFrom(const SimulationWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.SimulationWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  route_path_.MergeFrom(from.route_path_);
  planning_trajectory_.MergeFrom(from.planning_trajectory_);
  notification_.MergeFrom(from.notification_);
  latency_.MergeFrom(from.latency_);
  navigation_path_.MergeFrom(from.navigation_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      engage_advice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.engage_advice_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_auto_driving_car()->::apollo::dreamview::Object::MergeFrom(from._internal_auto_driving_car());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_traffic_signal()->::apollo::dreamview::Object::MergeFrom(from._internal_traffic_signal());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_main_stop()->::apollo::dreamview::Object::MergeFrom(from._internal_main_stop());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_main_decision()->::apollo::dreamview::Object::MergeFrom(from._internal_main_decision());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_delay()->::apollo::dreamview::DelaysInMs::MergeFrom(from._internal_delay());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_monitor()->::apollo::common::monitor::MonitorMessage::MergeFrom(from._internal_monitor());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_map_element_ids()->::apollo::dreamview::MapElementIds::MergeFrom(from._internal_map_element_ids());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from._internal_planning_data());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_gps()->::apollo::dreamview::Object::MergeFrom(from._internal_gps());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from._internal_lane_marker());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_control_data()->::apollo::dreamview::ControlData::MergeFrom(from._internal_control_data());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_shadow_localization()->::apollo::dreamview::Object::MergeFrom(from._internal_shadow_localization());
    }
    if (cached_has_bits & 0x00002000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00004000u) {
      routing_time_ = from.routing_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      map_hash_ = from.map_hash_;
    }
    if (cached_has_bits & 0x00020000u) {
      map_radius_ = from.map_radius_;
    }
    if (cached_has_bits & 0x00040000u) {
      sequence_num_ = from.sequence_num_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_rss_safe_ = from.is_rss_safe_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulationWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.SimulationWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationWorld::CopyFrom(const SimulationWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.SimulationWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationWorld::IsInitialized() const {
  return true;
}

void SimulationWorld::InternalSwap(SimulationWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_.InternalSwap(&other->object_);
  route_path_.InternalSwap(&other->route_path_);
  planning_trajectory_.InternalSwap(&other->planning_trajectory_);
  notification_.InternalSwap(&other->notification_);
  latency_.Swap(&other->latency_);
  navigation_path_.InternalSwap(&other->navigation_path_);
  engage_advice_.Swap(&other->engage_advice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auto_driving_car_, other->auto_driving_car_);
  swap(traffic_signal_, other->traffic_signal_);
  swap(main_stop_, other->main_stop_);
  swap(main_decision_, other->main_decision_);
  swap(delay_, other->delay_);
  swap(monitor_, other->monitor_);
  swap(map_element_ids_, other->map_element_ids_);
  swap(planning_data_, other->planning_data_);
  swap(gps_, other->gps_);
  swap(lane_marker_, other->lane_marker_);
  swap(control_data_, other->control_data_);
  swap(shadow_localization_, other->shadow_localization_);
  swap(timestamp_, other->timestamp_);
  swap(routing_time_, other->routing_time_);
  swap(speed_limit_, other->speed_limit_);
  swap(map_hash_, other->map_hash_);
  swap(map_radius_, other->map_radius_);
  swap(sequence_num_, other->sequence_num_);
  swap(is_rss_safe_, other->is_rss_safe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::PolygonPoint* Arena::CreateMaybeMessage< ::apollo::dreamview::PolygonPoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::PolygonPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Prediction* Arena::CreateMaybeMessage< ::apollo::dreamview::Prediction >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Decision* Arena::CreateMaybeMessage< ::apollo::dreamview::Decision >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Decision >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Object* Arena::CreateMaybeMessage< ::apollo::dreamview::Object >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DelaysInMs* Arena::CreateMaybeMessage< ::apollo::dreamview::DelaysInMs >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::DelaysInMs >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::RoutePath* Arena::CreateMaybeMessage< ::apollo::dreamview::RoutePath >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::RoutePath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Latency* Arena::CreateMaybeMessage< ::apollo::dreamview::Latency >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Latency >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::MapElementIds* Arena::CreateMaybeMessage< ::apollo::dreamview::MapElementIds >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::MapElementIds >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::ControlData* Arena::CreateMaybeMessage< ::apollo::dreamview::ControlData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::ControlData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Notification* Arena::CreateMaybeMessage< ::apollo::dreamview::Notification >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::SimulationWorld* Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::SimulationWorld >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
