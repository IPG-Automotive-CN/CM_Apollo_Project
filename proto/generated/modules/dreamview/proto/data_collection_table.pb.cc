// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/data_collection_table.proto

#include "modules/dreamview/proto/data_collection_table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Category_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Criterion_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataCollectionTable_ScenarioEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scenario_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scenario_CategoryEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
namespace apollo {
namespace dreamview {
class CriterionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Criterion> _instance;
} _Criterion_default_instance_;
class CategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Category> _instance;
} _Category_default_instance_;
class Scenario_CategoryEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scenario_CategoryEntry_DoNotUse> _instance;
} _Scenario_CategoryEntry_DoNotUse_default_instance_;
class ScenarioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scenario> _instance;
} _Scenario_default_instance_;
class DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCollectionTable_ScenarioEntry_DoNotUse> _instance;
} _DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_;
class DataCollectionTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCollectionTable> _instance;
} _DataCollectionTable_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_Category_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Category_default_instance_;
    new (ptr) ::apollo::dreamview::Category();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Category::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Category_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Category_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto}, {
      &scc_info_Criterion_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,}};

static void InitDefaultsscc_info_Criterion_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Criterion_default_instance_;
    new (ptr) ::apollo::dreamview::Criterion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Criterion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Criterion_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Criterion_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto}, {}};

static void InitDefaultsscc_info_DataCollectionTable_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_DataCollectionTable_default_instance_;
    new (ptr) ::apollo::dreamview::DataCollectionTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::DataCollectionTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataCollectionTable_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataCollectionTable_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto}, {
      &scc_info_DataCollectionTable_ScenarioEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,}};

static void InitDefaultsscc_info_DataCollectionTable_ScenarioEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse();
  }
  ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataCollectionTable_ScenarioEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataCollectionTable_ScenarioEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto}, {
      &scc_info_Scenario_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,}};

static void InitDefaultsscc_info_Scenario_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Scenario_default_instance_;
    new (ptr) ::apollo::dreamview::Scenario();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Scenario::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scenario_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scenario_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto}, {
      &scc_info_Scenario_CategoryEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,}};

static void InitDefaultsscc_info_Scenario_CategoryEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Scenario_CategoryEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::Scenario_CategoryEntry_DoNotUse();
  }
  ::apollo::dreamview::Scenario_CategoryEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scenario_CategoryEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Scenario_CategoryEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto}, {
      &scc_info_Category_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, field_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, comparison_operator_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, value_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Criterion, vehicle_config_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Category, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Category, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Category, total_frames_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Category, description_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Category, criterion_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario_CategoryEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario_CategoryEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario_CategoryEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario_CategoryEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::Scenario, category_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, scenario_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::DataCollectionTable, frame_threshold_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::dreamview::Criterion)},
  { 13, 21, sizeof(::apollo::dreamview::Category)},
  { 24, 31, sizeof(::apollo::dreamview::Scenario_CategoryEntry_DoNotUse)},
  { 33, 39, sizeof(::apollo::dreamview::Scenario)},
  { 40, 47, sizeof(::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse)},
  { 49, 56, sizeof(::apollo::dreamview::DataCollectionTable)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Criterion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Category_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Scenario_CategoryEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_Scenario_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_DataCollectionTable_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3modules/dreamview/proto/data_collectio"
  "n_table.proto\022\020apollo.dreamview\"\204\001\n\tCrit"
  "erion\022\r\n\005field\030\001 \001(\t\022A\n\023comparison_opera"
  "tor\030\002 \001(\0162$.apollo.dreamview.ComparisonO"
  "perator\022\r\n\005value\030\003 \001(\002\022\026\n\016vehicle_config"
  "\030\004 \001(\t\"e\n\010Category\022\024\n\014total_frames\030\001 \001(\r"
  "\022\023\n\013description\030\002 \001(\t\022.\n\tcriterion\030\003 \003(\013"
  "2\033.apollo.dreamview.Criterion\"\223\001\n\010Scenar"
  "io\022:\n\010category\030\001 \003(\0132(.apollo.dreamview."
  "Scenario.CategoryEntry\032K\n\rCategoryEntry\022"
  "\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.apollo.dre"
  "amview.Category:\0028\001\"\302\001\n\023DataCollectionTa"
  "ble\022E\n\010scenario\030\001 \003(\01323.apollo.dreamview"
  ".DataCollectionTable.ScenarioEntry\022\027\n\017fr"
  "ame_threshold\030\002 \001(\r\032K\n\rScenarioEntry\022\013\n\003"
  "key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.apollo.dreamv"
  "iew.Scenario:\0028\001*\202\001\n\022ComparisonOperator\022"
  "\t\n\005EQUAL\020\000\022\r\n\tNOT_EQUAL\020\001\022\020\n\014GREATER_THA"
  "N\020\002\022\031\n\025GREATER_THAN_OR_EQUAL\020\003\022\r\n\tLESS_T"
  "HAN\020\004\022\026\n\022LESS_THAN_OR_EQUAL\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_sccs[6] = {
  &scc_info_Category_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,
  &scc_info_Criterion_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,
  &scc_info_DataCollectionTable_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,
  &scc_info_DataCollectionTable_ScenarioEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,
  &scc_info_Scenario_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,
  &scc_info_Scenario_CategoryEntry_DoNotUse_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once;
static bool descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto = {
  &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_initialized, descriptor_table_protodef_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto, "modules/dreamview/proto/data_collection_table.proto", 789,
  &descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_sccs, descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto, 6, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto), true);
namespace apollo {
namespace dreamview {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonOperator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto[0];
}
bool ComparisonOperator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Criterion::InitAsDefaultInstance() {
}
class Criterion::_Internal {
 public:
  using HasBits = decltype(std::declval<Criterion>()._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comparison_operator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vehicle_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Criterion::Criterion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Criterion)
}
Criterion::Criterion(const Criterion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field()) {
    field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  vehicle_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vehicle_config()) {
    vehicle_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vehicle_config_);
  }
  ::memcpy(&comparison_operator_, &from.comparison_operator_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&comparison_operator_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Criterion)
}

void Criterion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Criterion_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&comparison_operator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&comparison_operator_)) + sizeof(value_));
}

Criterion::~Criterion() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Criterion)
  SharedDtor();
}

void Criterion::SharedDtor() {
  field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Criterion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Criterion& Criterion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Criterion_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base);
  return *internal_default_instance();
}


void Criterion::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Criterion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_config_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&comparison_operator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&comparison_operator_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Criterion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Criterion.field");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::dreamview::ComparisonOperator_IsValid(val))) {
            _internal_set_comparison_operator(static_cast<::apollo::dreamview::ComparisonOperator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string vehicle_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vehicle_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Criterion.vehicle_config");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Criterion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Criterion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Criterion.field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field(), target);
  }

  // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_comparison_operator(), target);
  }

  // optional float value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  // optional string vehicle_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vehicle_config().data(), static_cast<int>(this->_internal_vehicle_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Criterion.vehicle_config");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vehicle_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Criterion)
  return target;
}

size_t Criterion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Criterion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field());
    }

    // optional string vehicle_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vehicle_config());
    }

    // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comparison_operator());
    }

    // optional float value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Criterion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Criterion)
  GOOGLE_DCHECK_NE(&from, this);
  const Criterion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Criterion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Criterion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Criterion)
    MergeFrom(*source);
  }
}

void Criterion::MergeFrom(const Criterion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Criterion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      vehicle_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vehicle_config_);
    }
    if (cached_has_bits & 0x00000004u) {
      comparison_operator_ = from.comparison_operator_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Criterion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Criterion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Criterion::CopyFrom(const Criterion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Criterion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Criterion::IsInitialized() const {
  return true;
}

void Criterion::InternalSwap(Criterion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_.Swap(&other->field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vehicle_config_.Swap(&other->vehicle_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(comparison_operator_, other->comparison_operator_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Criterion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Category::InitAsDefaultInstance() {
}
class Category::_Internal {
 public:
  using HasBits = decltype(std::declval<Category>()._has_bits_);
  static void set_has_total_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Category::Category()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      criterion_(from.criterion_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  total_frames_ = from.total_frames_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Category)
}

void Category::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Category_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_frames_ = 0u;
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Category)
  SharedDtor();
}

void Category::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Category& Category::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Category_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base);
  return *internal_default_instance();
}


void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  criterion_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmptyNoArena();
  }
  total_frames_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Category::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 total_frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total_frames(&has_bits);
          total_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.Category.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dreamview.Criterion criterion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_criterion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Category::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Category)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_frames = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_frames(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Category.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .apollo.dreamview.Criterion criterion = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_criterion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_criterion(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Category)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Criterion criterion = 3;
  total_size += 1UL * this->_internal_criterion_size();
  for (const auto& msg : this->criterion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint32 total_frames = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_frames());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Category)
  GOOGLE_DCHECK_NE(&from, this);
  const Category* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Category>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Category)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Category)
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Category)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  criterion_.MergeFrom(from.criterion_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      total_frames_ = from.total_frames_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Category::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  criterion_.InternalSwap(&other->criterion_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_frames_, other->total_frames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Category::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Scenario_CategoryEntry_DoNotUse::Scenario_CategoryEntry_DoNotUse() {}
Scenario_CategoryEntry_DoNotUse::Scenario_CategoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Scenario_CategoryEntry_DoNotUse::MergeFrom(const Scenario_CategoryEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Scenario_CategoryEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Scenario_CategoryEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Scenario::InitAsDefaultInstance() {
}
class Scenario::_Internal {
 public:
  using HasBits = decltype(std::declval<Scenario>()._has_bits_);
};

Scenario::Scenario()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Scenario)
}
Scenario::Scenario(const Scenario& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.MergeFrom(from.category_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Scenario)
}

void Scenario::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scenario_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base);
}

Scenario::~Scenario() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Scenario)
  SharedDtor();
}

void Scenario::SharedDtor() {
}

void Scenario::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scenario& Scenario::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scenario_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base);
  return *internal_default_instance();
}


void Scenario::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Scenario)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scenario::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .apollo.dreamview.Category> category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&category_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scenario::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Scenario)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.Category> category = 1;
  if (!this->_internal_category().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Scenario.CategoryEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_category().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_category().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >::const_iterator
          it = this->_internal_category().begin();
          it != this->_internal_category().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Scenario_CategoryEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >::const_iterator
          it = this->_internal_category().begin();
          it != this->_internal_category().end(); ++it) {
        target = Scenario_CategoryEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Scenario)
  return target;
}

size_t Scenario::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Scenario)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.Category> category = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_category_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >::const_iterator
      it = this->_internal_category().begin();
      it != this->_internal_category().end(); ++it) {
    total_size += Scenario_CategoryEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scenario::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Scenario)
  GOOGLE_DCHECK_NE(&from, this);
  const Scenario* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scenario>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Scenario)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Scenario)
    MergeFrom(*source);
  }
}

void Scenario::MergeFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Scenario)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
}

void Scenario::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario::CopyFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario::IsInitialized() const {
  return true;
}

void Scenario::InternalSwap(Scenario* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  category_.Swap(&other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scenario::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DataCollectionTable_ScenarioEntry_DoNotUse::DataCollectionTable_ScenarioEntry_DoNotUse() {}
DataCollectionTable_ScenarioEntry_DoNotUse::DataCollectionTable_ScenarioEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataCollectionTable_ScenarioEntry_DoNotUse::MergeFrom(const DataCollectionTable_ScenarioEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataCollectionTable_ScenarioEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DataCollectionTable_ScenarioEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DataCollectionTable::InitAsDefaultInstance() {
}
class DataCollectionTable::_Internal {
 public:
  using HasBits = decltype(std::declval<DataCollectionTable>()._has_bits_);
  static void set_has_frame_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DataCollectionTable::DataCollectionTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.DataCollectionTable)
}
DataCollectionTable::DataCollectionTable(const DataCollectionTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scenario_.MergeFrom(from.scenario_);
  frame_threshold_ = from.frame_threshold_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.DataCollectionTable)
}

void DataCollectionTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataCollectionTable_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base);
  frame_threshold_ = 0u;
}

DataCollectionTable::~DataCollectionTable() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.DataCollectionTable)
  SharedDtor();
}

void DataCollectionTable::SharedDtor() {
}

void DataCollectionTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCollectionTable& DataCollectionTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCollectionTable_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.base);
  return *internal_default_instance();
}


void DataCollectionTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.DataCollectionTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scenario_.Clear();
  frame_threshold_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DataCollectionTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .apollo.dreamview.Scenario> scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&scenario_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 frame_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_frame_threshold(&has_bits);
          frame_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCollectionTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.DataCollectionTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.Scenario> scenario = 1;
  if (!this->_internal_scenario().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.DataCollectionTable.ScenarioEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_scenario().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_scenario().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::const_iterator
          it = this->_internal_scenario().begin();
          it != this->_internal_scenario().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DataCollectionTable_ScenarioEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::const_iterator
          it = this->_internal_scenario().begin();
          it != this->_internal_scenario().end(); ++it) {
        target = DataCollectionTable_ScenarioEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 frame_threshold = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.DataCollectionTable)
  return target;
}

size_t DataCollectionTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.DataCollectionTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.dreamview.Scenario> scenario = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_scenario_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >::const_iterator
      it = this->_internal_scenario().begin();
      it != this->_internal_scenario().end(); ++it) {
    total_size += DataCollectionTable_ScenarioEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional uint32 frame_threshold = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCollectionTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.DataCollectionTable)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCollectionTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCollectionTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.DataCollectionTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.DataCollectionTable)
    MergeFrom(*source);
  }
}

void DataCollectionTable::MergeFrom(const DataCollectionTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.DataCollectionTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scenario_.MergeFrom(from.scenario_);
  if (from._internal_has_frame_threshold()) {
    _internal_set_frame_threshold(from._internal_frame_threshold());
  }
}

void DataCollectionTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.DataCollectionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCollectionTable::CopyFrom(const DataCollectionTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.DataCollectionTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCollectionTable::IsInitialized() const {
  return true;
}

void DataCollectionTable::InternalSwap(DataCollectionTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scenario_.Swap(&other->scenario_);
  swap(frame_threshold_, other->frame_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCollectionTable::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Criterion* Arena::CreateMaybeMessage< ::apollo::dreamview::Criterion >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Criterion >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Category* Arena::CreateMaybeMessage< ::apollo::dreamview::Category >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Scenario_CategoryEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::Scenario_CategoryEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Scenario_CategoryEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::Scenario* Arena::CreateMaybeMessage< ::apollo::dreamview::Scenario >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Scenario >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::DataCollectionTable* Arena::CreateMaybeMessage< ::apollo::dreamview::DataCollectionTable >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::DataCollectionTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
