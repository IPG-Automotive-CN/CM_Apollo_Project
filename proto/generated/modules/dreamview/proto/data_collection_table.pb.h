// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/data_collection_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
namespace apollo {
namespace dreamview {
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class Criterion;
class CriterionDefaultTypeInternal;
extern CriterionDefaultTypeInternal _Criterion_default_instance_;
class DataCollectionTable;
class DataCollectionTableDefaultTypeInternal;
extern DataCollectionTableDefaultTypeInternal _DataCollectionTable_default_instance_;
class DataCollectionTable_ScenarioEntry_DoNotUse;
class DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal;
extern DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal _DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_;
class Scenario;
class ScenarioDefaultTypeInternal;
extern ScenarioDefaultTypeInternal _Scenario_default_instance_;
class Scenario_CategoryEntry_DoNotUse;
class Scenario_CategoryEntry_DoNotUseDefaultTypeInternal;
extern Scenario_CategoryEntry_DoNotUseDefaultTypeInternal _Scenario_CategoryEntry_DoNotUse_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::Category* Arena::CreateMaybeMessage<::apollo::dreamview::Category>(Arena*);
template<> ::apollo::dreamview::Criterion* Arena::CreateMaybeMessage<::apollo::dreamview::Criterion>(Arena*);
template<> ::apollo::dreamview::DataCollectionTable* Arena::CreateMaybeMessage<::apollo::dreamview::DataCollectionTable>(Arena*);
template<> ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::Scenario* Arena::CreateMaybeMessage<::apollo::dreamview::Scenario>(Arena*);
template<> ::apollo::dreamview::Scenario_CategoryEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::Scenario_CategoryEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

enum ComparisonOperator : int {
  EQUAL = 0,
  NOT_EQUAL = 1,
  GREATER_THAN = 2,
  GREATER_THAN_OR_EQUAL = 3,
  LESS_THAN = 4,
  LESS_THAN_OR_EQUAL = 5
};
bool ComparisonOperator_IsValid(int value);
constexpr ComparisonOperator ComparisonOperator_MIN = EQUAL;
constexpr ComparisonOperator ComparisonOperator_MAX = LESS_THAN_OR_EQUAL;
constexpr int ComparisonOperator_ARRAYSIZE = ComparisonOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonOperator_descriptor();
template<typename T>
inline const std::string& ComparisonOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComparisonOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComparisonOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComparisonOperator_descriptor(), enum_t_value);
}
inline bool ComparisonOperator_Parse(
    const std::string& name, ComparisonOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComparisonOperator>(
    ComparisonOperator_descriptor(), name, value);
}
// ===================================================================

class Criterion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Criterion) */ {
 public:
  Criterion();
  virtual ~Criterion();

  Criterion(const Criterion& from);
  Criterion(Criterion&& from) noexcept
    : Criterion() {
    *this = ::std::move(from);
  }

  inline Criterion& operator=(const Criterion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Criterion& operator=(Criterion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Criterion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Criterion* internal_default_instance() {
    return reinterpret_cast<const Criterion*>(
               &_Criterion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Criterion& a, Criterion& b) {
    a.Swap(&b);
  }
  inline void Swap(Criterion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Criterion* New() const final {
    return CreateMaybeMessage<Criterion>(nullptr);
  }

  Criterion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Criterion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Criterion& from);
  void MergeFrom(const Criterion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Criterion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Criterion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kVehicleConfigFieldNumber = 4,
    kComparisonOperatorFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // optional string field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const std::string& field() const;
  void set_field(const std::string& value);
  void set_field(std::string&& value);
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  std::string* mutable_field();
  std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // optional string vehicle_config = 4;
  bool has_vehicle_config() const;
  private:
  bool _internal_has_vehicle_config() const;
  public:
  void clear_vehicle_config();
  const std::string& vehicle_config() const;
  void set_vehicle_config(const std::string& value);
  void set_vehicle_config(std::string&& value);
  void set_vehicle_config(const char* value);
  void set_vehicle_config(const char* value, size_t size);
  std::string* mutable_vehicle_config();
  std::string* release_vehicle_config();
  void set_allocated_vehicle_config(std::string* vehicle_config);
  private:
  const std::string& _internal_vehicle_config() const;
  void _internal_set_vehicle_config(const std::string& value);
  std::string* _internal_mutable_vehicle_config();
  public:

  // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
  bool has_comparison_operator() const;
  private:
  bool _internal_has_comparison_operator() const;
  public:
  void clear_comparison_operator();
  ::apollo::dreamview::ComparisonOperator comparison_operator() const;
  void set_comparison_operator(::apollo::dreamview::ComparisonOperator value);
  private:
  ::apollo::dreamview::ComparisonOperator _internal_comparison_operator() const;
  void _internal_set_comparison_operator(::apollo::dreamview::ComparisonOperator value);
  public:

  // optional float value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Criterion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_config_;
  int comparison_operator_;
  float value_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// -------------------------------------------------------------------

class Category :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Category) */ {
 public:
  Category();
  virtual ~Category();

  Category(const Category& from);
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  inline Category& operator=(Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }
  inline void Swap(Category* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(nullptr);
  }

  Category* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Category* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Category";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCriterionFieldNumber = 3,
    kDescriptionFieldNumber = 2,
    kTotalFramesFieldNumber = 1,
  };
  // repeated .apollo.dreamview.Criterion criterion = 3;
  int criterion_size() const;
  private:
  int _internal_criterion_size() const;
  public:
  void clear_criterion();
  ::apollo::dreamview::Criterion* mutable_criterion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion >*
      mutable_criterion();
  private:
  const ::apollo::dreamview::Criterion& _internal_criterion(int index) const;
  ::apollo::dreamview::Criterion* _internal_add_criterion();
  public:
  const ::apollo::dreamview::Criterion& criterion(int index) const;
  ::apollo::dreamview::Criterion* add_criterion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion >&
      criterion() const;

  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional uint32 total_frames = 1;
  bool has_total_frames() const;
  private:
  bool _internal_has_total_frames() const;
  public:
  void clear_total_frames();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_frames() const;
  void set_total_frames(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_frames() const;
  void _internal_set_total_frames(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Category)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion > criterion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_frames_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// -------------------------------------------------------------------

class Scenario_CategoryEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scenario_CategoryEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Category,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Scenario_CategoryEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Category,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Scenario_CategoryEntry_DoNotUse();
  Scenario_CategoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Scenario_CategoryEntry_DoNotUse& other);
  static const Scenario_CategoryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Scenario_CategoryEntry_DoNotUse*>(&_Scenario_CategoryEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.Scenario.CategoryEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Scenario :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Scenario) */ {
 public:
  Scenario();
  virtual ~Scenario();

  Scenario(const Scenario& from);
  Scenario(Scenario&& from) noexcept
    : Scenario() {
    *this = ::std::move(from);
  }

  inline Scenario& operator=(const Scenario& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario& operator=(Scenario&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenario& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scenario* internal_default_instance() {
    return reinterpret_cast<const Scenario*>(
               &_Scenario_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Scenario& a, Scenario& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenario* New() const final {
    return CreateMaybeMessage<Scenario>(nullptr);
  }

  Scenario* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenario>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenario& from);
  void MergeFrom(const Scenario& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Scenario";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
  };
  // map<string, .apollo.dreamview.Category> category = 1;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >&
      _internal_category() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >*
      _internal_mutable_category();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >&
      category() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >*
      mutable_category();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Scenario)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Scenario_CategoryEntry_DoNotUse,
      std::string, ::apollo::dreamview::Category,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > category_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// -------------------------------------------------------------------

class DataCollectionTable_ScenarioEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataCollectionTable_ScenarioEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Scenario,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataCollectionTable_ScenarioEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Scenario,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DataCollectionTable_ScenarioEntry_DoNotUse();
  DataCollectionTable_ScenarioEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DataCollectionTable_ScenarioEntry_DoNotUse& other);
  static const DataCollectionTable_ScenarioEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataCollectionTable_ScenarioEntry_DoNotUse*>(&_DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.DataCollectionTable.ScenarioEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class DataCollectionTable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DataCollectionTable) */ {
 public:
  DataCollectionTable();
  virtual ~DataCollectionTable();

  DataCollectionTable(const DataCollectionTable& from);
  DataCollectionTable(DataCollectionTable&& from) noexcept
    : DataCollectionTable() {
    *this = ::std::move(from);
  }

  inline DataCollectionTable& operator=(const DataCollectionTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataCollectionTable& operator=(DataCollectionTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataCollectionTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataCollectionTable* internal_default_instance() {
    return reinterpret_cast<const DataCollectionTable*>(
               &_DataCollectionTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DataCollectionTable& a, DataCollectionTable& b) {
    a.Swap(&b);
  }
  inline void Swap(DataCollectionTable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataCollectionTable* New() const final {
    return CreateMaybeMessage<DataCollectionTable>(nullptr);
  }

  DataCollectionTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataCollectionTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataCollectionTable& from);
  void MergeFrom(const DataCollectionTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataCollectionTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.DataCollectionTable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kFrameThresholdFieldNumber = 2,
  };
  // map<string, .apollo.dreamview.Scenario> scenario = 1;
  int scenario_size() const;
  private:
  int _internal_scenario_size() const;
  public:
  void clear_scenario();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >&
      _internal_scenario() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >*
      _internal_mutable_scenario();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >&
      scenario() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >*
      mutable_scenario();

  // optional uint32 frame_threshold = 2;
  bool has_frame_threshold() const;
  private:
  bool _internal_has_frame_threshold() const;
  public:
  void clear_frame_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_threshold() const;
  void set_frame_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_threshold() const;
  void _internal_set_frame_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DataCollectionTable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DataCollectionTable_ScenarioEntry_DoNotUse,
      std::string, ::apollo::dreamview::Scenario,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > scenario_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_threshold_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Criterion

// optional string field = 1;
inline bool Criterion::_internal_has_field() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Criterion::has_field() const {
  return _internal_has_field();
}
inline void Criterion::clear_field() {
  field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Criterion::field() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.field)
  return _internal_field();
}
inline void Criterion::set_field(const std::string& value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.field)
}
inline std::string* Criterion::mutable_field() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Criterion.field)
  return _internal_mutable_field();
}
inline const std::string& Criterion::_internal_field() const {
  return field_.GetNoArena();
}
inline void Criterion::_internal_set_field(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Criterion::set_field(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Criterion.field)
}
inline void Criterion::set_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Criterion.field)
}
inline void Criterion::set_field(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Criterion.field)
}
inline std::string* Criterion::_internal_mutable_field() {
  _has_bits_[0] |= 0x00000001u;
  return field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Criterion::release_field() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Criterion.field)
  if (!_internal_has_field()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return field_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Criterion::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Criterion.field)
}

// optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
inline bool Criterion::_internal_has_comparison_operator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Criterion::has_comparison_operator() const {
  return _internal_has_comparison_operator();
}
inline void Criterion::clear_comparison_operator() {
  comparison_operator_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::dreamview::ComparisonOperator Criterion::_internal_comparison_operator() const {
  return static_cast< ::apollo::dreamview::ComparisonOperator >(comparison_operator_);
}
inline ::apollo::dreamview::ComparisonOperator Criterion::comparison_operator() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.comparison_operator)
  return _internal_comparison_operator();
}
inline void Criterion::_internal_set_comparison_operator(::apollo::dreamview::ComparisonOperator value) {
  assert(::apollo::dreamview::ComparisonOperator_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  comparison_operator_ = value;
}
inline void Criterion::set_comparison_operator(::apollo::dreamview::ComparisonOperator value) {
  _internal_set_comparison_operator(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.comparison_operator)
}

// optional float value = 3;
inline bool Criterion::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Criterion::has_value() const {
  return _internal_has_value();
}
inline void Criterion::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Criterion::_internal_value() const {
  return value_;
}
inline float Criterion::value() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.value)
  return _internal_value();
}
inline void Criterion::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000008u;
  value_ = value;
}
inline void Criterion::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.value)
}

// optional string vehicle_config = 4;
inline bool Criterion::_internal_has_vehicle_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Criterion::has_vehicle_config() const {
  return _internal_has_vehicle_config();
}
inline void Criterion::clear_vehicle_config() {
  vehicle_config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Criterion::vehicle_config() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.vehicle_config)
  return _internal_vehicle_config();
}
inline void Criterion::set_vehicle_config(const std::string& value) {
  _internal_set_vehicle_config(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.vehicle_config)
}
inline std::string* Criterion::mutable_vehicle_config() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Criterion.vehicle_config)
  return _internal_mutable_vehicle_config();
}
inline const std::string& Criterion::_internal_vehicle_config() const {
  return vehicle_config_.GetNoArena();
}
inline void Criterion::_internal_set_vehicle_config(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Criterion::set_vehicle_config(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_config_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Criterion.vehicle_config)
}
inline void Criterion::set_vehicle_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  vehicle_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Criterion.vehicle_config)
}
inline void Criterion::set_vehicle_config(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Criterion.vehicle_config)
}
inline std::string* Criterion::_internal_mutable_vehicle_config() {
  _has_bits_[0] |= 0x00000002u;
  return vehicle_config_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Criterion::release_vehicle_config() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Criterion.vehicle_config)
  if (!_internal_has_vehicle_config()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vehicle_config_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Criterion::set_allocated_vehicle_config(std::string* vehicle_config) {
  if (vehicle_config != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vehicle_config_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_config);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Criterion.vehicle_config)
}

// -------------------------------------------------------------------

// Category

// optional uint32 total_frames = 1;
inline bool Category::_internal_has_total_frames() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Category::has_total_frames() const {
  return _internal_has_total_frames();
}
inline void Category::clear_total_frames() {
  total_frames_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Category::_internal_total_frames() const {
  return total_frames_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Category::total_frames() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Category.total_frames)
  return _internal_total_frames();
}
inline void Category::_internal_set_total_frames(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  total_frames_ = value;
}
inline void Category::set_total_frames(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_frames(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Category.total_frames)
}

// optional string description = 2;
inline bool Category::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Category::has_description() const {
  return _internal_has_description();
}
inline void Category::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Category::description() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Category.description)
  return _internal_description();
}
inline void Category::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Category.description)
}
inline std::string* Category::mutable_description() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Category.description)
  return _internal_mutable_description();
}
inline const std::string& Category::_internal_description() const {
  return description_.GetNoArena();
}
inline void Category::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Category::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Category.description)
}
inline void Category::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Category.description)
}
inline void Category::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Category.description)
}
inline std::string* Category::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Category::release_description() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Category.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Category.description)
}

// repeated .apollo.dreamview.Criterion criterion = 3;
inline int Category::_internal_criterion_size() const {
  return criterion_.size();
}
inline int Category::criterion_size() const {
  return _internal_criterion_size();
}
inline void Category::clear_criterion() {
  criterion_.Clear();
}
inline ::apollo::dreamview::Criterion* Category::mutable_criterion(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Category.criterion)
  return criterion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion >*
Category::mutable_criterion() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Category.criterion)
  return &criterion_;
}
inline const ::apollo::dreamview::Criterion& Category::_internal_criterion(int index) const {
  return criterion_.Get(index);
}
inline const ::apollo::dreamview::Criterion& Category::criterion(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Category.criterion)
  return _internal_criterion(index);
}
inline ::apollo::dreamview::Criterion* Category::_internal_add_criterion() {
  return criterion_.Add();
}
inline ::apollo::dreamview::Criterion* Category::add_criterion() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Category.criterion)
  return _internal_add_criterion();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::Criterion >&
Category::criterion() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Category.criterion)
  return criterion_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Scenario

// map<string, .apollo.dreamview.Category> category = 1;
inline int Scenario::_internal_category_size() const {
  return category_.size();
}
inline int Scenario::category_size() const {
  return _internal_category_size();
}
inline void Scenario::clear_category() {
  category_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >&
Scenario::_internal_category() const {
  return category_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >&
Scenario::category() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.Scenario.category)
  return _internal_category();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >*
Scenario::_internal_mutable_category() {
  return category_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Category >*
Scenario::mutable_category() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.Scenario.category)
  return _internal_mutable_category();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataCollectionTable

// map<string, .apollo.dreamview.Scenario> scenario = 1;
inline int DataCollectionTable::_internal_scenario_size() const {
  return scenario_.size();
}
inline int DataCollectionTable::scenario_size() const {
  return _internal_scenario_size();
}
inline void DataCollectionTable::clear_scenario() {
  scenario_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >&
DataCollectionTable::_internal_scenario() const {
  return scenario_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >&
DataCollectionTable::scenario() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.DataCollectionTable.scenario)
  return _internal_scenario();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >*
DataCollectionTable::_internal_mutable_scenario() {
  return scenario_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Scenario >*
DataCollectionTable::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.DataCollectionTable.scenario)
  return _internal_mutable_scenario();
}

// optional uint32 frame_threshold = 2;
inline bool DataCollectionTable::_internal_has_frame_threshold() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataCollectionTable::has_frame_threshold() const {
  return _internal_has_frame_threshold();
}
inline void DataCollectionTable::clear_frame_threshold() {
  frame_threshold_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataCollectionTable::_internal_frame_threshold() const {
  return frame_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataCollectionTable::frame_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataCollectionTable.frame_threshold)
  return _internal_frame_threshold();
}
inline void DataCollectionTable::_internal_set_frame_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  frame_threshold_ = value;
}
inline void DataCollectionTable::set_frame_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataCollectionTable.frame_threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::dreamview::ComparisonOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::ComparisonOperator>() {
  return ::apollo::dreamview::ComparisonOperator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
