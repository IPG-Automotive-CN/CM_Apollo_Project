// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_config.proto

#include "modules/dreamview/proto/hmi_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIConfig_MapsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIConfig_ModesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIConfig_VehiclesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleData_DataFile_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto;
namespace apollo {
namespace dreamview {
class HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIConfig_ModesEntry_DoNotUse> _instance;
} _HMIConfig_ModesEntry_DoNotUse_default_instance_;
class HMIConfig_MapsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIConfig_MapsEntry_DoNotUse> _instance;
} _HMIConfig_MapsEntry_DoNotUse_default_instance_;
class HMIConfig_VehiclesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIConfig_VehiclesEntry_DoNotUse> _instance;
} _HMIConfig_VehiclesEntry_DoNotUse_default_instance_;
class HMIConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HMIConfig> _instance;
} _HMIConfig_default_instance_;
class AudioCaptureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioCapture> _instance;
} _AudioCapture_default_instance_;
class VehicleData_DataFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleData_DataFile> _instance;
} _VehicleData_DataFile_default_instance_;
class VehicleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleData> _instance;
} _VehicleData_default_instance_;
}  // namespace dreamview
}  // namespace apollo
static void InitDefaultsscc_info_AudioCapture_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_AudioCapture_default_instance_;
    new (ptr) ::apollo::dreamview::AudioCapture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::AudioCapture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioCapture_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioCapture_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_HMIConfig_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIConfig_default_instance_;
    new (ptr) ::apollo::dreamview::HMIConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::HMIConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HMIConfig_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HMIConfig_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto}, {
      &scc_info_HMIConfig_ModesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
      &scc_info_HMIConfig_MapsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
      &scc_info_HMIConfig_VehiclesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_HMIConfig_MapsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIConfig_MapsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIConfig_MapsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HMIConfig_MapsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_HMIConfig_ModesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIConfig_ModesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIConfig_ModesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HMIConfig_ModesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_HMIConfig_VehiclesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIConfig_VehiclesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HMIConfig_VehiclesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HMIConfig_VehiclesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_VehicleData_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_VehicleData_default_instance_;
    new (ptr) ::apollo::dreamview::VehicleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::VehicleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleData_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VehicleData_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto}, {
      &scc_info_VehicleData_DataFile_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_VehicleData_DataFile_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_VehicleData_DataFile_default_instance_;
    new (ptr) ::apollo::dreamview::VehicleData_DataFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::VehicleData_DataFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleData_DataFile_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleData_DataFile_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, modes_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, maps_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::HMIConfig, vehicles_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::AudioCapture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::AudioCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::AudioCapture, wav_stream_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, source_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, dest_path_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dreamview::VehicleData, data_files_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse)},
  { 9, 16, sizeof(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse)},
  { 18, 25, sizeof(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse)},
  { 27, 35, sizeof(::apollo::dreamview::HMIConfig)},
  { 38, 44, sizeof(::apollo::dreamview::AudioCapture)},
  { 45, 52, sizeof(::apollo::dreamview::VehicleData_DataFile)},
  { 54, 60, sizeof(::apollo::dreamview::VehicleData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIConfig_ModesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIConfig_MapsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIConfig_VehiclesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_HMIConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_AudioCapture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_VehicleData_DataFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dreamview::_VehicleData_default_instance_),
};

const char descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/dreamview/proto/hmi_config.pro"
  "to\022\020apollo.dreamview\"\300\002\n\tHMIConfig\0225\n\005mo"
  "des\030\001 \003(\0132&.apollo.dreamview.HMIConfig.M"
  "odesEntry\0223\n\004maps\030\002 \003(\0132%.apollo.dreamvi"
  "ew.HMIConfig.MapsEntry\022;\n\010vehicles\030\003 \003(\013"
  "2).apollo.dreamview.HMIConfig.VehiclesEn"
  "try\032,\n\nModesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\032+\n\tMapsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\032/\n\rVehiclesEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\"\n\014AudioCapture\022"
  "\022\n\nwav_stream\030\001 \001(\014\"}\n\013VehicleData\022:\n\nda"
  "ta_files\030\001 \003(\0132&.apollo.dreamview.Vehicl"
  "eData.DataFile\0322\n\010DataFile\022\023\n\013source_pat"
  "h\030\001 \001(\t\022\021\n\tdest_path\030\002 \001(\t*\303\001\n\tHMIAction"
  "\022\010\n\004NONE\020\000\022\016\n\nSETUP_MODE\020\001\022\016\n\nRESET_MODE"
  "\020\002\022\023\n\017ENTER_AUTO_MODE\020\003\022\r\n\tDISENGAGE\020\004\022\017"
  "\n\013CHANGE_MODE\020\005\022\016\n\nCHANGE_MAP\020\006\022\022\n\016CHANG"
  "E_VEHICLE\020\007\022\020\n\014START_MODULE\020\010\022\017\n\013STOP_MO"
  "DULE\020\t\022\020\n\014RECORD_AUDIO\020\n"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_sccs[7] = {
  &scc_info_AudioCapture_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
  &scc_info_HMIConfig_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
  &scc_info_HMIConfig_MapsEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
  &scc_info_HMIConfig_ModesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
  &scc_info_HMIConfig_VehiclesEntry_DoNotUse_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
  &scc_info_VehicleData_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
  &scc_info_VehicleData_DataFile_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once;
static bool descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto = {
  &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto, "modules/dreamview/proto/hmi_config.proto", 744,
  &descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_once, descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_sccs, descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto, 7, file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto, file_level_service_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto), true);
namespace apollo {
namespace dreamview {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HMIAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto[0];
}
bool HMIAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

HMIConfig_ModesEntry_DoNotUse::HMIConfig_ModesEntry_DoNotUse() {}
HMIConfig_ModesEntry_DoNotUse::HMIConfig_ModesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_ModesEntry_DoNotUse::MergeFrom(const HMIConfig_ModesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_ModesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIConfig_ModesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HMIConfig_MapsEntry_DoNotUse::HMIConfig_MapsEntry_DoNotUse() {}
HMIConfig_MapsEntry_DoNotUse::HMIConfig_MapsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_MapsEntry_DoNotUse::MergeFrom(const HMIConfig_MapsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_MapsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIConfig_MapsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HMIConfig_VehiclesEntry_DoNotUse::HMIConfig_VehiclesEntry_DoNotUse() {}
HMIConfig_VehiclesEntry_DoNotUse::HMIConfig_VehiclesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HMIConfig_VehiclesEntry_DoNotUse::MergeFrom(const HMIConfig_VehiclesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig_VehiclesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HMIConfig_VehiclesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HMIConfig::InitAsDefaultInstance() {
}
class HMIConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HMIConfig>()._has_bits_);
};

HMIConfig::HMIConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.HMIConfig)
}
HMIConfig::HMIConfig(const HMIConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modes_.MergeFrom(from.modes_);
  maps_.MergeFrom(from.maps_);
  vehicles_.MergeFrom(from.vehicles_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.HMIConfig)
}

void HMIConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HMIConfig_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base);
}

HMIConfig::~HMIConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.HMIConfig)
  SharedDtor();
}

void HMIConfig::SharedDtor() {
}

void HMIConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HMIConfig& HMIConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HMIConfig_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void HMIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.HMIConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modes_.Clear();
  maps_.Clear();
  vehicles_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HMIConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> modes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&modes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> maps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&maps_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> vehicles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&vehicles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HMIConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.HMIConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> modes = 1;
  if (!this->_internal_modes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_modes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_modes().begin();
          it != this->_internal_modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIConfig_ModesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_modes().begin();
          it != this->_internal_modes().end(); ++it) {
        target = HMIConfig_ModesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> maps = 2;
  if (!this->_internal_maps().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.MapsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.MapsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_maps().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_maps().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_maps().begin();
          it != this->_internal_maps().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIConfig_MapsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_maps().begin();
          it != this->_internal_maps().end(); ++it) {
        target = HMIConfig_MapsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> vehicles = 3;
  if (!this->_internal_vehicles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.VehiclesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.VehiclesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_vehicles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_vehicles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vehicles().begin();
          it != this->_internal_vehicles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HMIConfig_VehiclesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_vehicles().begin();
          it != this->_internal_vehicles().end(); ++it) {
        target = HMIConfig_VehiclesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.HMIConfig)
  return target;
}

size_t HMIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.HMIConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> modes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_modes().begin();
      it != this->_internal_modes().end(); ++it) {
    total_size += HMIConfig_ModesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> maps = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_maps_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_maps().begin();
      it != this->_internal_maps().end(); ++it) {
    total_size += HMIConfig_MapsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> vehicles = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_vehicles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_vehicles().begin();
      it != this->_internal_vehicles().end(); ++it) {
    total_size += HMIConfig_VehiclesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.HMIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HMIConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.HMIConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.HMIConfig)
    MergeFrom(*source);
  }
}

void HMIConfig::MergeFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.HMIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modes_.MergeFrom(from.modes_);
  maps_.MergeFrom(from.maps_);
  vehicles_.MergeFrom(from.vehicles_);
}

void HMIConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIConfig::CopyFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIConfig::IsInitialized() const {
  return true;
}

void HMIConfig::InternalSwap(HMIConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modes_.Swap(&other->modes_);
  maps_.Swap(&other->maps_);
  vehicles_.Swap(&other->vehicles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HMIConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioCapture::InitAsDefaultInstance() {
}
class AudioCapture::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioCapture>()._has_bits_);
  static void set_has_wav_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AudioCapture::AudioCapture()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.AudioCapture)
}
AudioCapture::AudioCapture(const AudioCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wav_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_wav_stream()) {
    wav_stream_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wav_stream_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.AudioCapture)
}

void AudioCapture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioCapture_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base);
  wav_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioCapture::~AudioCapture() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.AudioCapture)
  SharedDtor();
}

void AudioCapture::SharedDtor() {
  wav_stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioCapture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioCapture& AudioCapture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioCapture_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AudioCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.AudioCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    wav_stream_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AudioCapture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes wav_stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_wav_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioCapture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.AudioCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes wav_stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_wav_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.AudioCapture)
  return target;
}

size_t AudioCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.AudioCapture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes wav_stream = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_wav_stream());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioCapture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.AudioCapture)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioCapture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioCapture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.AudioCapture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.AudioCapture)
    MergeFrom(*source);
  }
}

void AudioCapture::MergeFrom(const AudioCapture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.AudioCapture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wav_stream()) {
    _has_bits_[0] |= 0x00000001u;
    wav_stream_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wav_stream_);
  }
}

void AudioCapture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.AudioCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioCapture::CopyFrom(const AudioCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.AudioCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioCapture::IsInitialized() const {
  return true;
}

void AudioCapture::InternalSwap(AudioCapture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wav_stream_.Swap(&other->wav_stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioCapture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleData_DataFile::InitAsDefaultInstance() {
}
class VehicleData_DataFile::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleData_DataFile>()._has_bits_);
  static void set_has_source_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dest_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VehicleData_DataFile::VehicleData_DataFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.VehicleData.DataFile)
}
VehicleData_DataFile::VehicleData_DataFile(const VehicleData_DataFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_path()) {
    source_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_path_);
  }
  dest_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dest_path()) {
    dest_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_path_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VehicleData.DataFile)
}

void VehicleData_DataFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleData_DataFile_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base);
  source_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VehicleData_DataFile::~VehicleData_DataFile() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VehicleData.DataFile)
  SharedDtor();
}

void VehicleData_DataFile::SharedDtor() {
  source_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehicleData_DataFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleData_DataFile& VehicleData_DataFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleData_DataFile_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void VehicleData_DataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VehicleData.DataFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      source_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dest_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleData_DataFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string source_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.VehicleData.DataFile.source_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dest_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dest_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dreamview.VehicleData.DataFile.dest_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleData_DataFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VehicleData.DataFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_path().data(), static_cast<int>(this->_internal_source_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.source_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_path(), target);
  }

  // optional string dest_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dest_path().data(), static_cast<int>(this->_internal_dest_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.dest_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dest_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VehicleData.DataFile)
  return target;
}

size_t VehicleData_DataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VehicleData.DataFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string source_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_path());
    }

    // optional string dest_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dest_path());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleData_DataFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.VehicleData.DataFile)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleData_DataFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleData_DataFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.VehicleData.DataFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.VehicleData.DataFile)
    MergeFrom(*source);
  }
}

void VehicleData_DataFile::MergeFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VehicleData.DataFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dest_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_path_);
    }
  }
}

void VehicleData_DataFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData_DataFile::CopyFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData_DataFile::IsInitialized() const {
  return true;
}

void VehicleData_DataFile::InternalSwap(VehicleData_DataFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_path_.Swap(&other->source_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dest_path_.Swap(&other->dest_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleData_DataFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleData::InitAsDefaultInstance() {
}
class VehicleData::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleData>()._has_bits_);
};

VehicleData::VehicleData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.VehicleData)
}
VehicleData::VehicleData(const VehicleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_files_(from.data_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VehicleData)
}

void VehicleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleData_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base);
}

VehicleData::~VehicleData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VehicleData)
  SharedDtor();
}

void VehicleData::SharedDtor() {
}

void VehicleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleData& VehicleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleData_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void VehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_files_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VehicleData)
  return target;
}

size_t VehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VehicleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  total_size += 1UL * this->_internal_data_files_size();
  for (const auto& msg : this->data_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.VehicleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.VehicleData)
    MergeFrom(*source);
  }
}

void VehicleData::MergeFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_files_.MergeFrom(from.data_files_);
}

void VehicleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData::CopyFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData::IsInitialized() const {
  return true;
}

void VehicleData::InternalSwap(VehicleData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_files_.InternalSwap(&other->data_files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::HMIConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::AudioCapture* Arena::CreateMaybeMessage< ::apollo::dreamview::AudioCapture >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::AudioCapture >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VehicleData_DataFile* Arena::CreateMaybeMessage< ::apollo::dreamview::VehicleData_DataFile >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::VehicleData_DataFile >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dreamview::VehicleData* Arena::CreateMaybeMessage< ::apollo::dreamview::VehicleData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::VehicleData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
