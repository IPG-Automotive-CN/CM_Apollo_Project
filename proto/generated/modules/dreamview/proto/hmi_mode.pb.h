// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_mode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
namespace apollo {
namespace dreamview {
class ChannelMonitorConfig;
class ChannelMonitorConfigDefaultTypeInternal;
extern ChannelMonitorConfigDefaultTypeInternal _ChannelMonitorConfig_default_instance_;
class CyberModule;
class CyberModuleDefaultTypeInternal;
extern CyberModuleDefaultTypeInternal _CyberModule_default_instance_;
class HMIMode;
class HMIModeDefaultTypeInternal;
extern HMIModeDefaultTypeInternal _HMIMode_default_instance_;
class HMIMode_CyberModulesEntry_DoNotUse;
class HMIMode_CyberModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_CyberModulesEntry_DoNotUseDefaultTypeInternal _HMIMode_CyberModulesEntry_DoNotUse_default_instance_;
class HMIMode_ModulesEntry_DoNotUse;
class HMIMode_ModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_ModulesEntry_DoNotUseDefaultTypeInternal _HMIMode_ModulesEntry_DoNotUse_default_instance_;
class HMIMode_MonitoredComponentsEntry_DoNotUse;
class HMIMode_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal _HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_;
class Module;
class ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class MonitoredComponent;
class MonitoredComponentDefaultTypeInternal;
extern MonitoredComponentDefaultTypeInternal _MonitoredComponent_default_instance_;
class ProcessMonitorConfig;
class ProcessMonitorConfigDefaultTypeInternal;
extern ProcessMonitorConfigDefaultTypeInternal _ProcessMonitorConfig_default_instance_;
class ResourceMonitorConfig;
class ResourceMonitorConfigDefaultTypeInternal;
extern ResourceMonitorConfigDefaultTypeInternal _ResourceMonitorConfig_default_instance_;
class ResourceMonitorConfig_DiskSpace;
class ResourceMonitorConfig_DiskSpaceDefaultTypeInternal;
extern ResourceMonitorConfig_DiskSpaceDefaultTypeInternal _ResourceMonitorConfig_DiskSpace_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::ChannelMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ChannelMonitorConfig>(Arena*);
template<> ::apollo::dreamview::CyberModule* Arena::CreateMaybeMessage<::apollo::dreamview::CyberModule>(Arena*);
template<> ::apollo::dreamview::HMIMode* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode>(Arena*);
template<> ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::Module* Arena::CreateMaybeMessage<::apollo::dreamview::Module>(Arena*);
template<> ::apollo::dreamview::MonitoredComponent* Arena::CreateMaybeMessage<::apollo::dreamview::MonitoredComponent>(Arena*);
template<> ::apollo::dreamview::ProcessMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_DiskSpace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class ProcessMonitorConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ProcessMonitorConfig) */ {
 public:
  ProcessMonitorConfig();
  virtual ~ProcessMonitorConfig();

  ProcessMonitorConfig(const ProcessMonitorConfig& from);
  ProcessMonitorConfig(ProcessMonitorConfig&& from) noexcept
    : ProcessMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ProcessMonitorConfig& operator=(const ProcessMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessMonitorConfig& operator=(ProcessMonitorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessMonitorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ProcessMonitorConfig*>(
               &_ProcessMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessMonitorConfig& a, ProcessMonitorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessMonitorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessMonitorConfig* New() const final {
    return CreateMaybeMessage<ProcessMonitorConfig>(nullptr);
  }

  ProcessMonitorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessMonitorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessMonitorConfig& from);
  void MergeFrom(const ProcessMonitorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessMonitorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ProcessMonitorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandKeywordsFieldNumber = 1,
  };
  // repeated string command_keywords = 1;
  int command_keywords_size() const;
  private:
  int _internal_command_keywords_size() const;
  public:
  void clear_command_keywords();
  const std::string& command_keywords(int index) const;
  std::string* mutable_command_keywords(int index);
  void set_command_keywords(int index, const std::string& value);
  void set_command_keywords(int index, std::string&& value);
  void set_command_keywords(int index, const char* value);
  void set_command_keywords(int index, const char* value, size_t size);
  std::string* add_command_keywords();
  void add_command_keywords(const std::string& value);
  void add_command_keywords(std::string&& value);
  void add_command_keywords(const char* value);
  void add_command_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command_keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command_keywords();
  private:
  const std::string& _internal_command_keywords(int index) const;
  std::string* _internal_add_command_keywords();
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ProcessMonitorConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_keywords_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ChannelMonitorConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ChannelMonitorConfig) */ {
 public:
  ChannelMonitorConfig();
  virtual ~ChannelMonitorConfig();

  ChannelMonitorConfig(const ChannelMonitorConfig& from);
  ChannelMonitorConfig(ChannelMonitorConfig&& from) noexcept
    : ChannelMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ChannelMonitorConfig& operator=(const ChannelMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelMonitorConfig& operator=(ChannelMonitorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelMonitorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitorConfig*>(
               &_ChannelMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelMonitorConfig& a, ChannelMonitorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelMonitorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitorConfig* New() const final {
    return CreateMaybeMessage<ChannelMonitorConfig>(nullptr);
  }

  ChannelMonitorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelMonitorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelMonitorConfig& from);
  void MergeFrom(const ChannelMonitorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelMonitorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ChannelMonitorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDelayFatalFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double delay_fatal = 2 [default = 3];
  bool has_delay_fatal() const;
  private:
  bool _internal_has_delay_fatal() const;
  public:
  void clear_delay_fatal();
  double delay_fatal() const;
  void set_delay_fatal(double value);
  private:
  double _internal_delay_fatal() const;
  void _internal_set_delay_fatal(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ChannelMonitorConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double delay_fatal_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_DiskSpace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.DiskSpace) */ {
 public:
  ResourceMonitorConfig_DiskSpace();
  virtual ~ResourceMonitorConfig_DiskSpace();

  ResourceMonitorConfig_DiskSpace(const ResourceMonitorConfig_DiskSpace& from);
  ResourceMonitorConfig_DiskSpace(ResourceMonitorConfig_DiskSpace&& from) noexcept
    : ResourceMonitorConfig_DiskSpace() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_DiskSpace& operator=(const ResourceMonitorConfig_DiskSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMonitorConfig_DiskSpace& operator=(ResourceMonitorConfig_DiskSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceMonitorConfig_DiskSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceMonitorConfig_DiskSpace* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_DiskSpace*>(
               &_ResourceMonitorConfig_DiskSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResourceMonitorConfig_DiskSpace& a, ResourceMonitorConfig_DiskSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMonitorConfig_DiskSpace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceMonitorConfig_DiskSpace* New() const final {
    return CreateMaybeMessage<ResourceMonitorConfig_DiskSpace>(nullptr);
  }

  ResourceMonitorConfig_DiskSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_DiskSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceMonitorConfig_DiskSpace& from);
  void MergeFrom(const ResourceMonitorConfig_DiskSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_DiskSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ResourceMonitorConfig.DiskSpace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kInsufficientSpaceWarningFieldNumber = 2,
    kInsufficientSpaceErrorFieldNumber = 3,
  };
  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional int32 insufficient_space_warning = 2;
  bool has_insufficient_space_warning() const;
  private:
  bool _internal_has_insufficient_space_warning() const;
  public:
  void clear_insufficient_space_warning();
  ::PROTOBUF_NAMESPACE_ID::int32 insufficient_space_warning() const;
  void set_insufficient_space_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_insufficient_space_warning() const;
  void _internal_set_insufficient_space_warning(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 insufficient_space_error = 3;
  bool has_insufficient_space_error() const;
  private:
  bool _internal_has_insufficient_space_error() const;
  public:
  void clear_insufficient_space_error();
  ::PROTOBUF_NAMESPACE_ID::int32 insufficient_space_error() const;
  void set_insufficient_space_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_insufficient_space_error() const;
  void _internal_set_insufficient_space_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 insufficient_space_warning_;
  ::PROTOBUF_NAMESPACE_ID::int32 insufficient_space_error_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig) */ {
 public:
  ResourceMonitorConfig();
  virtual ~ResourceMonitorConfig();

  ResourceMonitorConfig(const ResourceMonitorConfig& from);
  ResourceMonitorConfig(ResourceMonitorConfig&& from) noexcept
    : ResourceMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig& operator=(const ResourceMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMonitorConfig& operator=(ResourceMonitorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceMonitorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig*>(
               &_ResourceMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResourceMonitorConfig& a, ResourceMonitorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMonitorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceMonitorConfig* New() const final {
    return CreateMaybeMessage<ResourceMonitorConfig>(nullptr);
  }

  ResourceMonitorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMonitorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceMonitorConfig& from);
  void MergeFrom(const ResourceMonitorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.ResourceMonitorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResourceMonitorConfig_DiskSpace DiskSpace;

  // accessors -------------------------------------------------------

  enum : int {
    kDiskSpacesFieldNumber = 1,
  };
  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
  int disk_spaces_size() const;
  private:
  int _internal_disk_spaces_size() const;
  public:
  void clear_disk_spaces();
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* mutable_disk_spaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >*
      mutable_disk_spaces();
  private:
  const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& _internal_disk_spaces(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* _internal_add_disk_spaces();
  public:
  const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& disk_spaces(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* add_disk_spaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >&
      disk_spaces() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace > disk_spaces_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class MonitoredComponent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.MonitoredComponent) */ {
 public:
  MonitoredComponent();
  virtual ~MonitoredComponent();

  MonitoredComponent(const MonitoredComponent& from);
  MonitoredComponent(MonitoredComponent&& from) noexcept
    : MonitoredComponent() {
    *this = ::std::move(from);
  }

  inline MonitoredComponent& operator=(const MonitoredComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitoredComponent& operator=(MonitoredComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MonitoredComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoredComponent* internal_default_instance() {
    return reinterpret_cast<const MonitoredComponent*>(
               &_MonitoredComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MonitoredComponent& a, MonitoredComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitoredComponent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonitoredComponent* New() const final {
    return CreateMaybeMessage<MonitoredComponent>(nullptr);
  }

  MonitoredComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonitoredComponent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonitoredComponent& from);
  void MergeFrom(const MonitoredComponent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoredComponent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.MonitoredComponent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 1,
    kChannelFieldNumber = 2,
    kResourceFieldNumber = 3,
    kRequiredForSafetyFieldNumber = 4,
  };
  // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  const ::apollo::dreamview::ProcessMonitorConfig& process() const;
  ::apollo::dreamview::ProcessMonitorConfig* release_process();
  ::apollo::dreamview::ProcessMonitorConfig* mutable_process();
  void set_allocated_process(::apollo::dreamview::ProcessMonitorConfig* process);
  private:
  const ::apollo::dreamview::ProcessMonitorConfig& _internal_process() const;
  ::apollo::dreamview::ProcessMonitorConfig* _internal_mutable_process();
  public:

  // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::apollo::dreamview::ChannelMonitorConfig& channel() const;
  ::apollo::dreamview::ChannelMonitorConfig* release_channel();
  ::apollo::dreamview::ChannelMonitorConfig* mutable_channel();
  void set_allocated_channel(::apollo::dreamview::ChannelMonitorConfig* channel);
  private:
  const ::apollo::dreamview::ChannelMonitorConfig& _internal_channel() const;
  ::apollo::dreamview::ChannelMonitorConfig* _internal_mutable_channel();
  public:

  // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::apollo::dreamview::ResourceMonitorConfig& resource() const;
  ::apollo::dreamview::ResourceMonitorConfig* release_resource();
  ::apollo::dreamview::ResourceMonitorConfig* mutable_resource();
  void set_allocated_resource(::apollo::dreamview::ResourceMonitorConfig* resource);
  private:
  const ::apollo::dreamview::ResourceMonitorConfig& _internal_resource() const;
  ::apollo::dreamview::ResourceMonitorConfig* _internal_mutable_resource();
  public:

  // optional bool required_for_safety = 4 [default = true];
  bool has_required_for_safety() const;
  private:
  bool _internal_has_required_for_safety() const;
  public:
  void clear_required_for_safety();
  bool required_for_safety() const;
  void set_required_for_safety(bool value);
  private:
  bool _internal_required_for_safety() const;
  void _internal_set_required_for_safety(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.MonitoredComponent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::dreamview::ProcessMonitorConfig* process_;
  ::apollo::dreamview::ChannelMonitorConfig* channel_;
  ::apollo::dreamview::ResourceMonitorConfig* resource_;
  bool required_for_safety_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class Module :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Module) */ {
 public:
  Module();
  virtual ~Module();

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Module& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Module* New() const final {
    return CreateMaybeMessage<Module>(nullptr);
  }

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Module& from);
  void MergeFrom(const Module& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.Module";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartCommandFieldNumber = 1,
    kStopCommandFieldNumber = 2,
    kProcessMonitorConfigFieldNumber = 3,
    kRequiredForSafetyFieldNumber = 4,
  };
  // optional string start_command = 1;
  bool has_start_command() const;
  private:
  bool _internal_has_start_command() const;
  public:
  void clear_start_command();
  const std::string& start_command() const;
  void set_start_command(const std::string& value);
  void set_start_command(std::string&& value);
  void set_start_command(const char* value);
  void set_start_command(const char* value, size_t size);
  std::string* mutable_start_command();
  std::string* release_start_command();
  void set_allocated_start_command(std::string* start_command);
  private:
  const std::string& _internal_start_command() const;
  void _internal_set_start_command(const std::string& value);
  std::string* _internal_mutable_start_command();
  public:

  // optional string stop_command = 2;
  bool has_stop_command() const;
  private:
  bool _internal_has_stop_command() const;
  public:
  void clear_stop_command();
  const std::string& stop_command() const;
  void set_stop_command(const std::string& value);
  void set_stop_command(std::string&& value);
  void set_stop_command(const char* value);
  void set_stop_command(const char* value, size_t size);
  std::string* mutable_stop_command();
  std::string* release_stop_command();
  void set_allocated_stop_command(std::string* stop_command);
  private:
  const std::string& _internal_stop_command() const;
  void _internal_set_stop_command(const std::string& value);
  std::string* _internal_mutable_stop_command();
  public:

  // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
  bool has_process_monitor_config() const;
  private:
  bool _internal_has_process_monitor_config() const;
  public:
  void clear_process_monitor_config();
  const ::apollo::dreamview::ProcessMonitorConfig& process_monitor_config() const;
  ::apollo::dreamview::ProcessMonitorConfig* release_process_monitor_config();
  ::apollo::dreamview::ProcessMonitorConfig* mutable_process_monitor_config();
  void set_allocated_process_monitor_config(::apollo::dreamview::ProcessMonitorConfig* process_monitor_config);
  private:
  const ::apollo::dreamview::ProcessMonitorConfig& _internal_process_monitor_config() const;
  ::apollo::dreamview::ProcessMonitorConfig* _internal_mutable_process_monitor_config();
  public:

  // optional bool required_for_safety = 4 [default = true];
  bool has_required_for_safety() const;
  private:
  bool _internal_has_required_for_safety() const;
  public:
  void clear_required_for_safety();
  bool required_for_safety() const;
  void set_required_for_safety(bool value);
  private:
  bool _internal_required_for_safety() const;
  void _internal_set_required_for_safety(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Module)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_command_;
  ::apollo::dreamview::ProcessMonitorConfig* process_monitor_config_;
  bool required_for_safety_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class CyberModule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.CyberModule) */ {
 public:
  CyberModule();
  virtual ~CyberModule();

  CyberModule(const CyberModule& from);
  CyberModule(CyberModule&& from) noexcept
    : CyberModule() {
    *this = ::std::move(from);
  }

  inline CyberModule& operator=(const CyberModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CyberModule& operator=(CyberModule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CyberModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CyberModule* internal_default_instance() {
    return reinterpret_cast<const CyberModule*>(
               &_CyberModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CyberModule& a, CyberModule& b) {
    a.Swap(&b);
  }
  inline void Swap(CyberModule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CyberModule* New() const final {
    return CreateMaybeMessage<CyberModule>(nullptr);
  }

  CyberModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CyberModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CyberModule& from);
  void MergeFrom(const CyberModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CyberModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.CyberModule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDagFilesFieldNumber = 1,
    kProcessGroupFieldNumber = 3,
    kRequiredForSafetyFieldNumber = 2,
  };
  // repeated string dag_files = 1;
  int dag_files_size() const;
  private:
  int _internal_dag_files_size() const;
  public:
  void clear_dag_files();
  const std::string& dag_files(int index) const;
  std::string* mutable_dag_files(int index);
  void set_dag_files(int index, const std::string& value);
  void set_dag_files(int index, std::string&& value);
  void set_dag_files(int index, const char* value);
  void set_dag_files(int index, const char* value, size_t size);
  std::string* add_dag_files();
  void add_dag_files(const std::string& value);
  void add_dag_files(std::string&& value);
  void add_dag_files(const char* value);
  void add_dag_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dag_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dag_files();
  private:
  const std::string& _internal_dag_files(int index) const;
  std::string* _internal_add_dag_files();
  public:

  // optional string process_group = 3;
  bool has_process_group() const;
  private:
  bool _internal_has_process_group() const;
  public:
  void clear_process_group();
  const std::string& process_group() const;
  void set_process_group(const std::string& value);
  void set_process_group(std::string&& value);
  void set_process_group(const char* value);
  void set_process_group(const char* value, size_t size);
  std::string* mutable_process_group();
  std::string* release_process_group();
  void set_allocated_process_group(std::string* process_group);
  private:
  const std::string& _internal_process_group() const;
  void _internal_set_process_group(const std::string& value);
  std::string* _internal_mutable_process_group();
  public:

  // optional bool required_for_safety = 2 [default = true];
  bool has_required_for_safety() const;
  private:
  bool _internal_has_required_for_safety() const;
  public:
  void clear_required_for_safety();
  bool required_for_safety() const;
  void set_required_for_safety(bool value);
  private:
  bool _internal_required_for_safety() const;
  void _internal_set_required_for_safety(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.CyberModule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dag_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_group_;
  bool required_for_safety_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// -------------------------------------------------------------------

class HMIMode_CyberModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_CyberModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::CyberModule,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_CyberModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::CyberModule,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIMode_CyberModulesEntry_DoNotUse();
  HMIMode_CyberModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIMode_CyberModulesEntry_DoNotUse& other);
  static const HMIMode_CyberModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_CyberModulesEntry_DoNotUse*>(&_HMIMode_CyberModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIMode.CyberModulesEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class HMIMode_ModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_ModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Module,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_ModulesEntry_DoNotUse, 
    std::string, ::apollo::dreamview::Module,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIMode_ModulesEntry_DoNotUse();
  HMIMode_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIMode_ModulesEntry_DoNotUse& other);
  static const HMIMode_ModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_ModulesEntry_DoNotUse*>(&_HMIMode_ModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIMode.ModulesEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class HMIMode_MonitoredComponentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_MonitoredComponentsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::MonitoredComponent,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIMode_MonitoredComponentsEntry_DoNotUse, 
    std::string, ::apollo::dreamview::MonitoredComponent,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIMode_MonitoredComponentsEntry_DoNotUse();
  HMIMode_MonitoredComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIMode_MonitoredComponentsEntry_DoNotUse& other);
  static const HMIMode_MonitoredComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_MonitoredComponentsEntry_DoNotUse*>(&_HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIMode.MonitoredComponentsEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class HMIMode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIMode) */ {
 public:
  HMIMode();
  virtual ~HMIMode();

  HMIMode(const HMIMode& from);
  HMIMode(HMIMode&& from) noexcept
    : HMIMode() {
    *this = ::std::move(from);
  }

  inline HMIMode& operator=(const HMIMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIMode& operator=(HMIMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMIMode* internal_default_instance() {
    return reinterpret_cast<const HMIMode*>(
               &_HMIMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HMIMode& a, HMIMode& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIMode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIMode* New() const final {
    return CreateMaybeMessage<HMIMode>(nullptr);
  }

  HMIMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIMode& from);
  void MergeFrom(const HMIMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.HMIMode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCyberModulesFieldNumber = 1,
    kModulesFieldNumber = 2,
    kMonitoredComponentsFieldNumber = 3,
  };
  // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
  int cyber_modules_size() const;
  private:
  int _internal_cyber_modules_size() const;
  public:
  void clear_cyber_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >&
      _internal_cyber_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >*
      _internal_mutable_cyber_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >&
      cyber_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >*
      mutable_cyber_modules();

  // map<string, .apollo.dreamview.Module> modules = 2;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >&
      _internal_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >*
      _internal_mutable_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >&
      modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >*
      mutable_modules();

  // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
  int monitored_components_size() const;
  private:
  int _internal_monitored_components_size() const;
  public:
  void clear_monitored_components();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >&
      _internal_monitored_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >*
      _internal_mutable_monitored_components();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >&
      monitored_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >*
      mutable_monitored_components();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIMode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HMIMode_CyberModulesEntry_DoNotUse,
      std::string, ::apollo::dreamview::CyberModule,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > cyber_modules_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HMIMode_ModulesEntry_DoNotUse,
      std::string, ::apollo::dreamview::Module,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modules_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HMIMode_MonitoredComponentsEntry_DoNotUse,
      std::string, ::apollo::dreamview::MonitoredComponent,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > monitored_components_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessMonitorConfig

// repeated string command_keywords = 1;
inline int ProcessMonitorConfig::_internal_command_keywords_size() const {
  return command_keywords_.size();
}
inline int ProcessMonitorConfig::command_keywords_size() const {
  return _internal_command_keywords_size();
}
inline void ProcessMonitorConfig::clear_command_keywords() {
  command_keywords_.Clear();
}
inline std::string* ProcessMonitorConfig::add_command_keywords() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return _internal_add_command_keywords();
}
inline const std::string& ProcessMonitorConfig::_internal_command_keywords(int index) const {
  return command_keywords_.Get(index);
}
inline const std::string& ProcessMonitorConfig::command_keywords(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return _internal_command_keywords(index);
}
inline std::string* ProcessMonitorConfig::mutable_command_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return command_keywords_.Mutable(index);
}
inline void ProcessMonitorConfig::set_command_keywords(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  command_keywords_.Mutable(index)->assign(value);
}
inline void ProcessMonitorConfig::set_command_keywords(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  command_keywords_.Mutable(index)->assign(std::move(value));
}
inline void ProcessMonitorConfig::set_command_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::set_command_keywords(int index, const char* value, size_t size) {
  command_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline std::string* ProcessMonitorConfig::_internal_add_command_keywords() {
  return command_keywords_.Add();
}
inline void ProcessMonitorConfig::add_command_keywords(const std::string& value) {
  command_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::add_command_keywords(std::string&& value) {
  command_keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::add_command_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::add_command_keywords(const char* value, size_t size) {
  command_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessMonitorConfig::command_keywords() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return command_keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessMonitorConfig::mutable_command_keywords() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return &command_keywords_;
}

// -------------------------------------------------------------------

// ChannelMonitorConfig

// optional string name = 1;
inline bool ChannelMonitorConfig::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelMonitorConfig::has_name() const {
  return _internal_has_name();
}
inline void ChannelMonitorConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelMonitorConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.name)
  return _internal_name();
}
inline void ChannelMonitorConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.name)
}
inline std::string* ChannelMonitorConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelMonitorConfig.name)
  return _internal_mutable_name();
}
inline const std::string& ChannelMonitorConfig::_internal_name() const {
  return name_.GetNoArena();
}
inline void ChannelMonitorConfig::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelMonitorConfig::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ChannelMonitorConfig.name)
}
inline void ChannelMonitorConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelMonitorConfig.name)
}
inline void ChannelMonitorConfig::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelMonitorConfig.name)
}
inline std::string* ChannelMonitorConfig::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelMonitorConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ChannelMonitorConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMonitorConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ChannelMonitorConfig.name)
}

// optional double delay_fatal = 2 [default = 3];
inline bool ChannelMonitorConfig::_internal_has_delay_fatal() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelMonitorConfig::has_delay_fatal() const {
  return _internal_has_delay_fatal();
}
inline void ChannelMonitorConfig::clear_delay_fatal() {
  delay_fatal_ = 3;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ChannelMonitorConfig::_internal_delay_fatal() const {
  return delay_fatal_;
}
inline double ChannelMonitorConfig::delay_fatal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.delay_fatal)
  return _internal_delay_fatal();
}
inline void ChannelMonitorConfig::_internal_set_delay_fatal(double value) {
  _has_bits_[0] |= 0x00000002u;
  delay_fatal_ = value;
}
inline void ChannelMonitorConfig::set_delay_fatal(double value) {
  _internal_set_delay_fatal(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.delay_fatal)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_DiskSpace

// optional string path = 1;
inline bool ResourceMonitorConfig_DiskSpace::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskSpace::has_path() const {
  return _internal_has_path();
}
inline void ResourceMonitorConfig_DiskSpace::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceMonitorConfig_DiskSpace::path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  return _internal_path();
}
inline void ResourceMonitorConfig_DiskSpace::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
inline std::string* ResourceMonitorConfig_DiskSpace::mutable_path() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  return _internal_mutable_path();
}
inline const std::string& ResourceMonitorConfig_DiskSpace::_internal_path() const {
  return path_.GetNoArena();
}
inline void ResourceMonitorConfig_DiskSpace::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResourceMonitorConfig_DiskSpace::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
inline void ResourceMonitorConfig_DiskSpace::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
inline void ResourceMonitorConfig_DiskSpace::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
inline std::string* ResourceMonitorConfig_DiskSpace::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceMonitorConfig_DiskSpace::release_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceMonitorConfig_DiskSpace::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}

// optional int32 insufficient_space_warning = 2;
inline bool ResourceMonitorConfig_DiskSpace::_internal_has_insufficient_space_warning() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskSpace::has_insufficient_space_warning() const {
  return _internal_has_insufficient_space_warning();
}
inline void ResourceMonitorConfig_DiskSpace::clear_insufficient_space_warning() {
  insufficient_space_warning_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourceMonitorConfig_DiskSpace::_internal_insufficient_space_warning() const {
  return insufficient_space_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourceMonitorConfig_DiskSpace::insufficient_space_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_warning)
  return _internal_insufficient_space_warning();
}
inline void ResourceMonitorConfig_DiskSpace::_internal_set_insufficient_space_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  insufficient_space_warning_ = value;
}
inline void ResourceMonitorConfig_DiskSpace::set_insufficient_space_warning(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_insufficient_space_warning(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_warning)
}

// optional int32 insufficient_space_error = 3;
inline bool ResourceMonitorConfig_DiskSpace::_internal_has_insufficient_space_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourceMonitorConfig_DiskSpace::has_insufficient_space_error() const {
  return _internal_has_insufficient_space_error();
}
inline void ResourceMonitorConfig_DiskSpace::clear_insufficient_space_error() {
  insufficient_space_error_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourceMonitorConfig_DiskSpace::_internal_insufficient_space_error() const {
  return insufficient_space_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourceMonitorConfig_DiskSpace::insufficient_space_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_error)
  return _internal_insufficient_space_error();
}
inline void ResourceMonitorConfig_DiskSpace::_internal_set_insufficient_space_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  insufficient_space_error_ = value;
}
inline void ResourceMonitorConfig_DiskSpace::set_insufficient_space_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_insufficient_space_error(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_error)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig

// repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
inline int ResourceMonitorConfig::_internal_disk_spaces_size() const {
  return disk_spaces_.size();
}
inline int ResourceMonitorConfig::disk_spaces_size() const {
  return _internal_disk_spaces_size();
}
inline void ResourceMonitorConfig::clear_disk_spaces() {
  disk_spaces_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* ResourceMonitorConfig::mutable_disk_spaces(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return disk_spaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >*
ResourceMonitorConfig::mutable_disk_spaces() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return &disk_spaces_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& ResourceMonitorConfig::_internal_disk_spaces(int index) const {
  return disk_spaces_.Get(index);
}
inline const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& ResourceMonitorConfig::disk_spaces(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return _internal_disk_spaces(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* ResourceMonitorConfig::_internal_add_disk_spaces() {
  return disk_spaces_.Add();
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* ResourceMonitorConfig::add_disk_spaces() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return _internal_add_disk_spaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >&
ResourceMonitorConfig::disk_spaces() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return disk_spaces_;
}

// -------------------------------------------------------------------

// MonitoredComponent

// optional .apollo.dreamview.ProcessMonitorConfig process = 1;
inline bool MonitoredComponent::_internal_has_process() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || process_ != nullptr);
  return value;
}
inline bool MonitoredComponent::has_process() const {
  return _internal_has_process();
}
inline void MonitoredComponent::clear_process() {
  if (process_ != nullptr) process_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::dreamview::ProcessMonitorConfig& MonitoredComponent::_internal_process() const {
  const ::apollo::dreamview::ProcessMonitorConfig* p = process_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::ProcessMonitorConfig*>(
      &::apollo::dreamview::_ProcessMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ProcessMonitorConfig& MonitoredComponent::process() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.process)
  return _internal_process();
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::release_process() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.process)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::dreamview::ProcessMonitorConfig* temp = process_;
  process_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::_internal_mutable_process() {
  _has_bits_[0] |= 0x00000001u;
  if (process_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(GetArenaNoVirtual());
    process_ = p;
  }
  return process_;
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::mutable_process() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.process)
  return _internal_mutable_process();
}
inline void MonitoredComponent::set_allocated_process(::apollo::dreamview::ProcessMonitorConfig* process) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete process_;
  }
  if (process) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.process)
}

// optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
inline bool MonitoredComponent::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || channel_ != nullptr);
  return value;
}
inline bool MonitoredComponent::has_channel() const {
  return _internal_has_channel();
}
inline void MonitoredComponent::clear_channel() {
  if (channel_ != nullptr) channel_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::dreamview::ChannelMonitorConfig& MonitoredComponent::_internal_channel() const {
  const ::apollo::dreamview::ChannelMonitorConfig* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::ChannelMonitorConfig*>(
      &::apollo::dreamview::_ChannelMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ChannelMonitorConfig& MonitoredComponent::channel() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.channel)
  return _internal_channel();
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::release_channel() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.channel)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::dreamview::ChannelMonitorConfig* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::_internal_mutable_channel() {
  _has_bits_[0] |= 0x00000002u;
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ChannelMonitorConfig>(GetArenaNoVirtual());
    channel_ = p;
  }
  return channel_;
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.channel)
  return _internal_mutable_channel();
}
inline void MonitoredComponent::set_allocated_channel(::apollo::dreamview::ChannelMonitorConfig* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.channel)
}

// optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
inline bool MonitoredComponent::_internal_has_resource() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || resource_ != nullptr);
  return value;
}
inline bool MonitoredComponent::has_resource() const {
  return _internal_has_resource();
}
inline void MonitoredComponent::clear_resource() {
  if (resource_ != nullptr) resource_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::dreamview::ResourceMonitorConfig& MonitoredComponent::_internal_resource() const {
  const ::apollo::dreamview::ResourceMonitorConfig* p = resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::ResourceMonitorConfig*>(
      &::apollo::dreamview::_ResourceMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ResourceMonitorConfig& MonitoredComponent::resource() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.resource)
  return _internal_resource();
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::release_resource() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.resource)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::ResourceMonitorConfig* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::_internal_mutable_resource() {
  _has_bits_[0] |= 0x00000004u;
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig>(GetArenaNoVirtual());
    resource_ = p;
  }
  return resource_;
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.resource)
  return _internal_mutable_resource();
}
inline void MonitoredComponent::set_allocated_resource(::apollo::dreamview::ResourceMonitorConfig* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.resource)
}

// optional bool required_for_safety = 4 [default = true];
inline bool MonitoredComponent::_internal_has_required_for_safety() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MonitoredComponent::has_required_for_safety() const {
  return _internal_has_required_for_safety();
}
inline void MonitoredComponent::clear_required_for_safety() {
  required_for_safety_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MonitoredComponent::_internal_required_for_safety() const {
  return required_for_safety_;
}
inline bool MonitoredComponent::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.required_for_safety)
  return _internal_required_for_safety();
}
inline void MonitoredComponent::_internal_set_required_for_safety(bool value) {
  _has_bits_[0] |= 0x00000008u;
  required_for_safety_ = value;
}
inline void MonitoredComponent::set_required_for_safety(bool value) {
  _internal_set_required_for_safety(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.MonitoredComponent.required_for_safety)
}

// -------------------------------------------------------------------

// Module

// optional string start_command = 1;
inline bool Module::_internal_has_start_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Module::has_start_command() const {
  return _internal_has_start_command();
}
inline void Module::clear_start_command() {
  start_command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Module::start_command() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.start_command)
  return _internal_start_command();
}
inline void Module::set_start_command(const std::string& value) {
  _internal_set_start_command(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.start_command)
}
inline std::string* Module::mutable_start_command() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.start_command)
  return _internal_mutable_start_command();
}
inline const std::string& Module::_internal_start_command() const {
  return start_command_.GetNoArena();
}
inline void Module::_internal_set_start_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Module::set_start_command(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  start_command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Module.start_command)
}
inline void Module::set_start_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  start_command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Module.start_command)
}
inline void Module::set_start_command(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  start_command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Module.start_command)
}
inline std::string* Module::_internal_mutable_start_command() {
  _has_bits_[0] |= 0x00000001u;
  return start_command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Module::release_start_command() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.start_command)
  if (!_internal_has_start_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return start_command_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Module::set_allocated_start_command(std::string* start_command) {
  if (start_command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_command);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.start_command)
}

// optional string stop_command = 2;
inline bool Module::_internal_has_stop_command() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Module::has_stop_command() const {
  return _internal_has_stop_command();
}
inline void Module::clear_stop_command() {
  stop_command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Module::stop_command() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.stop_command)
  return _internal_stop_command();
}
inline void Module::set_stop_command(const std::string& value) {
  _internal_set_stop_command(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.stop_command)
}
inline std::string* Module::mutable_stop_command() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.stop_command)
  return _internal_mutable_stop_command();
}
inline const std::string& Module::_internal_stop_command() const {
  return stop_command_.GetNoArena();
}
inline void Module::_internal_set_stop_command(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  stop_command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Module::set_stop_command(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  stop_command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Module.stop_command)
}
inline void Module::set_stop_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  stop_command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Module.stop_command)
}
inline void Module::set_stop_command(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  stop_command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Module.stop_command)
}
inline std::string* Module::_internal_mutable_stop_command() {
  _has_bits_[0] |= 0x00000002u;
  return stop_command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Module::release_stop_command() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.stop_command)
  if (!_internal_has_stop_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return stop_command_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Module::set_allocated_stop_command(std::string* stop_command) {
  if (stop_command != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stop_command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_command);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.stop_command)
}

// optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
inline bool Module::_internal_has_process_monitor_config() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || process_monitor_config_ != nullptr);
  return value;
}
inline bool Module::has_process_monitor_config() const {
  return _internal_has_process_monitor_config();
}
inline void Module::clear_process_monitor_config() {
  if (process_monitor_config_ != nullptr) process_monitor_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::dreamview::ProcessMonitorConfig& Module::_internal_process_monitor_config() const {
  const ::apollo::dreamview::ProcessMonitorConfig* p = process_monitor_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::dreamview::ProcessMonitorConfig*>(
      &::apollo::dreamview::_ProcessMonitorConfig_default_instance_);
}
inline const ::apollo::dreamview::ProcessMonitorConfig& Module::process_monitor_config() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.process_monitor_config)
  return _internal_process_monitor_config();
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::release_process_monitor_config() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.process_monitor_config)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::dreamview::ProcessMonitorConfig* temp = process_monitor_config_;
  process_monitor_config_ = nullptr;
  return temp;
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::_internal_mutable_process_monitor_config() {
  _has_bits_[0] |= 0x00000004u;
  if (process_monitor_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(GetArenaNoVirtual());
    process_monitor_config_ = p;
  }
  return process_monitor_config_;
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::mutable_process_monitor_config() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.process_monitor_config)
  return _internal_mutable_process_monitor_config();
}
inline void Module::set_allocated_process_monitor_config(::apollo::dreamview::ProcessMonitorConfig* process_monitor_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete process_monitor_config_;
  }
  if (process_monitor_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      process_monitor_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_monitor_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  process_monitor_config_ = process_monitor_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.process_monitor_config)
}

// optional bool required_for_safety = 4 [default = true];
inline bool Module::_internal_has_required_for_safety() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Module::has_required_for_safety() const {
  return _internal_has_required_for_safety();
}
inline void Module::clear_required_for_safety() {
  required_for_safety_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Module::_internal_required_for_safety() const {
  return required_for_safety_;
}
inline bool Module::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.required_for_safety)
  return _internal_required_for_safety();
}
inline void Module::_internal_set_required_for_safety(bool value) {
  _has_bits_[0] |= 0x00000008u;
  required_for_safety_ = value;
}
inline void Module::set_required_for_safety(bool value) {
  _internal_set_required_for_safety(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.required_for_safety)
}

// -------------------------------------------------------------------

// CyberModule

// repeated string dag_files = 1;
inline int CyberModule::_internal_dag_files_size() const {
  return dag_files_.size();
}
inline int CyberModule::dag_files_size() const {
  return _internal_dag_files_size();
}
inline void CyberModule::clear_dag_files() {
  dag_files_.Clear();
}
inline std::string* CyberModule::add_dag_files() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.CyberModule.dag_files)
  return _internal_add_dag_files();
}
inline const std::string& CyberModule::_internal_dag_files(int index) const {
  return dag_files_.Get(index);
}
inline const std::string& CyberModule::dag_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.dag_files)
  return _internal_dag_files(index);
}
inline std::string* CyberModule::mutable_dag_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CyberModule.dag_files)
  return dag_files_.Mutable(index);
}
inline void CyberModule::set_dag_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.dag_files)
  dag_files_.Mutable(index)->assign(value);
}
inline void CyberModule::set_dag_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.dag_files)
  dag_files_.Mutable(index)->assign(std::move(value));
}
inline void CyberModule::set_dag_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dag_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::set_dag_files(int index, const char* value, size_t size) {
  dag_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.CyberModule.dag_files)
}
inline std::string* CyberModule::_internal_add_dag_files() {
  return dag_files_.Add();
}
inline void CyberModule::add_dag_files(const std::string& value) {
  dag_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::add_dag_files(std::string&& value) {
  dag_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::add_dag_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dag_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::add_dag_files(const char* value, size_t size) {
  dag_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.CyberModule.dag_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CyberModule::dag_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CyberModule.dag_files)
  return dag_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CyberModule::mutable_dag_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CyberModule.dag_files)
  return &dag_files_;
}

// optional bool required_for_safety = 2 [default = true];
inline bool CyberModule::_internal_has_required_for_safety() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CyberModule::has_required_for_safety() const {
  return _internal_has_required_for_safety();
}
inline void CyberModule::clear_required_for_safety() {
  required_for_safety_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CyberModule::_internal_required_for_safety() const {
  return required_for_safety_;
}
inline bool CyberModule::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.required_for_safety)
  return _internal_required_for_safety();
}
inline void CyberModule::_internal_set_required_for_safety(bool value) {
  _has_bits_[0] |= 0x00000002u;
  required_for_safety_ = value;
}
inline void CyberModule::set_required_for_safety(bool value) {
  _internal_set_required_for_safety(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.required_for_safety)
}

// optional string process_group = 3;
inline bool CyberModule::_internal_has_process_group() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CyberModule::has_process_group() const {
  return _internal_has_process_group();
}
inline void CyberModule::clear_process_group() {
  process_group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CyberModule::process_group() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.process_group)
  return _internal_process_group();
}
inline void CyberModule::set_process_group(const std::string& value) {
  _internal_set_process_group(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.process_group)
}
inline std::string* CyberModule::mutable_process_group() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CyberModule.process_group)
  return _internal_mutable_process_group();
}
inline const std::string& CyberModule::_internal_process_group() const {
  return process_group_.GetNoArena();
}
inline void CyberModule::_internal_set_process_group(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  process_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CyberModule::set_process_group(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  process_group_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.CyberModule.process_group)
}
inline void CyberModule::set_process_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  process_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.CyberModule.process_group)
}
inline void CyberModule::set_process_group(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  process_group_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.CyberModule.process_group)
}
inline std::string* CyberModule::_internal_mutable_process_group() {
  _has_bits_[0] |= 0x00000001u;
  return process_group_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CyberModule::release_process_group() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.CyberModule.process_group)
  if (!_internal_has_process_group()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return process_group_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CyberModule::set_allocated_process_group(std::string* process_group) {
  if (process_group != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  process_group_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_group);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.CyberModule.process_group)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HMIMode

// map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
inline int HMIMode::_internal_cyber_modules_size() const {
  return cyber_modules_.size();
}
inline int HMIMode::cyber_modules_size() const {
  return _internal_cyber_modules_size();
}
inline void HMIMode::clear_cyber_modules() {
  cyber_modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >&
HMIMode::_internal_cyber_modules() const {
  return cyber_modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >&
HMIMode::cyber_modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.cyber_modules)
  return _internal_cyber_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >*
HMIMode::_internal_mutable_cyber_modules() {
  return cyber_modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::CyberModule >*
HMIMode::mutable_cyber_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.cyber_modules)
  return _internal_mutable_cyber_modules();
}

// map<string, .apollo.dreamview.Module> modules = 2;
inline int HMIMode::_internal_modules_size() const {
  return modules_.size();
}
inline int HMIMode::modules_size() const {
  return _internal_modules_size();
}
inline void HMIMode::clear_modules() {
  modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >&
HMIMode::_internal_modules() const {
  return modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >&
HMIMode::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.modules)
  return _internal_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >*
HMIMode::_internal_mutable_modules() {
  return modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::Module >*
HMIMode::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.modules)
  return _internal_mutable_modules();
}

// map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
inline int HMIMode::_internal_monitored_components_size() const {
  return monitored_components_.size();
}
inline int HMIMode::monitored_components_size() const {
  return _internal_monitored_components_size();
}
inline void HMIMode::clear_monitored_components() {
  monitored_components_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >&
HMIMode::_internal_monitored_components() const {
  return monitored_components_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >&
HMIMode::monitored_components() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.monitored_components)
  return _internal_monitored_components();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >*
HMIMode::_internal_mutable_monitored_components() {
  return monitored_components_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::dreamview::MonitoredComponent >*
HMIMode::mutable_monitored_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.monitored_components)
  return _internal_mutable_monitored_components();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
