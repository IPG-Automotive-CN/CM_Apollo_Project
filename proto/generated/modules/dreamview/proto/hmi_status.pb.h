// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/monitor/proto/system_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto;
namespace apollo {
namespace dreamview {
class HMIStatus;
class HMIStatusDefaultTypeInternal;
extern HMIStatusDefaultTypeInternal _HMIStatus_default_instance_;
class HMIStatus_ModulesEntry_DoNotUse;
class HMIStatus_ModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIStatus_ModulesEntry_DoNotUseDefaultTypeInternal _HMIStatus_ModulesEntry_DoNotUse_default_instance_;
class HMIStatus_MonitoredComponentsEntry_DoNotUse;
class HMIStatus_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal;
extern HMIStatus_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal _HMIStatus_MonitoredComponentsEntry_DoNotUse_default_instance_;
}  // namespace dreamview
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::dreamview::HMIStatus* Arena::CreateMaybeMessage<::apollo::dreamview::HMIStatus>(Arena*);
template<> ::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace dreamview {

// ===================================================================

class HMIStatus_ModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIStatus_ModulesEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIStatus_ModulesEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  HMIStatus_ModulesEntry_DoNotUse();
  HMIStatus_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIStatus_ModulesEntry_DoNotUse& other);
  static const HMIStatus_ModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIStatus_ModulesEntry_DoNotUse*>(&_HMIStatus_ModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIStatus.ModulesEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class HMIStatus_MonitoredComponentsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIStatus_MonitoredComponentsEntry_DoNotUse, 
    std::string, ::apollo::monitor::ComponentStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HMIStatus_MonitoredComponentsEntry_DoNotUse, 
    std::string, ::apollo::monitor::ComponentStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIStatus_MonitoredComponentsEntry_DoNotUse();
  HMIStatus_MonitoredComponentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HMIStatus_MonitoredComponentsEntry_DoNotUse& other);
  static const HMIStatus_MonitoredComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIStatus_MonitoredComponentsEntry_DoNotUse*>(&_HMIStatus_MonitoredComponentsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.dreamview.HMIStatus.MonitoredComponentsEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class HMIStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIStatus) */ {
 public:
  HMIStatus();
  virtual ~HMIStatus();

  HMIStatus(const HMIStatus& from);
  HMIStatus(HMIStatus&& from) noexcept
    : HMIStatus() {
    *this = ::std::move(from);
  }

  inline HMIStatus& operator=(const HMIStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline HMIStatus& operator=(HMIStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HMIStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMIStatus* internal_default_instance() {
    return reinterpret_cast<const HMIStatus*>(
               &_HMIStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HMIStatus& a, HMIStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(HMIStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HMIStatus* New() const final {
    return CreateMaybeMessage<HMIStatus>(nullptr);
  }

  HMIStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HMIStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HMIStatus& from);
  void MergeFrom(const HMIStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.dreamview.HMIStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto);
    return ::descriptor_table_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModesFieldNumber = 2,
    kMapsFieldNumber = 4,
    kVehiclesFieldNumber = 6,
    kModulesFieldNumber = 8,
    kMonitoredComponentsFieldNumber = 9,
    kCurrentModeFieldNumber = 3,
    kCurrentMapFieldNumber = 5,
    kCurrentVehicleFieldNumber = 7,
    kDockerImageFieldNumber = 10,
    kPassengerMsgFieldNumber = 12,
    kHeaderFieldNumber = 1,
    kUtmZoneIdFieldNumber = 11,
  };
  // repeated string modes = 2;
  int modes_size() const;
  private:
  int _internal_modes_size() const;
  public:
  void clear_modes();
  const std::string& modes(int index) const;
  std::string* mutable_modes(int index);
  void set_modes(int index, const std::string& value);
  void set_modes(int index, std::string&& value);
  void set_modes(int index, const char* value);
  void set_modes(int index, const char* value, size_t size);
  std::string* add_modes();
  void add_modes(const std::string& value);
  void add_modes(std::string&& value);
  void add_modes(const char* value);
  void add_modes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& modes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_modes();
  private:
  const std::string& _internal_modes(int index) const;
  std::string* _internal_add_modes();
  public:

  // repeated string maps = 4;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  const std::string& maps(int index) const;
  std::string* mutable_maps(int index);
  void set_maps(int index, const std::string& value);
  void set_maps(int index, std::string&& value);
  void set_maps(int index, const char* value);
  void set_maps(int index, const char* value, size_t size);
  std::string* add_maps();
  void add_maps(const std::string& value);
  void add_maps(std::string&& value);
  void add_maps(const char* value);
  void add_maps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& maps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_maps();
  private:
  const std::string& _internal_maps(int index) const;
  std::string* _internal_add_maps();
  public:

  // repeated string vehicles = 6;
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;
  public:
  void clear_vehicles();
  const std::string& vehicles(int index) const;
  std::string* mutable_vehicles(int index);
  void set_vehicles(int index, const std::string& value);
  void set_vehicles(int index, std::string&& value);
  void set_vehicles(int index, const char* value);
  void set_vehicles(int index, const char* value, size_t size);
  std::string* add_vehicles();
  void add_vehicles(const std::string& value);
  void add_vehicles(std::string&& value);
  void add_vehicles(const char* value);
  void add_vehicles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vehicles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vehicles();
  private:
  const std::string& _internal_vehicles(int index) const;
  std::string* _internal_add_vehicles();
  public:

  // map<string, bool> modules = 8;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      _internal_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      _internal_mutable_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      mutable_modules();

  // map<string, .apollo.monitor.ComponentStatus> monitored_components = 9;
  int monitored_components_size() const;
  private:
  int _internal_monitored_components_size() const;
  public:
  void clear_monitored_components();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >&
      _internal_monitored_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >*
      _internal_mutable_monitored_components();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >&
      monitored_components() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >*
      mutable_monitored_components();

  // optional string current_mode = 3;
  bool has_current_mode() const;
  private:
  bool _internal_has_current_mode() const;
  public:
  void clear_current_mode();
  const std::string& current_mode() const;
  void set_current_mode(const std::string& value);
  void set_current_mode(std::string&& value);
  void set_current_mode(const char* value);
  void set_current_mode(const char* value, size_t size);
  std::string* mutable_current_mode();
  std::string* release_current_mode();
  void set_allocated_current_mode(std::string* current_mode);
  private:
  const std::string& _internal_current_mode() const;
  void _internal_set_current_mode(const std::string& value);
  std::string* _internal_mutable_current_mode();
  public:

  // optional string current_map = 5;
  bool has_current_map() const;
  private:
  bool _internal_has_current_map() const;
  public:
  void clear_current_map();
  const std::string& current_map() const;
  void set_current_map(const std::string& value);
  void set_current_map(std::string&& value);
  void set_current_map(const char* value);
  void set_current_map(const char* value, size_t size);
  std::string* mutable_current_map();
  std::string* release_current_map();
  void set_allocated_current_map(std::string* current_map);
  private:
  const std::string& _internal_current_map() const;
  void _internal_set_current_map(const std::string& value);
  std::string* _internal_mutable_current_map();
  public:

  // optional string current_vehicle = 7;
  bool has_current_vehicle() const;
  private:
  bool _internal_has_current_vehicle() const;
  public:
  void clear_current_vehicle();
  const std::string& current_vehicle() const;
  void set_current_vehicle(const std::string& value);
  void set_current_vehicle(std::string&& value);
  void set_current_vehicle(const char* value);
  void set_current_vehicle(const char* value, size_t size);
  std::string* mutable_current_vehicle();
  std::string* release_current_vehicle();
  void set_allocated_current_vehicle(std::string* current_vehicle);
  private:
  const std::string& _internal_current_vehicle() const;
  void _internal_set_current_vehicle(const std::string& value);
  std::string* _internal_mutable_current_vehicle();
  public:

  // optional string docker_image = 10;
  bool has_docker_image() const;
  private:
  bool _internal_has_docker_image() const;
  public:
  void clear_docker_image();
  const std::string& docker_image() const;
  void set_docker_image(const std::string& value);
  void set_docker_image(std::string&& value);
  void set_docker_image(const char* value);
  void set_docker_image(const char* value, size_t size);
  std::string* mutable_docker_image();
  std::string* release_docker_image();
  void set_allocated_docker_image(std::string* docker_image);
  private:
  const std::string& _internal_docker_image() const;
  void _internal_set_docker_image(const std::string& value);
  std::string* _internal_mutable_docker_image();
  public:

  // optional string passenger_msg = 12;
  bool has_passenger_msg() const;
  private:
  bool _internal_has_passenger_msg() const;
  public:
  void clear_passenger_msg();
  const std::string& passenger_msg() const;
  void set_passenger_msg(const std::string& value);
  void set_passenger_msg(std::string&& value);
  void set_passenger_msg(const char* value);
  void set_passenger_msg(const char* value, size_t size);
  std::string* mutable_passenger_msg();
  std::string* release_passenger_msg();
  void set_allocated_passenger_msg(std::string* passenger_msg);
  private:
  const std::string& _internal_passenger_msg() const;
  void _internal_set_passenger_msg(const std::string& value);
  std::string* _internal_mutable_passenger_msg();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional int32 utm_zone_id = 11;
  bool has_utm_zone_id() const;
  private:
  bool _internal_has_utm_zone_id() const;
  public:
  void clear_utm_zone_id();
  ::PROTOBUF_NAMESPACE_ID::int32 utm_zone_id() const;
  void set_utm_zone_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_utm_zone_id() const;
  void _internal_set_utm_zone_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> modes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> maps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vehicles_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HMIStatus_ModulesEntry_DoNotUse,
      std::string, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > modules_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HMIStatus_MonitoredComponentsEntry_DoNotUse,
      std::string, ::apollo::monitor::ComponentStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > monitored_components_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_vehicle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr docker_image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passenger_msg_;
  ::apollo::common::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 utm_zone_id_;
  friend struct ::TableStruct_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HMIStatus

// optional .apollo.common.Header header = 1;
inline bool HMIStatus::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool HMIStatus::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& HMIStatus::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& HMIStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.header)
  return _internal_header();
}
inline ::apollo::common::Header* HMIStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.header)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* HMIStatus::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000020u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* HMIStatus::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.header)
  return _internal_mutable_header();
}
inline void HMIStatus::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.header)
}

// repeated string modes = 2;
inline int HMIStatus::_internal_modes_size() const {
  return modes_.size();
}
inline int HMIStatus::modes_size() const {
  return _internal_modes_size();
}
inline void HMIStatus::clear_modes() {
  modes_.Clear();
}
inline std::string* HMIStatus::add_modes() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.HMIStatus.modes)
  return _internal_add_modes();
}
inline const std::string& HMIStatus::_internal_modes(int index) const {
  return modes_.Get(index);
}
inline const std::string& HMIStatus::modes(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.modes)
  return _internal_modes(index);
}
inline std::string* HMIStatus::mutable_modes(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.modes)
  return modes_.Mutable(index);
}
inline void HMIStatus::set_modes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.modes)
  modes_.Mutable(index)->assign(value);
}
inline void HMIStatus::set_modes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.modes)
  modes_.Mutable(index)->assign(std::move(value));
}
inline void HMIStatus::set_modes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  modes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.modes)
}
inline void HMIStatus::set_modes(int index, const char* value, size_t size) {
  modes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.modes)
}
inline std::string* HMIStatus::_internal_add_modes() {
  return modes_.Add();
}
inline void HMIStatus::add_modes(const std::string& value) {
  modes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.modes)
}
inline void HMIStatus::add_modes(std::string&& value) {
  modes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.modes)
}
inline void HMIStatus::add_modes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  modes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.HMIStatus.modes)
}
inline void HMIStatus::add_modes(const char* value, size_t size) {
  modes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.HMIStatus.modes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HMIStatus::modes() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.HMIStatus.modes)
  return modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HMIStatus::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.HMIStatus.modes)
  return &modes_;
}

// optional string current_mode = 3;
inline bool HMIStatus::_internal_has_current_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HMIStatus::has_current_mode() const {
  return _internal_has_current_mode();
}
inline void HMIStatus::clear_current_mode() {
  current_mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HMIStatus::current_mode() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_mode)
  return _internal_current_mode();
}
inline void HMIStatus::set_current_mode(const std::string& value) {
  _internal_set_current_mode(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_mode)
}
inline std::string* HMIStatus::mutable_current_mode() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_mode)
  return _internal_mutable_current_mode();
}
inline const std::string& HMIStatus::_internal_current_mode() const {
  return current_mode_.GetNoArena();
}
inline void HMIStatus::_internal_set_current_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  current_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HMIStatus::set_current_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  current_mode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.current_mode)
}
inline void HMIStatus::set_current_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  current_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_mode)
}
inline void HMIStatus::set_current_mode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  current_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_mode)
}
inline std::string* HMIStatus::_internal_mutable_current_mode() {
  _has_bits_[0] |= 0x00000001u;
  return current_mode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HMIStatus::release_current_mode() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_mode)
  if (!_internal_has_current_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return current_mode_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_current_mode(std::string* current_mode) {
  if (current_mode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_mode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_mode);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_mode)
}

// repeated string maps = 4;
inline int HMIStatus::_internal_maps_size() const {
  return maps_.size();
}
inline int HMIStatus::maps_size() const {
  return _internal_maps_size();
}
inline void HMIStatus::clear_maps() {
  maps_.Clear();
}
inline std::string* HMIStatus::add_maps() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.HMIStatus.maps)
  return _internal_add_maps();
}
inline const std::string& HMIStatus::_internal_maps(int index) const {
  return maps_.Get(index);
}
inline const std::string& HMIStatus::maps(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.maps)
  return _internal_maps(index);
}
inline std::string* HMIStatus::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.maps)
  return maps_.Mutable(index);
}
inline void HMIStatus::set_maps(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.maps)
  maps_.Mutable(index)->assign(value);
}
inline void HMIStatus::set_maps(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.maps)
  maps_.Mutable(index)->assign(std::move(value));
}
inline void HMIStatus::set_maps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  maps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.maps)
}
inline void HMIStatus::set_maps(int index, const char* value, size_t size) {
  maps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.maps)
}
inline std::string* HMIStatus::_internal_add_maps() {
  return maps_.Add();
}
inline void HMIStatus::add_maps(const std::string& value) {
  maps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.maps)
}
inline void HMIStatus::add_maps(std::string&& value) {
  maps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.maps)
}
inline void HMIStatus::add_maps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  maps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.HMIStatus.maps)
}
inline void HMIStatus::add_maps(const char* value, size_t size) {
  maps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.HMIStatus.maps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HMIStatus::maps() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.HMIStatus.maps)
  return maps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HMIStatus::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.HMIStatus.maps)
  return &maps_;
}

// optional string current_map = 5;
inline bool HMIStatus::_internal_has_current_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HMIStatus::has_current_map() const {
  return _internal_has_current_map();
}
inline void HMIStatus::clear_current_map() {
  current_map_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HMIStatus::current_map() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_map)
  return _internal_current_map();
}
inline void HMIStatus::set_current_map(const std::string& value) {
  _internal_set_current_map(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_map)
}
inline std::string* HMIStatus::mutable_current_map() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_map)
  return _internal_mutable_current_map();
}
inline const std::string& HMIStatus::_internal_current_map() const {
  return current_map_.GetNoArena();
}
inline void HMIStatus::_internal_set_current_map(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  current_map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HMIStatus::set_current_map(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  current_map_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.current_map)
}
inline void HMIStatus::set_current_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  current_map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_map)
}
inline void HMIStatus::set_current_map(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  current_map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_map)
}
inline std::string* HMIStatus::_internal_mutable_current_map() {
  _has_bits_[0] |= 0x00000002u;
  return current_map_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HMIStatus::release_current_map() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_map)
  if (!_internal_has_current_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return current_map_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_current_map(std::string* current_map) {
  if (current_map != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  current_map_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_map);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_map)
}

// repeated string vehicles = 6;
inline int HMIStatus::_internal_vehicles_size() const {
  return vehicles_.size();
}
inline int HMIStatus::vehicles_size() const {
  return _internal_vehicles_size();
}
inline void HMIStatus::clear_vehicles() {
  vehicles_.Clear();
}
inline std::string* HMIStatus::add_vehicles() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.HMIStatus.vehicles)
  return _internal_add_vehicles();
}
inline const std::string& HMIStatus::_internal_vehicles(int index) const {
  return vehicles_.Get(index);
}
inline const std::string& HMIStatus::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.vehicles)
  return _internal_vehicles(index);
}
inline std::string* HMIStatus::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.vehicles)
  return vehicles_.Mutable(index);
}
inline void HMIStatus::set_vehicles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.vehicles)
  vehicles_.Mutable(index)->assign(value);
}
inline void HMIStatus::set_vehicles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.vehicles)
  vehicles_.Mutable(index)->assign(std::move(value));
}
inline void HMIStatus::set_vehicles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vehicles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.vehicles)
}
inline void HMIStatus::set_vehicles(int index, const char* value, size_t size) {
  vehicles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.vehicles)
}
inline std::string* HMIStatus::_internal_add_vehicles() {
  return vehicles_.Add();
}
inline void HMIStatus::add_vehicles(const std::string& value) {
  vehicles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.vehicles)
}
inline void HMIStatus::add_vehicles(std::string&& value) {
  vehicles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.vehicles)
}
inline void HMIStatus::add_vehicles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vehicles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.HMIStatus.vehicles)
}
inline void HMIStatus::add_vehicles(const char* value, size_t size) {
  vehicles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.HMIStatus.vehicles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HMIStatus::vehicles() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.HMIStatus.vehicles)
  return vehicles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HMIStatus::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.HMIStatus.vehicles)
  return &vehicles_;
}

// optional string current_vehicle = 7;
inline bool HMIStatus::_internal_has_current_vehicle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HMIStatus::has_current_vehicle() const {
  return _internal_has_current_vehicle();
}
inline void HMIStatus::clear_current_vehicle() {
  current_vehicle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HMIStatus::current_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_vehicle)
  return _internal_current_vehicle();
}
inline void HMIStatus::set_current_vehicle(const std::string& value) {
  _internal_set_current_vehicle(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_vehicle)
}
inline std::string* HMIStatus::mutable_current_vehicle() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_vehicle)
  return _internal_mutable_current_vehicle();
}
inline const std::string& HMIStatus::_internal_current_vehicle() const {
  return current_vehicle_.GetNoArena();
}
inline void HMIStatus::_internal_set_current_vehicle(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  current_vehicle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HMIStatus::set_current_vehicle(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  current_vehicle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.current_vehicle)
}
inline void HMIStatus::set_current_vehicle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  current_vehicle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_vehicle)
}
inline void HMIStatus::set_current_vehicle(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  current_vehicle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_vehicle)
}
inline std::string* HMIStatus::_internal_mutable_current_vehicle() {
  _has_bits_[0] |= 0x00000004u;
  return current_vehicle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HMIStatus::release_current_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_vehicle)
  if (!_internal_has_current_vehicle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return current_vehicle_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_current_vehicle(std::string* current_vehicle) {
  if (current_vehicle != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  current_vehicle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_vehicle);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_vehicle)
}

// map<string, bool> modules = 8;
inline int HMIStatus::_internal_modules_size() const {
  return modules_.size();
}
inline int HMIStatus::modules_size() const {
  return _internal_modules_size();
}
inline void HMIStatus::clear_modules() {
  modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
HMIStatus::_internal_modules() const {
  return modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
HMIStatus::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIStatus.modules)
  return _internal_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
HMIStatus::_internal_mutable_modules() {
  return modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
HMIStatus::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIStatus.modules)
  return _internal_mutable_modules();
}

// map<string, .apollo.monitor.ComponentStatus> monitored_components = 9;
inline int HMIStatus::_internal_monitored_components_size() const {
  return monitored_components_.size();
}
inline int HMIStatus::monitored_components_size() const {
  return _internal_monitored_components_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >&
HMIStatus::_internal_monitored_components() const {
  return monitored_components_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >&
HMIStatus::monitored_components() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIStatus.monitored_components)
  return _internal_monitored_components();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >*
HMIStatus::_internal_mutable_monitored_components() {
  return monitored_components_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ComponentStatus >*
HMIStatus::mutable_monitored_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIStatus.monitored_components)
  return _internal_mutable_monitored_components();
}

// optional string docker_image = 10;
inline bool HMIStatus::_internal_has_docker_image() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HMIStatus::has_docker_image() const {
  return _internal_has_docker_image();
}
inline void HMIStatus::clear_docker_image() {
  docker_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& HMIStatus::docker_image() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.docker_image)
  return _internal_docker_image();
}
inline void HMIStatus::set_docker_image(const std::string& value) {
  _internal_set_docker_image(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.docker_image)
}
inline std::string* HMIStatus::mutable_docker_image() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.docker_image)
  return _internal_mutable_docker_image();
}
inline const std::string& HMIStatus::_internal_docker_image() const {
  return docker_image_.GetNoArena();
}
inline void HMIStatus::_internal_set_docker_image(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  docker_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HMIStatus::set_docker_image(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  docker_image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.docker_image)
}
inline void HMIStatus::set_docker_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  docker_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.docker_image)
}
inline void HMIStatus::set_docker_image(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  docker_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.docker_image)
}
inline std::string* HMIStatus::_internal_mutable_docker_image() {
  _has_bits_[0] |= 0x00000008u;
  return docker_image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HMIStatus::release_docker_image() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.docker_image)
  if (!_internal_has_docker_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return docker_image_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_docker_image(std::string* docker_image) {
  if (docker_image != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  docker_image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), docker_image);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.docker_image)
}

// optional int32 utm_zone_id = 11;
inline bool HMIStatus::_internal_has_utm_zone_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HMIStatus::has_utm_zone_id() const {
  return _internal_has_utm_zone_id();
}
inline void HMIStatus::clear_utm_zone_id() {
  utm_zone_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HMIStatus::_internal_utm_zone_id() const {
  return utm_zone_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HMIStatus::utm_zone_id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.utm_zone_id)
  return _internal_utm_zone_id();
}
inline void HMIStatus::_internal_set_utm_zone_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  utm_zone_id_ = value;
}
inline void HMIStatus::set_utm_zone_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_utm_zone_id(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.utm_zone_id)
}

// optional string passenger_msg = 12;
inline bool HMIStatus::_internal_has_passenger_msg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HMIStatus::has_passenger_msg() const {
  return _internal_has_passenger_msg();
}
inline void HMIStatus::clear_passenger_msg() {
  passenger_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& HMIStatus::passenger_msg() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.passenger_msg)
  return _internal_passenger_msg();
}
inline void HMIStatus::set_passenger_msg(const std::string& value) {
  _internal_set_passenger_msg(value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.passenger_msg)
}
inline std::string* HMIStatus::mutable_passenger_msg() {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.passenger_msg)
  return _internal_mutable_passenger_msg();
}
inline const std::string& HMIStatus::_internal_passenger_msg() const {
  return passenger_msg_.GetNoArena();
}
inline void HMIStatus::_internal_set_passenger_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  passenger_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HMIStatus::set_passenger_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  passenger_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.passenger_msg)
}
inline void HMIStatus::set_passenger_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  passenger_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.passenger_msg)
}
inline void HMIStatus::set_passenger_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  passenger_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.passenger_msg)
}
inline std::string* HMIStatus::_internal_mutable_passenger_msg() {
  _has_bits_[0] |= 0x00000010u;
  return passenger_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HMIStatus::release_passenger_msg() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.passenger_msg)
  if (!_internal_has_passenger_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return passenger_msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_passenger_msg(std::string* passenger_msg) {
  if (passenger_msg != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  passenger_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passenger_msg);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.passenger_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
