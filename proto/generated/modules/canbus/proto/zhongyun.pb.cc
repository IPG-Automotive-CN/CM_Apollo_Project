// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/zhongyun.proto

#include "modules/canbus/proto/zhongyun.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_control_a4_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Enable_state_feedback_c3_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_state_e1_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gear_control_a1_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parking_control_a5_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_control_a2_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Torque_control_a3_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_state_feedback_2_c4_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_state_feedback_c1_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
namespace apollo {
namespace canbus {
class Gear_control_a1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gear_control_a1> _instance;
} _Gear_control_a1_default_instance_;
class Torque_control_a3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Torque_control_a3> _instance;
} _Torque_control_a3_default_instance_;
class Steering_control_a2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_control_a2> _instance;
} _Steering_control_a2_default_instance_;
class Parking_control_a5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Parking_control_a5> _instance;
} _Parking_control_a5_default_instance_;
class Brake_control_a4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_control_a4> _instance;
} _Brake_control_a4_default_instance_;
class Enable_state_feedback_c3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Enable_state_feedback_c3> _instance;
} _Enable_state_feedback_c3_default_instance_;
class Vehicle_state_feedback_c1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_state_feedback_c1> _instance;
} _Vehicle_state_feedback_c1_default_instance_;
class Error_state_e1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error_state_e1> _instance;
} _Error_state_e1_default_instance_;
class Vehicle_state_feedback_2_c4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_state_feedback_2_c4> _instance;
} _Vehicle_state_feedback_2_c4_default_instance_;
class ZhongyunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Zhongyun> _instance;
} _Zhongyun_default_instance_;
}  // namespace canbus
}  // namespace apollo
static void InitDefaultsscc_info_Brake_control_a4_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_control_a4_default_instance_;
    new (ptr) ::apollo::canbus::Brake_control_a4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_control_a4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_control_a4_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_control_a4_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Enable_state_feedback_c3_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Enable_state_feedback_c3_default_instance_;
    new (ptr) ::apollo::canbus::Enable_state_feedback_c3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Enable_state_feedback_c3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Enable_state_feedback_c3_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Enable_state_feedback_c3_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Error_state_e1_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Error_state_e1_default_instance_;
    new (ptr) ::apollo::canbus::Error_state_e1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Error_state_e1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_state_e1_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Error_state_e1_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Gear_control_a1_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gear_control_a1_default_instance_;
    new (ptr) ::apollo::canbus::Gear_control_a1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gear_control_a1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gear_control_a1_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gear_control_a1_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Parking_control_a5_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Parking_control_a5_default_instance_;
    new (ptr) ::apollo::canbus::Parking_control_a5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Parking_control_a5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parking_control_a5_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Parking_control_a5_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Steering_control_a2_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_control_a2_default_instance_;
    new (ptr) ::apollo::canbus::Steering_control_a2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_control_a2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_control_a2_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_control_a2_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Torque_control_a3_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Torque_control_a3_default_instance_;
    new (ptr) ::apollo::canbus::Torque_control_a3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Torque_control_a3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Torque_control_a3_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Torque_control_a3_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle_state_feedback_2_c4_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Vehicle_state_feedback_2_c4_default_instance_;
    new (ptr) ::apollo::canbus::Vehicle_state_feedback_2_c4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Vehicle_state_feedback_2_c4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_state_feedback_2_c4_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle_state_feedback_2_c4_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle_state_feedback_c1_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Vehicle_state_feedback_c1_default_instance_;
    new (ptr) ::apollo::canbus::Vehicle_state_feedback_c1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Vehicle_state_feedback_c1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_state_feedback_c1_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle_state_feedback_c1_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {}};

static void InitDefaultsscc_info_Zhongyun_modules_2fcanbus_2fproto_2fzhongyun_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Zhongyun_default_instance_;
    new (ptr) ::apollo::canbus::Zhongyun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Zhongyun::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Zhongyun_modules_2fcanbus_2fproto_2fzhongyun_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Zhongyun_modules_2fcanbus_2fproto_2fzhongyun_2eproto}, {
      &scc_info_Gear_control_a1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Torque_control_a3_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Steering_control_a2_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Parking_control_a5_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Brake_control_a4_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Enable_state_feedback_c3_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Vehicle_state_feedback_c1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Error_state_e1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Vehicle_state_feedback_2_c4_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2fzhongyun_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_control_a1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_control_a1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_control_a1, gear_state_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_control_a1, gear_enable_control_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Torque_control_a3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Torque_control_a3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Torque_control_a3, driven_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Torque_control_a3, driven_enable_control_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_control_a2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_control_a2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_control_a2, steering_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_control_a2, steering_enable_control_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_control_a5, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_control_a5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_control_a5, parking_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_control_a5, parking_enable_control_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_control_a4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_control_a4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_control_a4, brake_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_control_a4, brake_enable_control_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, parking_enable_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, steering_enable_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, gear_enable_actual_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, driven_enable_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Enable_state_feedback_c3, brake_enable_state_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, parking_actual_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, brake_torque_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, gear_state_actual_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, steering_actual_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_c1, speed_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, brake_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, driven_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, steering_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, parking_error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Error_state_e1, gear_error_msg_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_2_c4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_2_c4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_2_c4, motor_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_state_feedback_2_c4, driven_torque_feedback_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, gear_control_a1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, torque_control_a3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, steering_control_a2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, parking_control_a5_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, brake_control_a4_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, enable_state_feedback_c3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, vehicle_state_feedback_c1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, error_state_e1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Zhongyun, vehicle_state_feedback_2_c4_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::canbus::Gear_control_a1)},
  { 9, 16, sizeof(::apollo::canbus::Torque_control_a3)},
  { 18, 25, sizeof(::apollo::canbus::Steering_control_a2)},
  { 27, 34, sizeof(::apollo::canbus::Parking_control_a5)},
  { 36, 43, sizeof(::apollo::canbus::Brake_control_a4)},
  { 45, 55, sizeof(::apollo::canbus::Enable_state_feedback_c3)},
  { 60, 70, sizeof(::apollo::canbus::Vehicle_state_feedback_c1)},
  { 75, 85, sizeof(::apollo::canbus::Error_state_e1)},
  { 90, 97, sizeof(::apollo::canbus::Vehicle_state_feedback_2_c4)},
  { 99, 113, sizeof(::apollo::canbus::Zhongyun)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Gear_control_a1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Torque_control_a3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_control_a2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Parking_control_a5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_control_a4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Enable_state_feedback_c3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vehicle_state_feedback_c1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Error_state_e1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vehicle_state_feedback_2_c4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Zhongyun_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fzhongyun_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#modules/canbus/proto/zhongyun.proto\022\ra"
  "pollo.canbus\"\305\003\n\017Gear_control_a1\022O\n\021gear"
  "_state_target\030\001 \001(\01624.apollo.canbus.Gear"
  "_control_a1.Gear_state_targetType\022S\n\023gea"
  "r_enable_control\030\002 \001(\01626.apollo.canbus.G"
  "ear_control_a1.Gear_enable_controlType\"\232"
  "\001\n\025Gear_state_targetType\022\027\n\023GEAR_STATE_T"
  "ARGET_P\020\001\022\027\n\023GEAR_STATE_TARGET_N\020\002\022\027\n\023GE"
  "AR_STATE_TARGET_D\020\003\022\027\n\023GEAR_STATE_TARGET"
  "_R\020\004\022\035\n\031GEAR_STATE_TARGET_INVALID\020\005\"o\n\027G"
  "ear_enable_controlType\022*\n&GEAR_ENABLE_CO"
  "NTROL_GEAR_MANUALCONTROL\020\000\022(\n$GEAR_ENABL"
  "E_CONTROL_GEAR_AUTOCONTROL\020\001\"\360\001\n\021Torque_"
  "control_a3\022\025\n\rdriven_torque\030\001 \001(\001\022Y\n\025dri"
  "ven_enable_control\030\002 \001(\0162:.apollo.canbus"
  ".Torque_control_a3.Driven_enable_control"
  "Type\"i\n\031Driven_enable_controlType\022&\n\"DRI"
  "VEN_ENABLE_CONTROL_DRIVE_MANUAL\020\000\022$\n DRI"
  "VEN_ENABLE_CONTROL_DRIVE_AUTO\020\001\"\225\002\n\023Stee"
  "ring_control_a2\022\027\n\017steering_target\030\001 \001(\001"
  "\022_\n\027steering_enable_control\030\002 \001(\0162>.apol"
  "lo.canbus.Steering_control_a2.Steering_e"
  "nable_controlType\"\203\001\n\033Steering_enable_co"
  "ntrolType\0222\n.STEERING_ENABLE_CONTROL_STE"
  "ERING_MANUALCONTROL\020\000\0220\n,STEERING_ENABLE"
  "_CONTROL_STEERING_AUTOCONTROL\020\001\"\226\003\n\022Park"
  "ing_control_a5\022L\n\016parking_target\030\001 \001(\01624"
  ".apollo.canbus.Parking_control_a5.Parkin"
  "g_targetType\022\\\n\026parking_enable_control\030\002"
  " \001(\0162<.apollo.canbus.Parking_control_a5."
  "Parking_enable_controlType\"T\n\022Parking_ta"
  "rgetType\022\032\n\026PARKING_TARGET_RELEASE\020\000\022\"\n\036"
  "PARKING_TARGET_PARKING_TRIGGER\020\001\"~\n\032Park"
  "ing_enable_controlType\0220\n,PARKING_ENABLE"
  "_CONTROL_PARKING_MANUALCONTROL\020\000\022.\n*PARK"
  "ING_ENABLE_CONTROL_PARKING_AUTOCONTROL\020\001"
  "\"\350\001\n\020Brake_control_a4\022\024\n\014brake_torque\030\001 "
  "\001(\001\022V\n\024brake_enable_control\030\002 \001(\01628.apol"
  "lo.canbus.Brake_control_a4.Brake_enable_"
  "controlType\"f\n\030Brake_enable_controlType\022"
  "%\n!BRAKE_ENABLE_CONTROL_BRAKE_MANUAL\020\000\022#"
  "\n\037BRAKE_ENABLE_CONTROL_BRAKE_AUTO\020\001\"\200\n\n\030"
  "Enable_state_feedback_c3\022^\n\024parking_enab"
  "le_state\030\001 \001(\0162@.apollo.canbus.Enable_st"
  "ate_feedback_c3.Parking_enable_stateType"
  "\022`\n\025steering_enable_state\030\002 \001(\0162A.apollo"
  ".canbus.Enable_state_feedback_c3.Steerin"
  "g_enable_stateType\022Z\n\022gear_enable_actual"
  "\030\003 \001(\0162>.apollo.canbus.Enable_state_feed"
  "back_c3.Gear_enable_actualType\022\\\n\023driven"
  "_enable_state\030\004 \001(\0162\?.apollo.canbus.Enab"
  "le_state_feedback_c3.Driven_enable_state"
  "Type\022Z\n\022brake_enable_state\030\005 \001(\0162>.apoll"
  "o.canbus.Enable_state_feedback_c3.Brake_"
  "enable_stateType\"\243\001\n\030Parking_enable_stat"
  "eType\022.\n*PARKING_ENABLE_STATE_PARKING_MA"
  "NUALCONTROL\020\000\022,\n(PARKING_ENABLE_STATE_PA"
  "RKING_AUTOCONTROL\020\001\022)\n%PARKING_ENABLE_ST"
  "ATE_PARKING_TAKEOVER\020\002\"\261\001\n\031Steering_enab"
  "le_stateType\0220\n,STEERING_ENABLE_STATE_ST"
  "EERING_MANUALCONTROL\020\000\022.\n*STEERING_ENABL"
  "E_STATE_STEERING_AUTOCONTROL\020\001\0222\n.STEERI"
  "NG_ENABLE_STATE_STEERING_MANUAL_TAKEOVER"
  "\020\002\"\231\001\n\026Gear_enable_actualType\022)\n%GEAR_EN"
  "ABLE_ACTUAL_GEAR_MANUALCONTROL\020\000\022\'\n#GEAR"
  "_ENABLE_ACTUAL_GEAR_AUTOCONTROL\020\001\022+\n\'GEA"
  "R_ENABLE_ACTUAL_GEAR_MANUAL_TAKEOVER\020\002\"\213"
  "\001\n\027Driven_enable_stateType\022$\n DRIVEN_ENA"
  "BLE_STATE_DRIVE_MANUAL\020\000\022\"\n\036DRIVEN_ENABL"
  "E_STATE_DRIVE_AUTO\020\001\022&\n\"DRIVEN_ENABLE_ST"
  "ATE_DRIVE_TAKEOVER\020\002\"\207\001\n\026Brake_enable_st"
  "ateType\022#\n\037BRAKE_ENABLE_STATE_BRAKE_MANU"
  "AL\020\000\022!\n\035BRAKE_ENABLE_STATE_BRAKE_AUTO\020\001\022"
  "%\n!BRAKE_ENABLE_STATE_BRAKE_TAKEOVER\020\002\"\205"
  "\004\n\031Vehicle_state_feedback_c1\022S\n\016parking_"
  "actual\030\001 \001(\0162;.apollo.canbus.Vehicle_sta"
  "te_feedback_c1.Parking_actualType\022\035\n\025bra"
  "ke_torque_feedback\030\002 \001(\001\022Y\n\021gear_state_a"
  "ctual\030\003 \001(\0162>.apollo.canbus.Vehicle_stat"
  "e_feedback_c1.Gear_state_actualType\022\027\n\017s"
  "teering_actual\030\004 \001(\001\022\r\n\005speed\030\005 \001(\001\"T\n\022P"
  "arking_actualType\022\032\n\026PARKING_ACTUAL_RELE"
  "ASE\020\000\022\"\n\036PARKING_ACTUAL_PARKING_TRIGGER\020"
  "\001\"\232\001\n\025Gear_state_actualType\022\027\n\023GEAR_STAT"
  "E_ACTUAL_P\020\001\022\027\n\023GEAR_STATE_ACTUAL_N\020\002\022\027\n"
  "\023GEAR_STATE_ACTUAL_D\020\003\022\027\n\023GEAR_STATE_ACT"
  "UAL_R\020\004\022\035\n\031GEAR_STATE_ACTUAL_INVALID\020\005\"\311"
  "\006\n\016Error_state_e1\022L\n\020brake_error_code\030\001 "
  "\001(\01622.apollo.canbus.Error_state_e1.Brake"
  "_error_codeType\022N\n\021driven_error_code\030\002 \001"
  "(\01623.apollo.canbus.Error_state_e1.Driven"
  "_error_codeType\022R\n\023steering_error_code\030\003"
  " \001(\01625.apollo.canbus.Error_state_e1.Stee"
  "ring_error_codeType\022P\n\022parking_error_cod"
  "e\030\004 \001(\01624.apollo.canbus.Error_state_e1.P"
  "arking_error_codeType\022H\n\016gear_error_msg\030"
  "\005 \001(\01620.apollo.canbus.Error_state_e1.Gea"
  "r_error_msgType\"Q\n\024Brake_error_codeType\022"
  "\035\n\031BRAKE_ERROR_CODE_NO_ERROR\020\000\022\032\n\026BRAKE_"
  "ERROR_CODE_ERROR\020\001\"T\n\025Driven_error_codeT"
  "ype\022\036\n\032DRIVEN_ERROR_CODE_NO_ERROR\020\000\022\033\n\027D"
  "RIVEN_ERROR_CODE_ERROR\020\001\"Z\n\027Steering_err"
  "or_codeType\022 \n\034STEERING_ERROR_CODE_NO_ER"
  "ROR\020\000\022\035\n\031STEERING_ERROR_CODE_ERROR\020\001\"W\n\026"
  "Parking_error_codeType\022\037\n\033PARKING_ERROR_"
  "CODE_NO_ERROR\020\000\022\034\n\030PARKING_ERROR_CODE_ER"
  "ROR\020\001\"K\n\022Gear_error_msgType\022\033\n\027GEAR_ERRO"
  "R_MSG_NO_ERROR\020\000\022\030\n\024GEAR_ERROR_MSG_ERROR"
  "\020\001\"R\n\033Vehicle_state_feedback_2_c4\022\023\n\013mot"
  "or_speed\030\001 \001(\005\022\036\n\026driven_torque_feedback"
  "\030\002 \001(\001\"\333\004\n\010Zhongyun\0227\n\017gear_control_a1\030\001"
  " \001(\0132\036.apollo.canbus.Gear_control_a1\022;\n\021"
  "torque_control_a3\030\002 \001(\0132 .apollo.canbus."
  "Torque_control_a3\022\?\n\023steering_control_a2"
  "\030\003 \001(\0132\".apollo.canbus.Steering_control_"
  "a2\022=\n\022parking_control_a5\030\004 \001(\0132!.apollo."
  "canbus.Parking_control_a5\0229\n\020brake_contr"
  "ol_a4\030\005 \001(\0132\037.apollo.canbus.Brake_contro"
  "l_a4\022I\n\030enable_state_feedback_c3\030\006 \001(\0132\'"
  ".apollo.canbus.Enable_state_feedback_c3\022"
  "K\n\031vehicle_state_feedback_c1\030\007 \001(\0132(.apo"
  "llo.canbus.Vehicle_state_feedback_c1\0225\n\016"
  "error_state_e1\030\010 \001(\0132\035.apollo.canbus.Err"
  "or_state_e1\022O\n\033vehicle_state_feedback_2_"
  "c4\030\t \001(\0132*.apollo.canbus.Vehicle_state_f"
  "eedback_2_c4"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_sccs[10] = {
  &scc_info_Brake_control_a4_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Enable_state_feedback_c3_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Error_state_e1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Gear_control_a1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Parking_control_a5_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Steering_control_a2_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Torque_control_a3_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Vehicle_state_feedback_2_c4_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Vehicle_state_feedback_c1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
  &scc_info_Zhongyun_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once;
static bool descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto = {
  &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_initialized, descriptor_table_protodef_modules_2fcanbus_2fproto_2fzhongyun_2eproto, "modules/canbus/proto/zhongyun.proto", 5012,
  &descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_sccs, descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fzhongyun_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2fzhongyun_2eproto, 10, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcanbus_2fproto_2fzhongyun_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto), true);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_control_a1_Gear_state_targetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[0];
}
bool Gear_control_a1_Gear_state_targetType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_P;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_N;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_D;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_R;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::GEAR_STATE_TARGET_INVALID;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::Gear_state_targetType_MIN;
constexpr Gear_control_a1_Gear_state_targetType Gear_control_a1::Gear_state_targetType_MAX;
constexpr int Gear_control_a1::Gear_state_targetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_control_a1_Gear_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[1];
}
bool Gear_control_a1_Gear_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Gear_control_a1_Gear_enable_controlType Gear_control_a1::GEAR_ENABLE_CONTROL_GEAR_MANUALCONTROL;
constexpr Gear_control_a1_Gear_enable_controlType Gear_control_a1::GEAR_ENABLE_CONTROL_GEAR_AUTOCONTROL;
constexpr Gear_control_a1_Gear_enable_controlType Gear_control_a1::Gear_enable_controlType_MIN;
constexpr Gear_control_a1_Gear_enable_controlType Gear_control_a1::Gear_enable_controlType_MAX;
constexpr int Gear_control_a1::Gear_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Torque_control_a3_Driven_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[2];
}
bool Torque_control_a3_Driven_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Torque_control_a3_Driven_enable_controlType Torque_control_a3::DRIVEN_ENABLE_CONTROL_DRIVE_MANUAL;
constexpr Torque_control_a3_Driven_enable_controlType Torque_control_a3::DRIVEN_ENABLE_CONTROL_DRIVE_AUTO;
constexpr Torque_control_a3_Driven_enable_controlType Torque_control_a3::Driven_enable_controlType_MIN;
constexpr Torque_control_a3_Driven_enable_controlType Torque_control_a3::Driven_enable_controlType_MAX;
constexpr int Torque_control_a3::Driven_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steering_control_a2_Steering_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[3];
}
bool Steering_control_a2_Steering_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Steering_control_a2_Steering_enable_controlType Steering_control_a2::STEERING_ENABLE_CONTROL_STEERING_MANUALCONTROL;
constexpr Steering_control_a2_Steering_enable_controlType Steering_control_a2::STEERING_ENABLE_CONTROL_STEERING_AUTOCONTROL;
constexpr Steering_control_a2_Steering_enable_controlType Steering_control_a2::Steering_enable_controlType_MIN;
constexpr Steering_control_a2_Steering_enable_controlType Steering_control_a2::Steering_enable_controlType_MAX;
constexpr int Steering_control_a2::Steering_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parking_control_a5_Parking_targetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[4];
}
bool Parking_control_a5_Parking_targetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Parking_control_a5_Parking_targetType Parking_control_a5::PARKING_TARGET_RELEASE;
constexpr Parking_control_a5_Parking_targetType Parking_control_a5::PARKING_TARGET_PARKING_TRIGGER;
constexpr Parking_control_a5_Parking_targetType Parking_control_a5::Parking_targetType_MIN;
constexpr Parking_control_a5_Parking_targetType Parking_control_a5::Parking_targetType_MAX;
constexpr int Parking_control_a5::Parking_targetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parking_control_a5_Parking_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[5];
}
bool Parking_control_a5_Parking_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Parking_control_a5_Parking_enable_controlType Parking_control_a5::PARKING_ENABLE_CONTROL_PARKING_MANUALCONTROL;
constexpr Parking_control_a5_Parking_enable_controlType Parking_control_a5::PARKING_ENABLE_CONTROL_PARKING_AUTOCONTROL;
constexpr Parking_control_a5_Parking_enable_controlType Parking_control_a5::Parking_enable_controlType_MIN;
constexpr Parking_control_a5_Parking_enable_controlType Parking_control_a5::Parking_enable_controlType_MAX;
constexpr int Parking_control_a5::Parking_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_control_a4_Brake_enable_controlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[6];
}
bool Brake_control_a4_Brake_enable_controlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Brake_control_a4_Brake_enable_controlType Brake_control_a4::BRAKE_ENABLE_CONTROL_BRAKE_MANUAL;
constexpr Brake_control_a4_Brake_enable_controlType Brake_control_a4::BRAKE_ENABLE_CONTROL_BRAKE_AUTO;
constexpr Brake_control_a4_Brake_enable_controlType Brake_control_a4::Brake_enable_controlType_MIN;
constexpr Brake_control_a4_Brake_enable_controlType Brake_control_a4::Brake_enable_controlType_MAX;
constexpr int Brake_control_a4::Brake_enable_controlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Parking_enable_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[7];
}
bool Enable_state_feedback_c3_Parking_enable_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::PARKING_ENABLE_STATE_PARKING_MANUALCONTROL;
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::PARKING_ENABLE_STATE_PARKING_AUTOCONTROL;
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::PARKING_ENABLE_STATE_PARKING_TAKEOVER;
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::Parking_enable_stateType_MIN;
constexpr Enable_state_feedback_c3_Parking_enable_stateType Enable_state_feedback_c3::Parking_enable_stateType_MAX;
constexpr int Enable_state_feedback_c3::Parking_enable_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Steering_enable_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[8];
}
bool Enable_state_feedback_c3_Steering_enable_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::STEERING_ENABLE_STATE_STEERING_MANUALCONTROL;
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::STEERING_ENABLE_STATE_STEERING_AUTOCONTROL;
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::STEERING_ENABLE_STATE_STEERING_MANUAL_TAKEOVER;
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::Steering_enable_stateType_MIN;
constexpr Enable_state_feedback_c3_Steering_enable_stateType Enable_state_feedback_c3::Steering_enable_stateType_MAX;
constexpr int Enable_state_feedback_c3::Steering_enable_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Gear_enable_actualType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[9];
}
bool Enable_state_feedback_c3_Gear_enable_actualType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::GEAR_ENABLE_ACTUAL_GEAR_MANUALCONTROL;
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::GEAR_ENABLE_ACTUAL_GEAR_AUTOCONTROL;
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::GEAR_ENABLE_ACTUAL_GEAR_MANUAL_TAKEOVER;
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::Gear_enable_actualType_MIN;
constexpr Enable_state_feedback_c3_Gear_enable_actualType Enable_state_feedback_c3::Gear_enable_actualType_MAX;
constexpr int Enable_state_feedback_c3::Gear_enable_actualType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Driven_enable_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[10];
}
bool Enable_state_feedback_c3_Driven_enable_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::DRIVEN_ENABLE_STATE_DRIVE_MANUAL;
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::DRIVEN_ENABLE_STATE_DRIVE_AUTO;
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::DRIVEN_ENABLE_STATE_DRIVE_TAKEOVER;
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::Driven_enable_stateType_MIN;
constexpr Enable_state_feedback_c3_Driven_enable_stateType Enable_state_feedback_c3::Driven_enable_stateType_MAX;
constexpr int Enable_state_feedback_c3::Driven_enable_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enable_state_feedback_c3_Brake_enable_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[11];
}
bool Enable_state_feedback_c3_Brake_enable_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::BRAKE_ENABLE_STATE_BRAKE_MANUAL;
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::BRAKE_ENABLE_STATE_BRAKE_AUTO;
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::BRAKE_ENABLE_STATE_BRAKE_TAKEOVER;
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::Brake_enable_stateType_MIN;
constexpr Enable_state_feedback_c3_Brake_enable_stateType Enable_state_feedback_c3::Brake_enable_stateType_MAX;
constexpr int Enable_state_feedback_c3::Brake_enable_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_state_feedback_c1_Parking_actualType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[12];
}
bool Vehicle_state_feedback_c1_Parking_actualType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle_state_feedback_c1_Parking_actualType Vehicle_state_feedback_c1::PARKING_ACTUAL_RELEASE;
constexpr Vehicle_state_feedback_c1_Parking_actualType Vehicle_state_feedback_c1::PARKING_ACTUAL_PARKING_TRIGGER;
constexpr Vehicle_state_feedback_c1_Parking_actualType Vehicle_state_feedback_c1::Parking_actualType_MIN;
constexpr Vehicle_state_feedback_c1_Parking_actualType Vehicle_state_feedback_c1::Parking_actualType_MAX;
constexpr int Vehicle_state_feedback_c1::Parking_actualType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_state_feedback_c1_Gear_state_actualType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[13];
}
bool Vehicle_state_feedback_c1_Gear_state_actualType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_P;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_N;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_D;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_R;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::GEAR_STATE_ACTUAL_INVALID;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::Gear_state_actualType_MIN;
constexpr Vehicle_state_feedback_c1_Gear_state_actualType Vehicle_state_feedback_c1::Gear_state_actualType_MAX;
constexpr int Vehicle_state_feedback_c1::Gear_state_actualType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Brake_error_codeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[14];
}
bool Error_state_e1_Brake_error_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_state_e1_Brake_error_codeType Error_state_e1::BRAKE_ERROR_CODE_NO_ERROR;
constexpr Error_state_e1_Brake_error_codeType Error_state_e1::BRAKE_ERROR_CODE_ERROR;
constexpr Error_state_e1_Brake_error_codeType Error_state_e1::Brake_error_codeType_MIN;
constexpr Error_state_e1_Brake_error_codeType Error_state_e1::Brake_error_codeType_MAX;
constexpr int Error_state_e1::Brake_error_codeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Driven_error_codeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[15];
}
bool Error_state_e1_Driven_error_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_state_e1_Driven_error_codeType Error_state_e1::DRIVEN_ERROR_CODE_NO_ERROR;
constexpr Error_state_e1_Driven_error_codeType Error_state_e1::DRIVEN_ERROR_CODE_ERROR;
constexpr Error_state_e1_Driven_error_codeType Error_state_e1::Driven_error_codeType_MIN;
constexpr Error_state_e1_Driven_error_codeType Error_state_e1::Driven_error_codeType_MAX;
constexpr int Error_state_e1::Driven_error_codeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Steering_error_codeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[16];
}
bool Error_state_e1_Steering_error_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_state_e1_Steering_error_codeType Error_state_e1::STEERING_ERROR_CODE_NO_ERROR;
constexpr Error_state_e1_Steering_error_codeType Error_state_e1::STEERING_ERROR_CODE_ERROR;
constexpr Error_state_e1_Steering_error_codeType Error_state_e1::Steering_error_codeType_MIN;
constexpr Error_state_e1_Steering_error_codeType Error_state_e1::Steering_error_codeType_MAX;
constexpr int Error_state_e1::Steering_error_codeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Parking_error_codeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[17];
}
bool Error_state_e1_Parking_error_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_state_e1_Parking_error_codeType Error_state_e1::PARKING_ERROR_CODE_NO_ERROR;
constexpr Error_state_e1_Parking_error_codeType Error_state_e1::PARKING_ERROR_CODE_ERROR;
constexpr Error_state_e1_Parking_error_codeType Error_state_e1::Parking_error_codeType_MIN;
constexpr Error_state_e1_Parking_error_codeType Error_state_e1::Parking_error_codeType_MAX;
constexpr int Error_state_e1::Parking_error_codeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_state_e1_Gear_error_msgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fzhongyun_2eproto[18];
}
bool Error_state_e1_Gear_error_msgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_state_e1_Gear_error_msgType Error_state_e1::GEAR_ERROR_MSG_NO_ERROR;
constexpr Error_state_e1_Gear_error_msgType Error_state_e1::GEAR_ERROR_MSG_ERROR;
constexpr Error_state_e1_Gear_error_msgType Error_state_e1::Gear_error_msgType_MIN;
constexpr Error_state_e1_Gear_error_msgType Error_state_e1::Gear_error_msgType_MAX;
constexpr int Error_state_e1::Gear_error_msgType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Gear_control_a1::InitAsDefaultInstance() {
}
class Gear_control_a1::_Internal {
 public:
  using HasBits = decltype(std::declval<Gear_control_a1>()._has_bits_);
  static void set_has_gear_state_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Gear_control_a1::Gear_control_a1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gear_control_a1)
}
Gear_control_a1::Gear_control_a1(const Gear_control_a1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gear_enable_control_, &from.gear_enable_control_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_state_target_) -
    reinterpret_cast<char*>(&gear_enable_control_)) + sizeof(gear_state_target_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear_control_a1)
}

void Gear_control_a1::SharedCtor() {
  gear_enable_control_ = 0;
  gear_state_target_ = 1;
}

Gear_control_a1::~Gear_control_a1() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear_control_a1)
  SharedDtor();
}

void Gear_control_a1::SharedDtor() {
}

void Gear_control_a1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gear_control_a1& Gear_control_a1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gear_control_a1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Gear_control_a1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear_control_a1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    gear_enable_control_ = 0;
    gear_state_target_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Gear_control_a1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Gear_control_a1.Gear_state_targetType gear_state_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Gear_control_a1_Gear_state_targetType_IsValid(val))) {
            _internal_set_gear_state_target(static_cast<::apollo::canbus::Gear_control_a1_Gear_state_targetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gear_control_a1.Gear_enable_controlType gear_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Gear_control_a1_Gear_enable_controlType_IsValid(val))) {
            _internal_set_gear_enable_control(static_cast<::apollo::canbus::Gear_control_a1_Gear_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gear_control_a1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear_control_a1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Gear_control_a1.Gear_state_targetType gear_state_target = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gear_state_target(), target);
  }

  // optional .apollo.canbus.Gear_control_a1.Gear_enable_controlType gear_enable_control = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gear_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear_control_a1)
  return target;
}

size_t Gear_control_a1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear_control_a1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Gear_control_a1.Gear_enable_controlType gear_enable_control = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_enable_control());
    }

    // optional .apollo.canbus.Gear_control_a1.Gear_state_targetType gear_state_target = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_state_target());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gear_control_a1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gear_control_a1)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear_control_a1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gear_control_a1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gear_control_a1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gear_control_a1)
    MergeFrom(*source);
  }
}

void Gear_control_a1::MergeFrom(const Gear_control_a1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear_control_a1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gear_enable_control_ = from.gear_enable_control_;
    }
    if (cached_has_bits & 0x00000002u) {
      gear_state_target_ = from.gear_state_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gear_control_a1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gear_control_a1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear_control_a1::CopyFrom(const Gear_control_a1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear_control_a1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_control_a1::IsInitialized() const {
  return true;
}

void Gear_control_a1::InternalSwap(Gear_control_a1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gear_enable_control_, other->gear_enable_control_);
  swap(gear_state_target_, other->gear_state_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gear_control_a1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Torque_control_a3::InitAsDefaultInstance() {
}
class Torque_control_a3::_Internal {
 public:
  using HasBits = decltype(std::declval<Torque_control_a3>()._has_bits_);
  static void set_has_driven_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driven_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Torque_control_a3::Torque_control_a3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Torque_control_a3)
}
Torque_control_a3::Torque_control_a3(const Torque_control_a3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&driven_torque_, &from.driven_torque_,
    static_cast<size_t>(reinterpret_cast<char*>(&driven_enable_control_) -
    reinterpret_cast<char*>(&driven_torque_)) + sizeof(driven_enable_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Torque_control_a3)
}

void Torque_control_a3::SharedCtor() {
  ::memset(&driven_torque_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driven_enable_control_) -
      reinterpret_cast<char*>(&driven_torque_)) + sizeof(driven_enable_control_));
}

Torque_control_a3::~Torque_control_a3() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Torque_control_a3)
  SharedDtor();
}

void Torque_control_a3::SharedDtor() {
}

void Torque_control_a3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Torque_control_a3& Torque_control_a3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Torque_control_a3_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Torque_control_a3::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Torque_control_a3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&driven_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driven_enable_control_) -
        reinterpret_cast<char*>(&driven_torque_)) + sizeof(driven_enable_control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Torque_control_a3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double driven_torque = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_driven_torque(&has_bits);
          driven_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Torque_control_a3.Driven_enable_controlType driven_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Torque_control_a3_Driven_enable_controlType_IsValid(val))) {
            _internal_set_driven_enable_control(static_cast<::apollo::canbus::Torque_control_a3_Driven_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Torque_control_a3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Torque_control_a3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double driven_torque = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_driven_torque(), target);
  }

  // optional .apollo.canbus.Torque_control_a3.Driven_enable_controlType driven_enable_control = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_driven_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Torque_control_a3)
  return target;
}

size_t Torque_control_a3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Torque_control_a3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double driven_torque = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Torque_control_a3.Driven_enable_controlType driven_enable_control = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driven_enable_control());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Torque_control_a3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Torque_control_a3)
  GOOGLE_DCHECK_NE(&from, this);
  const Torque_control_a3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Torque_control_a3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Torque_control_a3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Torque_control_a3)
    MergeFrom(*source);
  }
}

void Torque_control_a3::MergeFrom(const Torque_control_a3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Torque_control_a3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      driven_torque_ = from.driven_torque_;
    }
    if (cached_has_bits & 0x00000002u) {
      driven_enable_control_ = from.driven_enable_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Torque_control_a3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Torque_control_a3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Torque_control_a3::CopyFrom(const Torque_control_a3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Torque_control_a3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torque_control_a3::IsInitialized() const {
  return true;
}

void Torque_control_a3::InternalSwap(Torque_control_a3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(driven_torque_, other->driven_torque_);
  swap(driven_enable_control_, other->driven_enable_control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Torque_control_a3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_control_a2::InitAsDefaultInstance() {
}
class Steering_control_a2::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_control_a2>()._has_bits_);
  static void set_has_steering_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_control_a2::Steering_control_a2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_control_a2)
}
Steering_control_a2::Steering_control_a2(const Steering_control_a2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steering_target_, &from.steering_target_,
    static_cast<size_t>(reinterpret_cast<char*>(&steering_enable_control_) -
    reinterpret_cast<char*>(&steering_target_)) + sizeof(steering_enable_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_control_a2)
}

void Steering_control_a2::SharedCtor() {
  ::memset(&steering_target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steering_enable_control_) -
      reinterpret_cast<char*>(&steering_target_)) + sizeof(steering_enable_control_));
}

Steering_control_a2::~Steering_control_a2() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_control_a2)
  SharedDtor();
}

void Steering_control_a2::SharedDtor() {
}

void Steering_control_a2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_control_a2& Steering_control_a2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_control_a2_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Steering_control_a2::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_control_a2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steering_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_enable_control_) -
        reinterpret_cast<char*>(&steering_target_)) + sizeof(steering_enable_control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_control_a2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double steering_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steering_target(&has_bits);
          steering_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_control_a2.Steering_enable_controlType steering_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Steering_control_a2_Steering_enable_controlType_IsValid(val))) {
            _internal_set_steering_enable_control(static_cast<::apollo::canbus::Steering_control_a2_Steering_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_control_a2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_control_a2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double steering_target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_steering_target(), target);
  }

  // optional .apollo.canbus.Steering_control_a2.Steering_enable_controlType steering_enable_control = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_steering_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_control_a2)
  return target;
}

size_t Steering_control_a2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_control_a2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double steering_target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Steering_control_a2.Steering_enable_controlType steering_enable_control = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_steering_enable_control());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_control_a2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_control_a2)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_control_a2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_control_a2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_control_a2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_control_a2)
    MergeFrom(*source);
  }
}

void Steering_control_a2::MergeFrom(const Steering_control_a2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_control_a2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steering_target_ = from.steering_target_;
    }
    if (cached_has_bits & 0x00000002u) {
      steering_enable_control_ = from.steering_enable_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_control_a2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_control_a2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_control_a2::CopyFrom(const Steering_control_a2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_control_a2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_control_a2::IsInitialized() const {
  return true;
}

void Steering_control_a2::InternalSwap(Steering_control_a2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steering_target_, other->steering_target_);
  swap(steering_enable_control_, other->steering_enable_control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_control_a2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Parking_control_a5::InitAsDefaultInstance() {
}
class Parking_control_a5::_Internal {
 public:
  using HasBits = decltype(std::declval<Parking_control_a5>()._has_bits_);
  static void set_has_parking_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parking_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Parking_control_a5::Parking_control_a5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Parking_control_a5)
}
Parking_control_a5::Parking_control_a5(const Parking_control_a5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parking_target_, &from.parking_target_,
    static_cast<size_t>(reinterpret_cast<char*>(&parking_enable_control_) -
    reinterpret_cast<char*>(&parking_target_)) + sizeof(parking_enable_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_control_a5)
}

void Parking_control_a5::SharedCtor() {
  ::memset(&parking_target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_enable_control_) -
      reinterpret_cast<char*>(&parking_target_)) + sizeof(parking_enable_control_));
}

Parking_control_a5::~Parking_control_a5() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_control_a5)
  SharedDtor();
}

void Parking_control_a5::SharedDtor() {
}

void Parking_control_a5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Parking_control_a5& Parking_control_a5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Parking_control_a5_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Parking_control_a5::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_control_a5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&parking_target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parking_enable_control_) -
        reinterpret_cast<char*>(&parking_target_)) + sizeof(parking_enable_control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Parking_control_a5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Parking_control_a5.Parking_targetType parking_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Parking_control_a5_Parking_targetType_IsValid(val))) {
            _internal_set_parking_target(static_cast<::apollo::canbus::Parking_control_a5_Parking_targetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_control_a5.Parking_enable_controlType parking_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Parking_control_a5_Parking_enable_controlType_IsValid(val))) {
            _internal_set_parking_enable_control(static_cast<::apollo::canbus::Parking_control_a5_Parking_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parking_control_a5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_control_a5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Parking_control_a5.Parking_targetType parking_target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parking_target(), target);
  }

  // optional .apollo.canbus.Parking_control_a5.Parking_enable_controlType parking_enable_control = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_parking_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_control_a5)
  return target;
}

size_t Parking_control_a5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_control_a5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Parking_control_a5.Parking_targetType parking_target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_target());
    }

    // optional .apollo.canbus.Parking_control_a5.Parking_enable_controlType parking_enable_control = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_enable_control());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parking_control_a5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Parking_control_a5)
  GOOGLE_DCHECK_NE(&from, this);
  const Parking_control_a5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parking_control_a5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Parking_control_a5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Parking_control_a5)
    MergeFrom(*source);
  }
}

void Parking_control_a5::MergeFrom(const Parking_control_a5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_control_a5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      parking_target_ = from.parking_target_;
    }
    if (cached_has_bits & 0x00000002u) {
      parking_enable_control_ = from.parking_enable_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Parking_control_a5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Parking_control_a5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parking_control_a5::CopyFrom(const Parking_control_a5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_control_a5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_control_a5::IsInitialized() const {
  return true;
}

void Parking_control_a5::InternalSwap(Parking_control_a5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parking_target_, other->parking_target_);
  swap(parking_enable_control_, other->parking_enable_control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parking_control_a5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_control_a4::InitAsDefaultInstance() {
}
class Brake_control_a4::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_control_a4>()._has_bits_);
  static void set_has_brake_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_enable_control(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_control_a4::Brake_control_a4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_control_a4)
}
Brake_control_a4::Brake_control_a4(const Brake_control_a4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_torque_, &from.brake_torque_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_enable_control_) -
    reinterpret_cast<char*>(&brake_torque_)) + sizeof(brake_enable_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_control_a4)
}

void Brake_control_a4::SharedCtor() {
  ::memset(&brake_torque_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_enable_control_) -
      reinterpret_cast<char*>(&brake_torque_)) + sizeof(brake_enable_control_));
}

Brake_control_a4::~Brake_control_a4() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_control_a4)
  SharedDtor();
}

void Brake_control_a4::SharedDtor() {
}

void Brake_control_a4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_control_a4& Brake_control_a4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_control_a4_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Brake_control_a4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_control_a4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&brake_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_enable_control_) -
        reinterpret_cast<char*>(&brake_torque_)) + sizeof(brake_enable_control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_control_a4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double brake_torque = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_brake_torque(&has_bits);
          brake_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_control_a4.Brake_enable_controlType brake_enable_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_control_a4_Brake_enable_controlType_IsValid(val))) {
            _internal_set_brake_enable_control(static_cast<::apollo::canbus::Brake_control_a4_Brake_enable_controlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_control_a4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_control_a4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_torque = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_brake_torque(), target);
  }

  // optional .apollo.canbus.Brake_control_a4.Brake_enable_controlType brake_enable_control = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_brake_enable_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_control_a4)
  return target;
}

size_t Brake_control_a4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_control_a4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double brake_torque = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Brake_control_a4.Brake_enable_controlType brake_enable_control = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brake_enable_control());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_control_a4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_control_a4)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_control_a4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_control_a4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_control_a4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_control_a4)
    MergeFrom(*source);
  }
}

void Brake_control_a4::MergeFrom(const Brake_control_a4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_control_a4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      brake_torque_ = from.brake_torque_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_enable_control_ = from.brake_enable_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_control_a4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_control_a4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_control_a4::CopyFrom(const Brake_control_a4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_control_a4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_control_a4::IsInitialized() const {
  return true;
}

void Brake_control_a4::InternalSwap(Brake_control_a4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_torque_, other->brake_torque_);
  swap(brake_enable_control_, other->brake_enable_control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_control_a4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Enable_state_feedback_c3::InitAsDefaultInstance() {
}
class Enable_state_feedback_c3::_Internal {
 public:
  using HasBits = decltype(std::declval<Enable_state_feedback_c3>()._has_bits_);
  static void set_has_parking_enable_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_enable_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_enable_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driven_enable_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brake_enable_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Enable_state_feedback_c3::Enable_state_feedback_c3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Enable_state_feedback_c3)
}
Enable_state_feedback_c3::Enable_state_feedback_c3(const Enable_state_feedback_c3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parking_enable_state_, &from.parking_enable_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_enable_state_) -
    reinterpret_cast<char*>(&parking_enable_state_)) + sizeof(brake_enable_state_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Enable_state_feedback_c3)
}

void Enable_state_feedback_c3::SharedCtor() {
  ::memset(&parking_enable_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_enable_state_) -
      reinterpret_cast<char*>(&parking_enable_state_)) + sizeof(brake_enable_state_));
}

Enable_state_feedback_c3::~Enable_state_feedback_c3() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Enable_state_feedback_c3)
  SharedDtor();
}

void Enable_state_feedback_c3::SharedDtor() {
}

void Enable_state_feedback_c3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Enable_state_feedback_c3& Enable_state_feedback_c3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Enable_state_feedback_c3_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Enable_state_feedback_c3::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Enable_state_feedback_c3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&parking_enable_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_enable_state_) -
        reinterpret_cast<char*>(&parking_enable_state_)) + sizeof(brake_enable_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Enable_state_feedback_c3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Enable_state_feedback_c3.Parking_enable_stateType parking_enable_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Parking_enable_stateType_IsValid(val))) {
            _internal_set_parking_enable_state(static_cast<::apollo::canbus::Enable_state_feedback_c3_Parking_enable_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3.Steering_enable_stateType steering_enable_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Steering_enable_stateType_IsValid(val))) {
            _internal_set_steering_enable_state(static_cast<::apollo::canbus::Enable_state_feedback_c3_Steering_enable_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3.Gear_enable_actualType gear_enable_actual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Gear_enable_actualType_IsValid(val))) {
            _internal_set_gear_enable_actual(static_cast<::apollo::canbus::Enable_state_feedback_c3_Gear_enable_actualType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3.Driven_enable_stateType driven_enable_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Driven_enable_stateType_IsValid(val))) {
            _internal_set_driven_enable_state(static_cast<::apollo::canbus::Enable_state_feedback_c3_Driven_enable_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3.Brake_enable_stateType brake_enable_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Enable_state_feedback_c3_Brake_enable_stateType_IsValid(val))) {
            _internal_set_brake_enable_state(static_cast<::apollo::canbus::Enable_state_feedback_c3_Brake_enable_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Enable_state_feedback_c3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Enable_state_feedback_c3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Enable_state_feedback_c3.Parking_enable_stateType parking_enable_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parking_enable_state(), target);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3.Steering_enable_stateType steering_enable_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_steering_enable_state(), target);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3.Gear_enable_actualType gear_enable_actual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gear_enable_actual(), target);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3.Driven_enable_stateType driven_enable_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_driven_enable_state(), target);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3.Brake_enable_stateType brake_enable_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_brake_enable_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Enable_state_feedback_c3)
  return target;
}

size_t Enable_state_feedback_c3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Enable_state_feedback_c3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Enable_state_feedback_c3.Parking_enable_stateType parking_enable_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_enable_state());
    }

    // optional .apollo.canbus.Enable_state_feedback_c3.Steering_enable_stateType steering_enable_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_steering_enable_state());
    }

    // optional .apollo.canbus.Enable_state_feedback_c3.Gear_enable_actualType gear_enable_actual = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_enable_actual());
    }

    // optional .apollo.canbus.Enable_state_feedback_c3.Driven_enable_stateType driven_enable_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driven_enable_state());
    }

    // optional .apollo.canbus.Enable_state_feedback_c3.Brake_enable_stateType brake_enable_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brake_enable_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Enable_state_feedback_c3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Enable_state_feedback_c3)
  GOOGLE_DCHECK_NE(&from, this);
  const Enable_state_feedback_c3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Enable_state_feedback_c3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Enable_state_feedback_c3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Enable_state_feedback_c3)
    MergeFrom(*source);
  }
}

void Enable_state_feedback_c3::MergeFrom(const Enable_state_feedback_c3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Enable_state_feedback_c3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      parking_enable_state_ = from.parking_enable_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      steering_enable_state_ = from.steering_enable_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_enable_actual_ = from.gear_enable_actual_;
    }
    if (cached_has_bits & 0x00000008u) {
      driven_enable_state_ = from.driven_enable_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      brake_enable_state_ = from.brake_enable_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Enable_state_feedback_c3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Enable_state_feedback_c3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enable_state_feedback_c3::CopyFrom(const Enable_state_feedback_c3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Enable_state_feedback_c3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enable_state_feedback_c3::IsInitialized() const {
  return true;
}

void Enable_state_feedback_c3::InternalSwap(Enable_state_feedback_c3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parking_enable_state_, other->parking_enable_state_);
  swap(steering_enable_state_, other->steering_enable_state_);
  swap(gear_enable_actual_, other->gear_enable_actual_);
  swap(driven_enable_state_, other->driven_enable_state_);
  swap(brake_enable_state_, other->brake_enable_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Enable_state_feedback_c3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle_state_feedback_c1::InitAsDefaultInstance() {
}
class Vehicle_state_feedback_c1::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_state_feedback_c1>()._has_bits_);
  static void set_has_parking_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brake_torque_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gear_state_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_steering_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Vehicle_state_feedback_c1::Vehicle_state_feedback_c1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Vehicle_state_feedback_c1)
}
Vehicle_state_feedback_c1::Vehicle_state_feedback_c1(const Vehicle_state_feedback_c1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_torque_feedback_, &from.brake_torque_feedback_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_state_actual_) -
    reinterpret_cast<char*>(&brake_torque_feedback_)) + sizeof(gear_state_actual_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_state_feedback_c1)
}

void Vehicle_state_feedback_c1::SharedCtor() {
  ::memset(&brake_torque_feedback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_actual_) -
      reinterpret_cast<char*>(&brake_torque_feedback_)) + sizeof(parking_actual_));
  gear_state_actual_ = 1;
}

Vehicle_state_feedback_c1::~Vehicle_state_feedback_c1() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_state_feedback_c1)
  SharedDtor();
}

void Vehicle_state_feedback_c1::SharedDtor() {
}

void Vehicle_state_feedback_c1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_state_feedback_c1& Vehicle_state_feedback_c1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_state_feedback_c1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_state_feedback_c1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_state_feedback_c1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&brake_torque_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parking_actual_) -
        reinterpret_cast<char*>(&brake_torque_feedback_)) + sizeof(parking_actual_));
    gear_state_actual_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle_state_feedback_c1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Vehicle_state_feedback_c1.Parking_actualType parking_actual = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vehicle_state_feedback_c1_Parking_actualType_IsValid(val))) {
            _internal_set_parking_actual(static_cast<::apollo::canbus::Vehicle_state_feedback_c1_Parking_actualType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double brake_torque_feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_brake_torque_feedback(&has_bits);
          brake_torque_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_state_feedback_c1.Gear_state_actualType gear_state_actual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vehicle_state_feedback_c1_Gear_state_actualType_IsValid(val))) {
            _internal_set_gear_state_actual(static_cast<::apollo::canbus::Vehicle_state_feedback_c1_Gear_state_actualType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double steering_actual = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_steering_actual(&has_bits);
          steering_actual_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_state_feedback_c1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_state_feedback_c1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Vehicle_state_feedback_c1.Parking_actualType parking_actual = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parking_actual(), target);
  }

  // optional double brake_torque_feedback = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_brake_torque_feedback(), target);
  }

  // optional .apollo.canbus.Vehicle_state_feedback_c1.Gear_state_actualType gear_state_actual = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gear_state_actual(), target);
  }

  // optional double steering_actual = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_steering_actual(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_state_feedback_c1)
  return target;
}

size_t Vehicle_state_feedback_c1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_state_feedback_c1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double brake_torque_feedback = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double steering_actual = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Vehicle_state_feedback_c1.Parking_actualType parking_actual = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_actual());
    }

    // optional .apollo.canbus.Vehicle_state_feedback_c1.Gear_state_actualType gear_state_actual = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_state_actual());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_state_feedback_c1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Vehicle_state_feedback_c1)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_state_feedback_c1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_state_feedback_c1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Vehicle_state_feedback_c1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Vehicle_state_feedback_c1)
    MergeFrom(*source);
  }
}

void Vehicle_state_feedback_c1::MergeFrom(const Vehicle_state_feedback_c1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_state_feedback_c1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      brake_torque_feedback_ = from.brake_torque_feedback_;
    }
    if (cached_has_bits & 0x00000002u) {
      steering_actual_ = from.steering_actual_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      parking_actual_ = from.parking_actual_;
    }
    if (cached_has_bits & 0x00000010u) {
      gear_state_actual_ = from.gear_state_actual_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle_state_feedback_c1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Vehicle_state_feedback_c1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_state_feedback_c1::CopyFrom(const Vehicle_state_feedback_c1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_state_feedback_c1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_state_feedback_c1::IsInitialized() const {
  return true;
}

void Vehicle_state_feedback_c1::InternalSwap(Vehicle_state_feedback_c1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_torque_feedback_, other->brake_torque_feedback_);
  swap(steering_actual_, other->steering_actual_);
  swap(speed_, other->speed_);
  swap(parking_actual_, other->parking_actual_);
  swap(gear_state_actual_, other->gear_state_actual_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_state_feedback_c1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Error_state_e1::InitAsDefaultInstance() {
}
class Error_state_e1::_Internal {
 public:
  using HasBits = decltype(std::declval<Error_state_e1>()._has_bits_);
  static void set_has_brake_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driven_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steering_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gear_error_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Error_state_e1::Error_state_e1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Error_state_e1)
}
Error_state_e1::Error_state_e1(const Error_state_e1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_error_code_, &from.brake_error_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_error_msg_) -
    reinterpret_cast<char*>(&brake_error_code_)) + sizeof(gear_error_msg_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Error_state_e1)
}

void Error_state_e1::SharedCtor() {
  ::memset(&brake_error_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_error_msg_) -
      reinterpret_cast<char*>(&brake_error_code_)) + sizeof(gear_error_msg_));
}

Error_state_e1::~Error_state_e1() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Error_state_e1)
  SharedDtor();
}

void Error_state_e1::SharedDtor() {
}

void Error_state_e1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error_state_e1& Error_state_e1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_state_e1_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Error_state_e1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Error_state_e1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&brake_error_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_error_msg_) -
        reinterpret_cast<char*>(&brake_error_code_)) + sizeof(gear_error_msg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Error_state_e1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Error_state_e1.Brake_error_codeType brake_error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Brake_error_codeType_IsValid(val))) {
            _internal_set_brake_error_code(static_cast<::apollo::canbus::Error_state_e1_Brake_error_codeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1.Driven_error_codeType driven_error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Driven_error_codeType_IsValid(val))) {
            _internal_set_driven_error_code(static_cast<::apollo::canbus::Error_state_e1_Driven_error_codeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1.Steering_error_codeType steering_error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Steering_error_codeType_IsValid(val))) {
            _internal_set_steering_error_code(static_cast<::apollo::canbus::Error_state_e1_Steering_error_codeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1.Parking_error_codeType parking_error_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Parking_error_codeType_IsValid(val))) {
            _internal_set_parking_error_code(static_cast<::apollo::canbus::Error_state_e1_Parking_error_codeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1.Gear_error_msgType gear_error_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Error_state_e1_Gear_error_msgType_IsValid(val))) {
            _internal_set_gear_error_msg(static_cast<::apollo::canbus::Error_state_e1_Gear_error_msgType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error_state_e1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Error_state_e1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Error_state_e1.Brake_error_codeType brake_error_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brake_error_code(), target);
  }

  // optional .apollo.canbus.Error_state_e1.Driven_error_codeType driven_error_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_driven_error_code(), target);
  }

  // optional .apollo.canbus.Error_state_e1.Steering_error_codeType steering_error_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_steering_error_code(), target);
  }

  // optional .apollo.canbus.Error_state_e1.Parking_error_codeType parking_error_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_parking_error_code(), target);
  }

  // optional .apollo.canbus.Error_state_e1.Gear_error_msgType gear_error_msg = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_gear_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Error_state_e1)
  return target;
}

size_t Error_state_e1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Error_state_e1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Error_state_e1.Brake_error_codeType brake_error_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brake_error_code());
    }

    // optional .apollo.canbus.Error_state_e1.Driven_error_codeType driven_error_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driven_error_code());
    }

    // optional .apollo.canbus.Error_state_e1.Steering_error_codeType steering_error_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_steering_error_code());
    }

    // optional .apollo.canbus.Error_state_e1.Parking_error_codeType parking_error_code = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_error_code());
    }

    // optional .apollo.canbus.Error_state_e1.Gear_error_msgType gear_error_msg = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_error_msg());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error_state_e1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Error_state_e1)
  GOOGLE_DCHECK_NE(&from, this);
  const Error_state_e1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error_state_e1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Error_state_e1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Error_state_e1)
    MergeFrom(*source);
  }
}

void Error_state_e1::MergeFrom(const Error_state_e1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Error_state_e1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      brake_error_code_ = from.brake_error_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      driven_error_code_ = from.driven_error_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      steering_error_code_ = from.steering_error_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      parking_error_code_ = from.parking_error_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      gear_error_msg_ = from.gear_error_msg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Error_state_e1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Error_state_e1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_state_e1::CopyFrom(const Error_state_e1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Error_state_e1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_state_e1::IsInitialized() const {
  return true;
}

void Error_state_e1::InternalSwap(Error_state_e1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_error_code_, other->brake_error_code_);
  swap(driven_error_code_, other->driven_error_code_);
  swap(steering_error_code_, other->steering_error_code_);
  swap(parking_error_code_, other->parking_error_code_);
  swap(gear_error_msg_, other->gear_error_msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error_state_e1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle_state_feedback_2_c4::InitAsDefaultInstance() {
}
class Vehicle_state_feedback_2_c4::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_state_feedback_2_c4>()._has_bits_);
  static void set_has_motor_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_driven_torque_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Vehicle_state_feedback_2_c4::Vehicle_state_feedback_2_c4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Vehicle_state_feedback_2_c4)
}
Vehicle_state_feedback_2_c4::Vehicle_state_feedback_2_c4(const Vehicle_state_feedback_2_c4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&driven_torque_feedback_, &from.driven_torque_feedback_,
    static_cast<size_t>(reinterpret_cast<char*>(&motor_speed_) -
    reinterpret_cast<char*>(&driven_torque_feedback_)) + sizeof(motor_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_state_feedback_2_c4)
}

void Vehicle_state_feedback_2_c4::SharedCtor() {
  ::memset(&driven_torque_feedback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor_speed_) -
      reinterpret_cast<char*>(&driven_torque_feedback_)) + sizeof(motor_speed_));
}

Vehicle_state_feedback_2_c4::~Vehicle_state_feedback_2_c4() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_state_feedback_2_c4)
  SharedDtor();
}

void Vehicle_state_feedback_2_c4::SharedDtor() {
}

void Vehicle_state_feedback_2_c4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_state_feedback_2_c4& Vehicle_state_feedback_2_c4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_state_feedback_2_c4_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_state_feedback_2_c4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&driven_torque_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&motor_speed_) -
        reinterpret_cast<char*>(&driven_torque_feedback_)) + sizeof(motor_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle_state_feedback_2_c4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 motor_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_motor_speed(&has_bits);
          motor_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double driven_torque_feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_driven_torque_feedback(&has_bits);
          driven_torque_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_state_feedback_2_c4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 motor_speed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_motor_speed(), target);
  }

  // optional double driven_torque_feedback = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_driven_torque_feedback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_state_feedback_2_c4)
  return target;
}

size_t Vehicle_state_feedback_2_c4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double driven_torque_feedback = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 motor_speed = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_motor_speed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_state_feedback_2_c4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_state_feedback_2_c4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_state_feedback_2_c4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Vehicle_state_feedback_2_c4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Vehicle_state_feedback_2_c4)
    MergeFrom(*source);
  }
}

void Vehicle_state_feedback_2_c4::MergeFrom(const Vehicle_state_feedback_2_c4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      driven_torque_feedback_ = from.driven_torque_feedback_;
    }
    if (cached_has_bits & 0x00000002u) {
      motor_speed_ = from.motor_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle_state_feedback_2_c4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_state_feedback_2_c4::CopyFrom(const Vehicle_state_feedback_2_c4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_state_feedback_2_c4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_state_feedback_2_c4::IsInitialized() const {
  return true;
}

void Vehicle_state_feedback_2_c4::InternalSwap(Vehicle_state_feedback_2_c4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(driven_torque_feedback_, other->driven_torque_feedback_);
  swap(motor_speed_, other->motor_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_state_feedback_2_c4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Zhongyun::InitAsDefaultInstance() {
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->gear_control_a1_ = const_cast< ::apollo::canbus::Gear_control_a1*>(
      ::apollo::canbus::Gear_control_a1::internal_default_instance());
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->torque_control_a3_ = const_cast< ::apollo::canbus::Torque_control_a3*>(
      ::apollo::canbus::Torque_control_a3::internal_default_instance());
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->steering_control_a2_ = const_cast< ::apollo::canbus::Steering_control_a2*>(
      ::apollo::canbus::Steering_control_a2::internal_default_instance());
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->parking_control_a5_ = const_cast< ::apollo::canbus::Parking_control_a5*>(
      ::apollo::canbus::Parking_control_a5::internal_default_instance());
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->brake_control_a4_ = const_cast< ::apollo::canbus::Brake_control_a4*>(
      ::apollo::canbus::Brake_control_a4::internal_default_instance());
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->enable_state_feedback_c3_ = const_cast< ::apollo::canbus::Enable_state_feedback_c3*>(
      ::apollo::canbus::Enable_state_feedback_c3::internal_default_instance());
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->vehicle_state_feedback_c1_ = const_cast< ::apollo::canbus::Vehicle_state_feedback_c1*>(
      ::apollo::canbus::Vehicle_state_feedback_c1::internal_default_instance());
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->error_state_e1_ = const_cast< ::apollo::canbus::Error_state_e1*>(
      ::apollo::canbus::Error_state_e1::internal_default_instance());
  ::apollo::canbus::_Zhongyun_default_instance_._instance.get_mutable()->vehicle_state_feedback_2_c4_ = const_cast< ::apollo::canbus::Vehicle_state_feedback_2_c4*>(
      ::apollo::canbus::Vehicle_state_feedback_2_c4::internal_default_instance());
}
class Zhongyun::_Internal {
 public:
  using HasBits = decltype(std::declval<Zhongyun>()._has_bits_);
  static const ::apollo::canbus::Gear_control_a1& gear_control_a1(const Zhongyun* msg);
  static void set_has_gear_control_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Torque_control_a3& torque_control_a3(const Zhongyun* msg);
  static void set_has_torque_control_a3(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Steering_control_a2& steering_control_a2(const Zhongyun* msg);
  static void set_has_steering_control_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Parking_control_a5& parking_control_a5(const Zhongyun* msg);
  static void set_has_parking_control_a5(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Brake_control_a4& brake_control_a4(const Zhongyun* msg);
  static void set_has_brake_control_a4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Enable_state_feedback_c3& enable_state_feedback_c3(const Zhongyun* msg);
  static void set_has_enable_state_feedback_c3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Vehicle_state_feedback_c1& vehicle_state_feedback_c1(const Zhongyun* msg);
  static void set_has_vehicle_state_feedback_c1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Error_state_e1& error_state_e1(const Zhongyun* msg);
  static void set_has_error_state_e1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Vehicle_state_feedback_2_c4& vehicle_state_feedback_2_c4(const Zhongyun* msg);
  static void set_has_vehicle_state_feedback_2_c4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::apollo::canbus::Gear_control_a1&
Zhongyun::_Internal::gear_control_a1(const Zhongyun* msg) {
  return *msg->gear_control_a1_;
}
const ::apollo::canbus::Torque_control_a3&
Zhongyun::_Internal::torque_control_a3(const Zhongyun* msg) {
  return *msg->torque_control_a3_;
}
const ::apollo::canbus::Steering_control_a2&
Zhongyun::_Internal::steering_control_a2(const Zhongyun* msg) {
  return *msg->steering_control_a2_;
}
const ::apollo::canbus::Parking_control_a5&
Zhongyun::_Internal::parking_control_a5(const Zhongyun* msg) {
  return *msg->parking_control_a5_;
}
const ::apollo::canbus::Brake_control_a4&
Zhongyun::_Internal::brake_control_a4(const Zhongyun* msg) {
  return *msg->brake_control_a4_;
}
const ::apollo::canbus::Enable_state_feedback_c3&
Zhongyun::_Internal::enable_state_feedback_c3(const Zhongyun* msg) {
  return *msg->enable_state_feedback_c3_;
}
const ::apollo::canbus::Vehicle_state_feedback_c1&
Zhongyun::_Internal::vehicle_state_feedback_c1(const Zhongyun* msg) {
  return *msg->vehicle_state_feedback_c1_;
}
const ::apollo::canbus::Error_state_e1&
Zhongyun::_Internal::error_state_e1(const Zhongyun* msg) {
  return *msg->error_state_e1_;
}
const ::apollo::canbus::Vehicle_state_feedback_2_c4&
Zhongyun::_Internal::vehicle_state_feedback_2_c4(const Zhongyun* msg) {
  return *msg->vehicle_state_feedback_2_c4_;
}
Zhongyun::Zhongyun()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Zhongyun)
}
Zhongyun::Zhongyun(const Zhongyun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_gear_control_a1()) {
    gear_control_a1_ = new ::apollo::canbus::Gear_control_a1(*from.gear_control_a1_);
  } else {
    gear_control_a1_ = nullptr;
  }
  if (from._internal_has_torque_control_a3()) {
    torque_control_a3_ = new ::apollo::canbus::Torque_control_a3(*from.torque_control_a3_);
  } else {
    torque_control_a3_ = nullptr;
  }
  if (from._internal_has_steering_control_a2()) {
    steering_control_a2_ = new ::apollo::canbus::Steering_control_a2(*from.steering_control_a2_);
  } else {
    steering_control_a2_ = nullptr;
  }
  if (from._internal_has_parking_control_a5()) {
    parking_control_a5_ = new ::apollo::canbus::Parking_control_a5(*from.parking_control_a5_);
  } else {
    parking_control_a5_ = nullptr;
  }
  if (from._internal_has_brake_control_a4()) {
    brake_control_a4_ = new ::apollo::canbus::Brake_control_a4(*from.brake_control_a4_);
  } else {
    brake_control_a4_ = nullptr;
  }
  if (from._internal_has_enable_state_feedback_c3()) {
    enable_state_feedback_c3_ = new ::apollo::canbus::Enable_state_feedback_c3(*from.enable_state_feedback_c3_);
  } else {
    enable_state_feedback_c3_ = nullptr;
  }
  if (from._internal_has_vehicle_state_feedback_c1()) {
    vehicle_state_feedback_c1_ = new ::apollo::canbus::Vehicle_state_feedback_c1(*from.vehicle_state_feedback_c1_);
  } else {
    vehicle_state_feedback_c1_ = nullptr;
  }
  if (from._internal_has_error_state_e1()) {
    error_state_e1_ = new ::apollo::canbus::Error_state_e1(*from.error_state_e1_);
  } else {
    error_state_e1_ = nullptr;
  }
  if (from._internal_has_vehicle_state_feedback_2_c4()) {
    vehicle_state_feedback_2_c4_ = new ::apollo::canbus::Vehicle_state_feedback_2_c4(*from.vehicle_state_feedback_2_c4_);
  } else {
    vehicle_state_feedback_2_c4_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Zhongyun)
}

void Zhongyun::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Zhongyun_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  ::memset(&gear_control_a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_state_feedback_2_c4_) -
      reinterpret_cast<char*>(&gear_control_a1_)) + sizeof(vehicle_state_feedback_2_c4_));
}

Zhongyun::~Zhongyun() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Zhongyun)
  SharedDtor();
}

void Zhongyun::SharedDtor() {
  if (this != internal_default_instance()) delete gear_control_a1_;
  if (this != internal_default_instance()) delete torque_control_a3_;
  if (this != internal_default_instance()) delete steering_control_a2_;
  if (this != internal_default_instance()) delete parking_control_a5_;
  if (this != internal_default_instance()) delete brake_control_a4_;
  if (this != internal_default_instance()) delete enable_state_feedback_c3_;
  if (this != internal_default_instance()) delete vehicle_state_feedback_c1_;
  if (this != internal_default_instance()) delete error_state_e1_;
  if (this != internal_default_instance()) delete vehicle_state_feedback_2_c4_;
}

void Zhongyun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Zhongyun& Zhongyun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Zhongyun_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base);
  return *internal_default_instance();
}


void Zhongyun::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Zhongyun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gear_control_a1_ != nullptr);
      gear_control_a1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(torque_control_a3_ != nullptr);
      torque_control_a3_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(steering_control_a2_ != nullptr);
      steering_control_a2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(parking_control_a5_ != nullptr);
      parking_control_a5_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(brake_control_a4_ != nullptr);
      brake_control_a4_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(enable_state_feedback_c3_ != nullptr);
      enable_state_feedback_c3_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(vehicle_state_feedback_c1_ != nullptr);
      vehicle_state_feedback_c1_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(error_state_e1_ != nullptr);
      error_state_e1_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(vehicle_state_feedback_2_c4_ != nullptr);
    vehicle_state_feedback_2_c4_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Zhongyun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Gear_control_a1 gear_control_a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear_control_a1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Torque_control_a3 torque_control_a3 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque_control_a3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_control_a2 steering_control_a2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_control_a2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_control_a5 parking_control_a5 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_control_a5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_control_a4 brake_control_a4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_control_a4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Enable_state_feedback_c3 enable_state_feedback_c3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_enable_state_feedback_c3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_state_feedback_c1 vehicle_state_feedback_c1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_state_feedback_c1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Error_state_e1 error_state_e1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_state_e1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_state_feedback_2_c4 vehicle_state_feedback_2_c4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_state_feedback_2_c4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Zhongyun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Zhongyun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Gear_control_a1 gear_control_a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gear_control_a1(this), target, stream);
  }

  // optional .apollo.canbus.Torque_control_a3 torque_control_a3 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::torque_control_a3(this), target, stream);
  }

  // optional .apollo.canbus.Steering_control_a2 steering_control_a2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::steering_control_a2(this), target, stream);
  }

  // optional .apollo.canbus.Parking_control_a5 parking_control_a5 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::parking_control_a5(this), target, stream);
  }

  // optional .apollo.canbus.Brake_control_a4 brake_control_a4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::brake_control_a4(this), target, stream);
  }

  // optional .apollo.canbus.Enable_state_feedback_c3 enable_state_feedback_c3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::enable_state_feedback_c3(this), target, stream);
  }

  // optional .apollo.canbus.Vehicle_state_feedback_c1 vehicle_state_feedback_c1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::vehicle_state_feedback_c1(this), target, stream);
  }

  // optional .apollo.canbus.Error_state_e1 error_state_e1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::error_state_e1(this), target, stream);
  }

  // optional .apollo.canbus.Vehicle_state_feedback_2_c4 vehicle_state_feedback_2_c4 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::vehicle_state_feedback_2_c4(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Zhongyun)
  return target;
}

size_t Zhongyun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Zhongyun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Gear_control_a1 gear_control_a1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gear_control_a1_);
    }

    // optional .apollo.canbus.Torque_control_a3 torque_control_a3 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *torque_control_a3_);
    }

    // optional .apollo.canbus.Steering_control_a2 steering_control_a2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_control_a2_);
    }

    // optional .apollo.canbus.Parking_control_a5 parking_control_a5 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_control_a5_);
    }

    // optional .apollo.canbus.Brake_control_a4 brake_control_a4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_control_a4_);
    }

    // optional .apollo.canbus.Enable_state_feedback_c3 enable_state_feedback_c3 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enable_state_feedback_c3_);
    }

    // optional .apollo.canbus.Vehicle_state_feedback_c1 vehicle_state_feedback_c1 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_state_feedback_c1_);
    }

    // optional .apollo.canbus.Error_state_e1 error_state_e1 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_state_e1_);
    }

  }
  // optional .apollo.canbus.Vehicle_state_feedback_2_c4 vehicle_state_feedback_2_c4 = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_state_feedback_2_c4_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Zhongyun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Zhongyun)
  GOOGLE_DCHECK_NE(&from, this);
  const Zhongyun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Zhongyun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Zhongyun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Zhongyun)
    MergeFrom(*source);
  }
}

void Zhongyun::MergeFrom(const Zhongyun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Zhongyun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gear_control_a1()->::apollo::canbus::Gear_control_a1::MergeFrom(from._internal_gear_control_a1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_torque_control_a3()->::apollo::canbus::Torque_control_a3::MergeFrom(from._internal_torque_control_a3());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_steering_control_a2()->::apollo::canbus::Steering_control_a2::MergeFrom(from._internal_steering_control_a2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_parking_control_a5()->::apollo::canbus::Parking_control_a5::MergeFrom(from._internal_parking_control_a5());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_brake_control_a4()->::apollo::canbus::Brake_control_a4::MergeFrom(from._internal_brake_control_a4());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_enable_state_feedback_c3()->::apollo::canbus::Enable_state_feedback_c3::MergeFrom(from._internal_enable_state_feedback_c3());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_vehicle_state_feedback_c1()->::apollo::canbus::Vehicle_state_feedback_c1::MergeFrom(from._internal_vehicle_state_feedback_c1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_error_state_e1()->::apollo::canbus::Error_state_e1::MergeFrom(from._internal_error_state_e1());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_vehicle_state_feedback_2_c4()->::apollo::canbus::Vehicle_state_feedback_2_c4::MergeFrom(from._internal_vehicle_state_feedback_2_c4());
  }
}

void Zhongyun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Zhongyun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zhongyun::CopyFrom(const Zhongyun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Zhongyun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zhongyun::IsInitialized() const {
  return true;
}

void Zhongyun::InternalSwap(Zhongyun* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gear_control_a1_, other->gear_control_a1_);
  swap(torque_control_a3_, other->torque_control_a3_);
  swap(steering_control_a2_, other->steering_control_a2_);
  swap(parking_control_a5_, other->parking_control_a5_);
  swap(brake_control_a4_, other->brake_control_a4_);
  swap(enable_state_feedback_c3_, other->enable_state_feedback_c3_);
  swap(vehicle_state_feedback_c1_, other->vehicle_state_feedback_c1_);
  swap(error_state_e1_, other->error_state_e1_);
  swap(vehicle_state_feedback_2_c4_, other->vehicle_state_feedback_2_c4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Zhongyun::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gear_control_a1* Arena::CreateMaybeMessage< ::apollo::canbus::Gear_control_a1 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gear_control_a1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Torque_control_a3* Arena::CreateMaybeMessage< ::apollo::canbus::Torque_control_a3 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Torque_control_a3 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_control_a2* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_control_a2 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_control_a2 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Parking_control_a5* Arena::CreateMaybeMessage< ::apollo::canbus::Parking_control_a5 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Parking_control_a5 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_control_a4* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_control_a4 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_control_a4 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Enable_state_feedback_c3* Arena::CreateMaybeMessage< ::apollo::canbus::Enable_state_feedback_c3 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Enable_state_feedback_c3 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vehicle_state_feedback_c1* Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_state_feedback_c1 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Vehicle_state_feedback_c1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Error_state_e1* Arena::CreateMaybeMessage< ::apollo::canbus::Error_state_e1 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Error_state_e1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vehicle_state_feedback_2_c4* Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_state_feedback_2_c4 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Vehicle_state_feedback_2_c4 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Zhongyun* Arena::CreateMaybeMessage< ::apollo::canbus::Zhongyun >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Zhongyun >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
