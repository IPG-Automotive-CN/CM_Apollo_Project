// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/transit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2ftransit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2ftransit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto;
namespace apollo {
namespace canbus {
class Adc_auxiliarycontrol_110;
class Adc_auxiliarycontrol_110DefaultTypeInternal;
extern Adc_auxiliarycontrol_110DefaultTypeInternal _Adc_auxiliarycontrol_110_default_instance_;
class Adc_motioncontrol1_10;
class Adc_motioncontrol1_10DefaultTypeInternal;
extern Adc_motioncontrol1_10DefaultTypeInternal _Adc_motioncontrol1_10_default_instance_;
class Adc_motioncontrollimits1_12;
class Adc_motioncontrollimits1_12DefaultTypeInternal;
extern Adc_motioncontrollimits1_12DefaultTypeInternal _Adc_motioncontrollimits1_12_default_instance_;
class Llc_auxiliaryfeedback_120;
class Llc_auxiliaryfeedback_120DefaultTypeInternal;
extern Llc_auxiliaryfeedback_120DefaultTypeInternal _Llc_auxiliaryfeedback_120_default_instance_;
class Llc_diag_brakecontrol_721;
class Llc_diag_brakecontrol_721DefaultTypeInternal;
extern Llc_diag_brakecontrol_721DefaultTypeInternal _Llc_diag_brakecontrol_721_default_instance_;
class Llc_diag_fault_620;
class Llc_diag_fault_620DefaultTypeInternal;
extern Llc_diag_fault_620DefaultTypeInternal _Llc_diag_fault_620_default_instance_;
class Llc_diag_steeringcontrol_722;
class Llc_diag_steeringcontrol_722DefaultTypeInternal;
extern Llc_diag_steeringcontrol_722DefaultTypeInternal _Llc_diag_steeringcontrol_722_default_instance_;
class Llc_motioncommandfeedback1_22;
class Llc_motioncommandfeedback1_22DefaultTypeInternal;
extern Llc_motioncommandfeedback1_22DefaultTypeInternal _Llc_motioncommandfeedback1_22_default_instance_;
class Llc_motionfeedback1_20;
class Llc_motionfeedback1_20DefaultTypeInternal;
extern Llc_motionfeedback1_20DefaultTypeInternal _Llc_motionfeedback1_20_default_instance_;
class Llc_motionfeedback2_21;
class Llc_motionfeedback2_21DefaultTypeInternal;
extern Llc_motionfeedback2_21DefaultTypeInternal _Llc_motionfeedback2_21_default_instance_;
class Llc_vehiclelimits_24;
class Llc_vehiclelimits_24DefaultTypeInternal;
extern Llc_vehiclelimits_24DefaultTypeInternal _Llc_vehiclelimits_24_default_instance_;
class Llc_vehiclestatus_25;
class Llc_vehiclestatus_25DefaultTypeInternal;
extern Llc_vehiclestatus_25DefaultTypeInternal _Llc_vehiclestatus_25_default_instance_;
class Transit;
class TransitDefaultTypeInternal;
extern TransitDefaultTypeInternal _Transit_default_instance_;
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::canbus::Adc_auxiliarycontrol_110* Arena::CreateMaybeMessage<::apollo::canbus::Adc_auxiliarycontrol_110>(Arena*);
template<> ::apollo::canbus::Adc_motioncontrol1_10* Arena::CreateMaybeMessage<::apollo::canbus::Adc_motioncontrol1_10>(Arena*);
template<> ::apollo::canbus::Adc_motioncontrollimits1_12* Arena::CreateMaybeMessage<::apollo::canbus::Adc_motioncontrollimits1_12>(Arena*);
template<> ::apollo::canbus::Llc_auxiliaryfeedback_120* Arena::CreateMaybeMessage<::apollo::canbus::Llc_auxiliaryfeedback_120>(Arena*);
template<> ::apollo::canbus::Llc_diag_brakecontrol_721* Arena::CreateMaybeMessage<::apollo::canbus::Llc_diag_brakecontrol_721>(Arena*);
template<> ::apollo::canbus::Llc_diag_fault_620* Arena::CreateMaybeMessage<::apollo::canbus::Llc_diag_fault_620>(Arena*);
template<> ::apollo::canbus::Llc_diag_steeringcontrol_722* Arena::CreateMaybeMessage<::apollo::canbus::Llc_diag_steeringcontrol_722>(Arena*);
template<> ::apollo::canbus::Llc_motioncommandfeedback1_22* Arena::CreateMaybeMessage<::apollo::canbus::Llc_motioncommandfeedback1_22>(Arena*);
template<> ::apollo::canbus::Llc_motionfeedback1_20* Arena::CreateMaybeMessage<::apollo::canbus::Llc_motionfeedback1_20>(Arena*);
template<> ::apollo::canbus::Llc_motionfeedback2_21* Arena::CreateMaybeMessage<::apollo::canbus::Llc_motionfeedback2_21>(Arena*);
template<> ::apollo::canbus::Llc_vehiclelimits_24* Arena::CreateMaybeMessage<::apollo::canbus::Llc_vehiclelimits_24>(Arena*);
template<> ::apollo::canbus::Llc_vehiclestatus_25* Arena::CreateMaybeMessage<::apollo::canbus::Llc_vehiclestatus_25>(Arena*);
template<> ::apollo::canbus::Transit* Arena::CreateMaybeMessage<::apollo::canbus::Transit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace canbus {

enum Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType : int {
  Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_NONE = 0,
  Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_ANGLE = 1,
  Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_RESERVED_CURVATURE = 2,
  Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_RESERVED = 3
};
bool Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_IsValid(int value);
constexpr Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Adc_cmd_steeringcontrolmodeType_MIN = Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_NONE;
constexpr Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Adc_cmd_steeringcontrolmodeType_MAX = Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_RESERVED;
constexpr int Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Adc_cmd_steeringcontrolmodeType_ARRAYSIZE = Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Adc_cmd_steeringcontrolmodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_descriptor();
template<typename T>
inline const std::string& Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_descriptor(), enum_t_value);
}
inline bool Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Parse(
    const std::string& name, Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType>(
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_descriptor(), name, value);
}
enum Adc_motioncontrol1_10_Adc_cmd_gearType : int {
  Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_P_PARK = 0,
  Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_D_DRIVE = 1,
  Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_N_NEUTRAL = 2,
  Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_R_REVERSE = 3
};
bool Adc_motioncontrol1_10_Adc_cmd_gearType_IsValid(int value);
constexpr Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10_Adc_cmd_gearType_Adc_cmd_gearType_MIN = Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_P_PARK;
constexpr Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10_Adc_cmd_gearType_Adc_cmd_gearType_MAX = Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_R_REVERSE;
constexpr int Adc_motioncontrol1_10_Adc_cmd_gearType_Adc_cmd_gearType_ARRAYSIZE = Adc_motioncontrol1_10_Adc_cmd_gearType_Adc_cmd_gearType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_motioncontrol1_10_Adc_cmd_gearType_descriptor();
template<typename T>
inline const std::string& Adc_motioncontrol1_10_Adc_cmd_gearType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Adc_motioncontrol1_10_Adc_cmd_gearType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Adc_motioncontrol1_10_Adc_cmd_gearType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Adc_motioncontrol1_10_Adc_cmd_gearType_descriptor(), enum_t_value);
}
inline bool Adc_motioncontrol1_10_Adc_cmd_gearType_Parse(
    const std::string& name, Adc_motioncontrol1_10_Adc_cmd_gearType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Adc_motioncontrol1_10_Adc_cmd_gearType>(
    Adc_motioncontrol1_10_Adc_cmd_gearType_descriptor(), name, value);
}
enum Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType : int {
  Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_AUTONOMY_NOT_REQUESTED = 0,
  Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_AUTONOMY_REQUESTED = 1,
  Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_RESERVED0 = 2,
  Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_RESERVED1 = 3
};
bool Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_IsValid(int value);
constexpr Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Adc_cmd_autonomyrequestType_MIN = Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_AUTONOMY_NOT_REQUESTED;
constexpr Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Adc_cmd_autonomyrequestType_MAX = Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_RESERVED1;
constexpr int Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Adc_cmd_autonomyrequestType_ARRAYSIZE = Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Adc_cmd_autonomyrequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_descriptor();
template<typename T>
inline const std::string& Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_descriptor(), enum_t_value);
}
inline bool Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Parse(
    const std::string& name, Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType>(
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_descriptor(), name, value);
}
enum Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType : int {
  Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_NONE = 0,
  Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION = 1,
  Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_FORCE = 2,
  Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE = 3
};
bool Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_IsValid(int value);
constexpr Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Adc_cmd_longitudinalcontrolmodeType_MIN = Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_NONE;
constexpr Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Adc_cmd_longitudinalcontrolmodeType_MAX = Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE;
constexpr int Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Adc_cmd_longitudinalcontrolmodeType_ARRAYSIZE = Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Adc_cmd_longitudinalcontrolmodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_descriptor();
template<typename T>
inline const std::string& Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_descriptor(), enum_t_value);
}
inline bool Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Parse(
    const std::string& name, Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType>(
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_descriptor(), name, value);
}
enum Llc_motionfeedback1_20_Llc_fbk_gearType : int {
  Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_P_PARK = 0,
  Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_D_DRIVE = 1,
  Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_N_NEUTRAL = 2,
  Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_R_REVERSE = 3
};
bool Llc_motionfeedback1_20_Llc_fbk_gearType_IsValid(int value);
constexpr Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20_Llc_fbk_gearType_Llc_fbk_gearType_MIN = Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_P_PARK;
constexpr Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20_Llc_fbk_gearType_Llc_fbk_gearType_MAX = Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_R_REVERSE;
constexpr int Llc_motionfeedback1_20_Llc_fbk_gearType_Llc_fbk_gearType_ARRAYSIZE = Llc_motionfeedback1_20_Llc_fbk_gearType_Llc_fbk_gearType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_motionfeedback1_20_Llc_fbk_gearType_descriptor();
template<typename T>
inline const std::string& Llc_motionfeedback1_20_Llc_fbk_gearType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Llc_motionfeedback1_20_Llc_fbk_gearType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Llc_motionfeedback1_20_Llc_fbk_gearType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Llc_motionfeedback1_20_Llc_fbk_gearType_descriptor(), enum_t_value);
}
inline bool Llc_motionfeedback1_20_Llc_fbk_gearType_Parse(
    const std::string& name, Llc_motionfeedback1_20_Llc_fbk_gearType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Llc_motionfeedback1_20_Llc_fbk_gearType>(
    Llc_motionfeedback1_20_Llc_fbk_gearType_descriptor(), name, value);
}
enum Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType : int {
  Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_NONE = 0,
  Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_ANGLE = 1,
  Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_RESERVED_CURVATURE = 2,
  Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_RESERVED = 3
};
bool Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_IsValid(int value);
constexpr Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Llc_fbk_steeringcontrolmodeType_MIN = Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_NONE;
constexpr Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Llc_fbk_steeringcontrolmodeType_MAX = Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_RESERVED;
constexpr int Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Llc_fbk_steeringcontrolmodeType_ARRAYSIZE = Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Llc_fbk_steeringcontrolmodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_descriptor();
template<typename T>
inline const std::string& Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_descriptor(), enum_t_value);
}
inline bool Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Parse(
    const std::string& name, Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType>(
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_descriptor(), name, value);
}
enum Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType : int {
  Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_NONE = 0,
  Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION = 1,
  Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_FORCE = 2,
  Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE = 3
};
bool Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_IsValid(int value);
constexpr Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Llc_fbk_longitudinalcontrolmodeType_MIN = Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_NONE;
constexpr Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Llc_fbk_longitudinalcontrolmodeType_MAX = Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE;
constexpr int Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Llc_fbk_longitudinalcontrolmodeType_ARRAYSIZE = Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Llc_fbk_longitudinalcontrolmodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_descriptor();
template<typename T>
inline const std::string& Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_descriptor(), enum_t_value);
}
inline bool Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Parse(
    const std::string& name, Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType>(
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_descriptor(), name, value);
}
enum Llc_motionfeedback1_20_Llc_fbk_stateType : int {
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED0 = 0,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_AUTONOMY_NOT_ALLOWED = 1,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_AUTONOMY_ALLOWED = 2,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_AUTONOMY_REQUESTED = 3,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_AUTONOMY = 4,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED1 = 5,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED2 = 6,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED3 = 7,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED4 = 8,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED5 = 9,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED6 = 10,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED7 = 11,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED8 = 12,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_DISENGAGE_REQUESTED = 13,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_DISENGAGED = 14,
  Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_FAULT = 15
};
bool Llc_motionfeedback1_20_Llc_fbk_stateType_IsValid(int value);
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20_Llc_fbk_stateType_Llc_fbk_stateType_MIN = Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED0;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20_Llc_fbk_stateType_Llc_fbk_stateType_MAX = Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_FAULT;
constexpr int Llc_motionfeedback1_20_Llc_fbk_stateType_Llc_fbk_stateType_ARRAYSIZE = Llc_motionfeedback1_20_Llc_fbk_stateType_Llc_fbk_stateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_motionfeedback1_20_Llc_fbk_stateType_descriptor();
template<typename T>
inline const std::string& Llc_motionfeedback1_20_Llc_fbk_stateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Llc_motionfeedback1_20_Llc_fbk_stateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Llc_motionfeedback1_20_Llc_fbk_stateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Llc_motionfeedback1_20_Llc_fbk_stateType_descriptor(), enum_t_value);
}
inline bool Llc_motionfeedback1_20_Llc_fbk_stateType_Parse(
    const std::string& name, Llc_motionfeedback1_20_Llc_fbk_stateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Llc_motionfeedback1_20_Llc_fbk_stateType>(
    Llc_motionfeedback1_20_Llc_fbk_stateType_descriptor(), name, value);
}
enum Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType : int {
  Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_NONE = 0,
  Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_LEFT = 1,
  Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_RIGHT = 2,
  Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_RESERVE = 3
};
bool Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_IsValid(int value);
constexpr Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Llc_fbk_turnsignalType_MIN = Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_NONE;
constexpr Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Llc_fbk_turnsignalType_MAX = Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_RESERVE;
constexpr int Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Llc_fbk_turnsignalType_ARRAYSIZE = Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Llc_fbk_turnsignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_descriptor();
template<typename T>
inline const std::string& Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_descriptor(), enum_t_value);
}
inline bool Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Parse(
    const std::string& name, Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType>(
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_descriptor(), name, value);
}
enum Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType : int {
  Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_NONE = 0,
  Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_LEFT = 1,
  Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_RIGHT = 2,
  Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_RESERVE = 3
};
bool Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_IsValid(int value);
constexpr Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Adc_cmd_turnsignalType_MIN = Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_NONE;
constexpr Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Adc_cmd_turnsignalType_MAX = Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_RESERVE;
constexpr int Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Adc_cmd_turnsignalType_ARRAYSIZE = Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Adc_cmd_turnsignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_descriptor();
template<typename T>
inline const std::string& Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_descriptor(), enum_t_value);
}
inline bool Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Parse(
    const std::string& name, Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType>(
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_descriptor(), name, value);
}
// ===================================================================

class Llc_vehiclelimits_24 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_vehiclelimits_24) */ {
 public:
  Llc_vehiclelimits_24();
  virtual ~Llc_vehiclelimits_24();

  Llc_vehiclelimits_24(const Llc_vehiclelimits_24& from);
  Llc_vehiclelimits_24(Llc_vehiclelimits_24&& from) noexcept
    : Llc_vehiclelimits_24() {
    *this = ::std::move(from);
  }

  inline Llc_vehiclelimits_24& operator=(const Llc_vehiclelimits_24& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_vehiclelimits_24& operator=(Llc_vehiclelimits_24&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_vehiclelimits_24& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_vehiclelimits_24* internal_default_instance() {
    return reinterpret_cast<const Llc_vehiclelimits_24*>(
               &_Llc_vehiclelimits_24_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Llc_vehiclelimits_24& a, Llc_vehiclelimits_24& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_vehiclelimits_24* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_vehiclelimits_24* New() const final {
    return CreateMaybeMessage<Llc_vehiclelimits_24>(nullptr);
  }

  Llc_vehiclelimits_24* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_vehiclelimits_24>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_vehiclelimits_24& from);
  void MergeFrom(const Llc_vehiclelimits_24& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_vehiclelimits_24* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_vehiclelimits_24";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlcFbkMaxbrakepercentFieldNumber = 2,
    kLlcFbkMaxsteeringangleFieldNumber = 1,
  };
  // optional double llc_fbk_maxbrakepercent = 2;
  bool has_llc_fbk_maxbrakepercent() const;
  private:
  bool _internal_has_llc_fbk_maxbrakepercent() const;
  public:
  void clear_llc_fbk_maxbrakepercent();
  double llc_fbk_maxbrakepercent() const;
  void set_llc_fbk_maxbrakepercent(double value);
  private:
  double _internal_llc_fbk_maxbrakepercent() const;
  void _internal_set_llc_fbk_maxbrakepercent(double value);
  public:

  // optional int32 llc_fbk_maxsteeringangle = 1;
  bool has_llc_fbk_maxsteeringangle() const;
  private:
  bool _internal_has_llc_fbk_maxsteeringangle() const;
  public:
  void clear_llc_fbk_maxsteeringangle();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_maxsteeringangle() const;
  void set_llc_fbk_maxsteeringangle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_fbk_maxsteeringangle() const;
  void _internal_set_llc_fbk_maxsteeringangle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_vehiclelimits_24)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double llc_fbk_maxbrakepercent_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_maxsteeringangle_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Adc_motioncontrol1_10 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Adc_motioncontrol1_10) */ {
 public:
  Adc_motioncontrol1_10();
  virtual ~Adc_motioncontrol1_10();

  Adc_motioncontrol1_10(const Adc_motioncontrol1_10& from);
  Adc_motioncontrol1_10(Adc_motioncontrol1_10&& from) noexcept
    : Adc_motioncontrol1_10() {
    *this = ::std::move(from);
  }

  inline Adc_motioncontrol1_10& operator=(const Adc_motioncontrol1_10& from) {
    CopyFrom(from);
    return *this;
  }
  inline Adc_motioncontrol1_10& operator=(Adc_motioncontrol1_10&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Adc_motioncontrol1_10& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Adc_motioncontrol1_10* internal_default_instance() {
    return reinterpret_cast<const Adc_motioncontrol1_10*>(
               &_Adc_motioncontrol1_10_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Adc_motioncontrol1_10& a, Adc_motioncontrol1_10& b) {
    a.Swap(&b);
  }
  inline void Swap(Adc_motioncontrol1_10* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Adc_motioncontrol1_10* New() const final {
    return CreateMaybeMessage<Adc_motioncontrol1_10>(nullptr);
  }

  Adc_motioncontrol1_10* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Adc_motioncontrol1_10>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Adc_motioncontrol1_10& from);
  void MergeFrom(const Adc_motioncontrol1_10& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Adc_motioncontrol1_10* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Adc_motioncontrol1_10";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_cmd_steeringcontrolmodeType;
  static constexpr Adc_cmd_steeringcontrolmodeType ADC_CMD_STEERINGCONTROLMODE_NONE =
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_NONE;
  static constexpr Adc_cmd_steeringcontrolmodeType ADC_CMD_STEERINGCONTROLMODE_ANGLE =
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_ANGLE;
  static constexpr Adc_cmd_steeringcontrolmodeType ADC_CMD_STEERINGCONTROLMODE_RESERVED_CURVATURE =
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_RESERVED_CURVATURE;
  static constexpr Adc_cmd_steeringcontrolmodeType ADC_CMD_STEERINGCONTROLMODE_RESERVED =
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_ADC_CMD_STEERINGCONTROLMODE_RESERVED;
  static inline bool Adc_cmd_steeringcontrolmodeType_IsValid(int value) {
    return Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_IsValid(value);
  }
  static constexpr Adc_cmd_steeringcontrolmodeType Adc_cmd_steeringcontrolmodeType_MIN =
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Adc_cmd_steeringcontrolmodeType_MIN;
  static constexpr Adc_cmd_steeringcontrolmodeType Adc_cmd_steeringcontrolmodeType_MAX =
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Adc_cmd_steeringcontrolmodeType_MAX;
  static constexpr int Adc_cmd_steeringcontrolmodeType_ARRAYSIZE =
    Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Adc_cmd_steeringcontrolmodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Adc_cmd_steeringcontrolmodeType_descriptor() {
    return Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Adc_cmd_steeringcontrolmodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Adc_cmd_steeringcontrolmodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Adc_cmd_steeringcontrolmodeType_Name.");
    return Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Name(enum_t_value);
  }
  static inline bool Adc_cmd_steeringcontrolmodeType_Parse(const std::string& name,
      Adc_cmd_steeringcontrolmodeType* value) {
    return Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_Parse(name, value);
  }

  typedef Adc_motioncontrol1_10_Adc_cmd_gearType Adc_cmd_gearType;
  static constexpr Adc_cmd_gearType ADC_CMD_GEAR_P_PARK =
    Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_P_PARK;
  static constexpr Adc_cmd_gearType ADC_CMD_GEAR_D_DRIVE =
    Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_D_DRIVE;
  static constexpr Adc_cmd_gearType ADC_CMD_GEAR_N_NEUTRAL =
    Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_N_NEUTRAL;
  static constexpr Adc_cmd_gearType ADC_CMD_GEAR_R_REVERSE =
    Adc_motioncontrol1_10_Adc_cmd_gearType_ADC_CMD_GEAR_R_REVERSE;
  static inline bool Adc_cmd_gearType_IsValid(int value) {
    return Adc_motioncontrol1_10_Adc_cmd_gearType_IsValid(value);
  }
  static constexpr Adc_cmd_gearType Adc_cmd_gearType_MIN =
    Adc_motioncontrol1_10_Adc_cmd_gearType_Adc_cmd_gearType_MIN;
  static constexpr Adc_cmd_gearType Adc_cmd_gearType_MAX =
    Adc_motioncontrol1_10_Adc_cmd_gearType_Adc_cmd_gearType_MAX;
  static constexpr int Adc_cmd_gearType_ARRAYSIZE =
    Adc_motioncontrol1_10_Adc_cmd_gearType_Adc_cmd_gearType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Adc_cmd_gearType_descriptor() {
    return Adc_motioncontrol1_10_Adc_cmd_gearType_descriptor();
  }
  template<typename T>
  static inline const std::string& Adc_cmd_gearType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Adc_cmd_gearType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Adc_cmd_gearType_Name.");
    return Adc_motioncontrol1_10_Adc_cmd_gearType_Name(enum_t_value);
  }
  static inline bool Adc_cmd_gearType_Parse(const std::string& name,
      Adc_cmd_gearType* value) {
    return Adc_motioncontrol1_10_Adc_cmd_gearType_Parse(name, value);
  }

  typedef Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_cmd_autonomyrequestType;
  static constexpr Adc_cmd_autonomyrequestType ADC_CMD_AUTONOMYREQUEST_AUTONOMY_NOT_REQUESTED =
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_AUTONOMY_NOT_REQUESTED;
  static constexpr Adc_cmd_autonomyrequestType ADC_CMD_AUTONOMYREQUEST_AUTONOMY_REQUESTED =
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_AUTONOMY_REQUESTED;
  static constexpr Adc_cmd_autonomyrequestType ADC_CMD_AUTONOMYREQUEST_RESERVED0 =
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_RESERVED0;
  static constexpr Adc_cmd_autonomyrequestType ADC_CMD_AUTONOMYREQUEST_RESERVED1 =
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_ADC_CMD_AUTONOMYREQUEST_RESERVED1;
  static inline bool Adc_cmd_autonomyrequestType_IsValid(int value) {
    return Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_IsValid(value);
  }
  static constexpr Adc_cmd_autonomyrequestType Adc_cmd_autonomyrequestType_MIN =
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Adc_cmd_autonomyrequestType_MIN;
  static constexpr Adc_cmd_autonomyrequestType Adc_cmd_autonomyrequestType_MAX =
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Adc_cmd_autonomyrequestType_MAX;
  static constexpr int Adc_cmd_autonomyrequestType_ARRAYSIZE =
    Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Adc_cmd_autonomyrequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Adc_cmd_autonomyrequestType_descriptor() {
    return Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& Adc_cmd_autonomyrequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Adc_cmd_autonomyrequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Adc_cmd_autonomyrequestType_Name.");
    return Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Name(enum_t_value);
  }
  static inline bool Adc_cmd_autonomyrequestType_Parse(const std::string& name,
      Adc_cmd_autonomyrequestType* value) {
    return Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_Parse(name, value);
  }

  typedef Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_cmd_longitudinalcontrolmodeType;
  static constexpr Adc_cmd_longitudinalcontrolmodeType ADC_CMD_LONGITUDINALCONTROLMODE_NONE =
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_NONE;
  static constexpr Adc_cmd_longitudinalcontrolmodeType ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION =
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION;
  static constexpr Adc_cmd_longitudinalcontrolmodeType ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_FORCE =
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_FORCE;
  static constexpr Adc_cmd_longitudinalcontrolmodeType ADC_CMD_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE =
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_ADC_CMD_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE;
  static inline bool Adc_cmd_longitudinalcontrolmodeType_IsValid(int value) {
    return Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_IsValid(value);
  }
  static constexpr Adc_cmd_longitudinalcontrolmodeType Adc_cmd_longitudinalcontrolmodeType_MIN =
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Adc_cmd_longitudinalcontrolmodeType_MIN;
  static constexpr Adc_cmd_longitudinalcontrolmodeType Adc_cmd_longitudinalcontrolmodeType_MAX =
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Adc_cmd_longitudinalcontrolmodeType_MAX;
  static constexpr int Adc_cmd_longitudinalcontrolmodeType_ARRAYSIZE =
    Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Adc_cmd_longitudinalcontrolmodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Adc_cmd_longitudinalcontrolmodeType_descriptor() {
    return Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Adc_cmd_longitudinalcontrolmodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Adc_cmd_longitudinalcontrolmodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Adc_cmd_longitudinalcontrolmodeType_Name.");
    return Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Name(enum_t_value);
  }
  static inline bool Adc_cmd_longitudinalcontrolmodeType_Parse(const std::string& name,
      Adc_cmd_longitudinalcontrolmodeType* value) {
    return Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdcCmdSteerwheelangleFieldNumber = 1,
    kAdcCmdSteeringcontrolmodeFieldNumber = 2,
    kAdcCmdParkingbrakeFieldNumber = 3,
    kAdcCmdGearFieldNumber = 4,
    kAdcMotioncontrol1ChecksumFieldNumber = 5,
    kAdcCmdBrakepercentageFieldNumber = 6,
    kAdcCmdThrottlepositionFieldNumber = 7,
    kAdcMotioncontrol1CounterFieldNumber = 8,
    kAdcCmdAutonomyrequestFieldNumber = 9,
    kAdcCmdLongitudinalcontrolmodeFieldNumber = 10,
  };
  // optional double adc_cmd_steerwheelangle = 1;
  bool has_adc_cmd_steerwheelangle() const;
  private:
  bool _internal_has_adc_cmd_steerwheelangle() const;
  public:
  void clear_adc_cmd_steerwheelangle();
  double adc_cmd_steerwheelangle() const;
  void set_adc_cmd_steerwheelangle(double value);
  private:
  double _internal_adc_cmd_steerwheelangle() const;
  void _internal_set_adc_cmd_steerwheelangle(double value);
  public:

  // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_steeringcontrolmodeType adc_cmd_steeringcontrolmode = 2;
  bool has_adc_cmd_steeringcontrolmode() const;
  private:
  bool _internal_has_adc_cmd_steeringcontrolmode() const;
  public:
  void clear_adc_cmd_steeringcontrolmode();
  ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType adc_cmd_steeringcontrolmode() const;
  void set_adc_cmd_steeringcontrolmode(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType value);
  private:
  ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType _internal_adc_cmd_steeringcontrolmode() const;
  void _internal_set_adc_cmd_steeringcontrolmode(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType value);
  public:

  // optional bool adc_cmd_parkingbrake = 3;
  bool has_adc_cmd_parkingbrake() const;
  private:
  bool _internal_has_adc_cmd_parkingbrake() const;
  public:
  void clear_adc_cmd_parkingbrake();
  bool adc_cmd_parkingbrake() const;
  void set_adc_cmd_parkingbrake(bool value);
  private:
  bool _internal_adc_cmd_parkingbrake() const;
  void _internal_set_adc_cmd_parkingbrake(bool value);
  public:

  // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_gearType adc_cmd_gear = 4;
  bool has_adc_cmd_gear() const;
  private:
  bool _internal_has_adc_cmd_gear() const;
  public:
  void clear_adc_cmd_gear();
  ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType adc_cmd_gear() const;
  void set_adc_cmd_gear(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType value);
  private:
  ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType _internal_adc_cmd_gear() const;
  void _internal_set_adc_cmd_gear(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType value);
  public:

  // optional int32 adc_motioncontrol1_checksum = 5;
  bool has_adc_motioncontrol1_checksum() const;
  private:
  bool _internal_has_adc_motioncontrol1_checksum() const;
  public:
  void clear_adc_motioncontrol1_checksum();
  ::PROTOBUF_NAMESPACE_ID::int32 adc_motioncontrol1_checksum() const;
  void set_adc_motioncontrol1_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adc_motioncontrol1_checksum() const;
  void _internal_set_adc_motioncontrol1_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double adc_cmd_brakepercentage = 6;
  bool has_adc_cmd_brakepercentage() const;
  private:
  bool _internal_has_adc_cmd_brakepercentage() const;
  public:
  void clear_adc_cmd_brakepercentage();
  double adc_cmd_brakepercentage() const;
  void set_adc_cmd_brakepercentage(double value);
  private:
  double _internal_adc_cmd_brakepercentage() const;
  void _internal_set_adc_cmd_brakepercentage(double value);
  public:

  // optional double adc_cmd_throttleposition = 7;
  bool has_adc_cmd_throttleposition() const;
  private:
  bool _internal_has_adc_cmd_throttleposition() const;
  public:
  void clear_adc_cmd_throttleposition();
  double adc_cmd_throttleposition() const;
  void set_adc_cmd_throttleposition(double value);
  private:
  double _internal_adc_cmd_throttleposition() const;
  void _internal_set_adc_cmd_throttleposition(double value);
  public:

  // optional int32 adc_motioncontrol1_counter = 8;
  bool has_adc_motioncontrol1_counter() const;
  private:
  bool _internal_has_adc_motioncontrol1_counter() const;
  public:
  void clear_adc_motioncontrol1_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 adc_motioncontrol1_counter() const;
  void set_adc_motioncontrol1_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adc_motioncontrol1_counter() const;
  void _internal_set_adc_motioncontrol1_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_autonomyrequestType adc_cmd_autonomyrequest = 9;
  bool has_adc_cmd_autonomyrequest() const;
  private:
  bool _internal_has_adc_cmd_autonomyrequest() const;
  public:
  void clear_adc_cmd_autonomyrequest();
  ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType adc_cmd_autonomyrequest() const;
  void set_adc_cmd_autonomyrequest(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType value);
  private:
  ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType _internal_adc_cmd_autonomyrequest() const;
  void _internal_set_adc_cmd_autonomyrequest(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType value);
  public:

  // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_longitudinalcontrolmodeType adc_cmd_longitudinalcontrolmode = 10;
  bool has_adc_cmd_longitudinalcontrolmode() const;
  private:
  bool _internal_has_adc_cmd_longitudinalcontrolmode() const;
  public:
  void clear_adc_cmd_longitudinalcontrolmode();
  ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType adc_cmd_longitudinalcontrolmode() const;
  void set_adc_cmd_longitudinalcontrolmode(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType value);
  private:
  ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType _internal_adc_cmd_longitudinalcontrolmode() const;
  void _internal_set_adc_cmd_longitudinalcontrolmode(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Adc_motioncontrol1_10)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double adc_cmd_steerwheelangle_;
  int adc_cmd_steeringcontrolmode_;
  bool adc_cmd_parkingbrake_;
  int adc_cmd_gear_;
  ::PROTOBUF_NAMESPACE_ID::int32 adc_motioncontrol1_checksum_;
  double adc_cmd_brakepercentage_;
  double adc_cmd_throttleposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 adc_motioncontrol1_counter_;
  int adc_cmd_autonomyrequest_;
  int adc_cmd_longitudinalcontrolmode_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Adc_motioncontrollimits1_12 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Adc_motioncontrollimits1_12) */ {
 public:
  Adc_motioncontrollimits1_12();
  virtual ~Adc_motioncontrollimits1_12();

  Adc_motioncontrollimits1_12(const Adc_motioncontrollimits1_12& from);
  Adc_motioncontrollimits1_12(Adc_motioncontrollimits1_12&& from) noexcept
    : Adc_motioncontrollimits1_12() {
    *this = ::std::move(from);
  }

  inline Adc_motioncontrollimits1_12& operator=(const Adc_motioncontrollimits1_12& from) {
    CopyFrom(from);
    return *this;
  }
  inline Adc_motioncontrollimits1_12& operator=(Adc_motioncontrollimits1_12&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Adc_motioncontrollimits1_12& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Adc_motioncontrollimits1_12* internal_default_instance() {
    return reinterpret_cast<const Adc_motioncontrollimits1_12*>(
               &_Adc_motioncontrollimits1_12_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Adc_motioncontrollimits1_12& a, Adc_motioncontrollimits1_12& b) {
    a.Swap(&b);
  }
  inline void Swap(Adc_motioncontrollimits1_12* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Adc_motioncontrollimits1_12* New() const final {
    return CreateMaybeMessage<Adc_motioncontrollimits1_12>(nullptr);
  }

  Adc_motioncontrollimits1_12* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Adc_motioncontrollimits1_12>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Adc_motioncontrollimits1_12& from);
  void MergeFrom(const Adc_motioncontrollimits1_12& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Adc_motioncontrollimits1_12* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Adc_motioncontrollimits1_12";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdcCmdThrottlecommandlimitFieldNumber = 1,
    kAdcCmdSteeringrateFieldNumber = 2,
    kAdcCmdSteerwheelanglelimitFieldNumber = 3,
  };
  // optional double adc_cmd_throttlecommandlimit = 1;
  bool has_adc_cmd_throttlecommandlimit() const;
  private:
  bool _internal_has_adc_cmd_throttlecommandlimit() const;
  public:
  void clear_adc_cmd_throttlecommandlimit();
  double adc_cmd_throttlecommandlimit() const;
  void set_adc_cmd_throttlecommandlimit(double value);
  private:
  double _internal_adc_cmd_throttlecommandlimit() const;
  void _internal_set_adc_cmd_throttlecommandlimit(double value);
  public:

  // optional double adc_cmd_steeringrate = 2;
  bool has_adc_cmd_steeringrate() const;
  private:
  bool _internal_has_adc_cmd_steeringrate() const;
  public:
  void clear_adc_cmd_steeringrate();
  double adc_cmd_steeringrate() const;
  void set_adc_cmd_steeringrate(double value);
  private:
  double _internal_adc_cmd_steeringrate() const;
  void _internal_set_adc_cmd_steeringrate(double value);
  public:

  // optional double adc_cmd_steerwheelanglelimit = 3;
  bool has_adc_cmd_steerwheelanglelimit() const;
  private:
  bool _internal_has_adc_cmd_steerwheelanglelimit() const;
  public:
  void clear_adc_cmd_steerwheelanglelimit();
  double adc_cmd_steerwheelanglelimit() const;
  void set_adc_cmd_steerwheelanglelimit(double value);
  private:
  double _internal_adc_cmd_steerwheelanglelimit() const;
  void _internal_set_adc_cmd_steerwheelanglelimit(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Adc_motioncontrollimits1_12)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double adc_cmd_throttlecommandlimit_;
  double adc_cmd_steeringrate_;
  double adc_cmd_steerwheelanglelimit_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Llc_motionfeedback1_20 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_motionfeedback1_20) */ {
 public:
  Llc_motionfeedback1_20();
  virtual ~Llc_motionfeedback1_20();

  Llc_motionfeedback1_20(const Llc_motionfeedback1_20& from);
  Llc_motionfeedback1_20(Llc_motionfeedback1_20&& from) noexcept
    : Llc_motionfeedback1_20() {
    *this = ::std::move(from);
  }

  inline Llc_motionfeedback1_20& operator=(const Llc_motionfeedback1_20& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_motionfeedback1_20& operator=(Llc_motionfeedback1_20&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_motionfeedback1_20& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_motionfeedback1_20* internal_default_instance() {
    return reinterpret_cast<const Llc_motionfeedback1_20*>(
               &_Llc_motionfeedback1_20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Llc_motionfeedback1_20& a, Llc_motionfeedback1_20& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_motionfeedback1_20* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_motionfeedback1_20* New() const final {
    return CreateMaybeMessage<Llc_motionfeedback1_20>(nullptr);
  }

  Llc_motionfeedback1_20* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_motionfeedback1_20>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_motionfeedback1_20& from);
  void MergeFrom(const Llc_motionfeedback1_20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_motionfeedback1_20* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_motionfeedback1_20";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Llc_motionfeedback1_20_Llc_fbk_gearType Llc_fbk_gearType;
  static constexpr Llc_fbk_gearType LLC_FBK_GEAR_P_PARK =
    Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_P_PARK;
  static constexpr Llc_fbk_gearType LLC_FBK_GEAR_D_DRIVE =
    Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_D_DRIVE;
  static constexpr Llc_fbk_gearType LLC_FBK_GEAR_N_NEUTRAL =
    Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_N_NEUTRAL;
  static constexpr Llc_fbk_gearType LLC_FBK_GEAR_R_REVERSE =
    Llc_motionfeedback1_20_Llc_fbk_gearType_LLC_FBK_GEAR_R_REVERSE;
  static inline bool Llc_fbk_gearType_IsValid(int value) {
    return Llc_motionfeedback1_20_Llc_fbk_gearType_IsValid(value);
  }
  static constexpr Llc_fbk_gearType Llc_fbk_gearType_MIN =
    Llc_motionfeedback1_20_Llc_fbk_gearType_Llc_fbk_gearType_MIN;
  static constexpr Llc_fbk_gearType Llc_fbk_gearType_MAX =
    Llc_motionfeedback1_20_Llc_fbk_gearType_Llc_fbk_gearType_MAX;
  static constexpr int Llc_fbk_gearType_ARRAYSIZE =
    Llc_motionfeedback1_20_Llc_fbk_gearType_Llc_fbk_gearType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Llc_fbk_gearType_descriptor() {
    return Llc_motionfeedback1_20_Llc_fbk_gearType_descriptor();
  }
  template<typename T>
  static inline const std::string& Llc_fbk_gearType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Llc_fbk_gearType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Llc_fbk_gearType_Name.");
    return Llc_motionfeedback1_20_Llc_fbk_gearType_Name(enum_t_value);
  }
  static inline bool Llc_fbk_gearType_Parse(const std::string& name,
      Llc_fbk_gearType* value) {
    return Llc_motionfeedback1_20_Llc_fbk_gearType_Parse(name, value);
  }

  typedef Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_fbk_steeringcontrolmodeType;
  static constexpr Llc_fbk_steeringcontrolmodeType LLC_FBK_STEERINGCONTROLMODE_NONE =
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_NONE;
  static constexpr Llc_fbk_steeringcontrolmodeType LLC_FBK_STEERINGCONTROLMODE_ANGLE =
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_ANGLE;
  static constexpr Llc_fbk_steeringcontrolmodeType LLC_FBK_STEERINGCONTROLMODE_RESERVED_CURVATURE =
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_RESERVED_CURVATURE;
  static constexpr Llc_fbk_steeringcontrolmodeType LLC_FBK_STEERINGCONTROLMODE_RESERVED =
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_LLC_FBK_STEERINGCONTROLMODE_RESERVED;
  static inline bool Llc_fbk_steeringcontrolmodeType_IsValid(int value) {
    return Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_IsValid(value);
  }
  static constexpr Llc_fbk_steeringcontrolmodeType Llc_fbk_steeringcontrolmodeType_MIN =
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Llc_fbk_steeringcontrolmodeType_MIN;
  static constexpr Llc_fbk_steeringcontrolmodeType Llc_fbk_steeringcontrolmodeType_MAX =
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Llc_fbk_steeringcontrolmodeType_MAX;
  static constexpr int Llc_fbk_steeringcontrolmodeType_ARRAYSIZE =
    Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Llc_fbk_steeringcontrolmodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Llc_fbk_steeringcontrolmodeType_descriptor() {
    return Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Llc_fbk_steeringcontrolmodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Llc_fbk_steeringcontrolmodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Llc_fbk_steeringcontrolmodeType_Name.");
    return Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Name(enum_t_value);
  }
  static inline bool Llc_fbk_steeringcontrolmodeType_Parse(const std::string& name,
      Llc_fbk_steeringcontrolmodeType* value) {
    return Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_Parse(name, value);
  }

  typedef Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_fbk_longitudinalcontrolmodeType;
  static constexpr Llc_fbk_longitudinalcontrolmodeType LLC_FBK_LONGITUDINALCONTROLMODE_NONE =
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_NONE;
  static constexpr Llc_fbk_longitudinalcontrolmodeType LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION =
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION;
  static constexpr Llc_fbk_longitudinalcontrolmodeType LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_FORCE =
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_FORCE;
  static constexpr Llc_fbk_longitudinalcontrolmodeType LLC_FBK_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE =
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_LLC_FBK_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE;
  static inline bool Llc_fbk_longitudinalcontrolmodeType_IsValid(int value) {
    return Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_IsValid(value);
  }
  static constexpr Llc_fbk_longitudinalcontrolmodeType Llc_fbk_longitudinalcontrolmodeType_MIN =
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Llc_fbk_longitudinalcontrolmodeType_MIN;
  static constexpr Llc_fbk_longitudinalcontrolmodeType Llc_fbk_longitudinalcontrolmodeType_MAX =
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Llc_fbk_longitudinalcontrolmodeType_MAX;
  static constexpr int Llc_fbk_longitudinalcontrolmodeType_ARRAYSIZE =
    Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Llc_fbk_longitudinalcontrolmodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Llc_fbk_longitudinalcontrolmodeType_descriptor() {
    return Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Llc_fbk_longitudinalcontrolmodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Llc_fbk_longitudinalcontrolmodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Llc_fbk_longitudinalcontrolmodeType_Name.");
    return Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Name(enum_t_value);
  }
  static inline bool Llc_fbk_longitudinalcontrolmodeType_Parse(const std::string& name,
      Llc_fbk_longitudinalcontrolmodeType* value) {
    return Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_Parse(name, value);
  }

  typedef Llc_motionfeedback1_20_Llc_fbk_stateType Llc_fbk_stateType;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED0 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED0;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_AUTONOMY_NOT_ALLOWED =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_AUTONOMY_NOT_ALLOWED;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_AUTONOMY_ALLOWED =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_AUTONOMY_ALLOWED;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_AUTONOMY_REQUESTED =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_AUTONOMY_REQUESTED;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_AUTONOMY =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_AUTONOMY;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED1 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED1;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED2 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED2;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED3 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED3;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED4 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED4;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED5 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED5;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED6 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED6;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED7 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED7;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_RESERVED8 =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_RESERVED8;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_DISENGAGE_REQUESTED =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_DISENGAGE_REQUESTED;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_DISENGAGED =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_DISENGAGED;
  static constexpr Llc_fbk_stateType LLC_FBK_STATE_FAULT =
    Llc_motionfeedback1_20_Llc_fbk_stateType_LLC_FBK_STATE_FAULT;
  static inline bool Llc_fbk_stateType_IsValid(int value) {
    return Llc_motionfeedback1_20_Llc_fbk_stateType_IsValid(value);
  }
  static constexpr Llc_fbk_stateType Llc_fbk_stateType_MIN =
    Llc_motionfeedback1_20_Llc_fbk_stateType_Llc_fbk_stateType_MIN;
  static constexpr Llc_fbk_stateType Llc_fbk_stateType_MAX =
    Llc_motionfeedback1_20_Llc_fbk_stateType_Llc_fbk_stateType_MAX;
  static constexpr int Llc_fbk_stateType_ARRAYSIZE =
    Llc_motionfeedback1_20_Llc_fbk_stateType_Llc_fbk_stateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Llc_fbk_stateType_descriptor() {
    return Llc_motionfeedback1_20_Llc_fbk_stateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Llc_fbk_stateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Llc_fbk_stateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Llc_fbk_stateType_Name.");
    return Llc_motionfeedback1_20_Llc_fbk_stateType_Name(enum_t_value);
  }
  static inline bool Llc_fbk_stateType_Parse(const std::string& name,
      Llc_fbk_stateType* value) {
    return Llc_motionfeedback1_20_Llc_fbk_stateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLlcFbkThrottlepositionFieldNumber = 3,
    kLlcFbkGearFieldNumber = 1,
    kLlcFbkSteeringcontrolmodeFieldNumber = 6,
    kLlcFbkBrakepercentrearFieldNumber = 4,
    kLlcFbkBrakepercentfrontFieldNumber = 5,
    kLlcMotionfeedback1CounterFieldNumber = 7,
    kLlcMotionfeedback1ChecksumFieldNumber = 8,
    kLlcFbkParkingbrakeFieldNumber = 2,
    kLlcFbkCommandalignedFieldNumber = 9,
    kLlcFbkEstoppressedFieldNumber = 10,
    kLlcFbkAdcrequestautonomyFieldNumber = 11,
    kLlcFbkAllowautonomyFieldNumber = 12,
    kLlcFbkLongitudinalcontrolmodeFieldNumber = 13,
    kLlcFbkStateFieldNumber = 14,
  };
  // optional double llc_fbk_throttleposition = 3;
  bool has_llc_fbk_throttleposition() const;
  private:
  bool _internal_has_llc_fbk_throttleposition() const;
  public:
  void clear_llc_fbk_throttleposition();
  double llc_fbk_throttleposition() const;
  void set_llc_fbk_throttleposition(double value);
  private:
  double _internal_llc_fbk_throttleposition() const;
  void _internal_set_llc_fbk_throttleposition(double value);
  public:

  // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_gearType llc_fbk_gear = 1;
  bool has_llc_fbk_gear() const;
  private:
  bool _internal_has_llc_fbk_gear() const;
  public:
  void clear_llc_fbk_gear();
  ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType llc_fbk_gear() const;
  void set_llc_fbk_gear(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType value);
  private:
  ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType _internal_llc_fbk_gear() const;
  void _internal_set_llc_fbk_gear(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType value);
  public:

  // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_steeringcontrolmodeType llc_fbk_steeringcontrolmode = 6;
  bool has_llc_fbk_steeringcontrolmode() const;
  private:
  bool _internal_has_llc_fbk_steeringcontrolmode() const;
  public:
  void clear_llc_fbk_steeringcontrolmode();
  ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType llc_fbk_steeringcontrolmode() const;
  void set_llc_fbk_steeringcontrolmode(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType value);
  private:
  ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType _internal_llc_fbk_steeringcontrolmode() const;
  void _internal_set_llc_fbk_steeringcontrolmode(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType value);
  public:

  // optional double llc_fbk_brakepercentrear = 4;
  bool has_llc_fbk_brakepercentrear() const;
  private:
  bool _internal_has_llc_fbk_brakepercentrear() const;
  public:
  void clear_llc_fbk_brakepercentrear();
  double llc_fbk_brakepercentrear() const;
  void set_llc_fbk_brakepercentrear(double value);
  private:
  double _internal_llc_fbk_brakepercentrear() const;
  void _internal_set_llc_fbk_brakepercentrear(double value);
  public:

  // optional double llc_fbk_brakepercentfront = 5;
  bool has_llc_fbk_brakepercentfront() const;
  private:
  bool _internal_has_llc_fbk_brakepercentfront() const;
  public:
  void clear_llc_fbk_brakepercentfront();
  double llc_fbk_brakepercentfront() const;
  void set_llc_fbk_brakepercentfront(double value);
  private:
  double _internal_llc_fbk_brakepercentfront() const;
  void _internal_set_llc_fbk_brakepercentfront(double value);
  public:

  // optional int32 llc_motionfeedback1_counter = 7;
  bool has_llc_motionfeedback1_counter() const;
  private:
  bool _internal_has_llc_motionfeedback1_counter() const;
  public:
  void clear_llc_motionfeedback1_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motionfeedback1_counter() const;
  void set_llc_motionfeedback1_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_motionfeedback1_counter() const;
  void _internal_set_llc_motionfeedback1_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_motionfeedback1_checksum = 8;
  bool has_llc_motionfeedback1_checksum() const;
  private:
  bool _internal_has_llc_motionfeedback1_checksum() const;
  public:
  void clear_llc_motionfeedback1_checksum();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motionfeedback1_checksum() const;
  void set_llc_motionfeedback1_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_motionfeedback1_checksum() const;
  void _internal_set_llc_motionfeedback1_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool llc_fbk_parkingbrake = 2;
  bool has_llc_fbk_parkingbrake() const;
  private:
  bool _internal_has_llc_fbk_parkingbrake() const;
  public:
  void clear_llc_fbk_parkingbrake();
  bool llc_fbk_parkingbrake() const;
  void set_llc_fbk_parkingbrake(bool value);
  private:
  bool _internal_llc_fbk_parkingbrake() const;
  void _internal_set_llc_fbk_parkingbrake(bool value);
  public:

  // optional bool llc_fbk_commandaligned = 9;
  bool has_llc_fbk_commandaligned() const;
  private:
  bool _internal_has_llc_fbk_commandaligned() const;
  public:
  void clear_llc_fbk_commandaligned();
  bool llc_fbk_commandaligned() const;
  void set_llc_fbk_commandaligned(bool value);
  private:
  bool _internal_llc_fbk_commandaligned() const;
  void _internal_set_llc_fbk_commandaligned(bool value);
  public:

  // optional bool llc_fbk_estoppressed = 10;
  bool has_llc_fbk_estoppressed() const;
  private:
  bool _internal_has_llc_fbk_estoppressed() const;
  public:
  void clear_llc_fbk_estoppressed();
  bool llc_fbk_estoppressed() const;
  void set_llc_fbk_estoppressed(bool value);
  private:
  bool _internal_llc_fbk_estoppressed() const;
  void _internal_set_llc_fbk_estoppressed(bool value);
  public:

  // optional bool llc_fbk_adcrequestautonomy = 11;
  bool has_llc_fbk_adcrequestautonomy() const;
  private:
  bool _internal_has_llc_fbk_adcrequestautonomy() const;
  public:
  void clear_llc_fbk_adcrequestautonomy();
  bool llc_fbk_adcrequestautonomy() const;
  void set_llc_fbk_adcrequestautonomy(bool value);
  private:
  bool _internal_llc_fbk_adcrequestautonomy() const;
  void _internal_set_llc_fbk_adcrequestautonomy(bool value);
  public:

  // optional bool llc_fbk_allowautonomy = 12;
  bool has_llc_fbk_allowautonomy() const;
  private:
  bool _internal_has_llc_fbk_allowautonomy() const;
  public:
  void clear_llc_fbk_allowautonomy();
  bool llc_fbk_allowautonomy() const;
  void set_llc_fbk_allowautonomy(bool value);
  private:
  bool _internal_llc_fbk_allowautonomy() const;
  void _internal_set_llc_fbk_allowautonomy(bool value);
  public:

  // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_longitudinalcontrolmodeType llc_fbk_longitudinalcontrolmode = 13;
  bool has_llc_fbk_longitudinalcontrolmode() const;
  private:
  bool _internal_has_llc_fbk_longitudinalcontrolmode() const;
  public:
  void clear_llc_fbk_longitudinalcontrolmode();
  ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType llc_fbk_longitudinalcontrolmode() const;
  void set_llc_fbk_longitudinalcontrolmode(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType value);
  private:
  ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType _internal_llc_fbk_longitudinalcontrolmode() const;
  void _internal_set_llc_fbk_longitudinalcontrolmode(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType value);
  public:

  // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_stateType llc_fbk_state = 14;
  bool has_llc_fbk_state() const;
  private:
  bool _internal_has_llc_fbk_state() const;
  public:
  void clear_llc_fbk_state();
  ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType llc_fbk_state() const;
  void set_llc_fbk_state(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType value);
  private:
  ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType _internal_llc_fbk_state() const;
  void _internal_set_llc_fbk_state(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_motionfeedback1_20)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double llc_fbk_throttleposition_;
  int llc_fbk_gear_;
  int llc_fbk_steeringcontrolmode_;
  double llc_fbk_brakepercentrear_;
  double llc_fbk_brakepercentfront_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motionfeedback1_counter_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motionfeedback1_checksum_;
  bool llc_fbk_parkingbrake_;
  bool llc_fbk_commandaligned_;
  bool llc_fbk_estoppressed_;
  bool llc_fbk_adcrequestautonomy_;
  bool llc_fbk_allowautonomy_;
  int llc_fbk_longitudinalcontrolmode_;
  int llc_fbk_state_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Llc_motionfeedback2_21 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_motionfeedback2_21) */ {
 public:
  Llc_motionfeedback2_21();
  virtual ~Llc_motionfeedback2_21();

  Llc_motionfeedback2_21(const Llc_motionfeedback2_21& from);
  Llc_motionfeedback2_21(Llc_motionfeedback2_21&& from) noexcept
    : Llc_motionfeedback2_21() {
    *this = ::std::move(from);
  }

  inline Llc_motionfeedback2_21& operator=(const Llc_motionfeedback2_21& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_motionfeedback2_21& operator=(Llc_motionfeedback2_21&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_motionfeedback2_21& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_motionfeedback2_21* internal_default_instance() {
    return reinterpret_cast<const Llc_motionfeedback2_21*>(
               &_Llc_motionfeedback2_21_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Llc_motionfeedback2_21& a, Llc_motionfeedback2_21& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_motionfeedback2_21* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_motionfeedback2_21* New() const final {
    return CreateMaybeMessage<Llc_motionfeedback2_21>(nullptr);
  }

  Llc_motionfeedback2_21* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_motionfeedback2_21>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_motionfeedback2_21& from);
  void MergeFrom(const Llc_motionfeedback2_21& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_motionfeedback2_21* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_motionfeedback2_21";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlcFbkVehiclespeedFieldNumber = 1,
    kLlcMotionfeedback2CounterFieldNumber = 2,
    kLlcMotionfeedback2ChecksumFieldNumber = 3,
    kLlcFbkSteeringrateFieldNumber = 4,
    kLlcFbkSteeringangleFieldNumber = 5,
  };
  // optional double llc_fbk_vehiclespeed = 1;
  bool has_llc_fbk_vehiclespeed() const;
  private:
  bool _internal_has_llc_fbk_vehiclespeed() const;
  public:
  void clear_llc_fbk_vehiclespeed();
  double llc_fbk_vehiclespeed() const;
  void set_llc_fbk_vehiclespeed(double value);
  private:
  double _internal_llc_fbk_vehiclespeed() const;
  void _internal_set_llc_fbk_vehiclespeed(double value);
  public:

  // optional int32 llc_motionfeedback2_counter = 2;
  bool has_llc_motionfeedback2_counter() const;
  private:
  bool _internal_has_llc_motionfeedback2_counter() const;
  public:
  void clear_llc_motionfeedback2_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motionfeedback2_counter() const;
  void set_llc_motionfeedback2_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_motionfeedback2_counter() const;
  void _internal_set_llc_motionfeedback2_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_motionfeedback2_checksum = 3;
  bool has_llc_motionfeedback2_checksum() const;
  private:
  bool _internal_has_llc_motionfeedback2_checksum() const;
  public:
  void clear_llc_motionfeedback2_checksum();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motionfeedback2_checksum() const;
  void set_llc_motionfeedback2_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_motionfeedback2_checksum() const;
  void _internal_set_llc_motionfeedback2_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double llc_fbk_steeringrate = 4;
  bool has_llc_fbk_steeringrate() const;
  private:
  bool _internal_has_llc_fbk_steeringrate() const;
  public:
  void clear_llc_fbk_steeringrate();
  double llc_fbk_steeringrate() const;
  void set_llc_fbk_steeringrate(double value);
  private:
  double _internal_llc_fbk_steeringrate() const;
  void _internal_set_llc_fbk_steeringrate(double value);
  public:

  // optional double llc_fbk_steeringangle = 5;
  bool has_llc_fbk_steeringangle() const;
  private:
  bool _internal_has_llc_fbk_steeringangle() const;
  public:
  void clear_llc_fbk_steeringangle();
  double llc_fbk_steeringangle() const;
  void set_llc_fbk_steeringangle(double value);
  private:
  double _internal_llc_fbk_steeringangle() const;
  void _internal_set_llc_fbk_steeringangle(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_motionfeedback2_21)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double llc_fbk_vehiclespeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motionfeedback2_counter_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motionfeedback2_checksum_;
  double llc_fbk_steeringrate_;
  double llc_fbk_steeringangle_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Llc_motioncommandfeedback1_22 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_motioncommandfeedback1_22) */ {
 public:
  Llc_motioncommandfeedback1_22();
  virtual ~Llc_motioncommandfeedback1_22();

  Llc_motioncommandfeedback1_22(const Llc_motioncommandfeedback1_22& from);
  Llc_motioncommandfeedback1_22(Llc_motioncommandfeedback1_22&& from) noexcept
    : Llc_motioncommandfeedback1_22() {
    *this = ::std::move(from);
  }

  inline Llc_motioncommandfeedback1_22& operator=(const Llc_motioncommandfeedback1_22& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_motioncommandfeedback1_22& operator=(Llc_motioncommandfeedback1_22&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_motioncommandfeedback1_22& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_motioncommandfeedback1_22* internal_default_instance() {
    return reinterpret_cast<const Llc_motioncommandfeedback1_22*>(
               &_Llc_motioncommandfeedback1_22_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Llc_motioncommandfeedback1_22& a, Llc_motioncommandfeedback1_22& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_motioncommandfeedback1_22* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_motioncommandfeedback1_22* New() const final {
    return CreateMaybeMessage<Llc_motioncommandfeedback1_22>(nullptr);
  }

  Llc_motioncommandfeedback1_22* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_motioncommandfeedback1_22>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_motioncommandfeedback1_22& from);
  void MergeFrom(const Llc_motioncommandfeedback1_22& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_motioncommandfeedback1_22* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_motioncommandfeedback1_22";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlcFbkSteeringanglesetpointFieldNumber = 1,
    kLlcFbkThrottlesetpointFieldNumber = 2,
    kLlcFbkBrakepercentsetpointFieldNumber = 3,
    kLlcMotioncommandfeedback1CountFieldNumber = 4,
    kLlcMotioncommandfeedback1CheckFieldNumber = 5,
  };
  // optional double llc_fbk_steeringanglesetpoint = 1;
  bool has_llc_fbk_steeringanglesetpoint() const;
  private:
  bool _internal_has_llc_fbk_steeringanglesetpoint() const;
  public:
  void clear_llc_fbk_steeringanglesetpoint();
  double llc_fbk_steeringanglesetpoint() const;
  void set_llc_fbk_steeringanglesetpoint(double value);
  private:
  double _internal_llc_fbk_steeringanglesetpoint() const;
  void _internal_set_llc_fbk_steeringanglesetpoint(double value);
  public:

  // optional double llc_fbk_throttlesetpoint = 2;
  bool has_llc_fbk_throttlesetpoint() const;
  private:
  bool _internal_has_llc_fbk_throttlesetpoint() const;
  public:
  void clear_llc_fbk_throttlesetpoint();
  double llc_fbk_throttlesetpoint() const;
  void set_llc_fbk_throttlesetpoint(double value);
  private:
  double _internal_llc_fbk_throttlesetpoint() const;
  void _internal_set_llc_fbk_throttlesetpoint(double value);
  public:

  // optional double llc_fbk_brakepercentsetpoint = 3;
  bool has_llc_fbk_brakepercentsetpoint() const;
  private:
  bool _internal_has_llc_fbk_brakepercentsetpoint() const;
  public:
  void clear_llc_fbk_brakepercentsetpoint();
  double llc_fbk_brakepercentsetpoint() const;
  void set_llc_fbk_brakepercentsetpoint(double value);
  private:
  double _internal_llc_fbk_brakepercentsetpoint() const;
  void _internal_set_llc_fbk_brakepercentsetpoint(double value);
  public:

  // optional int32 llc_motioncommandfeedback1_count = 4;
  bool has_llc_motioncommandfeedback1_count() const;
  private:
  bool _internal_has_llc_motioncommandfeedback1_count() const;
  public:
  void clear_llc_motioncommandfeedback1_count();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motioncommandfeedback1_count() const;
  void set_llc_motioncommandfeedback1_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_motioncommandfeedback1_count() const;
  void _internal_set_llc_motioncommandfeedback1_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_motioncommandfeedback1_check = 5;
  bool has_llc_motioncommandfeedback1_check() const;
  private:
  bool _internal_has_llc_motioncommandfeedback1_check() const;
  public:
  void clear_llc_motioncommandfeedback1_check();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motioncommandfeedback1_check() const;
  void set_llc_motioncommandfeedback1_check(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_motioncommandfeedback1_check() const;
  void _internal_set_llc_motioncommandfeedback1_check(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_motioncommandfeedback1_22)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double llc_fbk_steeringanglesetpoint_;
  double llc_fbk_throttlesetpoint_;
  double llc_fbk_brakepercentsetpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motioncommandfeedback1_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_motioncommandfeedback1_check_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Llc_vehiclestatus_25 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_vehiclestatus_25) */ {
 public:
  Llc_vehiclestatus_25();
  virtual ~Llc_vehiclestatus_25();

  Llc_vehiclestatus_25(const Llc_vehiclestatus_25& from);
  Llc_vehiclestatus_25(Llc_vehiclestatus_25&& from) noexcept
    : Llc_vehiclestatus_25() {
    *this = ::std::move(from);
  }

  inline Llc_vehiclestatus_25& operator=(const Llc_vehiclestatus_25& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_vehiclestatus_25& operator=(Llc_vehiclestatus_25&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_vehiclestatus_25& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_vehiclestatus_25* internal_default_instance() {
    return reinterpret_cast<const Llc_vehiclestatus_25*>(
               &_Llc_vehiclestatus_25_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Llc_vehiclestatus_25& a, Llc_vehiclestatus_25& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_vehiclestatus_25* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_vehiclestatus_25* New() const final {
    return CreateMaybeMessage<Llc_vehiclestatus_25>(nullptr);
  }

  Llc_vehiclestatus_25* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_vehiclestatus_25>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_vehiclestatus_25& from);
  void MergeFrom(const Llc_vehiclestatus_25& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_vehiclestatus_25* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_vehiclestatus_25";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlcFbk12VoltageFieldNumber = 1,
  };
  // optional double llc_fbk_12voltage = 1;
  bool has_llc_fbk_12voltage() const;
  private:
  bool _internal_has_llc_fbk_12voltage() const;
  public:
  void clear_llc_fbk_12voltage();
  double llc_fbk_12voltage() const;
  void set_llc_fbk_12voltage(double value);
  private:
  double _internal_llc_fbk_12voltage() const;
  void _internal_set_llc_fbk_12voltage(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_vehiclestatus_25)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double llc_fbk_12voltage_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Llc_auxiliaryfeedback_120 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_auxiliaryfeedback_120) */ {
 public:
  Llc_auxiliaryfeedback_120();
  virtual ~Llc_auxiliaryfeedback_120();

  Llc_auxiliaryfeedback_120(const Llc_auxiliaryfeedback_120& from);
  Llc_auxiliaryfeedback_120(Llc_auxiliaryfeedback_120&& from) noexcept
    : Llc_auxiliaryfeedback_120() {
    *this = ::std::move(from);
  }

  inline Llc_auxiliaryfeedback_120& operator=(const Llc_auxiliaryfeedback_120& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_auxiliaryfeedback_120& operator=(Llc_auxiliaryfeedback_120&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_auxiliaryfeedback_120& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_auxiliaryfeedback_120* internal_default_instance() {
    return reinterpret_cast<const Llc_auxiliaryfeedback_120*>(
               &_Llc_auxiliaryfeedback_120_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Llc_auxiliaryfeedback_120& a, Llc_auxiliaryfeedback_120& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_auxiliaryfeedback_120* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_auxiliaryfeedback_120* New() const final {
    return CreateMaybeMessage<Llc_auxiliaryfeedback_120>(nullptr);
  }

  Llc_auxiliaryfeedback_120* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_auxiliaryfeedback_120>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_auxiliaryfeedback_120& from);
  void MergeFrom(const Llc_auxiliaryfeedback_120& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_auxiliaryfeedback_120* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_auxiliaryfeedback_120";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_fbk_turnsignalType;
  static constexpr Llc_fbk_turnsignalType LLC_FBK_TURNSIGNAL_NONE =
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_NONE;
  static constexpr Llc_fbk_turnsignalType LLC_FBK_TURNSIGNAL_LEFT =
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_LEFT;
  static constexpr Llc_fbk_turnsignalType LLC_FBK_TURNSIGNAL_RIGHT =
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_RIGHT;
  static constexpr Llc_fbk_turnsignalType LLC_FBK_TURNSIGNAL_RESERVE =
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_LLC_FBK_TURNSIGNAL_RESERVE;
  static inline bool Llc_fbk_turnsignalType_IsValid(int value) {
    return Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_IsValid(value);
  }
  static constexpr Llc_fbk_turnsignalType Llc_fbk_turnsignalType_MIN =
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Llc_fbk_turnsignalType_MIN;
  static constexpr Llc_fbk_turnsignalType Llc_fbk_turnsignalType_MAX =
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Llc_fbk_turnsignalType_MAX;
  static constexpr int Llc_fbk_turnsignalType_ARRAYSIZE =
    Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Llc_fbk_turnsignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Llc_fbk_turnsignalType_descriptor() {
    return Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& Llc_fbk_turnsignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Llc_fbk_turnsignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Llc_fbk_turnsignalType_Name.");
    return Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Name(enum_t_value);
  }
  static inline bool Llc_fbk_turnsignalType_Parse(const std::string& name,
      Llc_fbk_turnsignalType* value) {
    return Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLlcFbkInverterFieldNumber = 1,
    kLlcFbkPduCh8FieldNumber = 2,
    kLlcFbkPduCh7FieldNumber = 3,
    kLlcFbkPduCh6FieldNumber = 4,
    kLlcFbkPduCh5FieldNumber = 5,
    kLlcFbkPduCh4FieldNumber = 6,
    kLlcFbkPduCh3FieldNumber = 7,
    kLlcFbkPduCh2FieldNumber = 8,
    kLlcFbkPduCh1FieldNumber = 9,
    kLlcFbkHazardlightsFieldNumber = 10,
    kLlcFbkLedgreenonFieldNumber = 11,
    kLlcFbkHornFieldNumber = 12,
    kLlcFbkTurnsignalFieldNumber = 14,
    kLlcFbkBuzzeronFieldNumber = 13,
    kLlcFbkLowbeamFieldNumber = 15,
    kLlcFbkHighbeamFieldNumber = 16,
    kLlcFbkLedredonFieldNumber = 17,
    kLlcFbkAutonomybuttonpressedFieldNumber = 18,
  };
  // optional bool llc_fbk_inverter = 1;
  bool has_llc_fbk_inverter() const;
  private:
  bool _internal_has_llc_fbk_inverter() const;
  public:
  void clear_llc_fbk_inverter();
  bool llc_fbk_inverter() const;
  void set_llc_fbk_inverter(bool value);
  private:
  bool _internal_llc_fbk_inverter() const;
  void _internal_set_llc_fbk_inverter(bool value);
  public:

  // optional bool llc_fbk_pdu_ch8 = 2;
  bool has_llc_fbk_pdu_ch8() const;
  private:
  bool _internal_has_llc_fbk_pdu_ch8() const;
  public:
  void clear_llc_fbk_pdu_ch8();
  bool llc_fbk_pdu_ch8() const;
  void set_llc_fbk_pdu_ch8(bool value);
  private:
  bool _internal_llc_fbk_pdu_ch8() const;
  void _internal_set_llc_fbk_pdu_ch8(bool value);
  public:

  // optional bool llc_fbk_pdu_ch7 = 3;
  bool has_llc_fbk_pdu_ch7() const;
  private:
  bool _internal_has_llc_fbk_pdu_ch7() const;
  public:
  void clear_llc_fbk_pdu_ch7();
  bool llc_fbk_pdu_ch7() const;
  void set_llc_fbk_pdu_ch7(bool value);
  private:
  bool _internal_llc_fbk_pdu_ch7() const;
  void _internal_set_llc_fbk_pdu_ch7(bool value);
  public:

  // optional bool llc_fbk_pdu_ch6 = 4;
  bool has_llc_fbk_pdu_ch6() const;
  private:
  bool _internal_has_llc_fbk_pdu_ch6() const;
  public:
  void clear_llc_fbk_pdu_ch6();
  bool llc_fbk_pdu_ch6() const;
  void set_llc_fbk_pdu_ch6(bool value);
  private:
  bool _internal_llc_fbk_pdu_ch6() const;
  void _internal_set_llc_fbk_pdu_ch6(bool value);
  public:

  // optional bool llc_fbk_pdu_ch5 = 5;
  bool has_llc_fbk_pdu_ch5() const;
  private:
  bool _internal_has_llc_fbk_pdu_ch5() const;
  public:
  void clear_llc_fbk_pdu_ch5();
  bool llc_fbk_pdu_ch5() const;
  void set_llc_fbk_pdu_ch5(bool value);
  private:
  bool _internal_llc_fbk_pdu_ch5() const;
  void _internal_set_llc_fbk_pdu_ch5(bool value);
  public:

  // optional bool llc_fbk_pdu_ch4 = 6;
  bool has_llc_fbk_pdu_ch4() const;
  private:
  bool _internal_has_llc_fbk_pdu_ch4() const;
  public:
  void clear_llc_fbk_pdu_ch4();
  bool llc_fbk_pdu_ch4() const;
  void set_llc_fbk_pdu_ch4(bool value);
  private:
  bool _internal_llc_fbk_pdu_ch4() const;
  void _internal_set_llc_fbk_pdu_ch4(bool value);
  public:

  // optional bool llc_fbk_pdu_ch3 = 7;
  bool has_llc_fbk_pdu_ch3() const;
  private:
  bool _internal_has_llc_fbk_pdu_ch3() const;
  public:
  void clear_llc_fbk_pdu_ch3();
  bool llc_fbk_pdu_ch3() const;
  void set_llc_fbk_pdu_ch3(bool value);
  private:
  bool _internal_llc_fbk_pdu_ch3() const;
  void _internal_set_llc_fbk_pdu_ch3(bool value);
  public:

  // optional bool llc_fbk_pdu_ch2 = 8;
  bool has_llc_fbk_pdu_ch2() const;
  private:
  bool _internal_has_llc_fbk_pdu_ch2() const;
  public:
  void clear_llc_fbk_pdu_ch2();
  bool llc_fbk_pdu_ch2() const;
  void set_llc_fbk_pdu_ch2(bool value);
  private:
  bool _internal_llc_fbk_pdu_ch2() const;
  void _internal_set_llc_fbk_pdu_ch2(bool value);
  public:

  // optional bool llc_fbk_pdu_ch1 = 9;
  bool has_llc_fbk_pdu_ch1() const;
  private:
  bool _internal_has_llc_fbk_pdu_ch1() const;
  public:
  void clear_llc_fbk_pdu_ch1();
  bool llc_fbk_pdu_ch1() const;
  void set_llc_fbk_pdu_ch1(bool value);
  private:
  bool _internal_llc_fbk_pdu_ch1() const;
  void _internal_set_llc_fbk_pdu_ch1(bool value);
  public:

  // optional bool llc_fbk_hazardlights = 10;
  bool has_llc_fbk_hazardlights() const;
  private:
  bool _internal_has_llc_fbk_hazardlights() const;
  public:
  void clear_llc_fbk_hazardlights();
  bool llc_fbk_hazardlights() const;
  void set_llc_fbk_hazardlights(bool value);
  private:
  bool _internal_llc_fbk_hazardlights() const;
  void _internal_set_llc_fbk_hazardlights(bool value);
  public:

  // optional bool llc_fbk_ledgreenon = 11;
  bool has_llc_fbk_ledgreenon() const;
  private:
  bool _internal_has_llc_fbk_ledgreenon() const;
  public:
  void clear_llc_fbk_ledgreenon();
  bool llc_fbk_ledgreenon() const;
  void set_llc_fbk_ledgreenon(bool value);
  private:
  bool _internal_llc_fbk_ledgreenon() const;
  void _internal_set_llc_fbk_ledgreenon(bool value);
  public:

  // optional bool llc_fbk_horn = 12;
  bool has_llc_fbk_horn() const;
  private:
  bool _internal_has_llc_fbk_horn() const;
  public:
  void clear_llc_fbk_horn();
  bool llc_fbk_horn() const;
  void set_llc_fbk_horn(bool value);
  private:
  bool _internal_llc_fbk_horn() const;
  void _internal_set_llc_fbk_horn(bool value);
  public:

  // optional .apollo.canbus.Llc_auxiliaryfeedback_120.Llc_fbk_turnsignalType llc_fbk_turnsignal = 14;
  bool has_llc_fbk_turnsignal() const;
  private:
  bool _internal_has_llc_fbk_turnsignal() const;
  public:
  void clear_llc_fbk_turnsignal();
  ::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType llc_fbk_turnsignal() const;
  void set_llc_fbk_turnsignal(::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType value);
  private:
  ::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType _internal_llc_fbk_turnsignal() const;
  void _internal_set_llc_fbk_turnsignal(::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType value);
  public:

  // optional bool llc_fbk_buzzeron = 13;
  bool has_llc_fbk_buzzeron() const;
  private:
  bool _internal_has_llc_fbk_buzzeron() const;
  public:
  void clear_llc_fbk_buzzeron();
  bool llc_fbk_buzzeron() const;
  void set_llc_fbk_buzzeron(bool value);
  private:
  bool _internal_llc_fbk_buzzeron() const;
  void _internal_set_llc_fbk_buzzeron(bool value);
  public:

  // optional bool llc_fbk_lowbeam = 15;
  bool has_llc_fbk_lowbeam() const;
  private:
  bool _internal_has_llc_fbk_lowbeam() const;
  public:
  void clear_llc_fbk_lowbeam();
  bool llc_fbk_lowbeam() const;
  void set_llc_fbk_lowbeam(bool value);
  private:
  bool _internal_llc_fbk_lowbeam() const;
  void _internal_set_llc_fbk_lowbeam(bool value);
  public:

  // optional bool llc_fbk_highbeam = 16;
  bool has_llc_fbk_highbeam() const;
  private:
  bool _internal_has_llc_fbk_highbeam() const;
  public:
  void clear_llc_fbk_highbeam();
  bool llc_fbk_highbeam() const;
  void set_llc_fbk_highbeam(bool value);
  private:
  bool _internal_llc_fbk_highbeam() const;
  void _internal_set_llc_fbk_highbeam(bool value);
  public:

  // optional bool llc_fbk_ledredon = 17;
  bool has_llc_fbk_ledredon() const;
  private:
  bool _internal_has_llc_fbk_ledredon() const;
  public:
  void clear_llc_fbk_ledredon();
  bool llc_fbk_ledredon() const;
  void set_llc_fbk_ledredon(bool value);
  private:
  bool _internal_llc_fbk_ledredon() const;
  void _internal_set_llc_fbk_ledredon(bool value);
  public:

  // optional bool llc_fbk_autonomybuttonpressed = 18;
  bool has_llc_fbk_autonomybuttonpressed() const;
  private:
  bool _internal_has_llc_fbk_autonomybuttonpressed() const;
  public:
  void clear_llc_fbk_autonomybuttonpressed();
  bool llc_fbk_autonomybuttonpressed() const;
  void set_llc_fbk_autonomybuttonpressed(bool value);
  private:
  bool _internal_llc_fbk_autonomybuttonpressed() const;
  void _internal_set_llc_fbk_autonomybuttonpressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_auxiliaryfeedback_120)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool llc_fbk_inverter_;
  bool llc_fbk_pdu_ch8_;
  bool llc_fbk_pdu_ch7_;
  bool llc_fbk_pdu_ch6_;
  bool llc_fbk_pdu_ch5_;
  bool llc_fbk_pdu_ch4_;
  bool llc_fbk_pdu_ch3_;
  bool llc_fbk_pdu_ch2_;
  bool llc_fbk_pdu_ch1_;
  bool llc_fbk_hazardlights_;
  bool llc_fbk_ledgreenon_;
  bool llc_fbk_horn_;
  int llc_fbk_turnsignal_;
  bool llc_fbk_buzzeron_;
  bool llc_fbk_lowbeam_;
  bool llc_fbk_highbeam_;
  bool llc_fbk_ledredon_;
  bool llc_fbk_autonomybuttonpressed_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Llc_diag_fault_620 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_diag_fault_620) */ {
 public:
  Llc_diag_fault_620();
  virtual ~Llc_diag_fault_620();

  Llc_diag_fault_620(const Llc_diag_fault_620& from);
  Llc_diag_fault_620(Llc_diag_fault_620&& from) noexcept
    : Llc_diag_fault_620() {
    *this = ::std::move(from);
  }

  inline Llc_diag_fault_620& operator=(const Llc_diag_fault_620& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_diag_fault_620& operator=(Llc_diag_fault_620&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_diag_fault_620& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_diag_fault_620* internal_default_instance() {
    return reinterpret_cast<const Llc_diag_fault_620*>(
               &_Llc_diag_fault_620_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Llc_diag_fault_620& a, Llc_diag_fault_620& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_diag_fault_620* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_diag_fault_620* New() const final {
    return CreateMaybeMessage<Llc_diag_fault_620>(nullptr);
  }

  Llc_diag_fault_620* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_diag_fault_620>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_diag_fault_620& from);
  void MergeFrom(const Llc_diag_fault_620& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_diag_fault_620* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_diag_fault_620";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlcDisengagecounterBrakeFieldNumber = 1,
    kLlcDisengagecounterSteerFieldNumber = 2,
    kLlcDisengagecounterThrottleFieldNumber = 3,
    kLlcFbkFaultcounterFieldNumber = 4,
    kLlcDisengagecounterButtonFieldNumber = 5,
    kLlcFbkVersionYearFieldNumber = 6,
    kLlcFbkVersionMonthFieldNumber = 7,
    kLlcFbkVersionDayFieldNumber = 8,
    kLlcFbkVersionHourFieldNumber = 9,
  };
  // optional int32 llc_disengagecounter_brake = 1;
  bool has_llc_disengagecounter_brake() const;
  private:
  bool _internal_has_llc_disengagecounter_brake() const;
  public:
  void clear_llc_disengagecounter_brake();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_disengagecounter_brake() const;
  void set_llc_disengagecounter_brake(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_disengagecounter_brake() const;
  void _internal_set_llc_disengagecounter_brake(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_disengagecounter_steer = 2;
  bool has_llc_disengagecounter_steer() const;
  private:
  bool _internal_has_llc_disengagecounter_steer() const;
  public:
  void clear_llc_disengagecounter_steer();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_disengagecounter_steer() const;
  void set_llc_disengagecounter_steer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_disengagecounter_steer() const;
  void _internal_set_llc_disengagecounter_steer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_disengagecounter_throttle = 3;
  bool has_llc_disengagecounter_throttle() const;
  private:
  bool _internal_has_llc_disengagecounter_throttle() const;
  public:
  void clear_llc_disengagecounter_throttle();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_disengagecounter_throttle() const;
  void set_llc_disengagecounter_throttle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_disengagecounter_throttle() const;
  void _internal_set_llc_disengagecounter_throttle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_fbk_faultcounter = 4;
  bool has_llc_fbk_faultcounter() const;
  private:
  bool _internal_has_llc_fbk_faultcounter() const;
  public:
  void clear_llc_fbk_faultcounter();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_faultcounter() const;
  void set_llc_fbk_faultcounter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_fbk_faultcounter() const;
  void _internal_set_llc_fbk_faultcounter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_disengagecounter_button = 5;
  bool has_llc_disengagecounter_button() const;
  private:
  bool _internal_has_llc_disengagecounter_button() const;
  public:
  void clear_llc_disengagecounter_button();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_disengagecounter_button() const;
  void set_llc_disengagecounter_button(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_disengagecounter_button() const;
  void _internal_set_llc_disengagecounter_button(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_fbk_version_year = 6;
  bool has_llc_fbk_version_year() const;
  private:
  bool _internal_has_llc_fbk_version_year() const;
  public:
  void clear_llc_fbk_version_year();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_version_year() const;
  void set_llc_fbk_version_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_fbk_version_year() const;
  void _internal_set_llc_fbk_version_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_fbk_version_month = 7;
  bool has_llc_fbk_version_month() const;
  private:
  bool _internal_has_llc_fbk_version_month() const;
  public:
  void clear_llc_fbk_version_month();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_version_month() const;
  void set_llc_fbk_version_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_fbk_version_month() const;
  void _internal_set_llc_fbk_version_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_fbk_version_day = 8;
  bool has_llc_fbk_version_day() const;
  private:
  bool _internal_has_llc_fbk_version_day() const;
  public:
  void clear_llc_fbk_version_day();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_version_day() const;
  void set_llc_fbk_version_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_fbk_version_day() const;
  void _internal_set_llc_fbk_version_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 llc_fbk_version_hour = 9;
  bool has_llc_fbk_version_hour() const;
  private:
  bool _internal_has_llc_fbk_version_hour() const;
  public:
  void clear_llc_fbk_version_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_version_hour() const;
  void set_llc_fbk_version_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_fbk_version_hour() const;
  void _internal_set_llc_fbk_version_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_diag_fault_620)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_disengagecounter_brake_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_disengagecounter_steer_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_disengagecounter_throttle_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_faultcounter_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_disengagecounter_button_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_version_year_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_version_month_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_version_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_fbk_version_hour_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Llc_diag_steeringcontrol_722 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_diag_steeringcontrol_722) */ {
 public:
  Llc_diag_steeringcontrol_722();
  virtual ~Llc_diag_steeringcontrol_722();

  Llc_diag_steeringcontrol_722(const Llc_diag_steeringcontrol_722& from);
  Llc_diag_steeringcontrol_722(Llc_diag_steeringcontrol_722&& from) noexcept
    : Llc_diag_steeringcontrol_722() {
    *this = ::std::move(from);
  }

  inline Llc_diag_steeringcontrol_722& operator=(const Llc_diag_steeringcontrol_722& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_diag_steeringcontrol_722& operator=(Llc_diag_steeringcontrol_722&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_diag_steeringcontrol_722& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_diag_steeringcontrol_722* internal_default_instance() {
    return reinterpret_cast<const Llc_diag_steeringcontrol_722*>(
               &_Llc_diag_steeringcontrol_722_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Llc_diag_steeringcontrol_722& a, Llc_diag_steeringcontrol_722& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_diag_steeringcontrol_722* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_diag_steeringcontrol_722* New() const final {
    return CreateMaybeMessage<Llc_diag_steeringcontrol_722>(nullptr);
  }

  Llc_diag_steeringcontrol_722* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_diag_steeringcontrol_722>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_diag_steeringcontrol_722& from);
  void MergeFrom(const Llc_diag_steeringcontrol_722& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_diag_steeringcontrol_722* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_diag_steeringcontrol_722";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlcDbgSteeringsensorpositionFieldNumber = 1,
    kLlcDbgSteeringmotorpositionFieldNumber = 3,
    kLlcDbgSteeringrackinputtorqueFieldNumber = 2,
  };
  // optional double llc_dbg_steeringsensorposition = 1;
  bool has_llc_dbg_steeringsensorposition() const;
  private:
  bool _internal_has_llc_dbg_steeringsensorposition() const;
  public:
  void clear_llc_dbg_steeringsensorposition();
  double llc_dbg_steeringsensorposition() const;
  void set_llc_dbg_steeringsensorposition(double value);
  private:
  double _internal_llc_dbg_steeringsensorposition() const;
  void _internal_set_llc_dbg_steeringsensorposition(double value);
  public:

  // optional double llc_dbg_steeringmotorposition = 3;
  bool has_llc_dbg_steeringmotorposition() const;
  private:
  bool _internal_has_llc_dbg_steeringmotorposition() const;
  public:
  void clear_llc_dbg_steeringmotorposition();
  double llc_dbg_steeringmotorposition() const;
  void set_llc_dbg_steeringmotorposition(double value);
  private:
  double _internal_llc_dbg_steeringmotorposition() const;
  void _internal_set_llc_dbg_steeringmotorposition(double value);
  public:

  // optional int32 llc_dbg_steeringrackinputtorque = 2;
  bool has_llc_dbg_steeringrackinputtorque() const;
  private:
  bool _internal_has_llc_dbg_steeringrackinputtorque() const;
  public:
  void clear_llc_dbg_steeringrackinputtorque();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_dbg_steeringrackinputtorque() const;
  void set_llc_dbg_steeringrackinputtorque(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_dbg_steeringrackinputtorque() const;
  void _internal_set_llc_dbg_steeringrackinputtorque(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_diag_steeringcontrol_722)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double llc_dbg_steeringsensorposition_;
  double llc_dbg_steeringmotorposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_dbg_steeringrackinputtorque_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Adc_auxiliarycontrol_110 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Adc_auxiliarycontrol_110) */ {
 public:
  Adc_auxiliarycontrol_110();
  virtual ~Adc_auxiliarycontrol_110();

  Adc_auxiliarycontrol_110(const Adc_auxiliarycontrol_110& from);
  Adc_auxiliarycontrol_110(Adc_auxiliarycontrol_110&& from) noexcept
    : Adc_auxiliarycontrol_110() {
    *this = ::std::move(from);
  }

  inline Adc_auxiliarycontrol_110& operator=(const Adc_auxiliarycontrol_110& from) {
    CopyFrom(from);
    return *this;
  }
  inline Adc_auxiliarycontrol_110& operator=(Adc_auxiliarycontrol_110&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Adc_auxiliarycontrol_110& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Adc_auxiliarycontrol_110* internal_default_instance() {
    return reinterpret_cast<const Adc_auxiliarycontrol_110*>(
               &_Adc_auxiliarycontrol_110_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Adc_auxiliarycontrol_110& a, Adc_auxiliarycontrol_110& b) {
    a.Swap(&b);
  }
  inline void Swap(Adc_auxiliarycontrol_110* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Adc_auxiliarycontrol_110* New() const final {
    return CreateMaybeMessage<Adc_auxiliarycontrol_110>(nullptr);
  }

  Adc_auxiliarycontrol_110* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Adc_auxiliarycontrol_110>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Adc_auxiliarycontrol_110& from);
  void MergeFrom(const Adc_auxiliarycontrol_110& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Adc_auxiliarycontrol_110* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Adc_auxiliarycontrol_110";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_cmd_turnsignalType;
  static constexpr Adc_cmd_turnsignalType ADC_CMD_TURNSIGNAL_NONE =
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_NONE;
  static constexpr Adc_cmd_turnsignalType ADC_CMD_TURNSIGNAL_LEFT =
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_LEFT;
  static constexpr Adc_cmd_turnsignalType ADC_CMD_TURNSIGNAL_RIGHT =
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_RIGHT;
  static constexpr Adc_cmd_turnsignalType ADC_CMD_TURNSIGNAL_RESERVE =
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_ADC_CMD_TURNSIGNAL_RESERVE;
  static inline bool Adc_cmd_turnsignalType_IsValid(int value) {
    return Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_IsValid(value);
  }
  static constexpr Adc_cmd_turnsignalType Adc_cmd_turnsignalType_MIN =
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Adc_cmd_turnsignalType_MIN;
  static constexpr Adc_cmd_turnsignalType Adc_cmd_turnsignalType_MAX =
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Adc_cmd_turnsignalType_MAX;
  static constexpr int Adc_cmd_turnsignalType_ARRAYSIZE =
    Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Adc_cmd_turnsignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Adc_cmd_turnsignalType_descriptor() {
    return Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& Adc_cmd_turnsignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Adc_cmd_turnsignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Adc_cmd_turnsignalType_Name.");
    return Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Name(enum_t_value);
  }
  static inline bool Adc_cmd_turnsignalType_Parse(const std::string& name,
      Adc_cmd_turnsignalType* value) {
    return Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdcAuxcontrolCounterFieldNumber = 1,
    kAdcAuxcontrolChecksumFieldNumber = 2,
    kAdcCmdWiperFieldNumber = 5,
    kAdcCmdInverterControlenableFieldNumber = 3,
    kAdcCmdInverterFieldNumber = 4,
    kAdcCmdPduControlenableFieldNumber = 6,
    kAdcCmdPduCh8FieldNumber = 7,
    kAdcCmdPduCh7FieldNumber = 8,
    kAdcCmdPduCh6FieldNumber = 9,
    kAdcCmdPduCh5FieldNumber = 10,
    kAdcCmdPduCh4FieldNumber = 11,
    kAdcCmdPduCh3FieldNumber = 12,
    kAdcCmdPduCh2FieldNumber = 13,
    kAdcCmdPduCh1FieldNumber = 14,
    kAdcCmdHazardlightsFieldNumber = 15,
    kAdcCmdHighbeamFieldNumber = 16,
    kAdcCmdLowbeamFieldNumber = 17,
    kAdcCmdHornFieldNumber = 18,
    kAdcCmdTurnsignalFieldNumber = 19,
  };
  // optional int32 adc_auxcontrol_counter = 1;
  bool has_adc_auxcontrol_counter() const;
  private:
  bool _internal_has_adc_auxcontrol_counter() const;
  public:
  void clear_adc_auxcontrol_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 adc_auxcontrol_counter() const;
  void set_adc_auxcontrol_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adc_auxcontrol_counter() const;
  void _internal_set_adc_auxcontrol_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 adc_auxcontrol_checksum = 2;
  bool has_adc_auxcontrol_checksum() const;
  private:
  bool _internal_has_adc_auxcontrol_checksum() const;
  public:
  void clear_adc_auxcontrol_checksum();
  ::PROTOBUF_NAMESPACE_ID::int32 adc_auxcontrol_checksum() const;
  void set_adc_auxcontrol_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adc_auxcontrol_checksum() const;
  void _internal_set_adc_auxcontrol_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 adc_cmd_wiper = 5;
  bool has_adc_cmd_wiper() const;
  private:
  bool _internal_has_adc_cmd_wiper() const;
  public:
  void clear_adc_cmd_wiper();
  ::PROTOBUF_NAMESPACE_ID::int32 adc_cmd_wiper() const;
  void set_adc_cmd_wiper(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adc_cmd_wiper() const;
  void _internal_set_adc_cmd_wiper(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool adc_cmd_inverter_controlenable = 3;
  bool has_adc_cmd_inverter_controlenable() const;
  private:
  bool _internal_has_adc_cmd_inverter_controlenable() const;
  public:
  void clear_adc_cmd_inverter_controlenable();
  bool adc_cmd_inverter_controlenable() const;
  void set_adc_cmd_inverter_controlenable(bool value);
  private:
  bool _internal_adc_cmd_inverter_controlenable() const;
  void _internal_set_adc_cmd_inverter_controlenable(bool value);
  public:

  // optional bool adc_cmd_inverter = 4;
  bool has_adc_cmd_inverter() const;
  private:
  bool _internal_has_adc_cmd_inverter() const;
  public:
  void clear_adc_cmd_inverter();
  bool adc_cmd_inverter() const;
  void set_adc_cmd_inverter(bool value);
  private:
  bool _internal_adc_cmd_inverter() const;
  void _internal_set_adc_cmd_inverter(bool value);
  public:

  // optional bool adc_cmd_pdu_controlenable = 6;
  bool has_adc_cmd_pdu_controlenable() const;
  private:
  bool _internal_has_adc_cmd_pdu_controlenable() const;
  public:
  void clear_adc_cmd_pdu_controlenable();
  bool adc_cmd_pdu_controlenable() const;
  void set_adc_cmd_pdu_controlenable(bool value);
  private:
  bool _internal_adc_cmd_pdu_controlenable() const;
  void _internal_set_adc_cmd_pdu_controlenable(bool value);
  public:

  // optional bool adc_cmd_pdu_ch8 = 7;
  bool has_adc_cmd_pdu_ch8() const;
  private:
  bool _internal_has_adc_cmd_pdu_ch8() const;
  public:
  void clear_adc_cmd_pdu_ch8();
  bool adc_cmd_pdu_ch8() const;
  void set_adc_cmd_pdu_ch8(bool value);
  private:
  bool _internal_adc_cmd_pdu_ch8() const;
  void _internal_set_adc_cmd_pdu_ch8(bool value);
  public:

  // optional bool adc_cmd_pdu_ch7 = 8;
  bool has_adc_cmd_pdu_ch7() const;
  private:
  bool _internal_has_adc_cmd_pdu_ch7() const;
  public:
  void clear_adc_cmd_pdu_ch7();
  bool adc_cmd_pdu_ch7() const;
  void set_adc_cmd_pdu_ch7(bool value);
  private:
  bool _internal_adc_cmd_pdu_ch7() const;
  void _internal_set_adc_cmd_pdu_ch7(bool value);
  public:

  // optional bool adc_cmd_pdu_ch6 = 9;
  bool has_adc_cmd_pdu_ch6() const;
  private:
  bool _internal_has_adc_cmd_pdu_ch6() const;
  public:
  void clear_adc_cmd_pdu_ch6();
  bool adc_cmd_pdu_ch6() const;
  void set_adc_cmd_pdu_ch6(bool value);
  private:
  bool _internal_adc_cmd_pdu_ch6() const;
  void _internal_set_adc_cmd_pdu_ch6(bool value);
  public:

  // optional bool adc_cmd_pdu_ch5 = 10;
  bool has_adc_cmd_pdu_ch5() const;
  private:
  bool _internal_has_adc_cmd_pdu_ch5() const;
  public:
  void clear_adc_cmd_pdu_ch5();
  bool adc_cmd_pdu_ch5() const;
  void set_adc_cmd_pdu_ch5(bool value);
  private:
  bool _internal_adc_cmd_pdu_ch5() const;
  void _internal_set_adc_cmd_pdu_ch5(bool value);
  public:

  // optional bool adc_cmd_pdu_ch4 = 11;
  bool has_adc_cmd_pdu_ch4() const;
  private:
  bool _internal_has_adc_cmd_pdu_ch4() const;
  public:
  void clear_adc_cmd_pdu_ch4();
  bool adc_cmd_pdu_ch4() const;
  void set_adc_cmd_pdu_ch4(bool value);
  private:
  bool _internal_adc_cmd_pdu_ch4() const;
  void _internal_set_adc_cmd_pdu_ch4(bool value);
  public:

  // optional bool adc_cmd_pdu_ch3 = 12;
  bool has_adc_cmd_pdu_ch3() const;
  private:
  bool _internal_has_adc_cmd_pdu_ch3() const;
  public:
  void clear_adc_cmd_pdu_ch3();
  bool adc_cmd_pdu_ch3() const;
  void set_adc_cmd_pdu_ch3(bool value);
  private:
  bool _internal_adc_cmd_pdu_ch3() const;
  void _internal_set_adc_cmd_pdu_ch3(bool value);
  public:

  // optional bool adc_cmd_pdu_ch2 = 13;
  bool has_adc_cmd_pdu_ch2() const;
  private:
  bool _internal_has_adc_cmd_pdu_ch2() const;
  public:
  void clear_adc_cmd_pdu_ch2();
  bool adc_cmd_pdu_ch2() const;
  void set_adc_cmd_pdu_ch2(bool value);
  private:
  bool _internal_adc_cmd_pdu_ch2() const;
  void _internal_set_adc_cmd_pdu_ch2(bool value);
  public:

  // optional bool adc_cmd_pdu_ch1 = 14;
  bool has_adc_cmd_pdu_ch1() const;
  private:
  bool _internal_has_adc_cmd_pdu_ch1() const;
  public:
  void clear_adc_cmd_pdu_ch1();
  bool adc_cmd_pdu_ch1() const;
  void set_adc_cmd_pdu_ch1(bool value);
  private:
  bool _internal_adc_cmd_pdu_ch1() const;
  void _internal_set_adc_cmd_pdu_ch1(bool value);
  public:

  // optional bool adc_cmd_hazardlights = 15;
  bool has_adc_cmd_hazardlights() const;
  private:
  bool _internal_has_adc_cmd_hazardlights() const;
  public:
  void clear_adc_cmd_hazardlights();
  bool adc_cmd_hazardlights() const;
  void set_adc_cmd_hazardlights(bool value);
  private:
  bool _internal_adc_cmd_hazardlights() const;
  void _internal_set_adc_cmd_hazardlights(bool value);
  public:

  // optional bool adc_cmd_highbeam = 16;
  bool has_adc_cmd_highbeam() const;
  private:
  bool _internal_has_adc_cmd_highbeam() const;
  public:
  void clear_adc_cmd_highbeam();
  bool adc_cmd_highbeam() const;
  void set_adc_cmd_highbeam(bool value);
  private:
  bool _internal_adc_cmd_highbeam() const;
  void _internal_set_adc_cmd_highbeam(bool value);
  public:

  // optional bool adc_cmd_lowbeam = 17;
  bool has_adc_cmd_lowbeam() const;
  private:
  bool _internal_has_adc_cmd_lowbeam() const;
  public:
  void clear_adc_cmd_lowbeam();
  bool adc_cmd_lowbeam() const;
  void set_adc_cmd_lowbeam(bool value);
  private:
  bool _internal_adc_cmd_lowbeam() const;
  void _internal_set_adc_cmd_lowbeam(bool value);
  public:

  // optional bool adc_cmd_horn = 18;
  bool has_adc_cmd_horn() const;
  private:
  bool _internal_has_adc_cmd_horn() const;
  public:
  void clear_adc_cmd_horn();
  bool adc_cmd_horn() const;
  void set_adc_cmd_horn(bool value);
  private:
  bool _internal_adc_cmd_horn() const;
  void _internal_set_adc_cmd_horn(bool value);
  public:

  // optional .apollo.canbus.Adc_auxiliarycontrol_110.Adc_cmd_turnsignalType adc_cmd_turnsignal = 19;
  bool has_adc_cmd_turnsignal() const;
  private:
  bool _internal_has_adc_cmd_turnsignal() const;
  public:
  void clear_adc_cmd_turnsignal();
  ::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType adc_cmd_turnsignal() const;
  void set_adc_cmd_turnsignal(::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType value);
  private:
  ::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType _internal_adc_cmd_turnsignal() const;
  void _internal_set_adc_cmd_turnsignal(::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Adc_auxiliarycontrol_110)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 adc_auxcontrol_counter_;
  ::PROTOBUF_NAMESPACE_ID::int32 adc_auxcontrol_checksum_;
  ::PROTOBUF_NAMESPACE_ID::int32 adc_cmd_wiper_;
  bool adc_cmd_inverter_controlenable_;
  bool adc_cmd_inverter_;
  bool adc_cmd_pdu_controlenable_;
  bool adc_cmd_pdu_ch8_;
  bool adc_cmd_pdu_ch7_;
  bool adc_cmd_pdu_ch6_;
  bool adc_cmd_pdu_ch5_;
  bool adc_cmd_pdu_ch4_;
  bool adc_cmd_pdu_ch3_;
  bool adc_cmd_pdu_ch2_;
  bool adc_cmd_pdu_ch1_;
  bool adc_cmd_hazardlights_;
  bool adc_cmd_highbeam_;
  bool adc_cmd_lowbeam_;
  bool adc_cmd_horn_;
  int adc_cmd_turnsignal_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Llc_diag_brakecontrol_721 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Llc_diag_brakecontrol_721) */ {
 public:
  Llc_diag_brakecontrol_721();
  virtual ~Llc_diag_brakecontrol_721();

  Llc_diag_brakecontrol_721(const Llc_diag_brakecontrol_721& from);
  Llc_diag_brakecontrol_721(Llc_diag_brakecontrol_721&& from) noexcept
    : Llc_diag_brakecontrol_721() {
    *this = ::std::move(from);
  }

  inline Llc_diag_brakecontrol_721& operator=(const Llc_diag_brakecontrol_721& from) {
    CopyFrom(from);
    return *this;
  }
  inline Llc_diag_brakecontrol_721& operator=(Llc_diag_brakecontrol_721&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Llc_diag_brakecontrol_721& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Llc_diag_brakecontrol_721* internal_default_instance() {
    return reinterpret_cast<const Llc_diag_brakecontrol_721*>(
               &_Llc_diag_brakecontrol_721_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Llc_diag_brakecontrol_721& a, Llc_diag_brakecontrol_721& b) {
    a.Swap(&b);
  }
  inline void Swap(Llc_diag_brakecontrol_721* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Llc_diag_brakecontrol_721* New() const final {
    return CreateMaybeMessage<Llc_diag_brakecontrol_721>(nullptr);
  }

  Llc_diag_brakecontrol_721* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Llc_diag_brakecontrol_721>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Llc_diag_brakecontrol_721& from);
  void MergeFrom(const Llc_diag_brakecontrol_721& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Llc_diag_brakecontrol_721* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Llc_diag_brakecontrol_721";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlcDbgBrakepidcontributionPFieldNumber = 1,
    kLlcDbgBrakepidcontributionIFieldNumber = 2,
    kLlcDbgBrakepidcontributionDFieldNumber = 3,
    kLlcDbgBrakepidOutputFieldNumber = 4,
    kLlcDbgBrakefeedforwardFieldNumber = 6,
    kLlcDbgBrakepidErrorFieldNumber = 5,
  };
  // optional double llc_dbg_brakepidcontribution_p = 1;
  bool has_llc_dbg_brakepidcontribution_p() const;
  private:
  bool _internal_has_llc_dbg_brakepidcontribution_p() const;
  public:
  void clear_llc_dbg_brakepidcontribution_p();
  double llc_dbg_brakepidcontribution_p() const;
  void set_llc_dbg_brakepidcontribution_p(double value);
  private:
  double _internal_llc_dbg_brakepidcontribution_p() const;
  void _internal_set_llc_dbg_brakepidcontribution_p(double value);
  public:

  // optional double llc_dbg_brakepidcontribution_i = 2;
  bool has_llc_dbg_brakepidcontribution_i() const;
  private:
  bool _internal_has_llc_dbg_brakepidcontribution_i() const;
  public:
  void clear_llc_dbg_brakepidcontribution_i();
  double llc_dbg_brakepidcontribution_i() const;
  void set_llc_dbg_brakepidcontribution_i(double value);
  private:
  double _internal_llc_dbg_brakepidcontribution_i() const;
  void _internal_set_llc_dbg_brakepidcontribution_i(double value);
  public:

  // optional double llc_dbg_brakepidcontribution_d = 3;
  bool has_llc_dbg_brakepidcontribution_d() const;
  private:
  bool _internal_has_llc_dbg_brakepidcontribution_d() const;
  public:
  void clear_llc_dbg_brakepidcontribution_d();
  double llc_dbg_brakepidcontribution_d() const;
  void set_llc_dbg_brakepidcontribution_d(double value);
  private:
  double _internal_llc_dbg_brakepidcontribution_d() const;
  void _internal_set_llc_dbg_brakepidcontribution_d(double value);
  public:

  // optional double llc_dbg_brakepid_output = 4;
  bool has_llc_dbg_brakepid_output() const;
  private:
  bool _internal_has_llc_dbg_brakepid_output() const;
  public:
  void clear_llc_dbg_brakepid_output();
  double llc_dbg_brakepid_output() const;
  void set_llc_dbg_brakepid_output(double value);
  private:
  double _internal_llc_dbg_brakepid_output() const;
  void _internal_set_llc_dbg_brakepid_output(double value);
  public:

  // optional double llc_dbg_brakefeedforward = 6;
  bool has_llc_dbg_brakefeedforward() const;
  private:
  bool _internal_has_llc_dbg_brakefeedforward() const;
  public:
  void clear_llc_dbg_brakefeedforward();
  double llc_dbg_brakefeedforward() const;
  void set_llc_dbg_brakefeedforward(double value);
  private:
  double _internal_llc_dbg_brakefeedforward() const;
  void _internal_set_llc_dbg_brakefeedforward(double value);
  public:

  // optional int32 llc_dbg_brakepid_error = 5;
  bool has_llc_dbg_brakepid_error() const;
  private:
  bool _internal_has_llc_dbg_brakepid_error() const;
  public:
  void clear_llc_dbg_brakepid_error();
  ::PROTOBUF_NAMESPACE_ID::int32 llc_dbg_brakepid_error() const;
  void set_llc_dbg_brakepid_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_llc_dbg_brakepid_error() const;
  void _internal_set_llc_dbg_brakepid_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Llc_diag_brakecontrol_721)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double llc_dbg_brakepidcontribution_p_;
  double llc_dbg_brakepidcontribution_i_;
  double llc_dbg_brakepidcontribution_d_;
  double llc_dbg_brakepid_output_;
  double llc_dbg_brakefeedforward_;
  ::PROTOBUF_NAMESPACE_ID::int32 llc_dbg_brakepid_error_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// -------------------------------------------------------------------

class Transit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Transit) */ {
 public:
  Transit();
  virtual ~Transit();

  Transit(const Transit& from);
  Transit(Transit&& from) noexcept
    : Transit() {
    *this = ::std::move(from);
  }

  inline Transit& operator=(const Transit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transit& operator=(Transit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transit* internal_default_instance() {
    return reinterpret_cast<const Transit*>(
               &_Transit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Transit& a, Transit& b) {
    a.Swap(&b);
  }
  inline void Swap(Transit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transit* New() const final {
    return CreateMaybeMessage<Transit>(nullptr);
  }

  Transit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transit& from);
  void MergeFrom(const Transit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Transit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlcVehiclelimits24FieldNumber = 1,
    kAdcMotioncontrol110FieldNumber = 2,
    kAdcMotioncontrollimits112FieldNumber = 3,
    kLlcMotionfeedback120FieldNumber = 4,
    kLlcMotionfeedback221FieldNumber = 5,
    kLlcMotioncommandfeedback122FieldNumber = 6,
    kLlcVehiclestatus25FieldNumber = 7,
    kLlcAuxiliaryfeedback120FieldNumber = 8,
    kLlcDiagFault620FieldNumber = 9,
    kLlcDiagSteeringcontrol722FieldNumber = 10,
    kAdcAuxiliarycontrol110FieldNumber = 11,
    kLlcDiagBrakecontrol721FieldNumber = 12,
  };
  // optional .apollo.canbus.Llc_vehiclelimits_24 llc_vehiclelimits_24 = 1;
  bool has_llc_vehiclelimits_24() const;
  private:
  bool _internal_has_llc_vehiclelimits_24() const;
  public:
  void clear_llc_vehiclelimits_24();
  const ::apollo::canbus::Llc_vehiclelimits_24& llc_vehiclelimits_24() const;
  ::apollo::canbus::Llc_vehiclelimits_24* release_llc_vehiclelimits_24();
  ::apollo::canbus::Llc_vehiclelimits_24* mutable_llc_vehiclelimits_24();
  void set_allocated_llc_vehiclelimits_24(::apollo::canbus::Llc_vehiclelimits_24* llc_vehiclelimits_24);
  private:
  const ::apollo::canbus::Llc_vehiclelimits_24& _internal_llc_vehiclelimits_24() const;
  ::apollo::canbus::Llc_vehiclelimits_24* _internal_mutable_llc_vehiclelimits_24();
  public:

  // optional .apollo.canbus.Adc_motioncontrol1_10 adc_motioncontrol1_10 = 2;
  bool has_adc_motioncontrol1_10() const;
  private:
  bool _internal_has_adc_motioncontrol1_10() const;
  public:
  void clear_adc_motioncontrol1_10();
  const ::apollo::canbus::Adc_motioncontrol1_10& adc_motioncontrol1_10() const;
  ::apollo::canbus::Adc_motioncontrol1_10* release_adc_motioncontrol1_10();
  ::apollo::canbus::Adc_motioncontrol1_10* mutable_adc_motioncontrol1_10();
  void set_allocated_adc_motioncontrol1_10(::apollo::canbus::Adc_motioncontrol1_10* adc_motioncontrol1_10);
  private:
  const ::apollo::canbus::Adc_motioncontrol1_10& _internal_adc_motioncontrol1_10() const;
  ::apollo::canbus::Adc_motioncontrol1_10* _internal_mutable_adc_motioncontrol1_10();
  public:

  // optional .apollo.canbus.Adc_motioncontrollimits1_12 adc_motioncontrollimits1_12 = 3;
  bool has_adc_motioncontrollimits1_12() const;
  private:
  bool _internal_has_adc_motioncontrollimits1_12() const;
  public:
  void clear_adc_motioncontrollimits1_12();
  const ::apollo::canbus::Adc_motioncontrollimits1_12& adc_motioncontrollimits1_12() const;
  ::apollo::canbus::Adc_motioncontrollimits1_12* release_adc_motioncontrollimits1_12();
  ::apollo::canbus::Adc_motioncontrollimits1_12* mutable_adc_motioncontrollimits1_12();
  void set_allocated_adc_motioncontrollimits1_12(::apollo::canbus::Adc_motioncontrollimits1_12* adc_motioncontrollimits1_12);
  private:
  const ::apollo::canbus::Adc_motioncontrollimits1_12& _internal_adc_motioncontrollimits1_12() const;
  ::apollo::canbus::Adc_motioncontrollimits1_12* _internal_mutable_adc_motioncontrollimits1_12();
  public:

  // optional .apollo.canbus.Llc_motionfeedback1_20 llc_motionfeedback1_20 = 4;
  bool has_llc_motionfeedback1_20() const;
  private:
  bool _internal_has_llc_motionfeedback1_20() const;
  public:
  void clear_llc_motionfeedback1_20();
  const ::apollo::canbus::Llc_motionfeedback1_20& llc_motionfeedback1_20() const;
  ::apollo::canbus::Llc_motionfeedback1_20* release_llc_motionfeedback1_20();
  ::apollo::canbus::Llc_motionfeedback1_20* mutable_llc_motionfeedback1_20();
  void set_allocated_llc_motionfeedback1_20(::apollo::canbus::Llc_motionfeedback1_20* llc_motionfeedback1_20);
  private:
  const ::apollo::canbus::Llc_motionfeedback1_20& _internal_llc_motionfeedback1_20() const;
  ::apollo::canbus::Llc_motionfeedback1_20* _internal_mutable_llc_motionfeedback1_20();
  public:

  // optional .apollo.canbus.Llc_motionfeedback2_21 llc_motionfeedback2_21 = 5;
  bool has_llc_motionfeedback2_21() const;
  private:
  bool _internal_has_llc_motionfeedback2_21() const;
  public:
  void clear_llc_motionfeedback2_21();
  const ::apollo::canbus::Llc_motionfeedback2_21& llc_motionfeedback2_21() const;
  ::apollo::canbus::Llc_motionfeedback2_21* release_llc_motionfeedback2_21();
  ::apollo::canbus::Llc_motionfeedback2_21* mutable_llc_motionfeedback2_21();
  void set_allocated_llc_motionfeedback2_21(::apollo::canbus::Llc_motionfeedback2_21* llc_motionfeedback2_21);
  private:
  const ::apollo::canbus::Llc_motionfeedback2_21& _internal_llc_motionfeedback2_21() const;
  ::apollo::canbus::Llc_motionfeedback2_21* _internal_mutable_llc_motionfeedback2_21();
  public:

  // optional .apollo.canbus.Llc_motioncommandfeedback1_22 llc_motioncommandfeedback1_22 = 6;
  bool has_llc_motioncommandfeedback1_22() const;
  private:
  bool _internal_has_llc_motioncommandfeedback1_22() const;
  public:
  void clear_llc_motioncommandfeedback1_22();
  const ::apollo::canbus::Llc_motioncommandfeedback1_22& llc_motioncommandfeedback1_22() const;
  ::apollo::canbus::Llc_motioncommandfeedback1_22* release_llc_motioncommandfeedback1_22();
  ::apollo::canbus::Llc_motioncommandfeedback1_22* mutable_llc_motioncommandfeedback1_22();
  void set_allocated_llc_motioncommandfeedback1_22(::apollo::canbus::Llc_motioncommandfeedback1_22* llc_motioncommandfeedback1_22);
  private:
  const ::apollo::canbus::Llc_motioncommandfeedback1_22& _internal_llc_motioncommandfeedback1_22() const;
  ::apollo::canbus::Llc_motioncommandfeedback1_22* _internal_mutable_llc_motioncommandfeedback1_22();
  public:

  // optional .apollo.canbus.Llc_vehiclestatus_25 llc_vehiclestatus_25 = 7;
  bool has_llc_vehiclestatus_25() const;
  private:
  bool _internal_has_llc_vehiclestatus_25() const;
  public:
  void clear_llc_vehiclestatus_25();
  const ::apollo::canbus::Llc_vehiclestatus_25& llc_vehiclestatus_25() const;
  ::apollo::canbus::Llc_vehiclestatus_25* release_llc_vehiclestatus_25();
  ::apollo::canbus::Llc_vehiclestatus_25* mutable_llc_vehiclestatus_25();
  void set_allocated_llc_vehiclestatus_25(::apollo::canbus::Llc_vehiclestatus_25* llc_vehiclestatus_25);
  private:
  const ::apollo::canbus::Llc_vehiclestatus_25& _internal_llc_vehiclestatus_25() const;
  ::apollo::canbus::Llc_vehiclestatus_25* _internal_mutable_llc_vehiclestatus_25();
  public:

  // optional .apollo.canbus.Llc_auxiliaryfeedback_120 llc_auxiliaryfeedback_120 = 8;
  bool has_llc_auxiliaryfeedback_120() const;
  private:
  bool _internal_has_llc_auxiliaryfeedback_120() const;
  public:
  void clear_llc_auxiliaryfeedback_120();
  const ::apollo::canbus::Llc_auxiliaryfeedback_120& llc_auxiliaryfeedback_120() const;
  ::apollo::canbus::Llc_auxiliaryfeedback_120* release_llc_auxiliaryfeedback_120();
  ::apollo::canbus::Llc_auxiliaryfeedback_120* mutable_llc_auxiliaryfeedback_120();
  void set_allocated_llc_auxiliaryfeedback_120(::apollo::canbus::Llc_auxiliaryfeedback_120* llc_auxiliaryfeedback_120);
  private:
  const ::apollo::canbus::Llc_auxiliaryfeedback_120& _internal_llc_auxiliaryfeedback_120() const;
  ::apollo::canbus::Llc_auxiliaryfeedback_120* _internal_mutable_llc_auxiliaryfeedback_120();
  public:

  // optional .apollo.canbus.Llc_diag_fault_620 llc_diag_fault_620 = 9;
  bool has_llc_diag_fault_620() const;
  private:
  bool _internal_has_llc_diag_fault_620() const;
  public:
  void clear_llc_diag_fault_620();
  const ::apollo::canbus::Llc_diag_fault_620& llc_diag_fault_620() const;
  ::apollo::canbus::Llc_diag_fault_620* release_llc_diag_fault_620();
  ::apollo::canbus::Llc_diag_fault_620* mutable_llc_diag_fault_620();
  void set_allocated_llc_diag_fault_620(::apollo::canbus::Llc_diag_fault_620* llc_diag_fault_620);
  private:
  const ::apollo::canbus::Llc_diag_fault_620& _internal_llc_diag_fault_620() const;
  ::apollo::canbus::Llc_diag_fault_620* _internal_mutable_llc_diag_fault_620();
  public:

  // optional .apollo.canbus.Llc_diag_steeringcontrol_722 llc_diag_steeringcontrol_722 = 10;
  bool has_llc_diag_steeringcontrol_722() const;
  private:
  bool _internal_has_llc_diag_steeringcontrol_722() const;
  public:
  void clear_llc_diag_steeringcontrol_722();
  const ::apollo::canbus::Llc_diag_steeringcontrol_722& llc_diag_steeringcontrol_722() const;
  ::apollo::canbus::Llc_diag_steeringcontrol_722* release_llc_diag_steeringcontrol_722();
  ::apollo::canbus::Llc_diag_steeringcontrol_722* mutable_llc_diag_steeringcontrol_722();
  void set_allocated_llc_diag_steeringcontrol_722(::apollo::canbus::Llc_diag_steeringcontrol_722* llc_diag_steeringcontrol_722);
  private:
  const ::apollo::canbus::Llc_diag_steeringcontrol_722& _internal_llc_diag_steeringcontrol_722() const;
  ::apollo::canbus::Llc_diag_steeringcontrol_722* _internal_mutable_llc_diag_steeringcontrol_722();
  public:

  // optional .apollo.canbus.Adc_auxiliarycontrol_110 adc_auxiliarycontrol_110 = 11;
  bool has_adc_auxiliarycontrol_110() const;
  private:
  bool _internal_has_adc_auxiliarycontrol_110() const;
  public:
  void clear_adc_auxiliarycontrol_110();
  const ::apollo::canbus::Adc_auxiliarycontrol_110& adc_auxiliarycontrol_110() const;
  ::apollo::canbus::Adc_auxiliarycontrol_110* release_adc_auxiliarycontrol_110();
  ::apollo::canbus::Adc_auxiliarycontrol_110* mutable_adc_auxiliarycontrol_110();
  void set_allocated_adc_auxiliarycontrol_110(::apollo::canbus::Adc_auxiliarycontrol_110* adc_auxiliarycontrol_110);
  private:
  const ::apollo::canbus::Adc_auxiliarycontrol_110& _internal_adc_auxiliarycontrol_110() const;
  ::apollo::canbus::Adc_auxiliarycontrol_110* _internal_mutable_adc_auxiliarycontrol_110();
  public:

  // optional .apollo.canbus.Llc_diag_brakecontrol_721 llc_diag_brakecontrol_721 = 12;
  bool has_llc_diag_brakecontrol_721() const;
  private:
  bool _internal_has_llc_diag_brakecontrol_721() const;
  public:
  void clear_llc_diag_brakecontrol_721();
  const ::apollo::canbus::Llc_diag_brakecontrol_721& llc_diag_brakecontrol_721() const;
  ::apollo::canbus::Llc_diag_brakecontrol_721* release_llc_diag_brakecontrol_721();
  ::apollo::canbus::Llc_diag_brakecontrol_721* mutable_llc_diag_brakecontrol_721();
  void set_allocated_llc_diag_brakecontrol_721(::apollo::canbus::Llc_diag_brakecontrol_721* llc_diag_brakecontrol_721);
  private:
  const ::apollo::canbus::Llc_diag_brakecontrol_721& _internal_llc_diag_brakecontrol_721() const;
  ::apollo::canbus::Llc_diag_brakecontrol_721* _internal_mutable_llc_diag_brakecontrol_721();
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Transit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::canbus::Llc_vehiclelimits_24* llc_vehiclelimits_24_;
  ::apollo::canbus::Adc_motioncontrol1_10* adc_motioncontrol1_10_;
  ::apollo::canbus::Adc_motioncontrollimits1_12* adc_motioncontrollimits1_12_;
  ::apollo::canbus::Llc_motionfeedback1_20* llc_motionfeedback1_20_;
  ::apollo::canbus::Llc_motionfeedback2_21* llc_motionfeedback2_21_;
  ::apollo::canbus::Llc_motioncommandfeedback1_22* llc_motioncommandfeedback1_22_;
  ::apollo::canbus::Llc_vehiclestatus_25* llc_vehiclestatus_25_;
  ::apollo::canbus::Llc_auxiliaryfeedback_120* llc_auxiliaryfeedback_120_;
  ::apollo::canbus::Llc_diag_fault_620* llc_diag_fault_620_;
  ::apollo::canbus::Llc_diag_steeringcontrol_722* llc_diag_steeringcontrol_722_;
  ::apollo::canbus::Adc_auxiliarycontrol_110* adc_auxiliarycontrol_110_;
  ::apollo::canbus::Llc_diag_brakecontrol_721* llc_diag_brakecontrol_721_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Llc_vehiclelimits_24

// optional int32 llc_fbk_maxsteeringangle = 1;
inline bool Llc_vehiclelimits_24::_internal_has_llc_fbk_maxsteeringangle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Llc_vehiclelimits_24::has_llc_fbk_maxsteeringangle() const {
  return _internal_has_llc_fbk_maxsteeringangle();
}
inline void Llc_vehiclelimits_24::clear_llc_fbk_maxsteeringangle() {
  llc_fbk_maxsteeringangle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_vehiclelimits_24::_internal_llc_fbk_maxsteeringangle() const {
  return llc_fbk_maxsteeringangle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_vehiclelimits_24::llc_fbk_maxsteeringangle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_vehiclelimits_24.llc_fbk_maxsteeringangle)
  return _internal_llc_fbk_maxsteeringangle();
}
inline void Llc_vehiclelimits_24::_internal_set_llc_fbk_maxsteeringangle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  llc_fbk_maxsteeringangle_ = value;
}
inline void Llc_vehiclelimits_24::set_llc_fbk_maxsteeringangle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_fbk_maxsteeringangle(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_vehiclelimits_24.llc_fbk_maxsteeringangle)
}

// optional double llc_fbk_maxbrakepercent = 2;
inline bool Llc_vehiclelimits_24::_internal_has_llc_fbk_maxbrakepercent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_vehiclelimits_24::has_llc_fbk_maxbrakepercent() const {
  return _internal_has_llc_fbk_maxbrakepercent();
}
inline void Llc_vehiclelimits_24::clear_llc_fbk_maxbrakepercent() {
  llc_fbk_maxbrakepercent_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Llc_vehiclelimits_24::_internal_llc_fbk_maxbrakepercent() const {
  return llc_fbk_maxbrakepercent_;
}
inline double Llc_vehiclelimits_24::llc_fbk_maxbrakepercent() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_vehiclelimits_24.llc_fbk_maxbrakepercent)
  return _internal_llc_fbk_maxbrakepercent();
}
inline void Llc_vehiclelimits_24::_internal_set_llc_fbk_maxbrakepercent(double value) {
  _has_bits_[0] |= 0x00000001u;
  llc_fbk_maxbrakepercent_ = value;
}
inline void Llc_vehiclelimits_24::set_llc_fbk_maxbrakepercent(double value) {
  _internal_set_llc_fbk_maxbrakepercent(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_vehiclelimits_24.llc_fbk_maxbrakepercent)
}

// -------------------------------------------------------------------

// Adc_motioncontrol1_10

// optional double adc_cmd_steerwheelangle = 1;
inline bool Adc_motioncontrol1_10::_internal_has_adc_cmd_steerwheelangle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_cmd_steerwheelangle() const {
  return _internal_has_adc_cmd_steerwheelangle();
}
inline void Adc_motioncontrol1_10::clear_adc_cmd_steerwheelangle() {
  adc_cmd_steerwheelangle_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Adc_motioncontrol1_10::_internal_adc_cmd_steerwheelangle() const {
  return adc_cmd_steerwheelangle_;
}
inline double Adc_motioncontrol1_10::adc_cmd_steerwheelangle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_steerwheelangle)
  return _internal_adc_cmd_steerwheelangle();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_cmd_steerwheelangle(double value) {
  _has_bits_[0] |= 0x00000001u;
  adc_cmd_steerwheelangle_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_cmd_steerwheelangle(double value) {
  _internal_set_adc_cmd_steerwheelangle(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_steerwheelangle)
}

// optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_steeringcontrolmodeType adc_cmd_steeringcontrolmode = 2;
inline bool Adc_motioncontrol1_10::_internal_has_adc_cmd_steeringcontrolmode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_cmd_steeringcontrolmode() const {
  return _internal_has_adc_cmd_steeringcontrolmode();
}
inline void Adc_motioncontrol1_10::clear_adc_cmd_steeringcontrolmode() {
  adc_cmd_steeringcontrolmode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10::_internal_adc_cmd_steeringcontrolmode() const {
  return static_cast< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType >(adc_cmd_steeringcontrolmode_);
}
inline ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10::adc_cmd_steeringcontrolmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_steeringcontrolmode)
  return _internal_adc_cmd_steeringcontrolmode();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_cmd_steeringcontrolmode(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType value) {
  assert(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  adc_cmd_steeringcontrolmode_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_cmd_steeringcontrolmode(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType value) {
  _internal_set_adc_cmd_steeringcontrolmode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_steeringcontrolmode)
}

// optional bool adc_cmd_parkingbrake = 3;
inline bool Adc_motioncontrol1_10::_internal_has_adc_cmd_parkingbrake() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_cmd_parkingbrake() const {
  return _internal_has_adc_cmd_parkingbrake();
}
inline void Adc_motioncontrol1_10::clear_adc_cmd_parkingbrake() {
  adc_cmd_parkingbrake_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Adc_motioncontrol1_10::_internal_adc_cmd_parkingbrake() const {
  return adc_cmd_parkingbrake_;
}
inline bool Adc_motioncontrol1_10::adc_cmd_parkingbrake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_parkingbrake)
  return _internal_adc_cmd_parkingbrake();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_cmd_parkingbrake(bool value) {
  _has_bits_[0] |= 0x00000004u;
  adc_cmd_parkingbrake_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_cmd_parkingbrake(bool value) {
  _internal_set_adc_cmd_parkingbrake(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_parkingbrake)
}

// optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_gearType adc_cmd_gear = 4;
inline bool Adc_motioncontrol1_10::_internal_has_adc_cmd_gear() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_cmd_gear() const {
  return _internal_has_adc_cmd_gear();
}
inline void Adc_motioncontrol1_10::clear_adc_cmd_gear() {
  adc_cmd_gear_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10::_internal_adc_cmd_gear() const {
  return static_cast< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType >(adc_cmd_gear_);
}
inline ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10::adc_cmd_gear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_gear)
  return _internal_adc_cmd_gear();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_cmd_gear(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType value) {
  assert(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  adc_cmd_gear_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_cmd_gear(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType value) {
  _internal_set_adc_cmd_gear(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_gear)
}

// optional int32 adc_motioncontrol1_checksum = 5;
inline bool Adc_motioncontrol1_10::_internal_has_adc_motioncontrol1_checksum() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_motioncontrol1_checksum() const {
  return _internal_has_adc_motioncontrol1_checksum();
}
inline void Adc_motioncontrol1_10::clear_adc_motioncontrol1_checksum() {
  adc_motioncontrol1_checksum_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_motioncontrol1_10::_internal_adc_motioncontrol1_checksum() const {
  return adc_motioncontrol1_checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_motioncontrol1_10::adc_motioncontrol1_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_motioncontrol1_checksum)
  return _internal_adc_motioncontrol1_checksum();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_motioncontrol1_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  adc_motioncontrol1_checksum_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_motioncontrol1_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adc_motioncontrol1_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_motioncontrol1_checksum)
}

// optional double adc_cmd_brakepercentage = 6;
inline bool Adc_motioncontrol1_10::_internal_has_adc_cmd_brakepercentage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_cmd_brakepercentage() const {
  return _internal_has_adc_cmd_brakepercentage();
}
inline void Adc_motioncontrol1_10::clear_adc_cmd_brakepercentage() {
  adc_cmd_brakepercentage_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Adc_motioncontrol1_10::_internal_adc_cmd_brakepercentage() const {
  return adc_cmd_brakepercentage_;
}
inline double Adc_motioncontrol1_10::adc_cmd_brakepercentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_brakepercentage)
  return _internal_adc_cmd_brakepercentage();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_cmd_brakepercentage(double value) {
  _has_bits_[0] |= 0x00000020u;
  adc_cmd_brakepercentage_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_cmd_brakepercentage(double value) {
  _internal_set_adc_cmd_brakepercentage(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_brakepercentage)
}

// optional double adc_cmd_throttleposition = 7;
inline bool Adc_motioncontrol1_10::_internal_has_adc_cmd_throttleposition() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_cmd_throttleposition() const {
  return _internal_has_adc_cmd_throttleposition();
}
inline void Adc_motioncontrol1_10::clear_adc_cmd_throttleposition() {
  adc_cmd_throttleposition_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Adc_motioncontrol1_10::_internal_adc_cmd_throttleposition() const {
  return adc_cmd_throttleposition_;
}
inline double Adc_motioncontrol1_10::adc_cmd_throttleposition() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_throttleposition)
  return _internal_adc_cmd_throttleposition();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_cmd_throttleposition(double value) {
  _has_bits_[0] |= 0x00000040u;
  adc_cmd_throttleposition_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_cmd_throttleposition(double value) {
  _internal_set_adc_cmd_throttleposition(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_throttleposition)
}

// optional int32 adc_motioncontrol1_counter = 8;
inline bool Adc_motioncontrol1_10::_internal_has_adc_motioncontrol1_counter() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_motioncontrol1_counter() const {
  return _internal_has_adc_motioncontrol1_counter();
}
inline void Adc_motioncontrol1_10::clear_adc_motioncontrol1_counter() {
  adc_motioncontrol1_counter_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_motioncontrol1_10::_internal_adc_motioncontrol1_counter() const {
  return adc_motioncontrol1_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_motioncontrol1_10::adc_motioncontrol1_counter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_motioncontrol1_counter)
  return _internal_adc_motioncontrol1_counter();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_motioncontrol1_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  adc_motioncontrol1_counter_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_motioncontrol1_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adc_motioncontrol1_counter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_motioncontrol1_counter)
}

// optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_autonomyrequestType adc_cmd_autonomyrequest = 9;
inline bool Adc_motioncontrol1_10::_internal_has_adc_cmd_autonomyrequest() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_cmd_autonomyrequest() const {
  return _internal_has_adc_cmd_autonomyrequest();
}
inline void Adc_motioncontrol1_10::clear_adc_cmd_autonomyrequest() {
  adc_cmd_autonomyrequest_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10::_internal_adc_cmd_autonomyrequest() const {
  return static_cast< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType >(adc_cmd_autonomyrequest_);
}
inline ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10::adc_cmd_autonomyrequest() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_autonomyrequest)
  return _internal_adc_cmd_autonomyrequest();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_cmd_autonomyrequest(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType value) {
  assert(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  adc_cmd_autonomyrequest_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_cmd_autonomyrequest(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType value) {
  _internal_set_adc_cmd_autonomyrequest(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_autonomyrequest)
}

// optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_longitudinalcontrolmodeType adc_cmd_longitudinalcontrolmode = 10;
inline bool Adc_motioncontrol1_10::_internal_has_adc_cmd_longitudinalcontrolmode() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Adc_motioncontrol1_10::has_adc_cmd_longitudinalcontrolmode() const {
  return _internal_has_adc_cmd_longitudinalcontrolmode();
}
inline void Adc_motioncontrol1_10::clear_adc_cmd_longitudinalcontrolmode() {
  adc_cmd_longitudinalcontrolmode_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10::_internal_adc_cmd_longitudinalcontrolmode() const {
  return static_cast< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType >(adc_cmd_longitudinalcontrolmode_);
}
inline ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10::adc_cmd_longitudinalcontrolmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_longitudinalcontrolmode)
  return _internal_adc_cmd_longitudinalcontrolmode();
}
inline void Adc_motioncontrol1_10::_internal_set_adc_cmd_longitudinalcontrolmode(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType value) {
  assert(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  adc_cmd_longitudinalcontrolmode_ = value;
}
inline void Adc_motioncontrol1_10::set_adc_cmd_longitudinalcontrolmode(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType value) {
  _internal_set_adc_cmd_longitudinalcontrolmode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrol1_10.adc_cmd_longitudinalcontrolmode)
}

// -------------------------------------------------------------------

// Adc_motioncontrollimits1_12

// optional double adc_cmd_throttlecommandlimit = 1;
inline bool Adc_motioncontrollimits1_12::_internal_has_adc_cmd_throttlecommandlimit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Adc_motioncontrollimits1_12::has_adc_cmd_throttlecommandlimit() const {
  return _internal_has_adc_cmd_throttlecommandlimit();
}
inline void Adc_motioncontrollimits1_12::clear_adc_cmd_throttlecommandlimit() {
  adc_cmd_throttlecommandlimit_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Adc_motioncontrollimits1_12::_internal_adc_cmd_throttlecommandlimit() const {
  return adc_cmd_throttlecommandlimit_;
}
inline double Adc_motioncontrollimits1_12::adc_cmd_throttlecommandlimit() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrollimits1_12.adc_cmd_throttlecommandlimit)
  return _internal_adc_cmd_throttlecommandlimit();
}
inline void Adc_motioncontrollimits1_12::_internal_set_adc_cmd_throttlecommandlimit(double value) {
  _has_bits_[0] |= 0x00000001u;
  adc_cmd_throttlecommandlimit_ = value;
}
inline void Adc_motioncontrollimits1_12::set_adc_cmd_throttlecommandlimit(double value) {
  _internal_set_adc_cmd_throttlecommandlimit(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrollimits1_12.adc_cmd_throttlecommandlimit)
}

// optional double adc_cmd_steeringrate = 2;
inline bool Adc_motioncontrollimits1_12::_internal_has_adc_cmd_steeringrate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Adc_motioncontrollimits1_12::has_adc_cmd_steeringrate() const {
  return _internal_has_adc_cmd_steeringrate();
}
inline void Adc_motioncontrollimits1_12::clear_adc_cmd_steeringrate() {
  adc_cmd_steeringrate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Adc_motioncontrollimits1_12::_internal_adc_cmd_steeringrate() const {
  return adc_cmd_steeringrate_;
}
inline double Adc_motioncontrollimits1_12::adc_cmd_steeringrate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrollimits1_12.adc_cmd_steeringrate)
  return _internal_adc_cmd_steeringrate();
}
inline void Adc_motioncontrollimits1_12::_internal_set_adc_cmd_steeringrate(double value) {
  _has_bits_[0] |= 0x00000002u;
  adc_cmd_steeringrate_ = value;
}
inline void Adc_motioncontrollimits1_12::set_adc_cmd_steeringrate(double value) {
  _internal_set_adc_cmd_steeringrate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrollimits1_12.adc_cmd_steeringrate)
}

// optional double adc_cmd_steerwheelanglelimit = 3;
inline bool Adc_motioncontrollimits1_12::_internal_has_adc_cmd_steerwheelanglelimit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Adc_motioncontrollimits1_12::has_adc_cmd_steerwheelanglelimit() const {
  return _internal_has_adc_cmd_steerwheelanglelimit();
}
inline void Adc_motioncontrollimits1_12::clear_adc_cmd_steerwheelanglelimit() {
  adc_cmd_steerwheelanglelimit_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Adc_motioncontrollimits1_12::_internal_adc_cmd_steerwheelanglelimit() const {
  return adc_cmd_steerwheelanglelimit_;
}
inline double Adc_motioncontrollimits1_12::adc_cmd_steerwheelanglelimit() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_motioncontrollimits1_12.adc_cmd_steerwheelanglelimit)
  return _internal_adc_cmd_steerwheelanglelimit();
}
inline void Adc_motioncontrollimits1_12::_internal_set_adc_cmd_steerwheelanglelimit(double value) {
  _has_bits_[0] |= 0x00000004u;
  adc_cmd_steerwheelanglelimit_ = value;
}
inline void Adc_motioncontrollimits1_12::set_adc_cmd_steerwheelanglelimit(double value) {
  _internal_set_adc_cmd_steerwheelanglelimit(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_motioncontrollimits1_12.adc_cmd_steerwheelanglelimit)
}

// -------------------------------------------------------------------

// Llc_motionfeedback1_20

// optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_gearType llc_fbk_gear = 1;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_gear() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_gear() const {
  return _internal_has_llc_fbk_gear();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_gear() {
  llc_fbk_gear_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20::_internal_llc_fbk_gear() const {
  return static_cast< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType >(llc_fbk_gear_);
}
inline ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20::llc_fbk_gear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_gear)
  return _internal_llc_fbk_gear();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_gear(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType value) {
  assert(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  llc_fbk_gear_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_gear(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType value) {
  _internal_set_llc_fbk_gear(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_gear)
}

// optional bool llc_fbk_parkingbrake = 2;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_parkingbrake() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_parkingbrake() const {
  return _internal_has_llc_fbk_parkingbrake();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_parkingbrake() {
  llc_fbk_parkingbrake_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Llc_motionfeedback1_20::_internal_llc_fbk_parkingbrake() const {
  return llc_fbk_parkingbrake_;
}
inline bool Llc_motionfeedback1_20::llc_fbk_parkingbrake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_parkingbrake)
  return _internal_llc_fbk_parkingbrake();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_parkingbrake(bool value) {
  _has_bits_[0] |= 0x00000080u;
  llc_fbk_parkingbrake_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_parkingbrake(bool value) {
  _internal_set_llc_fbk_parkingbrake(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_parkingbrake)
}

// optional double llc_fbk_throttleposition = 3;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_throttleposition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_throttleposition() const {
  return _internal_has_llc_fbk_throttleposition();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_throttleposition() {
  llc_fbk_throttleposition_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Llc_motionfeedback1_20::_internal_llc_fbk_throttleposition() const {
  return llc_fbk_throttleposition_;
}
inline double Llc_motionfeedback1_20::llc_fbk_throttleposition() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_throttleposition)
  return _internal_llc_fbk_throttleposition();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_throttleposition(double value) {
  _has_bits_[0] |= 0x00000001u;
  llc_fbk_throttleposition_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_throttleposition(double value) {
  _internal_set_llc_fbk_throttleposition(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_throttleposition)
}

// optional double llc_fbk_brakepercentrear = 4;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_brakepercentrear() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_brakepercentrear() const {
  return _internal_has_llc_fbk_brakepercentrear();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_brakepercentrear() {
  llc_fbk_brakepercentrear_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Llc_motionfeedback1_20::_internal_llc_fbk_brakepercentrear() const {
  return llc_fbk_brakepercentrear_;
}
inline double Llc_motionfeedback1_20::llc_fbk_brakepercentrear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_brakepercentrear)
  return _internal_llc_fbk_brakepercentrear();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_brakepercentrear(double value) {
  _has_bits_[0] |= 0x00000008u;
  llc_fbk_brakepercentrear_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_brakepercentrear(double value) {
  _internal_set_llc_fbk_brakepercentrear(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_brakepercentrear)
}

// optional double llc_fbk_brakepercentfront = 5;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_brakepercentfront() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_brakepercentfront() const {
  return _internal_has_llc_fbk_brakepercentfront();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_brakepercentfront() {
  llc_fbk_brakepercentfront_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Llc_motionfeedback1_20::_internal_llc_fbk_brakepercentfront() const {
  return llc_fbk_brakepercentfront_;
}
inline double Llc_motionfeedback1_20::llc_fbk_brakepercentfront() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_brakepercentfront)
  return _internal_llc_fbk_brakepercentfront();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_brakepercentfront(double value) {
  _has_bits_[0] |= 0x00000010u;
  llc_fbk_brakepercentfront_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_brakepercentfront(double value) {
  _internal_set_llc_fbk_brakepercentfront(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_brakepercentfront)
}

// optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_steeringcontrolmodeType llc_fbk_steeringcontrolmode = 6;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_steeringcontrolmode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_steeringcontrolmode() const {
  return _internal_has_llc_fbk_steeringcontrolmode();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_steeringcontrolmode() {
  llc_fbk_steeringcontrolmode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20::_internal_llc_fbk_steeringcontrolmode() const {
  return static_cast< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType >(llc_fbk_steeringcontrolmode_);
}
inline ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20::llc_fbk_steeringcontrolmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_steeringcontrolmode)
  return _internal_llc_fbk_steeringcontrolmode();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_steeringcontrolmode(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType value) {
  assert(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  llc_fbk_steeringcontrolmode_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_steeringcontrolmode(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType value) {
  _internal_set_llc_fbk_steeringcontrolmode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_steeringcontrolmode)
}

// optional int32 llc_motionfeedback1_counter = 7;
inline bool Llc_motionfeedback1_20::_internal_has_llc_motionfeedback1_counter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_motionfeedback1_counter() const {
  return _internal_has_llc_motionfeedback1_counter();
}
inline void Llc_motionfeedback1_20::clear_llc_motionfeedback1_counter() {
  llc_motionfeedback1_counter_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motionfeedback1_20::_internal_llc_motionfeedback1_counter() const {
  return llc_motionfeedback1_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motionfeedback1_20::llc_motionfeedback1_counter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_motionfeedback1_counter)
  return _internal_llc_motionfeedback1_counter();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_motionfeedback1_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  llc_motionfeedback1_counter_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_motionfeedback1_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_motionfeedback1_counter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_motionfeedback1_counter)
}

// optional int32 llc_motionfeedback1_checksum = 8;
inline bool Llc_motionfeedback1_20::_internal_has_llc_motionfeedback1_checksum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_motionfeedback1_checksum() const {
  return _internal_has_llc_motionfeedback1_checksum();
}
inline void Llc_motionfeedback1_20::clear_llc_motionfeedback1_checksum() {
  llc_motionfeedback1_checksum_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motionfeedback1_20::_internal_llc_motionfeedback1_checksum() const {
  return llc_motionfeedback1_checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motionfeedback1_20::llc_motionfeedback1_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_motionfeedback1_checksum)
  return _internal_llc_motionfeedback1_checksum();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_motionfeedback1_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  llc_motionfeedback1_checksum_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_motionfeedback1_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_motionfeedback1_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_motionfeedback1_checksum)
}

// optional bool llc_fbk_commandaligned = 9;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_commandaligned() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_commandaligned() const {
  return _internal_has_llc_fbk_commandaligned();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_commandaligned() {
  llc_fbk_commandaligned_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Llc_motionfeedback1_20::_internal_llc_fbk_commandaligned() const {
  return llc_fbk_commandaligned_;
}
inline bool Llc_motionfeedback1_20::llc_fbk_commandaligned() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_commandaligned)
  return _internal_llc_fbk_commandaligned();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_commandaligned(bool value) {
  _has_bits_[0] |= 0x00000100u;
  llc_fbk_commandaligned_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_commandaligned(bool value) {
  _internal_set_llc_fbk_commandaligned(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_commandaligned)
}

// optional bool llc_fbk_estoppressed = 10;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_estoppressed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_estoppressed() const {
  return _internal_has_llc_fbk_estoppressed();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_estoppressed() {
  llc_fbk_estoppressed_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Llc_motionfeedback1_20::_internal_llc_fbk_estoppressed() const {
  return llc_fbk_estoppressed_;
}
inline bool Llc_motionfeedback1_20::llc_fbk_estoppressed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_estoppressed)
  return _internal_llc_fbk_estoppressed();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_estoppressed(bool value) {
  _has_bits_[0] |= 0x00000200u;
  llc_fbk_estoppressed_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_estoppressed(bool value) {
  _internal_set_llc_fbk_estoppressed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_estoppressed)
}

// optional bool llc_fbk_adcrequestautonomy = 11;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_adcrequestautonomy() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_adcrequestautonomy() const {
  return _internal_has_llc_fbk_adcrequestautonomy();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_adcrequestautonomy() {
  llc_fbk_adcrequestautonomy_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Llc_motionfeedback1_20::_internal_llc_fbk_adcrequestautonomy() const {
  return llc_fbk_adcrequestautonomy_;
}
inline bool Llc_motionfeedback1_20::llc_fbk_adcrequestautonomy() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_adcrequestautonomy)
  return _internal_llc_fbk_adcrequestautonomy();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_adcrequestautonomy(bool value) {
  _has_bits_[0] |= 0x00000400u;
  llc_fbk_adcrequestautonomy_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_adcrequestautonomy(bool value) {
  _internal_set_llc_fbk_adcrequestautonomy(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_adcrequestautonomy)
}

// optional bool llc_fbk_allowautonomy = 12;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_allowautonomy() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_allowautonomy() const {
  return _internal_has_llc_fbk_allowautonomy();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_allowautonomy() {
  llc_fbk_allowautonomy_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Llc_motionfeedback1_20::_internal_llc_fbk_allowautonomy() const {
  return llc_fbk_allowautonomy_;
}
inline bool Llc_motionfeedback1_20::llc_fbk_allowautonomy() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_allowautonomy)
  return _internal_llc_fbk_allowautonomy();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_allowautonomy(bool value) {
  _has_bits_[0] |= 0x00000800u;
  llc_fbk_allowautonomy_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_allowautonomy(bool value) {
  _internal_set_llc_fbk_allowautonomy(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_allowautonomy)
}

// optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_longitudinalcontrolmodeType llc_fbk_longitudinalcontrolmode = 13;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_longitudinalcontrolmode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_longitudinalcontrolmode() const {
  return _internal_has_llc_fbk_longitudinalcontrolmode();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_longitudinalcontrolmode() {
  llc_fbk_longitudinalcontrolmode_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20::_internal_llc_fbk_longitudinalcontrolmode() const {
  return static_cast< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType >(llc_fbk_longitudinalcontrolmode_);
}
inline ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20::llc_fbk_longitudinalcontrolmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_longitudinalcontrolmode)
  return _internal_llc_fbk_longitudinalcontrolmode();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_longitudinalcontrolmode(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType value) {
  assert(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  llc_fbk_longitudinalcontrolmode_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_longitudinalcontrolmode(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType value) {
  _internal_set_llc_fbk_longitudinalcontrolmode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_longitudinalcontrolmode)
}

// optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_stateType llc_fbk_state = 14;
inline bool Llc_motionfeedback1_20::_internal_has_llc_fbk_state() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Llc_motionfeedback1_20::has_llc_fbk_state() const {
  return _internal_has_llc_fbk_state();
}
inline void Llc_motionfeedback1_20::clear_llc_fbk_state() {
  llc_fbk_state_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::_internal_llc_fbk_state() const {
  return static_cast< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType >(llc_fbk_state_);
}
inline ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::llc_fbk_state() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_state)
  return _internal_llc_fbk_state();
}
inline void Llc_motionfeedback1_20::_internal_set_llc_fbk_state(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType value) {
  assert(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  llc_fbk_state_ = value;
}
inline void Llc_motionfeedback1_20::set_llc_fbk_state(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType value) {
  _internal_set_llc_fbk_state(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback1_20.llc_fbk_state)
}

// -------------------------------------------------------------------

// Llc_motionfeedback2_21

// optional double llc_fbk_vehiclespeed = 1;
inline bool Llc_motionfeedback2_21::_internal_has_llc_fbk_vehiclespeed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_motionfeedback2_21::has_llc_fbk_vehiclespeed() const {
  return _internal_has_llc_fbk_vehiclespeed();
}
inline void Llc_motionfeedback2_21::clear_llc_fbk_vehiclespeed() {
  llc_fbk_vehiclespeed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Llc_motionfeedback2_21::_internal_llc_fbk_vehiclespeed() const {
  return llc_fbk_vehiclespeed_;
}
inline double Llc_motionfeedback2_21::llc_fbk_vehiclespeed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback2_21.llc_fbk_vehiclespeed)
  return _internal_llc_fbk_vehiclespeed();
}
inline void Llc_motionfeedback2_21::_internal_set_llc_fbk_vehiclespeed(double value) {
  _has_bits_[0] |= 0x00000001u;
  llc_fbk_vehiclespeed_ = value;
}
inline void Llc_motionfeedback2_21::set_llc_fbk_vehiclespeed(double value) {
  _internal_set_llc_fbk_vehiclespeed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback2_21.llc_fbk_vehiclespeed)
}

// optional int32 llc_motionfeedback2_counter = 2;
inline bool Llc_motionfeedback2_21::_internal_has_llc_motionfeedback2_counter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Llc_motionfeedback2_21::has_llc_motionfeedback2_counter() const {
  return _internal_has_llc_motionfeedback2_counter();
}
inline void Llc_motionfeedback2_21::clear_llc_motionfeedback2_counter() {
  llc_motionfeedback2_counter_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motionfeedback2_21::_internal_llc_motionfeedback2_counter() const {
  return llc_motionfeedback2_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motionfeedback2_21::llc_motionfeedback2_counter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback2_21.llc_motionfeedback2_counter)
  return _internal_llc_motionfeedback2_counter();
}
inline void Llc_motionfeedback2_21::_internal_set_llc_motionfeedback2_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  llc_motionfeedback2_counter_ = value;
}
inline void Llc_motionfeedback2_21::set_llc_motionfeedback2_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_motionfeedback2_counter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback2_21.llc_motionfeedback2_counter)
}

// optional int32 llc_motionfeedback2_checksum = 3;
inline bool Llc_motionfeedback2_21::_internal_has_llc_motionfeedback2_checksum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Llc_motionfeedback2_21::has_llc_motionfeedback2_checksum() const {
  return _internal_has_llc_motionfeedback2_checksum();
}
inline void Llc_motionfeedback2_21::clear_llc_motionfeedback2_checksum() {
  llc_motionfeedback2_checksum_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motionfeedback2_21::_internal_llc_motionfeedback2_checksum() const {
  return llc_motionfeedback2_checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motionfeedback2_21::llc_motionfeedback2_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback2_21.llc_motionfeedback2_checksum)
  return _internal_llc_motionfeedback2_checksum();
}
inline void Llc_motionfeedback2_21::_internal_set_llc_motionfeedback2_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  llc_motionfeedback2_checksum_ = value;
}
inline void Llc_motionfeedback2_21::set_llc_motionfeedback2_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_motionfeedback2_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback2_21.llc_motionfeedback2_checksum)
}

// optional double llc_fbk_steeringrate = 4;
inline bool Llc_motionfeedback2_21::_internal_has_llc_fbk_steeringrate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Llc_motionfeedback2_21::has_llc_fbk_steeringrate() const {
  return _internal_has_llc_fbk_steeringrate();
}
inline void Llc_motionfeedback2_21::clear_llc_fbk_steeringrate() {
  llc_fbk_steeringrate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Llc_motionfeedback2_21::_internal_llc_fbk_steeringrate() const {
  return llc_fbk_steeringrate_;
}
inline double Llc_motionfeedback2_21::llc_fbk_steeringrate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback2_21.llc_fbk_steeringrate)
  return _internal_llc_fbk_steeringrate();
}
inline void Llc_motionfeedback2_21::_internal_set_llc_fbk_steeringrate(double value) {
  _has_bits_[0] |= 0x00000008u;
  llc_fbk_steeringrate_ = value;
}
inline void Llc_motionfeedback2_21::set_llc_fbk_steeringrate(double value) {
  _internal_set_llc_fbk_steeringrate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback2_21.llc_fbk_steeringrate)
}

// optional double llc_fbk_steeringangle = 5;
inline bool Llc_motionfeedback2_21::_internal_has_llc_fbk_steeringangle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Llc_motionfeedback2_21::has_llc_fbk_steeringangle() const {
  return _internal_has_llc_fbk_steeringangle();
}
inline void Llc_motionfeedback2_21::clear_llc_fbk_steeringangle() {
  llc_fbk_steeringangle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Llc_motionfeedback2_21::_internal_llc_fbk_steeringangle() const {
  return llc_fbk_steeringangle_;
}
inline double Llc_motionfeedback2_21::llc_fbk_steeringangle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motionfeedback2_21.llc_fbk_steeringangle)
  return _internal_llc_fbk_steeringangle();
}
inline void Llc_motionfeedback2_21::_internal_set_llc_fbk_steeringangle(double value) {
  _has_bits_[0] |= 0x00000010u;
  llc_fbk_steeringangle_ = value;
}
inline void Llc_motionfeedback2_21::set_llc_fbk_steeringangle(double value) {
  _internal_set_llc_fbk_steeringangle(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motionfeedback2_21.llc_fbk_steeringangle)
}

// -------------------------------------------------------------------

// Llc_motioncommandfeedback1_22

// optional double llc_fbk_steeringanglesetpoint = 1;
inline bool Llc_motioncommandfeedback1_22::_internal_has_llc_fbk_steeringanglesetpoint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_motioncommandfeedback1_22::has_llc_fbk_steeringanglesetpoint() const {
  return _internal_has_llc_fbk_steeringanglesetpoint();
}
inline void Llc_motioncommandfeedback1_22::clear_llc_fbk_steeringanglesetpoint() {
  llc_fbk_steeringanglesetpoint_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Llc_motioncommandfeedback1_22::_internal_llc_fbk_steeringanglesetpoint() const {
  return llc_fbk_steeringanglesetpoint_;
}
inline double Llc_motioncommandfeedback1_22::llc_fbk_steeringanglesetpoint() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motioncommandfeedback1_22.llc_fbk_steeringanglesetpoint)
  return _internal_llc_fbk_steeringanglesetpoint();
}
inline void Llc_motioncommandfeedback1_22::_internal_set_llc_fbk_steeringanglesetpoint(double value) {
  _has_bits_[0] |= 0x00000001u;
  llc_fbk_steeringanglesetpoint_ = value;
}
inline void Llc_motioncommandfeedback1_22::set_llc_fbk_steeringanglesetpoint(double value) {
  _internal_set_llc_fbk_steeringanglesetpoint(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motioncommandfeedback1_22.llc_fbk_steeringanglesetpoint)
}

// optional double llc_fbk_throttlesetpoint = 2;
inline bool Llc_motioncommandfeedback1_22::_internal_has_llc_fbk_throttlesetpoint() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Llc_motioncommandfeedback1_22::has_llc_fbk_throttlesetpoint() const {
  return _internal_has_llc_fbk_throttlesetpoint();
}
inline void Llc_motioncommandfeedback1_22::clear_llc_fbk_throttlesetpoint() {
  llc_fbk_throttlesetpoint_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Llc_motioncommandfeedback1_22::_internal_llc_fbk_throttlesetpoint() const {
  return llc_fbk_throttlesetpoint_;
}
inline double Llc_motioncommandfeedback1_22::llc_fbk_throttlesetpoint() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motioncommandfeedback1_22.llc_fbk_throttlesetpoint)
  return _internal_llc_fbk_throttlesetpoint();
}
inline void Llc_motioncommandfeedback1_22::_internal_set_llc_fbk_throttlesetpoint(double value) {
  _has_bits_[0] |= 0x00000002u;
  llc_fbk_throttlesetpoint_ = value;
}
inline void Llc_motioncommandfeedback1_22::set_llc_fbk_throttlesetpoint(double value) {
  _internal_set_llc_fbk_throttlesetpoint(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motioncommandfeedback1_22.llc_fbk_throttlesetpoint)
}

// optional double llc_fbk_brakepercentsetpoint = 3;
inline bool Llc_motioncommandfeedback1_22::_internal_has_llc_fbk_brakepercentsetpoint() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Llc_motioncommandfeedback1_22::has_llc_fbk_brakepercentsetpoint() const {
  return _internal_has_llc_fbk_brakepercentsetpoint();
}
inline void Llc_motioncommandfeedback1_22::clear_llc_fbk_brakepercentsetpoint() {
  llc_fbk_brakepercentsetpoint_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Llc_motioncommandfeedback1_22::_internal_llc_fbk_brakepercentsetpoint() const {
  return llc_fbk_brakepercentsetpoint_;
}
inline double Llc_motioncommandfeedback1_22::llc_fbk_brakepercentsetpoint() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motioncommandfeedback1_22.llc_fbk_brakepercentsetpoint)
  return _internal_llc_fbk_brakepercentsetpoint();
}
inline void Llc_motioncommandfeedback1_22::_internal_set_llc_fbk_brakepercentsetpoint(double value) {
  _has_bits_[0] |= 0x00000004u;
  llc_fbk_brakepercentsetpoint_ = value;
}
inline void Llc_motioncommandfeedback1_22::set_llc_fbk_brakepercentsetpoint(double value) {
  _internal_set_llc_fbk_brakepercentsetpoint(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motioncommandfeedback1_22.llc_fbk_brakepercentsetpoint)
}

// optional int32 llc_motioncommandfeedback1_count = 4;
inline bool Llc_motioncommandfeedback1_22::_internal_has_llc_motioncommandfeedback1_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Llc_motioncommandfeedback1_22::has_llc_motioncommandfeedback1_count() const {
  return _internal_has_llc_motioncommandfeedback1_count();
}
inline void Llc_motioncommandfeedback1_22::clear_llc_motioncommandfeedback1_count() {
  llc_motioncommandfeedback1_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motioncommandfeedback1_22::_internal_llc_motioncommandfeedback1_count() const {
  return llc_motioncommandfeedback1_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motioncommandfeedback1_22::llc_motioncommandfeedback1_count() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motioncommandfeedback1_22.llc_motioncommandfeedback1_count)
  return _internal_llc_motioncommandfeedback1_count();
}
inline void Llc_motioncommandfeedback1_22::_internal_set_llc_motioncommandfeedback1_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  llc_motioncommandfeedback1_count_ = value;
}
inline void Llc_motioncommandfeedback1_22::set_llc_motioncommandfeedback1_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_motioncommandfeedback1_count(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motioncommandfeedback1_22.llc_motioncommandfeedback1_count)
}

// optional int32 llc_motioncommandfeedback1_check = 5;
inline bool Llc_motioncommandfeedback1_22::_internal_has_llc_motioncommandfeedback1_check() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Llc_motioncommandfeedback1_22::has_llc_motioncommandfeedback1_check() const {
  return _internal_has_llc_motioncommandfeedback1_check();
}
inline void Llc_motioncommandfeedback1_22::clear_llc_motioncommandfeedback1_check() {
  llc_motioncommandfeedback1_check_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motioncommandfeedback1_22::_internal_llc_motioncommandfeedback1_check() const {
  return llc_motioncommandfeedback1_check_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_motioncommandfeedback1_22::llc_motioncommandfeedback1_check() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_motioncommandfeedback1_22.llc_motioncommandfeedback1_check)
  return _internal_llc_motioncommandfeedback1_check();
}
inline void Llc_motioncommandfeedback1_22::_internal_set_llc_motioncommandfeedback1_check(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  llc_motioncommandfeedback1_check_ = value;
}
inline void Llc_motioncommandfeedback1_22::set_llc_motioncommandfeedback1_check(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_motioncommandfeedback1_check(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_motioncommandfeedback1_22.llc_motioncommandfeedback1_check)
}

// -------------------------------------------------------------------

// Llc_vehiclestatus_25

// optional double llc_fbk_12voltage = 1;
inline bool Llc_vehiclestatus_25::_internal_has_llc_fbk_12voltage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_vehiclestatus_25::has_llc_fbk_12voltage() const {
  return _internal_has_llc_fbk_12voltage();
}
inline void Llc_vehiclestatus_25::clear_llc_fbk_12voltage() {
  llc_fbk_12voltage_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Llc_vehiclestatus_25::_internal_llc_fbk_12voltage() const {
  return llc_fbk_12voltage_;
}
inline double Llc_vehiclestatus_25::llc_fbk_12voltage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_vehiclestatus_25.llc_fbk_12voltage)
  return _internal_llc_fbk_12voltage();
}
inline void Llc_vehiclestatus_25::_internal_set_llc_fbk_12voltage(double value) {
  _has_bits_[0] |= 0x00000001u;
  llc_fbk_12voltage_ = value;
}
inline void Llc_vehiclestatus_25::set_llc_fbk_12voltage(double value) {
  _internal_set_llc_fbk_12voltage(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_vehiclestatus_25.llc_fbk_12voltage)
}

// -------------------------------------------------------------------

// Llc_auxiliaryfeedback_120

// optional bool llc_fbk_inverter = 1;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_inverter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_inverter() const {
  return _internal_has_llc_fbk_inverter();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_inverter() {
  llc_fbk_inverter_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_inverter() const {
  return llc_fbk_inverter_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_inverter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_inverter)
  return _internal_llc_fbk_inverter();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_inverter(bool value) {
  _has_bits_[0] |= 0x00000001u;
  llc_fbk_inverter_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_inverter(bool value) {
  _internal_set_llc_fbk_inverter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_inverter)
}

// optional bool llc_fbk_pdu_ch8 = 2;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_pdu_ch8() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_pdu_ch8() const {
  return _internal_has_llc_fbk_pdu_ch8();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_pdu_ch8() {
  llc_fbk_pdu_ch8_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_pdu_ch8() const {
  return llc_fbk_pdu_ch8_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_pdu_ch8() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch8)
  return _internal_llc_fbk_pdu_ch8();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_pdu_ch8(bool value) {
  _has_bits_[0] |= 0x00000002u;
  llc_fbk_pdu_ch8_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_pdu_ch8(bool value) {
  _internal_set_llc_fbk_pdu_ch8(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch8)
}

// optional bool llc_fbk_pdu_ch7 = 3;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_pdu_ch7() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_pdu_ch7() const {
  return _internal_has_llc_fbk_pdu_ch7();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_pdu_ch7() {
  llc_fbk_pdu_ch7_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_pdu_ch7() const {
  return llc_fbk_pdu_ch7_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_pdu_ch7() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch7)
  return _internal_llc_fbk_pdu_ch7();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_pdu_ch7(bool value) {
  _has_bits_[0] |= 0x00000004u;
  llc_fbk_pdu_ch7_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_pdu_ch7(bool value) {
  _internal_set_llc_fbk_pdu_ch7(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch7)
}

// optional bool llc_fbk_pdu_ch6 = 4;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_pdu_ch6() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_pdu_ch6() const {
  return _internal_has_llc_fbk_pdu_ch6();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_pdu_ch6() {
  llc_fbk_pdu_ch6_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_pdu_ch6() const {
  return llc_fbk_pdu_ch6_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_pdu_ch6() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch6)
  return _internal_llc_fbk_pdu_ch6();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_pdu_ch6(bool value) {
  _has_bits_[0] |= 0x00000008u;
  llc_fbk_pdu_ch6_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_pdu_ch6(bool value) {
  _internal_set_llc_fbk_pdu_ch6(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch6)
}

// optional bool llc_fbk_pdu_ch5 = 5;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_pdu_ch5() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_pdu_ch5() const {
  return _internal_has_llc_fbk_pdu_ch5();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_pdu_ch5() {
  llc_fbk_pdu_ch5_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_pdu_ch5() const {
  return llc_fbk_pdu_ch5_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_pdu_ch5() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch5)
  return _internal_llc_fbk_pdu_ch5();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_pdu_ch5(bool value) {
  _has_bits_[0] |= 0x00000010u;
  llc_fbk_pdu_ch5_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_pdu_ch5(bool value) {
  _internal_set_llc_fbk_pdu_ch5(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch5)
}

// optional bool llc_fbk_pdu_ch4 = 6;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_pdu_ch4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_pdu_ch4() const {
  return _internal_has_llc_fbk_pdu_ch4();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_pdu_ch4() {
  llc_fbk_pdu_ch4_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_pdu_ch4() const {
  return llc_fbk_pdu_ch4_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_pdu_ch4() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch4)
  return _internal_llc_fbk_pdu_ch4();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_pdu_ch4(bool value) {
  _has_bits_[0] |= 0x00000020u;
  llc_fbk_pdu_ch4_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_pdu_ch4(bool value) {
  _internal_set_llc_fbk_pdu_ch4(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch4)
}

// optional bool llc_fbk_pdu_ch3 = 7;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_pdu_ch3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_pdu_ch3() const {
  return _internal_has_llc_fbk_pdu_ch3();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_pdu_ch3() {
  llc_fbk_pdu_ch3_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_pdu_ch3() const {
  return llc_fbk_pdu_ch3_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_pdu_ch3() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch3)
  return _internal_llc_fbk_pdu_ch3();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_pdu_ch3(bool value) {
  _has_bits_[0] |= 0x00000040u;
  llc_fbk_pdu_ch3_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_pdu_ch3(bool value) {
  _internal_set_llc_fbk_pdu_ch3(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch3)
}

// optional bool llc_fbk_pdu_ch2 = 8;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_pdu_ch2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_pdu_ch2() const {
  return _internal_has_llc_fbk_pdu_ch2();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_pdu_ch2() {
  llc_fbk_pdu_ch2_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_pdu_ch2() const {
  return llc_fbk_pdu_ch2_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_pdu_ch2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch2)
  return _internal_llc_fbk_pdu_ch2();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_pdu_ch2(bool value) {
  _has_bits_[0] |= 0x00000080u;
  llc_fbk_pdu_ch2_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_pdu_ch2(bool value) {
  _internal_set_llc_fbk_pdu_ch2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch2)
}

// optional bool llc_fbk_pdu_ch1 = 9;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_pdu_ch1() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_pdu_ch1() const {
  return _internal_has_llc_fbk_pdu_ch1();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_pdu_ch1() {
  llc_fbk_pdu_ch1_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_pdu_ch1() const {
  return llc_fbk_pdu_ch1_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_pdu_ch1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch1)
  return _internal_llc_fbk_pdu_ch1();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_pdu_ch1(bool value) {
  _has_bits_[0] |= 0x00000100u;
  llc_fbk_pdu_ch1_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_pdu_ch1(bool value) {
  _internal_set_llc_fbk_pdu_ch1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_pdu_ch1)
}

// optional bool llc_fbk_hazardlights = 10;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_hazardlights() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_hazardlights() const {
  return _internal_has_llc_fbk_hazardlights();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_hazardlights() {
  llc_fbk_hazardlights_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_hazardlights() const {
  return llc_fbk_hazardlights_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_hazardlights() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_hazardlights)
  return _internal_llc_fbk_hazardlights();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_hazardlights(bool value) {
  _has_bits_[0] |= 0x00000200u;
  llc_fbk_hazardlights_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_hazardlights(bool value) {
  _internal_set_llc_fbk_hazardlights(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_hazardlights)
}

// optional bool llc_fbk_ledgreenon = 11;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_ledgreenon() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_ledgreenon() const {
  return _internal_has_llc_fbk_ledgreenon();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_ledgreenon() {
  llc_fbk_ledgreenon_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_ledgreenon() const {
  return llc_fbk_ledgreenon_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_ledgreenon() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_ledgreenon)
  return _internal_llc_fbk_ledgreenon();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_ledgreenon(bool value) {
  _has_bits_[0] |= 0x00000400u;
  llc_fbk_ledgreenon_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_ledgreenon(bool value) {
  _internal_set_llc_fbk_ledgreenon(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_ledgreenon)
}

// optional bool llc_fbk_horn = 12;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_horn() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_horn() const {
  return _internal_has_llc_fbk_horn();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_horn() {
  llc_fbk_horn_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_horn() const {
  return llc_fbk_horn_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_horn)
  return _internal_llc_fbk_horn();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_horn(bool value) {
  _has_bits_[0] |= 0x00000800u;
  llc_fbk_horn_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_horn(bool value) {
  _internal_set_llc_fbk_horn(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_horn)
}

// optional bool llc_fbk_buzzeron = 13;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_buzzeron() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_buzzeron() const {
  return _internal_has_llc_fbk_buzzeron();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_buzzeron() {
  llc_fbk_buzzeron_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_buzzeron() const {
  return llc_fbk_buzzeron_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_buzzeron() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_buzzeron)
  return _internal_llc_fbk_buzzeron();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_buzzeron(bool value) {
  _has_bits_[0] |= 0x00002000u;
  llc_fbk_buzzeron_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_buzzeron(bool value) {
  _internal_set_llc_fbk_buzzeron(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_buzzeron)
}

// optional .apollo.canbus.Llc_auxiliaryfeedback_120.Llc_fbk_turnsignalType llc_fbk_turnsignal = 14;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_turnsignal() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_turnsignal() const {
  return _internal_has_llc_fbk_turnsignal();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_turnsignal() {
  llc_fbk_turnsignal_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120::_internal_llc_fbk_turnsignal() const {
  return static_cast< ::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType >(llc_fbk_turnsignal_);
}
inline ::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120::llc_fbk_turnsignal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_turnsignal)
  return _internal_llc_fbk_turnsignal();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_turnsignal(::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType value) {
  assert(::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  llc_fbk_turnsignal_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_turnsignal(::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType value) {
  _internal_set_llc_fbk_turnsignal(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_turnsignal)
}

// optional bool llc_fbk_lowbeam = 15;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_lowbeam() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_lowbeam() const {
  return _internal_has_llc_fbk_lowbeam();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_lowbeam() {
  llc_fbk_lowbeam_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_lowbeam() const {
  return llc_fbk_lowbeam_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_lowbeam() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_lowbeam)
  return _internal_llc_fbk_lowbeam();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_lowbeam(bool value) {
  _has_bits_[0] |= 0x00004000u;
  llc_fbk_lowbeam_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_lowbeam(bool value) {
  _internal_set_llc_fbk_lowbeam(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_lowbeam)
}

// optional bool llc_fbk_highbeam = 16;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_highbeam() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_highbeam() const {
  return _internal_has_llc_fbk_highbeam();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_highbeam() {
  llc_fbk_highbeam_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_highbeam() const {
  return llc_fbk_highbeam_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_highbeam() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_highbeam)
  return _internal_llc_fbk_highbeam();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_highbeam(bool value) {
  _has_bits_[0] |= 0x00008000u;
  llc_fbk_highbeam_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_highbeam(bool value) {
  _internal_set_llc_fbk_highbeam(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_highbeam)
}

// optional bool llc_fbk_ledredon = 17;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_ledredon() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_ledredon() const {
  return _internal_has_llc_fbk_ledredon();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_ledredon() {
  llc_fbk_ledredon_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_ledredon() const {
  return llc_fbk_ledredon_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_ledredon() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_ledredon)
  return _internal_llc_fbk_ledredon();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_ledredon(bool value) {
  _has_bits_[0] |= 0x00010000u;
  llc_fbk_ledredon_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_ledredon(bool value) {
  _internal_set_llc_fbk_ledredon(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_ledredon)
}

// optional bool llc_fbk_autonomybuttonpressed = 18;
inline bool Llc_auxiliaryfeedback_120::_internal_has_llc_fbk_autonomybuttonpressed() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Llc_auxiliaryfeedback_120::has_llc_fbk_autonomybuttonpressed() const {
  return _internal_has_llc_fbk_autonomybuttonpressed();
}
inline void Llc_auxiliaryfeedback_120::clear_llc_fbk_autonomybuttonpressed() {
  llc_fbk_autonomybuttonpressed_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool Llc_auxiliaryfeedback_120::_internal_llc_fbk_autonomybuttonpressed() const {
  return llc_fbk_autonomybuttonpressed_;
}
inline bool Llc_auxiliaryfeedback_120::llc_fbk_autonomybuttonpressed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_autonomybuttonpressed)
  return _internal_llc_fbk_autonomybuttonpressed();
}
inline void Llc_auxiliaryfeedback_120::_internal_set_llc_fbk_autonomybuttonpressed(bool value) {
  _has_bits_[0] |= 0x00020000u;
  llc_fbk_autonomybuttonpressed_ = value;
}
inline void Llc_auxiliaryfeedback_120::set_llc_fbk_autonomybuttonpressed(bool value) {
  _internal_set_llc_fbk_autonomybuttonpressed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_auxiliaryfeedback_120.llc_fbk_autonomybuttonpressed)
}

// -------------------------------------------------------------------

// Llc_diag_fault_620

// optional int32 llc_disengagecounter_brake = 1;
inline bool Llc_diag_fault_620::_internal_has_llc_disengagecounter_brake() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_disengagecounter_brake() const {
  return _internal_has_llc_disengagecounter_brake();
}
inline void Llc_diag_fault_620::clear_llc_disengagecounter_brake() {
  llc_disengagecounter_brake_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_disengagecounter_brake() const {
  return llc_disengagecounter_brake_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_disengagecounter_brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_disengagecounter_brake)
  return _internal_llc_disengagecounter_brake();
}
inline void Llc_diag_fault_620::_internal_set_llc_disengagecounter_brake(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  llc_disengagecounter_brake_ = value;
}
inline void Llc_diag_fault_620::set_llc_disengagecounter_brake(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_disengagecounter_brake(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_disengagecounter_brake)
}

// optional int32 llc_disengagecounter_steer = 2;
inline bool Llc_diag_fault_620::_internal_has_llc_disengagecounter_steer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_disengagecounter_steer() const {
  return _internal_has_llc_disengagecounter_steer();
}
inline void Llc_diag_fault_620::clear_llc_disengagecounter_steer() {
  llc_disengagecounter_steer_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_disengagecounter_steer() const {
  return llc_disengagecounter_steer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_disengagecounter_steer() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_disengagecounter_steer)
  return _internal_llc_disengagecounter_steer();
}
inline void Llc_diag_fault_620::_internal_set_llc_disengagecounter_steer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  llc_disengagecounter_steer_ = value;
}
inline void Llc_diag_fault_620::set_llc_disengagecounter_steer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_disengagecounter_steer(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_disengagecounter_steer)
}

// optional int32 llc_disengagecounter_throttle = 3;
inline bool Llc_diag_fault_620::_internal_has_llc_disengagecounter_throttle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_disengagecounter_throttle() const {
  return _internal_has_llc_disengagecounter_throttle();
}
inline void Llc_diag_fault_620::clear_llc_disengagecounter_throttle() {
  llc_disengagecounter_throttle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_disengagecounter_throttle() const {
  return llc_disengagecounter_throttle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_disengagecounter_throttle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_disengagecounter_throttle)
  return _internal_llc_disengagecounter_throttle();
}
inline void Llc_diag_fault_620::_internal_set_llc_disengagecounter_throttle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  llc_disengagecounter_throttle_ = value;
}
inline void Llc_diag_fault_620::set_llc_disengagecounter_throttle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_disengagecounter_throttle(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_disengagecounter_throttle)
}

// optional int32 llc_fbk_faultcounter = 4;
inline bool Llc_diag_fault_620::_internal_has_llc_fbk_faultcounter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_fbk_faultcounter() const {
  return _internal_has_llc_fbk_faultcounter();
}
inline void Llc_diag_fault_620::clear_llc_fbk_faultcounter() {
  llc_fbk_faultcounter_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_fbk_faultcounter() const {
  return llc_fbk_faultcounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_fbk_faultcounter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_fbk_faultcounter)
  return _internal_llc_fbk_faultcounter();
}
inline void Llc_diag_fault_620::_internal_set_llc_fbk_faultcounter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  llc_fbk_faultcounter_ = value;
}
inline void Llc_diag_fault_620::set_llc_fbk_faultcounter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_fbk_faultcounter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_fbk_faultcounter)
}

// optional int32 llc_disengagecounter_button = 5;
inline bool Llc_diag_fault_620::_internal_has_llc_disengagecounter_button() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_disengagecounter_button() const {
  return _internal_has_llc_disengagecounter_button();
}
inline void Llc_diag_fault_620::clear_llc_disengagecounter_button() {
  llc_disengagecounter_button_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_disengagecounter_button() const {
  return llc_disengagecounter_button_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_disengagecounter_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_disengagecounter_button)
  return _internal_llc_disengagecounter_button();
}
inline void Llc_diag_fault_620::_internal_set_llc_disengagecounter_button(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  llc_disengagecounter_button_ = value;
}
inline void Llc_diag_fault_620::set_llc_disengagecounter_button(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_disengagecounter_button(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_disengagecounter_button)
}

// optional int32 llc_fbk_version_year = 6;
inline bool Llc_diag_fault_620::_internal_has_llc_fbk_version_year() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_fbk_version_year() const {
  return _internal_has_llc_fbk_version_year();
}
inline void Llc_diag_fault_620::clear_llc_fbk_version_year() {
  llc_fbk_version_year_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_fbk_version_year() const {
  return llc_fbk_version_year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_fbk_version_year() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_fbk_version_year)
  return _internal_llc_fbk_version_year();
}
inline void Llc_diag_fault_620::_internal_set_llc_fbk_version_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  llc_fbk_version_year_ = value;
}
inline void Llc_diag_fault_620::set_llc_fbk_version_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_fbk_version_year(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_fbk_version_year)
}

// optional int32 llc_fbk_version_month = 7;
inline bool Llc_diag_fault_620::_internal_has_llc_fbk_version_month() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_fbk_version_month() const {
  return _internal_has_llc_fbk_version_month();
}
inline void Llc_diag_fault_620::clear_llc_fbk_version_month() {
  llc_fbk_version_month_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_fbk_version_month() const {
  return llc_fbk_version_month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_fbk_version_month() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_fbk_version_month)
  return _internal_llc_fbk_version_month();
}
inline void Llc_diag_fault_620::_internal_set_llc_fbk_version_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  llc_fbk_version_month_ = value;
}
inline void Llc_diag_fault_620::set_llc_fbk_version_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_fbk_version_month(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_fbk_version_month)
}

// optional int32 llc_fbk_version_day = 8;
inline bool Llc_diag_fault_620::_internal_has_llc_fbk_version_day() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_fbk_version_day() const {
  return _internal_has_llc_fbk_version_day();
}
inline void Llc_diag_fault_620::clear_llc_fbk_version_day() {
  llc_fbk_version_day_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_fbk_version_day() const {
  return llc_fbk_version_day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_fbk_version_day() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_fbk_version_day)
  return _internal_llc_fbk_version_day();
}
inline void Llc_diag_fault_620::_internal_set_llc_fbk_version_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  llc_fbk_version_day_ = value;
}
inline void Llc_diag_fault_620::set_llc_fbk_version_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_fbk_version_day(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_fbk_version_day)
}

// optional int32 llc_fbk_version_hour = 9;
inline bool Llc_diag_fault_620::_internal_has_llc_fbk_version_hour() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Llc_diag_fault_620::has_llc_fbk_version_hour() const {
  return _internal_has_llc_fbk_version_hour();
}
inline void Llc_diag_fault_620::clear_llc_fbk_version_hour() {
  llc_fbk_version_hour_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::_internal_llc_fbk_version_hour() const {
  return llc_fbk_version_hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_fault_620::llc_fbk_version_hour() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_fault_620.llc_fbk_version_hour)
  return _internal_llc_fbk_version_hour();
}
inline void Llc_diag_fault_620::_internal_set_llc_fbk_version_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  llc_fbk_version_hour_ = value;
}
inline void Llc_diag_fault_620::set_llc_fbk_version_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_fbk_version_hour(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_fault_620.llc_fbk_version_hour)
}

// -------------------------------------------------------------------

// Llc_diag_steeringcontrol_722

// optional double llc_dbg_steeringsensorposition = 1;
inline bool Llc_diag_steeringcontrol_722::_internal_has_llc_dbg_steeringsensorposition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_diag_steeringcontrol_722::has_llc_dbg_steeringsensorposition() const {
  return _internal_has_llc_dbg_steeringsensorposition();
}
inline void Llc_diag_steeringcontrol_722::clear_llc_dbg_steeringsensorposition() {
  llc_dbg_steeringsensorposition_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Llc_diag_steeringcontrol_722::_internal_llc_dbg_steeringsensorposition() const {
  return llc_dbg_steeringsensorposition_;
}
inline double Llc_diag_steeringcontrol_722::llc_dbg_steeringsensorposition() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_steeringcontrol_722.llc_dbg_steeringsensorposition)
  return _internal_llc_dbg_steeringsensorposition();
}
inline void Llc_diag_steeringcontrol_722::_internal_set_llc_dbg_steeringsensorposition(double value) {
  _has_bits_[0] |= 0x00000001u;
  llc_dbg_steeringsensorposition_ = value;
}
inline void Llc_diag_steeringcontrol_722::set_llc_dbg_steeringsensorposition(double value) {
  _internal_set_llc_dbg_steeringsensorposition(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_steeringcontrol_722.llc_dbg_steeringsensorposition)
}

// optional int32 llc_dbg_steeringrackinputtorque = 2;
inline bool Llc_diag_steeringcontrol_722::_internal_has_llc_dbg_steeringrackinputtorque() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Llc_diag_steeringcontrol_722::has_llc_dbg_steeringrackinputtorque() const {
  return _internal_has_llc_dbg_steeringrackinputtorque();
}
inline void Llc_diag_steeringcontrol_722::clear_llc_dbg_steeringrackinputtorque() {
  llc_dbg_steeringrackinputtorque_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_steeringcontrol_722::_internal_llc_dbg_steeringrackinputtorque() const {
  return llc_dbg_steeringrackinputtorque_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_steeringcontrol_722::llc_dbg_steeringrackinputtorque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_steeringcontrol_722.llc_dbg_steeringrackinputtorque)
  return _internal_llc_dbg_steeringrackinputtorque();
}
inline void Llc_diag_steeringcontrol_722::_internal_set_llc_dbg_steeringrackinputtorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  llc_dbg_steeringrackinputtorque_ = value;
}
inline void Llc_diag_steeringcontrol_722::set_llc_dbg_steeringrackinputtorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_dbg_steeringrackinputtorque(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_steeringcontrol_722.llc_dbg_steeringrackinputtorque)
}

// optional double llc_dbg_steeringmotorposition = 3;
inline bool Llc_diag_steeringcontrol_722::_internal_has_llc_dbg_steeringmotorposition() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Llc_diag_steeringcontrol_722::has_llc_dbg_steeringmotorposition() const {
  return _internal_has_llc_dbg_steeringmotorposition();
}
inline void Llc_diag_steeringcontrol_722::clear_llc_dbg_steeringmotorposition() {
  llc_dbg_steeringmotorposition_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Llc_diag_steeringcontrol_722::_internal_llc_dbg_steeringmotorposition() const {
  return llc_dbg_steeringmotorposition_;
}
inline double Llc_diag_steeringcontrol_722::llc_dbg_steeringmotorposition() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_steeringcontrol_722.llc_dbg_steeringmotorposition)
  return _internal_llc_dbg_steeringmotorposition();
}
inline void Llc_diag_steeringcontrol_722::_internal_set_llc_dbg_steeringmotorposition(double value) {
  _has_bits_[0] |= 0x00000002u;
  llc_dbg_steeringmotorposition_ = value;
}
inline void Llc_diag_steeringcontrol_722::set_llc_dbg_steeringmotorposition(double value) {
  _internal_set_llc_dbg_steeringmotorposition(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_steeringcontrol_722.llc_dbg_steeringmotorposition)
}

// -------------------------------------------------------------------

// Adc_auxiliarycontrol_110

// optional int32 adc_auxcontrol_counter = 1;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_auxcontrol_counter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_auxcontrol_counter() const {
  return _internal_has_adc_auxcontrol_counter();
}
inline void Adc_auxiliarycontrol_110::clear_adc_auxcontrol_counter() {
  adc_auxcontrol_counter_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_auxiliarycontrol_110::_internal_adc_auxcontrol_counter() const {
  return adc_auxcontrol_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_auxiliarycontrol_110::adc_auxcontrol_counter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_auxcontrol_counter)
  return _internal_adc_auxcontrol_counter();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_auxcontrol_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  adc_auxcontrol_counter_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_auxcontrol_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adc_auxcontrol_counter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_auxcontrol_counter)
}

// optional int32 adc_auxcontrol_checksum = 2;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_auxcontrol_checksum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_auxcontrol_checksum() const {
  return _internal_has_adc_auxcontrol_checksum();
}
inline void Adc_auxiliarycontrol_110::clear_adc_auxcontrol_checksum() {
  adc_auxcontrol_checksum_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_auxiliarycontrol_110::_internal_adc_auxcontrol_checksum() const {
  return adc_auxcontrol_checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_auxiliarycontrol_110::adc_auxcontrol_checksum() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_auxcontrol_checksum)
  return _internal_adc_auxcontrol_checksum();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_auxcontrol_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  adc_auxcontrol_checksum_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_auxcontrol_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adc_auxcontrol_checksum(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_auxcontrol_checksum)
}

// optional bool adc_cmd_inverter_controlenable = 3;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_inverter_controlenable() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_inverter_controlenable() const {
  return _internal_has_adc_cmd_inverter_controlenable();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_inverter_controlenable() {
  adc_cmd_inverter_controlenable_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_inverter_controlenable() const {
  return adc_cmd_inverter_controlenable_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_inverter_controlenable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_inverter_controlenable)
  return _internal_adc_cmd_inverter_controlenable();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_inverter_controlenable(bool value) {
  _has_bits_[0] |= 0x00000008u;
  adc_cmd_inverter_controlenable_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_inverter_controlenable(bool value) {
  _internal_set_adc_cmd_inverter_controlenable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_inverter_controlenable)
}

// optional bool adc_cmd_inverter = 4;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_inverter() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_inverter() const {
  return _internal_has_adc_cmd_inverter();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_inverter() {
  adc_cmd_inverter_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_inverter() const {
  return adc_cmd_inverter_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_inverter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_inverter)
  return _internal_adc_cmd_inverter();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_inverter(bool value) {
  _has_bits_[0] |= 0x00000010u;
  adc_cmd_inverter_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_inverter(bool value) {
  _internal_set_adc_cmd_inverter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_inverter)
}

// optional int32 adc_cmd_wiper = 5;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_wiper() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_wiper() const {
  return _internal_has_adc_cmd_wiper();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_wiper() {
  adc_cmd_wiper_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_auxiliarycontrol_110::_internal_adc_cmd_wiper() const {
  return adc_cmd_wiper_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Adc_auxiliarycontrol_110::adc_cmd_wiper() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_wiper)
  return _internal_adc_cmd_wiper();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_wiper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  adc_cmd_wiper_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_wiper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adc_cmd_wiper(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_wiper)
}

// optional bool adc_cmd_pdu_controlenable = 6;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_controlenable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_controlenable() const {
  return _internal_has_adc_cmd_pdu_controlenable();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_controlenable() {
  adc_cmd_pdu_controlenable_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_controlenable() const {
  return adc_cmd_pdu_controlenable_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_controlenable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_controlenable)
  return _internal_adc_cmd_pdu_controlenable();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_controlenable(bool value) {
  _has_bits_[0] |= 0x00000020u;
  adc_cmd_pdu_controlenable_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_controlenable(bool value) {
  _internal_set_adc_cmd_pdu_controlenable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_controlenable)
}

// optional bool adc_cmd_pdu_ch8 = 7;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_ch8() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_ch8() const {
  return _internal_has_adc_cmd_pdu_ch8();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_ch8() {
  adc_cmd_pdu_ch8_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_ch8() const {
  return adc_cmd_pdu_ch8_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_ch8() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch8)
  return _internal_adc_cmd_pdu_ch8();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_ch8(bool value) {
  _has_bits_[0] |= 0x00000040u;
  adc_cmd_pdu_ch8_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_ch8(bool value) {
  _internal_set_adc_cmd_pdu_ch8(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch8)
}

// optional bool adc_cmd_pdu_ch7 = 8;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_ch7() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_ch7() const {
  return _internal_has_adc_cmd_pdu_ch7();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_ch7() {
  adc_cmd_pdu_ch7_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_ch7() const {
  return adc_cmd_pdu_ch7_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_ch7() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch7)
  return _internal_adc_cmd_pdu_ch7();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_ch7(bool value) {
  _has_bits_[0] |= 0x00000080u;
  adc_cmd_pdu_ch7_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_ch7(bool value) {
  _internal_set_adc_cmd_pdu_ch7(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch7)
}

// optional bool adc_cmd_pdu_ch6 = 9;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_ch6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_ch6() const {
  return _internal_has_adc_cmd_pdu_ch6();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_ch6() {
  adc_cmd_pdu_ch6_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_ch6() const {
  return adc_cmd_pdu_ch6_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_ch6() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch6)
  return _internal_adc_cmd_pdu_ch6();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_ch6(bool value) {
  _has_bits_[0] |= 0x00000100u;
  adc_cmd_pdu_ch6_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_ch6(bool value) {
  _internal_set_adc_cmd_pdu_ch6(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch6)
}

// optional bool adc_cmd_pdu_ch5 = 10;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_ch5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_ch5() const {
  return _internal_has_adc_cmd_pdu_ch5();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_ch5() {
  adc_cmd_pdu_ch5_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_ch5() const {
  return adc_cmd_pdu_ch5_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_ch5() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch5)
  return _internal_adc_cmd_pdu_ch5();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_ch5(bool value) {
  _has_bits_[0] |= 0x00000200u;
  adc_cmd_pdu_ch5_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_ch5(bool value) {
  _internal_set_adc_cmd_pdu_ch5(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch5)
}

// optional bool adc_cmd_pdu_ch4 = 11;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_ch4() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_ch4() const {
  return _internal_has_adc_cmd_pdu_ch4();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_ch4() {
  adc_cmd_pdu_ch4_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_ch4() const {
  return adc_cmd_pdu_ch4_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_ch4() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch4)
  return _internal_adc_cmd_pdu_ch4();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_ch4(bool value) {
  _has_bits_[0] |= 0x00000400u;
  adc_cmd_pdu_ch4_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_ch4(bool value) {
  _internal_set_adc_cmd_pdu_ch4(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch4)
}

// optional bool adc_cmd_pdu_ch3 = 12;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_ch3() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_ch3() const {
  return _internal_has_adc_cmd_pdu_ch3();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_ch3() {
  adc_cmd_pdu_ch3_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_ch3() const {
  return adc_cmd_pdu_ch3_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_ch3() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch3)
  return _internal_adc_cmd_pdu_ch3();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_ch3(bool value) {
  _has_bits_[0] |= 0x00000800u;
  adc_cmd_pdu_ch3_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_ch3(bool value) {
  _internal_set_adc_cmd_pdu_ch3(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch3)
}

// optional bool adc_cmd_pdu_ch2 = 13;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_ch2() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_ch2() const {
  return _internal_has_adc_cmd_pdu_ch2();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_ch2() {
  adc_cmd_pdu_ch2_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_ch2() const {
  return adc_cmd_pdu_ch2_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_ch2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch2)
  return _internal_adc_cmd_pdu_ch2();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_ch2(bool value) {
  _has_bits_[0] |= 0x00001000u;
  adc_cmd_pdu_ch2_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_ch2(bool value) {
  _internal_set_adc_cmd_pdu_ch2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch2)
}

// optional bool adc_cmd_pdu_ch1 = 14;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_pdu_ch1() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_pdu_ch1() const {
  return _internal_has_adc_cmd_pdu_ch1();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_pdu_ch1() {
  adc_cmd_pdu_ch1_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_pdu_ch1() const {
  return adc_cmd_pdu_ch1_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_pdu_ch1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch1)
  return _internal_adc_cmd_pdu_ch1();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_pdu_ch1(bool value) {
  _has_bits_[0] |= 0x00002000u;
  adc_cmd_pdu_ch1_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_pdu_ch1(bool value) {
  _internal_set_adc_cmd_pdu_ch1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_pdu_ch1)
}

// optional bool adc_cmd_hazardlights = 15;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_hazardlights() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_hazardlights() const {
  return _internal_has_adc_cmd_hazardlights();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_hazardlights() {
  adc_cmd_hazardlights_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_hazardlights() const {
  return adc_cmd_hazardlights_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_hazardlights() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_hazardlights)
  return _internal_adc_cmd_hazardlights();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_hazardlights(bool value) {
  _has_bits_[0] |= 0x00004000u;
  adc_cmd_hazardlights_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_hazardlights(bool value) {
  _internal_set_adc_cmd_hazardlights(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_hazardlights)
}

// optional bool adc_cmd_highbeam = 16;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_highbeam() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_highbeam() const {
  return _internal_has_adc_cmd_highbeam();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_highbeam() {
  adc_cmd_highbeam_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_highbeam() const {
  return adc_cmd_highbeam_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_highbeam() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_highbeam)
  return _internal_adc_cmd_highbeam();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_highbeam(bool value) {
  _has_bits_[0] |= 0x00008000u;
  adc_cmd_highbeam_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_highbeam(bool value) {
  _internal_set_adc_cmd_highbeam(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_highbeam)
}

// optional bool adc_cmd_lowbeam = 17;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_lowbeam() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_lowbeam() const {
  return _internal_has_adc_cmd_lowbeam();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_lowbeam() {
  adc_cmd_lowbeam_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_lowbeam() const {
  return adc_cmd_lowbeam_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_lowbeam() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_lowbeam)
  return _internal_adc_cmd_lowbeam();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_lowbeam(bool value) {
  _has_bits_[0] |= 0x00010000u;
  adc_cmd_lowbeam_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_lowbeam(bool value) {
  _internal_set_adc_cmd_lowbeam(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_lowbeam)
}

// optional bool adc_cmd_horn = 18;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_horn() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_horn() const {
  return _internal_has_adc_cmd_horn();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_horn() {
  adc_cmd_horn_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool Adc_auxiliarycontrol_110::_internal_adc_cmd_horn() const {
  return adc_cmd_horn_;
}
inline bool Adc_auxiliarycontrol_110::adc_cmd_horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_horn)
  return _internal_adc_cmd_horn();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_horn(bool value) {
  _has_bits_[0] |= 0x00020000u;
  adc_cmd_horn_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_horn(bool value) {
  _internal_set_adc_cmd_horn(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_horn)
}

// optional .apollo.canbus.Adc_auxiliarycontrol_110.Adc_cmd_turnsignalType adc_cmd_turnsignal = 19;
inline bool Adc_auxiliarycontrol_110::_internal_has_adc_cmd_turnsignal() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Adc_auxiliarycontrol_110::has_adc_cmd_turnsignal() const {
  return _internal_has_adc_cmd_turnsignal();
}
inline void Adc_auxiliarycontrol_110::clear_adc_cmd_turnsignal() {
  adc_cmd_turnsignal_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110::_internal_adc_cmd_turnsignal() const {
  return static_cast< ::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType >(adc_cmd_turnsignal_);
}
inline ::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110::adc_cmd_turnsignal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_turnsignal)
  return _internal_adc_cmd_turnsignal();
}
inline void Adc_auxiliarycontrol_110::_internal_set_adc_cmd_turnsignal(::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType value) {
  assert(::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  adc_cmd_turnsignal_ = value;
}
inline void Adc_auxiliarycontrol_110::set_adc_cmd_turnsignal(::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType value) {
  _internal_set_adc_cmd_turnsignal(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Adc_auxiliarycontrol_110.adc_cmd_turnsignal)
}

// -------------------------------------------------------------------

// Llc_diag_brakecontrol_721

// optional double llc_dbg_brakepidcontribution_p = 1;
inline bool Llc_diag_brakecontrol_721::_internal_has_llc_dbg_brakepidcontribution_p() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Llc_diag_brakecontrol_721::has_llc_dbg_brakepidcontribution_p() const {
  return _internal_has_llc_dbg_brakepidcontribution_p();
}
inline void Llc_diag_brakecontrol_721::clear_llc_dbg_brakepidcontribution_p() {
  llc_dbg_brakepidcontribution_p_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Llc_diag_brakecontrol_721::_internal_llc_dbg_brakepidcontribution_p() const {
  return llc_dbg_brakepidcontribution_p_;
}
inline double Llc_diag_brakecontrol_721::llc_dbg_brakepidcontribution_p() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepidcontribution_p)
  return _internal_llc_dbg_brakepidcontribution_p();
}
inline void Llc_diag_brakecontrol_721::_internal_set_llc_dbg_brakepidcontribution_p(double value) {
  _has_bits_[0] |= 0x00000001u;
  llc_dbg_brakepidcontribution_p_ = value;
}
inline void Llc_diag_brakecontrol_721::set_llc_dbg_brakepidcontribution_p(double value) {
  _internal_set_llc_dbg_brakepidcontribution_p(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepidcontribution_p)
}

// optional double llc_dbg_brakepidcontribution_i = 2;
inline bool Llc_diag_brakecontrol_721::_internal_has_llc_dbg_brakepidcontribution_i() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Llc_diag_brakecontrol_721::has_llc_dbg_brakepidcontribution_i() const {
  return _internal_has_llc_dbg_brakepidcontribution_i();
}
inline void Llc_diag_brakecontrol_721::clear_llc_dbg_brakepidcontribution_i() {
  llc_dbg_brakepidcontribution_i_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Llc_diag_brakecontrol_721::_internal_llc_dbg_brakepidcontribution_i() const {
  return llc_dbg_brakepidcontribution_i_;
}
inline double Llc_diag_brakecontrol_721::llc_dbg_brakepidcontribution_i() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepidcontribution_i)
  return _internal_llc_dbg_brakepidcontribution_i();
}
inline void Llc_diag_brakecontrol_721::_internal_set_llc_dbg_brakepidcontribution_i(double value) {
  _has_bits_[0] |= 0x00000002u;
  llc_dbg_brakepidcontribution_i_ = value;
}
inline void Llc_diag_brakecontrol_721::set_llc_dbg_brakepidcontribution_i(double value) {
  _internal_set_llc_dbg_brakepidcontribution_i(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepidcontribution_i)
}

// optional double llc_dbg_brakepidcontribution_d = 3;
inline bool Llc_diag_brakecontrol_721::_internal_has_llc_dbg_brakepidcontribution_d() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Llc_diag_brakecontrol_721::has_llc_dbg_brakepidcontribution_d() const {
  return _internal_has_llc_dbg_brakepidcontribution_d();
}
inline void Llc_diag_brakecontrol_721::clear_llc_dbg_brakepidcontribution_d() {
  llc_dbg_brakepidcontribution_d_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Llc_diag_brakecontrol_721::_internal_llc_dbg_brakepidcontribution_d() const {
  return llc_dbg_brakepidcontribution_d_;
}
inline double Llc_diag_brakecontrol_721::llc_dbg_brakepidcontribution_d() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepidcontribution_d)
  return _internal_llc_dbg_brakepidcontribution_d();
}
inline void Llc_diag_brakecontrol_721::_internal_set_llc_dbg_brakepidcontribution_d(double value) {
  _has_bits_[0] |= 0x00000004u;
  llc_dbg_brakepidcontribution_d_ = value;
}
inline void Llc_diag_brakecontrol_721::set_llc_dbg_brakepidcontribution_d(double value) {
  _internal_set_llc_dbg_brakepidcontribution_d(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepidcontribution_d)
}

// optional double llc_dbg_brakepid_output = 4;
inline bool Llc_diag_brakecontrol_721::_internal_has_llc_dbg_brakepid_output() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Llc_diag_brakecontrol_721::has_llc_dbg_brakepid_output() const {
  return _internal_has_llc_dbg_brakepid_output();
}
inline void Llc_diag_brakecontrol_721::clear_llc_dbg_brakepid_output() {
  llc_dbg_brakepid_output_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Llc_diag_brakecontrol_721::_internal_llc_dbg_brakepid_output() const {
  return llc_dbg_brakepid_output_;
}
inline double Llc_diag_brakecontrol_721::llc_dbg_brakepid_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepid_output)
  return _internal_llc_dbg_brakepid_output();
}
inline void Llc_diag_brakecontrol_721::_internal_set_llc_dbg_brakepid_output(double value) {
  _has_bits_[0] |= 0x00000008u;
  llc_dbg_brakepid_output_ = value;
}
inline void Llc_diag_brakecontrol_721::set_llc_dbg_brakepid_output(double value) {
  _internal_set_llc_dbg_brakepid_output(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepid_output)
}

// optional int32 llc_dbg_brakepid_error = 5;
inline bool Llc_diag_brakecontrol_721::_internal_has_llc_dbg_brakepid_error() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Llc_diag_brakecontrol_721::has_llc_dbg_brakepid_error() const {
  return _internal_has_llc_dbg_brakepid_error();
}
inline void Llc_diag_brakecontrol_721::clear_llc_dbg_brakepid_error() {
  llc_dbg_brakepid_error_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_brakecontrol_721::_internal_llc_dbg_brakepid_error() const {
  return llc_dbg_brakepid_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Llc_diag_brakecontrol_721::llc_dbg_brakepid_error() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepid_error)
  return _internal_llc_dbg_brakepid_error();
}
inline void Llc_diag_brakecontrol_721::_internal_set_llc_dbg_brakepid_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  llc_dbg_brakepid_error_ = value;
}
inline void Llc_diag_brakecontrol_721::set_llc_dbg_brakepid_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_llc_dbg_brakepid_error(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakepid_error)
}

// optional double llc_dbg_brakefeedforward = 6;
inline bool Llc_diag_brakecontrol_721::_internal_has_llc_dbg_brakefeedforward() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Llc_diag_brakecontrol_721::has_llc_dbg_brakefeedforward() const {
  return _internal_has_llc_dbg_brakefeedforward();
}
inline void Llc_diag_brakecontrol_721::clear_llc_dbg_brakefeedforward() {
  llc_dbg_brakefeedforward_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Llc_diag_brakecontrol_721::_internal_llc_dbg_brakefeedforward() const {
  return llc_dbg_brakefeedforward_;
}
inline double Llc_diag_brakecontrol_721::llc_dbg_brakefeedforward() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakefeedforward)
  return _internal_llc_dbg_brakefeedforward();
}
inline void Llc_diag_brakecontrol_721::_internal_set_llc_dbg_brakefeedforward(double value) {
  _has_bits_[0] |= 0x00000010u;
  llc_dbg_brakefeedforward_ = value;
}
inline void Llc_diag_brakecontrol_721::set_llc_dbg_brakefeedforward(double value) {
  _internal_set_llc_dbg_brakefeedforward(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Llc_diag_brakecontrol_721.llc_dbg_brakefeedforward)
}

// -------------------------------------------------------------------

// Transit

// optional .apollo.canbus.Llc_vehiclelimits_24 llc_vehiclelimits_24 = 1;
inline bool Transit::_internal_has_llc_vehiclelimits_24() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || llc_vehiclelimits_24_ != nullptr);
  return value;
}
inline bool Transit::has_llc_vehiclelimits_24() const {
  return _internal_has_llc_vehiclelimits_24();
}
inline void Transit::clear_llc_vehiclelimits_24() {
  if (llc_vehiclelimits_24_ != nullptr) llc_vehiclelimits_24_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::canbus::Llc_vehiclelimits_24& Transit::_internal_llc_vehiclelimits_24() const {
  const ::apollo::canbus::Llc_vehiclelimits_24* p = llc_vehiclelimits_24_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_vehiclelimits_24*>(
      &::apollo::canbus::_Llc_vehiclelimits_24_default_instance_);
}
inline const ::apollo::canbus::Llc_vehiclelimits_24& Transit::llc_vehiclelimits_24() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_vehiclelimits_24)
  return _internal_llc_vehiclelimits_24();
}
inline ::apollo::canbus::Llc_vehiclelimits_24* Transit::release_llc_vehiclelimits_24() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_vehiclelimits_24)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Llc_vehiclelimits_24* temp = llc_vehiclelimits_24_;
  llc_vehiclelimits_24_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_vehiclelimits_24* Transit::_internal_mutable_llc_vehiclelimits_24() {
  _has_bits_[0] |= 0x00000001u;
  if (llc_vehiclelimits_24_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_vehiclelimits_24>(GetArenaNoVirtual());
    llc_vehiclelimits_24_ = p;
  }
  return llc_vehiclelimits_24_;
}
inline ::apollo::canbus::Llc_vehiclelimits_24* Transit::mutable_llc_vehiclelimits_24() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_vehiclelimits_24)
  return _internal_mutable_llc_vehiclelimits_24();
}
inline void Transit::set_allocated_llc_vehiclelimits_24(::apollo::canbus::Llc_vehiclelimits_24* llc_vehiclelimits_24) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_vehiclelimits_24_;
  }
  if (llc_vehiclelimits_24) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_vehiclelimits_24 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_vehiclelimits_24, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  llc_vehiclelimits_24_ = llc_vehiclelimits_24;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_vehiclelimits_24)
}

// optional .apollo.canbus.Adc_motioncontrol1_10 adc_motioncontrol1_10 = 2;
inline bool Transit::_internal_has_adc_motioncontrol1_10() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || adc_motioncontrol1_10_ != nullptr);
  return value;
}
inline bool Transit::has_adc_motioncontrol1_10() const {
  return _internal_has_adc_motioncontrol1_10();
}
inline void Transit::clear_adc_motioncontrol1_10() {
  if (adc_motioncontrol1_10_ != nullptr) adc_motioncontrol1_10_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::canbus::Adc_motioncontrol1_10& Transit::_internal_adc_motioncontrol1_10() const {
  const ::apollo::canbus::Adc_motioncontrol1_10* p = adc_motioncontrol1_10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Adc_motioncontrol1_10*>(
      &::apollo::canbus::_Adc_motioncontrol1_10_default_instance_);
}
inline const ::apollo::canbus::Adc_motioncontrol1_10& Transit::adc_motioncontrol1_10() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.adc_motioncontrol1_10)
  return _internal_adc_motioncontrol1_10();
}
inline ::apollo::canbus::Adc_motioncontrol1_10* Transit::release_adc_motioncontrol1_10() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.adc_motioncontrol1_10)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Adc_motioncontrol1_10* temp = adc_motioncontrol1_10_;
  adc_motioncontrol1_10_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Adc_motioncontrol1_10* Transit::_internal_mutable_adc_motioncontrol1_10() {
  _has_bits_[0] |= 0x00000002u;
  if (adc_motioncontrol1_10_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Adc_motioncontrol1_10>(GetArenaNoVirtual());
    adc_motioncontrol1_10_ = p;
  }
  return adc_motioncontrol1_10_;
}
inline ::apollo::canbus::Adc_motioncontrol1_10* Transit::mutable_adc_motioncontrol1_10() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.adc_motioncontrol1_10)
  return _internal_mutable_adc_motioncontrol1_10();
}
inline void Transit::set_allocated_adc_motioncontrol1_10(::apollo::canbus::Adc_motioncontrol1_10* adc_motioncontrol1_10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete adc_motioncontrol1_10_;
  }
  if (adc_motioncontrol1_10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adc_motioncontrol1_10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adc_motioncontrol1_10, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  adc_motioncontrol1_10_ = adc_motioncontrol1_10;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.adc_motioncontrol1_10)
}

// optional .apollo.canbus.Adc_motioncontrollimits1_12 adc_motioncontrollimits1_12 = 3;
inline bool Transit::_internal_has_adc_motioncontrollimits1_12() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || adc_motioncontrollimits1_12_ != nullptr);
  return value;
}
inline bool Transit::has_adc_motioncontrollimits1_12() const {
  return _internal_has_adc_motioncontrollimits1_12();
}
inline void Transit::clear_adc_motioncontrollimits1_12() {
  if (adc_motioncontrollimits1_12_ != nullptr) adc_motioncontrollimits1_12_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::canbus::Adc_motioncontrollimits1_12& Transit::_internal_adc_motioncontrollimits1_12() const {
  const ::apollo::canbus::Adc_motioncontrollimits1_12* p = adc_motioncontrollimits1_12_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Adc_motioncontrollimits1_12*>(
      &::apollo::canbus::_Adc_motioncontrollimits1_12_default_instance_);
}
inline const ::apollo::canbus::Adc_motioncontrollimits1_12& Transit::adc_motioncontrollimits1_12() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.adc_motioncontrollimits1_12)
  return _internal_adc_motioncontrollimits1_12();
}
inline ::apollo::canbus::Adc_motioncontrollimits1_12* Transit::release_adc_motioncontrollimits1_12() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.adc_motioncontrollimits1_12)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Adc_motioncontrollimits1_12* temp = adc_motioncontrollimits1_12_;
  adc_motioncontrollimits1_12_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Adc_motioncontrollimits1_12* Transit::_internal_mutable_adc_motioncontrollimits1_12() {
  _has_bits_[0] |= 0x00000004u;
  if (adc_motioncontrollimits1_12_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Adc_motioncontrollimits1_12>(GetArenaNoVirtual());
    adc_motioncontrollimits1_12_ = p;
  }
  return adc_motioncontrollimits1_12_;
}
inline ::apollo::canbus::Adc_motioncontrollimits1_12* Transit::mutable_adc_motioncontrollimits1_12() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.adc_motioncontrollimits1_12)
  return _internal_mutable_adc_motioncontrollimits1_12();
}
inline void Transit::set_allocated_adc_motioncontrollimits1_12(::apollo::canbus::Adc_motioncontrollimits1_12* adc_motioncontrollimits1_12) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete adc_motioncontrollimits1_12_;
  }
  if (adc_motioncontrollimits1_12) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adc_motioncontrollimits1_12 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adc_motioncontrollimits1_12, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  adc_motioncontrollimits1_12_ = adc_motioncontrollimits1_12;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.adc_motioncontrollimits1_12)
}

// optional .apollo.canbus.Llc_motionfeedback1_20 llc_motionfeedback1_20 = 4;
inline bool Transit::_internal_has_llc_motionfeedback1_20() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || llc_motionfeedback1_20_ != nullptr);
  return value;
}
inline bool Transit::has_llc_motionfeedback1_20() const {
  return _internal_has_llc_motionfeedback1_20();
}
inline void Transit::clear_llc_motionfeedback1_20() {
  if (llc_motionfeedback1_20_ != nullptr) llc_motionfeedback1_20_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::canbus::Llc_motionfeedback1_20& Transit::_internal_llc_motionfeedback1_20() const {
  const ::apollo::canbus::Llc_motionfeedback1_20* p = llc_motionfeedback1_20_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_motionfeedback1_20*>(
      &::apollo::canbus::_Llc_motionfeedback1_20_default_instance_);
}
inline const ::apollo::canbus::Llc_motionfeedback1_20& Transit::llc_motionfeedback1_20() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_motionfeedback1_20)
  return _internal_llc_motionfeedback1_20();
}
inline ::apollo::canbus::Llc_motionfeedback1_20* Transit::release_llc_motionfeedback1_20() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_motionfeedback1_20)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Llc_motionfeedback1_20* temp = llc_motionfeedback1_20_;
  llc_motionfeedback1_20_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_motionfeedback1_20* Transit::_internal_mutable_llc_motionfeedback1_20() {
  _has_bits_[0] |= 0x00000008u;
  if (llc_motionfeedback1_20_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_motionfeedback1_20>(GetArenaNoVirtual());
    llc_motionfeedback1_20_ = p;
  }
  return llc_motionfeedback1_20_;
}
inline ::apollo::canbus::Llc_motionfeedback1_20* Transit::mutable_llc_motionfeedback1_20() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_motionfeedback1_20)
  return _internal_mutable_llc_motionfeedback1_20();
}
inline void Transit::set_allocated_llc_motionfeedback1_20(::apollo::canbus::Llc_motionfeedback1_20* llc_motionfeedback1_20) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_motionfeedback1_20_;
  }
  if (llc_motionfeedback1_20) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_motionfeedback1_20 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_motionfeedback1_20, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  llc_motionfeedback1_20_ = llc_motionfeedback1_20;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_motionfeedback1_20)
}

// optional .apollo.canbus.Llc_motionfeedback2_21 llc_motionfeedback2_21 = 5;
inline bool Transit::_internal_has_llc_motionfeedback2_21() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || llc_motionfeedback2_21_ != nullptr);
  return value;
}
inline bool Transit::has_llc_motionfeedback2_21() const {
  return _internal_has_llc_motionfeedback2_21();
}
inline void Transit::clear_llc_motionfeedback2_21() {
  if (llc_motionfeedback2_21_ != nullptr) llc_motionfeedback2_21_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::canbus::Llc_motionfeedback2_21& Transit::_internal_llc_motionfeedback2_21() const {
  const ::apollo::canbus::Llc_motionfeedback2_21* p = llc_motionfeedback2_21_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_motionfeedback2_21*>(
      &::apollo::canbus::_Llc_motionfeedback2_21_default_instance_);
}
inline const ::apollo::canbus::Llc_motionfeedback2_21& Transit::llc_motionfeedback2_21() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_motionfeedback2_21)
  return _internal_llc_motionfeedback2_21();
}
inline ::apollo::canbus::Llc_motionfeedback2_21* Transit::release_llc_motionfeedback2_21() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_motionfeedback2_21)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Llc_motionfeedback2_21* temp = llc_motionfeedback2_21_;
  llc_motionfeedback2_21_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_motionfeedback2_21* Transit::_internal_mutable_llc_motionfeedback2_21() {
  _has_bits_[0] |= 0x00000010u;
  if (llc_motionfeedback2_21_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_motionfeedback2_21>(GetArenaNoVirtual());
    llc_motionfeedback2_21_ = p;
  }
  return llc_motionfeedback2_21_;
}
inline ::apollo::canbus::Llc_motionfeedback2_21* Transit::mutable_llc_motionfeedback2_21() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_motionfeedback2_21)
  return _internal_mutable_llc_motionfeedback2_21();
}
inline void Transit::set_allocated_llc_motionfeedback2_21(::apollo::canbus::Llc_motionfeedback2_21* llc_motionfeedback2_21) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_motionfeedback2_21_;
  }
  if (llc_motionfeedback2_21) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_motionfeedback2_21 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_motionfeedback2_21, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  llc_motionfeedback2_21_ = llc_motionfeedback2_21;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_motionfeedback2_21)
}

// optional .apollo.canbus.Llc_motioncommandfeedback1_22 llc_motioncommandfeedback1_22 = 6;
inline bool Transit::_internal_has_llc_motioncommandfeedback1_22() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || llc_motioncommandfeedback1_22_ != nullptr);
  return value;
}
inline bool Transit::has_llc_motioncommandfeedback1_22() const {
  return _internal_has_llc_motioncommandfeedback1_22();
}
inline void Transit::clear_llc_motioncommandfeedback1_22() {
  if (llc_motioncommandfeedback1_22_ != nullptr) llc_motioncommandfeedback1_22_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::canbus::Llc_motioncommandfeedback1_22& Transit::_internal_llc_motioncommandfeedback1_22() const {
  const ::apollo::canbus::Llc_motioncommandfeedback1_22* p = llc_motioncommandfeedback1_22_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_motioncommandfeedback1_22*>(
      &::apollo::canbus::_Llc_motioncommandfeedback1_22_default_instance_);
}
inline const ::apollo::canbus::Llc_motioncommandfeedback1_22& Transit::llc_motioncommandfeedback1_22() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_motioncommandfeedback1_22)
  return _internal_llc_motioncommandfeedback1_22();
}
inline ::apollo::canbus::Llc_motioncommandfeedback1_22* Transit::release_llc_motioncommandfeedback1_22() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_motioncommandfeedback1_22)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Llc_motioncommandfeedback1_22* temp = llc_motioncommandfeedback1_22_;
  llc_motioncommandfeedback1_22_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_motioncommandfeedback1_22* Transit::_internal_mutable_llc_motioncommandfeedback1_22() {
  _has_bits_[0] |= 0x00000020u;
  if (llc_motioncommandfeedback1_22_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_motioncommandfeedback1_22>(GetArenaNoVirtual());
    llc_motioncommandfeedback1_22_ = p;
  }
  return llc_motioncommandfeedback1_22_;
}
inline ::apollo::canbus::Llc_motioncommandfeedback1_22* Transit::mutable_llc_motioncommandfeedback1_22() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_motioncommandfeedback1_22)
  return _internal_mutable_llc_motioncommandfeedback1_22();
}
inline void Transit::set_allocated_llc_motioncommandfeedback1_22(::apollo::canbus::Llc_motioncommandfeedback1_22* llc_motioncommandfeedback1_22) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_motioncommandfeedback1_22_;
  }
  if (llc_motioncommandfeedback1_22) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_motioncommandfeedback1_22 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_motioncommandfeedback1_22, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  llc_motioncommandfeedback1_22_ = llc_motioncommandfeedback1_22;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_motioncommandfeedback1_22)
}

// optional .apollo.canbus.Llc_vehiclestatus_25 llc_vehiclestatus_25 = 7;
inline bool Transit::_internal_has_llc_vehiclestatus_25() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || llc_vehiclestatus_25_ != nullptr);
  return value;
}
inline bool Transit::has_llc_vehiclestatus_25() const {
  return _internal_has_llc_vehiclestatus_25();
}
inline void Transit::clear_llc_vehiclestatus_25() {
  if (llc_vehiclestatus_25_ != nullptr) llc_vehiclestatus_25_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::canbus::Llc_vehiclestatus_25& Transit::_internal_llc_vehiclestatus_25() const {
  const ::apollo::canbus::Llc_vehiclestatus_25* p = llc_vehiclestatus_25_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_vehiclestatus_25*>(
      &::apollo::canbus::_Llc_vehiclestatus_25_default_instance_);
}
inline const ::apollo::canbus::Llc_vehiclestatus_25& Transit::llc_vehiclestatus_25() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_vehiclestatus_25)
  return _internal_llc_vehiclestatus_25();
}
inline ::apollo::canbus::Llc_vehiclestatus_25* Transit::release_llc_vehiclestatus_25() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_vehiclestatus_25)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Llc_vehiclestatus_25* temp = llc_vehiclestatus_25_;
  llc_vehiclestatus_25_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_vehiclestatus_25* Transit::_internal_mutable_llc_vehiclestatus_25() {
  _has_bits_[0] |= 0x00000040u;
  if (llc_vehiclestatus_25_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_vehiclestatus_25>(GetArenaNoVirtual());
    llc_vehiclestatus_25_ = p;
  }
  return llc_vehiclestatus_25_;
}
inline ::apollo::canbus::Llc_vehiclestatus_25* Transit::mutable_llc_vehiclestatus_25() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_vehiclestatus_25)
  return _internal_mutable_llc_vehiclestatus_25();
}
inline void Transit::set_allocated_llc_vehiclestatus_25(::apollo::canbus::Llc_vehiclestatus_25* llc_vehiclestatus_25) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_vehiclestatus_25_;
  }
  if (llc_vehiclestatus_25) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_vehiclestatus_25 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_vehiclestatus_25, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  llc_vehiclestatus_25_ = llc_vehiclestatus_25;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_vehiclestatus_25)
}

// optional .apollo.canbus.Llc_auxiliaryfeedback_120 llc_auxiliaryfeedback_120 = 8;
inline bool Transit::_internal_has_llc_auxiliaryfeedback_120() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || llc_auxiliaryfeedback_120_ != nullptr);
  return value;
}
inline bool Transit::has_llc_auxiliaryfeedback_120() const {
  return _internal_has_llc_auxiliaryfeedback_120();
}
inline void Transit::clear_llc_auxiliaryfeedback_120() {
  if (llc_auxiliaryfeedback_120_ != nullptr) llc_auxiliaryfeedback_120_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::canbus::Llc_auxiliaryfeedback_120& Transit::_internal_llc_auxiliaryfeedback_120() const {
  const ::apollo::canbus::Llc_auxiliaryfeedback_120* p = llc_auxiliaryfeedback_120_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_auxiliaryfeedback_120*>(
      &::apollo::canbus::_Llc_auxiliaryfeedback_120_default_instance_);
}
inline const ::apollo::canbus::Llc_auxiliaryfeedback_120& Transit::llc_auxiliaryfeedback_120() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_auxiliaryfeedback_120)
  return _internal_llc_auxiliaryfeedback_120();
}
inline ::apollo::canbus::Llc_auxiliaryfeedback_120* Transit::release_llc_auxiliaryfeedback_120() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_auxiliaryfeedback_120)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Llc_auxiliaryfeedback_120* temp = llc_auxiliaryfeedback_120_;
  llc_auxiliaryfeedback_120_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_auxiliaryfeedback_120* Transit::_internal_mutable_llc_auxiliaryfeedback_120() {
  _has_bits_[0] |= 0x00000080u;
  if (llc_auxiliaryfeedback_120_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_auxiliaryfeedback_120>(GetArenaNoVirtual());
    llc_auxiliaryfeedback_120_ = p;
  }
  return llc_auxiliaryfeedback_120_;
}
inline ::apollo::canbus::Llc_auxiliaryfeedback_120* Transit::mutable_llc_auxiliaryfeedback_120() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_auxiliaryfeedback_120)
  return _internal_mutable_llc_auxiliaryfeedback_120();
}
inline void Transit::set_allocated_llc_auxiliaryfeedback_120(::apollo::canbus::Llc_auxiliaryfeedback_120* llc_auxiliaryfeedback_120) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_auxiliaryfeedback_120_;
  }
  if (llc_auxiliaryfeedback_120) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_auxiliaryfeedback_120 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_auxiliaryfeedback_120, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  llc_auxiliaryfeedback_120_ = llc_auxiliaryfeedback_120;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_auxiliaryfeedback_120)
}

// optional .apollo.canbus.Llc_diag_fault_620 llc_diag_fault_620 = 9;
inline bool Transit::_internal_has_llc_diag_fault_620() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || llc_diag_fault_620_ != nullptr);
  return value;
}
inline bool Transit::has_llc_diag_fault_620() const {
  return _internal_has_llc_diag_fault_620();
}
inline void Transit::clear_llc_diag_fault_620() {
  if (llc_diag_fault_620_ != nullptr) llc_diag_fault_620_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::canbus::Llc_diag_fault_620& Transit::_internal_llc_diag_fault_620() const {
  const ::apollo::canbus::Llc_diag_fault_620* p = llc_diag_fault_620_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_diag_fault_620*>(
      &::apollo::canbus::_Llc_diag_fault_620_default_instance_);
}
inline const ::apollo::canbus::Llc_diag_fault_620& Transit::llc_diag_fault_620() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_diag_fault_620)
  return _internal_llc_diag_fault_620();
}
inline ::apollo::canbus::Llc_diag_fault_620* Transit::release_llc_diag_fault_620() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_diag_fault_620)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Llc_diag_fault_620* temp = llc_diag_fault_620_;
  llc_diag_fault_620_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_diag_fault_620* Transit::_internal_mutable_llc_diag_fault_620() {
  _has_bits_[0] |= 0x00000100u;
  if (llc_diag_fault_620_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_diag_fault_620>(GetArenaNoVirtual());
    llc_diag_fault_620_ = p;
  }
  return llc_diag_fault_620_;
}
inline ::apollo::canbus::Llc_diag_fault_620* Transit::mutable_llc_diag_fault_620() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_diag_fault_620)
  return _internal_mutable_llc_diag_fault_620();
}
inline void Transit::set_allocated_llc_diag_fault_620(::apollo::canbus::Llc_diag_fault_620* llc_diag_fault_620) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_diag_fault_620_;
  }
  if (llc_diag_fault_620) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_diag_fault_620 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_diag_fault_620, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  llc_diag_fault_620_ = llc_diag_fault_620;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_diag_fault_620)
}

// optional .apollo.canbus.Llc_diag_steeringcontrol_722 llc_diag_steeringcontrol_722 = 10;
inline bool Transit::_internal_has_llc_diag_steeringcontrol_722() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || llc_diag_steeringcontrol_722_ != nullptr);
  return value;
}
inline bool Transit::has_llc_diag_steeringcontrol_722() const {
  return _internal_has_llc_diag_steeringcontrol_722();
}
inline void Transit::clear_llc_diag_steeringcontrol_722() {
  if (llc_diag_steeringcontrol_722_ != nullptr) llc_diag_steeringcontrol_722_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::canbus::Llc_diag_steeringcontrol_722& Transit::_internal_llc_diag_steeringcontrol_722() const {
  const ::apollo::canbus::Llc_diag_steeringcontrol_722* p = llc_diag_steeringcontrol_722_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_diag_steeringcontrol_722*>(
      &::apollo::canbus::_Llc_diag_steeringcontrol_722_default_instance_);
}
inline const ::apollo::canbus::Llc_diag_steeringcontrol_722& Transit::llc_diag_steeringcontrol_722() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_diag_steeringcontrol_722)
  return _internal_llc_diag_steeringcontrol_722();
}
inline ::apollo::canbus::Llc_diag_steeringcontrol_722* Transit::release_llc_diag_steeringcontrol_722() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_diag_steeringcontrol_722)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Llc_diag_steeringcontrol_722* temp = llc_diag_steeringcontrol_722_;
  llc_diag_steeringcontrol_722_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_diag_steeringcontrol_722* Transit::_internal_mutable_llc_diag_steeringcontrol_722() {
  _has_bits_[0] |= 0x00000200u;
  if (llc_diag_steeringcontrol_722_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_diag_steeringcontrol_722>(GetArenaNoVirtual());
    llc_diag_steeringcontrol_722_ = p;
  }
  return llc_diag_steeringcontrol_722_;
}
inline ::apollo::canbus::Llc_diag_steeringcontrol_722* Transit::mutable_llc_diag_steeringcontrol_722() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_diag_steeringcontrol_722)
  return _internal_mutable_llc_diag_steeringcontrol_722();
}
inline void Transit::set_allocated_llc_diag_steeringcontrol_722(::apollo::canbus::Llc_diag_steeringcontrol_722* llc_diag_steeringcontrol_722) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_diag_steeringcontrol_722_;
  }
  if (llc_diag_steeringcontrol_722) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_diag_steeringcontrol_722 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_diag_steeringcontrol_722, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  llc_diag_steeringcontrol_722_ = llc_diag_steeringcontrol_722;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_diag_steeringcontrol_722)
}

// optional .apollo.canbus.Adc_auxiliarycontrol_110 adc_auxiliarycontrol_110 = 11;
inline bool Transit::_internal_has_adc_auxiliarycontrol_110() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || adc_auxiliarycontrol_110_ != nullptr);
  return value;
}
inline bool Transit::has_adc_auxiliarycontrol_110() const {
  return _internal_has_adc_auxiliarycontrol_110();
}
inline void Transit::clear_adc_auxiliarycontrol_110() {
  if (adc_auxiliarycontrol_110_ != nullptr) adc_auxiliarycontrol_110_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::canbus::Adc_auxiliarycontrol_110& Transit::_internal_adc_auxiliarycontrol_110() const {
  const ::apollo::canbus::Adc_auxiliarycontrol_110* p = adc_auxiliarycontrol_110_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Adc_auxiliarycontrol_110*>(
      &::apollo::canbus::_Adc_auxiliarycontrol_110_default_instance_);
}
inline const ::apollo::canbus::Adc_auxiliarycontrol_110& Transit::adc_auxiliarycontrol_110() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.adc_auxiliarycontrol_110)
  return _internal_adc_auxiliarycontrol_110();
}
inline ::apollo::canbus::Adc_auxiliarycontrol_110* Transit::release_adc_auxiliarycontrol_110() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.adc_auxiliarycontrol_110)
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Adc_auxiliarycontrol_110* temp = adc_auxiliarycontrol_110_;
  adc_auxiliarycontrol_110_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Adc_auxiliarycontrol_110* Transit::_internal_mutable_adc_auxiliarycontrol_110() {
  _has_bits_[0] |= 0x00000400u;
  if (adc_auxiliarycontrol_110_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Adc_auxiliarycontrol_110>(GetArenaNoVirtual());
    adc_auxiliarycontrol_110_ = p;
  }
  return adc_auxiliarycontrol_110_;
}
inline ::apollo::canbus::Adc_auxiliarycontrol_110* Transit::mutable_adc_auxiliarycontrol_110() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.adc_auxiliarycontrol_110)
  return _internal_mutable_adc_auxiliarycontrol_110();
}
inline void Transit::set_allocated_adc_auxiliarycontrol_110(::apollo::canbus::Adc_auxiliarycontrol_110* adc_auxiliarycontrol_110) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete adc_auxiliarycontrol_110_;
  }
  if (adc_auxiliarycontrol_110) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adc_auxiliarycontrol_110 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adc_auxiliarycontrol_110, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  adc_auxiliarycontrol_110_ = adc_auxiliarycontrol_110;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.adc_auxiliarycontrol_110)
}

// optional .apollo.canbus.Llc_diag_brakecontrol_721 llc_diag_brakecontrol_721 = 12;
inline bool Transit::_internal_has_llc_diag_brakecontrol_721() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || llc_diag_brakecontrol_721_ != nullptr);
  return value;
}
inline bool Transit::has_llc_diag_brakecontrol_721() const {
  return _internal_has_llc_diag_brakecontrol_721();
}
inline void Transit::clear_llc_diag_brakecontrol_721() {
  if (llc_diag_brakecontrol_721_ != nullptr) llc_diag_brakecontrol_721_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::canbus::Llc_diag_brakecontrol_721& Transit::_internal_llc_diag_brakecontrol_721() const {
  const ::apollo::canbus::Llc_diag_brakecontrol_721* p = llc_diag_brakecontrol_721_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Llc_diag_brakecontrol_721*>(
      &::apollo::canbus::_Llc_diag_brakecontrol_721_default_instance_);
}
inline const ::apollo::canbus::Llc_diag_brakecontrol_721& Transit::llc_diag_brakecontrol_721() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Transit.llc_diag_brakecontrol_721)
  return _internal_llc_diag_brakecontrol_721();
}
inline ::apollo::canbus::Llc_diag_brakecontrol_721* Transit::release_llc_diag_brakecontrol_721() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Transit.llc_diag_brakecontrol_721)
  _has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Llc_diag_brakecontrol_721* temp = llc_diag_brakecontrol_721_;
  llc_diag_brakecontrol_721_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Llc_diag_brakecontrol_721* Transit::_internal_mutable_llc_diag_brakecontrol_721() {
  _has_bits_[0] |= 0x00000800u;
  if (llc_diag_brakecontrol_721_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Llc_diag_brakecontrol_721>(GetArenaNoVirtual());
    llc_diag_brakecontrol_721_ = p;
  }
  return llc_diag_brakecontrol_721_;
}
inline ::apollo::canbus::Llc_diag_brakecontrol_721* Transit::mutable_llc_diag_brakecontrol_721() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Transit.llc_diag_brakecontrol_721)
  return _internal_mutable_llc_diag_brakecontrol_721();
}
inline void Transit::set_allocated_llc_diag_brakecontrol_721(::apollo::canbus::Llc_diag_brakecontrol_721* llc_diag_brakecontrol_721) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete llc_diag_brakecontrol_721_;
  }
  if (llc_diag_brakecontrol_721) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      llc_diag_brakecontrol_721 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llc_diag_brakecontrol_721, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  llc_diag_brakecontrol_721_ = llc_diag_brakecontrol_721;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Transit.llc_diag_brakecontrol_721)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType>() {
  return ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType>() {
  return ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType>() {
  return ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType>() {
  return ::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType>() {
  return ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType>() {
  return ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType>() {
  return ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType>() {
  return ::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType>() {
  return ::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType>() {
  return ::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2ftransit_2eproto
