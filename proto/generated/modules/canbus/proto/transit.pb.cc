// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/transit.proto

#include "modules/canbus/proto/transit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Adc_auxiliarycontrol_110_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Adc_motioncontrol1_10_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Adc_motioncontrollimits1_12_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_auxiliaryfeedback_120_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_diag_brakecontrol_721_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_diag_fault_620_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_diag_steeringcontrol_722_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_motioncommandfeedback1_22_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_motionfeedback1_20_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_motionfeedback2_21_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_vehiclelimits_24_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_vehiclestatus_25_modules_2fcanbus_2fproto_2ftransit_2eproto;
namespace apollo {
namespace canbus {
class Llc_vehiclelimits_24DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_vehiclelimits_24> _instance;
} _Llc_vehiclelimits_24_default_instance_;
class Adc_motioncontrol1_10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Adc_motioncontrol1_10> _instance;
} _Adc_motioncontrol1_10_default_instance_;
class Adc_motioncontrollimits1_12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Adc_motioncontrollimits1_12> _instance;
} _Adc_motioncontrollimits1_12_default_instance_;
class Llc_motionfeedback1_20DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_motionfeedback1_20> _instance;
} _Llc_motionfeedback1_20_default_instance_;
class Llc_motionfeedback2_21DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_motionfeedback2_21> _instance;
} _Llc_motionfeedback2_21_default_instance_;
class Llc_motioncommandfeedback1_22DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_motioncommandfeedback1_22> _instance;
} _Llc_motioncommandfeedback1_22_default_instance_;
class Llc_vehiclestatus_25DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_vehiclestatus_25> _instance;
} _Llc_vehiclestatus_25_default_instance_;
class Llc_auxiliaryfeedback_120DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_auxiliaryfeedback_120> _instance;
} _Llc_auxiliaryfeedback_120_default_instance_;
class Llc_diag_fault_620DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_diag_fault_620> _instance;
} _Llc_diag_fault_620_default_instance_;
class Llc_diag_steeringcontrol_722DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_diag_steeringcontrol_722> _instance;
} _Llc_diag_steeringcontrol_722_default_instance_;
class Adc_auxiliarycontrol_110DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Adc_auxiliarycontrol_110> _instance;
} _Adc_auxiliarycontrol_110_default_instance_;
class Llc_diag_brakecontrol_721DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Llc_diag_brakecontrol_721> _instance;
} _Llc_diag_brakecontrol_721_default_instance_;
class TransitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transit> _instance;
} _Transit_default_instance_;
}  // namespace canbus
}  // namespace apollo
static void InitDefaultsscc_info_Adc_auxiliarycontrol_110_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Adc_auxiliarycontrol_110_default_instance_;
    new (ptr) ::apollo::canbus::Adc_auxiliarycontrol_110();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Adc_auxiliarycontrol_110::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Adc_auxiliarycontrol_110_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Adc_auxiliarycontrol_110_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Adc_motioncontrol1_10_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Adc_motioncontrol1_10_default_instance_;
    new (ptr) ::apollo::canbus::Adc_motioncontrol1_10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Adc_motioncontrol1_10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Adc_motioncontrol1_10_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Adc_motioncontrol1_10_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Adc_motioncontrollimits1_12_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Adc_motioncontrollimits1_12_default_instance_;
    new (ptr) ::apollo::canbus::Adc_motioncontrollimits1_12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Adc_motioncontrollimits1_12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Adc_motioncontrollimits1_12_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Adc_motioncontrollimits1_12_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_auxiliaryfeedback_120_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_auxiliaryfeedback_120_default_instance_;
    new (ptr) ::apollo::canbus::Llc_auxiliaryfeedback_120();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_auxiliaryfeedback_120::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_auxiliaryfeedback_120_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_auxiliaryfeedback_120_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_diag_brakecontrol_721_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_diag_brakecontrol_721_default_instance_;
    new (ptr) ::apollo::canbus::Llc_diag_brakecontrol_721();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_diag_brakecontrol_721::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_diag_brakecontrol_721_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_diag_brakecontrol_721_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_diag_fault_620_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_diag_fault_620_default_instance_;
    new (ptr) ::apollo::canbus::Llc_diag_fault_620();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_diag_fault_620::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_diag_fault_620_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_diag_fault_620_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_diag_steeringcontrol_722_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_diag_steeringcontrol_722_default_instance_;
    new (ptr) ::apollo::canbus::Llc_diag_steeringcontrol_722();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_diag_steeringcontrol_722::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_diag_steeringcontrol_722_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_diag_steeringcontrol_722_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_motioncommandfeedback1_22_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_motioncommandfeedback1_22_default_instance_;
    new (ptr) ::apollo::canbus::Llc_motioncommandfeedback1_22();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_motioncommandfeedback1_22::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_motioncommandfeedback1_22_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_motioncommandfeedback1_22_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_motionfeedback1_20_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_motionfeedback1_20_default_instance_;
    new (ptr) ::apollo::canbus::Llc_motionfeedback1_20();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_motionfeedback1_20::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_motionfeedback1_20_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_motionfeedback1_20_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_motionfeedback2_21_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_motionfeedback2_21_default_instance_;
    new (ptr) ::apollo::canbus::Llc_motionfeedback2_21();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_motionfeedback2_21::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_motionfeedback2_21_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_motionfeedback2_21_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_vehiclelimits_24_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_vehiclelimits_24_default_instance_;
    new (ptr) ::apollo::canbus::Llc_vehiclelimits_24();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_vehiclelimits_24::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_vehiclelimits_24_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_vehiclelimits_24_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Llc_vehiclestatus_25_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Llc_vehiclestatus_25_default_instance_;
    new (ptr) ::apollo::canbus::Llc_vehiclestatus_25();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Llc_vehiclestatus_25::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Llc_vehiclestatus_25_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Llc_vehiclestatus_25_modules_2fcanbus_2fproto_2ftransit_2eproto}, {}};

static void InitDefaultsscc_info_Transit_modules_2fcanbus_2fproto_2ftransit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Transit_default_instance_;
    new (ptr) ::apollo::canbus::Transit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Transit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_Transit_modules_2fcanbus_2fproto_2ftransit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, 0, InitDefaultsscc_info_Transit_modules_2fcanbus_2fproto_2ftransit_2eproto}, {
      &scc_info_Llc_vehiclelimits_24_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Adc_motioncontrol1_10_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Adc_motioncontrollimits1_12_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Llc_motionfeedback1_20_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Llc_motionfeedback2_21_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Llc_motioncommandfeedback1_22_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Llc_vehiclestatus_25_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Llc_auxiliaryfeedback_120_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Llc_diag_fault_620_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Llc_diag_steeringcontrol_722_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Adc_auxiliarycontrol_110_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Llc_diag_brakecontrol_721_modules_2fcanbus_2fproto_2ftransit_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2ftransit_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_vehiclelimits_24, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_vehiclelimits_24, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_vehiclelimits_24, llc_fbk_maxsteeringangle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_vehiclelimits_24, llc_fbk_maxbrakepercent_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_cmd_steerwheelangle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_cmd_steeringcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_cmd_parkingbrake_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_cmd_gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_motioncontrol1_checksum_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_cmd_brakepercentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_cmd_throttleposition_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_motioncontrol1_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_cmd_autonomyrequest_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrol1_10, adc_cmd_longitudinalcontrolmode_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrollimits1_12, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrollimits1_12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrollimits1_12, adc_cmd_throttlecommandlimit_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrollimits1_12, adc_cmd_steeringrate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_motioncontrollimits1_12, adc_cmd_steerwheelanglelimit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_parkingbrake_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_throttleposition_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_brakepercentrear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_brakepercentfront_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_steeringcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_motionfeedback1_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_motionfeedback1_checksum_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_commandaligned_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_estoppressed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_adcrequestautonomy_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_allowautonomy_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_longitudinalcontrolmode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback1_20, llc_fbk_state_),
  1,
  7,
  0,
  3,
  4,
  2,
  5,
  6,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback2_21, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback2_21, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback2_21, llc_fbk_vehiclespeed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback2_21, llc_motionfeedback2_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback2_21, llc_motionfeedback2_checksum_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback2_21, llc_fbk_steeringrate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motionfeedback2_21, llc_fbk_steeringangle_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motioncommandfeedback1_22, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motioncommandfeedback1_22, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motioncommandfeedback1_22, llc_fbk_steeringanglesetpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motioncommandfeedback1_22, llc_fbk_throttlesetpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motioncommandfeedback1_22, llc_fbk_brakepercentsetpoint_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motioncommandfeedback1_22, llc_motioncommandfeedback1_count_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_motioncommandfeedback1_22, llc_motioncommandfeedback1_check_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_vehiclestatus_25, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_vehiclestatus_25, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_vehiclestatus_25, llc_fbk_12voltage_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_inverter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_pdu_ch8_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_pdu_ch7_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_pdu_ch6_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_pdu_ch5_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_pdu_ch4_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_pdu_ch3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_pdu_ch2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_pdu_ch1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_hazardlights_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_ledgreenon_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_horn_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_buzzeron_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_turnsignal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_lowbeam_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_highbeam_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_ledredon_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_auxiliaryfeedback_120, llc_fbk_autonomybuttonpressed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_disengagecounter_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_disengagecounter_steer_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_disengagecounter_throttle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_fbk_faultcounter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_disengagecounter_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_fbk_version_year_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_fbk_version_month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_fbk_version_day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_fault_620, llc_fbk_version_hour_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_steeringcontrol_722, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_steeringcontrol_722, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_steeringcontrol_722, llc_dbg_steeringsensorposition_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_steeringcontrol_722, llc_dbg_steeringrackinputtorque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_steeringcontrol_722, llc_dbg_steeringmotorposition_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_auxcontrol_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_auxcontrol_checksum_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_inverter_controlenable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_inverter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_wiper_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_controlenable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_ch8_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_ch7_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_ch6_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_ch5_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_ch4_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_ch3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_ch2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_pdu_ch1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_hazardlights_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_highbeam_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_lowbeam_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_horn_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Adc_auxiliarycontrol_110, adc_cmd_turnsignal_),
  0,
  1,
  3,
  4,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_brakecontrol_721, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_brakecontrol_721, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_brakecontrol_721, llc_dbg_brakepidcontribution_p_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_brakecontrol_721, llc_dbg_brakepidcontribution_i_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_brakecontrol_721, llc_dbg_brakepidcontribution_d_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_brakecontrol_721, llc_dbg_brakepid_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_brakecontrol_721, llc_dbg_brakepid_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Llc_diag_brakecontrol_721, llc_dbg_brakefeedforward_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_vehiclelimits_24_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, adc_motioncontrol1_10_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, adc_motioncontrollimits1_12_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_motionfeedback1_20_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_motionfeedback2_21_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_motioncommandfeedback1_22_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_vehiclestatus_25_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_auxiliaryfeedback_120_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_diag_fault_620_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_diag_steeringcontrol_722_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, adc_auxiliarycontrol_110_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Transit, llc_diag_brakecontrol_721_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::canbus::Llc_vehiclelimits_24)},
  { 9, 24, sizeof(::apollo::canbus::Adc_motioncontrol1_10)},
  { 34, 42, sizeof(::apollo::canbus::Adc_motioncontrollimits1_12)},
  { 45, 64, sizeof(::apollo::canbus::Llc_motionfeedback1_20)},
  { 78, 88, sizeof(::apollo::canbus::Llc_motionfeedback2_21)},
  { 93, 103, sizeof(::apollo::canbus::Llc_motioncommandfeedback1_22)},
  { 108, 114, sizeof(::apollo::canbus::Llc_vehiclestatus_25)},
  { 115, 138, sizeof(::apollo::canbus::Llc_auxiliaryfeedback_120)},
  { 156, 170, sizeof(::apollo::canbus::Llc_diag_fault_620)},
  { 179, 187, sizeof(::apollo::canbus::Llc_diag_steeringcontrol_722)},
  { 190, 214, sizeof(::apollo::canbus::Adc_auxiliarycontrol_110)},
  { 233, 244, sizeof(::apollo::canbus::Llc_diag_brakecontrol_721)},
  { 250, 267, sizeof(::apollo::canbus::Transit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_vehiclelimits_24_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Adc_motioncontrol1_10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Adc_motioncontrollimits1_12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_motionfeedback1_20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_motionfeedback2_21_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_motioncommandfeedback1_22_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_vehiclestatus_25_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_auxiliaryfeedback_120_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_diag_fault_620_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_diag_steeringcontrol_722_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Adc_auxiliarycontrol_110_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Llc_diag_brakecontrol_721_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Transit_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2ftransit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"modules/canbus/proto/transit.proto\022\rap"
  "ollo.canbus\"Y\n\024Llc_vehiclelimits_24\022 \n\030l"
  "lc_fbk_maxsteeringangle\030\001 \001(\005\022\037\n\027llc_fbk"
  "_maxbrakepercent\030\002 \001(\001\"\231\013\n\025Adc_motioncon"
  "trol1_10\022\037\n\027adc_cmd_steerwheelangle\030\001 \001("
  "\001\022i\n\033adc_cmd_steeringcontrolmode\030\002 \001(\0162D"
  ".apollo.canbus.Adc_motioncontrol1_10.Adc"
  "_cmd_steeringcontrolmodeType\022\034\n\024adc_cmd_"
  "parkingbrake\030\003 \001(\010\022K\n\014adc_cmd_gear\030\004 \001(\016"
  "25.apollo.canbus.Adc_motioncontrol1_10.A"
  "dc_cmd_gearType\022#\n\033adc_motioncontrol1_ch"
  "ecksum\030\005 \001(\005\022\037\n\027adc_cmd_brakepercentage\030"
  "\006 \001(\001\022 \n\030adc_cmd_throttleposition\030\007 \001(\001\022"
  "\"\n\032adc_motioncontrol1_counter\030\010 \001(\005\022a\n\027a"
  "dc_cmd_autonomyrequest\030\t \001(\0162@.apollo.ca"
  "nbus.Adc_motioncontrol1_10.Adc_cmd_auton"
  "omyrequestType\022q\n\037adc_cmd_longitudinalco"
  "ntrolmode\030\n \001(\0162H.apollo.canbus.Adc_moti"
  "oncontrol1_10.Adc_cmd_longitudinalcontro"
  "lmodeType\"\314\001\n\037Adc_cmd_steeringcontrolmod"
  "eType\022$\n ADC_CMD_STEERINGCONTROLMODE_NON"
  "E\020\000\022%\n!ADC_CMD_STEERINGCONTROLMODE_ANGLE"
  "\020\001\0222\n.ADC_CMD_STEERINGCONTROLMODE_RESERV"
  "ED_CURVATURE\020\002\022(\n$ADC_CMD_STEERINGCONTRO"
  "LMODE_RESERVED\020\003\"}\n\020Adc_cmd_gearType\022\027\n\023"
  "ADC_CMD_GEAR_P_PARK\020\000\022\030\n\024ADC_CMD_GEAR_D_"
  "DRIVE\020\001\022\032\n\026ADC_CMD_GEAR_N_NEUTRAL\020\002\022\032\n\026A"
  "DC_CMD_GEAR_R_REVERSE\020\003\"\317\001\n\033Adc_cmd_auto"
  "nomyrequestType\0222\n.ADC_CMD_AUTONOMYREQUE"
  "ST_AUTONOMY_NOT_REQUESTED\020\000\022.\n*ADC_CMD_A"
  "UTONOMYREQUEST_AUTONOMY_REQUESTED\020\001\022%\n!A"
  "DC_CMD_AUTONOMYREQUEST_RESERVED0\020\002\022%\n!AD"
  "C_CMD_AUTONOMYREQUEST_RESERVED1\020\003\"\206\002\n#Ad"
  "c_cmd_longitudinalcontrolmodeType\022(\n$ADC"
  "_CMD_LONGITUDINALCONTROLMODE_NONE\020\000\022F\nBA"
  "DC_CMD_LONGITUDINALCONTROLMODE_RESERVED_"
  "VELOCITY_AND_ACCELERATION\020\001\0222\n.ADC_CMD_L"
  "ONGITUDINALCONTROLMODE_RESERVED_FORCE\020\002\022"
  "9\n5ADC_CMD_LONGITUDINALCONTROLMODE_DIREC"
  "T_THROTTLE_BRAKE\020\003\"\207\001\n\033Adc_motioncontrol"
  "limits1_12\022$\n\034adc_cmd_throttlecommandlim"
  "it\030\001 \001(\001\022\034\n\024adc_cmd_steeringrate\030\002 \001(\001\022$"
  "\n\034adc_cmd_steerwheelanglelimit\030\003 \001(\001\"\305\016\n"
  "\026Llc_motionfeedback1_20\022L\n\014llc_fbk_gear\030"
  "\001 \001(\01626.apollo.canbus.Llc_motionfeedback"
  "1_20.Llc_fbk_gearType\022\034\n\024llc_fbk_parking"
  "brake\030\002 \001(\010\022 \n\030llc_fbk_throttleposition\030"
  "\003 \001(\001\022 \n\030llc_fbk_brakepercentrear\030\004 \001(\001\022"
  "!\n\031llc_fbk_brakepercentfront\030\005 \001(\001\022j\n\033ll"
  "c_fbk_steeringcontrolmode\030\006 \001(\0162E.apollo"
  ".canbus.Llc_motionfeedback1_20.Llc_fbk_s"
  "teeringcontrolmodeType\022#\n\033llc_motionfeed"
  "back1_counter\030\007 \001(\005\022$\n\034llc_motionfeedbac"
  "k1_checksum\030\010 \001(\005\022\036\n\026llc_fbk_commandalig"
  "ned\030\t \001(\010\022\034\n\024llc_fbk_estoppressed\030\n \001(\010\022"
  "\"\n\032llc_fbk_adcrequestautonomy\030\013 \001(\010\022\035\n\025l"
  "lc_fbk_allowautonomy\030\014 \001(\010\022r\n\037llc_fbk_lo"
  "ngitudinalcontrolmode\030\r \001(\0162I.apollo.can"
  "bus.Llc_motionfeedback1_20.Llc_fbk_longi"
  "tudinalcontrolmodeType\022N\n\rllc_fbk_state\030"
  "\016 \001(\01627.apollo.canbus.Llc_motionfeedback"
  "1_20.Llc_fbk_stateType\"}\n\020Llc_fbk_gearTy"
  "pe\022\027\n\023LLC_FBK_GEAR_P_PARK\020\000\022\030\n\024LLC_FBK_G"
  "EAR_D_DRIVE\020\001\022\032\n\026LLC_FBK_GEAR_N_NEUTRAL\020"
  "\002\022\032\n\026LLC_FBK_GEAR_R_REVERSE\020\003\"\314\001\n\037Llc_fb"
  "k_steeringcontrolmodeType\022$\n LLC_FBK_STE"
  "ERINGCONTROLMODE_NONE\020\000\022%\n!LLC_FBK_STEER"
  "INGCONTROLMODE_ANGLE\020\001\0222\n.LLC_FBK_STEERI"
  "NGCONTROLMODE_RESERVED_CURVATURE\020\002\022(\n$LL"
  "C_FBK_STEERINGCONTROLMODE_RESERVED\020\003\"\206\002\n"
  "#Llc_fbk_longitudinalcontrolmodeType\022(\n$"
  "LLC_FBK_LONGITUDINALCONTROLMODE_NONE\020\000\022F"
  "\nBLLC_FBK_LONGITUDINALCONTROLMODE_RESERV"
  "ED_VELOCITY_AND_ACCELERATION\020\001\0222\n.LLC_FB"
  "K_LONGITUDINALCONTROLMODE_RESERVED_FORCE"
  "\020\002\0229\n5LLC_FBK_LONGITUDINALCONTROLMODE_DI"
  "RECT_THROTTLE_BRAKE\020\003\"\204\004\n\021Llc_fbk_stateT"
  "ype\022\033\n\027LLC_FBK_STATE_RESERVED0\020\000\022&\n\"LLC_"
  "FBK_STATE_AUTONOMY_NOT_ALLOWED\020\001\022\"\n\036LLC_"
  "FBK_STATE_AUTONOMY_ALLOWED\020\002\022$\n LLC_FBK_"
  "STATE_AUTONOMY_REQUESTED\020\003\022\032\n\026LLC_FBK_ST"
  "ATE_AUTONOMY\020\004\022\033\n\027LLC_FBK_STATE_RESERVED"
  "1\020\005\022\033\n\027LLC_FBK_STATE_RESERVED2\020\006\022\033\n\027LLC_"
  "FBK_STATE_RESERVED3\020\007\022\033\n\027LLC_FBK_STATE_R"
  "ESERVED4\020\010\022\033\n\027LLC_FBK_STATE_RESERVED5\020\t\022"
  "\033\n\027LLC_FBK_STATE_RESERVED6\020\n\022\033\n\027LLC_FBK_"
  "STATE_RESERVED7\020\013\022\033\n\027LLC_FBK_STATE_RESER"
  "VED8\020\014\022%\n!LLC_FBK_STATE_DISENGAGE_REQUES"
  "TED\020\r\022\034\n\030LLC_FBK_STATE_DISENGAGED\020\016\022\027\n\023L"
  "LC_FBK_STATE_FAULT\020\017\"\276\001\n\026Llc_motionfeedb"
  "ack2_21\022\034\n\024llc_fbk_vehiclespeed\030\001 \001(\001\022#\n"
  "\033llc_motionfeedback2_counter\030\002 \001(\005\022$\n\034ll"
  "c_motionfeedback2_checksum\030\003 \001(\005\022\034\n\024llc_"
  "fbk_steeringrate\030\004 \001(\001\022\035\n\025llc_fbk_steeri"
  "ngangle\030\005 \001(\001\"\342\001\n\035Llc_motioncommandfeedb"
  "ack1_22\022%\n\035llc_fbk_steeringanglesetpoint"
  "\030\001 \001(\001\022 \n\030llc_fbk_throttlesetpoint\030\002 \001(\001"
  "\022$\n\034llc_fbk_brakepercentsetpoint\030\003 \001(\001\022("
  "\n llc_motioncommandfeedback1_count\030\004 \001(\005"
  "\022(\n llc_motioncommandfeedback1_check\030\005 \001"
  "(\005\"1\n\024Llc_vehiclestatus_25\022\031\n\021llc_fbk_12"
  "voltage\030\001 \001(\001\"\313\005\n\031Llc_auxiliaryfeedback_"
  "120\022\030\n\020llc_fbk_inverter\030\001 \001(\010\022\027\n\017llc_fbk"
  "_pdu_ch8\030\002 \001(\010\022\027\n\017llc_fbk_pdu_ch7\030\003 \001(\010\022"
  "\027\n\017llc_fbk_pdu_ch6\030\004 \001(\010\022\027\n\017llc_fbk_pdu_"
  "ch5\030\005 \001(\010\022\027\n\017llc_fbk_pdu_ch4\030\006 \001(\010\022\027\n\017ll"
  "c_fbk_pdu_ch3\030\007 \001(\010\022\027\n\017llc_fbk_pdu_ch2\030\010"
  " \001(\010\022\027\n\017llc_fbk_pdu_ch1\030\t \001(\010\022\034\n\024llc_fbk"
  "_hazardlights\030\n \001(\010\022\032\n\022llc_fbk_ledgreeno"
  "n\030\013 \001(\010\022\024\n\014llc_fbk_horn\030\014 \001(\010\022\030\n\020llc_fbk"
  "_buzzeron\030\r \001(\010\022[\n\022llc_fbk_turnsignal\030\016 "
  "\001(\0162\?.apollo.canbus.Llc_auxiliaryfeedbac"
  "k_120.Llc_fbk_turnsignalType\022\027\n\017llc_fbk_"
  "lowbeam\030\017 \001(\010\022\030\n\020llc_fbk_highbeam\030\020 \001(\010\022"
  "\030\n\020llc_fbk_ledredon\030\021 \001(\010\022%\n\035llc_fbk_aut"
  "onomybuttonpressed\030\022 \001(\010\"\220\001\n\026Llc_fbk_tur"
  "nsignalType\022\033\n\027LLC_FBK_TURNSIGNAL_NONE\020\000"
  "\022\033\n\027LLC_FBK_TURNSIGNAL_LEFT\020\001\022\034\n\030LLC_FBK"
  "_TURNSIGNAL_RIGHT\020\002\022\036\n\032LLC_FBK_TURNSIGNA"
  "L_RESERVE\020\003\"\276\002\n\022Llc_diag_fault_620\022\"\n\032ll"
  "c_disengagecounter_brake\030\001 \001(\005\022\"\n\032llc_di"
  "sengagecounter_steer\030\002 \001(\005\022%\n\035llc_diseng"
  "agecounter_throttle\030\003 \001(\005\022\034\n\024llc_fbk_fau"
  "ltcounter\030\004 \001(\005\022#\n\033llc_disengagecounter_"
  "button\030\005 \001(\005\022\034\n\024llc_fbk_version_year\030\006 \001"
  "(\005\022\035\n\025llc_fbk_version_month\030\007 \001(\005\022\033\n\023llc"
  "_fbk_version_day\030\010 \001(\005\022\034\n\024llc_fbk_versio"
  "n_hour\030\t \001(\005\"\226\001\n\034Llc_diag_steeringcontro"
  "l_722\022&\n\036llc_dbg_steeringsensorposition\030"
  "\001 \001(\001\022\'\n\037llc_dbg_steeringrackinputtorque"
  "\030\002 \001(\005\022%\n\035llc_dbg_steeringmotorposition\030"
  "\003 \001(\001\"\365\005\n\030Adc_auxiliarycontrol_110\022\036\n\026ad"
  "c_auxcontrol_counter\030\001 \001(\005\022\037\n\027adc_auxcon"
  "trol_checksum\030\002 \001(\005\022&\n\036adc_cmd_inverter_"
  "controlenable\030\003 \001(\010\022\030\n\020adc_cmd_inverter\030"
  "\004 \001(\010\022\025\n\radc_cmd_wiper\030\005 \001(\005\022!\n\031adc_cmd_"
  "pdu_controlenable\030\006 \001(\010\022\027\n\017adc_cmd_pdu_c"
  "h8\030\007 \001(\010\022\027\n\017adc_cmd_pdu_ch7\030\010 \001(\010\022\027\n\017adc"
  "_cmd_pdu_ch6\030\t \001(\010\022\027\n\017adc_cmd_pdu_ch5\030\n "
  "\001(\010\022\027\n\017adc_cmd_pdu_ch4\030\013 \001(\010\022\027\n\017adc_cmd_"
  "pdu_ch3\030\014 \001(\010\022\027\n\017adc_cmd_pdu_ch2\030\r \001(\010\022\027"
  "\n\017adc_cmd_pdu_ch1\030\016 \001(\010\022\034\n\024adc_cmd_hazar"
  "dlights\030\017 \001(\010\022\030\n\020adc_cmd_highbeam\030\020 \001(\010\022"
  "\027\n\017adc_cmd_lowbeam\030\021 \001(\010\022\024\n\014adc_cmd_horn"
  "\030\022 \001(\010\022Z\n\022adc_cmd_turnsignal\030\023 \001(\0162>.apo"
  "llo.canbus.Adc_auxiliarycontrol_110.Adc_"
  "cmd_turnsignalType\"\220\001\n\026Adc_cmd_turnsigna"
  "lType\022\033\n\027ADC_CMD_TURNSIGNAL_NONE\020\000\022\033\n\027AD"
  "C_CMD_TURNSIGNAL_LEFT\020\001\022\034\n\030ADC_CMD_TURNS"
  "IGNAL_RIGHT\020\002\022\036\n\032ADC_CMD_TURNSIGNAL_RESE"
  "RVE\020\003\"\366\001\n\031Llc_diag_brakecontrol_721\022&\n\036l"
  "lc_dbg_brakepidcontribution_p\030\001 \001(\001\022&\n\036l"
  "lc_dbg_brakepidcontribution_i\030\002 \001(\001\022&\n\036l"
  "lc_dbg_brakepidcontribution_d\030\003 \001(\001\022\037\n\027l"
  "lc_dbg_brakepid_output\030\004 \001(\001\022\036\n\026llc_dbg_"
  "brakepid_error\030\005 \001(\005\022 \n\030llc_dbg_brakefee"
  "dforward\030\006 \001(\001\"\377\006\n\007Transit\022A\n\024llc_vehicl"
  "elimits_24\030\001 \001(\0132#.apollo.canbus.Llc_veh"
  "iclelimits_24\022C\n\025adc_motioncontrol1_10\030\002"
  " \001(\0132$.apollo.canbus.Adc_motioncontrol1_"
  "10\022O\n\033adc_motioncontrollimits1_12\030\003 \001(\0132"
  "*.apollo.canbus.Adc_motioncontrollimits1"
  "_12\022E\n\026llc_motionfeedback1_20\030\004 \001(\0132%.ap"
  "ollo.canbus.Llc_motionfeedback1_20\022E\n\026ll"
  "c_motionfeedback2_21\030\005 \001(\0132%.apollo.canb"
  "us.Llc_motionfeedback2_21\022S\n\035llc_motionc"
  "ommandfeedback1_22\030\006 \001(\0132,.apollo.canbus"
  ".Llc_motioncommandfeedback1_22\022A\n\024llc_ve"
  "hiclestatus_25\030\007 \001(\0132#.apollo.canbus.Llc"
  "_vehiclestatus_25\022K\n\031llc_auxiliaryfeedba"
  "ck_120\030\010 \001(\0132(.apollo.canbus.Llc_auxilia"
  "ryfeedback_120\022=\n\022llc_diag_fault_620\030\t \001"
  "(\0132!.apollo.canbus.Llc_diag_fault_620\022Q\n"
  "\034llc_diag_steeringcontrol_722\030\n \001(\0132+.ap"
  "ollo.canbus.Llc_diag_steeringcontrol_722"
  "\022I\n\030adc_auxiliarycontrol_110\030\013 \001(\0132\'.apo"
  "llo.canbus.Adc_auxiliarycontrol_110\022K\n\031l"
  "lc_diag_brakecontrol_721\030\014 \001(\0132(.apollo."
  "canbus.Llc_diag_brakecontrol_721"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto_sccs[13] = {
  &scc_info_Adc_auxiliarycontrol_110_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Adc_motioncontrol1_10_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Adc_motioncontrollimits1_12_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_auxiliaryfeedback_120_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_diag_brakecontrol_721_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_diag_fault_620_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_diag_steeringcontrol_722_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_motioncommandfeedback1_22_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_motionfeedback1_20_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_motionfeedback2_21_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_vehiclelimits_24_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Llc_vehiclestatus_25_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
  &scc_info_Transit_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto_once;
static bool descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto = {
  &descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto_initialized, descriptor_table_protodef_modules_2fcanbus_2fproto_2ftransit_2eproto, "modules/canbus/proto/transit.proto", 7152,
  &descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto_sccs, descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2ftransit_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2ftransit_2eproto, 13, file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcanbus_2fproto_2ftransit_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto), true);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[0];
}
bool Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10::ADC_CMD_STEERINGCONTROLMODE_NONE;
constexpr Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10::ADC_CMD_STEERINGCONTROLMODE_ANGLE;
constexpr Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10::ADC_CMD_STEERINGCONTROLMODE_RESERVED_CURVATURE;
constexpr Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10::ADC_CMD_STEERINGCONTROLMODE_RESERVED;
constexpr Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10::Adc_cmd_steeringcontrolmodeType_MIN;
constexpr Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType Adc_motioncontrol1_10::Adc_cmd_steeringcontrolmodeType_MAX;
constexpr int Adc_motioncontrol1_10::Adc_cmd_steeringcontrolmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_motioncontrol1_10_Adc_cmd_gearType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[1];
}
bool Adc_motioncontrol1_10_Adc_cmd_gearType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10::ADC_CMD_GEAR_P_PARK;
constexpr Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10::ADC_CMD_GEAR_D_DRIVE;
constexpr Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10::ADC_CMD_GEAR_N_NEUTRAL;
constexpr Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10::ADC_CMD_GEAR_R_REVERSE;
constexpr Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10::Adc_cmd_gearType_MIN;
constexpr Adc_motioncontrol1_10_Adc_cmd_gearType Adc_motioncontrol1_10::Adc_cmd_gearType_MAX;
constexpr int Adc_motioncontrol1_10::Adc_cmd_gearType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[2];
}
bool Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10::ADC_CMD_AUTONOMYREQUEST_AUTONOMY_NOT_REQUESTED;
constexpr Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10::ADC_CMD_AUTONOMYREQUEST_AUTONOMY_REQUESTED;
constexpr Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10::ADC_CMD_AUTONOMYREQUEST_RESERVED0;
constexpr Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10::ADC_CMD_AUTONOMYREQUEST_RESERVED1;
constexpr Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10::Adc_cmd_autonomyrequestType_MIN;
constexpr Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType Adc_motioncontrol1_10::Adc_cmd_autonomyrequestType_MAX;
constexpr int Adc_motioncontrol1_10::Adc_cmd_autonomyrequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[3];
}
bool Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10::ADC_CMD_LONGITUDINALCONTROLMODE_NONE;
constexpr Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10::ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION;
constexpr Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10::ADC_CMD_LONGITUDINALCONTROLMODE_RESERVED_FORCE;
constexpr Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10::ADC_CMD_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE;
constexpr Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10::Adc_cmd_longitudinalcontrolmodeType_MIN;
constexpr Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType Adc_motioncontrol1_10::Adc_cmd_longitudinalcontrolmodeType_MAX;
constexpr int Adc_motioncontrol1_10::Adc_cmd_longitudinalcontrolmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_motionfeedback1_20_Llc_fbk_gearType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[4];
}
bool Llc_motionfeedback1_20_Llc_fbk_gearType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20::LLC_FBK_GEAR_P_PARK;
constexpr Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20::LLC_FBK_GEAR_D_DRIVE;
constexpr Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20::LLC_FBK_GEAR_N_NEUTRAL;
constexpr Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20::LLC_FBK_GEAR_R_REVERSE;
constexpr Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20::Llc_fbk_gearType_MIN;
constexpr Llc_motionfeedback1_20_Llc_fbk_gearType Llc_motionfeedback1_20::Llc_fbk_gearType_MAX;
constexpr int Llc_motionfeedback1_20::Llc_fbk_gearType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[5];
}
bool Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20::LLC_FBK_STEERINGCONTROLMODE_NONE;
constexpr Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20::LLC_FBK_STEERINGCONTROLMODE_ANGLE;
constexpr Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20::LLC_FBK_STEERINGCONTROLMODE_RESERVED_CURVATURE;
constexpr Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20::LLC_FBK_STEERINGCONTROLMODE_RESERVED;
constexpr Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20::Llc_fbk_steeringcontrolmodeType_MIN;
constexpr Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType Llc_motionfeedback1_20::Llc_fbk_steeringcontrolmodeType_MAX;
constexpr int Llc_motionfeedback1_20::Llc_fbk_steeringcontrolmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[6];
}
bool Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20::LLC_FBK_LONGITUDINALCONTROLMODE_NONE;
constexpr Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20::LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_VELOCITY_AND_ACCELERATION;
constexpr Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20::LLC_FBK_LONGITUDINALCONTROLMODE_RESERVED_FORCE;
constexpr Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20::LLC_FBK_LONGITUDINALCONTROLMODE_DIRECT_THROTTLE_BRAKE;
constexpr Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20::Llc_fbk_longitudinalcontrolmodeType_MIN;
constexpr Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType Llc_motionfeedback1_20::Llc_fbk_longitudinalcontrolmodeType_MAX;
constexpr int Llc_motionfeedback1_20::Llc_fbk_longitudinalcontrolmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_motionfeedback1_20_Llc_fbk_stateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[7];
}
bool Llc_motionfeedback1_20_Llc_fbk_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED0;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_AUTONOMY_NOT_ALLOWED;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_AUTONOMY_ALLOWED;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_AUTONOMY_REQUESTED;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_AUTONOMY;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED1;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED2;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED3;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED4;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED5;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED6;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED7;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_RESERVED8;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_DISENGAGE_REQUESTED;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_DISENGAGED;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::LLC_FBK_STATE_FAULT;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::Llc_fbk_stateType_MIN;
constexpr Llc_motionfeedback1_20_Llc_fbk_stateType Llc_motionfeedback1_20::Llc_fbk_stateType_MAX;
constexpr int Llc_motionfeedback1_20::Llc_fbk_stateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[8];
}
bool Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120::LLC_FBK_TURNSIGNAL_NONE;
constexpr Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120::LLC_FBK_TURNSIGNAL_LEFT;
constexpr Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120::LLC_FBK_TURNSIGNAL_RIGHT;
constexpr Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120::LLC_FBK_TURNSIGNAL_RESERVE;
constexpr Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120::Llc_fbk_turnsignalType_MIN;
constexpr Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType Llc_auxiliaryfeedback_120::Llc_fbk_turnsignalType_MAX;
constexpr int Llc_auxiliaryfeedback_120::Llc_fbk_turnsignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2ftransit_2eproto[9];
}
bool Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110::ADC_CMD_TURNSIGNAL_NONE;
constexpr Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110::ADC_CMD_TURNSIGNAL_LEFT;
constexpr Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110::ADC_CMD_TURNSIGNAL_RIGHT;
constexpr Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110::ADC_CMD_TURNSIGNAL_RESERVE;
constexpr Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110::Adc_cmd_turnsignalType_MIN;
constexpr Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType Adc_auxiliarycontrol_110::Adc_cmd_turnsignalType_MAX;
constexpr int Adc_auxiliarycontrol_110::Adc_cmd_turnsignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Llc_vehiclelimits_24::InitAsDefaultInstance() {
}
class Llc_vehiclelimits_24::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_vehiclelimits_24>()._has_bits_);
  static void set_has_llc_fbk_maxsteeringangle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_llc_fbk_maxbrakepercent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Llc_vehiclelimits_24::Llc_vehiclelimits_24()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_vehiclelimits_24)
}
Llc_vehiclelimits_24::Llc_vehiclelimits_24(const Llc_vehiclelimits_24& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&llc_fbk_maxbrakepercent_, &from.llc_fbk_maxbrakepercent_,
    static_cast<size_t>(reinterpret_cast<char*>(&llc_fbk_maxsteeringangle_) -
    reinterpret_cast<char*>(&llc_fbk_maxbrakepercent_)) + sizeof(llc_fbk_maxsteeringangle_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_vehiclelimits_24)
}

void Llc_vehiclelimits_24::SharedCtor() {
  ::memset(&llc_fbk_maxbrakepercent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_fbk_maxsteeringangle_) -
      reinterpret_cast<char*>(&llc_fbk_maxbrakepercent_)) + sizeof(llc_fbk_maxsteeringangle_));
}

Llc_vehiclelimits_24::~Llc_vehiclelimits_24() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_vehiclelimits_24)
  SharedDtor();
}

void Llc_vehiclelimits_24::SharedDtor() {
}

void Llc_vehiclelimits_24::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_vehiclelimits_24& Llc_vehiclelimits_24::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_vehiclelimits_24_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_vehiclelimits_24::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_vehiclelimits_24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&llc_fbk_maxbrakepercent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_fbk_maxsteeringangle_) -
        reinterpret_cast<char*>(&llc_fbk_maxbrakepercent_)) + sizeof(llc_fbk_maxsteeringangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_vehiclelimits_24::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 llc_fbk_maxsteeringangle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_llc_fbk_maxsteeringangle(&has_bits);
          llc_fbk_maxsteeringangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double llc_fbk_maxbrakepercent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_llc_fbk_maxbrakepercent(&has_bits);
          llc_fbk_maxbrakepercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_vehiclelimits_24::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_vehiclelimits_24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 llc_fbk_maxsteeringangle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_llc_fbk_maxsteeringangle(), target);
  }

  // optional double llc_fbk_maxbrakepercent = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_llc_fbk_maxbrakepercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_vehiclelimits_24)
  return target;
}

size_t Llc_vehiclelimits_24::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_vehiclelimits_24)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double llc_fbk_maxbrakepercent = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 llc_fbk_maxsteeringangle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_fbk_maxsteeringangle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_vehiclelimits_24::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_vehiclelimits_24)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_vehiclelimits_24* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_vehiclelimits_24>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_vehiclelimits_24)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_vehiclelimits_24)
    MergeFrom(*source);
  }
}

void Llc_vehiclelimits_24::MergeFrom(const Llc_vehiclelimits_24& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_vehiclelimits_24)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      llc_fbk_maxbrakepercent_ = from.llc_fbk_maxbrakepercent_;
    }
    if (cached_has_bits & 0x00000002u) {
      llc_fbk_maxsteeringangle_ = from.llc_fbk_maxsteeringangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Llc_vehiclelimits_24::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_vehiclelimits_24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_vehiclelimits_24::CopyFrom(const Llc_vehiclelimits_24& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_vehiclelimits_24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_vehiclelimits_24::IsInitialized() const {
  return true;
}

void Llc_vehiclelimits_24::InternalSwap(Llc_vehiclelimits_24* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_fbk_maxbrakepercent_, other->llc_fbk_maxbrakepercent_);
  swap(llc_fbk_maxsteeringangle_, other->llc_fbk_maxsteeringangle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_vehiclelimits_24::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Adc_motioncontrol1_10::InitAsDefaultInstance() {
}
class Adc_motioncontrol1_10::_Internal {
 public:
  using HasBits = decltype(std::declval<Adc_motioncontrol1_10>()._has_bits_);
  static void set_has_adc_cmd_steerwheelangle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adc_cmd_steeringcontrolmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adc_cmd_parkingbrake(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adc_cmd_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_adc_motioncontrol1_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_adc_cmd_brakepercentage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_adc_cmd_throttleposition(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_adc_motioncontrol1_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_adc_cmd_autonomyrequest(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_adc_cmd_longitudinalcontrolmode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Adc_motioncontrol1_10::Adc_motioncontrol1_10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Adc_motioncontrol1_10)
}
Adc_motioncontrol1_10::Adc_motioncontrol1_10(const Adc_motioncontrol1_10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adc_cmd_steerwheelangle_, &from.adc_cmd_steerwheelangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_cmd_longitudinalcontrolmode_) -
    reinterpret_cast<char*>(&adc_cmd_steerwheelangle_)) + sizeof(adc_cmd_longitudinalcontrolmode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Adc_motioncontrol1_10)
}

void Adc_motioncontrol1_10::SharedCtor() {
  ::memset(&adc_cmd_steerwheelangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_cmd_longitudinalcontrolmode_) -
      reinterpret_cast<char*>(&adc_cmd_steerwheelangle_)) + sizeof(adc_cmd_longitudinalcontrolmode_));
}

Adc_motioncontrol1_10::~Adc_motioncontrol1_10() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Adc_motioncontrol1_10)
  SharedDtor();
}

void Adc_motioncontrol1_10::SharedDtor() {
}

void Adc_motioncontrol1_10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Adc_motioncontrol1_10& Adc_motioncontrol1_10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Adc_motioncontrol1_10_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Adc_motioncontrol1_10::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Adc_motioncontrol1_10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&adc_cmd_steerwheelangle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_motioncontrol1_counter_) -
        reinterpret_cast<char*>(&adc_cmd_steerwheelangle_)) + sizeof(adc_motioncontrol1_counter_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&adc_cmd_autonomyrequest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_cmd_longitudinalcontrolmode_) -
        reinterpret_cast<char*>(&adc_cmd_autonomyrequest_)) + sizeof(adc_cmd_longitudinalcontrolmode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Adc_motioncontrol1_10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double adc_cmd_steerwheelangle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_adc_cmd_steerwheelangle(&has_bits);
          adc_cmd_steerwheelangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_steeringcontrolmodeType adc_cmd_steeringcontrolmode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType_IsValid(val))) {
            _internal_set_adc_cmd_steeringcontrolmode(static_cast<::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_steeringcontrolmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_parkingbrake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_adc_cmd_parkingbrake(&has_bits);
          adc_cmd_parkingbrake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_gearType adc_cmd_gear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType_IsValid(val))) {
            _internal_set_adc_cmd_gear(static_cast<::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_gearType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 adc_motioncontrol1_checksum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_adc_motioncontrol1_checksum(&has_bits);
          adc_motioncontrol1_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double adc_cmd_brakepercentage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_adc_cmd_brakepercentage(&has_bits);
          adc_cmd_brakepercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double adc_cmd_throttleposition = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_adc_cmd_throttleposition(&has_bits);
          adc_cmd_throttleposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 adc_motioncontrol1_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_adc_motioncontrol1_counter(&has_bits);
          adc_motioncontrol1_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_autonomyrequestType adc_cmd_autonomyrequest = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType_IsValid(val))) {
            _internal_set_adc_cmd_autonomyrequest(static_cast<::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_autonomyrequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_longitudinalcontrolmodeType adc_cmd_longitudinalcontrolmode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType_IsValid(val))) {
            _internal_set_adc_cmd_longitudinalcontrolmode(static_cast<::apollo::canbus::Adc_motioncontrol1_10_Adc_cmd_longitudinalcontrolmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Adc_motioncontrol1_10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Adc_motioncontrol1_10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_cmd_steerwheelangle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_adc_cmd_steerwheelangle(), target);
  }

  // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_steeringcontrolmodeType adc_cmd_steeringcontrolmode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_adc_cmd_steeringcontrolmode(), target);
  }

  // optional bool adc_cmd_parkingbrake = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_adc_cmd_parkingbrake(), target);
  }

  // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_gearType adc_cmd_gear = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_adc_cmd_gear(), target);
  }

  // optional int32 adc_motioncontrol1_checksum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_adc_motioncontrol1_checksum(), target);
  }

  // optional double adc_cmd_brakepercentage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_adc_cmd_brakepercentage(), target);
  }

  // optional double adc_cmd_throttleposition = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_adc_cmd_throttleposition(), target);
  }

  // optional int32 adc_motioncontrol1_counter = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_adc_motioncontrol1_counter(), target);
  }

  // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_autonomyrequestType adc_cmd_autonomyrequest = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_adc_cmd_autonomyrequest(), target);
  }

  // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_longitudinalcontrolmodeType adc_cmd_longitudinalcontrolmode = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_adc_cmd_longitudinalcontrolmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Adc_motioncontrol1_10)
  return target;
}

size_t Adc_motioncontrol1_10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Adc_motioncontrol1_10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double adc_cmd_steerwheelangle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_steeringcontrolmodeType adc_cmd_steeringcontrolmode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adc_cmd_steeringcontrolmode());
    }

    // optional bool adc_cmd_parkingbrake = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_gearType adc_cmd_gear = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adc_cmd_gear());
    }

    // optional int32 adc_motioncontrol1_checksum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adc_motioncontrol1_checksum());
    }

    // optional double adc_cmd_brakepercentage = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double adc_cmd_throttleposition = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 adc_motioncontrol1_counter = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adc_motioncontrol1_counter());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_autonomyrequestType adc_cmd_autonomyrequest = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adc_cmd_autonomyrequest());
    }

    // optional .apollo.canbus.Adc_motioncontrol1_10.Adc_cmd_longitudinalcontrolmodeType adc_cmd_longitudinalcontrolmode = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adc_cmd_longitudinalcontrolmode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Adc_motioncontrol1_10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Adc_motioncontrol1_10)
  GOOGLE_DCHECK_NE(&from, this);
  const Adc_motioncontrol1_10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Adc_motioncontrol1_10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Adc_motioncontrol1_10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Adc_motioncontrol1_10)
    MergeFrom(*source);
  }
}

void Adc_motioncontrol1_10::MergeFrom(const Adc_motioncontrol1_10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Adc_motioncontrol1_10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      adc_cmd_steerwheelangle_ = from.adc_cmd_steerwheelangle_;
    }
    if (cached_has_bits & 0x00000002u) {
      adc_cmd_steeringcontrolmode_ = from.adc_cmd_steeringcontrolmode_;
    }
    if (cached_has_bits & 0x00000004u) {
      adc_cmd_parkingbrake_ = from.adc_cmd_parkingbrake_;
    }
    if (cached_has_bits & 0x00000008u) {
      adc_cmd_gear_ = from.adc_cmd_gear_;
    }
    if (cached_has_bits & 0x00000010u) {
      adc_motioncontrol1_checksum_ = from.adc_motioncontrol1_checksum_;
    }
    if (cached_has_bits & 0x00000020u) {
      adc_cmd_brakepercentage_ = from.adc_cmd_brakepercentage_;
    }
    if (cached_has_bits & 0x00000040u) {
      adc_cmd_throttleposition_ = from.adc_cmd_throttleposition_;
    }
    if (cached_has_bits & 0x00000080u) {
      adc_motioncontrol1_counter_ = from.adc_motioncontrol1_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      adc_cmd_autonomyrequest_ = from.adc_cmd_autonomyrequest_;
    }
    if (cached_has_bits & 0x00000200u) {
      adc_cmd_longitudinalcontrolmode_ = from.adc_cmd_longitudinalcontrolmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Adc_motioncontrol1_10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Adc_motioncontrol1_10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Adc_motioncontrol1_10::CopyFrom(const Adc_motioncontrol1_10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Adc_motioncontrol1_10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Adc_motioncontrol1_10::IsInitialized() const {
  return true;
}

void Adc_motioncontrol1_10::InternalSwap(Adc_motioncontrol1_10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(adc_cmd_steerwheelangle_, other->adc_cmd_steerwheelangle_);
  swap(adc_cmd_steeringcontrolmode_, other->adc_cmd_steeringcontrolmode_);
  swap(adc_cmd_parkingbrake_, other->adc_cmd_parkingbrake_);
  swap(adc_cmd_gear_, other->adc_cmd_gear_);
  swap(adc_motioncontrol1_checksum_, other->adc_motioncontrol1_checksum_);
  swap(adc_cmd_brakepercentage_, other->adc_cmd_brakepercentage_);
  swap(adc_cmd_throttleposition_, other->adc_cmd_throttleposition_);
  swap(adc_motioncontrol1_counter_, other->adc_motioncontrol1_counter_);
  swap(adc_cmd_autonomyrequest_, other->adc_cmd_autonomyrequest_);
  swap(adc_cmd_longitudinalcontrolmode_, other->adc_cmd_longitudinalcontrolmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Adc_motioncontrol1_10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Adc_motioncontrollimits1_12::InitAsDefaultInstance() {
}
class Adc_motioncontrollimits1_12::_Internal {
 public:
  using HasBits = decltype(std::declval<Adc_motioncontrollimits1_12>()._has_bits_);
  static void set_has_adc_cmd_throttlecommandlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adc_cmd_steeringrate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adc_cmd_steerwheelanglelimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Adc_motioncontrollimits1_12::Adc_motioncontrollimits1_12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Adc_motioncontrollimits1_12)
}
Adc_motioncontrollimits1_12::Adc_motioncontrollimits1_12(const Adc_motioncontrollimits1_12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adc_cmd_throttlecommandlimit_, &from.adc_cmd_throttlecommandlimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_cmd_steerwheelanglelimit_) -
    reinterpret_cast<char*>(&adc_cmd_throttlecommandlimit_)) + sizeof(adc_cmd_steerwheelanglelimit_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Adc_motioncontrollimits1_12)
}

void Adc_motioncontrollimits1_12::SharedCtor() {
  ::memset(&adc_cmd_throttlecommandlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_cmd_steerwheelanglelimit_) -
      reinterpret_cast<char*>(&adc_cmd_throttlecommandlimit_)) + sizeof(adc_cmd_steerwheelanglelimit_));
}

Adc_motioncontrollimits1_12::~Adc_motioncontrollimits1_12() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Adc_motioncontrollimits1_12)
  SharedDtor();
}

void Adc_motioncontrollimits1_12::SharedDtor() {
}

void Adc_motioncontrollimits1_12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Adc_motioncontrollimits1_12& Adc_motioncontrollimits1_12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Adc_motioncontrollimits1_12_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Adc_motioncontrollimits1_12::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Adc_motioncontrollimits1_12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&adc_cmd_throttlecommandlimit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_cmd_steerwheelanglelimit_) -
        reinterpret_cast<char*>(&adc_cmd_throttlecommandlimit_)) + sizeof(adc_cmd_steerwheelanglelimit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Adc_motioncontrollimits1_12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double adc_cmd_throttlecommandlimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_adc_cmd_throttlecommandlimit(&has_bits);
          adc_cmd_throttlecommandlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double adc_cmd_steeringrate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_adc_cmd_steeringrate(&has_bits);
          adc_cmd_steeringrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double adc_cmd_steerwheelanglelimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_adc_cmd_steerwheelanglelimit(&has_bits);
          adc_cmd_steerwheelanglelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Adc_motioncontrollimits1_12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Adc_motioncontrollimits1_12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double adc_cmd_throttlecommandlimit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_adc_cmd_throttlecommandlimit(), target);
  }

  // optional double adc_cmd_steeringrate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_adc_cmd_steeringrate(), target);
  }

  // optional double adc_cmd_steerwheelanglelimit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_adc_cmd_steerwheelanglelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Adc_motioncontrollimits1_12)
  return target;
}

size_t Adc_motioncontrollimits1_12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Adc_motioncontrollimits1_12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double adc_cmd_throttlecommandlimit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double adc_cmd_steeringrate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double adc_cmd_steerwheelanglelimit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Adc_motioncontrollimits1_12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Adc_motioncontrollimits1_12)
  GOOGLE_DCHECK_NE(&from, this);
  const Adc_motioncontrollimits1_12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Adc_motioncontrollimits1_12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Adc_motioncontrollimits1_12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Adc_motioncontrollimits1_12)
    MergeFrom(*source);
  }
}

void Adc_motioncontrollimits1_12::MergeFrom(const Adc_motioncontrollimits1_12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Adc_motioncontrollimits1_12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      adc_cmd_throttlecommandlimit_ = from.adc_cmd_throttlecommandlimit_;
    }
    if (cached_has_bits & 0x00000002u) {
      adc_cmd_steeringrate_ = from.adc_cmd_steeringrate_;
    }
    if (cached_has_bits & 0x00000004u) {
      adc_cmd_steerwheelanglelimit_ = from.adc_cmd_steerwheelanglelimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Adc_motioncontrollimits1_12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Adc_motioncontrollimits1_12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Adc_motioncontrollimits1_12::CopyFrom(const Adc_motioncontrollimits1_12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Adc_motioncontrollimits1_12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Adc_motioncontrollimits1_12::IsInitialized() const {
  return true;
}

void Adc_motioncontrollimits1_12::InternalSwap(Adc_motioncontrollimits1_12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(adc_cmd_throttlecommandlimit_, other->adc_cmd_throttlecommandlimit_);
  swap(adc_cmd_steeringrate_, other->adc_cmd_steeringrate_);
  swap(adc_cmd_steerwheelanglelimit_, other->adc_cmd_steerwheelanglelimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Adc_motioncontrollimits1_12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Llc_motionfeedback1_20::InitAsDefaultInstance() {
}
class Llc_motionfeedback1_20::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_motionfeedback1_20>()._has_bits_);
  static void set_has_llc_fbk_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_llc_fbk_parkingbrake(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_llc_fbk_throttleposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llc_fbk_brakepercentrear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_llc_fbk_brakepercentfront(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_llc_fbk_steeringcontrolmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_llc_motionfeedback1_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_llc_motionfeedback1_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_llc_fbk_commandaligned(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_llc_fbk_estoppressed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_llc_fbk_adcrequestautonomy(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_llc_fbk_allowautonomy(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_llc_fbk_longitudinalcontrolmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_llc_fbk_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

Llc_motionfeedback1_20::Llc_motionfeedback1_20()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_motionfeedback1_20)
}
Llc_motionfeedback1_20::Llc_motionfeedback1_20(const Llc_motionfeedback1_20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&llc_fbk_throttleposition_, &from.llc_fbk_throttleposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&llc_fbk_state_) -
    reinterpret_cast<char*>(&llc_fbk_throttleposition_)) + sizeof(llc_fbk_state_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_motionfeedback1_20)
}

void Llc_motionfeedback1_20::SharedCtor() {
  ::memset(&llc_fbk_throttleposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_fbk_state_) -
      reinterpret_cast<char*>(&llc_fbk_throttleposition_)) + sizeof(llc_fbk_state_));
}

Llc_motionfeedback1_20::~Llc_motionfeedback1_20() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_motionfeedback1_20)
  SharedDtor();
}

void Llc_motionfeedback1_20::SharedDtor() {
}

void Llc_motionfeedback1_20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_motionfeedback1_20& Llc_motionfeedback1_20::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_motionfeedback1_20_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_motionfeedback1_20::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_motionfeedback1_20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&llc_fbk_throttleposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_fbk_parkingbrake_) -
        reinterpret_cast<char*>(&llc_fbk_throttleposition_)) + sizeof(llc_fbk_parkingbrake_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&llc_fbk_commandaligned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_fbk_state_) -
        reinterpret_cast<char*>(&llc_fbk_commandaligned_)) + sizeof(llc_fbk_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_motionfeedback1_20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_gearType llc_fbk_gear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType_IsValid(val))) {
            _internal_set_llc_fbk_gear(static_cast<::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_gearType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_parkingbrake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_llc_fbk_parkingbrake(&has_bits);
          llc_fbk_parkingbrake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double llc_fbk_throttleposition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_llc_fbk_throttleposition(&has_bits);
          llc_fbk_throttleposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double llc_fbk_brakepercentrear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_llc_fbk_brakepercentrear(&has_bits);
          llc_fbk_brakepercentrear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double llc_fbk_brakepercentfront = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_llc_fbk_brakepercentfront(&has_bits);
          llc_fbk_brakepercentfront_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_steeringcontrolmodeType llc_fbk_steeringcontrolmode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType_IsValid(val))) {
            _internal_set_llc_fbk_steeringcontrolmode(static_cast<::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_steeringcontrolmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 llc_motionfeedback1_counter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_llc_motionfeedback1_counter(&has_bits);
          llc_motionfeedback1_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_motionfeedback1_checksum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_llc_motionfeedback1_checksum(&has_bits);
          llc_motionfeedback1_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_commandaligned = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_llc_fbk_commandaligned(&has_bits);
          llc_fbk_commandaligned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_estoppressed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_llc_fbk_estoppressed(&has_bits);
          llc_fbk_estoppressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_adcrequestautonomy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_llc_fbk_adcrequestautonomy(&has_bits);
          llc_fbk_adcrequestautonomy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_allowautonomy = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_llc_fbk_allowautonomy(&has_bits);
          llc_fbk_allowautonomy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_longitudinalcontrolmodeType llc_fbk_longitudinalcontrolmode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType_IsValid(val))) {
            _internal_set_llc_fbk_longitudinalcontrolmode(static_cast<::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_longitudinalcontrolmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_stateType llc_fbk_state = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType_IsValid(val))) {
            _internal_set_llc_fbk_state(static_cast<::apollo::canbus::Llc_motionfeedback1_20_Llc_fbk_stateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_motionfeedback1_20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_motionfeedback1_20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_gearType llc_fbk_gear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_llc_fbk_gear(), target);
  }

  // optional bool llc_fbk_parkingbrake = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_llc_fbk_parkingbrake(), target);
  }

  // optional double llc_fbk_throttleposition = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_llc_fbk_throttleposition(), target);
  }

  // optional double llc_fbk_brakepercentrear = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_llc_fbk_brakepercentrear(), target);
  }

  // optional double llc_fbk_brakepercentfront = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_llc_fbk_brakepercentfront(), target);
  }

  // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_steeringcontrolmodeType llc_fbk_steeringcontrolmode = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_llc_fbk_steeringcontrolmode(), target);
  }

  // optional int32 llc_motionfeedback1_counter = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_llc_motionfeedback1_counter(), target);
  }

  // optional int32 llc_motionfeedback1_checksum = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_llc_motionfeedback1_checksum(), target);
  }

  // optional bool llc_fbk_commandaligned = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_llc_fbk_commandaligned(), target);
  }

  // optional bool llc_fbk_estoppressed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_llc_fbk_estoppressed(), target);
  }

  // optional bool llc_fbk_adcrequestautonomy = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_llc_fbk_adcrequestautonomy(), target);
  }

  // optional bool llc_fbk_allowautonomy = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_llc_fbk_allowautonomy(), target);
  }

  // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_longitudinalcontrolmodeType llc_fbk_longitudinalcontrolmode = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_llc_fbk_longitudinalcontrolmode(), target);
  }

  // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_stateType llc_fbk_state = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_llc_fbk_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_motionfeedback1_20)
  return target;
}

size_t Llc_motionfeedback1_20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_motionfeedback1_20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double llc_fbk_throttleposition = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_gearType llc_fbk_gear = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_llc_fbk_gear());
    }

    // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_steeringcontrolmodeType llc_fbk_steeringcontrolmode = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_llc_fbk_steeringcontrolmode());
    }

    // optional double llc_fbk_brakepercentrear = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double llc_fbk_brakepercentfront = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 llc_motionfeedback1_counter = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_motionfeedback1_counter());
    }

    // optional int32 llc_motionfeedback1_checksum = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_motionfeedback1_checksum());
    }

    // optional bool llc_fbk_parkingbrake = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool llc_fbk_commandaligned = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_estoppressed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_adcrequestautonomy = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_allowautonomy = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_longitudinalcontrolmodeType llc_fbk_longitudinalcontrolmode = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_llc_fbk_longitudinalcontrolmode());
    }

    // optional .apollo.canbus.Llc_motionfeedback1_20.Llc_fbk_stateType llc_fbk_state = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_llc_fbk_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_motionfeedback1_20::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_motionfeedback1_20)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_motionfeedback1_20* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_motionfeedback1_20>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_motionfeedback1_20)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_motionfeedback1_20)
    MergeFrom(*source);
  }
}

void Llc_motionfeedback1_20::MergeFrom(const Llc_motionfeedback1_20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_motionfeedback1_20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      llc_fbk_throttleposition_ = from.llc_fbk_throttleposition_;
    }
    if (cached_has_bits & 0x00000002u) {
      llc_fbk_gear_ = from.llc_fbk_gear_;
    }
    if (cached_has_bits & 0x00000004u) {
      llc_fbk_steeringcontrolmode_ = from.llc_fbk_steeringcontrolmode_;
    }
    if (cached_has_bits & 0x00000008u) {
      llc_fbk_brakepercentrear_ = from.llc_fbk_brakepercentrear_;
    }
    if (cached_has_bits & 0x00000010u) {
      llc_fbk_brakepercentfront_ = from.llc_fbk_brakepercentfront_;
    }
    if (cached_has_bits & 0x00000020u) {
      llc_motionfeedback1_counter_ = from.llc_motionfeedback1_counter_;
    }
    if (cached_has_bits & 0x00000040u) {
      llc_motionfeedback1_checksum_ = from.llc_motionfeedback1_checksum_;
    }
    if (cached_has_bits & 0x00000080u) {
      llc_fbk_parkingbrake_ = from.llc_fbk_parkingbrake_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      llc_fbk_commandaligned_ = from.llc_fbk_commandaligned_;
    }
    if (cached_has_bits & 0x00000200u) {
      llc_fbk_estoppressed_ = from.llc_fbk_estoppressed_;
    }
    if (cached_has_bits & 0x00000400u) {
      llc_fbk_adcrequestautonomy_ = from.llc_fbk_adcrequestautonomy_;
    }
    if (cached_has_bits & 0x00000800u) {
      llc_fbk_allowautonomy_ = from.llc_fbk_allowautonomy_;
    }
    if (cached_has_bits & 0x00001000u) {
      llc_fbk_longitudinalcontrolmode_ = from.llc_fbk_longitudinalcontrolmode_;
    }
    if (cached_has_bits & 0x00002000u) {
      llc_fbk_state_ = from.llc_fbk_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Llc_motionfeedback1_20::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_motionfeedback1_20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_motionfeedback1_20::CopyFrom(const Llc_motionfeedback1_20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_motionfeedback1_20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_motionfeedback1_20::IsInitialized() const {
  return true;
}

void Llc_motionfeedback1_20::InternalSwap(Llc_motionfeedback1_20* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_fbk_throttleposition_, other->llc_fbk_throttleposition_);
  swap(llc_fbk_gear_, other->llc_fbk_gear_);
  swap(llc_fbk_steeringcontrolmode_, other->llc_fbk_steeringcontrolmode_);
  swap(llc_fbk_brakepercentrear_, other->llc_fbk_brakepercentrear_);
  swap(llc_fbk_brakepercentfront_, other->llc_fbk_brakepercentfront_);
  swap(llc_motionfeedback1_counter_, other->llc_motionfeedback1_counter_);
  swap(llc_motionfeedback1_checksum_, other->llc_motionfeedback1_checksum_);
  swap(llc_fbk_parkingbrake_, other->llc_fbk_parkingbrake_);
  swap(llc_fbk_commandaligned_, other->llc_fbk_commandaligned_);
  swap(llc_fbk_estoppressed_, other->llc_fbk_estoppressed_);
  swap(llc_fbk_adcrequestautonomy_, other->llc_fbk_adcrequestautonomy_);
  swap(llc_fbk_allowautonomy_, other->llc_fbk_allowautonomy_);
  swap(llc_fbk_longitudinalcontrolmode_, other->llc_fbk_longitudinalcontrolmode_);
  swap(llc_fbk_state_, other->llc_fbk_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_motionfeedback1_20::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Llc_motionfeedback2_21::InitAsDefaultInstance() {
}
class Llc_motionfeedback2_21::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_motionfeedback2_21>()._has_bits_);
  static void set_has_llc_fbk_vehiclespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llc_motionfeedback2_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_llc_motionfeedback2_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_llc_fbk_steeringrate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_llc_fbk_steeringangle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Llc_motionfeedback2_21::Llc_motionfeedback2_21()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_motionfeedback2_21)
}
Llc_motionfeedback2_21::Llc_motionfeedback2_21(const Llc_motionfeedback2_21& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&llc_fbk_vehiclespeed_, &from.llc_fbk_vehiclespeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&llc_fbk_steeringangle_) -
    reinterpret_cast<char*>(&llc_fbk_vehiclespeed_)) + sizeof(llc_fbk_steeringangle_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_motionfeedback2_21)
}

void Llc_motionfeedback2_21::SharedCtor() {
  ::memset(&llc_fbk_vehiclespeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_fbk_steeringangle_) -
      reinterpret_cast<char*>(&llc_fbk_vehiclespeed_)) + sizeof(llc_fbk_steeringangle_));
}

Llc_motionfeedback2_21::~Llc_motionfeedback2_21() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_motionfeedback2_21)
  SharedDtor();
}

void Llc_motionfeedback2_21::SharedDtor() {
}

void Llc_motionfeedback2_21::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_motionfeedback2_21& Llc_motionfeedback2_21::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_motionfeedback2_21_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_motionfeedback2_21::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_motionfeedback2_21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&llc_fbk_vehiclespeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_fbk_steeringangle_) -
        reinterpret_cast<char*>(&llc_fbk_vehiclespeed_)) + sizeof(llc_fbk_steeringangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_motionfeedback2_21::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double llc_fbk_vehiclespeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_llc_fbk_vehiclespeed(&has_bits);
          llc_fbk_vehiclespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_motionfeedback2_counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_llc_motionfeedback2_counter(&has_bits);
          llc_motionfeedback2_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_motionfeedback2_checksum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_llc_motionfeedback2_checksum(&has_bits);
          llc_motionfeedback2_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double llc_fbk_steeringrate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_llc_fbk_steeringrate(&has_bits);
          llc_fbk_steeringrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double llc_fbk_steeringangle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_llc_fbk_steeringangle(&has_bits);
          llc_fbk_steeringangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_motionfeedback2_21::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_motionfeedback2_21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double llc_fbk_vehiclespeed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_llc_fbk_vehiclespeed(), target);
  }

  // optional int32 llc_motionfeedback2_counter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_llc_motionfeedback2_counter(), target);
  }

  // optional int32 llc_motionfeedback2_checksum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_llc_motionfeedback2_checksum(), target);
  }

  // optional double llc_fbk_steeringrate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_llc_fbk_steeringrate(), target);
  }

  // optional double llc_fbk_steeringangle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_llc_fbk_steeringangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_motionfeedback2_21)
  return target;
}

size_t Llc_motionfeedback2_21::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_motionfeedback2_21)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double llc_fbk_vehiclespeed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 llc_motionfeedback2_counter = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_motionfeedback2_counter());
    }

    // optional int32 llc_motionfeedback2_checksum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_motionfeedback2_checksum());
    }

    // optional double llc_fbk_steeringrate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double llc_fbk_steeringangle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_motionfeedback2_21::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_motionfeedback2_21)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_motionfeedback2_21* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_motionfeedback2_21>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_motionfeedback2_21)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_motionfeedback2_21)
    MergeFrom(*source);
  }
}

void Llc_motionfeedback2_21::MergeFrom(const Llc_motionfeedback2_21& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_motionfeedback2_21)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      llc_fbk_vehiclespeed_ = from.llc_fbk_vehiclespeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      llc_motionfeedback2_counter_ = from.llc_motionfeedback2_counter_;
    }
    if (cached_has_bits & 0x00000004u) {
      llc_motionfeedback2_checksum_ = from.llc_motionfeedback2_checksum_;
    }
    if (cached_has_bits & 0x00000008u) {
      llc_fbk_steeringrate_ = from.llc_fbk_steeringrate_;
    }
    if (cached_has_bits & 0x00000010u) {
      llc_fbk_steeringangle_ = from.llc_fbk_steeringangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Llc_motionfeedback2_21::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_motionfeedback2_21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_motionfeedback2_21::CopyFrom(const Llc_motionfeedback2_21& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_motionfeedback2_21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_motionfeedback2_21::IsInitialized() const {
  return true;
}

void Llc_motionfeedback2_21::InternalSwap(Llc_motionfeedback2_21* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_fbk_vehiclespeed_, other->llc_fbk_vehiclespeed_);
  swap(llc_motionfeedback2_counter_, other->llc_motionfeedback2_counter_);
  swap(llc_motionfeedback2_checksum_, other->llc_motionfeedback2_checksum_);
  swap(llc_fbk_steeringrate_, other->llc_fbk_steeringrate_);
  swap(llc_fbk_steeringangle_, other->llc_fbk_steeringangle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_motionfeedback2_21::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Llc_motioncommandfeedback1_22::InitAsDefaultInstance() {
}
class Llc_motioncommandfeedback1_22::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_motioncommandfeedback1_22>()._has_bits_);
  static void set_has_llc_fbk_steeringanglesetpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llc_fbk_throttlesetpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_llc_fbk_brakepercentsetpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_llc_motioncommandfeedback1_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_llc_motioncommandfeedback1_check(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Llc_motioncommandfeedback1_22::Llc_motioncommandfeedback1_22()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_motioncommandfeedback1_22)
}
Llc_motioncommandfeedback1_22::Llc_motioncommandfeedback1_22(const Llc_motioncommandfeedback1_22& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&llc_fbk_steeringanglesetpoint_, &from.llc_fbk_steeringanglesetpoint_,
    static_cast<size_t>(reinterpret_cast<char*>(&llc_motioncommandfeedback1_check_) -
    reinterpret_cast<char*>(&llc_fbk_steeringanglesetpoint_)) + sizeof(llc_motioncommandfeedback1_check_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_motioncommandfeedback1_22)
}

void Llc_motioncommandfeedback1_22::SharedCtor() {
  ::memset(&llc_fbk_steeringanglesetpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_motioncommandfeedback1_check_) -
      reinterpret_cast<char*>(&llc_fbk_steeringanglesetpoint_)) + sizeof(llc_motioncommandfeedback1_check_));
}

Llc_motioncommandfeedback1_22::~Llc_motioncommandfeedback1_22() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_motioncommandfeedback1_22)
  SharedDtor();
}

void Llc_motioncommandfeedback1_22::SharedDtor() {
}

void Llc_motioncommandfeedback1_22::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_motioncommandfeedback1_22& Llc_motioncommandfeedback1_22::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_motioncommandfeedback1_22_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_motioncommandfeedback1_22::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_motioncommandfeedback1_22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&llc_fbk_steeringanglesetpoint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_motioncommandfeedback1_check_) -
        reinterpret_cast<char*>(&llc_fbk_steeringanglesetpoint_)) + sizeof(llc_motioncommandfeedback1_check_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_motioncommandfeedback1_22::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double llc_fbk_steeringanglesetpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_llc_fbk_steeringanglesetpoint(&has_bits);
          llc_fbk_steeringanglesetpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double llc_fbk_throttlesetpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_llc_fbk_throttlesetpoint(&has_bits);
          llc_fbk_throttlesetpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double llc_fbk_brakepercentsetpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_llc_fbk_brakepercentsetpoint(&has_bits);
          llc_fbk_brakepercentsetpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_motioncommandfeedback1_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_llc_motioncommandfeedback1_count(&has_bits);
          llc_motioncommandfeedback1_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_motioncommandfeedback1_check = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_llc_motioncommandfeedback1_check(&has_bits);
          llc_motioncommandfeedback1_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_motioncommandfeedback1_22::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_motioncommandfeedback1_22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double llc_fbk_steeringanglesetpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_llc_fbk_steeringanglesetpoint(), target);
  }

  // optional double llc_fbk_throttlesetpoint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_llc_fbk_throttlesetpoint(), target);
  }

  // optional double llc_fbk_brakepercentsetpoint = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_llc_fbk_brakepercentsetpoint(), target);
  }

  // optional int32 llc_motioncommandfeedback1_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_llc_motioncommandfeedback1_count(), target);
  }

  // optional int32 llc_motioncommandfeedback1_check = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_llc_motioncommandfeedback1_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_motioncommandfeedback1_22)
  return target;
}

size_t Llc_motioncommandfeedback1_22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_motioncommandfeedback1_22)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double llc_fbk_steeringanglesetpoint = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double llc_fbk_throttlesetpoint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double llc_fbk_brakepercentsetpoint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 llc_motioncommandfeedback1_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_motioncommandfeedback1_count());
    }

    // optional int32 llc_motioncommandfeedback1_check = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_motioncommandfeedback1_check());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_motioncommandfeedback1_22::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_motioncommandfeedback1_22)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_motioncommandfeedback1_22* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_motioncommandfeedback1_22>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_motioncommandfeedback1_22)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_motioncommandfeedback1_22)
    MergeFrom(*source);
  }
}

void Llc_motioncommandfeedback1_22::MergeFrom(const Llc_motioncommandfeedback1_22& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_motioncommandfeedback1_22)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      llc_fbk_steeringanglesetpoint_ = from.llc_fbk_steeringanglesetpoint_;
    }
    if (cached_has_bits & 0x00000002u) {
      llc_fbk_throttlesetpoint_ = from.llc_fbk_throttlesetpoint_;
    }
    if (cached_has_bits & 0x00000004u) {
      llc_fbk_brakepercentsetpoint_ = from.llc_fbk_brakepercentsetpoint_;
    }
    if (cached_has_bits & 0x00000008u) {
      llc_motioncommandfeedback1_count_ = from.llc_motioncommandfeedback1_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      llc_motioncommandfeedback1_check_ = from.llc_motioncommandfeedback1_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Llc_motioncommandfeedback1_22::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_motioncommandfeedback1_22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_motioncommandfeedback1_22::CopyFrom(const Llc_motioncommandfeedback1_22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_motioncommandfeedback1_22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_motioncommandfeedback1_22::IsInitialized() const {
  return true;
}

void Llc_motioncommandfeedback1_22::InternalSwap(Llc_motioncommandfeedback1_22* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_fbk_steeringanglesetpoint_, other->llc_fbk_steeringanglesetpoint_);
  swap(llc_fbk_throttlesetpoint_, other->llc_fbk_throttlesetpoint_);
  swap(llc_fbk_brakepercentsetpoint_, other->llc_fbk_brakepercentsetpoint_);
  swap(llc_motioncommandfeedback1_count_, other->llc_motioncommandfeedback1_count_);
  swap(llc_motioncommandfeedback1_check_, other->llc_motioncommandfeedback1_check_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_motioncommandfeedback1_22::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Llc_vehiclestatus_25::InitAsDefaultInstance() {
}
class Llc_vehiclestatus_25::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_vehiclestatus_25>()._has_bits_);
  static void set_has_llc_fbk_12voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Llc_vehiclestatus_25::Llc_vehiclestatus_25()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_vehiclestatus_25)
}
Llc_vehiclestatus_25::Llc_vehiclestatus_25(const Llc_vehiclestatus_25& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  llc_fbk_12voltage_ = from.llc_fbk_12voltage_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_vehiclestatus_25)
}

void Llc_vehiclestatus_25::SharedCtor() {
  llc_fbk_12voltage_ = 0;
}

Llc_vehiclestatus_25::~Llc_vehiclestatus_25() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_vehiclestatus_25)
  SharedDtor();
}

void Llc_vehiclestatus_25::SharedDtor() {
}

void Llc_vehiclestatus_25::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_vehiclestatus_25& Llc_vehiclestatus_25::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_vehiclestatus_25_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_vehiclestatus_25::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_vehiclestatus_25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  llc_fbk_12voltage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_vehiclestatus_25::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double llc_fbk_12voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_llc_fbk_12voltage(&has_bits);
          llc_fbk_12voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_vehiclestatus_25::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_vehiclestatus_25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double llc_fbk_12voltage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_llc_fbk_12voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_vehiclestatus_25)
  return target;
}

size_t Llc_vehiclestatus_25::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_vehiclestatus_25)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double llc_fbk_12voltage = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_vehiclestatus_25::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_vehiclestatus_25)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_vehiclestatus_25* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_vehiclestatus_25>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_vehiclestatus_25)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_vehiclestatus_25)
    MergeFrom(*source);
  }
}

void Llc_vehiclestatus_25::MergeFrom(const Llc_vehiclestatus_25& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_vehiclestatus_25)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_llc_fbk_12voltage()) {
    _internal_set_llc_fbk_12voltage(from._internal_llc_fbk_12voltage());
  }
}

void Llc_vehiclestatus_25::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_vehiclestatus_25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_vehiclestatus_25::CopyFrom(const Llc_vehiclestatus_25& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_vehiclestatus_25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_vehiclestatus_25::IsInitialized() const {
  return true;
}

void Llc_vehiclestatus_25::InternalSwap(Llc_vehiclestatus_25* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_fbk_12voltage_, other->llc_fbk_12voltage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_vehiclestatus_25::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Llc_auxiliaryfeedback_120::InitAsDefaultInstance() {
}
class Llc_auxiliaryfeedback_120::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_auxiliaryfeedback_120>()._has_bits_);
  static void set_has_llc_fbk_inverter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llc_fbk_pdu_ch8(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_llc_fbk_pdu_ch7(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_llc_fbk_pdu_ch6(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_llc_fbk_pdu_ch5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_llc_fbk_pdu_ch4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_llc_fbk_pdu_ch3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_llc_fbk_pdu_ch2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_llc_fbk_pdu_ch1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_llc_fbk_hazardlights(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_llc_fbk_ledgreenon(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_llc_fbk_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_llc_fbk_buzzeron(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_llc_fbk_turnsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_llc_fbk_lowbeam(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_llc_fbk_highbeam(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_llc_fbk_ledredon(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_llc_fbk_autonomybuttonpressed(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

Llc_auxiliaryfeedback_120::Llc_auxiliaryfeedback_120()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_auxiliaryfeedback_120)
}
Llc_auxiliaryfeedback_120::Llc_auxiliaryfeedback_120(const Llc_auxiliaryfeedback_120& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&llc_fbk_inverter_, &from.llc_fbk_inverter_,
    static_cast<size_t>(reinterpret_cast<char*>(&llc_fbk_autonomybuttonpressed_) -
    reinterpret_cast<char*>(&llc_fbk_inverter_)) + sizeof(llc_fbk_autonomybuttonpressed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_auxiliaryfeedback_120)
}

void Llc_auxiliaryfeedback_120::SharedCtor() {
  ::memset(&llc_fbk_inverter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_fbk_autonomybuttonpressed_) -
      reinterpret_cast<char*>(&llc_fbk_inverter_)) + sizeof(llc_fbk_autonomybuttonpressed_));
}

Llc_auxiliaryfeedback_120::~Llc_auxiliaryfeedback_120() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_auxiliaryfeedback_120)
  SharedDtor();
}

void Llc_auxiliaryfeedback_120::SharedDtor() {
}

void Llc_auxiliaryfeedback_120::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_auxiliaryfeedback_120& Llc_auxiliaryfeedback_120::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_auxiliaryfeedback_120_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_auxiliaryfeedback_120::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_auxiliaryfeedback_120)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&llc_fbk_inverter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_fbk_pdu_ch2_) -
        reinterpret_cast<char*>(&llc_fbk_inverter_)) + sizeof(llc_fbk_pdu_ch2_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&llc_fbk_pdu_ch1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_fbk_highbeam_) -
        reinterpret_cast<char*>(&llc_fbk_pdu_ch1_)) + sizeof(llc_fbk_highbeam_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&llc_fbk_ledredon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_fbk_autonomybuttonpressed_) -
        reinterpret_cast<char*>(&llc_fbk_ledredon_)) + sizeof(llc_fbk_autonomybuttonpressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_auxiliaryfeedback_120::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool llc_fbk_inverter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_llc_fbk_inverter(&has_bits);
          llc_fbk_inverter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_pdu_ch8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_llc_fbk_pdu_ch8(&has_bits);
          llc_fbk_pdu_ch8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_pdu_ch7 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_llc_fbk_pdu_ch7(&has_bits);
          llc_fbk_pdu_ch7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_pdu_ch6 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_llc_fbk_pdu_ch6(&has_bits);
          llc_fbk_pdu_ch6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_pdu_ch5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_llc_fbk_pdu_ch5(&has_bits);
          llc_fbk_pdu_ch5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_pdu_ch4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_llc_fbk_pdu_ch4(&has_bits);
          llc_fbk_pdu_ch4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_pdu_ch3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_llc_fbk_pdu_ch3(&has_bits);
          llc_fbk_pdu_ch3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_pdu_ch2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_llc_fbk_pdu_ch2(&has_bits);
          llc_fbk_pdu_ch2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_pdu_ch1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_llc_fbk_pdu_ch1(&has_bits);
          llc_fbk_pdu_ch1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_hazardlights = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_llc_fbk_hazardlights(&has_bits);
          llc_fbk_hazardlights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_ledgreenon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_llc_fbk_ledgreenon(&has_bits);
          llc_fbk_ledgreenon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_horn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_llc_fbk_horn(&has_bits);
          llc_fbk_horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_buzzeron = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_llc_fbk_buzzeron(&has_bits);
          llc_fbk_buzzeron_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_auxiliaryfeedback_120.Llc_fbk_turnsignalType llc_fbk_turnsignal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType_IsValid(val))) {
            _internal_set_llc_fbk_turnsignal(static_cast<::apollo::canbus::Llc_auxiliaryfeedback_120_Llc_fbk_turnsignalType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_lowbeam = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_llc_fbk_lowbeam(&has_bits);
          llc_fbk_lowbeam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_highbeam = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_llc_fbk_highbeam(&has_bits);
          llc_fbk_highbeam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_ledredon = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_llc_fbk_ledredon(&has_bits);
          llc_fbk_ledredon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool llc_fbk_autonomybuttonpressed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_llc_fbk_autonomybuttonpressed(&has_bits);
          llc_fbk_autonomybuttonpressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_auxiliaryfeedback_120::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_auxiliaryfeedback_120)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool llc_fbk_inverter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_llc_fbk_inverter(), target);
  }

  // optional bool llc_fbk_pdu_ch8 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_llc_fbk_pdu_ch8(), target);
  }

  // optional bool llc_fbk_pdu_ch7 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_llc_fbk_pdu_ch7(), target);
  }

  // optional bool llc_fbk_pdu_ch6 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_llc_fbk_pdu_ch6(), target);
  }

  // optional bool llc_fbk_pdu_ch5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_llc_fbk_pdu_ch5(), target);
  }

  // optional bool llc_fbk_pdu_ch4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_llc_fbk_pdu_ch4(), target);
  }

  // optional bool llc_fbk_pdu_ch3 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_llc_fbk_pdu_ch3(), target);
  }

  // optional bool llc_fbk_pdu_ch2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_llc_fbk_pdu_ch2(), target);
  }

  // optional bool llc_fbk_pdu_ch1 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_llc_fbk_pdu_ch1(), target);
  }

  // optional bool llc_fbk_hazardlights = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_llc_fbk_hazardlights(), target);
  }

  // optional bool llc_fbk_ledgreenon = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_llc_fbk_ledgreenon(), target);
  }

  // optional bool llc_fbk_horn = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_llc_fbk_horn(), target);
  }

  // optional bool llc_fbk_buzzeron = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_llc_fbk_buzzeron(), target);
  }

  // optional .apollo.canbus.Llc_auxiliaryfeedback_120.Llc_fbk_turnsignalType llc_fbk_turnsignal = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_llc_fbk_turnsignal(), target);
  }

  // optional bool llc_fbk_lowbeam = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_llc_fbk_lowbeam(), target);
  }

  // optional bool llc_fbk_highbeam = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_llc_fbk_highbeam(), target);
  }

  // optional bool llc_fbk_ledredon = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_llc_fbk_ledredon(), target);
  }

  // optional bool llc_fbk_autonomybuttonpressed = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_llc_fbk_autonomybuttonpressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_auxiliaryfeedback_120)
  return target;
}

size_t Llc_auxiliaryfeedback_120::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_auxiliaryfeedback_120)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool llc_fbk_inverter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_pdu_ch8 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_pdu_ch7 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_pdu_ch6 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_pdu_ch5 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_pdu_ch4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_pdu_ch3 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_pdu_ch2 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool llc_fbk_pdu_ch1 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_hazardlights = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_ledgreenon = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_horn = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Llc_auxiliaryfeedback_120.Llc_fbk_turnsignalType llc_fbk_turnsignal = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_llc_fbk_turnsignal());
    }

    // optional bool llc_fbk_buzzeron = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_lowbeam = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool llc_fbk_highbeam = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional bool llc_fbk_ledredon = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool llc_fbk_autonomybuttonpressed = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_auxiliaryfeedback_120::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_auxiliaryfeedback_120)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_auxiliaryfeedback_120* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_auxiliaryfeedback_120>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_auxiliaryfeedback_120)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_auxiliaryfeedback_120)
    MergeFrom(*source);
  }
}

void Llc_auxiliaryfeedback_120::MergeFrom(const Llc_auxiliaryfeedback_120& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_auxiliaryfeedback_120)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      llc_fbk_inverter_ = from.llc_fbk_inverter_;
    }
    if (cached_has_bits & 0x00000002u) {
      llc_fbk_pdu_ch8_ = from.llc_fbk_pdu_ch8_;
    }
    if (cached_has_bits & 0x00000004u) {
      llc_fbk_pdu_ch7_ = from.llc_fbk_pdu_ch7_;
    }
    if (cached_has_bits & 0x00000008u) {
      llc_fbk_pdu_ch6_ = from.llc_fbk_pdu_ch6_;
    }
    if (cached_has_bits & 0x00000010u) {
      llc_fbk_pdu_ch5_ = from.llc_fbk_pdu_ch5_;
    }
    if (cached_has_bits & 0x00000020u) {
      llc_fbk_pdu_ch4_ = from.llc_fbk_pdu_ch4_;
    }
    if (cached_has_bits & 0x00000040u) {
      llc_fbk_pdu_ch3_ = from.llc_fbk_pdu_ch3_;
    }
    if (cached_has_bits & 0x00000080u) {
      llc_fbk_pdu_ch2_ = from.llc_fbk_pdu_ch2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      llc_fbk_pdu_ch1_ = from.llc_fbk_pdu_ch1_;
    }
    if (cached_has_bits & 0x00000200u) {
      llc_fbk_hazardlights_ = from.llc_fbk_hazardlights_;
    }
    if (cached_has_bits & 0x00000400u) {
      llc_fbk_ledgreenon_ = from.llc_fbk_ledgreenon_;
    }
    if (cached_has_bits & 0x00000800u) {
      llc_fbk_horn_ = from.llc_fbk_horn_;
    }
    if (cached_has_bits & 0x00001000u) {
      llc_fbk_turnsignal_ = from.llc_fbk_turnsignal_;
    }
    if (cached_has_bits & 0x00002000u) {
      llc_fbk_buzzeron_ = from.llc_fbk_buzzeron_;
    }
    if (cached_has_bits & 0x00004000u) {
      llc_fbk_lowbeam_ = from.llc_fbk_lowbeam_;
    }
    if (cached_has_bits & 0x00008000u) {
      llc_fbk_highbeam_ = from.llc_fbk_highbeam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      llc_fbk_ledredon_ = from.llc_fbk_ledredon_;
    }
    if (cached_has_bits & 0x00020000u) {
      llc_fbk_autonomybuttonpressed_ = from.llc_fbk_autonomybuttonpressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Llc_auxiliaryfeedback_120::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_auxiliaryfeedback_120)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_auxiliaryfeedback_120::CopyFrom(const Llc_auxiliaryfeedback_120& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_auxiliaryfeedback_120)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_auxiliaryfeedback_120::IsInitialized() const {
  return true;
}

void Llc_auxiliaryfeedback_120::InternalSwap(Llc_auxiliaryfeedback_120* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_fbk_inverter_, other->llc_fbk_inverter_);
  swap(llc_fbk_pdu_ch8_, other->llc_fbk_pdu_ch8_);
  swap(llc_fbk_pdu_ch7_, other->llc_fbk_pdu_ch7_);
  swap(llc_fbk_pdu_ch6_, other->llc_fbk_pdu_ch6_);
  swap(llc_fbk_pdu_ch5_, other->llc_fbk_pdu_ch5_);
  swap(llc_fbk_pdu_ch4_, other->llc_fbk_pdu_ch4_);
  swap(llc_fbk_pdu_ch3_, other->llc_fbk_pdu_ch3_);
  swap(llc_fbk_pdu_ch2_, other->llc_fbk_pdu_ch2_);
  swap(llc_fbk_pdu_ch1_, other->llc_fbk_pdu_ch1_);
  swap(llc_fbk_hazardlights_, other->llc_fbk_hazardlights_);
  swap(llc_fbk_ledgreenon_, other->llc_fbk_ledgreenon_);
  swap(llc_fbk_horn_, other->llc_fbk_horn_);
  swap(llc_fbk_turnsignal_, other->llc_fbk_turnsignal_);
  swap(llc_fbk_buzzeron_, other->llc_fbk_buzzeron_);
  swap(llc_fbk_lowbeam_, other->llc_fbk_lowbeam_);
  swap(llc_fbk_highbeam_, other->llc_fbk_highbeam_);
  swap(llc_fbk_ledredon_, other->llc_fbk_ledredon_);
  swap(llc_fbk_autonomybuttonpressed_, other->llc_fbk_autonomybuttonpressed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_auxiliaryfeedback_120::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Llc_diag_fault_620::InitAsDefaultInstance() {
}
class Llc_diag_fault_620::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_diag_fault_620>()._has_bits_);
  static void set_has_llc_disengagecounter_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llc_disengagecounter_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_llc_disengagecounter_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_llc_fbk_faultcounter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_llc_disengagecounter_button(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_llc_fbk_version_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_llc_fbk_version_month(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_llc_fbk_version_day(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_llc_fbk_version_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Llc_diag_fault_620::Llc_diag_fault_620()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_diag_fault_620)
}
Llc_diag_fault_620::Llc_diag_fault_620(const Llc_diag_fault_620& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&llc_disengagecounter_brake_, &from.llc_disengagecounter_brake_,
    static_cast<size_t>(reinterpret_cast<char*>(&llc_fbk_version_hour_) -
    reinterpret_cast<char*>(&llc_disengagecounter_brake_)) + sizeof(llc_fbk_version_hour_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_diag_fault_620)
}

void Llc_diag_fault_620::SharedCtor() {
  ::memset(&llc_disengagecounter_brake_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_fbk_version_hour_) -
      reinterpret_cast<char*>(&llc_disengagecounter_brake_)) + sizeof(llc_fbk_version_hour_));
}

Llc_diag_fault_620::~Llc_diag_fault_620() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_diag_fault_620)
  SharedDtor();
}

void Llc_diag_fault_620::SharedDtor() {
}

void Llc_diag_fault_620::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_diag_fault_620& Llc_diag_fault_620::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_diag_fault_620_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_diag_fault_620::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_diag_fault_620)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&llc_disengagecounter_brake_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_fbk_version_day_) -
        reinterpret_cast<char*>(&llc_disengagecounter_brake_)) + sizeof(llc_fbk_version_day_));
  }
  llc_fbk_version_hour_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_diag_fault_620::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 llc_disengagecounter_brake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_llc_disengagecounter_brake(&has_bits);
          llc_disengagecounter_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_disengagecounter_steer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_llc_disengagecounter_steer(&has_bits);
          llc_disengagecounter_steer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_disengagecounter_throttle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_llc_disengagecounter_throttle(&has_bits);
          llc_disengagecounter_throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_fbk_faultcounter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_llc_fbk_faultcounter(&has_bits);
          llc_fbk_faultcounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_disengagecounter_button = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_llc_disengagecounter_button(&has_bits);
          llc_disengagecounter_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_fbk_version_year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_llc_fbk_version_year(&has_bits);
          llc_fbk_version_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_fbk_version_month = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_llc_fbk_version_month(&has_bits);
          llc_fbk_version_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_fbk_version_day = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_llc_fbk_version_day(&has_bits);
          llc_fbk_version_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_fbk_version_hour = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_llc_fbk_version_hour(&has_bits);
          llc_fbk_version_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_diag_fault_620::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_diag_fault_620)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 llc_disengagecounter_brake = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_llc_disengagecounter_brake(), target);
  }

  // optional int32 llc_disengagecounter_steer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_llc_disengagecounter_steer(), target);
  }

  // optional int32 llc_disengagecounter_throttle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_llc_disengagecounter_throttle(), target);
  }

  // optional int32 llc_fbk_faultcounter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_llc_fbk_faultcounter(), target);
  }

  // optional int32 llc_disengagecounter_button = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_llc_disengagecounter_button(), target);
  }

  // optional int32 llc_fbk_version_year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_llc_fbk_version_year(), target);
  }

  // optional int32 llc_fbk_version_month = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_llc_fbk_version_month(), target);
  }

  // optional int32 llc_fbk_version_day = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_llc_fbk_version_day(), target);
  }

  // optional int32 llc_fbk_version_hour = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_llc_fbk_version_hour(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_diag_fault_620)
  return target;
}

size_t Llc_diag_fault_620::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_diag_fault_620)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 llc_disengagecounter_brake = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_disengagecounter_brake());
    }

    // optional int32 llc_disengagecounter_steer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_disengagecounter_steer());
    }

    // optional int32 llc_disengagecounter_throttle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_disengagecounter_throttle());
    }

    // optional int32 llc_fbk_faultcounter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_fbk_faultcounter());
    }

    // optional int32 llc_disengagecounter_button = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_disengagecounter_button());
    }

    // optional int32 llc_fbk_version_year = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_fbk_version_year());
    }

    // optional int32 llc_fbk_version_month = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_fbk_version_month());
    }

    // optional int32 llc_fbk_version_day = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_fbk_version_day());
    }

  }
  // optional int32 llc_fbk_version_hour = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_llc_fbk_version_hour());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_diag_fault_620::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_diag_fault_620)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_diag_fault_620* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_diag_fault_620>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_diag_fault_620)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_diag_fault_620)
    MergeFrom(*source);
  }
}

void Llc_diag_fault_620::MergeFrom(const Llc_diag_fault_620& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_diag_fault_620)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      llc_disengagecounter_brake_ = from.llc_disengagecounter_brake_;
    }
    if (cached_has_bits & 0x00000002u) {
      llc_disengagecounter_steer_ = from.llc_disengagecounter_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      llc_disengagecounter_throttle_ = from.llc_disengagecounter_throttle_;
    }
    if (cached_has_bits & 0x00000008u) {
      llc_fbk_faultcounter_ = from.llc_fbk_faultcounter_;
    }
    if (cached_has_bits & 0x00000010u) {
      llc_disengagecounter_button_ = from.llc_disengagecounter_button_;
    }
    if (cached_has_bits & 0x00000020u) {
      llc_fbk_version_year_ = from.llc_fbk_version_year_;
    }
    if (cached_has_bits & 0x00000040u) {
      llc_fbk_version_month_ = from.llc_fbk_version_month_;
    }
    if (cached_has_bits & 0x00000080u) {
      llc_fbk_version_day_ = from.llc_fbk_version_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_llc_fbk_version_hour(from._internal_llc_fbk_version_hour());
  }
}

void Llc_diag_fault_620::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_diag_fault_620)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_diag_fault_620::CopyFrom(const Llc_diag_fault_620& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_diag_fault_620)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_diag_fault_620::IsInitialized() const {
  return true;
}

void Llc_diag_fault_620::InternalSwap(Llc_diag_fault_620* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_disengagecounter_brake_, other->llc_disengagecounter_brake_);
  swap(llc_disengagecounter_steer_, other->llc_disengagecounter_steer_);
  swap(llc_disengagecounter_throttle_, other->llc_disengagecounter_throttle_);
  swap(llc_fbk_faultcounter_, other->llc_fbk_faultcounter_);
  swap(llc_disengagecounter_button_, other->llc_disengagecounter_button_);
  swap(llc_fbk_version_year_, other->llc_fbk_version_year_);
  swap(llc_fbk_version_month_, other->llc_fbk_version_month_);
  swap(llc_fbk_version_day_, other->llc_fbk_version_day_);
  swap(llc_fbk_version_hour_, other->llc_fbk_version_hour_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_diag_fault_620::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Llc_diag_steeringcontrol_722::InitAsDefaultInstance() {
}
class Llc_diag_steeringcontrol_722::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_diag_steeringcontrol_722>()._has_bits_);
  static void set_has_llc_dbg_steeringsensorposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llc_dbg_steeringrackinputtorque(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_llc_dbg_steeringmotorposition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Llc_diag_steeringcontrol_722::Llc_diag_steeringcontrol_722()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_diag_steeringcontrol_722)
}
Llc_diag_steeringcontrol_722::Llc_diag_steeringcontrol_722(const Llc_diag_steeringcontrol_722& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&llc_dbg_steeringsensorposition_, &from.llc_dbg_steeringsensorposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&llc_dbg_steeringrackinputtorque_) -
    reinterpret_cast<char*>(&llc_dbg_steeringsensorposition_)) + sizeof(llc_dbg_steeringrackinputtorque_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_diag_steeringcontrol_722)
}

void Llc_diag_steeringcontrol_722::SharedCtor() {
  ::memset(&llc_dbg_steeringsensorposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_dbg_steeringrackinputtorque_) -
      reinterpret_cast<char*>(&llc_dbg_steeringsensorposition_)) + sizeof(llc_dbg_steeringrackinputtorque_));
}

Llc_diag_steeringcontrol_722::~Llc_diag_steeringcontrol_722() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_diag_steeringcontrol_722)
  SharedDtor();
}

void Llc_diag_steeringcontrol_722::SharedDtor() {
}

void Llc_diag_steeringcontrol_722::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_diag_steeringcontrol_722& Llc_diag_steeringcontrol_722::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_diag_steeringcontrol_722_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_diag_steeringcontrol_722::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_diag_steeringcontrol_722)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&llc_dbg_steeringsensorposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_dbg_steeringrackinputtorque_) -
        reinterpret_cast<char*>(&llc_dbg_steeringsensorposition_)) + sizeof(llc_dbg_steeringrackinputtorque_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_diag_steeringcontrol_722::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double llc_dbg_steeringsensorposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_llc_dbg_steeringsensorposition(&has_bits);
          llc_dbg_steeringsensorposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_dbg_steeringrackinputtorque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_llc_dbg_steeringrackinputtorque(&has_bits);
          llc_dbg_steeringrackinputtorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double llc_dbg_steeringmotorposition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_llc_dbg_steeringmotorposition(&has_bits);
          llc_dbg_steeringmotorposition_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_diag_steeringcontrol_722::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_diag_steeringcontrol_722)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double llc_dbg_steeringsensorposition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_llc_dbg_steeringsensorposition(), target);
  }

  // optional int32 llc_dbg_steeringrackinputtorque = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_llc_dbg_steeringrackinputtorque(), target);
  }

  // optional double llc_dbg_steeringmotorposition = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_llc_dbg_steeringmotorposition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_diag_steeringcontrol_722)
  return target;
}

size_t Llc_diag_steeringcontrol_722::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_diag_steeringcontrol_722)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double llc_dbg_steeringsensorposition = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double llc_dbg_steeringmotorposition = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 llc_dbg_steeringrackinputtorque = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_dbg_steeringrackinputtorque());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_diag_steeringcontrol_722::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_diag_steeringcontrol_722)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_diag_steeringcontrol_722* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_diag_steeringcontrol_722>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_diag_steeringcontrol_722)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_diag_steeringcontrol_722)
    MergeFrom(*source);
  }
}

void Llc_diag_steeringcontrol_722::MergeFrom(const Llc_diag_steeringcontrol_722& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_diag_steeringcontrol_722)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      llc_dbg_steeringsensorposition_ = from.llc_dbg_steeringsensorposition_;
    }
    if (cached_has_bits & 0x00000002u) {
      llc_dbg_steeringmotorposition_ = from.llc_dbg_steeringmotorposition_;
    }
    if (cached_has_bits & 0x00000004u) {
      llc_dbg_steeringrackinputtorque_ = from.llc_dbg_steeringrackinputtorque_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Llc_diag_steeringcontrol_722::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_diag_steeringcontrol_722)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_diag_steeringcontrol_722::CopyFrom(const Llc_diag_steeringcontrol_722& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_diag_steeringcontrol_722)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_diag_steeringcontrol_722::IsInitialized() const {
  return true;
}

void Llc_diag_steeringcontrol_722::InternalSwap(Llc_diag_steeringcontrol_722* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_dbg_steeringsensorposition_, other->llc_dbg_steeringsensorposition_);
  swap(llc_dbg_steeringmotorposition_, other->llc_dbg_steeringmotorposition_);
  swap(llc_dbg_steeringrackinputtorque_, other->llc_dbg_steeringrackinputtorque_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_diag_steeringcontrol_722::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Adc_auxiliarycontrol_110::InitAsDefaultInstance() {
}
class Adc_auxiliarycontrol_110::_Internal {
 public:
  using HasBits = decltype(std::declval<Adc_auxiliarycontrol_110>()._has_bits_);
  static void set_has_adc_auxcontrol_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adc_auxcontrol_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adc_cmd_inverter_controlenable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_adc_cmd_inverter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_adc_cmd_wiper(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_adc_cmd_pdu_controlenable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_adc_cmd_pdu_ch8(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_adc_cmd_pdu_ch7(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_adc_cmd_pdu_ch6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_adc_cmd_pdu_ch5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_adc_cmd_pdu_ch4(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_adc_cmd_pdu_ch3(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_adc_cmd_pdu_ch2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_adc_cmd_pdu_ch1(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_adc_cmd_hazardlights(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_adc_cmd_highbeam(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_adc_cmd_lowbeam(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_adc_cmd_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_adc_cmd_turnsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

Adc_auxiliarycontrol_110::Adc_auxiliarycontrol_110()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Adc_auxiliarycontrol_110)
}
Adc_auxiliarycontrol_110::Adc_auxiliarycontrol_110(const Adc_auxiliarycontrol_110& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&adc_auxcontrol_counter_, &from.adc_auxcontrol_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_cmd_turnsignal_) -
    reinterpret_cast<char*>(&adc_auxcontrol_counter_)) + sizeof(adc_cmd_turnsignal_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Adc_auxiliarycontrol_110)
}

void Adc_auxiliarycontrol_110::SharedCtor() {
  ::memset(&adc_auxcontrol_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_cmd_turnsignal_) -
      reinterpret_cast<char*>(&adc_auxcontrol_counter_)) + sizeof(adc_cmd_turnsignal_));
}

Adc_auxiliarycontrol_110::~Adc_auxiliarycontrol_110() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Adc_auxiliarycontrol_110)
  SharedDtor();
}

void Adc_auxiliarycontrol_110::SharedDtor() {
}

void Adc_auxiliarycontrol_110::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Adc_auxiliarycontrol_110& Adc_auxiliarycontrol_110::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Adc_auxiliarycontrol_110_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Adc_auxiliarycontrol_110::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Adc_auxiliarycontrol_110)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&adc_auxcontrol_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_cmd_pdu_ch7_) -
        reinterpret_cast<char*>(&adc_auxcontrol_counter_)) + sizeof(adc_cmd_pdu_ch7_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&adc_cmd_pdu_ch6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_cmd_highbeam_) -
        reinterpret_cast<char*>(&adc_cmd_pdu_ch6_)) + sizeof(adc_cmd_highbeam_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&adc_cmd_lowbeam_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_cmd_turnsignal_) -
        reinterpret_cast<char*>(&adc_cmd_lowbeam_)) + sizeof(adc_cmd_turnsignal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Adc_auxiliarycontrol_110::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 adc_auxcontrol_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_adc_auxcontrol_counter(&has_bits);
          adc_auxcontrol_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 adc_auxcontrol_checksum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_adc_auxcontrol_checksum(&has_bits);
          adc_auxcontrol_checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_inverter_controlenable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_adc_cmd_inverter_controlenable(&has_bits);
          adc_cmd_inverter_controlenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_inverter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_adc_cmd_inverter(&has_bits);
          adc_cmd_inverter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 adc_cmd_wiper = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_adc_cmd_wiper(&has_bits);
          adc_cmd_wiper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_controlenable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_adc_cmd_pdu_controlenable(&has_bits);
          adc_cmd_pdu_controlenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_ch8 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_adc_cmd_pdu_ch8(&has_bits);
          adc_cmd_pdu_ch8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_ch7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_adc_cmd_pdu_ch7(&has_bits);
          adc_cmd_pdu_ch7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_ch6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_adc_cmd_pdu_ch6(&has_bits);
          adc_cmd_pdu_ch6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_ch5 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_adc_cmd_pdu_ch5(&has_bits);
          adc_cmd_pdu_ch5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_ch4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_adc_cmd_pdu_ch4(&has_bits);
          adc_cmd_pdu_ch4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_ch3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_adc_cmd_pdu_ch3(&has_bits);
          adc_cmd_pdu_ch3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_ch2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_adc_cmd_pdu_ch2(&has_bits);
          adc_cmd_pdu_ch2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_pdu_ch1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_adc_cmd_pdu_ch1(&has_bits);
          adc_cmd_pdu_ch1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_hazardlights = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_adc_cmd_hazardlights(&has_bits);
          adc_cmd_hazardlights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_highbeam = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_adc_cmd_highbeam(&has_bits);
          adc_cmd_highbeam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_lowbeam = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_adc_cmd_lowbeam(&has_bits);
          adc_cmd_lowbeam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adc_cmd_horn = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_adc_cmd_horn(&has_bits);
          adc_cmd_horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Adc_auxiliarycontrol_110.Adc_cmd_turnsignalType adc_cmd_turnsignal = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType_IsValid(val))) {
            _internal_set_adc_cmd_turnsignal(static_cast<::apollo::canbus::Adc_auxiliarycontrol_110_Adc_cmd_turnsignalType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Adc_auxiliarycontrol_110::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Adc_auxiliarycontrol_110)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 adc_auxcontrol_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_adc_auxcontrol_counter(), target);
  }

  // optional int32 adc_auxcontrol_checksum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_adc_auxcontrol_checksum(), target);
  }

  // optional bool adc_cmd_inverter_controlenable = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_adc_cmd_inverter_controlenable(), target);
  }

  // optional bool adc_cmd_inverter = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_adc_cmd_inverter(), target);
  }

  // optional int32 adc_cmd_wiper = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_adc_cmd_wiper(), target);
  }

  // optional bool adc_cmd_pdu_controlenable = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_adc_cmd_pdu_controlenable(), target);
  }

  // optional bool adc_cmd_pdu_ch8 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_adc_cmd_pdu_ch8(), target);
  }

  // optional bool adc_cmd_pdu_ch7 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_adc_cmd_pdu_ch7(), target);
  }

  // optional bool adc_cmd_pdu_ch6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_adc_cmd_pdu_ch6(), target);
  }

  // optional bool adc_cmd_pdu_ch5 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_adc_cmd_pdu_ch5(), target);
  }

  // optional bool adc_cmd_pdu_ch4 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_adc_cmd_pdu_ch4(), target);
  }

  // optional bool adc_cmd_pdu_ch3 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_adc_cmd_pdu_ch3(), target);
  }

  // optional bool adc_cmd_pdu_ch2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_adc_cmd_pdu_ch2(), target);
  }

  // optional bool adc_cmd_pdu_ch1 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_adc_cmd_pdu_ch1(), target);
  }

  // optional bool adc_cmd_hazardlights = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_adc_cmd_hazardlights(), target);
  }

  // optional bool adc_cmd_highbeam = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_adc_cmd_highbeam(), target);
  }

  // optional bool adc_cmd_lowbeam = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_adc_cmd_lowbeam(), target);
  }

  // optional bool adc_cmd_horn = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_adc_cmd_horn(), target);
  }

  // optional .apollo.canbus.Adc_auxiliarycontrol_110.Adc_cmd_turnsignalType adc_cmd_turnsignal = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_adc_cmd_turnsignal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Adc_auxiliarycontrol_110)
  return target;
}

size_t Adc_auxiliarycontrol_110::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Adc_auxiliarycontrol_110)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 adc_auxcontrol_counter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adc_auxcontrol_counter());
    }

    // optional int32 adc_auxcontrol_checksum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adc_auxcontrol_checksum());
    }

    // optional int32 adc_cmd_wiper = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_adc_cmd_wiper());
    }

    // optional bool adc_cmd_inverter_controlenable = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_inverter = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_pdu_controlenable = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_pdu_ch8 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_pdu_ch7 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool adc_cmd_pdu_ch6 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_pdu_ch5 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_pdu_ch4 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_pdu_ch3 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_pdu_ch2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_pdu_ch1 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_hazardlights = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool adc_cmd_highbeam = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool adc_cmd_lowbeam = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool adc_cmd_horn = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.canbus.Adc_auxiliarycontrol_110.Adc_cmd_turnsignalType adc_cmd_turnsignal = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_adc_cmd_turnsignal());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Adc_auxiliarycontrol_110::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Adc_auxiliarycontrol_110)
  GOOGLE_DCHECK_NE(&from, this);
  const Adc_auxiliarycontrol_110* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Adc_auxiliarycontrol_110>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Adc_auxiliarycontrol_110)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Adc_auxiliarycontrol_110)
    MergeFrom(*source);
  }
}

void Adc_auxiliarycontrol_110::MergeFrom(const Adc_auxiliarycontrol_110& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Adc_auxiliarycontrol_110)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      adc_auxcontrol_counter_ = from.adc_auxcontrol_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      adc_auxcontrol_checksum_ = from.adc_auxcontrol_checksum_;
    }
    if (cached_has_bits & 0x00000004u) {
      adc_cmd_wiper_ = from.adc_cmd_wiper_;
    }
    if (cached_has_bits & 0x00000008u) {
      adc_cmd_inverter_controlenable_ = from.adc_cmd_inverter_controlenable_;
    }
    if (cached_has_bits & 0x00000010u) {
      adc_cmd_inverter_ = from.adc_cmd_inverter_;
    }
    if (cached_has_bits & 0x00000020u) {
      adc_cmd_pdu_controlenable_ = from.adc_cmd_pdu_controlenable_;
    }
    if (cached_has_bits & 0x00000040u) {
      adc_cmd_pdu_ch8_ = from.adc_cmd_pdu_ch8_;
    }
    if (cached_has_bits & 0x00000080u) {
      adc_cmd_pdu_ch7_ = from.adc_cmd_pdu_ch7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      adc_cmd_pdu_ch6_ = from.adc_cmd_pdu_ch6_;
    }
    if (cached_has_bits & 0x00000200u) {
      adc_cmd_pdu_ch5_ = from.adc_cmd_pdu_ch5_;
    }
    if (cached_has_bits & 0x00000400u) {
      adc_cmd_pdu_ch4_ = from.adc_cmd_pdu_ch4_;
    }
    if (cached_has_bits & 0x00000800u) {
      adc_cmd_pdu_ch3_ = from.adc_cmd_pdu_ch3_;
    }
    if (cached_has_bits & 0x00001000u) {
      adc_cmd_pdu_ch2_ = from.adc_cmd_pdu_ch2_;
    }
    if (cached_has_bits & 0x00002000u) {
      adc_cmd_pdu_ch1_ = from.adc_cmd_pdu_ch1_;
    }
    if (cached_has_bits & 0x00004000u) {
      adc_cmd_hazardlights_ = from.adc_cmd_hazardlights_;
    }
    if (cached_has_bits & 0x00008000u) {
      adc_cmd_highbeam_ = from.adc_cmd_highbeam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      adc_cmd_lowbeam_ = from.adc_cmd_lowbeam_;
    }
    if (cached_has_bits & 0x00020000u) {
      adc_cmd_horn_ = from.adc_cmd_horn_;
    }
    if (cached_has_bits & 0x00040000u) {
      adc_cmd_turnsignal_ = from.adc_cmd_turnsignal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Adc_auxiliarycontrol_110::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Adc_auxiliarycontrol_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Adc_auxiliarycontrol_110::CopyFrom(const Adc_auxiliarycontrol_110& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Adc_auxiliarycontrol_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Adc_auxiliarycontrol_110::IsInitialized() const {
  return true;
}

void Adc_auxiliarycontrol_110::InternalSwap(Adc_auxiliarycontrol_110* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(adc_auxcontrol_counter_, other->adc_auxcontrol_counter_);
  swap(adc_auxcontrol_checksum_, other->adc_auxcontrol_checksum_);
  swap(adc_cmd_wiper_, other->adc_cmd_wiper_);
  swap(adc_cmd_inverter_controlenable_, other->adc_cmd_inverter_controlenable_);
  swap(adc_cmd_inverter_, other->adc_cmd_inverter_);
  swap(adc_cmd_pdu_controlenable_, other->adc_cmd_pdu_controlenable_);
  swap(adc_cmd_pdu_ch8_, other->adc_cmd_pdu_ch8_);
  swap(adc_cmd_pdu_ch7_, other->adc_cmd_pdu_ch7_);
  swap(adc_cmd_pdu_ch6_, other->adc_cmd_pdu_ch6_);
  swap(adc_cmd_pdu_ch5_, other->adc_cmd_pdu_ch5_);
  swap(adc_cmd_pdu_ch4_, other->adc_cmd_pdu_ch4_);
  swap(adc_cmd_pdu_ch3_, other->adc_cmd_pdu_ch3_);
  swap(adc_cmd_pdu_ch2_, other->adc_cmd_pdu_ch2_);
  swap(adc_cmd_pdu_ch1_, other->adc_cmd_pdu_ch1_);
  swap(adc_cmd_hazardlights_, other->adc_cmd_hazardlights_);
  swap(adc_cmd_highbeam_, other->adc_cmd_highbeam_);
  swap(adc_cmd_lowbeam_, other->adc_cmd_lowbeam_);
  swap(adc_cmd_horn_, other->adc_cmd_horn_);
  swap(adc_cmd_turnsignal_, other->adc_cmd_turnsignal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Adc_auxiliarycontrol_110::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Llc_diag_brakecontrol_721::InitAsDefaultInstance() {
}
class Llc_diag_brakecontrol_721::_Internal {
 public:
  using HasBits = decltype(std::declval<Llc_diag_brakecontrol_721>()._has_bits_);
  static void set_has_llc_dbg_brakepidcontribution_p(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llc_dbg_brakepidcontribution_i(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_llc_dbg_brakepidcontribution_d(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_llc_dbg_brakepid_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_llc_dbg_brakepid_error(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_llc_dbg_brakefeedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Llc_diag_brakecontrol_721::Llc_diag_brakecontrol_721()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Llc_diag_brakecontrol_721)
}
Llc_diag_brakecontrol_721::Llc_diag_brakecontrol_721(const Llc_diag_brakecontrol_721& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&llc_dbg_brakepidcontribution_p_, &from.llc_dbg_brakepidcontribution_p_,
    static_cast<size_t>(reinterpret_cast<char*>(&llc_dbg_brakepid_error_) -
    reinterpret_cast<char*>(&llc_dbg_brakepidcontribution_p_)) + sizeof(llc_dbg_brakepid_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Llc_diag_brakecontrol_721)
}

void Llc_diag_brakecontrol_721::SharedCtor() {
  ::memset(&llc_dbg_brakepidcontribution_p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_dbg_brakepid_error_) -
      reinterpret_cast<char*>(&llc_dbg_brakepidcontribution_p_)) + sizeof(llc_dbg_brakepid_error_));
}

Llc_diag_brakecontrol_721::~Llc_diag_brakecontrol_721() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Llc_diag_brakecontrol_721)
  SharedDtor();
}

void Llc_diag_brakecontrol_721::SharedDtor() {
}

void Llc_diag_brakecontrol_721::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Llc_diag_brakecontrol_721& Llc_diag_brakecontrol_721::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Llc_diag_brakecontrol_721_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Llc_diag_brakecontrol_721::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Llc_diag_brakecontrol_721)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&llc_dbg_brakepidcontribution_p_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llc_dbg_brakepid_error_) -
        reinterpret_cast<char*>(&llc_dbg_brakepidcontribution_p_)) + sizeof(llc_dbg_brakepid_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Llc_diag_brakecontrol_721::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double llc_dbg_brakepidcontribution_p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_llc_dbg_brakepidcontribution_p(&has_bits);
          llc_dbg_brakepidcontribution_p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double llc_dbg_brakepidcontribution_i = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_llc_dbg_brakepidcontribution_i(&has_bits);
          llc_dbg_brakepidcontribution_i_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double llc_dbg_brakepidcontribution_d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_llc_dbg_brakepidcontribution_d(&has_bits);
          llc_dbg_brakepidcontribution_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double llc_dbg_brakepid_output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_llc_dbg_brakepid_output(&has_bits);
          llc_dbg_brakepid_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 llc_dbg_brakepid_error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_llc_dbg_brakepid_error(&has_bits);
          llc_dbg_brakepid_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double llc_dbg_brakefeedforward = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_llc_dbg_brakefeedforward(&has_bits);
          llc_dbg_brakefeedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Llc_diag_brakecontrol_721::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Llc_diag_brakecontrol_721)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double llc_dbg_brakepidcontribution_p = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_llc_dbg_brakepidcontribution_p(), target);
  }

  // optional double llc_dbg_brakepidcontribution_i = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_llc_dbg_brakepidcontribution_i(), target);
  }

  // optional double llc_dbg_brakepidcontribution_d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_llc_dbg_brakepidcontribution_d(), target);
  }

  // optional double llc_dbg_brakepid_output = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_llc_dbg_brakepid_output(), target);
  }

  // optional int32 llc_dbg_brakepid_error = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_llc_dbg_brakepid_error(), target);
  }

  // optional double llc_dbg_brakefeedforward = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_llc_dbg_brakefeedforward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Llc_diag_brakecontrol_721)
  return target;
}

size_t Llc_diag_brakecontrol_721::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Llc_diag_brakecontrol_721)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double llc_dbg_brakepidcontribution_p = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double llc_dbg_brakepidcontribution_i = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double llc_dbg_brakepidcontribution_d = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double llc_dbg_brakepid_output = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double llc_dbg_brakefeedforward = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 llc_dbg_brakepid_error = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_llc_dbg_brakepid_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Llc_diag_brakecontrol_721::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Llc_diag_brakecontrol_721)
  GOOGLE_DCHECK_NE(&from, this);
  const Llc_diag_brakecontrol_721* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Llc_diag_brakecontrol_721>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Llc_diag_brakecontrol_721)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Llc_diag_brakecontrol_721)
    MergeFrom(*source);
  }
}

void Llc_diag_brakecontrol_721::MergeFrom(const Llc_diag_brakecontrol_721& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Llc_diag_brakecontrol_721)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      llc_dbg_brakepidcontribution_p_ = from.llc_dbg_brakepidcontribution_p_;
    }
    if (cached_has_bits & 0x00000002u) {
      llc_dbg_brakepidcontribution_i_ = from.llc_dbg_brakepidcontribution_i_;
    }
    if (cached_has_bits & 0x00000004u) {
      llc_dbg_brakepidcontribution_d_ = from.llc_dbg_brakepidcontribution_d_;
    }
    if (cached_has_bits & 0x00000008u) {
      llc_dbg_brakepid_output_ = from.llc_dbg_brakepid_output_;
    }
    if (cached_has_bits & 0x00000010u) {
      llc_dbg_brakefeedforward_ = from.llc_dbg_brakefeedforward_;
    }
    if (cached_has_bits & 0x00000020u) {
      llc_dbg_brakepid_error_ = from.llc_dbg_brakepid_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Llc_diag_brakecontrol_721::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Llc_diag_brakecontrol_721)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Llc_diag_brakecontrol_721::CopyFrom(const Llc_diag_brakecontrol_721& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Llc_diag_brakecontrol_721)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Llc_diag_brakecontrol_721::IsInitialized() const {
  return true;
}

void Llc_diag_brakecontrol_721::InternalSwap(Llc_diag_brakecontrol_721* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_dbg_brakepidcontribution_p_, other->llc_dbg_brakepidcontribution_p_);
  swap(llc_dbg_brakepidcontribution_i_, other->llc_dbg_brakepidcontribution_i_);
  swap(llc_dbg_brakepidcontribution_d_, other->llc_dbg_brakepidcontribution_d_);
  swap(llc_dbg_brakepid_output_, other->llc_dbg_brakepid_output_);
  swap(llc_dbg_brakefeedforward_, other->llc_dbg_brakefeedforward_);
  swap(llc_dbg_brakepid_error_, other->llc_dbg_brakepid_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Llc_diag_brakecontrol_721::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transit::InitAsDefaultInstance() {
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_vehiclelimits_24_ = const_cast< ::apollo::canbus::Llc_vehiclelimits_24*>(
      ::apollo::canbus::Llc_vehiclelimits_24::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->adc_motioncontrol1_10_ = const_cast< ::apollo::canbus::Adc_motioncontrol1_10*>(
      ::apollo::canbus::Adc_motioncontrol1_10::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->adc_motioncontrollimits1_12_ = const_cast< ::apollo::canbus::Adc_motioncontrollimits1_12*>(
      ::apollo::canbus::Adc_motioncontrollimits1_12::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_motionfeedback1_20_ = const_cast< ::apollo::canbus::Llc_motionfeedback1_20*>(
      ::apollo::canbus::Llc_motionfeedback1_20::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_motionfeedback2_21_ = const_cast< ::apollo::canbus::Llc_motionfeedback2_21*>(
      ::apollo::canbus::Llc_motionfeedback2_21::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_motioncommandfeedback1_22_ = const_cast< ::apollo::canbus::Llc_motioncommandfeedback1_22*>(
      ::apollo::canbus::Llc_motioncommandfeedback1_22::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_vehiclestatus_25_ = const_cast< ::apollo::canbus::Llc_vehiclestatus_25*>(
      ::apollo::canbus::Llc_vehiclestatus_25::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_auxiliaryfeedback_120_ = const_cast< ::apollo::canbus::Llc_auxiliaryfeedback_120*>(
      ::apollo::canbus::Llc_auxiliaryfeedback_120::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_diag_fault_620_ = const_cast< ::apollo::canbus::Llc_diag_fault_620*>(
      ::apollo::canbus::Llc_diag_fault_620::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_diag_steeringcontrol_722_ = const_cast< ::apollo::canbus::Llc_diag_steeringcontrol_722*>(
      ::apollo::canbus::Llc_diag_steeringcontrol_722::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->adc_auxiliarycontrol_110_ = const_cast< ::apollo::canbus::Adc_auxiliarycontrol_110*>(
      ::apollo::canbus::Adc_auxiliarycontrol_110::internal_default_instance());
  ::apollo::canbus::_Transit_default_instance_._instance.get_mutable()->llc_diag_brakecontrol_721_ = const_cast< ::apollo::canbus::Llc_diag_brakecontrol_721*>(
      ::apollo::canbus::Llc_diag_brakecontrol_721::internal_default_instance());
}
class Transit::_Internal {
 public:
  using HasBits = decltype(std::declval<Transit>()._has_bits_);
  static const ::apollo::canbus::Llc_vehiclelimits_24& llc_vehiclelimits_24(const Transit* msg);
  static void set_has_llc_vehiclelimits_24(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Adc_motioncontrol1_10& adc_motioncontrol1_10(const Transit* msg);
  static void set_has_adc_motioncontrol1_10(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Adc_motioncontrollimits1_12& adc_motioncontrollimits1_12(const Transit* msg);
  static void set_has_adc_motioncontrollimits1_12(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Llc_motionfeedback1_20& llc_motionfeedback1_20(const Transit* msg);
  static void set_has_llc_motionfeedback1_20(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Llc_motionfeedback2_21& llc_motionfeedback2_21(const Transit* msg);
  static void set_has_llc_motionfeedback2_21(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Llc_motioncommandfeedback1_22& llc_motioncommandfeedback1_22(const Transit* msg);
  static void set_has_llc_motioncommandfeedback1_22(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Llc_vehiclestatus_25& llc_vehiclestatus_25(const Transit* msg);
  static void set_has_llc_vehiclestatus_25(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Llc_auxiliaryfeedback_120& llc_auxiliaryfeedback_120(const Transit* msg);
  static void set_has_llc_auxiliaryfeedback_120(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Llc_diag_fault_620& llc_diag_fault_620(const Transit* msg);
  static void set_has_llc_diag_fault_620(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Llc_diag_steeringcontrol_722& llc_diag_steeringcontrol_722(const Transit* msg);
  static void set_has_llc_diag_steeringcontrol_722(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Adc_auxiliarycontrol_110& adc_auxiliarycontrol_110(const Transit* msg);
  static void set_has_adc_auxiliarycontrol_110(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Llc_diag_brakecontrol_721& llc_diag_brakecontrol_721(const Transit* msg);
  static void set_has_llc_diag_brakecontrol_721(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::apollo::canbus::Llc_vehiclelimits_24&
Transit::_Internal::llc_vehiclelimits_24(const Transit* msg) {
  return *msg->llc_vehiclelimits_24_;
}
const ::apollo::canbus::Adc_motioncontrol1_10&
Transit::_Internal::adc_motioncontrol1_10(const Transit* msg) {
  return *msg->adc_motioncontrol1_10_;
}
const ::apollo::canbus::Adc_motioncontrollimits1_12&
Transit::_Internal::adc_motioncontrollimits1_12(const Transit* msg) {
  return *msg->adc_motioncontrollimits1_12_;
}
const ::apollo::canbus::Llc_motionfeedback1_20&
Transit::_Internal::llc_motionfeedback1_20(const Transit* msg) {
  return *msg->llc_motionfeedback1_20_;
}
const ::apollo::canbus::Llc_motionfeedback2_21&
Transit::_Internal::llc_motionfeedback2_21(const Transit* msg) {
  return *msg->llc_motionfeedback2_21_;
}
const ::apollo::canbus::Llc_motioncommandfeedback1_22&
Transit::_Internal::llc_motioncommandfeedback1_22(const Transit* msg) {
  return *msg->llc_motioncommandfeedback1_22_;
}
const ::apollo::canbus::Llc_vehiclestatus_25&
Transit::_Internal::llc_vehiclestatus_25(const Transit* msg) {
  return *msg->llc_vehiclestatus_25_;
}
const ::apollo::canbus::Llc_auxiliaryfeedback_120&
Transit::_Internal::llc_auxiliaryfeedback_120(const Transit* msg) {
  return *msg->llc_auxiliaryfeedback_120_;
}
const ::apollo::canbus::Llc_diag_fault_620&
Transit::_Internal::llc_diag_fault_620(const Transit* msg) {
  return *msg->llc_diag_fault_620_;
}
const ::apollo::canbus::Llc_diag_steeringcontrol_722&
Transit::_Internal::llc_diag_steeringcontrol_722(const Transit* msg) {
  return *msg->llc_diag_steeringcontrol_722_;
}
const ::apollo::canbus::Adc_auxiliarycontrol_110&
Transit::_Internal::adc_auxiliarycontrol_110(const Transit* msg) {
  return *msg->adc_auxiliarycontrol_110_;
}
const ::apollo::canbus::Llc_diag_brakecontrol_721&
Transit::_Internal::llc_diag_brakecontrol_721(const Transit* msg) {
  return *msg->llc_diag_brakecontrol_721_;
}
Transit::Transit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Transit)
}
Transit::Transit(const Transit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_llc_vehiclelimits_24()) {
    llc_vehiclelimits_24_ = new ::apollo::canbus::Llc_vehiclelimits_24(*from.llc_vehiclelimits_24_);
  } else {
    llc_vehiclelimits_24_ = nullptr;
  }
  if (from._internal_has_adc_motioncontrol1_10()) {
    adc_motioncontrol1_10_ = new ::apollo::canbus::Adc_motioncontrol1_10(*from.adc_motioncontrol1_10_);
  } else {
    adc_motioncontrol1_10_ = nullptr;
  }
  if (from._internal_has_adc_motioncontrollimits1_12()) {
    adc_motioncontrollimits1_12_ = new ::apollo::canbus::Adc_motioncontrollimits1_12(*from.adc_motioncontrollimits1_12_);
  } else {
    adc_motioncontrollimits1_12_ = nullptr;
  }
  if (from._internal_has_llc_motionfeedback1_20()) {
    llc_motionfeedback1_20_ = new ::apollo::canbus::Llc_motionfeedback1_20(*from.llc_motionfeedback1_20_);
  } else {
    llc_motionfeedback1_20_ = nullptr;
  }
  if (from._internal_has_llc_motionfeedback2_21()) {
    llc_motionfeedback2_21_ = new ::apollo::canbus::Llc_motionfeedback2_21(*from.llc_motionfeedback2_21_);
  } else {
    llc_motionfeedback2_21_ = nullptr;
  }
  if (from._internal_has_llc_motioncommandfeedback1_22()) {
    llc_motioncommandfeedback1_22_ = new ::apollo::canbus::Llc_motioncommandfeedback1_22(*from.llc_motioncommandfeedback1_22_);
  } else {
    llc_motioncommandfeedback1_22_ = nullptr;
  }
  if (from._internal_has_llc_vehiclestatus_25()) {
    llc_vehiclestatus_25_ = new ::apollo::canbus::Llc_vehiclestatus_25(*from.llc_vehiclestatus_25_);
  } else {
    llc_vehiclestatus_25_ = nullptr;
  }
  if (from._internal_has_llc_auxiliaryfeedback_120()) {
    llc_auxiliaryfeedback_120_ = new ::apollo::canbus::Llc_auxiliaryfeedback_120(*from.llc_auxiliaryfeedback_120_);
  } else {
    llc_auxiliaryfeedback_120_ = nullptr;
  }
  if (from._internal_has_llc_diag_fault_620()) {
    llc_diag_fault_620_ = new ::apollo::canbus::Llc_diag_fault_620(*from.llc_diag_fault_620_);
  } else {
    llc_diag_fault_620_ = nullptr;
  }
  if (from._internal_has_llc_diag_steeringcontrol_722()) {
    llc_diag_steeringcontrol_722_ = new ::apollo::canbus::Llc_diag_steeringcontrol_722(*from.llc_diag_steeringcontrol_722_);
  } else {
    llc_diag_steeringcontrol_722_ = nullptr;
  }
  if (from._internal_has_adc_auxiliarycontrol_110()) {
    adc_auxiliarycontrol_110_ = new ::apollo::canbus::Adc_auxiliarycontrol_110(*from.adc_auxiliarycontrol_110_);
  } else {
    adc_auxiliarycontrol_110_ = nullptr;
  }
  if (from._internal_has_llc_diag_brakecontrol_721()) {
    llc_diag_brakecontrol_721_ = new ::apollo::canbus::Llc_diag_brakecontrol_721(*from.llc_diag_brakecontrol_721_);
  } else {
    llc_diag_brakecontrol_721_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Transit)
}

void Transit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transit_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  ::memset(&llc_vehiclelimits_24_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&llc_diag_brakecontrol_721_) -
      reinterpret_cast<char*>(&llc_vehiclelimits_24_)) + sizeof(llc_diag_brakecontrol_721_));
}

Transit::~Transit() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Transit)
  SharedDtor();
}

void Transit::SharedDtor() {
  if (this != internal_default_instance()) delete llc_vehiclelimits_24_;
  if (this != internal_default_instance()) delete adc_motioncontrol1_10_;
  if (this != internal_default_instance()) delete adc_motioncontrollimits1_12_;
  if (this != internal_default_instance()) delete llc_motionfeedback1_20_;
  if (this != internal_default_instance()) delete llc_motionfeedback2_21_;
  if (this != internal_default_instance()) delete llc_motioncommandfeedback1_22_;
  if (this != internal_default_instance()) delete llc_vehiclestatus_25_;
  if (this != internal_default_instance()) delete llc_auxiliaryfeedback_120_;
  if (this != internal_default_instance()) delete llc_diag_fault_620_;
  if (this != internal_default_instance()) delete llc_diag_steeringcontrol_722_;
  if (this != internal_default_instance()) delete adc_auxiliarycontrol_110_;
  if (this != internal_default_instance()) delete llc_diag_brakecontrol_721_;
}

void Transit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transit& Transit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transit_modules_2fcanbus_2fproto_2ftransit_2eproto.base);
  return *internal_default_instance();
}


void Transit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Transit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(llc_vehiclelimits_24_ != nullptr);
      llc_vehiclelimits_24_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(adc_motioncontrol1_10_ != nullptr);
      adc_motioncontrol1_10_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(adc_motioncontrollimits1_12_ != nullptr);
      adc_motioncontrollimits1_12_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(llc_motionfeedback1_20_ != nullptr);
      llc_motionfeedback1_20_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(llc_motionfeedback2_21_ != nullptr);
      llc_motionfeedback2_21_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(llc_motioncommandfeedback1_22_ != nullptr);
      llc_motioncommandfeedback1_22_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(llc_vehiclestatus_25_ != nullptr);
      llc_vehiclestatus_25_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(llc_auxiliaryfeedback_120_ != nullptr);
      llc_auxiliaryfeedback_120_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(llc_diag_fault_620_ != nullptr);
      llc_diag_fault_620_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(llc_diag_steeringcontrol_722_ != nullptr);
      llc_diag_steeringcontrol_722_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(adc_auxiliarycontrol_110_ != nullptr);
      adc_auxiliarycontrol_110_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(llc_diag_brakecontrol_721_ != nullptr);
      llc_diag_brakecontrol_721_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Transit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Llc_vehiclelimits_24 llc_vehiclelimits_24 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_vehiclelimits_24(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Adc_motioncontrol1_10 adc_motioncontrol1_10 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_adc_motioncontrol1_10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Adc_motioncontrollimits1_12 adc_motioncontrollimits1_12 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_adc_motioncontrollimits1_12(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_motionfeedback1_20 llc_motionfeedback1_20 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_motionfeedback1_20(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_motionfeedback2_21 llc_motionfeedback2_21 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_motionfeedback2_21(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_motioncommandfeedback1_22 llc_motioncommandfeedback1_22 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_motioncommandfeedback1_22(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_vehiclestatus_25 llc_vehiclestatus_25 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_vehiclestatus_25(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_auxiliaryfeedback_120 llc_auxiliaryfeedback_120 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_auxiliaryfeedback_120(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_diag_fault_620 llc_diag_fault_620 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_diag_fault_620(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_diag_steeringcontrol_722 llc_diag_steeringcontrol_722 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_diag_steeringcontrol_722(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Adc_auxiliarycontrol_110 adc_auxiliarycontrol_110 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_adc_auxiliarycontrol_110(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Llc_diag_brakecontrol_721 llc_diag_brakecontrol_721 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_llc_diag_brakecontrol_721(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Transit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Llc_vehiclelimits_24 llc_vehiclelimits_24 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::llc_vehiclelimits_24(this), target, stream);
  }

  // optional .apollo.canbus.Adc_motioncontrol1_10 adc_motioncontrol1_10 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::adc_motioncontrol1_10(this), target, stream);
  }

  // optional .apollo.canbus.Adc_motioncontrollimits1_12 adc_motioncontrollimits1_12 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::adc_motioncontrollimits1_12(this), target, stream);
  }

  // optional .apollo.canbus.Llc_motionfeedback1_20 llc_motionfeedback1_20 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::llc_motionfeedback1_20(this), target, stream);
  }

  // optional .apollo.canbus.Llc_motionfeedback2_21 llc_motionfeedback2_21 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::llc_motionfeedback2_21(this), target, stream);
  }

  // optional .apollo.canbus.Llc_motioncommandfeedback1_22 llc_motioncommandfeedback1_22 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::llc_motioncommandfeedback1_22(this), target, stream);
  }

  // optional .apollo.canbus.Llc_vehiclestatus_25 llc_vehiclestatus_25 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::llc_vehiclestatus_25(this), target, stream);
  }

  // optional .apollo.canbus.Llc_auxiliaryfeedback_120 llc_auxiliaryfeedback_120 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::llc_auxiliaryfeedback_120(this), target, stream);
  }

  // optional .apollo.canbus.Llc_diag_fault_620 llc_diag_fault_620 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::llc_diag_fault_620(this), target, stream);
  }

  // optional .apollo.canbus.Llc_diag_steeringcontrol_722 llc_diag_steeringcontrol_722 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::llc_diag_steeringcontrol_722(this), target, stream);
  }

  // optional .apollo.canbus.Adc_auxiliarycontrol_110 adc_auxiliarycontrol_110 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::adc_auxiliarycontrol_110(this), target, stream);
  }

  // optional .apollo.canbus.Llc_diag_brakecontrol_721 llc_diag_brakecontrol_721 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::llc_diag_brakecontrol_721(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Transit)
  return target;
}

size_t Transit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Transit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Llc_vehiclelimits_24 llc_vehiclelimits_24 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_vehiclelimits_24_);
    }

    // optional .apollo.canbus.Adc_motioncontrol1_10 adc_motioncontrol1_10 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adc_motioncontrol1_10_);
    }

    // optional .apollo.canbus.Adc_motioncontrollimits1_12 adc_motioncontrollimits1_12 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adc_motioncontrollimits1_12_);
    }

    // optional .apollo.canbus.Llc_motionfeedback1_20 llc_motionfeedback1_20 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_motionfeedback1_20_);
    }

    // optional .apollo.canbus.Llc_motionfeedback2_21 llc_motionfeedback2_21 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_motionfeedback2_21_);
    }

    // optional .apollo.canbus.Llc_motioncommandfeedback1_22 llc_motioncommandfeedback1_22 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_motioncommandfeedback1_22_);
    }

    // optional .apollo.canbus.Llc_vehiclestatus_25 llc_vehiclestatus_25 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_vehiclestatus_25_);
    }

    // optional .apollo.canbus.Llc_auxiliaryfeedback_120 llc_auxiliaryfeedback_120 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_auxiliaryfeedback_120_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .apollo.canbus.Llc_diag_fault_620 llc_diag_fault_620 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_diag_fault_620_);
    }

    // optional .apollo.canbus.Llc_diag_steeringcontrol_722 llc_diag_steeringcontrol_722 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_diag_steeringcontrol_722_);
    }

    // optional .apollo.canbus.Adc_auxiliarycontrol_110 adc_auxiliarycontrol_110 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adc_auxiliarycontrol_110_);
    }

    // optional .apollo.canbus.Llc_diag_brakecontrol_721 llc_diag_brakecontrol_721 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *llc_diag_brakecontrol_721_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Transit)
  GOOGLE_DCHECK_NE(&from, this);
  const Transit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Transit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Transit)
    MergeFrom(*source);
  }
}

void Transit::MergeFrom(const Transit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Transit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_llc_vehiclelimits_24()->::apollo::canbus::Llc_vehiclelimits_24::MergeFrom(from._internal_llc_vehiclelimits_24());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_adc_motioncontrol1_10()->::apollo::canbus::Adc_motioncontrol1_10::MergeFrom(from._internal_adc_motioncontrol1_10());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_adc_motioncontrollimits1_12()->::apollo::canbus::Adc_motioncontrollimits1_12::MergeFrom(from._internal_adc_motioncontrollimits1_12());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_llc_motionfeedback1_20()->::apollo::canbus::Llc_motionfeedback1_20::MergeFrom(from._internal_llc_motionfeedback1_20());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_llc_motionfeedback2_21()->::apollo::canbus::Llc_motionfeedback2_21::MergeFrom(from._internal_llc_motionfeedback2_21());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_llc_motioncommandfeedback1_22()->::apollo::canbus::Llc_motioncommandfeedback1_22::MergeFrom(from._internal_llc_motioncommandfeedback1_22());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_llc_vehiclestatus_25()->::apollo::canbus::Llc_vehiclestatus_25::MergeFrom(from._internal_llc_vehiclestatus_25());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_llc_auxiliaryfeedback_120()->::apollo::canbus::Llc_auxiliaryfeedback_120::MergeFrom(from._internal_llc_auxiliaryfeedback_120());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_llc_diag_fault_620()->::apollo::canbus::Llc_diag_fault_620::MergeFrom(from._internal_llc_diag_fault_620());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_llc_diag_steeringcontrol_722()->::apollo::canbus::Llc_diag_steeringcontrol_722::MergeFrom(from._internal_llc_diag_steeringcontrol_722());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_adc_auxiliarycontrol_110()->::apollo::canbus::Adc_auxiliarycontrol_110::MergeFrom(from._internal_adc_auxiliarycontrol_110());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_llc_diag_brakecontrol_721()->::apollo::canbus::Llc_diag_brakecontrol_721::MergeFrom(from._internal_llc_diag_brakecontrol_721());
    }
  }
}

void Transit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Transit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transit::CopyFrom(const Transit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Transit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transit::IsInitialized() const {
  return true;
}

void Transit::InternalSwap(Transit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(llc_vehiclelimits_24_, other->llc_vehiclelimits_24_);
  swap(adc_motioncontrol1_10_, other->adc_motioncontrol1_10_);
  swap(adc_motioncontrollimits1_12_, other->adc_motioncontrollimits1_12_);
  swap(llc_motionfeedback1_20_, other->llc_motionfeedback1_20_);
  swap(llc_motionfeedback2_21_, other->llc_motionfeedback2_21_);
  swap(llc_motioncommandfeedback1_22_, other->llc_motioncommandfeedback1_22_);
  swap(llc_vehiclestatus_25_, other->llc_vehiclestatus_25_);
  swap(llc_auxiliaryfeedback_120_, other->llc_auxiliaryfeedback_120_);
  swap(llc_diag_fault_620_, other->llc_diag_fault_620_);
  swap(llc_diag_steeringcontrol_722_, other->llc_diag_steeringcontrol_722_);
  swap(adc_auxiliarycontrol_110_, other->adc_auxiliarycontrol_110_);
  swap(llc_diag_brakecontrol_721_, other->llc_diag_brakecontrol_721_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transit::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_vehiclelimits_24* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_vehiclelimits_24 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_vehiclelimits_24 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Adc_motioncontrol1_10* Arena::CreateMaybeMessage< ::apollo::canbus::Adc_motioncontrol1_10 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Adc_motioncontrol1_10 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Adc_motioncontrollimits1_12* Arena::CreateMaybeMessage< ::apollo::canbus::Adc_motioncontrollimits1_12 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Adc_motioncontrollimits1_12 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_motionfeedback1_20* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_motionfeedback1_20 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_motionfeedback1_20 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_motionfeedback2_21* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_motionfeedback2_21 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_motionfeedback2_21 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_motioncommandfeedback1_22* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_motioncommandfeedback1_22 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_motioncommandfeedback1_22 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_vehiclestatus_25* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_vehiclestatus_25 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_vehiclestatus_25 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_auxiliaryfeedback_120* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_auxiliaryfeedback_120 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_auxiliaryfeedback_120 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_diag_fault_620* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_diag_fault_620 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_diag_fault_620 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_diag_steeringcontrol_722* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_diag_steeringcontrol_722 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_diag_steeringcontrol_722 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Adc_auxiliarycontrol_110* Arena::CreateMaybeMessage< ::apollo::canbus::Adc_auxiliarycontrol_110 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Adc_auxiliarycontrol_110 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Llc_diag_brakecontrol_721* Arena::CreateMaybeMessage< ::apollo::canbus::Llc_diag_brakecontrol_721 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Llc_diag_brakecontrol_721 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Transit* Arena::CreateMaybeMessage< ::apollo::canbus::Transit >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Transit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
