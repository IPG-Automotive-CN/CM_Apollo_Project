// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/lexus.proto

#include "modules/canbus/proto/lexus.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_aux_rpt_300_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_cmd_100_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_rpt_200_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_aux_rpt_304_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_cmd_104_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_1_401_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_2_402_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_3_403_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_rpt_204_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Component_rpt_20_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cruise_control_buttons_cmd_108_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cruise_control_buttons_rpt_208_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dash_controls_left_cmd_10c_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dash_controls_left_rpt_20c_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dash_controls_right_cmd_110_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dash_controls_right_rpt_210_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_time_rpt_40f_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Detected_object_rpt_411_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Door_rpt_417_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Global_rpt_10_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hazard_lights_cmd_114_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hazard_lights_rpt_214_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_aux_rpt_318_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_cmd_118_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_rpt_218_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Horn_cmd_11c_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Horn_rpt_21c_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Interior_lights_rpt_416_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lat_lon_heading_rpt_40e_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Media_controls_cmd_120_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Media_controls_rpt_220_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Occupancy_rpt_415_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parking_brake_cmd_124_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parking_brake_rpt_224_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rear_lights_rpt_418_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_aux_rpt_328_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_cmd_128_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_rpt_228_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_aux_rpt_32c_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_cmd_12c_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_1_404_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_2_405_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_3_406_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_rpt_22c_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_aux_rpt_330_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_cmd_130_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_rpt_230_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Veh_dynamics_rpt_413_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Veh_specific_rpt_1_412_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_speed_rpt_400_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vin_rpt_414_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wheel_speed_rpt_407_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_aux_rpt_334_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_cmd_134_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_rpt_234_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Yaw_rate_rpt_40d_modules_2fcanbus_2fproto_2flexus_2eproto;
namespace apollo {
namespace canbus {
class Hazard_lights_rpt_214DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hazard_lights_rpt_214> _instance;
} _Hazard_lights_rpt_214_default_instance_;
class Steering_cmd_12cDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_cmd_12c> _instance;
} _Steering_cmd_12c_default_instance_;
class Dash_controls_right_rpt_210DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dash_controls_right_rpt_210> _instance;
} _Dash_controls_right_rpt_210_default_instance_;
class Dash_controls_left_cmd_10cDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dash_controls_left_cmd_10c> _instance;
} _Dash_controls_left_cmd_10c_default_instance_;
class Steering_rpt_22cDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_rpt_22c> _instance;
} _Steering_rpt_22c_default_instance_;
class Turn_aux_rpt_330DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Turn_aux_rpt_330> _instance;
} _Turn_aux_rpt_330_default_instance_;
class Headlight_rpt_218DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Headlight_rpt_218> _instance;
} _Headlight_rpt_218_default_instance_;
class Hazard_lights_cmd_114DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hazard_lights_cmd_114> _instance;
} _Hazard_lights_cmd_114_default_instance_;
class Dash_controls_left_rpt_20cDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dash_controls_left_rpt_20c> _instance;
} _Dash_controls_left_rpt_20c_default_instance_;
class Headlight_aux_rpt_318DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Headlight_aux_rpt_318> _instance;
} _Headlight_aux_rpt_318_default_instance_;
class Dash_controls_right_cmd_110DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dash_controls_right_cmd_110> _instance;
} _Dash_controls_right_cmd_110_default_instance_;
class Wiper_cmd_134DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wiper_cmd_134> _instance;
} _Wiper_cmd_134_default_instance_;
class Wiper_rpt_234DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wiper_rpt_234> _instance;
} _Wiper_rpt_234_default_instance_;
class Turn_rpt_230DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Turn_rpt_230> _instance;
} _Turn_rpt_230_default_instance_;
class Headlight_cmd_118DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Headlight_cmd_118> _instance;
} _Headlight_cmd_118_default_instance_;
class Door_rpt_417DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Door_rpt_417> _instance;
} _Door_rpt_417_default_instance_;
class Component_rpt_20DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Component_rpt_20> _instance;
} _Component_rpt_20_default_instance_;
class Wheel_speed_rpt_407DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wheel_speed_rpt_407> _instance;
} _Wheel_speed_rpt_407_default_instance_;
class Steering_motor_rpt_3_406DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_motor_rpt_3_406> _instance;
} _Steering_motor_rpt_3_406_default_instance_;
class Steering_motor_rpt_2_405DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_motor_rpt_2_405> _instance;
} _Steering_motor_rpt_2_405_default_instance_;
class Steering_motor_rpt_1_404DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_motor_rpt_1_404> _instance;
} _Steering_motor_rpt_1_404_default_instance_;
class Brake_motor_rpt_3_403DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_motor_rpt_3_403> _instance;
} _Brake_motor_rpt_3_403_default_instance_;
class Brake_motor_rpt_2_402DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_motor_rpt_2_402> _instance;
} _Brake_motor_rpt_2_402_default_instance_;
class Brake_motor_rpt_1_401DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_motor_rpt_1_401> _instance;
} _Brake_motor_rpt_1_401_default_instance_;
class Wiper_aux_rpt_334DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wiper_aux_rpt_334> _instance;
} _Wiper_aux_rpt_334_default_instance_;
class Shift_aux_rpt_328DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shift_aux_rpt_328> _instance;
} _Shift_aux_rpt_328_default_instance_;
class Accel_rpt_200DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accel_rpt_200> _instance;
} _Accel_rpt_200_default_instance_;
class Brake_rpt_204DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_rpt_204> _instance;
} _Brake_rpt_204_default_instance_;
class Horn_cmd_11cDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Horn_cmd_11c> _instance;
} _Horn_cmd_11c_default_instance_;
class Global_rpt_10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Global_rpt_10> _instance;
} _Global_rpt_10_default_instance_;
class Accel_aux_rpt_300DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accel_aux_rpt_300> _instance;
} _Accel_aux_rpt_300_default_instance_;
class Cruise_control_buttons_rpt_208DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cruise_control_buttons_rpt_208> _instance;
} _Cruise_control_buttons_rpt_208_default_instance_;
class Vehicle_speed_rpt_400DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_speed_rpt_400> _instance;
} _Vehicle_speed_rpt_400_default_instance_;
class Brake_aux_rpt_304DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_aux_rpt_304> _instance;
} _Brake_aux_rpt_304_default_instance_;
class Media_controls_cmd_120DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Media_controls_cmd_120> _instance;
} _Media_controls_cmd_120_default_instance_;
class Cruise_control_buttons_cmd_108DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cruise_control_buttons_cmd_108> _instance;
} _Cruise_control_buttons_cmd_108_default_instance_;
class Parking_brake_cmd_124DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Parking_brake_cmd_124> _instance;
} _Parking_brake_cmd_124_default_instance_;
class Horn_rpt_21cDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Horn_rpt_21c> _instance;
} _Horn_rpt_21c_default_instance_;
class Shift_rpt_228DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shift_rpt_228> _instance;
} _Shift_rpt_228_default_instance_;
class Shift_cmd_128DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shift_cmd_128> _instance;
} _Shift_cmd_128_default_instance_;
class Accel_cmd_100DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accel_cmd_100> _instance;
} _Accel_cmd_100_default_instance_;
class Parking_brake_rpt_224DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Parking_brake_rpt_224> _instance;
} _Parking_brake_rpt_224_default_instance_;
class Brake_cmd_104DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_cmd_104> _instance;
} _Brake_cmd_104_default_instance_;
class Media_controls_rpt_220DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Media_controls_rpt_220> _instance;
} _Media_controls_rpt_220_default_instance_;
class Steering_aux_rpt_32cDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_aux_rpt_32c> _instance;
} _Steering_aux_rpt_32c_default_instance_;
class Lat_lon_heading_rpt_40eDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lat_lon_heading_rpt_40e> _instance;
} _Lat_lon_heading_rpt_40e_default_instance_;
class Yaw_rate_rpt_40dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Yaw_rate_rpt_40d> _instance;
} _Yaw_rate_rpt_40d_default_instance_;
class Date_time_rpt_40fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Date_time_rpt_40f> _instance;
} _Date_time_rpt_40f_default_instance_;
class Vin_rpt_414DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vin_rpt_414> _instance;
} _Vin_rpt_414_default_instance_;
class Occupancy_rpt_415DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Occupancy_rpt_415> _instance;
} _Occupancy_rpt_415_default_instance_;
class Interior_lights_rpt_416DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Interior_lights_rpt_416> _instance;
} _Interior_lights_rpt_416_default_instance_;
class Turn_cmd_130DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Turn_cmd_130> _instance;
} _Turn_cmd_130_default_instance_;
class Detected_object_rpt_411DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Detected_object_rpt_411> _instance;
} _Detected_object_rpt_411_default_instance_;
class Veh_specific_rpt_1_412DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Veh_specific_rpt_1_412> _instance;
} _Veh_specific_rpt_1_412_default_instance_;
class Veh_dynamics_rpt_413DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Veh_dynamics_rpt_413> _instance;
} _Veh_dynamics_rpt_413_default_instance_;
class Rear_lights_rpt_418DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rear_lights_rpt_418> _instance;
} _Rear_lights_rpt_418_default_instance_;
class LexusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lexus> _instance;
} _Lexus_default_instance_;
}  // namespace canbus
}  // namespace apollo
static void InitDefaultsscc_info_Accel_aux_rpt_300_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Accel_aux_rpt_300_default_instance_;
    new (ptr) ::apollo::canbus::Accel_aux_rpt_300();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Accel_aux_rpt_300::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_aux_rpt_300_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Accel_aux_rpt_300_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Accel_cmd_100_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Accel_cmd_100_default_instance_;
    new (ptr) ::apollo::canbus::Accel_cmd_100();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Accel_cmd_100::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_cmd_100_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Accel_cmd_100_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Accel_rpt_200_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Accel_rpt_200_default_instance_;
    new (ptr) ::apollo::canbus::Accel_rpt_200();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Accel_rpt_200::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_rpt_200_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Accel_rpt_200_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Brake_aux_rpt_304_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_aux_rpt_304_default_instance_;
    new (ptr) ::apollo::canbus::Brake_aux_rpt_304();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_aux_rpt_304::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_aux_rpt_304_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_aux_rpt_304_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Brake_cmd_104_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_cmd_104_default_instance_;
    new (ptr) ::apollo::canbus::Brake_cmd_104();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_cmd_104::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_cmd_104_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_cmd_104_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Brake_motor_rpt_1_401_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_1_401_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_1_401();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_1_401::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_1_401_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_motor_rpt_1_401_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Brake_motor_rpt_2_402_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_2_402_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_2_402();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_2_402::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_2_402_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_motor_rpt_2_402_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Brake_motor_rpt_3_403_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_3_403_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_3_403();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_3_403::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_3_403_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_motor_rpt_3_403_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Brake_rpt_204_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_rpt_204_default_instance_;
    new (ptr) ::apollo::canbus::Brake_rpt_204();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_rpt_204::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_rpt_204_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_rpt_204_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Component_rpt_20_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Component_rpt_20_default_instance_;
    new (ptr) ::apollo::canbus::Component_rpt_20();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Component_rpt_20::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Component_rpt_20_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Component_rpt_20_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Cruise_control_buttons_cmd_108_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Cruise_control_buttons_cmd_108_default_instance_;
    new (ptr) ::apollo::canbus::Cruise_control_buttons_cmd_108();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Cruise_control_buttons_cmd_108::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cruise_control_buttons_cmd_108_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cruise_control_buttons_cmd_108_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Cruise_control_buttons_rpt_208_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Cruise_control_buttons_rpt_208_default_instance_;
    new (ptr) ::apollo::canbus::Cruise_control_buttons_rpt_208();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Cruise_control_buttons_rpt_208::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cruise_control_buttons_rpt_208_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cruise_control_buttons_rpt_208_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Dash_controls_left_cmd_10c_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Dash_controls_left_cmd_10c_default_instance_;
    new (ptr) ::apollo::canbus::Dash_controls_left_cmd_10c();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Dash_controls_left_cmd_10c::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dash_controls_left_cmd_10c_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dash_controls_left_cmd_10c_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Dash_controls_left_rpt_20c_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Dash_controls_left_rpt_20c_default_instance_;
    new (ptr) ::apollo::canbus::Dash_controls_left_rpt_20c();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Dash_controls_left_rpt_20c::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dash_controls_left_rpt_20c_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dash_controls_left_rpt_20c_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Dash_controls_right_cmd_110_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Dash_controls_right_cmd_110_default_instance_;
    new (ptr) ::apollo::canbus::Dash_controls_right_cmd_110();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Dash_controls_right_cmd_110::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dash_controls_right_cmd_110_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dash_controls_right_cmd_110_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Dash_controls_right_rpt_210_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Dash_controls_right_rpt_210_default_instance_;
    new (ptr) ::apollo::canbus::Dash_controls_right_rpt_210();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Dash_controls_right_rpt_210::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dash_controls_right_rpt_210_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dash_controls_right_rpt_210_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Date_time_rpt_40f_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Date_time_rpt_40f_default_instance_;
    new (ptr) ::apollo::canbus::Date_time_rpt_40f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Date_time_rpt_40f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_time_rpt_40f_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Date_time_rpt_40f_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Detected_object_rpt_411_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Detected_object_rpt_411_default_instance_;
    new (ptr) ::apollo::canbus::Detected_object_rpt_411();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Detected_object_rpt_411::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Detected_object_rpt_411_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Detected_object_rpt_411_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Door_rpt_417_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Door_rpt_417_default_instance_;
    new (ptr) ::apollo::canbus::Door_rpt_417();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Door_rpt_417::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Door_rpt_417_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Door_rpt_417_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Global_rpt_10_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Global_rpt_10_default_instance_;
    new (ptr) ::apollo::canbus::Global_rpt_10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Global_rpt_10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Global_rpt_10_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Global_rpt_10_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Hazard_lights_cmd_114_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Hazard_lights_cmd_114_default_instance_;
    new (ptr) ::apollo::canbus::Hazard_lights_cmd_114();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Hazard_lights_cmd_114::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hazard_lights_cmd_114_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hazard_lights_cmd_114_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Hazard_lights_rpt_214_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Hazard_lights_rpt_214_default_instance_;
    new (ptr) ::apollo::canbus::Hazard_lights_rpt_214();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Hazard_lights_rpt_214::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hazard_lights_rpt_214_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hazard_lights_rpt_214_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Headlight_aux_rpt_318_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Headlight_aux_rpt_318_default_instance_;
    new (ptr) ::apollo::canbus::Headlight_aux_rpt_318();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Headlight_aux_rpt_318::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_aux_rpt_318_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Headlight_aux_rpt_318_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Headlight_cmd_118_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Headlight_cmd_118_default_instance_;
    new (ptr) ::apollo::canbus::Headlight_cmd_118();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Headlight_cmd_118::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_cmd_118_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Headlight_cmd_118_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Headlight_rpt_218_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Headlight_rpt_218_default_instance_;
    new (ptr) ::apollo::canbus::Headlight_rpt_218();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Headlight_rpt_218::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_rpt_218_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Headlight_rpt_218_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Horn_cmd_11c_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Horn_cmd_11c_default_instance_;
    new (ptr) ::apollo::canbus::Horn_cmd_11c();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Horn_cmd_11c::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Horn_cmd_11c_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Horn_cmd_11c_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Horn_rpt_21c_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Horn_rpt_21c_default_instance_;
    new (ptr) ::apollo::canbus::Horn_rpt_21c();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Horn_rpt_21c::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Horn_rpt_21c_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Horn_rpt_21c_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Interior_lights_rpt_416_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Interior_lights_rpt_416_default_instance_;
    new (ptr) ::apollo::canbus::Interior_lights_rpt_416();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Interior_lights_rpt_416::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Interior_lights_rpt_416_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Interior_lights_rpt_416_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Lat_lon_heading_rpt_40e_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Lat_lon_heading_rpt_40e_default_instance_;
    new (ptr) ::apollo::canbus::Lat_lon_heading_rpt_40e();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Lat_lon_heading_rpt_40e::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lat_lon_heading_rpt_40e_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Lat_lon_heading_rpt_40e_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Lexus_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Lexus_default_instance_;
    new (ptr) ::apollo::canbus::Lexus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Lexus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<56> scc_info_Lexus_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 56, 0, InitDefaultsscc_info_Lexus_modules_2fcanbus_2fproto_2flexus_2eproto}, {
      &scc_info_Hazard_lights_rpt_214_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Steering_cmd_12c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Dash_controls_right_rpt_210_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Dash_controls_left_cmd_10c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Steering_rpt_22c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Turn_aux_rpt_330_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Headlight_rpt_218_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Hazard_lights_cmd_114_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Dash_controls_left_rpt_20c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Headlight_aux_rpt_318_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Dash_controls_right_cmd_110_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Wiper_cmd_134_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Wiper_rpt_234_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Turn_rpt_230_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Headlight_cmd_118_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Door_rpt_417_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Component_rpt_20_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Wheel_speed_rpt_407_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Steering_motor_rpt_3_406_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Steering_motor_rpt_2_405_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Steering_motor_rpt_1_404_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Brake_motor_rpt_3_403_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Brake_motor_rpt_2_402_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Brake_motor_rpt_1_401_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Wiper_aux_rpt_334_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Shift_aux_rpt_328_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Accel_rpt_200_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Brake_rpt_204_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Horn_cmd_11c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Global_rpt_10_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Accel_aux_rpt_300_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Cruise_control_buttons_rpt_208_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Vehicle_speed_rpt_400_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Brake_aux_rpt_304_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Media_controls_cmd_120_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Cruise_control_buttons_cmd_108_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Parking_brake_cmd_124_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Horn_rpt_21c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Shift_rpt_228_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Shift_cmd_128_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Accel_cmd_100_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Parking_brake_rpt_224_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Brake_cmd_104_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Media_controls_rpt_220_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Steering_aux_rpt_32c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Lat_lon_heading_rpt_40e_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Yaw_rate_rpt_40d_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Date_time_rpt_40f_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Vin_rpt_414_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Occupancy_rpt_415_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Interior_lights_rpt_416_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Turn_cmd_130_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Detected_object_rpt_411_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Veh_specific_rpt_1_412_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Veh_dynamics_rpt_413_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Rear_lights_rpt_418_modules_2fcanbus_2fproto_2flexus_2eproto.base,}};

static void InitDefaultsscc_info_Media_controls_cmd_120_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Media_controls_cmd_120_default_instance_;
    new (ptr) ::apollo::canbus::Media_controls_cmd_120();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Media_controls_cmd_120::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Media_controls_cmd_120_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Media_controls_cmd_120_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Media_controls_rpt_220_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Media_controls_rpt_220_default_instance_;
    new (ptr) ::apollo::canbus::Media_controls_rpt_220();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Media_controls_rpt_220::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Media_controls_rpt_220_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Media_controls_rpt_220_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Occupancy_rpt_415_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Occupancy_rpt_415_default_instance_;
    new (ptr) ::apollo::canbus::Occupancy_rpt_415();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Occupancy_rpt_415::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Occupancy_rpt_415_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Occupancy_rpt_415_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Parking_brake_cmd_124_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Parking_brake_cmd_124_default_instance_;
    new (ptr) ::apollo::canbus::Parking_brake_cmd_124();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Parking_brake_cmd_124::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parking_brake_cmd_124_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Parking_brake_cmd_124_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Parking_brake_rpt_224_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Parking_brake_rpt_224_default_instance_;
    new (ptr) ::apollo::canbus::Parking_brake_rpt_224();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Parking_brake_rpt_224::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parking_brake_rpt_224_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Parking_brake_rpt_224_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Rear_lights_rpt_418_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Rear_lights_rpt_418_default_instance_;
    new (ptr) ::apollo::canbus::Rear_lights_rpt_418();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Rear_lights_rpt_418::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rear_lights_rpt_418_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rear_lights_rpt_418_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Shift_aux_rpt_328_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Shift_aux_rpt_328_default_instance_;
    new (ptr) ::apollo::canbus::Shift_aux_rpt_328();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Shift_aux_rpt_328::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_aux_rpt_328_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shift_aux_rpt_328_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Shift_cmd_128_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Shift_cmd_128_default_instance_;
    new (ptr) ::apollo::canbus::Shift_cmd_128();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Shift_cmd_128::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_cmd_128_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shift_cmd_128_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Shift_rpt_228_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Shift_rpt_228_default_instance_;
    new (ptr) ::apollo::canbus::Shift_rpt_228();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Shift_rpt_228::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_rpt_228_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shift_rpt_228_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Steering_aux_rpt_32c_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_aux_rpt_32c_default_instance_;
    new (ptr) ::apollo::canbus::Steering_aux_rpt_32c();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_aux_rpt_32c::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_aux_rpt_32c_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_aux_rpt_32c_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Steering_cmd_12c_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_cmd_12c_default_instance_;
    new (ptr) ::apollo::canbus::Steering_cmd_12c();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_cmd_12c::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_cmd_12c_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_cmd_12c_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Steering_motor_rpt_1_404_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_1_404_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_1_404();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_1_404::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_1_404_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_motor_rpt_1_404_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Steering_motor_rpt_2_405_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_2_405_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_2_405();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_2_405::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_2_405_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_motor_rpt_2_405_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Steering_motor_rpt_3_406_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_3_406_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_3_406();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_3_406::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_3_406_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_motor_rpt_3_406_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Steering_rpt_22c_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_rpt_22c_default_instance_;
    new (ptr) ::apollo::canbus::Steering_rpt_22c();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_rpt_22c::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_rpt_22c_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_rpt_22c_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Turn_aux_rpt_330_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turn_aux_rpt_330_default_instance_;
    new (ptr) ::apollo::canbus::Turn_aux_rpt_330();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turn_aux_rpt_330::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_aux_rpt_330_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Turn_aux_rpt_330_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Turn_cmd_130_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turn_cmd_130_default_instance_;
    new (ptr) ::apollo::canbus::Turn_cmd_130();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turn_cmd_130::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_cmd_130_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Turn_cmd_130_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Turn_rpt_230_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turn_rpt_230_default_instance_;
    new (ptr) ::apollo::canbus::Turn_rpt_230();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turn_rpt_230::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_rpt_230_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Turn_rpt_230_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Veh_dynamics_rpt_413_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Veh_dynamics_rpt_413_default_instance_;
    new (ptr) ::apollo::canbus::Veh_dynamics_rpt_413();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Veh_dynamics_rpt_413::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Veh_dynamics_rpt_413_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Veh_dynamics_rpt_413_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Veh_specific_rpt_1_412_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Veh_specific_rpt_1_412_default_instance_;
    new (ptr) ::apollo::canbus::Veh_specific_rpt_1_412();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Veh_specific_rpt_1_412::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Veh_specific_rpt_1_412_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Veh_specific_rpt_1_412_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle_speed_rpt_400_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Vehicle_speed_rpt_400_default_instance_;
    new (ptr) ::apollo::canbus::Vehicle_speed_rpt_400();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Vehicle_speed_rpt_400::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_speed_rpt_400_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle_speed_rpt_400_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Vin_rpt_414_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Vin_rpt_414_default_instance_;
    new (ptr) ::apollo::canbus::Vin_rpt_414();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Vin_rpt_414::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vin_rpt_414_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vin_rpt_414_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Wheel_speed_rpt_407_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wheel_speed_rpt_407_default_instance_;
    new (ptr) ::apollo::canbus::Wheel_speed_rpt_407();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wheel_speed_rpt_407::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wheel_speed_rpt_407_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wheel_speed_rpt_407_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Wiper_aux_rpt_334_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wiper_aux_rpt_334_default_instance_;
    new (ptr) ::apollo::canbus::Wiper_aux_rpt_334();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wiper_aux_rpt_334::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_aux_rpt_334_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wiper_aux_rpt_334_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Wiper_cmd_134_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wiper_cmd_134_default_instance_;
    new (ptr) ::apollo::canbus::Wiper_cmd_134();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wiper_cmd_134::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_cmd_134_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wiper_cmd_134_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Wiper_rpt_234_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wiper_rpt_234_default_instance_;
    new (ptr) ::apollo::canbus::Wiper_rpt_234();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wiper_rpt_234::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_rpt_234_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wiper_rpt_234_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static void InitDefaultsscc_info_Yaw_rate_rpt_40d_modules_2fcanbus_2fproto_2flexus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Yaw_rate_rpt_40d_default_instance_;
    new (ptr) ::apollo::canbus::Yaw_rate_rpt_40d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Yaw_rate_rpt_40d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Yaw_rate_rpt_40d_modules_2fcanbus_2fproto_2flexus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Yaw_rate_rpt_40d_modules_2fcanbus_2fproto_2flexus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto[57];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[44];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_rpt_214, command_output_fault_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_12c, rotation_rate_),
  2,
  3,
  4,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_rpt_210, manual_input_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_cmd_10c, dash_controls_button_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_22c, output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, pass_blinker_bulb_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, pass_blinker_bulb_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, driver_blinker_bulb_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_aux_rpt_330, driver_blinker_bulb_on_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_218, commanded_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, hazard_lights_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Hazard_lights_cmd_114, clear_faults_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_left_rpt_20c, command_output_fault_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, headlights_mode_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, headlights_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, fog_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, fog_lights_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, headlights_on_bright_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, headlights_on_bright_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, headlights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_aux_rpt_318, headlights_on_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Dash_controls_right_cmd_110, dash_controls_button_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, wiper_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_134, clear_faults_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_234, manual_input_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_230, output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_118, headlight_cmd_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, fuel_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, trunk_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, hood_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, rear_pass_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, rear_driver_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, pass_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, driver_door_open_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, fuel_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, trunk_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, hood_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, rear_pass_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, rear_driver_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, pass_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Door_rpt_417, driver_door_open_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, component_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, component_func_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, complement_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Component_rpt_20, config_fault_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, wheel_spd_rear_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, wheel_spd_rear_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, wheel_spd_front_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_407, wheel_spd_front_left_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_406, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_406, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_406, torque_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_406, torque_input_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, encoder_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, motor_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_405, angular_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_404, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_404, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_404, motor_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_404, shaft_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_403, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_403, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_403, torque_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_403, torque_input_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, encoder_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, motor_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_402, angular_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_401, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_401, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_401, motor_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_401, shaft_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, spray_empty_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, spray_empty_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, spray_near_empty_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, spray_near_empty_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, rear_spraying_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, rear_spraying_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, rear_wiping_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, rear_wiping_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, front_spraying_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, front_spraying_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, front_wiping_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_aux_rpt_334, front_wiping_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, speed_interlock_active_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, speed_interlock_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, brake_interlock_active_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, brake_interlock_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, stay_in_neutral_mode_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, stay_in_neutral_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, between_gears_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_aux_rpt_328, between_gears_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_200, output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_204, output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_11c, horn_cmd_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, config_fault_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, pacmod_subsystem_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, pacmod_system_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, pacmod_system_override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, pacmod_system_fault_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, veh_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, str_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, brk_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, usr_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_10, usr_can_read_errors_),
  1,
  2,
  0,
  5,
  3,
  4,
  7,
  6,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, user_interaction_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, user_interaction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, raw_pedal_force_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, raw_pedal_force_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, raw_pedal_pos_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_aux_rpt_300, raw_pedal_pos_),
  2,
  3,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_rpt_208, command_output_fault_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_400, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_400, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_400, vehicle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_400, vehicle_speed_valid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, brake_on_off_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, brake_on_off_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, user_interaction_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, user_interaction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, raw_brake_pressure_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, raw_brake_pressure_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, raw_pedal_force_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, raw_pedal_force_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, raw_pedal_pos_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_aux_rpt_304, raw_pedal_pos_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  8,
  6,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, media_controls_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_cmd_120, enable_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, cruise_control_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Cruise_control_buttons_cmd_108, clear_faults_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, parking_brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_cmd_124, clear_faults_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_21c, manual_input_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_228, output_value_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_128, shift_cmd_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_100, accel_cmd_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, command_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_rpt_224, manual_input_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_104, brake_cmd_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, vehicle_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, pacmod_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, override_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, output_reported_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, input_output_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Media_controls_rpt_220, command_output_fault_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, user_interaction_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, user_interaction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, rotation_rate_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, rotation_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, raw_torque_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, raw_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, raw_position_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_aux_rpt_32c, raw_position_),
  0,
  1,
  2,
  5,
  3,
  6,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, longitude_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, longitude_minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, longitude_degrees_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, latitude_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, latitude_minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_40e, latitude_degrees_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_40d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_40d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_40d, yaw_rate_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, time_second_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, time_minute_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, time_hour_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, date_day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, date_month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_40f, date_year_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, veh_serial_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, veh_my_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vin_rpt_414, veh_mfg_code_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, rear_seatbelt_buckled_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, pass_seatbelt_buckled_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, driver_seatbelt_buckled_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, rear_seat_occupied_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, pass_seat_occupied_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, driver_seat_occupied_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, rear_seatbelt_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, pass_seatbelt_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, driver_seatbelt_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, rear_seat_occupied_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, pass_seat_occupied_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Occupancy_rpt_415, driver_seat_occupied_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, dim_level_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, mood_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, rear_dome_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, front_dome_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, dim_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, mood_lights_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, rear_dome_lights_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Interior_lights_rpt_416, front_dome_lights_on_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, ignore_overrides_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_130, turn_signal_cmd_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Detected_object_rpt_411, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Detected_object_rpt_411, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Detected_object_rpt_411, front_object_distance_high_res_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Detected_object_rpt_411, front_object_distance_low_res_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_specific_rpt_1_412, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_specific_rpt_1_412, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_specific_rpt_1_412, shift_pos_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_specific_rpt_1_412, shift_pos_1_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_dynamics_rpt_413, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_dynamics_rpt_413, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Veh_dynamics_rpt_413, veh_g_forces_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, reverse_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, brake_lights_on_is_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, reverse_lights_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Rear_lights_rpt_418, brake_lights_on_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, hazard_lights_rpt_214_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, steering_cmd_12c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, dash_controls_right_rpt_210_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, dash_controls_left_cmd_10c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, steering_rpt_22c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, turn_aux_rpt_330_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, headlight_rpt_218_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, hazard_lights_cmd_114_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, dash_controls_left_rpt_20c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, headlight_aux_rpt_318_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, dash_controls_right_cmd_110_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, wiper_cmd_134_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, wiper_rpt_234_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, turn_rpt_230_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, headlight_cmd_118_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, door_rpt_417_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, component_rpt_20_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, wheel_speed_rpt_407_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, steering_motor_rpt_3_406_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, steering_motor_rpt_2_405_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, steering_motor_rpt_1_404_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, brake_motor_rpt_3_403_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, brake_motor_rpt_2_402_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, brake_motor_rpt_1_401_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, wiper_aux_rpt_334_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, shift_aux_rpt_328_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, accel_rpt_200_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, brake_rpt_204_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, horn_cmd_11c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, global_rpt_10_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, accel_aux_rpt_300_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, cruise_control_buttons_rpt_208_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, vehicle_speed_rpt_400_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, brake_aux_rpt_304_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, media_controls_cmd_120_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, cruise_control_buttons_cmd_108_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, parking_brake_cmd_124_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, horn_rpt_21c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, shift_rpt_228_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, shift_cmd_128_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, accel_cmd_100_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, parking_brake_rpt_224_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, brake_cmd_104_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, media_controls_rpt_220_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, steering_aux_rpt_32c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, lat_lon_heading_rpt_40e_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, yaw_rate_rpt_40d_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, date_time_rpt_40f_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, vin_rpt_414_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, occupancy_rpt_415_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, interior_lights_rpt_416_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, turn_cmd_130_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, detected_object_rpt_411_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, veh_specific_rpt_1_412_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, veh_dynamics_rpt_413_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lexus, rear_lights_rpt_418_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::apollo::canbus::Hazard_lights_rpt_214)},
  { 25, 36, sizeof(::apollo::canbus::Steering_cmd_12c)},
  { 42, 57, sizeof(::apollo::canbus::Dash_controls_right_rpt_210)},
  { 67, 77, sizeof(::apollo::canbus::Dash_controls_left_cmd_10c)},
  { 82, 97, sizeof(::apollo::canbus::Steering_rpt_22c)},
  { 107, 116, sizeof(::apollo::canbus::Turn_aux_rpt_330)},
  { 120, 135, sizeof(::apollo::canbus::Headlight_rpt_218)},
  { 145, 155, sizeof(::apollo::canbus::Hazard_lights_cmd_114)},
  { 160, 175, sizeof(::apollo::canbus::Dash_controls_left_rpt_20c)},
  { 185, 198, sizeof(::apollo::canbus::Headlight_aux_rpt_318)},
  { 206, 216, sizeof(::apollo::canbus::Dash_controls_right_cmd_110)},
  { 221, 231, sizeof(::apollo::canbus::Wiper_cmd_134)},
  { 236, 251, sizeof(::apollo::canbus::Wiper_rpt_234)},
  { 261, 276, sizeof(::apollo::canbus::Turn_rpt_230)},
  { 286, 296, sizeof(::apollo::canbus::Headlight_cmd_118)},
  { 301, 320, sizeof(::apollo::canbus::Door_rpt_417)},
  { 334, 344, sizeof(::apollo::canbus::Component_rpt_20)},
  { 349, 358, sizeof(::apollo::canbus::Wheel_speed_rpt_407)},
  { 362, 369, sizeof(::apollo::canbus::Steering_motor_rpt_3_406)},
  { 371, 379, sizeof(::apollo::canbus::Steering_motor_rpt_2_405)},
  { 382, 389, sizeof(::apollo::canbus::Steering_motor_rpt_1_404)},
  { 391, 398, sizeof(::apollo::canbus::Brake_motor_rpt_3_403)},
  { 400, 408, sizeof(::apollo::canbus::Brake_motor_rpt_2_402)},
  { 411, 418, sizeof(::apollo::canbus::Brake_motor_rpt_1_401)},
  { 420, 437, sizeof(::apollo::canbus::Wiper_aux_rpt_334)},
  { 449, 462, sizeof(::apollo::canbus::Shift_aux_rpt_328)},
  { 470, 485, sizeof(::apollo::canbus::Accel_rpt_200)},
  { 495, 510, sizeof(::apollo::canbus::Brake_rpt_204)},
  { 520, 530, sizeof(::apollo::canbus::Horn_cmd_11c)},
  { 535, 550, sizeof(::apollo::canbus::Global_rpt_10)},
  { 560, 571, sizeof(::apollo::canbus::Accel_aux_rpt_300)},
  { 577, 592, sizeof(::apollo::canbus::Cruise_control_buttons_rpt_208)},
  { 602, 609, sizeof(::apollo::canbus::Vehicle_speed_rpt_400)},
  { 611, 626, sizeof(::apollo::canbus::Brake_aux_rpt_304)},
  { 636, 646, sizeof(::apollo::canbus::Media_controls_cmd_120)},
  { 651, 661, sizeof(::apollo::canbus::Cruise_control_buttons_cmd_108)},
  { 666, 676, sizeof(::apollo::canbus::Parking_brake_cmd_124)},
  { 681, 696, sizeof(::apollo::canbus::Horn_rpt_21c)},
  { 706, 721, sizeof(::apollo::canbus::Shift_rpt_228)},
  { 731, 741, sizeof(::apollo::canbus::Shift_cmd_128)},
  { 746, 756, sizeof(::apollo::canbus::Accel_cmd_100)},
  { 761, 776, sizeof(::apollo::canbus::Parking_brake_rpt_224)},
  { 786, 796, sizeof(::apollo::canbus::Brake_cmd_104)},
  { 801, 816, sizeof(::apollo::canbus::Media_controls_rpt_220)},
  { 826, 839, sizeof(::apollo::canbus::Steering_aux_rpt_32c)},
  { 847, 859, sizeof(::apollo::canbus::Lat_lon_heading_rpt_40e)},
  { 866, 872, sizeof(::apollo::canbus::Yaw_rate_rpt_40d)},
  { 873, 884, sizeof(::apollo::canbus::Date_time_rpt_40f)},
  { 890, 898, sizeof(::apollo::canbus::Vin_rpt_414)},
  { 901, 918, sizeof(::apollo::canbus::Occupancy_rpt_415)},
  { 930, 943, sizeof(::apollo::canbus::Interior_lights_rpt_416)},
  { 951, 961, sizeof(::apollo::canbus::Turn_cmd_130)},
  { 966, 973, sizeof(::apollo::canbus::Detected_object_rpt_411)},
  { 975, 982, sizeof(::apollo::canbus::Veh_specific_rpt_1_412)},
  { 984, 990, sizeof(::apollo::canbus::Veh_dynamics_rpt_413)},
  { 991, 1000, sizeof(::apollo::canbus::Rear_lights_rpt_418)},
  { 1004, 1065, sizeof(::apollo::canbus::Lexus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Hazard_lights_rpt_214_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_cmd_12c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Dash_controls_right_rpt_210_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Dash_controls_left_cmd_10c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_rpt_22c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Turn_aux_rpt_330_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Headlight_rpt_218_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Hazard_lights_cmd_114_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Dash_controls_left_rpt_20c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Headlight_aux_rpt_318_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Dash_controls_right_cmd_110_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Wiper_cmd_134_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Wiper_rpt_234_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Turn_rpt_230_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Headlight_cmd_118_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Door_rpt_417_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Component_rpt_20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Wheel_speed_rpt_407_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_motor_rpt_3_406_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_motor_rpt_2_405_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_motor_rpt_1_404_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_motor_rpt_3_403_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_motor_rpt_2_402_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_motor_rpt_1_401_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Wiper_aux_rpt_334_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Shift_aux_rpt_328_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Accel_rpt_200_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_rpt_204_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Horn_cmd_11c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Global_rpt_10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Accel_aux_rpt_300_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Cruise_control_buttons_rpt_208_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vehicle_speed_rpt_400_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_aux_rpt_304_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Media_controls_cmd_120_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Cruise_control_buttons_cmd_108_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Parking_brake_cmd_124_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Horn_rpt_21c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Shift_rpt_228_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Shift_cmd_128_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Accel_cmd_100_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Parking_brake_rpt_224_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_cmd_104_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Media_controls_rpt_220_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_aux_rpt_32c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Lat_lon_heading_rpt_40e_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Yaw_rate_rpt_40d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Date_time_rpt_40f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vin_rpt_414_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Occupancy_rpt_415_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Interior_lights_rpt_416_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Turn_cmd_130_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Detected_object_rpt_411_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Veh_specific_rpt_1_412_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Veh_dynamics_rpt_413_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Rear_lights_rpt_418_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Lexus_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2flexus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n modules/canbus/proto/lexus.proto\022\rapol"
  "lo.canbus\"\214\002\n\025Hazard_lights_rpt_214\022\024\n\014o"
  "utput_value\030\001 \001(\010\022\027\n\017commanded_value\030\002 \001"
  "(\010\022\024\n\014manual_input\030\003 \001(\010\022\025\n\rvehicle_faul"
  "t\030\004 \001(\010\022\024\n\014pacmod_fault\030\005 \001(\010\022\027\n\017overrid"
  "e_active\030\006 \001(\010\022\035\n\025output_reported_fault\030"
  "\007 \001(\010\022\032\n\022input_output_fault\030\010 \001(\010\022\017\n\007ena"
  "bled\030\t \001(\010\022\034\n\024command_output_fault\030\n \001(\010"
  "\"\223\001\n\020Steering_cmd_12c\022\030\n\020ignore_override"
  "s\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_overrid"
  "e\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022\020\n\010positio"
  "n\030\005 \001(\001\022\025\n\rrotation_rate\030\006 \001(\001\"\237\t\n\033Dash_"
  "controls_right_rpt_210\022Q\n\014output_value\030\001"
  " \001(\0162;.apollo.canbus.Dash_controls_right"
  "_rpt_210.Output_valueType\022W\n\017commanded_v"
  "alue\030\002 \001(\0162>.apollo.canbus.Dash_controls"
  "_right_rpt_210.Commanded_valueType\022\025\n\rve"
  "hicle_fault\030\003 \001(\010\022\024\n\014pacmod_fault\030\004 \001(\010\022"
  "\027\n\017override_active\030\005 \001(\010\022\035\n\025output_repor"
  "ted_fault\030\006 \001(\010\022\032\n\022input_output_fault\030\007 "
  "\001(\010\022\017\n\007enabled\030\010 \001(\010\022\034\n\024command_output_f"
  "ault\030\t \001(\010\022Q\n\014manual_input\030\n \001(\0162;.apoll"
  "o.canbus.Dash_controls_right_rpt_210.Man"
  "ual_inputType\"\347\001\n\020Output_valueType\022\"\n\036OU"
  "TPUT_VALUE_DASH_CONTROL_NONE\020\000\022 \n\034OUTPUT"
  "_VALUE_DASH_CONTROL_OK\020\001\022\"\n\036OUTPUT_VALUE"
  "_DASH_CONTROL_LEFT\020\002\022#\n\037OUTPUT_VALUE_DAS"
  "H_CONTROL_RIGHT\020\003\022 \n\034OUTPUT_VALUE_DASH_C"
  "ONTROL_UP\020\004\022\"\n\036OUTPUT_VALUE_DASH_CONTROL"
  "_DOWN\020\005\"\374\001\n\023Commanded_valueType\022%\n!COMMA"
  "NDED_VALUE_DASH_CONTROL_NONE\020\000\022#\n\037COMMAN"
  "DED_VALUE_DASH_CONTROL_OK\020\001\022%\n!COMMANDED"
  "_VALUE_DASH_CONTROL_LEFT\020\002\022&\n\"COMMANDED_"
  "VALUE_DASH_CONTROL_RIGHT\020\003\022#\n\037COMMANDED_"
  "VALUE_DASH_CONTROL_UP\020\004\022%\n!COMMANDED_VAL"
  "UE_DASH_CONTROL_DOWN\020\005\"\347\001\n\020Manual_inputT"
  "ype\022\"\n\036MANUAL_INPUT_DASH_CONTROL_NONE\020\000\022"
  " \n\034MANUAL_INPUT_DASH_CONTROL_OK\020\001\022\"\n\036MAN"
  "UAL_INPUT_DASH_CONTROL_LEFT\020\002\022#\n\037MANUAL_"
  "INPUT_DASH_CONTROL_RIGHT\020\003\022 \n\034MANUAL_INP"
  "UT_DASH_CONTROL_UP\020\004\022\"\n\036MANUAL_INPUT_DAS"
  "H_CONTROL_DOWN\020\005\"\370\003\n\032Dash_controls_left_"
  "cmd_10c\022\030\n\020ignore_overrides\030\001 \001(\010\022\016\n\006ena"
  "ble\030\002 \001(\010\022\026\n\016clear_override\030\003 \001(\010\022\024\n\014cle"
  "ar_faults\030\004 \001(\010\022`\n\024dash_controls_button\030"
  "\005 \001(\0162B.apollo.canbus.Dash_controls_left"
  "_cmd_10c.Dash_controls_buttonType\"\237\002\n\030Da"
  "sh_controls_buttonType\022*\n&DASH_CONTROLS_"
  "BUTTON_DASH_CONTROL_NONE\020\000\022(\n$DASH_CONTR"
  "OLS_BUTTON_DASH_CONTROL_OK\020\001\022*\n&DASH_CON"
  "TROLS_BUTTON_DASH_CONTROL_LEFT\020\002\022+\n\'DASH"
  "_CONTROLS_BUTTON_DASH_CONTROL_RIGHT\020\003\022(\n"
  "$DASH_CONTROLS_BUTTON_DASH_CONTROL_UP\020\004\022"
  "*\n&DASH_CONTROLS_BUTTON_DASH_CONTROL_DOW"
  "N\020\005\"\207\002\n\020Steering_rpt_22c\022\025\n\rvehicle_faul"
  "t\030\001 \001(\010\022\024\n\014pacmod_fault\030\002 \001(\010\022\027\n\017overrid"
  "e_active\030\003 \001(\010\022\035\n\025output_reported_fault\030"
  "\004 \001(\010\022\032\n\022input_output_fault\030\005 \001(\010\022\017\n\007ena"
  "bled\030\006 \001(\010\022\034\n\024command_output_fault\030\007 \001(\010"
  "\022\024\n\014manual_input\030\010 \001(\001\022\027\n\017commanded_valu"
  "e\030\t \001(\001\022\024\n\014output_value\030\n \001(\001\"\240\001\n\020Turn_a"
  "ux_rpt_330\022%\n\035pass_blinker_bulb_on_is_va"
  "lid\030\001 \001(\010\022\034\n\024pass_blinker_bulb_on\030\002 \001(\010\022"
  "\'\n\037driver_blinker_bulb_on_is_valid\030\003 \001(\010"
  "\022\036\n\026driver_blinker_bulb_on\030\004 \001(\010\"\372\005\n\021Hea"
  "dlight_rpt_218\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n"
  "\014pacmod_fault\030\002 \001(\010\022\027\n\017override_active\030\003"
  " \001(\010\022\035\n\025output_reported_fault\030\004 \001(\010\022\032\n\022i"
  "nput_output_fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010"
  "\022\034\n\024command_output_fault\030\007 \001(\010\022G\n\014output"
  "_value\030\010 \001(\01621.apollo.canbus.Headlight_r"
  "pt_218.Output_valueType\022G\n\014manual_input\030"
  "\t \001(\01621.apollo.canbus.Headlight_rpt_218."
  "Manual_inputType\022M\n\017commanded_value\030\n \001("
  "\01624.apollo.canbus.Headlight_rpt_218.Comm"
  "anded_valueType\"l\n\020Output_valueType\022\037\n\033O"
  "UTPUT_VALUE_HEADLIGHTS_OFF\020\000\022\032\n\026OUTPUT_V"
  "ALUE_LOW_BEAMS\020\001\022\033\n\027OUTPUT_VALUE_HIGH_BE"
  "AMS\020\002\"l\n\020Manual_inputType\022\037\n\033MANUAL_INPU"
  "T_HEADLIGHTS_OFF\020\000\022\032\n\026MANUAL_INPUT_LOW_B"
  "EAMS\020\001\022\033\n\027MANUAL_INPUT_HIGH_BEAMS\020\002\"x\n\023C"
  "ommanded_valueType\022\"\n\036COMMANDED_VALUE_HE"
  "ADLIGHTS_OFF\020\000\022\035\n\031COMMANDED_VALUE_LOW_BE"
  "AMS\020\001\022\036\n\032COMMANDED_VALUE_HIGH_BEAMS\020\002\"\212\001"
  "\n\025Hazard_lights_cmd_114\022\031\n\021hazard_lights"
  "_cmd\030\001 \001(\010\022\030\n\020ignore_overrides\030\002 \001(\010\022\026\n\016"
  "clear_override\030\003 \001(\010\022\016\n\006enable\030\004 \001(\010\022\024\n\014"
  "clear_faults\030\005 \001(\010\"\233\t\n\032Dash_controls_lef"
  "t_rpt_20c\022P\n\014output_value\030\001 \001(\0162:.apollo"
  ".canbus.Dash_controls_left_rpt_20c.Outpu"
  "t_valueType\022V\n\017commanded_value\030\002 \001(\0162=.a"
  "pollo.canbus.Dash_controls_left_rpt_20c."
  "Commanded_valueType\022P\n\014manual_input\030\003 \001("
  "\0162:.apollo.canbus.Dash_controls_left_rpt"
  "_20c.Manual_inputType\022\025\n\rvehicle_fault\030\004"
  " \001(\010\022\024\n\014pacmod_fault\030\005 \001(\010\022\027\n\017override_a"
  "ctive\030\006 \001(\010\022\035\n\025output_reported_fault\030\007 \001"
  "(\010\022\032\n\022input_output_fault\030\010 \001(\010\022\017\n\007enable"
  "d\030\t \001(\010\022\034\n\024command_output_fault\030\n \001(\010\"\347\001"
  "\n\020Output_valueType\022\"\n\036OUTPUT_VALUE_DASH_"
  "CONTROL_NONE\020\000\022 \n\034OUTPUT_VALUE_DASH_CONT"
  "ROL_OK\020\001\022\"\n\036OUTPUT_VALUE_DASH_CONTROL_LE"
  "FT\020\002\022#\n\037OUTPUT_VALUE_DASH_CONTROL_RIGHT\020"
  "\003\022 \n\034OUTPUT_VALUE_DASH_CONTROL_UP\020\004\022\"\n\036O"
  "UTPUT_VALUE_DASH_CONTROL_DOWN\020\005\"\374\001\n\023Comm"
  "anded_valueType\022%\n!COMMANDED_VALUE_DASH_"
  "CONTROL_NONE\020\000\022#\n\037COMMANDED_VALUE_DASH_C"
  "ONTROL_OK\020\001\022%\n!COMMANDED_VALUE_DASH_CONT"
  "ROL_LEFT\020\002\022&\n\"COMMANDED_VALUE_DASH_CONTR"
  "OL_RIGHT\020\003\022#\n\037COMMANDED_VALUE_DASH_CONTR"
  "OL_UP\020\004\022%\n!COMMANDED_VALUE_DASH_CONTROL_"
  "DOWN\020\005\"\347\001\n\020Manual_inputType\022\"\n\036MANUAL_IN"
  "PUT_DASH_CONTROL_NONE\020\000\022 \n\034MANUAL_INPUT_"
  "DASH_CONTROL_OK\020\001\022\"\n\036MANUAL_INPUT_DASH_C"
  "ONTROL_LEFT\020\002\022#\n\037MANUAL_INPUT_DASH_CONTR"
  "OL_RIGHT\020\003\022 \n\034MANUAL_INPUT_DASH_CONTROL_"
  "UP\020\004\022\"\n\036MANUAL_INPUT_DASH_CONTROL_DOWN\020\005"
  "\"\200\004\n\025Headlight_aux_rpt_318\022 \n\030headlights"
  "_mode_is_valid\030\001 \001(\010\022Q\n\017headlights_mode\030"
  "\002 \001(\01628.apollo.canbus.Headlight_aux_rpt_"
  "318.Headlights_modeType\022\036\n\026fog_lights_on"
  "_is_valid\030\003 \001(\010\022\025\n\rfog_lights_on\030\004 \001(\010\022%"
  "\n\035headlights_on_bright_is_valid\030\005 \001(\010\022\034\n"
  "\024headlights_on_bright\030\006 \001(\010\022\036\n\026headlight"
  "s_on_is_valid\030\007 \001(\010\022\025\n\rheadlights_on\030\010 \001"
  "(\010\"\276\001\n\023Headlights_modeType\022\"\n\036HEADLIGHTS"
  "_MODE_HEADLIGHTS_OFF\020\000\022\'\n#HEADLIGHTS_MOD"
  "E_PARKING_LIGHTS_ONLY\020\001\022-\n)HEADLIGHTS_MO"
  "DE_HEADLIGHTS_ON_MANUAL_MODE\020\002\022+\n\'HEADLI"
  "GHTS_MODE_HEADLIGHTS_ON_AUTO_MODE\020\003\"\372\003\n\033"
  "Dash_controls_right_cmd_110\022\030\n\020ignore_ov"
  "errides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_o"
  "verride\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022a\n\024d"
  "ash_controls_button\030\005 \001(\0162C.apollo.canbu"
  "s.Dash_controls_right_cmd_110.Dash_contr"
  "ols_buttonType\"\237\002\n\030Dash_controls_buttonT"
  "ype\022*\n&DASH_CONTROLS_BUTTON_DASH_CONTROL"
  "_NONE\020\000\022(\n$DASH_CONTROLS_BUTTON_DASH_CON"
  "TROL_OK\020\001\022*\n&DASH_CONTROLS_BUTTON_DASH_C"
  "ONTROL_LEFT\020\002\022+\n\'DASH_CONTROLS_BUTTON_DA"
  "SH_CONTROL_RIGHT\020\003\022(\n$DASH_CONTROLS_BUTT"
  "ON_DASH_CONTROL_UP\020\004\022*\n&DASH_CONTROLS_BU"
  "TTON_DASH_CONTROL_DOWN\020\005\"\217\003\n\rWiper_cmd_1"
  "34\022\030\n\020ignore_overrides\030\001 \001(\010\022\016\n\006enable\030\002"
  " \001(\010\022\026\n\016clear_override\030\003 \001(\010\022=\n\twiper_cm"
  "d\030\004 \001(\0162*.apollo.canbus.Wiper_cmd_134.Wi"
  "per_cmdType\022\024\n\014clear_faults\030\005 \001(\010\"\346\001\n\rWi"
  "per_cmdType\022\030\n\024WIPER_CMD_WIPERS_OFF\020\000\022\034\n"
  "\030WIPER_CMD_INTERMITTENT_1\020\001\022\034\n\030WIPER_CMD"
  "_INTERMITTENT_2\020\002\022\034\n\030WIPER_CMD_INTERMITT"
  "ENT_3\020\003\022\034\n\030WIPER_CMD_INTERMITTENT_4\020\004\022\034\n"
  "\030WIPER_CMD_INTERMITTENT_5\020\005\022\021\n\rWIPER_CMD"
  "_LOW\020\006\022\022\n\016WIPER_CMD_HIGH\020\007\"\273\t\n\rWiper_rpt"
  "_234\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n\014pacmod_fa"
  "ult\030\002 \001(\010\022\027\n\017override_active\030\003 \001(\010\022\035\n\025ou"
  "tput_reported_fault\030\004 \001(\010\022\032\n\022input_outpu"
  "t_fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010\022\034\n\024comman"
  "d_output_fault\030\007 \001(\010\022C\n\014output_value\030\010 \001"
  "(\0162-.apollo.canbus.Wiper_rpt_234.Output_"
  "valueType\022I\n\017commanded_value\030\t \001(\01620.apo"
  "llo.canbus.Wiper_rpt_234.Commanded_value"
  "Type\022C\n\014manual_input\030\n \001(\0162-.apollo.canb"
  "us.Wiper_rpt_234.Manual_inputType\"\201\002\n\020Ou"
  "tput_valueType\022\033\n\027OUTPUT_VALUE_WIPERS_OF"
  "F\020\000\022\037\n\033OUTPUT_VALUE_INTERMITTENT_1\020\001\022\037\n\033"
  "OUTPUT_VALUE_INTERMITTENT_2\020\002\022\037\n\033OUTPUT_"
  "VALUE_INTERMITTENT_3\020\003\022\037\n\033OUTPUT_VALUE_I"
  "NTERMITTENT_4\020\004\022\037\n\033OUTPUT_VALUE_INTERMIT"
  "TENT_5\020\005\022\024\n\020OUTPUT_VALUE_LOW\020\006\022\025\n\021OUTPUT"
  "_VALUE_HIGH\020\007\"\234\002\n\023Commanded_valueType\022\036\n"
  "\032COMMANDED_VALUE_WIPERS_OFF\020\000\022\"\n\036COMMAND"
  "ED_VALUE_INTERMITTENT_1\020\001\022\"\n\036COMMANDED_V"
  "ALUE_INTERMITTENT_2\020\002\022\"\n\036COMMANDED_VALUE"
  "_INTERMITTENT_3\020\003\022\"\n\036COMMANDED_VALUE_INT"
  "ERMITTENT_4\020\004\022\"\n\036COMMANDED_VALUE_INTERMI"
  "TTENT_5\020\005\022\027\n\023COMMANDED_VALUE_LOW\020\006\022\030\n\024CO"
  "MMANDED_VALUE_HIGH\020\007\"\201\002\n\020Manual_inputTyp"
  "e\022\033\n\027MANUAL_INPUT_WIPERS_OFF\020\000\022\037\n\033MANUAL"
  "_INPUT_INTERMITTENT_1\020\001\022\037\n\033MANUAL_INPUT_"
  "INTERMITTENT_2\020\002\022\037\n\033MANUAL_INPUT_INTERMI"
  "TTENT_3\020\003\022\037\n\033MANUAL_INPUT_INTERMITTENT_4"
  "\020\004\022\037\n\033MANUAL_INPUT_INTERMITTENT_5\020\005\022\024\n\020M"
  "ANUAL_INPUT_LOW\020\006\022\025\n\021MANUAL_INPUT_HIGH\020\007"
  "\"\371\005\n\014Turn_rpt_230\022\025\n\rvehicle_fault\030\001 \001(\010"
  "\022\024\n\014pacmod_fault\030\002 \001(\010\022\027\n\017override_activ"
  "e\030\003 \001(\010\022\035\n\025output_reported_fault\030\004 \001(\010\022\032"
  "\n\022input_output_fault\030\005 \001(\010\022\017\n\007enabled\030\006 "
  "\001(\010\022\034\n\024command_output_fault\030\007 \001(\010\022B\n\014man"
  "ual_input\030\010 \001(\0162,.apollo.canbus.Turn_rpt"
  "_230.Manual_inputType\022H\n\017commanded_value"
  "\030\t \001(\0162/.apollo.canbus.Turn_rpt_230.Comm"
  "anded_valueType\022B\n\014output_value\030\n \001(\0162,."
  "apollo.canbus.Turn_rpt_230.Output_valueT"
  "ype\"q\n\020Manual_inputType\022\026\n\022MANUAL_INPUT_"
  "RIGHT\020\000\022\025\n\021MANUAL_INPUT_NONE\020\001\022\025\n\021MANUAL"
  "_INPUT_LEFT\020\002\022\027\n\023MANUAL_INPUT_HAZARD\020\003\"\200"
  "\001\n\023Commanded_valueType\022\031\n\025COMMANDED_VALU"
  "E_RIGHT\020\000\022\030\n\024COMMANDED_VALUE_NONE\020\001\022\030\n\024C"
  "OMMANDED_VALUE_LEFT\020\002\022\032\n\026COMMANDED_VALUE"
  "_HAZARD\020\003\"q\n\020Output_valueType\022\026\n\022OUTPUT_"
  "VALUE_RIGHT\020\000\022\025\n\021OUTPUT_VALUE_NONE\020\001\022\025\n\021"
  "OUTPUT_VALUE_LEFT\020\002\022\027\n\023OUTPUT_VALUE_HAZA"
  "RD\020\003\"\250\002\n\021Headlight_cmd_118\022\030\n\020ignore_ove"
  "rrides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_ov"
  "erride\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022I\n\rhe"
  "adlight_cmd\030\005 \001(\01622.apollo.canbus.Headli"
  "ght_cmd_118.Headlight_cmdType\"p\n\021Headlig"
  "ht_cmdType\022 \n\034HEADLIGHT_CMD_HEADLIGHTS_O"
  "FF\020\000\022\033\n\027HEADLIGHT_CMD_LOW_BEAMS\020\001\022\034\n\030HEA"
  "DLIGHT_CMD_HIGH_BEAMS\020\002\"\247\003\n\014Door_rpt_417"
  "\022\037\n\027fuel_door_open_is_valid\030\001 \001(\010\022\033\n\023tru"
  "nk_open_is_valid\030\002 \001(\010\022\032\n\022hood_open_is_v"
  "alid\030\003 \001(\010\022$\n\034rear_pass_door_open_is_val"
  "id\030\004 \001(\010\022&\n\036rear_driver_door_open_is_val"
  "id\030\005 \001(\010\022\037\n\027pass_door_open_is_valid\030\006 \001("
  "\010\022!\n\031driver_door_open_is_valid\030\007 \001(\010\022\026\n\016"
  "fuel_door_open\030\010 \001(\010\022\022\n\ntrunk_open\030\t \001(\010"
  "\022\021\n\thood_open\030\n \001(\010\022\033\n\023rear_pass_door_op"
  "en\030\013 \001(\010\022\035\n\025rear_driver_door_open\030\014 \001(\010\022"
  "\026\n\016pass_door_open\030\r \001(\010\022\030\n\020driver_door_o"
  "pen\030\016 \001(\010\"\357\004\n\020Component_rpt_20\022J\n\016compon"
  "ent_type\030\001 \001(\01622.apollo.canbus.Component"
  "_rpt_20.Component_typeType\022J\n\016component_"
  "func\030\002 \001(\01622.apollo.canbus.Component_rpt"
  "_20.Component_funcType\022\017\n\007counter\030\003 \001(\005\022"
  "\022\n\ncomplement\030\004 \001(\005\022\024\n\014config_fault\030\005 \001("
  "\010\"h\n\022Component_typeType\022\031\n\025COMPONENT_TYP"
  "E_PACMOD\020\000\022\032\n\026COMPONENT_TYPE_PACMINI\020\001\022\033"
  "\n\027COMPONENT_TYPE_PACMICRO\020\002\"\235\002\n\022Componen"
  "t_funcType\022\031\n\025COMPONENT_FUNC_PACMOD\020\000\022/\n"
  "+COMPONENT_FUNC_STEERING_AND_STEERING_CO"
  "LUMN\020\001\022*\n&COMPONENT_FUNC_ACCELERATOR_AND"
  "_BRAKING\020\002\022\032\n\026COMPONENT_FUNC_BRAKING\020\003\022\033"
  "\n\027COMPONENT_FUNC_SHIFTING\020\004\022\033\n\027COMPONENT"
  "_FUNC_STEERING\020\005\022\034\n\030COMPONENT_FUNC_E_SHI"
  "FTER\020\006\022\033\n\027COMPONENT_FUNC_WATCHDOG\020\007\"\215\001\n\023"
  "Wheel_speed_rpt_407\022\034\n\024wheel_spd_rear_ri"
  "ght\030\001 \001(\001\022\033\n\023wheel_spd_rear_left\030\002 \001(\001\022\035"
  "\n\025wheel_spd_front_right\030\003 \001(\001\022\034\n\024wheel_s"
  "pd_front_left\030\004 \001(\001\"G\n\030Steering_motor_rp"
  "t_3_406\022\025\n\rtorque_output\030\001 \001(\001\022\024\n\014torque"
  "_input\030\002 \001(\001\"i\n\030Steering_motor_rpt_2_405"
  "\022\033\n\023encoder_temperature\030\001 \001(\005\022\031\n\021motor_t"
  "emperature\030\002 \001(\005\022\025\n\rangular_speed\030\003 \001(\001\""
  "I\n\030Steering_motor_rpt_1_404\022\025\n\rmotor_cur"
  "rent\030\001 \001(\001\022\026\n\016shaft_position\030\002 \001(\001\"D\n\025Br"
  "ake_motor_rpt_3_403\022\025\n\rtorque_output\030\001 \001"
  "(\001\022\024\n\014torque_input\030\002 \001(\001\"f\n\025Brake_motor_"
  "rpt_2_402\022\033\n\023encoder_temperature\030\001 \001(\005\022\031"
  "\n\021motor_temperature\030\002 \001(\005\022\025\n\rangular_spe"
  "ed\030\003 \001(\001\"F\n\025Brake_motor_rpt_1_401\022\025\n\rmot"
  "or_current\030\001 \001(\001\022\026\n\016shaft_position\030\002 \001(\001"
  "\"\333\002\n\021Wiper_aux_rpt_334\022\034\n\024spray_empty_is"
  "_valid\030\001 \001(\010\022\023\n\013spray_empty\030\002 \001(\010\022!\n\031spr"
  "ay_near_empty_is_valid\030\003 \001(\010\022\030\n\020spray_ne"
  "ar_empty\030\004 \001(\010\022\036\n\026rear_spraying_is_valid"
  "\030\005 \001(\010\022\025\n\rrear_spraying\030\006 \001(\010\022\034\n\024rear_wi"
  "ping_is_valid\030\007 \001(\010\022\023\n\013rear_wiping\030\010 \001(\010"
  "\022\037\n\027front_spraying_is_valid\030\t \001(\010\022\026\n\016fro"
  "nt_spraying\030\n \001(\010\022\035\n\025front_wiping_is_val"
  "id\030\013 \001(\010\022\024\n\014front_wiping\030\014 \001(\010\"\241\002\n\021Shift"
  "_aux_rpt_328\022\'\n\037speed_interlock_active_i"
  "s_valid\030\001 \001(\010\022\036\n\026speed_interlock_active\030"
  "\002 \001(\010\022\'\n\037brake_interlock_active_is_valid"
  "\030\003 \001(\010\022\036\n\026brake_interlock_active\030\004 \001(\010\022%"
  "\n\035stay_in_neutral_mode_is_valid\030\005 \001(\010\022\034\n"
  "\024stay_in_neutral_mode\030\006 \001(\010\022\036\n\026between_g"
  "ears_is_valid\030\007 \001(\010\022\025\n\rbetween_gears\030\010 \001"
  "(\010\"\204\002\n\rAccel_rpt_200\022\025\n\rvehicle_fault\030\001 "
  "\001(\010\022\024\n\014pacmod_fault\030\002 \001(\010\022\035\n\025output_repo"
  "rted_fault\030\003 \001(\010\022\032\n\022input_output_fault\030\004"
  " \001(\010\022\034\n\024command_output_fault\030\005 \001(\010\022\027\n\017ov"
  "erride_active\030\006 \001(\010\022\017\n\007enabled\030\007 \001(\010\022\024\n\014"
  "manual_input\030\010 \001(\001\022\027\n\017commanded_value\030\t "
  "\001(\001\022\024\n\014output_value\030\n \001(\001\"\204\002\n\rBrake_rpt_"
  "204\022\034\n\024command_output_fault\030\001 \001(\010\022\025\n\rveh"
  "icle_fault\030\002 \001(\010\022\024\n\014pacmod_fault\030\003 \001(\010\022\027"
  "\n\017override_active\030\004 \001(\010\022\035\n\025output_report"
  "ed_fault\030\005 \001(\010\022\032\n\022input_output_fault\030\006 \001"
  "(\010\022\017\n\007enabled\030\007 \001(\010\022\024\n\014manual_input\030\010 \001("
  "\001\022\027\n\017commanded_value\030\t \001(\001\022\024\n\014output_val"
  "ue\030\n \001(\001\"\325\001\n\014Horn_cmd_11c\022\030\n\020ignore_over"
  "rides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_ove"
  "rride\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022:\n\010hor"
  "n_cmd\030\005 \001(\0162(.apollo.canbus.Horn_cmd_11c"
  ".Horn_cmdType\"1\n\014Horn_cmdType\022\020\n\014HORN_CM"
  "D_OFF\020\000\022\017\n\013HORN_CMD_ON\020\001\"\307\006\n\rGlobal_rpt_"
  "10\022\033\n\023config_fault_active\030\001 \001(\010\022 \n\030pacmo"
  "d_subsystem_timeout\030\002 \001(\010\022U\n\025pacmod_syst"
  "em_enabled\030\003 \001(\01626.apollo.canbus.Global_"
  "rpt_10.Pacmod_system_enabledType\022e\n\035pacm"
  "od_system_override_active\030\004 \001(\0162>.apollo"
  ".canbus.Global_rpt_10.Pacmod_system_over"
  "ride_activeType\022\"\n\032pacmod_system_fault_a"
  "ctive\030\005 \001(\010\022\027\n\017veh_can_timeout\030\006 \001(\010\022\027\n\017"
  "str_can_timeout\030\007 \001(\010\022I\n\017brk_can_timeout"
  "\030\010 \001(\01620.apollo.canbus.Global_rpt_10.Brk"
  "_can_timeoutType\022\027\n\017usr_can_timeout\030\t \001("
  "\010\022\033\n\023usr_can_read_errors\030\n \001(\005\"r\n\031Pacmod"
  "_system_enabledType\022*\n&PACMOD_SYSTEM_ENA"
  "BLED_CONTROL_DISABLED\020\000\022)\n%PACMOD_SYSTEM"
  "_ENABLED_CONTROL_ENABLED\020\001\"\203\001\n!Pacmod_sy"
  "stem_override_activeType\0220\n,PACMOD_SYSTE"
  "M_OVERRIDE_ACTIVE_NOT_OVERRIDDEN\020\000\022,\n(PA"
  "CMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN\020\001"
  "\"h\n\023Brk_can_timeoutType\022)\n%BRK_CAN_TIMEO"
  "UT_NO_ACTIVE_CAN_TIMEOUT\020\000\022&\n\"BRK_CAN_TI"
  "MEOUT_ACTIVE_CAN_TIMEOUT\020\001\"\302\001\n\021Accel_aux"
  "_rpt_300\022!\n\031user_interaction_is_valid\030\001 "
  "\001(\010\022\030\n\020user_interaction\030\002 \001(\010\022 \n\030raw_ped"
  "al_force_is_valid\030\003 \001(\010\022\027\n\017raw_pedal_for"
  "ce\030\004 \001(\001\022\036\n\026raw_pedal_pos_is_valid\030\005 \001(\010"
  "\022\025\n\rraw_pedal_pos\030\006 \001(\001\"\214\013\n\036Cruise_contr"
  "ol_buttons_rpt_208\022T\n\014output_value\030\001 \001(\016"
  "2>.apollo.canbus.Cruise_control_buttons_"
  "rpt_208.Output_valueType\022T\n\014manual_input"
  "\030\002 \001(\0162>.apollo.canbus.Cruise_control_bu"
  "ttons_rpt_208.Manual_inputType\022Z\n\017comman"
  "ded_value\030\003 \001(\0162A.apollo.canbus.Cruise_c"
  "ontrol_buttons_rpt_208.Commanded_valueTy"
  "pe\022\025\n\rvehicle_fault\030\004 \001(\010\022\024\n\014pacmod_faul"
  "t\030\005 \001(\010\022\027\n\017override_active\030\006 \001(\010\022\035\n\025outp"
  "ut_reported_fault\030\007 \001(\010\022\032\n\022input_output_"
  "fault\030\010 \001(\010\022\017\n\007enabled\030\t \001(\010\022\034\n\024command_"
  "output_fault\030\n \001(\010\"\261\002\n\020Output_valueType\022"
  "$\n OUTPUT_VALUE_CRUISE_CONTROL_NONE\020\000\022$\n"
  " OUTPUT_VALUE_CRUISE_CONTROL_CNCL\020\001\022+\n\'O"
  "UTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER\020\002"
  "\022*\n&OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOS"
  "ER\020\003\022\'\n#OUTPUT_VALUE_CRUISE_CONTROL_SET_"
  "DEC\020\004\022\'\n#OUTPUT_VALUE_CRUISE_CONTROL_RES"
  "_INC\020\005\022&\n\"OUTPUT_VALUE_CRUISE_CONTROL_ON"
  "_OFF\020\006\"\261\002\n\020Manual_inputType\022$\n MANUAL_IN"
  "PUT_CRUISE_CONTROL_NONE\020\000\022$\n MANUAL_INPU"
  "T_CRUISE_CONTROL_CNCL\020\001\022+\n\'MANUAL_INPUT_"
  "CRUISE_CONTROL_ACC_FURTHER\020\002\022*\n&MANUAL_I"
  "NPUT_CRUISE_CONTROL_ACC_CLOSER\020\003\022\'\n#MANU"
  "AL_INPUT_CRUISE_CONTROL_SET_DEC\020\004\022\'\n#MAN"
  "UAL_INPUT_CRUISE_CONTROL_RES_INC\020\005\022&\n\"MA"
  "NUAL_INPUT_CRUISE_CONTROL_ON_OFF\020\006\"\311\002\n\023C"
  "ommanded_valueType\022\'\n#COMMANDED_VALUE_CR"
  "UISE_CONTROL_NONE\020\000\022\'\n#COMMANDED_VALUE_C"
  "RUISE_CONTROL_CNCL\020\001\022.\n*COMMANDED_VALUE_"
  "CRUISE_CONTROL_ACC_FURTHER\020\002\022-\n)COMMANDE"
  "D_VALUE_CRUISE_CONTROL_ACC_CLOSER\020\003\022*\n&C"
  "OMMANDED_VALUE_CRUISE_CONTROL_SET_DEC\020\004\022"
  "*\n&COMMANDED_VALUE_CRUISE_CONTROL_RES_IN"
  "C\020\005\022)\n%COMMANDED_VALUE_CRUISE_CONTROL_ON"
  "_OFF\020\006\"\344\001\n\025Vehicle_speed_rpt_400\022\025\n\rvehi"
  "cle_speed\030\001 \001(\001\022Y\n\023vehicle_speed_valid\030\002"
  " \001(\0162<.apollo.canbus.Vehicle_speed_rpt_4"
  "00.Vehicle_speed_validType\"Y\n\027Vehicle_sp"
  "eed_validType\022\037\n\033VEHICLE_SPEED_VALID_INV"
  "ALID\020\000\022\035\n\031VEHICLE_SPEED_VALID_VALID\020\001\"\270\002"
  "\n\021Brake_aux_rpt_304\022\035\n\025brake_on_off_is_v"
  "alid\030\001 \001(\010\022\024\n\014brake_on_off\030\002 \001(\010\022!\n\031user"
  "_interaction_is_valid\030\003 \001(\010\022\030\n\020user_inte"
  "raction\030\004 \001(\010\022#\n\033raw_brake_pressure_is_v"
  "alid\030\005 \001(\010\022\032\n\022raw_brake_pressure\030\006 \001(\001\022 "
  "\n\030raw_pedal_force_is_valid\030\007 \001(\010\022\027\n\017raw_"
  "pedal_force\030\010 \001(\001\022\036\n\026raw_pedal_pos_is_va"
  "lid\030\t \001(\010\022\025\n\rraw_pedal_pos\030\n \001(\001\"\274\004\n\026Med"
  "ia_controls_cmd_120\022X\n\022media_controls_cm"
  "d\030\001 \001(\0162<.apollo.canbus.Media_controls_c"
  "md_120.Media_controls_cmdType\022\030\n\020ignore_"
  "overrides\030\002 \001(\010\022\026\n\016clear_override\030\003 \001(\010\022"
  "\024\n\014clear_faults\030\004 \001(\010\022\016\n\006enable\030\005 \001(\010\"\357\002"
  "\n\026Media_controls_cmdType\022)\n%MEDIA_CONTRO"
  "LS_CMD_MEDIA_CONTROL_NONE\020\000\0222\n.MEDIA_CON"
  "TROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND\020\001\022"
  ")\n%MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE"
  "\020\002\0226\n2MEDIA_CONTROLS_CMD_MEDIA_CONTROL_P"
  "REV_TRACK_ANSWER\020\003\0227\n3MEDIA_CONTROLS_CMD"
  "_MEDIA_CONTROL_NEXT_TRACK_HANG_UP\020\004\022+\n\'M"
  "EDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP\020\005"
  "\022-\n)MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL"
  "_DOWN\020\006\"\334\004\n\036Cruise_control_buttons_cmd_1"
  "08\022f\n\025cruise_control_button\030\001 \001(\0162G.apol"
  "lo.canbus.Cruise_control_buttons_cmd_108"
  ".Cruise_control_buttonType\022\030\n\020ignore_ove"
  "rrides\030\002 \001(\010\022\026\n\016clear_override\030\003 \001(\010\022\016\n\006"
  "enable\030\004 \001(\010\022\024\n\014clear_faults\030\005 \001(\010\"\371\002\n\031C"
  "ruise_control_buttonType\022-\n)CRUISE_CONTR"
  "OL_BUTTON_CRUISE_CONTROL_NONE\020\000\022-\n)CRUIS"
  "E_CONTROL_BUTTON_CRUISE_CONTROL_CNCL\020\001\0224"
  "\n0CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_A"
  "CC_FURTHER\020\002\0223\n/CRUISE_CONTROL_BUTTON_CR"
  "UISE_CONTROL_ACC_CLOSER\020\003\0220\n,CRUISE_CONT"
  "ROL_BUTTON_CRUISE_CONTROL_SET_DEC\020\004\0220\n,C"
  "RUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_"
  "INC\020\005\022/\n+CRUISE_CONTROL_BUTTON_CRUISE_CO"
  "NTROL_ON_OFF\020\006\"\212\001\n\025Parking_brake_cmd_124"
  "\022\030\n\020ignore_overrides\030\001 \001(\010\022\016\n\006enable\030\002 \001"
  "(\010\022\026\n\016clear_override\030\003 \001(\010\022\031\n\021parking_br"
  "ake_cmd\030\004 \001(\010\022\024\n\014clear_faults\030\005 \001(\010\"\326\004\n\014"
  "Horn_rpt_21c\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n\014p"
  "acmod_fault\030\002 \001(\010\022\027\n\017override_active\030\003 \001"
  "(\010\022\035\n\025output_reported_fault\030\004 \001(\010\022\032\n\022inp"
  "ut_output_fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010\022\034"
  "\n\024command_output_fault\030\007 \001(\010\022B\n\014output_v"
  "alue\030\010 \001(\0162,.apollo.canbus.Horn_rpt_21c."
  "Output_valueType\022H\n\017commanded_value\030\t \001("
  "\0162/.apollo.canbus.Horn_rpt_21c.Commanded"
  "_valueType\022B\n\014manual_input\030\n \001(\0162,.apoll"
  "o.canbus.Horn_rpt_21c.Manual_inputType\"="
  "\n\020Output_valueType\022\024\n\020OUTPUT_VALUE_OFF\020\000"
  "\022\023\n\017OUTPUT_VALUE_ON\020\001\"F\n\023Commanded_value"
  "Type\022\027\n\023COMMANDED_VALUE_OFF\020\000\022\026\n\022COMMAND"
  "ED_VALUE_ON\020\001\"=\n\020Manual_inputType\022\024\n\020MAN"
  "UAL_INPUT_OFF\020\000\022\023\n\017MANUAL_INPUT_ON\020\001\"\235\010\n"
  "\rShift_rpt_228\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n"
  "\014pacmod_fault\030\002 \001(\010\022\027\n\017override_active\030\003"
  " \001(\010\022\035\n\025output_reported_fault\030\004 \001(\010\022\032\n\022i"
  "nput_output_fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010"
  "\022\034\n\024command_output_fault\030\007 \001(\010\022C\n\014manual"
  "_input\030\010 \001(\0162-.apollo.canbus.Shift_rpt_2"
  "28.Manual_inputType\022I\n\017commanded_value\030\t"
  " \001(\01620.apollo.canbus.Shift_rpt_228.Comma"
  "nded_valueType\022C\n\014output_value\030\n \001(\0162-.a"
  "pollo.canbus.Shift_rpt_228.Output_valueT"
  "ype\"\341\001\n\020Manual_inputType\022\025\n\021MANUAL_INPUT"
  "_PARK\020\000\022\030\n\024MANUAL_INPUT_REVERSE\020\001\022\030\n\024MAN"
  "UAL_INPUT_NEUTRAL\020\002\022\035\n\031MANUAL_INPUT_FORW"
  "ARD_HIGH\020\003\022\024\n\020MANUAL_INPUT_LOW\020\004\022\036\n\032MANU"
  "AL_INPUT_BETWEEN_GEARS\020\005\022\026\n\022MANUAL_INPUT"
  "_ERROR\020\006\022\025\n\021MANUAL_INPUT_NONE\020\007\"\276\001\n\023Comm"
  "anded_valueType\022\030\n\024COMMANDED_VALUE_PARK\020"
  "\000\022\033\n\027COMMANDED_VALUE_REVERSE\020\001\022\033\n\027COMMAN"
  "DED_VALUE_NEUTRAL\020\002\022 \n\034COMMANDED_VALUE_F"
  "ORWARD_HIGH\020\003\022\027\n\023COMMANDED_VALUE_LOW\020\004\022\030"
  "\n\024COMMANDED_VALUE_NONE\020\007\"\341\001\n\020Output_valu"
  "eType\022\025\n\021OUTPUT_VALUE_PARK\020\000\022\030\n\024OUTPUT_V"
  "ALUE_REVERSE\020\001\022\030\n\024OUTPUT_VALUE_NEUTRAL\020\002"
  "\022\035\n\031OUTPUT_VALUE_FORWARD_HIGH\020\003\022\024\n\020OUTPU"
  "T_VALUE_LOW\020\004\022\036\n\032OUTPUT_VALUE_BETWEEN_GE"
  "ARS\020\005\022\026\n\022OUTPUT_VALUE_ERROR\020\006\022\025\n\021OUTPUT_"
  "VALUE_NONE\020\007\"\275\002\n\rShift_cmd_128\022\030\n\020ignore"
  "_overrides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clea"
  "r_override\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022="
  "\n\tshift_cmd\030\005 \001(\0162*.apollo.canbus.Shift_"
  "cmd_128.Shift_cmdType\"\224\001\n\rShift_cmdType\022"
  "\022\n\016SHIFT_CMD_PARK\020\000\022\025\n\021SHIFT_CMD_REVERSE"
  "\020\001\022\025\n\021SHIFT_CMD_NEUTRAL\020\002\022\032\n\026SHIFT_CMD_F"
  "ORWARD_HIGH\020\003\022\021\n\rSHIFT_CMD_LOW\020\004\022\022\n\016SHIF"
  "T_CMD_NONE\020\007\"z\n\rAccel_cmd_100\022\030\n\020ignore_"
  "overrides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear"
  "_override\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022\021\n"
  "\taccel_cmd\030\005 \001(\001\"\214\002\n\025Parking_brake_rpt_2"
  "24\022\025\n\rvehicle_fault\030\001 \001(\010\022\024\n\014pacmod_faul"
  "t\030\002 \001(\010\022\027\n\017override_active\030\003 \001(\010\022\035\n\025outp"
  "ut_reported_fault\030\004 \001(\010\022\032\n\022input_output_"
  "fault\030\005 \001(\010\022\017\n\007enabled\030\006 \001(\010\022\034\n\024command_"
  "output_fault\030\007 \001(\010\022\024\n\014output_value\030\010 \001(\010"
  "\022\027\n\017commanded_value\030\t \001(\010\022\024\n\014manual_inpu"
  "t\030\n \001(\010\"z\n\rBrake_cmd_104\022\030\n\020ignore_overr"
  "ides\030\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_over"
  "ride\030\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022\021\n\tbrak"
  "e_cmd\030\005 \001(\001\"\226\013\n\026Media_controls_rpt_220\022L"
  "\n\014output_value\030\001 \001(\01626.apollo.canbus.Med"
  "ia_controls_rpt_220.Output_valueType\022R\n\017"
  "commanded_value\030\002 \001(\01629.apollo.canbus.Me"
  "dia_controls_rpt_220.Commanded_valueType"
  "\022L\n\014manual_input\030\003 \001(\01626.apollo.canbus.M"
  "edia_controls_rpt_220.Manual_inputType\022\025"
  "\n\rvehicle_fault\030\004 \001(\010\022\024\n\014pacmod_fault\030\005 "
  "\001(\010\022\027\n\017override_active\030\006 \001(\010\022\035\n\025output_r"
  "eported_fault\030\007 \001(\010\022\032\n\022input_output_faul"
  "t\030\010 \001(\010\022\017\n\007enabled\030\t \001(\010\022\034\n\024command_outp"
  "ut_fault\030\n \001(\010\"\277\002\n\020Output_valueType\022#\n\037O"
  "UTPUT_VALUE_MEDIA_CONTROL_NONE\020\000\022,\n(OUTP"
  "UT_VALUE_MEDIA_CONTROL_VOICE_COMMAND\020\001\022#"
  "\n\037OUTPUT_VALUE_MEDIA_CONTROL_MUTE\020\002\0220\n,O"
  "UTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANS"
  "WER\020\003\0221\n-OUTPUT_VALUE_MEDIA_CONTROL_NEXT"
  "_TRACK_HANG_UP\020\004\022%\n!OUTPUT_VALUE_MEDIA_C"
  "ONTROL_VOL_UP\020\005\022\'\n#OUTPUT_VALUE_MEDIA_CO"
  "NTROL_VOL_DOWN\020\006\"\327\002\n\023Commanded_valueType"
  "\022&\n\"COMMANDED_VALUE_MEDIA_CONTROL_NONE\020\000"
  "\022/\n+COMMANDED_VALUE_MEDIA_CONTROL_VOICE_"
  "COMMAND\020\001\022&\n\"COMMANDED_VALUE_MEDIA_CONTR"
  "OL_MUTE\020\002\0223\n/COMMANDED_VALUE_MEDIA_CONTR"
  "OL_PREV_TRACK_ANSWER\020\003\0224\n0COMMANDED_VALU"
  "E_MEDIA_CONTROL_NEXT_TRACK_HANG_UP\020\004\022(\n$"
  "COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP\020\005\022*"
  "\n&COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN"
  "\020\006\"\277\002\n\020Manual_inputType\022#\n\037MANUAL_INPUT_"
  "MEDIA_CONTROL_NONE\020\000\022,\n(MANUAL_INPUT_MED"
  "IA_CONTROL_VOICE_COMMAND\020\001\022#\n\037MANUAL_INP"
  "UT_MEDIA_CONTROL_MUTE\020\002\0220\n,MANUAL_INPUT_"
  "MEDIA_CONTROL_PREV_TRACK_ANSWER\020\003\0221\n-MAN"
  "UAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_"
  "UP\020\004\022%\n!MANUAL_INPUT_MEDIA_CONTROL_VOL_U"
  "P\020\005\022\'\n#MANUAL_INPUT_MEDIA_CONTROL_VOL_DO"
  "WN\020\006\"\360\001\n\024Steering_aux_rpt_32c\022!\n\031user_in"
  "teraction_is_valid\030\001 \001(\010\022\030\n\020user_interac"
  "tion\030\002 \001(\010\022\036\n\026rotation_rate_is_valid\030\003 \001"
  "(\010\022\025\n\rrotation_rate\030\004 \001(\001\022\033\n\023raw_torque_"
  "is_valid\030\005 \001(\010\022\022\n\nraw_torque\030\006 \001(\001\022\035\n\025ra"
  "w_position_is_valid\030\007 \001(\010\022\024\n\014raw_positio"
  "n\030\010 \001(\001\"\311\001\n\027Lat_lon_heading_rpt_40e\022\017\n\007h"
  "eading\030\001 \001(\001\022\031\n\021longitude_seconds\030\002 \001(\005\022"
  "\031\n\021longitude_minutes\030\003 \001(\005\022\031\n\021longitude_"
  "degrees\030\004 \001(\005\022\030\n\020latitude_seconds\030\005 \001(\005\022"
  "\030\n\020latitude_minutes\030\006 \001(\005\022\030\n\020latitude_de"
  "grees\030\007 \001(\005\"$\n\020Yaw_rate_rpt_40d\022\020\n\010yaw_r"
  "ate\030\001 \001(\001\"\211\001\n\021Date_time_rpt_40f\022\023\n\013time_"
  "second\030\001 \001(\005\022\023\n\013time_minute\030\002 \001(\005\022\021\n\ttim"
  "e_hour\030\003 \001(\005\022\020\n\010date_day\030\004 \001(\005\022\022\n\ndate_m"
  "onth\030\005 \001(\005\022\021\n\tdate_year\030\006 \001(\005\"L\n\013Vin_rpt"
  "_414\022\022\n\nveh_serial\030\001 \001(\005\022\023\n\013veh_my_code\030"
  "\002 \001(\005\022\024\n\014veh_mfg_code\030\003 \001(\005\"\263\003\n\021Occupanc"
  "y_rpt_415\022&\n\036rear_seatbelt_buckled_is_va"
  "lid\030\001 \001(\010\022&\n\036pass_seatbelt_buckled_is_va"
  "lid\030\002 \001(\010\022(\n driver_seatbelt_buckled_is_"
  "valid\030\003 \001(\010\022#\n\033rear_seat_occupied_is_val"
  "id\030\004 \001(\010\022#\n\033pass_seat_occupied_is_valid\030"
  "\005 \001(\010\022%\n\035driver_seat_occupied_is_valid\030\006"
  " \001(\010\022\035\n\025rear_seatbelt_buckled\030\007 \001(\010\022\035\n\025p"
  "ass_seatbelt_buckled\030\010 \001(\010\022\037\n\027driver_sea"
  "tbelt_buckled\030\t \001(\010\022\032\n\022rear_seat_occupie"
  "d\030\n \001(\010\022\032\n\022pass_seat_occupied\030\013 \001(\010\022\034\n\024d"
  "river_seat_occupied\030\014 \001(\010\"\266\005\n\027Interior_l"
  "ights_rpt_416\022\032\n\022dim_level_is_valid\030\001 \001("
  "\010\022\037\n\027mood_lights_on_is_valid\030\002 \001(\010\022$\n\034re"
  "ar_dome_lights_on_is_valid\030\003 \001(\010\022%\n\035fron"
  "t_dome_lights_on_is_valid\030\004 \001(\010\022G\n\tdim_l"
  "evel\030\005 \001(\01624.apollo.canbus.Interior_ligh"
  "ts_rpt_416.Dim_levelType\022\026\n\016mood_lights_"
  "on\030\006 \001(\010\022\033\n\023rear_dome_lights_on\030\007 \001(\010\022\034\n"
  "\024front_dome_lights_on\030\010 \001(\010\"\364\002\n\rDim_leve"
  "lType\022\033\n\027DIM_LEVEL_DIM_LEVEL_MIN\020\000\022\031\n\025DI"
  "M_LEVEL_DIM_LEVEL_1\020\001\022\031\n\025DIM_LEVEL_DIM_L"
  "EVEL_2\020\002\022\031\n\025DIM_LEVEL_DIM_LEVEL_3\020\003\022\031\n\025D"
  "IM_LEVEL_DIM_LEVEL_4\020\004\022\031\n\025DIM_LEVEL_DIM_"
  "LEVEL_5\020\005\022\031\n\025DIM_LEVEL_DIM_LEVEL_6\020\006\022\031\n\025"
  "DIM_LEVEL_DIM_LEVEL_7\020\007\022\031\n\025DIM_LEVEL_DIM"
  "_LEVEL_8\020\010\022\031\n\025DIM_LEVEL_DIM_LEVEL_9\020\t\022\032\n"
  "\026DIM_LEVEL_DIM_LEVEL_10\020\n\022\032\n\026DIM_LEVEL_D"
  "IM_LEVEL_11\020\013\022\033\n\027DIM_LEVEL_DIM_LEVEL_MAX"
  "\020\014\"\263\002\n\014Turn_cmd_130\022\030\n\020ignore_overrides\030"
  "\001 \001(\010\022\016\n\006enable\030\002 \001(\010\022\026\n\016clear_override\030"
  "\003 \001(\010\022\024\n\014clear_faults\030\004 \001(\010\022H\n\017turn_sign"
  "al_cmd\030\005 \001(\0162/.apollo.canbus.Turn_cmd_13"
  "0.Turn_signal_cmdType\"\200\001\n\023Turn_signal_cm"
  "dType\022\031\n\025TURN_SIGNAL_CMD_RIGHT\020\000\022\030\n\024TURN"
  "_SIGNAL_CMD_NONE\020\001\022\030\n\024TURN_SIGNAL_CMD_LE"
  "FT\020\002\022\032\n\026TURN_SIGNAL_CMD_HAZARD\020\003\"h\n\027Dete"
  "cted_object_rpt_411\022&\n\036front_object_dist"
  "ance_high_res\030\001 \001(\001\022%\n\035front_object_dist"
  "ance_low_res\030\002 \001(\001\"B\n\026Veh_specific_rpt_1"
  "_412\022\023\n\013shift_pos_2\030\001 \001(\005\022\023\n\013shift_pos_1"
  "\030\002 \001(\005\",\n\024Veh_dynamics_rpt_413\022\024\n\014veh_g_"
  "forces\030\001 \001(\001\"\217\001\n\023Rear_lights_rpt_418\022\"\n\032"
  "reverse_lights_on_is_valid\030\001 \001(\010\022 \n\030brak"
  "e_lights_on_is_valid\030\002 \001(\010\022\031\n\021reverse_li"
  "ghts_on\030\003 \001(\010\022\027\n\017brake_lights_on\030\004 \001(\010\"\227"
  "\034\n\005Lexus\022C\n\025hazard_lights_rpt_214\030\001 \001(\0132"
  "$.apollo.canbus.Hazard_lights_rpt_214\0229\n"
  "\020steering_cmd_12c\030\002 \001(\0132\037.apollo.canbus."
  "Steering_cmd_12c\022O\n\033dash_controls_right_"
  "rpt_210\030\003 \001(\0132*.apollo.canbus.Dash_contr"
  "ols_right_rpt_210\022M\n\032dash_controls_left_"
  "cmd_10c\030\004 \001(\0132).apollo.canbus.Dash_contr"
  "ols_left_cmd_10c\0229\n\020steering_rpt_22c\030\005 \001"
  "(\0132\037.apollo.canbus.Steering_rpt_22c\0229\n\020t"
  "urn_aux_rpt_330\030\006 \001(\0132\037.apollo.canbus.Tu"
  "rn_aux_rpt_330\022;\n\021headlight_rpt_218\030\007 \001("
  "\0132 .apollo.canbus.Headlight_rpt_218\022C\n\025h"
  "azard_lights_cmd_114\030\010 \001(\0132$.apollo.canb"
  "us.Hazard_lights_cmd_114\022M\n\032dash_control"
  "s_left_rpt_20c\030\t \001(\0132).apollo.canbus.Das"
  "h_controls_left_rpt_20c\022C\n\025headlight_aux"
  "_rpt_318\030\n \001(\0132$.apollo.canbus.Headlight"
  "_aux_rpt_318\022O\n\033dash_controls_right_cmd_"
  "110\030\013 \001(\0132*.apollo.canbus.Dash_controls_"
  "right_cmd_110\0223\n\rwiper_cmd_134\030\014 \001(\0132\034.a"
  "pollo.canbus.Wiper_cmd_134\0223\n\rwiper_rpt_"
  "234\030\r \001(\0132\034.apollo.canbus.Wiper_rpt_234\022"
  "1\n\014turn_rpt_230\030\016 \001(\0132\033.apollo.canbus.Tu"
  "rn_rpt_230\022;\n\021headlight_cmd_118\030\017 \001(\0132 ."
  "apollo.canbus.Headlight_cmd_118\0221\n\014door_"
  "rpt_417\030\020 \001(\0132\033.apollo.canbus.Door_rpt_4"
  "17\0229\n\020component_rpt_20\030\021 \001(\0132\037.apollo.ca"
  "nbus.Component_rpt_20\022\?\n\023wheel_speed_rpt"
  "_407\030\022 \001(\0132\".apollo.canbus.Wheel_speed_r"
  "pt_407\022I\n\030steering_motor_rpt_3_406\030\023 \001(\013"
  "2\'.apollo.canbus.Steering_motor_rpt_3_40"
  "6\022I\n\030steering_motor_rpt_2_405\030\024 \001(\0132\'.ap"
  "ollo.canbus.Steering_motor_rpt_2_405\022I\n\030"
  "steering_motor_rpt_1_404\030\025 \001(\0132\'.apollo."
  "canbus.Steering_motor_rpt_1_404\022C\n\025brake"
  "_motor_rpt_3_403\030\026 \001(\0132$.apollo.canbus.B"
  "rake_motor_rpt_3_403\022C\n\025brake_motor_rpt_"
  "2_402\030\027 \001(\0132$.apollo.canbus.Brake_motor_"
  "rpt_2_402\022C\n\025brake_motor_rpt_1_401\030\030 \001(\013"
  "2$.apollo.canbus.Brake_motor_rpt_1_401\022;"
  "\n\021wiper_aux_rpt_334\030\031 \001(\0132 .apollo.canbu"
  "s.Wiper_aux_rpt_334\022;\n\021shift_aux_rpt_328"
  "\030\032 \001(\0132 .apollo.canbus.Shift_aux_rpt_328"
  "\0223\n\raccel_rpt_200\030\033 \001(\0132\034.apollo.canbus."
  "Accel_rpt_200\0223\n\rbrake_rpt_204\030\034 \001(\0132\034.a"
  "pollo.canbus.Brake_rpt_204\0221\n\014horn_cmd_1"
  "1c\030\035 \001(\0132\033.apollo.canbus.Horn_cmd_11c\0223\n"
  "\rglobal_rpt_10\030\036 \001(\0132\034.apollo.canbus.Glo"
  "bal_rpt_10\022;\n\021accel_aux_rpt_300\030\037 \001(\0132 ."
  "apollo.canbus.Accel_aux_rpt_300\022U\n\036cruis"
  "e_control_buttons_rpt_208\030  \001(\0132-.apollo"
  ".canbus.Cruise_control_buttons_rpt_208\022C"
  "\n\025vehicle_speed_rpt_400\030! \001(\0132$.apollo.c"
  "anbus.Vehicle_speed_rpt_400\022;\n\021brake_aux"
  "_rpt_304\030\" \001(\0132 .apollo.canbus.Brake_aux"
  "_rpt_304\022E\n\026media_controls_cmd_120\030# \001(\013"
  "2%.apollo.canbus.Media_controls_cmd_120\022"
  "U\n\036cruise_control_buttons_cmd_108\030$ \001(\0132"
  "-.apollo.canbus.Cruise_control_buttons_c"
  "md_108\022C\n\025parking_brake_cmd_124\030% \001(\0132$."
  "apollo.canbus.Parking_brake_cmd_124\0221\n\014h"
  "orn_rpt_21c\030& \001(\0132\033.apollo.canbus.Horn_r"
  "pt_21c\0223\n\rshift_rpt_228\030\' \001(\0132\034.apollo.c"
  "anbus.Shift_rpt_228\0223\n\rshift_cmd_128\030( \001"
  "(\0132\034.apollo.canbus.Shift_cmd_128\0223\n\racce"
  "l_cmd_100\030) \001(\0132\034.apollo.canbus.Accel_cm"
  "d_100\022C\n\025parking_brake_rpt_224\030* \001(\0132$.a"
  "pollo.canbus.Parking_brake_rpt_224\0223\n\rbr"
  "ake_cmd_104\030+ \001(\0132\034.apollo.canbus.Brake_"
  "cmd_104\022E\n\026media_controls_rpt_220\030, \001(\0132"
  "%.apollo.canbus.Media_controls_rpt_220\022A"
  "\n\024steering_aux_rpt_32c\030- \001(\0132#.apollo.ca"
  "nbus.Steering_aux_rpt_32c\022G\n\027lat_lon_hea"
  "ding_rpt_40e\030. \001(\0132&.apollo.canbus.Lat_l"
  "on_heading_rpt_40e\0229\n\020yaw_rate_rpt_40d\030/"
  " \001(\0132\037.apollo.canbus.Yaw_rate_rpt_40d\022;\n"
  "\021date_time_rpt_40f\0300 \001(\0132 .apollo.canbus"
  ".Date_time_rpt_40f\022/\n\013vin_rpt_414\0301 \001(\0132"
  "\032.apollo.canbus.Vin_rpt_414\022;\n\021occupancy"
  "_rpt_415\0302 \001(\0132 .apollo.canbus.Occupancy"
  "_rpt_415\022G\n\027interior_lights_rpt_416\0303 \001("
  "\0132&.apollo.canbus.Interior_lights_rpt_41"
  "6\0221\n\014turn_cmd_130\0304 \001(\0132\033.apollo.canbus."
  "Turn_cmd_130\022G\n\027detected_object_rpt_411\030"
  "5 \001(\0132&.apollo.canbus.Detected_object_rp"
  "t_411\022E\n\026veh_specific_rpt_1_412\0306 \001(\0132%."
  "apollo.canbus.Veh_specific_rpt_1_412\022A\n\024"
  "veh_dynamics_rpt_413\0307 \001(\0132#.apollo.canb"
  "us.Veh_dynamics_rpt_413\022\?\n\023rear_lights_r"
  "pt_418\0308 \001(\0132\".apollo.canbus.Rear_lights"
  "_rpt_418"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_sccs[57] = {
  &scc_info_Accel_aux_rpt_300_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Accel_cmd_100_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Accel_rpt_200_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Brake_aux_rpt_304_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Brake_cmd_104_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Brake_motor_rpt_1_401_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Brake_motor_rpt_2_402_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Brake_motor_rpt_3_403_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Brake_rpt_204_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Component_rpt_20_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Cruise_control_buttons_cmd_108_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Cruise_control_buttons_rpt_208_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Dash_controls_left_cmd_10c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Dash_controls_left_rpt_20c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Dash_controls_right_cmd_110_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Dash_controls_right_rpt_210_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Date_time_rpt_40f_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Detected_object_rpt_411_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Door_rpt_417_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Global_rpt_10_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Hazard_lights_cmd_114_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Hazard_lights_rpt_214_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Headlight_aux_rpt_318_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Headlight_cmd_118_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Headlight_rpt_218_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Horn_cmd_11c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Horn_rpt_21c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Interior_lights_rpt_416_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Lat_lon_heading_rpt_40e_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Lexus_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Media_controls_cmd_120_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Media_controls_rpt_220_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Occupancy_rpt_415_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Parking_brake_cmd_124_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Parking_brake_rpt_224_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Rear_lights_rpt_418_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Shift_aux_rpt_328_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Shift_cmd_128_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Shift_rpt_228_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Steering_aux_rpt_32c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Steering_cmd_12c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Steering_motor_rpt_1_404_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Steering_motor_rpt_2_405_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Steering_motor_rpt_3_406_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Steering_rpt_22c_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Turn_aux_rpt_330_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Turn_cmd_130_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Turn_rpt_230_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Veh_dynamics_rpt_413_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Veh_specific_rpt_1_412_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Vehicle_speed_rpt_400_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Vin_rpt_414_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Wheel_speed_rpt_407_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Wiper_aux_rpt_334_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Wiper_cmd_134_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Wiper_rpt_234_modules_2fcanbus_2fproto_2flexus_2eproto.base,
  &scc_info_Yaw_rate_rpt_40d_modules_2fcanbus_2fproto_2flexus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once;
static bool descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto = {
  &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_initialized, descriptor_table_protodef_modules_2fcanbus_2fproto_2flexus_2eproto, "modules/canbus/proto/lexus.proto", 25848,
  &descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_sccs, descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto_deps, 57, 0,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2flexus_2eproto, 57, file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcanbus_2fproto_2flexus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto), true);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[0];
}
bool Dash_controls_right_rpt_210_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_OK;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_LEFT;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_RIGHT;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_UP;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::OUTPUT_VALUE_DASH_CONTROL_DOWN;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::Output_valueType_MIN;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::Output_valueType_MAX;
constexpr int Dash_controls_right_rpt_210::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[1];
}
bool Dash_controls_right_rpt_210_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_OK;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_LEFT;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_RIGHT;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_UP;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::COMMANDED_VALUE_DASH_CONTROL_DOWN;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::Commanded_valueType_MIN;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::Commanded_valueType_MAX;
constexpr int Dash_controls_right_rpt_210::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[2];
}
bool Dash_controls_right_rpt_210_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_OK;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_LEFT;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_RIGHT;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_UP;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::MANUAL_INPUT_DASH_CONTROL_DOWN;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::Manual_inputType_MIN;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::Manual_inputType_MAX;
constexpr int Dash_controls_right_rpt_210::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_cmd_10c_Dash_controls_buttonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[3];
}
bool Dash_controls_left_cmd_10c_Dash_controls_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_OK;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_UP;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::Dash_controls_buttonType_MIN;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::Dash_controls_buttonType_MAX;
constexpr int Dash_controls_left_cmd_10c::Dash_controls_buttonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[4];
}
bool Headlight_rpt_218_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::OUTPUT_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::OUTPUT_VALUE_LOW_BEAMS;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::OUTPUT_VALUE_HIGH_BEAMS;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::Output_valueType_MIN;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218::Output_valueType_MAX;
constexpr int Headlight_rpt_218::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[5];
}
bool Headlight_rpt_218_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::MANUAL_INPUT_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::MANUAL_INPUT_LOW_BEAMS;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::MANUAL_INPUT_HIGH_BEAMS;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::Manual_inputType_MIN;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218::Manual_inputType_MAX;
constexpr int Headlight_rpt_218::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[6];
}
bool Headlight_rpt_218_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::COMMANDED_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::COMMANDED_VALUE_LOW_BEAMS;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::COMMANDED_VALUE_HIGH_BEAMS;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::Commanded_valueType_MIN;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::Commanded_valueType_MAX;
constexpr int Headlight_rpt_218::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[7];
}
bool Dash_controls_left_rpt_20c_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_OK;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_LEFT;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_RIGHT;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_UP;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::OUTPUT_VALUE_DASH_CONTROL_DOWN;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::Output_valueType_MIN;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::Output_valueType_MAX;
constexpr int Dash_controls_left_rpt_20c::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[8];
}
bool Dash_controls_left_rpt_20c_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_OK;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_LEFT;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_RIGHT;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_UP;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::COMMANDED_VALUE_DASH_CONTROL_DOWN;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::Commanded_valueType_MIN;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::Commanded_valueType_MAX;
constexpr int Dash_controls_left_rpt_20c::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[9];
}
bool Dash_controls_left_rpt_20c_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_OK;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_LEFT;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_RIGHT;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_UP;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::MANUAL_INPUT_DASH_CONTROL_DOWN;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::Manual_inputType_MIN;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::Manual_inputType_MAX;
constexpr int Dash_controls_left_rpt_20c::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_aux_rpt_318_Headlights_modeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[10];
}
bool Headlight_aux_rpt_318_Headlights_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::HEADLIGHTS_MODE_HEADLIGHTS_OFF;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::HEADLIGHTS_MODE_PARKING_LIGHTS_ONLY;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::HEADLIGHTS_MODE_HEADLIGHTS_ON_MANUAL_MODE;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::HEADLIGHTS_MODE_HEADLIGHTS_ON_AUTO_MODE;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::Headlights_modeType_MIN;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::Headlights_modeType_MAX;
constexpr int Headlight_aux_rpt_318::Headlights_modeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_cmd_110_Dash_controls_buttonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[11];
}
bool Dash_controls_right_cmd_110_Dash_controls_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_OK;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_UP;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::Dash_controls_buttonType_MIN;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::Dash_controls_buttonType_MAX;
constexpr int Dash_controls_right_cmd_110::Dash_controls_buttonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_cmd_134_Wiper_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[12];
}
bool Wiper_cmd_134_Wiper_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_WIPERS_OFF;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_1;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_2;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_3;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_4;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_INTERMITTENT_5;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_LOW;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::WIPER_CMD_HIGH;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::Wiper_cmdType_MIN;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::Wiper_cmdType_MAX;
constexpr int Wiper_cmd_134::Wiper_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[13];
}
bool Wiper_rpt_234_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_1;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_2;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_3;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_4;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_INTERMITTENT_5;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_LOW;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::OUTPUT_VALUE_HIGH;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::Output_valueType_MIN;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234::Output_valueType_MAX;
constexpr int Wiper_rpt_234::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[14];
}
bool Wiper_rpt_234_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_1;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_2;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_3;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_4;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_INTERMITTENT_5;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_LOW;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::COMMANDED_VALUE_HIGH;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::Commanded_valueType_MIN;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::Commanded_valueType_MAX;
constexpr int Wiper_rpt_234::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[15];
}
bool Wiper_rpt_234_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_WIPERS_OFF;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_1;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_2;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_3;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_4;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_INTERMITTENT_5;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_LOW;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::MANUAL_INPUT_HIGH;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::Manual_inputType_MIN;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234::Manual_inputType_MAX;
constexpr int Wiper_rpt_234::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[16];
}
bool Turn_rpt_230_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::MANUAL_INPUT_RIGHT;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::MANUAL_INPUT_NONE;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::MANUAL_INPUT_LEFT;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::MANUAL_INPUT_HAZARD;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::Manual_inputType_MIN;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230::Manual_inputType_MAX;
constexpr int Turn_rpt_230::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[17];
}
bool Turn_rpt_230_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::COMMANDED_VALUE_RIGHT;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::COMMANDED_VALUE_NONE;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::COMMANDED_VALUE_LEFT;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::COMMANDED_VALUE_HAZARD;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::Commanded_valueType_MIN;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230::Commanded_valueType_MAX;
constexpr int Turn_rpt_230::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[18];
}
bool Turn_rpt_230_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::OUTPUT_VALUE_RIGHT;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::OUTPUT_VALUE_NONE;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::OUTPUT_VALUE_LEFT;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::OUTPUT_VALUE_HAZARD;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::Output_valueType_MIN;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230::Output_valueType_MAX;
constexpr int Turn_rpt_230::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_cmd_118_Headlight_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[19];
}
bool Headlight_cmd_118_Headlight_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::HEADLIGHT_CMD_HEADLIGHTS_OFF;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::HEADLIGHT_CMD_LOW_BEAMS;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::HEADLIGHT_CMD_HIGH_BEAMS;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::Headlight_cmdType_MIN;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::Headlight_cmdType_MAX;
constexpr int Headlight_cmd_118::Headlight_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_rpt_20_Component_typeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[20];
}
bool Component_rpt_20_Component_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Component_rpt_20_Component_typeType Component_rpt_20::COMPONENT_TYPE_PACMOD;
constexpr Component_rpt_20_Component_typeType Component_rpt_20::COMPONENT_TYPE_PACMINI;
constexpr Component_rpt_20_Component_typeType Component_rpt_20::COMPONENT_TYPE_PACMICRO;
constexpr Component_rpt_20_Component_typeType Component_rpt_20::Component_typeType_MIN;
constexpr Component_rpt_20_Component_typeType Component_rpt_20::Component_typeType_MAX;
constexpr int Component_rpt_20::Component_typeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_rpt_20_Component_funcType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[21];
}
bool Component_rpt_20_Component_funcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_PACMOD;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_STEERING_AND_STEERING_COLUMN;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_ACCELERATOR_AND_BRAKING;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_BRAKING;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_SHIFTING;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_STEERING;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_E_SHIFTER;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::COMPONENT_FUNC_WATCHDOG;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::Component_funcType_MIN;
constexpr Component_rpt_20_Component_funcType Component_rpt_20::Component_funcType_MAX;
constexpr int Component_rpt_20::Component_funcType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_cmd_11c_Horn_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[22];
}
bool Horn_cmd_11c_Horn_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::HORN_CMD_OFF;
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::HORN_CMD_ON;
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::Horn_cmdType_MIN;
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::Horn_cmdType_MAX;
constexpr int Horn_cmd_11c::Horn_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Pacmod_system_enabledType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[23];
}
bool Global_rpt_10_Pacmod_system_enabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::PACMOD_SYSTEM_ENABLED_CONTROL_DISABLED;
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::PACMOD_SYSTEM_ENABLED_CONTROL_ENABLED;
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::Pacmod_system_enabledType_MIN;
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::Pacmod_system_enabledType_MAX;
constexpr int Global_rpt_10::Pacmod_system_enabledType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Pacmod_system_override_activeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[24];
}
bool Global_rpt_10_Pacmod_system_override_activeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::PACMOD_SYSTEM_OVERRIDE_ACTIVE_NOT_OVERRIDDEN;
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::PACMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN;
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::Pacmod_system_override_activeType_MIN;
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::Pacmod_system_override_activeType_MAX;
constexpr int Global_rpt_10::Pacmod_system_override_activeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Brk_can_timeoutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[25];
}
bool Global_rpt_10_Brk_can_timeoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10::BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10::BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10::Brk_can_timeoutType_MIN;
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10::Brk_can_timeoutType_MAX;
constexpr int Global_rpt_10::Brk_can_timeoutType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[26];
}
bool Cruise_control_buttons_rpt_208_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_CNCL;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOSER;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_SET_DEC;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_RES_INC;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::OUTPUT_VALUE_CRUISE_CONTROL_ON_OFF;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::Output_valueType_MIN;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::Output_valueType_MAX;
constexpr int Cruise_control_buttons_rpt_208::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[27];
}
bool Cruise_control_buttons_rpt_208_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_CNCL;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_ACC_FURTHER;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_ACC_CLOSER;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_SET_DEC;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_RES_INC;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::MANUAL_INPUT_CRUISE_CONTROL_ON_OFF;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::Manual_inputType_MIN;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::Manual_inputType_MAX;
constexpr int Cruise_control_buttons_rpt_208::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[28];
}
bool Cruise_control_buttons_rpt_208_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_CNCL;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_ACC_FURTHER;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_ACC_CLOSER;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_SET_DEC;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_RES_INC;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::COMMANDED_VALUE_CRUISE_CONTROL_ON_OFF;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::Commanded_valueType_MIN;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::Commanded_valueType_MAX;
constexpr int Cruise_control_buttons_rpt_208::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_speed_rpt_400_Vehicle_speed_validType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[29];
}
bool Vehicle_speed_rpt_400_Vehicle_speed_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::VEHICLE_SPEED_VALID_INVALID;
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::VEHICLE_SPEED_VALID_VALID;
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::Vehicle_speed_validType_MIN;
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::Vehicle_speed_validType_MAX;
constexpr int Vehicle_speed_rpt_400::Vehicle_speed_validType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_cmd_120_Media_controls_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[30];
}
bool Media_controls_cmd_120_Media_controls_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::Media_controls_cmdType_MIN;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::Media_controls_cmdType_MAX;
constexpr int Media_controls_cmd_120::Media_controls_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_cmd_108_Cruise_control_buttonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[31];
}
bool Cruise_control_buttons_cmd_108_Cruise_control_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_CNCL;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_FURTHER;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_CLOSER;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_SET_DEC;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_INC;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ON_OFF;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::Cruise_control_buttonType_MIN;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::Cruise_control_buttonType_MAX;
constexpr int Cruise_control_buttons_cmd_108::Cruise_control_buttonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[32];
}
bool Horn_rpt_21c_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c::OUTPUT_VALUE_OFF;
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c::OUTPUT_VALUE_ON;
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c::Output_valueType_MIN;
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c::Output_valueType_MAX;
constexpr int Horn_rpt_21c::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[33];
}
bool Horn_rpt_21c_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::COMMANDED_VALUE_OFF;
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::COMMANDED_VALUE_ON;
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::Commanded_valueType_MIN;
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::Commanded_valueType_MAX;
constexpr int Horn_rpt_21c::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[34];
}
bool Horn_rpt_21c_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c::MANUAL_INPUT_OFF;
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c::MANUAL_INPUT_ON;
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c::Manual_inputType_MIN;
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c::Manual_inputType_MAX;
constexpr int Horn_rpt_21c::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[35];
}
bool Shift_rpt_228_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_PARK;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_REVERSE;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_NEUTRAL;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_FORWARD_HIGH;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_LOW;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_BETWEEN_GEARS;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_ERROR;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::MANUAL_INPUT_NONE;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::Manual_inputType_MIN;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228::Manual_inputType_MAX;
constexpr int Shift_rpt_228::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[36];
}
bool Shift_rpt_228_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_PARK;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_REVERSE;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_NEUTRAL;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_FORWARD_HIGH;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_LOW;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::COMMANDED_VALUE_NONE;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::Commanded_valueType_MIN;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228::Commanded_valueType_MAX;
constexpr int Shift_rpt_228::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[37];
}
bool Shift_rpt_228_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_PARK;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_REVERSE;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_NEUTRAL;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_FORWARD_HIGH;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_LOW;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_BETWEEN_GEARS;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_ERROR;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::OUTPUT_VALUE_NONE;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::Output_valueType_MIN;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228::Output_valueType_MAX;
constexpr int Shift_rpt_228::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_cmd_128_Shift_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[38];
}
bool Shift_cmd_128_Shift_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_PARK;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_REVERSE;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_NEUTRAL;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_FORWARD_HIGH;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_LOW;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::SHIFT_CMD_NONE;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::Shift_cmdType_MIN;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128::Shift_cmdType_MAX;
constexpr int Shift_cmd_128::Shift_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[39];
}
bool Media_controls_rpt_220_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_VOICE_COMMAND;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_MUTE;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_VOL_UP;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::OUTPUT_VALUE_MEDIA_CONTROL_VOL_DOWN;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::Output_valueType_MIN;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::Output_valueType_MAX;
constexpr int Media_controls_rpt_220::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[40];
}
bool Media_controls_rpt_220_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_VOICE_COMMAND;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_MUTE;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::Commanded_valueType_MIN;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::Commanded_valueType_MAX;
constexpr int Media_controls_rpt_220::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[41];
}
bool Media_controls_rpt_220_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_VOICE_COMMAND;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_MUTE;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_PREV_TRACK_ANSWER;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_VOL_UP;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::MANUAL_INPUT_MEDIA_CONTROL_VOL_DOWN;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::Manual_inputType_MIN;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::Manual_inputType_MAX;
constexpr int Media_controls_rpt_220::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interior_lights_rpt_416_Dim_levelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[42];
}
bool Interior_lights_rpt_416_Dim_levelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_MIN;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_1;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_2;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_3;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_4;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_5;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_6;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_7;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_8;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_9;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_10;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_11;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::DIM_LEVEL_DIM_LEVEL_MAX;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::Dim_levelType_MIN;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::Dim_levelType_MAX;
constexpr int Interior_lights_rpt_416::Dim_levelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_cmd_130_Turn_signal_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2flexus_2eproto[43];
}
bool Turn_cmd_130_Turn_signal_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::TURN_SIGNAL_CMD_RIGHT;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::TURN_SIGNAL_CMD_NONE;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::TURN_SIGNAL_CMD_LEFT;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::TURN_SIGNAL_CMD_HAZARD;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::Turn_signal_cmdType_MIN;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::Turn_signal_cmdType_MAX;
constexpr int Turn_cmd_130::Turn_signal_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Hazard_lights_rpt_214::InitAsDefaultInstance() {
}
class Hazard_lights_rpt_214::_Internal {
 public:
  using HasBits = decltype(std::declval<Hazard_lights_rpt_214>()._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Hazard_lights_rpt_214::Hazard_lights_rpt_214()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Hazard_lights_rpt_214)
}
Hazard_lights_rpt_214::Hazard_lights_rpt_214(const Hazard_lights_rpt_214& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_output_fault_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(command_output_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Hazard_lights_rpt_214)
}

void Hazard_lights_rpt_214::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_output_fault_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(command_output_fault_));
}

Hazard_lights_rpt_214::~Hazard_lights_rpt_214() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Hazard_lights_rpt_214)
  SharedDtor();
}

void Hazard_lights_rpt_214::SharedDtor() {
}

void Hazard_lights_rpt_214::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hazard_lights_rpt_214& Hazard_lights_rpt_214::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hazard_lights_rpt_214_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Hazard_lights_rpt_214::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Hazard_lights_rpt_214)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_output_fault_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(input_output_fault_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_output_fault_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(command_output_fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Hazard_lights_rpt_214::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_output_value(&has_bits);
          output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_commanded_value(&has_bits);
          commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_manual_input(&has_bits);
          manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hazard_lights_rpt_214::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Hazard_lights_rpt_214)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_output_value(), target);
  }

  // optional bool commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_commanded_value(), target);
  }

  // optional bool manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_manual_input(), target);
  }

  // optional bool vehicle_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_command_output_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Hazard_lights_rpt_214)
  return target;
}

size_t Hazard_lights_rpt_214::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Hazard_lights_rpt_214)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool vehicle_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hazard_lights_rpt_214::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Hazard_lights_rpt_214)
  GOOGLE_DCHECK_NE(&from, this);
  const Hazard_lights_rpt_214* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hazard_lights_rpt_214>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Hazard_lights_rpt_214)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Hazard_lights_rpt_214)
    MergeFrom(*source);
  }
}

void Hazard_lights_rpt_214::MergeFrom(const Hazard_lights_rpt_214& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Hazard_lights_rpt_214)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_output_fault_ = from.input_output_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      command_output_fault_ = from.command_output_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Hazard_lights_rpt_214::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Hazard_lights_rpt_214)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hazard_lights_rpt_214::CopyFrom(const Hazard_lights_rpt_214& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Hazard_lights_rpt_214)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hazard_lights_rpt_214::IsInitialized() const {
  return true;
}

void Hazard_lights_rpt_214::InternalSwap(Hazard_lights_rpt_214* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hazard_lights_rpt_214::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_cmd_12c::InitAsDefaultInstance() {
}
class Steering_cmd_12c::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_cmd_12c>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rotation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_cmd_12c::Steering_cmd_12c()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_cmd_12c)
}
Steering_cmd_12c::Steering_cmd_12c(const Steering_cmd_12c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_faults_) -
    reinterpret_cast<char*>(&position_)) + sizeof(clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_cmd_12c)
}

void Steering_cmd_12c::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_faults_) -
      reinterpret_cast<char*>(&position_)) + sizeof(clear_faults_));
}

Steering_cmd_12c::~Steering_cmd_12c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_cmd_12c)
  SharedDtor();
}

void Steering_cmd_12c::SharedDtor() {
}

void Steering_cmd_12c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_cmd_12c& Steering_cmd_12c::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_cmd_12c_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Steering_cmd_12c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_cmd_12c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clear_faults_) -
        reinterpret_cast<char*>(&position_)) + sizeof(clear_faults_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_cmd_12c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rotation_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_rotation_rate(&has_bits);
          rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_cmd_12c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_cmd_12c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional double position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_position(), target);
  }

  // optional double rotation_rate = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_rotation_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_cmd_12c)
  return target;
}

size_t Steering_cmd_12c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_cmd_12c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double position = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double rotation_rate = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_cmd_12c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_cmd_12c)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_cmd_12c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_cmd_12c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_cmd_12c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_cmd_12c)
    MergeFrom(*source);
  }
}

void Steering_cmd_12c::MergeFrom(const Steering_cmd_12c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_cmd_12c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000002u) {
      rotation_rate_ = from.rotation_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000020u) {
      clear_faults_ = from.clear_faults_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_cmd_12c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_cmd_12c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_cmd_12c::CopyFrom(const Steering_cmd_12c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_cmd_12c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_cmd_12c::IsInitialized() const {
  return true;
}

void Steering_cmd_12c::InternalSwap(Steering_cmd_12c* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(rotation_rate_, other->rotation_rate_);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_cmd_12c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dash_controls_right_rpt_210::InitAsDefaultInstance() {
}
class Dash_controls_right_rpt_210::_Internal {
 public:
  using HasBits = decltype(std::declval<Dash_controls_right_rpt_210>()._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Dash_controls_right_rpt_210::Dash_controls_right_rpt_210()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Dash_controls_right_rpt_210)
}
Dash_controls_right_rpt_210::Dash_controls_right_rpt_210(const Dash_controls_right_rpt_210& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_input_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Dash_controls_right_rpt_210)
}

void Dash_controls_right_rpt_210::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_input_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
}

Dash_controls_right_rpt_210::~Dash_controls_right_rpt_210() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Dash_controls_right_rpt_210)
  SharedDtor();
}

void Dash_controls_right_rpt_210::SharedDtor() {
}

void Dash_controls_right_rpt_210::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dash_controls_right_rpt_210& Dash_controls_right_rpt_210::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dash_controls_right_rpt_210_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Dash_controls_right_rpt_210::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Dash_controls_right_rpt_210)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enabled_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(enabled_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&command_output_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&command_output_fault_)) + sizeof(manual_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Dash_controls_right_rpt_210::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Dash_controls_right_rpt_210.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_rpt_210.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_rpt_210.Manual_inputType manual_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dash_controls_right_rpt_210::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Dash_controls_right_rpt_210)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Dash_controls_right_rpt_210.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Dash_controls_right_rpt_210.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional bool vehicle_fault = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Dash_controls_right_rpt_210.Manual_inputType manual_input = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Dash_controls_right_rpt_210)
  return target;
}

size_t Dash_controls_right_rpt_210::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Dash_controls_right_rpt_210)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Dash_controls_right_rpt_210.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Dash_controls_right_rpt_210.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional bool vehicle_fault = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool command_output_fault = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Dash_controls_right_rpt_210.Manual_inputType manual_input = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dash_controls_right_rpt_210::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Dash_controls_right_rpt_210)
  GOOGLE_DCHECK_NE(&from, this);
  const Dash_controls_right_rpt_210* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dash_controls_right_rpt_210>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Dash_controls_right_rpt_210)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Dash_controls_right_rpt_210)
    MergeFrom(*source);
  }
}

void Dash_controls_right_rpt_210::MergeFrom(const Dash_controls_right_rpt_210& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Dash_controls_right_rpt_210)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000008u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000020u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000040u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000200u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dash_controls_right_rpt_210::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Dash_controls_right_rpt_210)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dash_controls_right_rpt_210::CopyFrom(const Dash_controls_right_rpt_210& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Dash_controls_right_rpt_210)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dash_controls_right_rpt_210::IsInitialized() const {
  return true;
}

void Dash_controls_right_rpt_210::InternalSwap(Dash_controls_right_rpt_210* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(manual_input_, other->manual_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dash_controls_right_rpt_210::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dash_controls_left_cmd_10c::InitAsDefaultInstance() {
}
class Dash_controls_left_cmd_10c::_Internal {
 public:
  using HasBits = decltype(std::declval<Dash_controls_left_cmd_10c>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dash_controls_button(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Dash_controls_left_cmd_10c::Dash_controls_left_cmd_10c()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Dash_controls_left_cmd_10c)
}
Dash_controls_left_cmd_10c::Dash_controls_left_cmd_10c(const Dash_controls_left_cmd_10c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_overrides_, &from.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&dash_controls_button_) -
    reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(dash_controls_button_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Dash_controls_left_cmd_10c)
}

void Dash_controls_left_cmd_10c::SharedCtor() {
  ::memset(&ignore_overrides_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dash_controls_button_) -
      reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(dash_controls_button_));
}

Dash_controls_left_cmd_10c::~Dash_controls_left_cmd_10c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Dash_controls_left_cmd_10c)
  SharedDtor();
}

void Dash_controls_left_cmd_10c::SharedDtor() {
}

void Dash_controls_left_cmd_10c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dash_controls_left_cmd_10c& Dash_controls_left_cmd_10c::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dash_controls_left_cmd_10c_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Dash_controls_left_cmd_10c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Dash_controls_left_cmd_10c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dash_controls_button_) -
        reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(dash_controls_button_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Dash_controls_left_cmd_10c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_cmd_10c.Dash_controls_buttonType dash_controls_button = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType_IsValid(val))) {
            _internal_set_dash_controls_button(static_cast<::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dash_controls_left_cmd_10c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Dash_controls_left_cmd_10c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Dash_controls_left_cmd_10c.Dash_controls_buttonType dash_controls_button = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dash_controls_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Dash_controls_left_cmd_10c)
  return target;
}

size_t Dash_controls_left_cmd_10c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Dash_controls_left_cmd_10c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Dash_controls_left_cmd_10c.Dash_controls_buttonType dash_controls_button = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dash_controls_button());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dash_controls_left_cmd_10c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Dash_controls_left_cmd_10c)
  GOOGLE_DCHECK_NE(&from, this);
  const Dash_controls_left_cmd_10c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dash_controls_left_cmd_10c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Dash_controls_left_cmd_10c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Dash_controls_left_cmd_10c)
    MergeFrom(*source);
  }
}

void Dash_controls_left_cmd_10c::MergeFrom(const Dash_controls_left_cmd_10c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Dash_controls_left_cmd_10c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_faults_ = from.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      dash_controls_button_ = from.dash_controls_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dash_controls_left_cmd_10c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Dash_controls_left_cmd_10c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dash_controls_left_cmd_10c::CopyFrom(const Dash_controls_left_cmd_10c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Dash_controls_left_cmd_10c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dash_controls_left_cmd_10c::IsInitialized() const {
  return true;
}

void Dash_controls_left_cmd_10c::InternalSwap(Dash_controls_left_cmd_10c* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
  swap(dash_controls_button_, other->dash_controls_button_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dash_controls_left_cmd_10c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_rpt_22c::InitAsDefaultInstance() {
}
class Steering_rpt_22c::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_rpt_22c>()._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Steering_rpt_22c::Steering_rpt_22c()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_rpt_22c)
}
Steering_rpt_22c::Steering_rpt_22c(const Steering_rpt_22c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_fault_, &from.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_rpt_22c)
}

void Steering_rpt_22c::SharedCtor() {
  ::memset(&vehicle_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
}

Steering_rpt_22c::~Steering_rpt_22c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_rpt_22c)
  SharedDtor();
}

void Steering_rpt_22c::SharedDtor() {
}

void Steering_rpt_22c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_rpt_22c& Steering_rpt_22c::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_rpt_22c_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Steering_rpt_22c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_rpt_22c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&commanded_value_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_rpt_22c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_manual_input(&has_bits);
          manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_commanded_value(&has_bits);
          commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_output_value(&has_bits);
          output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_rpt_22c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_rpt_22c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional double manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_rpt_22c)
  return target;
}

size_t Steering_rpt_22c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_rpt_22c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_rpt_22c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_rpt_22c)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_rpt_22c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_rpt_22c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_rpt_22c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_rpt_22c)
    MergeFrom(*source);
  }
}

void Steering_rpt_22c::MergeFrom(const Steering_rpt_22c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_rpt_22c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_rpt_22c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_rpt_22c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_rpt_22c::CopyFrom(const Steering_rpt_22c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_rpt_22c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_rpt_22c::IsInitialized() const {
  return true;
}

void Steering_rpt_22c::InternalSwap(Steering_rpt_22c* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_rpt_22c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Turn_aux_rpt_330::InitAsDefaultInstance() {
}
class Turn_aux_rpt_330::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_aux_rpt_330>()._has_bits_);
  static void set_has_pass_blinker_bulb_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_blinker_bulb_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_driver_blinker_bulb_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driver_blinker_bulb_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Turn_aux_rpt_330::Turn_aux_rpt_330()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turn_aux_rpt_330)
}
Turn_aux_rpt_330::Turn_aux_rpt_330(const Turn_aux_rpt_330& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pass_blinker_bulb_on_is_valid_, &from.pass_blinker_bulb_on_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&driver_blinker_bulb_on_) -
    reinterpret_cast<char*>(&pass_blinker_bulb_on_is_valid_)) + sizeof(driver_blinker_bulb_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_aux_rpt_330)
}

void Turn_aux_rpt_330::SharedCtor() {
  ::memset(&pass_blinker_bulb_on_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driver_blinker_bulb_on_) -
      reinterpret_cast<char*>(&pass_blinker_bulb_on_is_valid_)) + sizeof(driver_blinker_bulb_on_));
}

Turn_aux_rpt_330::~Turn_aux_rpt_330() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_aux_rpt_330)
  SharedDtor();
}

void Turn_aux_rpt_330::SharedDtor() {
}

void Turn_aux_rpt_330::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Turn_aux_rpt_330& Turn_aux_rpt_330::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Turn_aux_rpt_330_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Turn_aux_rpt_330::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_aux_rpt_330)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pass_blinker_bulb_on_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driver_blinker_bulb_on_) -
      reinterpret_cast<char*>(&pass_blinker_bulb_on_is_valid_)) + sizeof(driver_blinker_bulb_on_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Turn_aux_rpt_330::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool pass_blinker_bulb_on_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pass_blinker_bulb_on_is_valid(&has_bits);
          pass_blinker_bulb_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pass_blinker_bulb_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pass_blinker_bulb_on(&has_bits);
          pass_blinker_bulb_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_blinker_bulb_on_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_driver_blinker_bulb_on_is_valid(&has_bits);
          driver_blinker_bulb_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_blinker_bulb_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_driver_blinker_bulb_on(&has_bits);
          driver_blinker_bulb_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Turn_aux_rpt_330::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_aux_rpt_330)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool pass_blinker_bulb_on_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_pass_blinker_bulb_on_is_valid(), target);
  }

  // optional bool pass_blinker_bulb_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pass_blinker_bulb_on(), target);
  }

  // optional bool driver_blinker_bulb_on_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_driver_blinker_bulb_on_is_valid(), target);
  }

  // optional bool driver_blinker_bulb_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_driver_blinker_bulb_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_aux_rpt_330)
  return target;
}

size_t Turn_aux_rpt_330::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_aux_rpt_330)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool pass_blinker_bulb_on_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pass_blinker_bulb_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool driver_blinker_bulb_on_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool driver_blinker_bulb_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turn_aux_rpt_330::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turn_aux_rpt_330)
  GOOGLE_DCHECK_NE(&from, this);
  const Turn_aux_rpt_330* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Turn_aux_rpt_330>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turn_aux_rpt_330)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turn_aux_rpt_330)
    MergeFrom(*source);
  }
}

void Turn_aux_rpt_330::MergeFrom(const Turn_aux_rpt_330& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_aux_rpt_330)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pass_blinker_bulb_on_is_valid_ = from.pass_blinker_bulb_on_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      pass_blinker_bulb_on_ = from.pass_blinker_bulb_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      driver_blinker_bulb_on_is_valid_ = from.driver_blinker_bulb_on_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      driver_blinker_bulb_on_ = from.driver_blinker_bulb_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Turn_aux_rpt_330::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turn_aux_rpt_330)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn_aux_rpt_330::CopyFrom(const Turn_aux_rpt_330& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_aux_rpt_330)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_aux_rpt_330::IsInitialized() const {
  return true;
}

void Turn_aux_rpt_330::InternalSwap(Turn_aux_rpt_330* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pass_blinker_bulb_on_is_valid_, other->pass_blinker_bulb_on_is_valid_);
  swap(pass_blinker_bulb_on_, other->pass_blinker_bulb_on_);
  swap(driver_blinker_bulb_on_is_valid_, other->driver_blinker_bulb_on_is_valid_);
  swap(driver_blinker_bulb_on_, other->driver_blinker_bulb_on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_aux_rpt_330::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Headlight_rpt_218::InitAsDefaultInstance() {
}
class Headlight_rpt_218::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_rpt_218>()._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Headlight_rpt_218::Headlight_rpt_218()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Headlight_rpt_218)
}
Headlight_rpt_218::Headlight_rpt_218(const Headlight_rpt_218& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_fault_, &from.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&commanded_value_) -
    reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(commanded_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_rpt_218)
}

void Headlight_rpt_218::SharedCtor() {
  ::memset(&vehicle_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commanded_value_) -
      reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(commanded_value_));
}

Headlight_rpt_218::~Headlight_rpt_218() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_rpt_218)
  SharedDtor();
}

void Headlight_rpt_218::SharedDtor() {
}

void Headlight_rpt_218::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Headlight_rpt_218& Headlight_rpt_218::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Headlight_rpt_218_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Headlight_rpt_218::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_rpt_218)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commanded_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(commanded_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Headlight_rpt_218::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_218.Output_valueType output_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_218_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Headlight_rpt_218_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_218.Manual_inputType manual_input = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_218_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Headlight_rpt_218_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_218.Commanded_valueType commanded_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_218_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Headlight_rpt_218_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Headlight_rpt_218::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_rpt_218)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_218.Output_valueType output_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_218.Manual_inputType manual_input = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_218.Commanded_valueType commanded_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_commanded_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_rpt_218)
  return target;
}

size_t Headlight_rpt_218::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_rpt_218)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Headlight_rpt_218.Output_valueType output_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Headlight_rpt_218.Manual_inputType manual_input = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Headlight_rpt_218.Commanded_valueType commanded_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Headlight_rpt_218::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Headlight_rpt_218)
  GOOGLE_DCHECK_NE(&from, this);
  const Headlight_rpt_218* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Headlight_rpt_218>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Headlight_rpt_218)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Headlight_rpt_218)
    MergeFrom(*source);
  }
}

void Headlight_rpt_218::MergeFrom(const Headlight_rpt_218& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_rpt_218)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000200u) {
      commanded_value_ = from.commanded_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Headlight_rpt_218::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Headlight_rpt_218)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headlight_rpt_218::CopyFrom(const Headlight_rpt_218& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_rpt_218)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_rpt_218::IsInitialized() const {
  return true;
}

void Headlight_rpt_218::InternalSwap(Headlight_rpt_218* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(output_value_, other->output_value_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_rpt_218::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hazard_lights_cmd_114::InitAsDefaultInstance() {
}
class Hazard_lights_cmd_114::_Internal {
 public:
  using HasBits = decltype(std::declval<Hazard_lights_cmd_114>()._has_bits_);
  static void set_has_hazard_lights_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Hazard_lights_cmd_114::Hazard_lights_cmd_114()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Hazard_lights_cmd_114)
}
Hazard_lights_cmd_114::Hazard_lights_cmd_114(const Hazard_lights_cmd_114& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hazard_lights_cmd_, &from.hazard_lights_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_faults_) -
    reinterpret_cast<char*>(&hazard_lights_cmd_)) + sizeof(clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Hazard_lights_cmd_114)
}

void Hazard_lights_cmd_114::SharedCtor() {
  ::memset(&hazard_lights_cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_faults_) -
      reinterpret_cast<char*>(&hazard_lights_cmd_)) + sizeof(clear_faults_));
}

Hazard_lights_cmd_114::~Hazard_lights_cmd_114() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Hazard_lights_cmd_114)
  SharedDtor();
}

void Hazard_lights_cmd_114::SharedDtor() {
}

void Hazard_lights_cmd_114::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hazard_lights_cmd_114& Hazard_lights_cmd_114::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hazard_lights_cmd_114_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Hazard_lights_cmd_114::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Hazard_lights_cmd_114)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&hazard_lights_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clear_faults_) -
        reinterpret_cast<char*>(&hazard_lights_cmd_)) + sizeof(clear_faults_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Hazard_lights_cmd_114::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool hazard_lights_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hazard_lights_cmd(&has_bits);
          hazard_lights_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_overrides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hazard_lights_cmd_114::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Hazard_lights_cmd_114)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hazard_lights_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hazard_lights_cmd(), target);
  }

  // optional bool ignore_overrides = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_overrides(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool enable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable(), target);
  }

  // optional bool clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_clear_faults(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Hazard_lights_cmd_114)
  return target;
}

size_t Hazard_lights_cmd_114::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Hazard_lights_cmd_114)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool hazard_lights_cmd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_overrides = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hazard_lights_cmd_114::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Hazard_lights_cmd_114)
  GOOGLE_DCHECK_NE(&from, this);
  const Hazard_lights_cmd_114* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hazard_lights_cmd_114>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Hazard_lights_cmd_114)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Hazard_lights_cmd_114)
    MergeFrom(*source);
  }
}

void Hazard_lights_cmd_114::MergeFrom(const Hazard_lights_cmd_114& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Hazard_lights_cmd_114)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      hazard_lights_cmd_ = from.hazard_lights_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      clear_faults_ = from.clear_faults_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Hazard_lights_cmd_114::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Hazard_lights_cmd_114)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hazard_lights_cmd_114::CopyFrom(const Hazard_lights_cmd_114& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Hazard_lights_cmd_114)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hazard_lights_cmd_114::IsInitialized() const {
  return true;
}

void Hazard_lights_cmd_114::InternalSwap(Hazard_lights_cmd_114* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hazard_lights_cmd_, other->hazard_lights_cmd_);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(clear_override_, other->clear_override_);
  swap(enable_, other->enable_);
  swap(clear_faults_, other->clear_faults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hazard_lights_cmd_114::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dash_controls_left_rpt_20c::InitAsDefaultInstance() {
}
class Dash_controls_left_rpt_20c::_Internal {
 public:
  using HasBits = decltype(std::declval<Dash_controls_left_rpt_20c>()._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Dash_controls_left_rpt_20c::Dash_controls_left_rpt_20c()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Dash_controls_left_rpt_20c)
}
Dash_controls_left_rpt_20c::Dash_controls_left_rpt_20c(const Dash_controls_left_rpt_20c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_output_fault_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(command_output_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Dash_controls_left_rpt_20c)
}

void Dash_controls_left_rpt_20c::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_output_fault_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(command_output_fault_));
}

Dash_controls_left_rpt_20c::~Dash_controls_left_rpt_20c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Dash_controls_left_rpt_20c)
  SharedDtor();
}

void Dash_controls_left_rpt_20c::SharedDtor() {
}

void Dash_controls_left_rpt_20c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dash_controls_left_rpt_20c& Dash_controls_left_rpt_20c::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dash_controls_left_rpt_20c_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Dash_controls_left_rpt_20c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Dash_controls_left_rpt_20c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_output_fault_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(input_output_fault_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_output_fault_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(command_output_fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Dash_controls_left_rpt_20c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Dash_controls_left_rpt_20c.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_rpt_20c.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_rpt_20c.Manual_inputType manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dash_controls_left_rpt_20c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Dash_controls_left_rpt_20c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_manual_input(), target);
  }

  // optional bool vehicle_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_command_output_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Dash_controls_left_rpt_20c)
  return target;
}

size_t Dash_controls_left_rpt_20c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Dash_controls_left_rpt_20c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Dash_controls_left_rpt_20c.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Dash_controls_left_rpt_20c.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Dash_controls_left_rpt_20c.Manual_inputType manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional bool vehicle_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dash_controls_left_rpt_20c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Dash_controls_left_rpt_20c)
  GOOGLE_DCHECK_NE(&from, this);
  const Dash_controls_left_rpt_20c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dash_controls_left_rpt_20c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Dash_controls_left_rpt_20c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Dash_controls_left_rpt_20c)
    MergeFrom(*source);
  }
}

void Dash_controls_left_rpt_20c::MergeFrom(const Dash_controls_left_rpt_20c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Dash_controls_left_rpt_20c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_output_fault_ = from.input_output_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      command_output_fault_ = from.command_output_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dash_controls_left_rpt_20c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Dash_controls_left_rpt_20c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dash_controls_left_rpt_20c::CopyFrom(const Dash_controls_left_rpt_20c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Dash_controls_left_rpt_20c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dash_controls_left_rpt_20c::IsInitialized() const {
  return true;
}

void Dash_controls_left_rpt_20c::InternalSwap(Dash_controls_left_rpt_20c* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dash_controls_left_rpt_20c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Headlight_aux_rpt_318::InitAsDefaultInstance() {
}
class Headlight_aux_rpt_318::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_aux_rpt_318>()._has_bits_);
  static void set_has_headlights_mode_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_headlights_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fog_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fog_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_headlights_on_bright_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_headlights_on_bright(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_headlights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_headlights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Headlight_aux_rpt_318::Headlight_aux_rpt_318()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Headlight_aux_rpt_318)
}
Headlight_aux_rpt_318::Headlight_aux_rpt_318(const Headlight_aux_rpt_318& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&headlights_mode_, &from.headlights_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&headlights_on_) -
    reinterpret_cast<char*>(&headlights_mode_)) + sizeof(headlights_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_aux_rpt_318)
}

void Headlight_aux_rpt_318::SharedCtor() {
  ::memset(&headlights_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&headlights_on_) -
      reinterpret_cast<char*>(&headlights_mode_)) + sizeof(headlights_on_));
}

Headlight_aux_rpt_318::~Headlight_aux_rpt_318() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_aux_rpt_318)
  SharedDtor();
}

void Headlight_aux_rpt_318::SharedDtor() {
}

void Headlight_aux_rpt_318::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Headlight_aux_rpt_318& Headlight_aux_rpt_318::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Headlight_aux_rpt_318_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Headlight_aux_rpt_318::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_aux_rpt_318)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&headlights_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&headlights_on_) -
        reinterpret_cast<char*>(&headlights_mode_)) + sizeof(headlights_on_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Headlight_aux_rpt_318::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool headlights_mode_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_headlights_mode_is_valid(&has_bits);
          headlights_mode_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_aux_rpt_318.Headlights_modeType headlights_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType_IsValid(val))) {
            _internal_set_headlights_mode(static_cast<::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool fog_lights_on_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fog_lights_on_is_valid(&has_bits);
          fog_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fog_lights_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fog_lights_on(&has_bits);
          fog_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool headlights_on_bright_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_headlights_on_bright_is_valid(&has_bits);
          headlights_on_bright_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool headlights_on_bright = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_headlights_on_bright(&has_bits);
          headlights_on_bright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool headlights_on_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_headlights_on_is_valid(&has_bits);
          headlights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool headlights_on = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_headlights_on(&has_bits);
          headlights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Headlight_aux_rpt_318::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_aux_rpt_318)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool headlights_mode_is_valid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_headlights_mode_is_valid(), target);
  }

  // optional .apollo.canbus.Headlight_aux_rpt_318.Headlights_modeType headlights_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_headlights_mode(), target);
  }

  // optional bool fog_lights_on_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_fog_lights_on_is_valid(), target);
  }

  // optional bool fog_lights_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_fog_lights_on(), target);
  }

  // optional bool headlights_on_bright_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_headlights_on_bright_is_valid(), target);
  }

  // optional bool headlights_on_bright = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_headlights_on_bright(), target);
  }

  // optional bool headlights_on_is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_headlights_on_is_valid(), target);
  }

  // optional bool headlights_on = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_headlights_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_aux_rpt_318)
  return target;
}

size_t Headlight_aux_rpt_318::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_aux_rpt_318)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Headlight_aux_rpt_318.Headlights_modeType headlights_mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_headlights_mode());
    }

    // optional bool headlights_mode_is_valid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool fog_lights_on_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool fog_lights_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool headlights_on_bright_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool headlights_on_bright = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool headlights_on_is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool headlights_on = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Headlight_aux_rpt_318::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Headlight_aux_rpt_318)
  GOOGLE_DCHECK_NE(&from, this);
  const Headlight_aux_rpt_318* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Headlight_aux_rpt_318>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Headlight_aux_rpt_318)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Headlight_aux_rpt_318)
    MergeFrom(*source);
  }
}

void Headlight_aux_rpt_318::MergeFrom(const Headlight_aux_rpt_318& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_aux_rpt_318)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      headlights_mode_ = from.headlights_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      headlights_mode_is_valid_ = from.headlights_mode_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      fog_lights_on_is_valid_ = from.fog_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      fog_lights_on_ = from.fog_lights_on_;
    }
    if (cached_has_bits & 0x00000010u) {
      headlights_on_bright_is_valid_ = from.headlights_on_bright_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      headlights_on_bright_ = from.headlights_on_bright_;
    }
    if (cached_has_bits & 0x00000040u) {
      headlights_on_is_valid_ = from.headlights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      headlights_on_ = from.headlights_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Headlight_aux_rpt_318::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Headlight_aux_rpt_318)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headlight_aux_rpt_318::CopyFrom(const Headlight_aux_rpt_318& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_aux_rpt_318)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_aux_rpt_318::IsInitialized() const {
  return true;
}

void Headlight_aux_rpt_318::InternalSwap(Headlight_aux_rpt_318* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(headlights_mode_, other->headlights_mode_);
  swap(headlights_mode_is_valid_, other->headlights_mode_is_valid_);
  swap(fog_lights_on_is_valid_, other->fog_lights_on_is_valid_);
  swap(fog_lights_on_, other->fog_lights_on_);
  swap(headlights_on_bright_is_valid_, other->headlights_on_bright_is_valid_);
  swap(headlights_on_bright_, other->headlights_on_bright_);
  swap(headlights_on_is_valid_, other->headlights_on_is_valid_);
  swap(headlights_on_, other->headlights_on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_aux_rpt_318::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dash_controls_right_cmd_110::InitAsDefaultInstance() {
}
class Dash_controls_right_cmd_110::_Internal {
 public:
  using HasBits = decltype(std::declval<Dash_controls_right_cmd_110>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dash_controls_button(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Dash_controls_right_cmd_110::Dash_controls_right_cmd_110()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Dash_controls_right_cmd_110)
}
Dash_controls_right_cmd_110::Dash_controls_right_cmd_110(const Dash_controls_right_cmd_110& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_overrides_, &from.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&dash_controls_button_) -
    reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(dash_controls_button_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Dash_controls_right_cmd_110)
}

void Dash_controls_right_cmd_110::SharedCtor() {
  ::memset(&ignore_overrides_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dash_controls_button_) -
      reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(dash_controls_button_));
}

Dash_controls_right_cmd_110::~Dash_controls_right_cmd_110() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Dash_controls_right_cmd_110)
  SharedDtor();
}

void Dash_controls_right_cmd_110::SharedDtor() {
}

void Dash_controls_right_cmd_110::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dash_controls_right_cmd_110& Dash_controls_right_cmd_110::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dash_controls_right_cmd_110_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Dash_controls_right_cmd_110::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Dash_controls_right_cmd_110)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dash_controls_button_) -
        reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(dash_controls_button_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Dash_controls_right_cmd_110::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_cmd_110.Dash_controls_buttonType dash_controls_button = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType_IsValid(val))) {
            _internal_set_dash_controls_button(static_cast<::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dash_controls_right_cmd_110::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Dash_controls_right_cmd_110)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Dash_controls_right_cmd_110.Dash_controls_buttonType dash_controls_button = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dash_controls_button(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Dash_controls_right_cmd_110)
  return target;
}

size_t Dash_controls_right_cmd_110::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Dash_controls_right_cmd_110)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Dash_controls_right_cmd_110.Dash_controls_buttonType dash_controls_button = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dash_controls_button());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dash_controls_right_cmd_110::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Dash_controls_right_cmd_110)
  GOOGLE_DCHECK_NE(&from, this);
  const Dash_controls_right_cmd_110* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dash_controls_right_cmd_110>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Dash_controls_right_cmd_110)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Dash_controls_right_cmd_110)
    MergeFrom(*source);
  }
}

void Dash_controls_right_cmd_110::MergeFrom(const Dash_controls_right_cmd_110& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Dash_controls_right_cmd_110)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_faults_ = from.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      dash_controls_button_ = from.dash_controls_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dash_controls_right_cmd_110::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Dash_controls_right_cmd_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dash_controls_right_cmd_110::CopyFrom(const Dash_controls_right_cmd_110& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Dash_controls_right_cmd_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dash_controls_right_cmd_110::IsInitialized() const {
  return true;
}

void Dash_controls_right_cmd_110::InternalSwap(Dash_controls_right_cmd_110* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
  swap(dash_controls_button_, other->dash_controls_button_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dash_controls_right_cmd_110::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wiper_cmd_134::InitAsDefaultInstance() {
}
class Wiper_cmd_134::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_cmd_134>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wiper_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Wiper_cmd_134::Wiper_cmd_134()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wiper_cmd_134)
}
Wiper_cmd_134::Wiper_cmd_134(const Wiper_cmd_134& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_overrides_, &from.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&wiper_cmd_) -
    reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(wiper_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_cmd_134)
}

void Wiper_cmd_134::SharedCtor() {
  ::memset(&ignore_overrides_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wiper_cmd_) -
      reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(wiper_cmd_));
}

Wiper_cmd_134::~Wiper_cmd_134() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_cmd_134)
  SharedDtor();
}

void Wiper_cmd_134::SharedDtor() {
}

void Wiper_cmd_134::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wiper_cmd_134& Wiper_cmd_134::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wiper_cmd_134_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Wiper_cmd_134::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_cmd_134)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wiper_cmd_) -
        reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(wiper_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Wiper_cmd_134::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_cmd_134.Wiper_cmdType wiper_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_cmd_134_Wiper_cmdType_IsValid(val))) {
            _internal_set_wiper_cmd(static_cast<::apollo::canbus::Wiper_cmd_134_Wiper_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wiper_cmd_134::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_cmd_134)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional .apollo.canbus.Wiper_cmd_134.Wiper_cmdType wiper_cmd = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_wiper_cmd(), target);
  }

  // optional bool clear_faults = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_clear_faults(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_cmd_134)
  return target;
}

size_t Wiper_cmd_134::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_cmd_134)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Wiper_cmd_134.Wiper_cmdType wiper_cmd = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wiper_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wiper_cmd_134::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wiper_cmd_134)
  GOOGLE_DCHECK_NE(&from, this);
  const Wiper_cmd_134* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wiper_cmd_134>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wiper_cmd_134)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wiper_cmd_134)
    MergeFrom(*source);
  }
}

void Wiper_cmd_134::MergeFrom(const Wiper_cmd_134& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_cmd_134)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_faults_ = from.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      wiper_cmd_ = from.wiper_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wiper_cmd_134::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wiper_cmd_134)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wiper_cmd_134::CopyFrom(const Wiper_cmd_134& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_cmd_134)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_cmd_134::IsInitialized() const {
  return true;
}

void Wiper_cmd_134::InternalSwap(Wiper_cmd_134* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
  swap(wiper_cmd_, other->wiper_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_cmd_134::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wiper_rpt_234::InitAsDefaultInstance() {
}
class Wiper_rpt_234::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_rpt_234>()._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Wiper_rpt_234::Wiper_rpt_234()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wiper_rpt_234)
}
Wiper_rpt_234::Wiper_rpt_234(const Wiper_rpt_234& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_fault_, &from.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_input_) -
    reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_rpt_234)
}

void Wiper_rpt_234::SharedCtor() {
  ::memset(&vehicle_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_input_) -
      reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
}

Wiper_rpt_234::~Wiper_rpt_234() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_rpt_234)
  SharedDtor();
}

void Wiper_rpt_234::SharedDtor() {
}

void Wiper_rpt_234::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wiper_rpt_234& Wiper_rpt_234::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wiper_rpt_234_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Wiper_rpt_234::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_rpt_234)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&commanded_value_)) + sizeof(manual_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Wiper_rpt_234::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_234.Output_valueType output_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_234_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Wiper_rpt_234_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_234.Commanded_valueType commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_234_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Wiper_rpt_234_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_234.Manual_inputType manual_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_234_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Wiper_rpt_234_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wiper_rpt_234::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_rpt_234)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_234.Output_valueType output_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_234.Commanded_valueType commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_234.Manual_inputType manual_input = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_rpt_234)
  return target;
}

size_t Wiper_rpt_234::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_rpt_234)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Wiper_rpt_234.Output_valueType output_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Wiper_rpt_234.Commanded_valueType commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Wiper_rpt_234.Manual_inputType manual_input = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wiper_rpt_234::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wiper_rpt_234)
  GOOGLE_DCHECK_NE(&from, this);
  const Wiper_rpt_234* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wiper_rpt_234>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wiper_rpt_234)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wiper_rpt_234)
    MergeFrom(*source);
  }
}

void Wiper_rpt_234::MergeFrom(const Wiper_rpt_234& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_rpt_234)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wiper_rpt_234::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wiper_rpt_234)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wiper_rpt_234::CopyFrom(const Wiper_rpt_234& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_rpt_234)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_rpt_234::IsInitialized() const {
  return true;
}

void Wiper_rpt_234::InternalSwap(Wiper_rpt_234* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_rpt_234::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Turn_rpt_230::InitAsDefaultInstance() {
}
class Turn_rpt_230::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_rpt_230>()._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Turn_rpt_230::Turn_rpt_230()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turn_rpt_230)
}
Turn_rpt_230::Turn_rpt_230(const Turn_rpt_230& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_fault_, &from.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_rpt_230)
}

void Turn_rpt_230::SharedCtor() {
  ::memset(&vehicle_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
}

Turn_rpt_230::~Turn_rpt_230() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_rpt_230)
  SharedDtor();
}

void Turn_rpt_230::SharedDtor() {
}

void Turn_rpt_230::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Turn_rpt_230& Turn_rpt_230::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Turn_rpt_230_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Turn_rpt_230::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_rpt_230)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&commanded_value_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Turn_rpt_230::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_230.Manual_inputType manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_230_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Turn_rpt_230_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_230.Commanded_valueType commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_230_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Turn_rpt_230_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_230.Output_valueType output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_230_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Turn_rpt_230_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Turn_rpt_230::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_rpt_230)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Turn_rpt_230.Manual_inputType manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Turn_rpt_230.Commanded_valueType commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Turn_rpt_230.Output_valueType output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_rpt_230)
  return target;
}

size_t Turn_rpt_230::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_rpt_230)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Turn_rpt_230.Manual_inputType manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Turn_rpt_230.Commanded_valueType commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Turn_rpt_230.Output_valueType output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turn_rpt_230::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turn_rpt_230)
  GOOGLE_DCHECK_NE(&from, this);
  const Turn_rpt_230* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Turn_rpt_230>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turn_rpt_230)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turn_rpt_230)
    MergeFrom(*source);
  }
}

void Turn_rpt_230::MergeFrom(const Turn_rpt_230& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_rpt_230)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Turn_rpt_230::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turn_rpt_230)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn_rpt_230::CopyFrom(const Turn_rpt_230& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_rpt_230)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_rpt_230::IsInitialized() const {
  return true;
}

void Turn_rpt_230::InternalSwap(Turn_rpt_230* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_rpt_230::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Headlight_cmd_118::InitAsDefaultInstance() {
}
class Headlight_cmd_118::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_cmd_118>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_headlight_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Headlight_cmd_118::Headlight_cmd_118()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Headlight_cmd_118)
}
Headlight_cmd_118::Headlight_cmd_118(const Headlight_cmd_118& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_overrides_, &from.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&headlight_cmd_) -
    reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(headlight_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_cmd_118)
}

void Headlight_cmd_118::SharedCtor() {
  ::memset(&ignore_overrides_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&headlight_cmd_) -
      reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(headlight_cmd_));
}

Headlight_cmd_118::~Headlight_cmd_118() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_cmd_118)
  SharedDtor();
}

void Headlight_cmd_118::SharedDtor() {
}

void Headlight_cmd_118::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Headlight_cmd_118& Headlight_cmd_118::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Headlight_cmd_118_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Headlight_cmd_118::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_cmd_118)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&headlight_cmd_) -
        reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(headlight_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Headlight_cmd_118::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_cmd_118.Headlight_cmdType headlight_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_cmd_118_Headlight_cmdType_IsValid(val))) {
            _internal_set_headlight_cmd(static_cast<::apollo::canbus::Headlight_cmd_118_Headlight_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Headlight_cmd_118::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_cmd_118)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Headlight_cmd_118.Headlight_cmdType headlight_cmd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_headlight_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_cmd_118)
  return target;
}

size_t Headlight_cmd_118::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_cmd_118)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Headlight_cmd_118.Headlight_cmdType headlight_cmd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_headlight_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Headlight_cmd_118::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Headlight_cmd_118)
  GOOGLE_DCHECK_NE(&from, this);
  const Headlight_cmd_118* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Headlight_cmd_118>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Headlight_cmd_118)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Headlight_cmd_118)
    MergeFrom(*source);
  }
}

void Headlight_cmd_118::MergeFrom(const Headlight_cmd_118& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_cmd_118)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_faults_ = from.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      headlight_cmd_ = from.headlight_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Headlight_cmd_118::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Headlight_cmd_118)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headlight_cmd_118::CopyFrom(const Headlight_cmd_118& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_cmd_118)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_cmd_118::IsInitialized() const {
  return true;
}

void Headlight_cmd_118::InternalSwap(Headlight_cmd_118* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
  swap(headlight_cmd_, other->headlight_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_cmd_118::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Door_rpt_417::InitAsDefaultInstance() {
}
class Door_rpt_417::_Internal {
 public:
  using HasBits = decltype(std::declval<Door_rpt_417>()._has_bits_);
  static void set_has_fuel_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trunk_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hood_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rear_pass_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rear_driver_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pass_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_driver_door_open_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fuel_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trunk_open(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hood_open(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rear_pass_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rear_driver_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_pass_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_driver_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

Door_rpt_417::Door_rpt_417()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Door_rpt_417)
}
Door_rpt_417::Door_rpt_417(const Door_rpt_417& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fuel_door_open_is_valid_, &from.fuel_door_open_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&driver_door_open_) -
    reinterpret_cast<char*>(&fuel_door_open_is_valid_)) + sizeof(driver_door_open_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Door_rpt_417)
}

void Door_rpt_417::SharedCtor() {
  ::memset(&fuel_door_open_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driver_door_open_) -
      reinterpret_cast<char*>(&fuel_door_open_is_valid_)) + sizeof(driver_door_open_));
}

Door_rpt_417::~Door_rpt_417() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Door_rpt_417)
  SharedDtor();
}

void Door_rpt_417::SharedDtor() {
}

void Door_rpt_417::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Door_rpt_417& Door_rpt_417::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Door_rpt_417_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Door_rpt_417::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Door_rpt_417)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&fuel_door_open_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuel_door_open_) -
        reinterpret_cast<char*>(&fuel_door_open_is_valid_)) + sizeof(fuel_door_open_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&trunk_open_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driver_door_open_) -
        reinterpret_cast<char*>(&trunk_open_)) + sizeof(driver_door_open_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Door_rpt_417::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool fuel_door_open_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fuel_door_open_is_valid(&has_bits);
          fuel_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trunk_open_is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trunk_open_is_valid(&has_bits);
          trunk_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hood_open_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hood_open_is_valid(&has_bits);
          hood_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_pass_door_open_is_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rear_pass_door_open_is_valid(&has_bits);
          rear_pass_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_driver_door_open_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rear_driver_door_open_is_valid(&has_bits);
          rear_driver_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pass_door_open_is_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pass_door_open_is_valid(&has_bits);
          pass_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_door_open_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_driver_door_open_is_valid(&has_bits);
          driver_door_open_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fuel_door_open = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fuel_door_open(&has_bits);
          fuel_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trunk_open = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_trunk_open(&has_bits);
          trunk_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hood_open = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hood_open(&has_bits);
          hood_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_pass_door_open = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_rear_pass_door_open(&has_bits);
          rear_pass_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_driver_door_open = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_rear_driver_door_open(&has_bits);
          rear_driver_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pass_door_open = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_pass_door_open(&has_bits);
          pass_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_door_open = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_driver_door_open(&has_bits);
          driver_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Door_rpt_417::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Door_rpt_417)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool fuel_door_open_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_fuel_door_open_is_valid(), target);
  }

  // optional bool trunk_open_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_trunk_open_is_valid(), target);
  }

  // optional bool hood_open_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_hood_open_is_valid(), target);
  }

  // optional bool rear_pass_door_open_is_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_rear_pass_door_open_is_valid(), target);
  }

  // optional bool rear_driver_door_open_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_rear_driver_door_open_is_valid(), target);
  }

  // optional bool pass_door_open_is_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_pass_door_open_is_valid(), target);
  }

  // optional bool driver_door_open_is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_driver_door_open_is_valid(), target);
  }

  // optional bool fuel_door_open = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fuel_door_open(), target);
  }

  // optional bool trunk_open = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_trunk_open(), target);
  }

  // optional bool hood_open = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_hood_open(), target);
  }

  // optional bool rear_pass_door_open = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_rear_pass_door_open(), target);
  }

  // optional bool rear_driver_door_open = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_rear_driver_door_open(), target);
  }

  // optional bool pass_door_open = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_pass_door_open(), target);
  }

  // optional bool driver_door_open = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_driver_door_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Door_rpt_417)
  return target;
}

size_t Door_rpt_417::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Door_rpt_417)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool fuel_door_open_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool trunk_open_is_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool hood_open_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool rear_pass_door_open_is_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rear_driver_door_open_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool pass_door_open_is_valid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool driver_door_open_is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool fuel_door_open = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool trunk_open = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool hood_open = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool rear_pass_door_open = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool rear_driver_door_open = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool pass_door_open = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool driver_door_open = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Door_rpt_417::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Door_rpt_417)
  GOOGLE_DCHECK_NE(&from, this);
  const Door_rpt_417* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Door_rpt_417>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Door_rpt_417)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Door_rpt_417)
    MergeFrom(*source);
  }
}

void Door_rpt_417::MergeFrom(const Door_rpt_417& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Door_rpt_417)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      fuel_door_open_is_valid_ = from.fuel_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      trunk_open_is_valid_ = from.trunk_open_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      hood_open_is_valid_ = from.hood_open_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      rear_pass_door_open_is_valid_ = from.rear_pass_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      rear_driver_door_open_is_valid_ = from.rear_driver_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      pass_door_open_is_valid_ = from.pass_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      driver_door_open_is_valid_ = from.driver_door_open_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      fuel_door_open_ = from.fuel_door_open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      trunk_open_ = from.trunk_open_;
    }
    if (cached_has_bits & 0x00000200u) {
      hood_open_ = from.hood_open_;
    }
    if (cached_has_bits & 0x00000400u) {
      rear_pass_door_open_ = from.rear_pass_door_open_;
    }
    if (cached_has_bits & 0x00000800u) {
      rear_driver_door_open_ = from.rear_driver_door_open_;
    }
    if (cached_has_bits & 0x00001000u) {
      pass_door_open_ = from.pass_door_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      driver_door_open_ = from.driver_door_open_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Door_rpt_417::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Door_rpt_417)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Door_rpt_417::CopyFrom(const Door_rpt_417& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Door_rpt_417)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Door_rpt_417::IsInitialized() const {
  return true;
}

void Door_rpt_417::InternalSwap(Door_rpt_417* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fuel_door_open_is_valid_, other->fuel_door_open_is_valid_);
  swap(trunk_open_is_valid_, other->trunk_open_is_valid_);
  swap(hood_open_is_valid_, other->hood_open_is_valid_);
  swap(rear_pass_door_open_is_valid_, other->rear_pass_door_open_is_valid_);
  swap(rear_driver_door_open_is_valid_, other->rear_driver_door_open_is_valid_);
  swap(pass_door_open_is_valid_, other->pass_door_open_is_valid_);
  swap(driver_door_open_is_valid_, other->driver_door_open_is_valid_);
  swap(fuel_door_open_, other->fuel_door_open_);
  swap(trunk_open_, other->trunk_open_);
  swap(hood_open_, other->hood_open_);
  swap(rear_pass_door_open_, other->rear_pass_door_open_);
  swap(rear_driver_door_open_, other->rear_driver_door_open_);
  swap(pass_door_open_, other->pass_door_open_);
  swap(driver_door_open_, other->driver_door_open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Door_rpt_417::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Component_rpt_20::InitAsDefaultInstance() {
}
class Component_rpt_20::_Internal {
 public:
  using HasBits = decltype(std::declval<Component_rpt_20>()._has_bits_);
  static void set_has_component_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_component_func(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_complement(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_config_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Component_rpt_20::Component_rpt_20()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Component_rpt_20)
}
Component_rpt_20::Component_rpt_20(const Component_rpt_20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&component_type_, &from.component_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_fault_) -
    reinterpret_cast<char*>(&component_type_)) + sizeof(config_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Component_rpt_20)
}

void Component_rpt_20::SharedCtor() {
  ::memset(&component_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_fault_) -
      reinterpret_cast<char*>(&component_type_)) + sizeof(config_fault_));
}

Component_rpt_20::~Component_rpt_20() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Component_rpt_20)
  SharedDtor();
}

void Component_rpt_20::SharedDtor() {
}

void Component_rpt_20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Component_rpt_20& Component_rpt_20::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Component_rpt_20_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Component_rpt_20::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Component_rpt_20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&component_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&config_fault_) -
        reinterpret_cast<char*>(&component_type_)) + sizeof(config_fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Component_rpt_20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Component_rpt_20.Component_typeType component_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Component_rpt_20_Component_typeType_IsValid(val))) {
            _internal_set_component_type(static_cast<::apollo::canbus::Component_rpt_20_Component_typeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Component_rpt_20.Component_funcType component_func = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Component_rpt_20_Component_funcType_IsValid(val))) {
            _internal_set_component_func(static_cast<::apollo::canbus::Component_rpt_20_Component_funcType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_counter(&has_bits);
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 complement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_complement(&has_bits);
          complement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool config_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_config_fault(&has_bits);
          config_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Component_rpt_20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Component_rpt_20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Component_rpt_20.Component_typeType component_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_component_type(), target);
  }

  // optional .apollo.canbus.Component_rpt_20.Component_funcType component_func = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_component_func(), target);
  }

  // optional int32 counter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_counter(), target);
  }

  // optional int32 complement = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_complement(), target);
  }

  // optional bool config_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_config_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Component_rpt_20)
  return target;
}

size_t Component_rpt_20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Component_rpt_20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Component_rpt_20.Component_typeType component_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_component_type());
    }

    // optional .apollo.canbus.Component_rpt_20.Component_funcType component_func = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_component_func());
    }

    // optional int32 counter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_counter());
    }

    // optional int32 complement = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_complement());
    }

    // optional bool config_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Component_rpt_20::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Component_rpt_20)
  GOOGLE_DCHECK_NE(&from, this);
  const Component_rpt_20* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Component_rpt_20>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Component_rpt_20)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Component_rpt_20)
    MergeFrom(*source);
  }
}

void Component_rpt_20::MergeFrom(const Component_rpt_20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Component_rpt_20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      component_type_ = from.component_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      component_func_ = from.component_func_;
    }
    if (cached_has_bits & 0x00000004u) {
      counter_ = from.counter_;
    }
    if (cached_has_bits & 0x00000008u) {
      complement_ = from.complement_;
    }
    if (cached_has_bits & 0x00000010u) {
      config_fault_ = from.config_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Component_rpt_20::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Component_rpt_20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component_rpt_20::CopyFrom(const Component_rpt_20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Component_rpt_20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component_rpt_20::IsInitialized() const {
  return true;
}

void Component_rpt_20::InternalSwap(Component_rpt_20* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(component_type_, other->component_type_);
  swap(component_func_, other->component_func_);
  swap(counter_, other->counter_);
  swap(complement_, other->complement_);
  swap(config_fault_, other->config_fault_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Component_rpt_20::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wheel_speed_rpt_407::InitAsDefaultInstance() {
}
class Wheel_speed_rpt_407::_Internal {
 public:
  using HasBits = decltype(std::declval<Wheel_speed_rpt_407>()._has_bits_);
  static void set_has_wheel_spd_rear_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wheel_spd_rear_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wheel_spd_front_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheel_spd_front_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Wheel_speed_rpt_407::Wheel_speed_rpt_407()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wheel_speed_rpt_407)
}
Wheel_speed_rpt_407::Wheel_speed_rpt_407(const Wheel_speed_rpt_407& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheel_spd_rear_right_, &from.wheel_spd_rear_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_spd_front_left_) -
    reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wheel_speed_rpt_407)
}

void Wheel_speed_rpt_407::SharedCtor() {
  ::memset(&wheel_spd_rear_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_spd_front_left_) -
      reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
}

Wheel_speed_rpt_407::~Wheel_speed_rpt_407() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wheel_speed_rpt_407)
  SharedDtor();
}

void Wheel_speed_rpt_407::SharedDtor() {
}

void Wheel_speed_rpt_407::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wheel_speed_rpt_407& Wheel_speed_rpt_407::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wheel_speed_rpt_407_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Wheel_speed_rpt_407::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wheel_speed_rpt_407)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&wheel_spd_rear_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_spd_front_left_) -
        reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Wheel_speed_rpt_407::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double wheel_spd_rear_right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_wheel_spd_rear_right(&has_bits);
          wheel_spd_rear_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_rear_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_wheel_spd_rear_left(&has_bits);
          wheel_spd_rear_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_front_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_wheel_spd_front_right(&has_bits);
          wheel_spd_front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_front_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_wheel_spd_front_left(&has_bits);
          wheel_spd_front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wheel_speed_rpt_407::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wheel_speed_rpt_407)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double wheel_spd_rear_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_wheel_spd_rear_right(), target);
  }

  // optional double wheel_spd_rear_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_wheel_spd_rear_left(), target);
  }

  // optional double wheel_spd_front_right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_wheel_spd_front_right(), target);
  }

  // optional double wheel_spd_front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_wheel_spd_front_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wheel_speed_rpt_407)
  return target;
}

size_t Wheel_speed_rpt_407::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wheel_speed_rpt_407)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double wheel_spd_rear_right = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rear_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_front_right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_front_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wheel_speed_rpt_407::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wheel_speed_rpt_407)
  GOOGLE_DCHECK_NE(&from, this);
  const Wheel_speed_rpt_407* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wheel_speed_rpt_407>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wheel_speed_rpt_407)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wheel_speed_rpt_407)
    MergeFrom(*source);
  }
}

void Wheel_speed_rpt_407::MergeFrom(const Wheel_speed_rpt_407& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wheel_speed_rpt_407)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      wheel_spd_rear_right_ = from.wheel_spd_rear_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_spd_rear_left_ = from.wheel_spd_rear_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheel_spd_front_right_ = from.wheel_spd_front_right_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheel_spd_front_left_ = from.wheel_spd_front_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wheel_speed_rpt_407::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wheel_speed_rpt_407)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wheel_speed_rpt_407::CopyFrom(const Wheel_speed_rpt_407& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wheel_speed_rpt_407)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wheel_speed_rpt_407::IsInitialized() const {
  return true;
}

void Wheel_speed_rpt_407::InternalSwap(Wheel_speed_rpt_407* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wheel_spd_rear_right_, other->wheel_spd_rear_right_);
  swap(wheel_spd_rear_left_, other->wheel_spd_rear_left_);
  swap(wheel_spd_front_right_, other->wheel_spd_front_right_);
  swap(wheel_spd_front_left_, other->wheel_spd_front_left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wheel_speed_rpt_407::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_motor_rpt_3_406::InitAsDefaultInstance() {
}
class Steering_motor_rpt_3_406::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_3_406>()._has_bits_);
  static void set_has_torque_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_motor_rpt_3_406::Steering_motor_rpt_3_406()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_3_406)
}
Steering_motor_rpt_3_406::Steering_motor_rpt_3_406(const Steering_motor_rpt_3_406& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&torque_output_, &from.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_input_) -
    reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_3_406)
}

void Steering_motor_rpt_3_406::SharedCtor() {
  ::memset(&torque_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_input_) -
      reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
}

Steering_motor_rpt_3_406::~Steering_motor_rpt_3_406() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_3_406)
  SharedDtor();
}

void Steering_motor_rpt_3_406::SharedDtor() {
}

void Steering_motor_rpt_3_406::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_motor_rpt_3_406& Steering_motor_rpt_3_406::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_motor_rpt_3_406_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_3_406::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_3_406)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&torque_input_) -
        reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_motor_rpt_3_406::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double torque_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_torque_output(&has_bits);
          torque_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double torque_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_torque_input(&has_bits);
          torque_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_motor_rpt_3_406::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_3_406)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_3_406)
  return target;
}

size_t Steering_motor_rpt_3_406::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_3_406)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double torque_output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_3_406::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_3_406)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_3_406* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_motor_rpt_3_406>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_3_406)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_3_406)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_3_406::MergeFrom(const Steering_motor_rpt_3_406& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_3_406)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      torque_output_ = from.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      torque_input_ = from.torque_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_3_406::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_3_406)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_3_406::CopyFrom(const Steering_motor_rpt_3_406& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_3_406)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_3_406::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_3_406::InternalSwap(Steering_motor_rpt_3_406* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(torque_output_, other->torque_output_);
  swap(torque_input_, other->torque_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_3_406::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_motor_rpt_2_405::InitAsDefaultInstance() {
}
class Steering_motor_rpt_2_405::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_2_405>()._has_bits_);
  static void set_has_encoder_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motor_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Steering_motor_rpt_2_405::Steering_motor_rpt_2_405()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_2_405)
}
Steering_motor_rpt_2_405::Steering_motor_rpt_2_405(const Steering_motor_rpt_2_405& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoder_temperature_, &from.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_speed_) -
    reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_2_405)
}

void Steering_motor_rpt_2_405::SharedCtor() {
  ::memset(&encoder_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_speed_) -
      reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
}

Steering_motor_rpt_2_405::~Steering_motor_rpt_2_405() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_2_405)
  SharedDtor();
}

void Steering_motor_rpt_2_405::SharedDtor() {
}

void Steering_motor_rpt_2_405::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_motor_rpt_2_405& Steering_motor_rpt_2_405::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_motor_rpt_2_405_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_2_405::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_2_405)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_speed_) -
        reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_motor_rpt_2_405::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 encoder_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_encoder_temperature(&has_bits);
          encoder_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 motor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_motor_temperature(&has_bits);
          motor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double angular_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_angular_speed(&has_bits);
          angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_motor_rpt_2_405::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_2_405)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angular_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_2_405)
  return target;
}

size_t Steering_motor_rpt_2_405::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_2_405)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 encoder_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_motor_temperature());
    }

    // optional double angular_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_2_405::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_2_405)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_2_405* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_motor_rpt_2_405>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_2_405)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_2_405)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_2_405::MergeFrom(const Steering_motor_rpt_2_405& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_2_405)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encoder_temperature_ = from.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      motor_temperature_ = from.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_speed_ = from.angular_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_2_405::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_2_405)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_2_405::CopyFrom(const Steering_motor_rpt_2_405& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_2_405)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_2_405::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_2_405::InternalSwap(Steering_motor_rpt_2_405* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encoder_temperature_, other->encoder_temperature_);
  swap(motor_temperature_, other->motor_temperature_);
  swap(angular_speed_, other->angular_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_2_405::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_motor_rpt_1_404::InitAsDefaultInstance() {
}
class Steering_motor_rpt_1_404::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_1_404>()._has_bits_);
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shaft_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_motor_rpt_1_404::Steering_motor_rpt_1_404()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_1_404)
}
Steering_motor_rpt_1_404::Steering_motor_rpt_1_404(const Steering_motor_rpt_1_404& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&motor_current_, &from.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&shaft_position_) -
    reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_1_404)
}

void Steering_motor_rpt_1_404::SharedCtor() {
  ::memset(&motor_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shaft_position_) -
      reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
}

Steering_motor_rpt_1_404::~Steering_motor_rpt_1_404() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_1_404)
  SharedDtor();
}

void Steering_motor_rpt_1_404::SharedDtor() {
}

void Steering_motor_rpt_1_404::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_motor_rpt_1_404& Steering_motor_rpt_1_404::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_motor_rpt_1_404_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_1_404::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_1_404)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shaft_position_) -
        reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_motor_rpt_1_404::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double motor_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_motor_current(&has_bits);
          motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double shaft_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_shaft_position(&has_bits);
          shaft_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_motor_rpt_1_404::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_1_404)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_shaft_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_1_404)
  return target;
}

size_t Steering_motor_rpt_1_404::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_1_404)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double motor_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_1_404::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_1_404)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_1_404* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_motor_rpt_1_404>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_1_404)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_1_404)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_1_404::MergeFrom(const Steering_motor_rpt_1_404& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_1_404)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      motor_current_ = from.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      shaft_position_ = from.shaft_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_1_404::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_1_404)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_1_404::CopyFrom(const Steering_motor_rpt_1_404& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_1_404)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_1_404::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_1_404::InternalSwap(Steering_motor_rpt_1_404* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(motor_current_, other->motor_current_);
  swap(shaft_position_, other->shaft_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_1_404::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_motor_rpt_3_403::InitAsDefaultInstance() {
}
class Brake_motor_rpt_3_403::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_3_403>()._has_bits_);
  static void set_has_torque_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_motor_rpt_3_403::Brake_motor_rpt_3_403()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_3_403)
}
Brake_motor_rpt_3_403::Brake_motor_rpt_3_403(const Brake_motor_rpt_3_403& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&torque_output_, &from.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_input_) -
    reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_3_403)
}

void Brake_motor_rpt_3_403::SharedCtor() {
  ::memset(&torque_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_input_) -
      reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
}

Brake_motor_rpt_3_403::~Brake_motor_rpt_3_403() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_3_403)
  SharedDtor();
}

void Brake_motor_rpt_3_403::SharedDtor() {
}

void Brake_motor_rpt_3_403::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_motor_rpt_3_403& Brake_motor_rpt_3_403::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_motor_rpt_3_403_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_3_403::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_3_403)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&torque_input_) -
        reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_motor_rpt_3_403::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double torque_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_torque_output(&has_bits);
          torque_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double torque_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_torque_input(&has_bits);
          torque_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_motor_rpt_3_403::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_3_403)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_3_403)
  return target;
}

size_t Brake_motor_rpt_3_403::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_3_403)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double torque_output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_3_403::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_3_403)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_3_403* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_motor_rpt_3_403>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_3_403)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_3_403)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_3_403::MergeFrom(const Brake_motor_rpt_3_403& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_3_403)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      torque_output_ = from.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      torque_input_ = from.torque_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_3_403::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_3_403)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_3_403::CopyFrom(const Brake_motor_rpt_3_403& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_3_403)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_3_403::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_3_403::InternalSwap(Brake_motor_rpt_3_403* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(torque_output_, other->torque_output_);
  swap(torque_input_, other->torque_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_3_403::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_motor_rpt_2_402::InitAsDefaultInstance() {
}
class Brake_motor_rpt_2_402::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_2_402>()._has_bits_);
  static void set_has_encoder_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motor_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Brake_motor_rpt_2_402::Brake_motor_rpt_2_402()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_2_402)
}
Brake_motor_rpt_2_402::Brake_motor_rpt_2_402(const Brake_motor_rpt_2_402& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoder_temperature_, &from.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_speed_) -
    reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_2_402)
}

void Brake_motor_rpt_2_402::SharedCtor() {
  ::memset(&encoder_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_speed_) -
      reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
}

Brake_motor_rpt_2_402::~Brake_motor_rpt_2_402() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_2_402)
  SharedDtor();
}

void Brake_motor_rpt_2_402::SharedDtor() {
}

void Brake_motor_rpt_2_402::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_motor_rpt_2_402& Brake_motor_rpt_2_402::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_motor_rpt_2_402_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_2_402::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_2_402)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_speed_) -
        reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_motor_rpt_2_402::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 encoder_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_encoder_temperature(&has_bits);
          encoder_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 motor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_motor_temperature(&has_bits);
          motor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double angular_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_angular_speed(&has_bits);
          angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_motor_rpt_2_402::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_2_402)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angular_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_2_402)
  return target;
}

size_t Brake_motor_rpt_2_402::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_2_402)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 encoder_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_motor_temperature());
    }

    // optional double angular_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_2_402::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_2_402)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_2_402* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_motor_rpt_2_402>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_2_402)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_2_402)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_2_402::MergeFrom(const Brake_motor_rpt_2_402& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_2_402)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encoder_temperature_ = from.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      motor_temperature_ = from.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_speed_ = from.angular_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_2_402::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_2_402)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_2_402::CopyFrom(const Brake_motor_rpt_2_402& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_2_402)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_2_402::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_2_402::InternalSwap(Brake_motor_rpt_2_402* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encoder_temperature_, other->encoder_temperature_);
  swap(motor_temperature_, other->motor_temperature_);
  swap(angular_speed_, other->angular_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_2_402::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_motor_rpt_1_401::InitAsDefaultInstance() {
}
class Brake_motor_rpt_1_401::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_1_401>()._has_bits_);
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shaft_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_motor_rpt_1_401::Brake_motor_rpt_1_401()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_1_401)
}
Brake_motor_rpt_1_401::Brake_motor_rpt_1_401(const Brake_motor_rpt_1_401& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&motor_current_, &from.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&shaft_position_) -
    reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_1_401)
}

void Brake_motor_rpt_1_401::SharedCtor() {
  ::memset(&motor_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shaft_position_) -
      reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
}

Brake_motor_rpt_1_401::~Brake_motor_rpt_1_401() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_1_401)
  SharedDtor();
}

void Brake_motor_rpt_1_401::SharedDtor() {
}

void Brake_motor_rpt_1_401::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_motor_rpt_1_401& Brake_motor_rpt_1_401::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_motor_rpt_1_401_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_1_401::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_1_401)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shaft_position_) -
        reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_motor_rpt_1_401::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double motor_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_motor_current(&has_bits);
          motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double shaft_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_shaft_position(&has_bits);
          shaft_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_motor_rpt_1_401::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_1_401)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_shaft_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_1_401)
  return target;
}

size_t Brake_motor_rpt_1_401::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_1_401)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double motor_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_1_401::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_1_401)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_1_401* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_motor_rpt_1_401>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_1_401)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_1_401)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_1_401::MergeFrom(const Brake_motor_rpt_1_401& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_1_401)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      motor_current_ = from.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      shaft_position_ = from.shaft_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_1_401::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_1_401)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_1_401::CopyFrom(const Brake_motor_rpt_1_401& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_1_401)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_1_401::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_1_401::InternalSwap(Brake_motor_rpt_1_401* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(motor_current_, other->motor_current_);
  swap(shaft_position_, other->shaft_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_1_401::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wiper_aux_rpt_334::InitAsDefaultInstance() {
}
class Wiper_aux_rpt_334::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_aux_rpt_334>()._has_bits_);
  static void set_has_spray_empty_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spray_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spray_near_empty_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spray_near_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rear_spraying_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rear_spraying(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rear_wiping_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rear_wiping(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_front_spraying_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_front_spraying(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_front_wiping_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_front_wiping(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Wiper_aux_rpt_334::Wiper_aux_rpt_334()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wiper_aux_rpt_334)
}
Wiper_aux_rpt_334::Wiper_aux_rpt_334(const Wiper_aux_rpt_334& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&spray_empty_is_valid_, &from.spray_empty_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_wiping_) -
    reinterpret_cast<char*>(&spray_empty_is_valid_)) + sizeof(front_wiping_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_aux_rpt_334)
}

void Wiper_aux_rpt_334::SharedCtor() {
  ::memset(&spray_empty_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_wiping_) -
      reinterpret_cast<char*>(&spray_empty_is_valid_)) + sizeof(front_wiping_));
}

Wiper_aux_rpt_334::~Wiper_aux_rpt_334() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_aux_rpt_334)
  SharedDtor();
}

void Wiper_aux_rpt_334::SharedDtor() {
}

void Wiper_aux_rpt_334::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wiper_aux_rpt_334& Wiper_aux_rpt_334::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wiper_aux_rpt_334_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Wiper_aux_rpt_334::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_aux_rpt_334)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&spray_empty_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rear_wiping_) -
        reinterpret_cast<char*>(&spray_empty_is_valid_)) + sizeof(rear_wiping_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&front_spraying_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&front_wiping_) -
        reinterpret_cast<char*>(&front_spraying_is_valid_)) + sizeof(front_wiping_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Wiper_aux_rpt_334::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool spray_empty_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_spray_empty_is_valid(&has_bits);
          spray_empty_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool spray_empty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_spray_empty(&has_bits);
          spray_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool spray_near_empty_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_spray_near_empty_is_valid(&has_bits);
          spray_near_empty_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool spray_near_empty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_spray_near_empty(&has_bits);
          spray_near_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_spraying_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rear_spraying_is_valid(&has_bits);
          rear_spraying_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_spraying = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rear_spraying(&has_bits);
          rear_spraying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_wiping_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rear_wiping_is_valid(&has_bits);
          rear_wiping_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_wiping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rear_wiping(&has_bits);
          rear_wiping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool front_spraying_is_valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_front_spraying_is_valid(&has_bits);
          front_spraying_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool front_spraying = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_front_spraying(&has_bits);
          front_spraying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool front_wiping_is_valid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_front_wiping_is_valid(&has_bits);
          front_wiping_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool front_wiping = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_front_wiping(&has_bits);
          front_wiping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wiper_aux_rpt_334::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_aux_rpt_334)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool spray_empty_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_spray_empty_is_valid(), target);
  }

  // optional bool spray_empty = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_spray_empty(), target);
  }

  // optional bool spray_near_empty_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_spray_near_empty_is_valid(), target);
  }

  // optional bool spray_near_empty = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_spray_near_empty(), target);
  }

  // optional bool rear_spraying_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_rear_spraying_is_valid(), target);
  }

  // optional bool rear_spraying = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_rear_spraying(), target);
  }

  // optional bool rear_wiping_is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_rear_wiping_is_valid(), target);
  }

  // optional bool rear_wiping = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_rear_wiping(), target);
  }

  // optional bool front_spraying_is_valid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_front_spraying_is_valid(), target);
  }

  // optional bool front_spraying = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_front_spraying(), target);
  }

  // optional bool front_wiping_is_valid = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_front_wiping_is_valid(), target);
  }

  // optional bool front_wiping = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_front_wiping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_aux_rpt_334)
  return target;
}

size_t Wiper_aux_rpt_334::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_aux_rpt_334)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool spray_empty_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool spray_empty = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool spray_near_empty_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool spray_near_empty = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool rear_spraying_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool rear_spraying = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rear_wiping_is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool rear_wiping = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool front_spraying_is_valid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool front_spraying = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool front_wiping_is_valid = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool front_wiping = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wiper_aux_rpt_334::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wiper_aux_rpt_334)
  GOOGLE_DCHECK_NE(&from, this);
  const Wiper_aux_rpt_334* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wiper_aux_rpt_334>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wiper_aux_rpt_334)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wiper_aux_rpt_334)
    MergeFrom(*source);
  }
}

void Wiper_aux_rpt_334::MergeFrom(const Wiper_aux_rpt_334& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_aux_rpt_334)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      spray_empty_is_valid_ = from.spray_empty_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      spray_empty_ = from.spray_empty_;
    }
    if (cached_has_bits & 0x00000004u) {
      spray_near_empty_is_valid_ = from.spray_near_empty_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      spray_near_empty_ = from.spray_near_empty_;
    }
    if (cached_has_bits & 0x00000010u) {
      rear_spraying_is_valid_ = from.rear_spraying_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      rear_spraying_ = from.rear_spraying_;
    }
    if (cached_has_bits & 0x00000040u) {
      rear_wiping_is_valid_ = from.rear_wiping_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      rear_wiping_ = from.rear_wiping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      front_spraying_is_valid_ = from.front_spraying_is_valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      front_spraying_ = from.front_spraying_;
    }
    if (cached_has_bits & 0x00000400u) {
      front_wiping_is_valid_ = from.front_wiping_is_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      front_wiping_ = from.front_wiping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wiper_aux_rpt_334::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wiper_aux_rpt_334)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wiper_aux_rpt_334::CopyFrom(const Wiper_aux_rpt_334& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_aux_rpt_334)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_aux_rpt_334::IsInitialized() const {
  return true;
}

void Wiper_aux_rpt_334::InternalSwap(Wiper_aux_rpt_334* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spray_empty_is_valid_, other->spray_empty_is_valid_);
  swap(spray_empty_, other->spray_empty_);
  swap(spray_near_empty_is_valid_, other->spray_near_empty_is_valid_);
  swap(spray_near_empty_, other->spray_near_empty_);
  swap(rear_spraying_is_valid_, other->rear_spraying_is_valid_);
  swap(rear_spraying_, other->rear_spraying_);
  swap(rear_wiping_is_valid_, other->rear_wiping_is_valid_);
  swap(rear_wiping_, other->rear_wiping_);
  swap(front_spraying_is_valid_, other->front_spraying_is_valid_);
  swap(front_spraying_, other->front_spraying_);
  swap(front_wiping_is_valid_, other->front_wiping_is_valid_);
  swap(front_wiping_, other->front_wiping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_aux_rpt_334::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shift_aux_rpt_328::InitAsDefaultInstance() {
}
class Shift_aux_rpt_328::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_aux_rpt_328>()._has_bits_);
  static void set_has_speed_interlock_active_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_interlock_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_brake_interlock_active_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_interlock_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stay_in_neutral_mode_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stay_in_neutral_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_between_gears_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_between_gears(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Shift_aux_rpt_328::Shift_aux_rpt_328()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Shift_aux_rpt_328)
}
Shift_aux_rpt_328::Shift_aux_rpt_328(const Shift_aux_rpt_328& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_interlock_active_is_valid_, &from.speed_interlock_active_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&between_gears_) -
    reinterpret_cast<char*>(&speed_interlock_active_is_valid_)) + sizeof(between_gears_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_aux_rpt_328)
}

void Shift_aux_rpt_328::SharedCtor() {
  ::memset(&speed_interlock_active_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&between_gears_) -
      reinterpret_cast<char*>(&speed_interlock_active_is_valid_)) + sizeof(between_gears_));
}

Shift_aux_rpt_328::~Shift_aux_rpt_328() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_aux_rpt_328)
  SharedDtor();
}

void Shift_aux_rpt_328::SharedDtor() {
}

void Shift_aux_rpt_328::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shift_aux_rpt_328& Shift_aux_rpt_328::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shift_aux_rpt_328_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Shift_aux_rpt_328::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_aux_rpt_328)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&speed_interlock_active_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&between_gears_) -
        reinterpret_cast<char*>(&speed_interlock_active_is_valid_)) + sizeof(between_gears_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Shift_aux_rpt_328::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool speed_interlock_active_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_speed_interlock_active_is_valid(&has_bits);
          speed_interlock_active_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool speed_interlock_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_speed_interlock_active(&has_bits);
          speed_interlock_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool brake_interlock_active_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_brake_interlock_active_is_valid(&has_bits);
          brake_interlock_active_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool brake_interlock_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_brake_interlock_active(&has_bits);
          brake_interlock_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stay_in_neutral_mode_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stay_in_neutral_mode_is_valid(&has_bits);
          stay_in_neutral_mode_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stay_in_neutral_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_stay_in_neutral_mode(&has_bits);
          stay_in_neutral_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool between_gears_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_between_gears_is_valid(&has_bits);
          between_gears_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool between_gears = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_between_gears(&has_bits);
          between_gears_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shift_aux_rpt_328::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_aux_rpt_328)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool speed_interlock_active_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_speed_interlock_active_is_valid(), target);
  }

  // optional bool speed_interlock_active = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_speed_interlock_active(), target);
  }

  // optional bool brake_interlock_active_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_brake_interlock_active_is_valid(), target);
  }

  // optional bool brake_interlock_active = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_brake_interlock_active(), target);
  }

  // optional bool stay_in_neutral_mode_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_stay_in_neutral_mode_is_valid(), target);
  }

  // optional bool stay_in_neutral_mode = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_stay_in_neutral_mode(), target);
  }

  // optional bool between_gears_is_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_between_gears_is_valid(), target);
  }

  // optional bool between_gears = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_between_gears(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_aux_rpt_328)
  return target;
}

size_t Shift_aux_rpt_328::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_aux_rpt_328)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool speed_interlock_active_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool speed_interlock_active = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool brake_interlock_active_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool brake_interlock_active = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool stay_in_neutral_mode_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool stay_in_neutral_mode = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool between_gears_is_valid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool between_gears = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shift_aux_rpt_328::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Shift_aux_rpt_328)
  GOOGLE_DCHECK_NE(&from, this);
  const Shift_aux_rpt_328* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shift_aux_rpt_328>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Shift_aux_rpt_328)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Shift_aux_rpt_328)
    MergeFrom(*source);
  }
}

void Shift_aux_rpt_328::MergeFrom(const Shift_aux_rpt_328& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_aux_rpt_328)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      speed_interlock_active_is_valid_ = from.speed_interlock_active_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_interlock_active_ = from.speed_interlock_active_;
    }
    if (cached_has_bits & 0x00000004u) {
      brake_interlock_active_is_valid_ = from.brake_interlock_active_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_interlock_active_ = from.brake_interlock_active_;
    }
    if (cached_has_bits & 0x00000010u) {
      stay_in_neutral_mode_is_valid_ = from.stay_in_neutral_mode_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      stay_in_neutral_mode_ = from.stay_in_neutral_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      between_gears_is_valid_ = from.between_gears_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      between_gears_ = from.between_gears_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Shift_aux_rpt_328::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Shift_aux_rpt_328)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shift_aux_rpt_328::CopyFrom(const Shift_aux_rpt_328& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_aux_rpt_328)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_aux_rpt_328::IsInitialized() const {
  return true;
}

void Shift_aux_rpt_328::InternalSwap(Shift_aux_rpt_328* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_interlock_active_is_valid_, other->speed_interlock_active_is_valid_);
  swap(speed_interlock_active_, other->speed_interlock_active_);
  swap(brake_interlock_active_is_valid_, other->brake_interlock_active_is_valid_);
  swap(brake_interlock_active_, other->brake_interlock_active_);
  swap(stay_in_neutral_mode_is_valid_, other->stay_in_neutral_mode_is_valid_);
  swap(stay_in_neutral_mode_, other->stay_in_neutral_mode_);
  swap(between_gears_is_valid_, other->between_gears_is_valid_);
  swap(between_gears_, other->between_gears_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_aux_rpt_328::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Accel_rpt_200::InitAsDefaultInstance() {
}
class Accel_rpt_200::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_rpt_200>()._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Accel_rpt_200::Accel_rpt_200()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Accel_rpt_200)
}
Accel_rpt_200::Accel_rpt_200(const Accel_rpt_200& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_fault_, &from.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_rpt_200)
}

void Accel_rpt_200::SharedCtor() {
  ::memset(&vehicle_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
}

Accel_rpt_200::~Accel_rpt_200() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_rpt_200)
  SharedDtor();
}

void Accel_rpt_200::SharedDtor() {
}

void Accel_rpt_200::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accel_rpt_200& Accel_rpt_200::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accel_rpt_200_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Accel_rpt_200::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_rpt_200)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&commanded_value_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Accel_rpt_200::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_manual_input(&has_bits);
          manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_commanded_value(&has_bits);
          commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_output_value(&has_bits);
          output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accel_rpt_200::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_rpt_200)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool output_reported_fault = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_input_output_fault(), target);
  }

  // optional bool command_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_command_output_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enabled(), target);
  }

  // optional double manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_rpt_200)
  return target;
}

size_t Accel_rpt_200::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_rpt_200)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel_rpt_200::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Accel_rpt_200)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel_rpt_200* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accel_rpt_200>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Accel_rpt_200)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Accel_rpt_200)
    MergeFrom(*source);
  }
}

void Accel_rpt_200::MergeFrom(const Accel_rpt_200& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_rpt_200)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000008u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Accel_rpt_200::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Accel_rpt_200)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel_rpt_200::CopyFrom(const Accel_rpt_200& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_rpt_200)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_rpt_200::IsInitialized() const {
  return true;
}

void Accel_rpt_200::InternalSwap(Accel_rpt_200* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(override_active_, other->override_active_);
  swap(enabled_, other->enabled_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_rpt_200::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_rpt_204::InitAsDefaultInstance() {
}
class Brake_rpt_204::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_rpt_204>()._has_bits_);
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Brake_rpt_204::Brake_rpt_204()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_rpt_204)
}
Brake_rpt_204::Brake_rpt_204(const Brake_rpt_204& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_output_fault_, &from.command_output_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&command_output_fault_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_rpt_204)
}

void Brake_rpt_204::SharedCtor() {
  ::memset(&command_output_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&command_output_fault_)) + sizeof(output_value_));
}

Brake_rpt_204::~Brake_rpt_204() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_rpt_204)
  SharedDtor();
}

void Brake_rpt_204::SharedDtor() {
}

void Brake_rpt_204::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_rpt_204& Brake_rpt_204::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_rpt_204_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Brake_rpt_204::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_rpt_204)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&command_output_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&command_output_fault_)) + sizeof(manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&commanded_value_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_rpt_204::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool command_output_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_manual_input(&has_bits);
          manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_commanded_value(&has_bits);
          commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_output_value(&has_bits);
          output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_rpt_204::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_rpt_204)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool command_output_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_command_output_fault(), target);
  }

  // optional bool vehicle_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enabled(), target);
  }

  // optional double manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_rpt_204)
  return target;
}

size_t Brake_rpt_204::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_rpt_204)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool command_output_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool vehicle_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_rpt_204::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_rpt_204)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_rpt_204* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_rpt_204>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_rpt_204)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_rpt_204)
    MergeFrom(*source);
  }
}

void Brake_rpt_204::MergeFrom(const Brake_rpt_204& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_rpt_204)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000008u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000010u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000040u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_rpt_204::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_rpt_204)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_rpt_204::CopyFrom(const Brake_rpt_204& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_rpt_204)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_rpt_204::IsInitialized() const {
  return true;
}

void Brake_rpt_204::InternalSwap(Brake_rpt_204* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(command_output_fault_, other->command_output_fault_);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_rpt_204::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Horn_cmd_11c::InitAsDefaultInstance() {
}
class Horn_cmd_11c::_Internal {
 public:
  using HasBits = decltype(std::declval<Horn_cmd_11c>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_horn_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Horn_cmd_11c::Horn_cmd_11c()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Horn_cmd_11c)
}
Horn_cmd_11c::Horn_cmd_11c(const Horn_cmd_11c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_overrides_, &from.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&horn_cmd_) -
    reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(horn_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_cmd_11c)
}

void Horn_cmd_11c::SharedCtor() {
  ::memset(&ignore_overrides_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horn_cmd_) -
      reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(horn_cmd_));
}

Horn_cmd_11c::~Horn_cmd_11c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_cmd_11c)
  SharedDtor();
}

void Horn_cmd_11c::SharedDtor() {
}

void Horn_cmd_11c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Horn_cmd_11c& Horn_cmd_11c::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Horn_cmd_11c_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Horn_cmd_11c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_cmd_11c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&horn_cmd_) -
        reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(horn_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Horn_cmd_11c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_cmd_11c.Horn_cmdType horn_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_cmd_11c_Horn_cmdType_IsValid(val))) {
            _internal_set_horn_cmd(static_cast<::apollo::canbus::Horn_cmd_11c_Horn_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Horn_cmd_11c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_cmd_11c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Horn_cmd_11c.Horn_cmdType horn_cmd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_horn_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_cmd_11c)
  return target;
}

size_t Horn_cmd_11c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_cmd_11c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Horn_cmd_11c.Horn_cmdType horn_cmd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horn_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Horn_cmd_11c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Horn_cmd_11c)
  GOOGLE_DCHECK_NE(&from, this);
  const Horn_cmd_11c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Horn_cmd_11c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Horn_cmd_11c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Horn_cmd_11c)
    MergeFrom(*source);
  }
}

void Horn_cmd_11c::MergeFrom(const Horn_cmd_11c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_cmd_11c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_faults_ = from.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      horn_cmd_ = from.horn_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Horn_cmd_11c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Horn_cmd_11c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Horn_cmd_11c::CopyFrom(const Horn_cmd_11c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_cmd_11c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_cmd_11c::IsInitialized() const {
  return true;
}

void Horn_cmd_11c::InternalSwap(Horn_cmd_11c* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
  swap(horn_cmd_, other->horn_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Horn_cmd_11c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Global_rpt_10::InitAsDefaultInstance() {
}
class Global_rpt_10::_Internal {
 public:
  using HasBits = decltype(std::declval<Global_rpt_10>()._has_bits_);
  static void set_has_config_fault_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pacmod_subsystem_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pacmod_system_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_system_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pacmod_system_fault_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_veh_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_str_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_brk_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usr_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_usr_can_read_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Global_rpt_10::Global_rpt_10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Global_rpt_10)
}
Global_rpt_10::Global_rpt_10(const Global_rpt_10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pacmod_system_enabled_, &from.pacmod_system_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&usr_can_read_errors_) -
    reinterpret_cast<char*>(&pacmod_system_enabled_)) + sizeof(usr_can_read_errors_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Global_rpt_10)
}

void Global_rpt_10::SharedCtor() {
  ::memset(&pacmod_system_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usr_can_read_errors_) -
      reinterpret_cast<char*>(&pacmod_system_enabled_)) + sizeof(usr_can_read_errors_));
}

Global_rpt_10::~Global_rpt_10() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Global_rpt_10)
  SharedDtor();
}

void Global_rpt_10::SharedDtor() {
}

void Global_rpt_10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Global_rpt_10& Global_rpt_10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Global_rpt_10_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Global_rpt_10::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Global_rpt_10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pacmod_system_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&str_can_timeout_) -
        reinterpret_cast<char*>(&pacmod_system_enabled_)) + sizeof(str_can_timeout_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&usr_can_timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usr_can_read_errors_) -
        reinterpret_cast<char*>(&usr_can_timeout_)) + sizeof(usr_can_read_errors_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Global_rpt_10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool config_fault_active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_config_fault_active(&has_bits);
          config_fault_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_subsystem_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_subsystem_timeout(&has_bits);
          pacmod_subsystem_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_10.Pacmod_system_enabledType pacmod_system_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType_IsValid(val))) {
            _internal_set_pacmod_system_enabled(static_cast<::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_10.Pacmod_system_override_activeType pacmod_system_override_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType_IsValid(val))) {
            _internal_set_pacmod_system_override_active(static_cast<::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_system_fault_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pacmod_system_fault_active(&has_bits);
          pacmod_system_fault_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool veh_can_timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_veh_can_timeout(&has_bits);
          veh_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool str_can_timeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_str_can_timeout(&has_bits);
          str_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_10.Brk_can_timeoutType brk_can_timeout = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_10_Brk_can_timeoutType_IsValid(val))) {
            _internal_set_brk_can_timeout(static_cast<::apollo::canbus::Global_rpt_10_Brk_can_timeoutType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool usr_can_timeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_usr_can_timeout(&has_bits);
          usr_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 usr_can_read_errors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_usr_can_read_errors(&has_bits);
          usr_can_read_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Global_rpt_10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Global_rpt_10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool config_fault_active = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_config_fault_active(), target);
  }

  // optional bool pacmod_subsystem_timeout = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_subsystem_timeout(), target);
  }

  // optional .apollo.canbus.Global_rpt_10.Pacmod_system_enabledType pacmod_system_enabled = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pacmod_system_enabled(), target);
  }

  // optional .apollo.canbus.Global_rpt_10.Pacmod_system_override_activeType pacmod_system_override_active = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pacmod_system_override_active(), target);
  }

  // optional bool pacmod_system_fault_active = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_system_fault_active(), target);
  }

  // optional bool veh_can_timeout = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_veh_can_timeout(), target);
  }

  // optional bool str_can_timeout = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_str_can_timeout(), target);
  }

  // optional .apollo.canbus.Global_rpt_10.Brk_can_timeoutType brk_can_timeout = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_brk_can_timeout(), target);
  }

  // optional bool usr_can_timeout = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_usr_can_timeout(), target);
  }

  // optional int32 usr_can_read_errors = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_usr_can_read_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Global_rpt_10)
  return target;
}

size_t Global_rpt_10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Global_rpt_10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Global_rpt_10.Pacmod_system_enabledType pacmod_system_enabled = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pacmod_system_enabled());
    }

    // optional bool config_fault_active = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_subsystem_timeout = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_system_fault_active = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool veh_can_timeout = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Global_rpt_10.Pacmod_system_override_activeType pacmod_system_override_active = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pacmod_system_override_active());
    }

    // optional .apollo.canbus.Global_rpt_10.Brk_can_timeoutType brk_can_timeout = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brk_can_timeout());
    }

    // optional bool str_can_timeout = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool usr_can_timeout = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 usr_can_read_errors = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_usr_can_read_errors());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Global_rpt_10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Global_rpt_10)
  GOOGLE_DCHECK_NE(&from, this);
  const Global_rpt_10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Global_rpt_10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Global_rpt_10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Global_rpt_10)
    MergeFrom(*source);
  }
}

void Global_rpt_10::MergeFrom(const Global_rpt_10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Global_rpt_10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pacmod_system_enabled_ = from.pacmod_system_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      config_fault_active_ = from.config_fault_active_;
    }
    if (cached_has_bits & 0x00000004u) {
      pacmod_subsystem_timeout_ = from.pacmod_subsystem_timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      pacmod_system_fault_active_ = from.pacmod_system_fault_active_;
    }
    if (cached_has_bits & 0x00000010u) {
      veh_can_timeout_ = from.veh_can_timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      pacmod_system_override_active_ = from.pacmod_system_override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      brk_can_timeout_ = from.brk_can_timeout_;
    }
    if (cached_has_bits & 0x00000080u) {
      str_can_timeout_ = from.str_can_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      usr_can_timeout_ = from.usr_can_timeout_;
    }
    if (cached_has_bits & 0x00000200u) {
      usr_can_read_errors_ = from.usr_can_read_errors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Global_rpt_10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Global_rpt_10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global_rpt_10::CopyFrom(const Global_rpt_10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Global_rpt_10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_rpt_10::IsInitialized() const {
  return true;
}

void Global_rpt_10::InternalSwap(Global_rpt_10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pacmod_system_enabled_, other->pacmod_system_enabled_);
  swap(config_fault_active_, other->config_fault_active_);
  swap(pacmod_subsystem_timeout_, other->pacmod_subsystem_timeout_);
  swap(pacmod_system_fault_active_, other->pacmod_system_fault_active_);
  swap(veh_can_timeout_, other->veh_can_timeout_);
  swap(pacmod_system_override_active_, other->pacmod_system_override_active_);
  swap(brk_can_timeout_, other->brk_can_timeout_);
  swap(str_can_timeout_, other->str_can_timeout_);
  swap(usr_can_timeout_, other->usr_can_timeout_);
  swap(usr_can_read_errors_, other->usr_can_read_errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Global_rpt_10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Accel_aux_rpt_300::InitAsDefaultInstance() {
}
class Accel_aux_rpt_300::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_aux_rpt_300>()._has_bits_);
  static void set_has_user_interaction_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_pedal_force_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_pedal_force(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_raw_pedal_pos_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_raw_pedal_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Accel_aux_rpt_300::Accel_aux_rpt_300()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Accel_aux_rpt_300)
}
Accel_aux_rpt_300::Accel_aux_rpt_300(const Accel_aux_rpt_300& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&raw_pedal_force_, &from.raw_pedal_force_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_pedal_pos_is_valid_) -
    reinterpret_cast<char*>(&raw_pedal_force_)) + sizeof(raw_pedal_pos_is_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_aux_rpt_300)
}

void Accel_aux_rpt_300::SharedCtor() {
  ::memset(&raw_pedal_force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_pedal_pos_is_valid_) -
      reinterpret_cast<char*>(&raw_pedal_force_)) + sizeof(raw_pedal_pos_is_valid_));
}

Accel_aux_rpt_300::~Accel_aux_rpt_300() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_aux_rpt_300)
  SharedDtor();
}

void Accel_aux_rpt_300::SharedDtor() {
}

void Accel_aux_rpt_300::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accel_aux_rpt_300& Accel_aux_rpt_300::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accel_aux_rpt_300_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Accel_aux_rpt_300::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_aux_rpt_300)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&raw_pedal_force_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_pedal_pos_is_valid_) -
        reinterpret_cast<char*>(&raw_pedal_force_)) + sizeof(raw_pedal_pos_is_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Accel_aux_rpt_300::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool user_interaction_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_interaction_is_valid(&has_bits);
          user_interaction_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_interaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_interaction(&has_bits);
          user_interaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool raw_pedal_force_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_raw_pedal_force_is_valid(&has_bits);
          raw_pedal_force_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double raw_pedal_force = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_raw_pedal_force(&has_bits);
          raw_pedal_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool raw_pedal_pos_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_raw_pedal_pos_is_valid(&has_bits);
          raw_pedal_pos_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double raw_pedal_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_raw_pedal_pos(&has_bits);
          raw_pedal_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accel_aux_rpt_300::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_aux_rpt_300)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool user_interaction_is_valid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_user_interaction_is_valid(), target);
  }

  // optional bool user_interaction = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_user_interaction(), target);
  }

  // optional bool raw_pedal_force_is_valid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_raw_pedal_force_is_valid(), target);
  }

  // optional double raw_pedal_force = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_raw_pedal_force(), target);
  }

  // optional bool raw_pedal_pos_is_valid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_raw_pedal_pos_is_valid(), target);
  }

  // optional double raw_pedal_pos = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_raw_pedal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_aux_rpt_300)
  return target;
}

size_t Accel_aux_rpt_300::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_aux_rpt_300)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double raw_pedal_force = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double raw_pedal_pos = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool user_interaction_is_valid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool user_interaction = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool raw_pedal_force_is_valid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool raw_pedal_pos_is_valid = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel_aux_rpt_300::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Accel_aux_rpt_300)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel_aux_rpt_300* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accel_aux_rpt_300>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Accel_aux_rpt_300)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Accel_aux_rpt_300)
    MergeFrom(*source);
  }
}

void Accel_aux_rpt_300::MergeFrom(const Accel_aux_rpt_300& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_aux_rpt_300)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      raw_pedal_force_ = from.raw_pedal_force_;
    }
    if (cached_has_bits & 0x00000002u) {
      raw_pedal_pos_ = from.raw_pedal_pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_interaction_is_valid_ = from.user_interaction_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_interaction_ = from.user_interaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      raw_pedal_force_is_valid_ = from.raw_pedal_force_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      raw_pedal_pos_is_valid_ = from.raw_pedal_pos_is_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Accel_aux_rpt_300::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Accel_aux_rpt_300)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel_aux_rpt_300::CopyFrom(const Accel_aux_rpt_300& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_aux_rpt_300)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_aux_rpt_300::IsInitialized() const {
  return true;
}

void Accel_aux_rpt_300::InternalSwap(Accel_aux_rpt_300* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(raw_pedal_force_, other->raw_pedal_force_);
  swap(raw_pedal_pos_, other->raw_pedal_pos_);
  swap(user_interaction_is_valid_, other->user_interaction_is_valid_);
  swap(user_interaction_, other->user_interaction_);
  swap(raw_pedal_force_is_valid_, other->raw_pedal_force_is_valid_);
  swap(raw_pedal_pos_is_valid_, other->raw_pedal_pos_is_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_aux_rpt_300::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cruise_control_buttons_rpt_208::InitAsDefaultInstance() {
}
class Cruise_control_buttons_rpt_208::_Internal {
 public:
  using HasBits = decltype(std::declval<Cruise_control_buttons_rpt_208>()._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Cruise_control_buttons_rpt_208::Cruise_control_buttons_rpt_208()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Cruise_control_buttons_rpt_208)
}
Cruise_control_buttons_rpt_208::Cruise_control_buttons_rpt_208(const Cruise_control_buttons_rpt_208& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_output_fault_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(command_output_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Cruise_control_buttons_rpt_208)
}

void Cruise_control_buttons_rpt_208::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_output_fault_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(command_output_fault_));
}

Cruise_control_buttons_rpt_208::~Cruise_control_buttons_rpt_208() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Cruise_control_buttons_rpt_208)
  SharedDtor();
}

void Cruise_control_buttons_rpt_208::SharedDtor() {
}

void Cruise_control_buttons_rpt_208::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cruise_control_buttons_rpt_208& Cruise_control_buttons_rpt_208::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cruise_control_buttons_rpt_208_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Cruise_control_buttons_rpt_208::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_output_fault_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(input_output_fault_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_output_fault_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(command_output_fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Cruise_control_buttons_rpt_208::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Manual_inputType manual_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Commanded_valueType commanded_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cruise_control_buttons_rpt_208::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Manual_inputType manual_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Commanded_valueType commanded_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_commanded_value(), target);
  }

  // optional bool vehicle_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_command_output_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Cruise_control_buttons_rpt_208)
  return target;
}

size_t Cruise_control_buttons_rpt_208::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Manual_inputType manual_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Commanded_valueType commanded_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional bool vehicle_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cruise_control_buttons_rpt_208::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  GOOGLE_DCHECK_NE(&from, this);
  const Cruise_control_buttons_rpt_208* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cruise_control_buttons_rpt_208>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Cruise_control_buttons_rpt_208)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Cruise_control_buttons_rpt_208)
    MergeFrom(*source);
  }
}

void Cruise_control_buttons_rpt_208::MergeFrom(const Cruise_control_buttons_rpt_208& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000004u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_output_fault_ = from.input_output_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      command_output_fault_ = from.command_output_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Cruise_control_buttons_rpt_208::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cruise_control_buttons_rpt_208::CopyFrom(const Cruise_control_buttons_rpt_208& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Cruise_control_buttons_rpt_208)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cruise_control_buttons_rpt_208::IsInitialized() const {
  return true;
}

void Cruise_control_buttons_rpt_208::InternalSwap(Cruise_control_buttons_rpt_208* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_value_, other->output_value_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cruise_control_buttons_rpt_208::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle_speed_rpt_400::InitAsDefaultInstance() {
}
class Vehicle_speed_rpt_400::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_speed_rpt_400>()._has_bits_);
  static void set_has_vehicle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_speed_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Vehicle_speed_rpt_400::Vehicle_speed_rpt_400()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Vehicle_speed_rpt_400)
}
Vehicle_speed_rpt_400::Vehicle_speed_rpt_400(const Vehicle_speed_rpt_400& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_speed_, &from.vehicle_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_speed_valid_) -
    reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_speed_rpt_400)
}

void Vehicle_speed_rpt_400::SharedCtor() {
  ::memset(&vehicle_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_speed_valid_) -
      reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
}

Vehicle_speed_rpt_400::~Vehicle_speed_rpt_400() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_speed_rpt_400)
  SharedDtor();
}

void Vehicle_speed_rpt_400::SharedDtor() {
}

void Vehicle_speed_rpt_400::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_speed_rpt_400& Vehicle_speed_rpt_400::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_speed_rpt_400_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_speed_rpt_400::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_speed_rpt_400)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&vehicle_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicle_speed_valid_) -
        reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle_speed_rpt_400::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double vehicle_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_vehicle_speed(&has_bits);
          vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_speed_rpt_400.Vehicle_speed_validType vehicle_speed_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType_IsValid(val))) {
            _internal_set_vehicle_speed_valid(static_cast<::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_speed_rpt_400::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_speed_rpt_400)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double vehicle_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_vehicle_speed(), target);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_400.Vehicle_speed_validType vehicle_speed_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vehicle_speed_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_speed_rpt_400)
  return target;
}

size_t Vehicle_speed_rpt_400::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_speed_rpt_400)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double vehicle_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Vehicle_speed_rpt_400.Vehicle_speed_validType vehicle_speed_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vehicle_speed_valid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_speed_rpt_400::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Vehicle_speed_rpt_400)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_speed_rpt_400* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_speed_rpt_400>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Vehicle_speed_rpt_400)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Vehicle_speed_rpt_400)
    MergeFrom(*source);
  }
}

void Vehicle_speed_rpt_400::MergeFrom(const Vehicle_speed_rpt_400& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_speed_rpt_400)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_speed_ = from.vehicle_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_speed_valid_ = from.vehicle_speed_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle_speed_rpt_400::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Vehicle_speed_rpt_400)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_speed_rpt_400::CopyFrom(const Vehicle_speed_rpt_400& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_speed_rpt_400)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_speed_rpt_400::IsInitialized() const {
  return true;
}

void Vehicle_speed_rpt_400::InternalSwap(Vehicle_speed_rpt_400* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_speed_, other->vehicle_speed_);
  swap(vehicle_speed_valid_, other->vehicle_speed_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_speed_rpt_400::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_aux_rpt_304::InitAsDefaultInstance() {
}
class Brake_aux_rpt_304::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_aux_rpt_304>()._has_bits_);
  static void set_has_brake_on_off_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_on_off(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_interaction_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_user_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_brake_pressure_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_brake_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_raw_pedal_force_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_raw_pedal_force(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_raw_pedal_pos_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raw_pedal_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Brake_aux_rpt_304::Brake_aux_rpt_304()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_aux_rpt_304)
}
Brake_aux_rpt_304::Brake_aux_rpt_304(const Brake_aux_rpt_304& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_on_off_is_valid_, &from.brake_on_off_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_pedal_pos_) -
    reinterpret_cast<char*>(&brake_on_off_is_valid_)) + sizeof(raw_pedal_pos_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_aux_rpt_304)
}

void Brake_aux_rpt_304::SharedCtor() {
  ::memset(&brake_on_off_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_pedal_pos_) -
      reinterpret_cast<char*>(&brake_on_off_is_valid_)) + sizeof(raw_pedal_pos_));
}

Brake_aux_rpt_304::~Brake_aux_rpt_304() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_aux_rpt_304)
  SharedDtor();
}

void Brake_aux_rpt_304::SharedDtor() {
}

void Brake_aux_rpt_304::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_aux_rpt_304& Brake_aux_rpt_304::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_aux_rpt_304_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Brake_aux_rpt_304::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_aux_rpt_304)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&brake_on_off_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_brake_pressure_) -
        reinterpret_cast<char*>(&brake_on_off_is_valid_)) + sizeof(raw_brake_pressure_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&raw_pedal_force_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_pedal_pos_) -
        reinterpret_cast<char*>(&raw_pedal_force_)) + sizeof(raw_pedal_pos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_aux_rpt_304::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool brake_on_off_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_brake_on_off_is_valid(&has_bits);
          brake_on_off_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool brake_on_off = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_brake_on_off(&has_bits);
          brake_on_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_interaction_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_interaction_is_valid(&has_bits);
          user_interaction_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_interaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_user_interaction(&has_bits);
          user_interaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool raw_brake_pressure_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_raw_brake_pressure_is_valid(&has_bits);
          raw_brake_pressure_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double raw_brake_pressure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_raw_brake_pressure(&has_bits);
          raw_brake_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool raw_pedal_force_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_raw_pedal_force_is_valid(&has_bits);
          raw_pedal_force_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double raw_pedal_force = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_raw_pedal_force(&has_bits);
          raw_pedal_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool raw_pedal_pos_is_valid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_raw_pedal_pos_is_valid(&has_bits);
          raw_pedal_pos_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double raw_pedal_pos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_raw_pedal_pos(&has_bits);
          raw_pedal_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_aux_rpt_304::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_aux_rpt_304)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool brake_on_off_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_brake_on_off_is_valid(), target);
  }

  // optional bool brake_on_off = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_brake_on_off(), target);
  }

  // optional bool user_interaction_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_user_interaction_is_valid(), target);
  }

  // optional bool user_interaction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_user_interaction(), target);
  }

  // optional bool raw_brake_pressure_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_raw_brake_pressure_is_valid(), target);
  }

  // optional double raw_brake_pressure = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_raw_brake_pressure(), target);
  }

  // optional bool raw_pedal_force_is_valid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_raw_pedal_force_is_valid(), target);
  }

  // optional double raw_pedal_force = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_raw_pedal_force(), target);
  }

  // optional bool raw_pedal_pos_is_valid = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_raw_pedal_pos_is_valid(), target);
  }

  // optional double raw_pedal_pos = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_raw_pedal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_aux_rpt_304)
  return target;
}

size_t Brake_aux_rpt_304::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_aux_rpt_304)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool brake_on_off_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool brake_on_off = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool user_interaction_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool user_interaction = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool raw_brake_pressure_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool raw_pedal_force_is_valid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool raw_pedal_pos_is_valid = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional double raw_brake_pressure = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double raw_pedal_force = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double raw_pedal_pos = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_aux_rpt_304::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_aux_rpt_304)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_aux_rpt_304* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_aux_rpt_304>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_aux_rpt_304)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_aux_rpt_304)
    MergeFrom(*source);
  }
}

void Brake_aux_rpt_304::MergeFrom(const Brake_aux_rpt_304& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_aux_rpt_304)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      brake_on_off_is_valid_ = from.brake_on_off_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_on_off_ = from.brake_on_off_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_interaction_is_valid_ = from.user_interaction_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      user_interaction_ = from.user_interaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      raw_brake_pressure_is_valid_ = from.raw_brake_pressure_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      raw_pedal_force_is_valid_ = from.raw_pedal_force_is_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      raw_pedal_pos_is_valid_ = from.raw_pedal_pos_is_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      raw_brake_pressure_ = from.raw_brake_pressure_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      raw_pedal_force_ = from.raw_pedal_force_;
    }
    if (cached_has_bits & 0x00000200u) {
      raw_pedal_pos_ = from.raw_pedal_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_aux_rpt_304::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_aux_rpt_304)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_aux_rpt_304::CopyFrom(const Brake_aux_rpt_304& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_aux_rpt_304)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_aux_rpt_304::IsInitialized() const {
  return true;
}

void Brake_aux_rpt_304::InternalSwap(Brake_aux_rpt_304* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_on_off_is_valid_, other->brake_on_off_is_valid_);
  swap(brake_on_off_, other->brake_on_off_);
  swap(user_interaction_is_valid_, other->user_interaction_is_valid_);
  swap(user_interaction_, other->user_interaction_);
  swap(raw_brake_pressure_is_valid_, other->raw_brake_pressure_is_valid_);
  swap(raw_pedal_force_is_valid_, other->raw_pedal_force_is_valid_);
  swap(raw_pedal_pos_is_valid_, other->raw_pedal_pos_is_valid_);
  swap(raw_brake_pressure_, other->raw_brake_pressure_);
  swap(raw_pedal_force_, other->raw_pedal_force_);
  swap(raw_pedal_pos_, other->raw_pedal_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_aux_rpt_304::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Media_controls_cmd_120::InitAsDefaultInstance() {
}
class Media_controls_cmd_120::_Internal {
 public:
  using HasBits = decltype(std::declval<Media_controls_cmd_120>()._has_bits_);
  static void set_has_media_controls_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Media_controls_cmd_120::Media_controls_cmd_120()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Media_controls_cmd_120)
}
Media_controls_cmd_120::Media_controls_cmd_120(const Media_controls_cmd_120& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&media_controls_cmd_, &from.media_controls_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_) -
    reinterpret_cast<char*>(&media_controls_cmd_)) + sizeof(enable_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Media_controls_cmd_120)
}

void Media_controls_cmd_120::SharedCtor() {
  ::memset(&media_controls_cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) -
      reinterpret_cast<char*>(&media_controls_cmd_)) + sizeof(enable_));
}

Media_controls_cmd_120::~Media_controls_cmd_120() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Media_controls_cmd_120)
  SharedDtor();
}

void Media_controls_cmd_120::SharedDtor() {
}

void Media_controls_cmd_120::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Media_controls_cmd_120& Media_controls_cmd_120::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Media_controls_cmd_120_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Media_controls_cmd_120::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Media_controls_cmd_120)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&media_controls_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_) -
        reinterpret_cast<char*>(&media_controls_cmd_)) + sizeof(enable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Media_controls_cmd_120::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Media_controls_cmd_120.Media_controls_cmdType media_controls_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType_IsValid(val))) {
            _internal_set_media_controls_cmd(static_cast<::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool ignore_overrides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Media_controls_cmd_120::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Media_controls_cmd_120)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Media_controls_cmd_120.Media_controls_cmdType media_controls_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_media_controls_cmd(), target);
  }

  // optional bool ignore_overrides = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_overrides(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional bool enable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Media_controls_cmd_120)
  return target;
}

size_t Media_controls_cmd_120::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Media_controls_cmd_120)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Media_controls_cmd_120.Media_controls_cmdType media_controls_cmd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_media_controls_cmd());
    }

    // optional bool ignore_overrides = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media_controls_cmd_120::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Media_controls_cmd_120)
  GOOGLE_DCHECK_NE(&from, this);
  const Media_controls_cmd_120* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Media_controls_cmd_120>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Media_controls_cmd_120)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Media_controls_cmd_120)
    MergeFrom(*source);
  }
}

void Media_controls_cmd_120::MergeFrom(const Media_controls_cmd_120& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Media_controls_cmd_120)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      media_controls_cmd_ = from.media_controls_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_faults_ = from.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      enable_ = from.enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Media_controls_cmd_120::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Media_controls_cmd_120)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Media_controls_cmd_120::CopyFrom(const Media_controls_cmd_120& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Media_controls_cmd_120)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media_controls_cmd_120::IsInitialized() const {
  return true;
}

void Media_controls_cmd_120::InternalSwap(Media_controls_cmd_120* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(media_controls_cmd_, other->media_controls_cmd_);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Media_controls_cmd_120::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cruise_control_buttons_cmd_108::InitAsDefaultInstance() {
}
class Cruise_control_buttons_cmd_108::_Internal {
 public:
  using HasBits = decltype(std::declval<Cruise_control_buttons_cmd_108>()._has_bits_);
  static void set_has_cruise_control_button(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Cruise_control_buttons_cmd_108::Cruise_control_buttons_cmd_108()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Cruise_control_buttons_cmd_108)
}
Cruise_control_buttons_cmd_108::Cruise_control_buttons_cmd_108(const Cruise_control_buttons_cmd_108& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cruise_control_button_, &from.cruise_control_button_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_faults_) -
    reinterpret_cast<char*>(&cruise_control_button_)) + sizeof(clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Cruise_control_buttons_cmd_108)
}

void Cruise_control_buttons_cmd_108::SharedCtor() {
  ::memset(&cruise_control_button_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_faults_) -
      reinterpret_cast<char*>(&cruise_control_button_)) + sizeof(clear_faults_));
}

Cruise_control_buttons_cmd_108::~Cruise_control_buttons_cmd_108() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Cruise_control_buttons_cmd_108)
  SharedDtor();
}

void Cruise_control_buttons_cmd_108::SharedDtor() {
}

void Cruise_control_buttons_cmd_108::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cruise_control_buttons_cmd_108& Cruise_control_buttons_cmd_108::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cruise_control_buttons_cmd_108_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Cruise_control_buttons_cmd_108::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&cruise_control_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clear_faults_) -
        reinterpret_cast<char*>(&cruise_control_button_)) + sizeof(clear_faults_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Cruise_control_buttons_cmd_108::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Cruise_control_buttons_cmd_108.Cruise_control_buttonType cruise_control_button = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType_IsValid(val))) {
            _internal_set_cruise_control_button(static_cast<::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool ignore_overrides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cruise_control_buttons_cmd_108::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Cruise_control_buttons_cmd_108.Cruise_control_buttonType cruise_control_button = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cruise_control_button(), target);
  }

  // optional bool ignore_overrides = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_overrides(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool enable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable(), target);
  }

  // optional bool clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_clear_faults(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Cruise_control_buttons_cmd_108)
  return target;
}

size_t Cruise_control_buttons_cmd_108::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Cruise_control_buttons_cmd_108.Cruise_control_buttonType cruise_control_button = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cruise_control_button());
    }

    // optional bool ignore_overrides = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cruise_control_buttons_cmd_108::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  GOOGLE_DCHECK_NE(&from, this);
  const Cruise_control_buttons_cmd_108* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cruise_control_buttons_cmd_108>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Cruise_control_buttons_cmd_108)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Cruise_control_buttons_cmd_108)
    MergeFrom(*source);
  }
}

void Cruise_control_buttons_cmd_108::MergeFrom(const Cruise_control_buttons_cmd_108& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      cruise_control_button_ = from.cruise_control_button_;
    }
    if (cached_has_bits & 0x00000002u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      clear_faults_ = from.clear_faults_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Cruise_control_buttons_cmd_108::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cruise_control_buttons_cmd_108::CopyFrom(const Cruise_control_buttons_cmd_108& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Cruise_control_buttons_cmd_108)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cruise_control_buttons_cmd_108::IsInitialized() const {
  return true;
}

void Cruise_control_buttons_cmd_108::InternalSwap(Cruise_control_buttons_cmd_108* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cruise_control_button_, other->cruise_control_button_);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(clear_override_, other->clear_override_);
  swap(enable_, other->enable_);
  swap(clear_faults_, other->clear_faults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cruise_control_buttons_cmd_108::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Parking_brake_cmd_124::InitAsDefaultInstance() {
}
class Parking_brake_cmd_124::_Internal {
 public:
  using HasBits = decltype(std::declval<Parking_brake_cmd_124>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Parking_brake_cmd_124::Parking_brake_cmd_124()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Parking_brake_cmd_124)
}
Parking_brake_cmd_124::Parking_brake_cmd_124(const Parking_brake_cmd_124& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_overrides_, &from.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_faults_) -
    reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_brake_cmd_124)
}

void Parking_brake_cmd_124::SharedCtor() {
  ::memset(&ignore_overrides_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_faults_) -
      reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(clear_faults_));
}

Parking_brake_cmd_124::~Parking_brake_cmd_124() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_brake_cmd_124)
  SharedDtor();
}

void Parking_brake_cmd_124::SharedDtor() {
}

void Parking_brake_cmd_124::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Parking_brake_cmd_124& Parking_brake_cmd_124::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Parking_brake_cmd_124_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Parking_brake_cmd_124::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_brake_cmd_124)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clear_faults_) -
        reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(clear_faults_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Parking_brake_cmd_124::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool parking_brake_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_parking_brake_cmd(&has_bits);
          parking_brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parking_brake_cmd_124::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_brake_cmd_124)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool parking_brake_cmd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_parking_brake_cmd(), target);
  }

  // optional bool clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_clear_faults(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_brake_cmd_124)
  return target;
}

size_t Parking_brake_cmd_124::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_brake_cmd_124)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake_cmd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parking_brake_cmd_124::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Parking_brake_cmd_124)
  GOOGLE_DCHECK_NE(&from, this);
  const Parking_brake_cmd_124* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parking_brake_cmd_124>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Parking_brake_cmd_124)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Parking_brake_cmd_124)
    MergeFrom(*source);
  }
}

void Parking_brake_cmd_124::MergeFrom(const Parking_brake_cmd_124& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_brake_cmd_124)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      parking_brake_cmd_ = from.parking_brake_cmd_;
    }
    if (cached_has_bits & 0x00000010u) {
      clear_faults_ = from.clear_faults_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Parking_brake_cmd_124::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Parking_brake_cmd_124)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parking_brake_cmd_124::CopyFrom(const Parking_brake_cmd_124& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_brake_cmd_124)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_brake_cmd_124::IsInitialized() const {
  return true;
}

void Parking_brake_cmd_124::InternalSwap(Parking_brake_cmd_124* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(parking_brake_cmd_, other->parking_brake_cmd_);
  swap(clear_faults_, other->clear_faults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parking_brake_cmd_124::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Horn_rpt_21c::InitAsDefaultInstance() {
}
class Horn_rpt_21c::_Internal {
 public:
  using HasBits = decltype(std::declval<Horn_rpt_21c>()._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Horn_rpt_21c::Horn_rpt_21c()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Horn_rpt_21c)
}
Horn_rpt_21c::Horn_rpt_21c(const Horn_rpt_21c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_fault_, &from.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_input_) -
    reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_rpt_21c)
}

void Horn_rpt_21c::SharedCtor() {
  ::memset(&vehicle_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_input_) -
      reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
}

Horn_rpt_21c::~Horn_rpt_21c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_rpt_21c)
  SharedDtor();
}

void Horn_rpt_21c::SharedDtor() {
}

void Horn_rpt_21c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Horn_rpt_21c& Horn_rpt_21c::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Horn_rpt_21c_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Horn_rpt_21c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_rpt_21c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&commanded_value_)) + sizeof(manual_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Horn_rpt_21c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_21c.Output_valueType output_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_21c_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Horn_rpt_21c_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_21c.Commanded_valueType commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_21c_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Horn_rpt_21c_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_21c.Manual_inputType manual_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_21c_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Horn_rpt_21c_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Horn_rpt_21c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_rpt_21c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Horn_rpt_21c.Output_valueType output_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_21c.Commanded_valueType commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_21c.Manual_inputType manual_input = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_rpt_21c)
  return target;
}

size_t Horn_rpt_21c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_rpt_21c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Horn_rpt_21c.Output_valueType output_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Horn_rpt_21c.Commanded_valueType commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Horn_rpt_21c.Manual_inputType manual_input = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Horn_rpt_21c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Horn_rpt_21c)
  GOOGLE_DCHECK_NE(&from, this);
  const Horn_rpt_21c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Horn_rpt_21c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Horn_rpt_21c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Horn_rpt_21c)
    MergeFrom(*source);
  }
}

void Horn_rpt_21c::MergeFrom(const Horn_rpt_21c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_rpt_21c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Horn_rpt_21c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Horn_rpt_21c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Horn_rpt_21c::CopyFrom(const Horn_rpt_21c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_rpt_21c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_rpt_21c::IsInitialized() const {
  return true;
}

void Horn_rpt_21c::InternalSwap(Horn_rpt_21c* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Horn_rpt_21c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shift_rpt_228::InitAsDefaultInstance() {
}
class Shift_rpt_228::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_rpt_228>()._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Shift_rpt_228::Shift_rpt_228()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Shift_rpt_228)
}
Shift_rpt_228::Shift_rpt_228(const Shift_rpt_228& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_fault_, &from.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_rpt_228)
}

void Shift_rpt_228::SharedCtor() {
  ::memset(&vehicle_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
}

Shift_rpt_228::~Shift_rpt_228() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_rpt_228)
  SharedDtor();
}

void Shift_rpt_228::SharedDtor() {
}

void Shift_rpt_228::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shift_rpt_228& Shift_rpt_228::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shift_rpt_228_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Shift_rpt_228::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_rpt_228)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&commanded_value_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Shift_rpt_228::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_228.Manual_inputType manual_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_228_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Shift_rpt_228_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_228.Commanded_valueType commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_228_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Shift_rpt_228_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_228.Output_valueType output_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_228_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Shift_rpt_228_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shift_rpt_228::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_rpt_228)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional .apollo.canbus.Shift_rpt_228.Manual_inputType manual_input = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Shift_rpt_228.Commanded_valueType commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Shift_rpt_228.Output_valueType output_value = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_rpt_228)
  return target;
}

size_t Shift_rpt_228::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_rpt_228)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Shift_rpt_228.Manual_inputType manual_input = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Shift_rpt_228.Commanded_valueType commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Shift_rpt_228.Output_valueType output_value = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shift_rpt_228::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Shift_rpt_228)
  GOOGLE_DCHECK_NE(&from, this);
  const Shift_rpt_228* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shift_rpt_228>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Shift_rpt_228)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Shift_rpt_228)
    MergeFrom(*source);
  }
}

void Shift_rpt_228::MergeFrom(const Shift_rpt_228& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_rpt_228)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Shift_rpt_228::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Shift_rpt_228)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shift_rpt_228::CopyFrom(const Shift_rpt_228& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_rpt_228)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_rpt_228::IsInitialized() const {
  return true;
}

void Shift_rpt_228::InternalSwap(Shift_rpt_228* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_rpt_228::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shift_cmd_128::InitAsDefaultInstance() {
}
class Shift_cmd_128::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_cmd_128>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shift_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Shift_cmd_128::Shift_cmd_128()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Shift_cmd_128)
}
Shift_cmd_128::Shift_cmd_128(const Shift_cmd_128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_overrides_, &from.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&shift_cmd_) -
    reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(shift_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_cmd_128)
}

void Shift_cmd_128::SharedCtor() {
  ::memset(&ignore_overrides_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shift_cmd_) -
      reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(shift_cmd_));
}

Shift_cmd_128::~Shift_cmd_128() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_cmd_128)
  SharedDtor();
}

void Shift_cmd_128::SharedDtor() {
}

void Shift_cmd_128::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shift_cmd_128& Shift_cmd_128::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shift_cmd_128_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Shift_cmd_128::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_cmd_128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shift_cmd_) -
        reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(shift_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Shift_cmd_128::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_cmd_128.Shift_cmdType shift_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_cmd_128_Shift_cmdType_IsValid(val))) {
            _internal_set_shift_cmd(static_cast<::apollo::canbus::Shift_cmd_128_Shift_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shift_cmd_128::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_cmd_128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Shift_cmd_128.Shift_cmdType shift_cmd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_shift_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_cmd_128)
  return target;
}

size_t Shift_cmd_128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_cmd_128)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Shift_cmd_128.Shift_cmdType shift_cmd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shift_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shift_cmd_128::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Shift_cmd_128)
  GOOGLE_DCHECK_NE(&from, this);
  const Shift_cmd_128* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shift_cmd_128>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Shift_cmd_128)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Shift_cmd_128)
    MergeFrom(*source);
  }
}

void Shift_cmd_128::MergeFrom(const Shift_cmd_128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_cmd_128)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_faults_ = from.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      shift_cmd_ = from.shift_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Shift_cmd_128::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Shift_cmd_128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shift_cmd_128::CopyFrom(const Shift_cmd_128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_cmd_128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_cmd_128::IsInitialized() const {
  return true;
}

void Shift_cmd_128::InternalSwap(Shift_cmd_128* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
  swap(shift_cmd_, other->shift_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_cmd_128::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Accel_cmd_100::InitAsDefaultInstance() {
}
class Accel_cmd_100::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_cmd_100>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_accel_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Accel_cmd_100::Accel_cmd_100()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Accel_cmd_100)
}
Accel_cmd_100::Accel_cmd_100(const Accel_cmd_100& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accel_cmd_, &from.accel_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_faults_) -
    reinterpret_cast<char*>(&accel_cmd_)) + sizeof(clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_cmd_100)
}

void Accel_cmd_100::SharedCtor() {
  ::memset(&accel_cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_faults_) -
      reinterpret_cast<char*>(&accel_cmd_)) + sizeof(clear_faults_));
}

Accel_cmd_100::~Accel_cmd_100() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_cmd_100)
  SharedDtor();
}

void Accel_cmd_100::SharedDtor() {
}

void Accel_cmd_100::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accel_cmd_100& Accel_cmd_100::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accel_cmd_100_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Accel_cmd_100::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_cmd_100)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&accel_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clear_faults_) -
        reinterpret_cast<char*>(&accel_cmd_)) + sizeof(clear_faults_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Accel_cmd_100::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double accel_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_accel_cmd(&has_bits);
          accel_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accel_cmd_100::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_cmd_100)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional double accel_cmd = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_accel_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_cmd_100)
  return target;
}

size_t Accel_cmd_100::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_cmd_100)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double accel_cmd = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel_cmd_100::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Accel_cmd_100)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel_cmd_100* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accel_cmd_100>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Accel_cmd_100)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Accel_cmd_100)
    MergeFrom(*source);
  }
}

void Accel_cmd_100::MergeFrom(const Accel_cmd_100& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_cmd_100)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      accel_cmd_ = from.accel_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000010u) {
      clear_faults_ = from.clear_faults_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Accel_cmd_100::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Accel_cmd_100)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel_cmd_100::CopyFrom(const Accel_cmd_100& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_cmd_100)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_cmd_100::IsInitialized() const {
  return true;
}

void Accel_cmd_100::InternalSwap(Accel_cmd_100* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accel_cmd_, other->accel_cmd_);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_cmd_100::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Parking_brake_rpt_224::InitAsDefaultInstance() {
}
class Parking_brake_rpt_224::_Internal {
 public:
  using HasBits = decltype(std::declval<Parking_brake_rpt_224>()._has_bits_);
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Parking_brake_rpt_224::Parking_brake_rpt_224()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Parking_brake_rpt_224)
}
Parking_brake_rpt_224::Parking_brake_rpt_224(const Parking_brake_rpt_224& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_fault_, &from.vehicle_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_input_) -
    reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_brake_rpt_224)
}

void Parking_brake_rpt_224::SharedCtor() {
  ::memset(&vehicle_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_input_) -
      reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(manual_input_));
}

Parking_brake_rpt_224::~Parking_brake_rpt_224() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_brake_rpt_224)
  SharedDtor();
}

void Parking_brake_rpt_224::SharedDtor() {
}

void Parking_brake_rpt_224::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Parking_brake_rpt_224& Parking_brake_rpt_224::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Parking_brake_rpt_224_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Parking_brake_rpt_224::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_brake_rpt_224)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&vehicle_fault_)) + sizeof(output_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&commanded_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&commanded_value_)) + sizeof(manual_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Parking_brake_rpt_224::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool vehicle_fault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_output_value(&has_bits);
          output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool commanded_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_commanded_value(&has_bits);
          commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool manual_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_manual_input(&has_bits);
          manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parking_brake_rpt_224::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_brake_rpt_224)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool vehicle_fault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_command_output_fault(), target);
  }

  // optional bool output_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_output_value(), target);
  }

  // optional bool commanded_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_commanded_value(), target);
  }

  // optional bool manual_input = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_brake_rpt_224)
  return target;
}

size_t Parking_brake_rpt_224::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_brake_rpt_224)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool vehicle_fault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool output_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool commanded_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool manual_input = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parking_brake_rpt_224::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Parking_brake_rpt_224)
  GOOGLE_DCHECK_NE(&from, this);
  const Parking_brake_rpt_224* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parking_brake_rpt_224>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Parking_brake_rpt_224)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Parking_brake_rpt_224)
    MergeFrom(*source);
  }
}

void Parking_brake_rpt_224::MergeFrom(const Parking_brake_rpt_224& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_brake_rpt_224)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000002u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000004u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_output_fault_ = from.input_output_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_output_fault_ = from.command_output_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Parking_brake_rpt_224::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Parking_brake_rpt_224)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parking_brake_rpt_224::CopyFrom(const Parking_brake_rpt_224& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_brake_rpt_224)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_brake_rpt_224::IsInitialized() const {
  return true;
}

void Parking_brake_rpt_224::InternalSwap(Parking_brake_rpt_224* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parking_brake_rpt_224::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_cmd_104::InitAsDefaultInstance() {
}
class Brake_cmd_104::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_cmd_104>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Brake_cmd_104::Brake_cmd_104()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_cmd_104)
}
Brake_cmd_104::Brake_cmd_104(const Brake_cmd_104& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_cmd_, &from.brake_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&clear_faults_) -
    reinterpret_cast<char*>(&brake_cmd_)) + sizeof(clear_faults_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_cmd_104)
}

void Brake_cmd_104::SharedCtor() {
  ::memset(&brake_cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clear_faults_) -
      reinterpret_cast<char*>(&brake_cmd_)) + sizeof(clear_faults_));
}

Brake_cmd_104::~Brake_cmd_104() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_cmd_104)
  SharedDtor();
}

void Brake_cmd_104::SharedDtor() {
}

void Brake_cmd_104::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_cmd_104& Brake_cmd_104::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_cmd_104_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Brake_cmd_104::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_cmd_104)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&brake_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clear_faults_) -
        reinterpret_cast<char*>(&brake_cmd_)) + sizeof(clear_faults_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_cmd_104::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double brake_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_brake_cmd(&has_bits);
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_cmd_104::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_cmd_104)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional double brake_cmd = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_brake_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_cmd_104)
  return target;
}

size_t Brake_cmd_104::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_cmd_104)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double brake_cmd = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_cmd_104::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_cmd_104)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_cmd_104* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_cmd_104>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_cmd_104)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_cmd_104)
    MergeFrom(*source);
  }
}

void Brake_cmd_104::MergeFrom(const Brake_cmd_104& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_cmd_104)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      brake_cmd_ = from.brake_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000010u) {
      clear_faults_ = from.clear_faults_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_cmd_104::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_cmd_104)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_cmd_104::CopyFrom(const Brake_cmd_104& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_cmd_104)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_cmd_104::IsInitialized() const {
  return true;
}

void Brake_cmd_104::InternalSwap(Brake_cmd_104* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_cmd_, other->brake_cmd_);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_cmd_104::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Media_controls_rpt_220::InitAsDefaultInstance() {
}
class Media_controls_rpt_220::_Internal {
 public:
  using HasBits = decltype(std::declval<Media_controls_rpt_220>()._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pacmod_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_override_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_reported_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_input_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_output_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Media_controls_rpt_220::Media_controls_rpt_220()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Media_controls_rpt_220)
}
Media_controls_rpt_220::Media_controls_rpt_220(const Media_controls_rpt_220& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_output_fault_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(command_output_fault_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Media_controls_rpt_220)
}

void Media_controls_rpt_220::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_output_fault_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(command_output_fault_));
}

Media_controls_rpt_220::~Media_controls_rpt_220() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Media_controls_rpt_220)
  SharedDtor();
}

void Media_controls_rpt_220::SharedDtor() {
}

void Media_controls_rpt_220::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Media_controls_rpt_220& Media_controls_rpt_220::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Media_controls_rpt_220_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Media_controls_rpt_220::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Media_controls_rpt_220)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_output_fault_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(input_output_fault_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_output_fault_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(command_output_fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Media_controls_rpt_220::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Media_controls_rpt_220.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Media_controls_rpt_220_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Media_controls_rpt_220_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Media_controls_rpt_220.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Media_controls_rpt_220_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Media_controls_rpt_220_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Media_controls_rpt_220.Manual_inputType manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Media_controls_rpt_220_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Media_controls_rpt_220_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool vehicle_fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vehicle_fault(&has_bits);
          vehicle_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pacmod_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pacmod_fault(&has_bits);
          pacmod_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool override_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_override_active(&has_bits);
          override_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_reported_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_output_reported_fault(&has_bits);
          output_reported_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_output_fault = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_input_output_fault(&has_bits);
          input_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool command_output_fault = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_command_output_fault(&has_bits);
          command_output_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Media_controls_rpt_220::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Media_controls_rpt_220)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Media_controls_rpt_220.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Media_controls_rpt_220.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Media_controls_rpt_220.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_manual_input(), target);
  }

  // optional bool vehicle_fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_vehicle_fault(), target);
  }

  // optional bool pacmod_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pacmod_fault(), target);
  }

  // optional bool override_active = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_override_active(), target);
  }

  // optional bool output_reported_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_output_reported_fault(), target);
  }

  // optional bool input_output_fault = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_input_output_fault(), target);
  }

  // optional bool enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enabled(), target);
  }

  // optional bool command_output_fault = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_command_output_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Media_controls_rpt_220)
  return target;
}

size_t Media_controls_rpt_220::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Media_controls_rpt_220)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Media_controls_rpt_220.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Media_controls_rpt_220.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Media_controls_rpt_220.Manual_inputType manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional bool vehicle_fault = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pacmod_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool override_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool output_reported_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool input_output_fault = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool command_output_fault = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media_controls_rpt_220::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Media_controls_rpt_220)
  GOOGLE_DCHECK_NE(&from, this);
  const Media_controls_rpt_220* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Media_controls_rpt_220>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Media_controls_rpt_220)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Media_controls_rpt_220)
    MergeFrom(*source);
  }
}

void Media_controls_rpt_220::MergeFrom(const Media_controls_rpt_220& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Media_controls_rpt_220)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      vehicle_fault_ = from.vehicle_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      pacmod_fault_ = from.pacmod_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      override_active_ = from.override_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      output_reported_fault_ = from.output_reported_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      input_output_fault_ = from.input_output_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      command_output_fault_ = from.command_output_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Media_controls_rpt_220::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Media_controls_rpt_220)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Media_controls_rpt_220::CopyFrom(const Media_controls_rpt_220& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Media_controls_rpt_220)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media_controls_rpt_220::IsInitialized() const {
  return true;
}

void Media_controls_rpt_220::InternalSwap(Media_controls_rpt_220* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
  swap(vehicle_fault_, other->vehicle_fault_);
  swap(pacmod_fault_, other->pacmod_fault_);
  swap(override_active_, other->override_active_);
  swap(output_reported_fault_, other->output_reported_fault_);
  swap(input_output_fault_, other->input_output_fault_);
  swap(enabled_, other->enabled_);
  swap(command_output_fault_, other->command_output_fault_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Media_controls_rpt_220::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_aux_rpt_32c::InitAsDefaultInstance() {
}
class Steering_aux_rpt_32c::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_aux_rpt_32c>()._has_bits_);
  static void set_has_user_interaction_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rotation_rate_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rotation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_raw_torque_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_raw_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raw_position_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_raw_position(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Steering_aux_rpt_32c::Steering_aux_rpt_32c()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_aux_rpt_32c)
}
Steering_aux_rpt_32c::Steering_aux_rpt_32c(const Steering_aux_rpt_32c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_interaction_is_valid_, &from.user_interaction_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_position_) -
    reinterpret_cast<char*>(&user_interaction_is_valid_)) + sizeof(raw_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_aux_rpt_32c)
}

void Steering_aux_rpt_32c::SharedCtor() {
  ::memset(&user_interaction_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raw_position_) -
      reinterpret_cast<char*>(&user_interaction_is_valid_)) + sizeof(raw_position_));
}

Steering_aux_rpt_32c::~Steering_aux_rpt_32c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_aux_rpt_32c)
  SharedDtor();
}

void Steering_aux_rpt_32c::SharedDtor() {
}

void Steering_aux_rpt_32c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_aux_rpt_32c& Steering_aux_rpt_32c::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_aux_rpt_32c_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Steering_aux_rpt_32c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_aux_rpt_32c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&user_interaction_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_position_) -
        reinterpret_cast<char*>(&user_interaction_is_valid_)) + sizeof(raw_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_aux_rpt_32c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool user_interaction_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_interaction_is_valid(&has_bits);
          user_interaction_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool user_interaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_interaction(&has_bits);
          user_interaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rotation_rate_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rotation_rate_is_valid(&has_bits);
          rotation_rate_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double rotation_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_rotation_rate(&has_bits);
          rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool raw_torque_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_raw_torque_is_valid(&has_bits);
          raw_torque_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double raw_torque = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_raw_torque(&has_bits);
          raw_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool raw_position_is_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_raw_position_is_valid(&has_bits);
          raw_position_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double raw_position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_raw_position(&has_bits);
          raw_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_aux_rpt_32c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_aux_rpt_32c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool user_interaction_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_user_interaction_is_valid(), target);
  }

  // optional bool user_interaction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_user_interaction(), target);
  }

  // optional bool rotation_rate_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_rotation_rate_is_valid(), target);
  }

  // optional double rotation_rate = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rotation_rate(), target);
  }

  // optional bool raw_torque_is_valid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_raw_torque_is_valid(), target);
  }

  // optional double raw_torque = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_raw_torque(), target);
  }

  // optional bool raw_position_is_valid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_raw_position_is_valid(), target);
  }

  // optional double raw_position = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_raw_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_aux_rpt_32c)
  return target;
}

size_t Steering_aux_rpt_32c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_aux_rpt_32c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool user_interaction_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool user_interaction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool rotation_rate_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool raw_torque_is_valid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool raw_position_is_valid = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double rotation_rate = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double raw_torque = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double raw_position = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_aux_rpt_32c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_aux_rpt_32c)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_aux_rpt_32c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_aux_rpt_32c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_aux_rpt_32c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_aux_rpt_32c)
    MergeFrom(*source);
  }
}

void Steering_aux_rpt_32c::MergeFrom(const Steering_aux_rpt_32c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_aux_rpt_32c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      user_interaction_is_valid_ = from.user_interaction_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_interaction_ = from.user_interaction_;
    }
    if (cached_has_bits & 0x00000004u) {
      rotation_rate_is_valid_ = from.rotation_rate_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      raw_torque_is_valid_ = from.raw_torque_is_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      raw_position_is_valid_ = from.raw_position_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      rotation_rate_ = from.rotation_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      raw_torque_ = from.raw_torque_;
    }
    if (cached_has_bits & 0x00000080u) {
      raw_position_ = from.raw_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_aux_rpt_32c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_aux_rpt_32c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_aux_rpt_32c::CopyFrom(const Steering_aux_rpt_32c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_aux_rpt_32c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_aux_rpt_32c::IsInitialized() const {
  return true;
}

void Steering_aux_rpt_32c::InternalSwap(Steering_aux_rpt_32c* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_interaction_is_valid_, other->user_interaction_is_valid_);
  swap(user_interaction_, other->user_interaction_);
  swap(rotation_rate_is_valid_, other->rotation_rate_is_valid_);
  swap(raw_torque_is_valid_, other->raw_torque_is_valid_);
  swap(raw_position_is_valid_, other->raw_position_is_valid_);
  swap(rotation_rate_, other->rotation_rate_);
  swap(raw_torque_, other->raw_torque_);
  swap(raw_position_, other->raw_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_aux_rpt_32c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lat_lon_heading_rpt_40e::InitAsDefaultInstance() {
}
class Lat_lon_heading_rpt_40e::_Internal {
 public:
  using HasBits = decltype(std::declval<Lat_lon_heading_rpt_40e>()._has_bits_);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_longitude_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_latitude_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_latitude_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Lat_lon_heading_rpt_40e::Lat_lon_heading_rpt_40e()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Lat_lon_heading_rpt_40e)
}
Lat_lon_heading_rpt_40e::Lat_lon_heading_rpt_40e(const Lat_lon_heading_rpt_40e& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_degrees_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Lat_lon_heading_rpt_40e)
}

void Lat_lon_heading_rpt_40e::SharedCtor() {
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_degrees_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
}

Lat_lon_heading_rpt_40e::~Lat_lon_heading_rpt_40e() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Lat_lon_heading_rpt_40e)
  SharedDtor();
}

void Lat_lon_heading_rpt_40e::SharedDtor() {
}

void Lat_lon_heading_rpt_40e::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lat_lon_heading_rpt_40e& Lat_lon_heading_rpt_40e::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lat_lon_heading_rpt_40e_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Lat_lon_heading_rpt_40e::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_degrees_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Lat_lon_heading_rpt_40e::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 longitude_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_longitude_seconds(&has_bits);
          longitude_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 longitude_minutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_longitude_minutes(&has_bits);
          longitude_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 longitude_degrees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_longitude_degrees(&has_bits);
          longitude_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latitude_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_latitude_seconds(&has_bits);
          latitude_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latitude_minutes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_latitude_minutes(&has_bits);
          latitude_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latitude_degrees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_latitude_degrees(&has_bits);
          latitude_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lat_lon_heading_rpt_40e::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading(), target);
  }

  // optional int32 longitude_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude_seconds(), target);
  }

  // optional int32 longitude_minutes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_longitude_minutes(), target);
  }

  // optional int32 longitude_degrees = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_longitude_degrees(), target);
  }

  // optional int32 latitude_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_latitude_seconds(), target);
  }

  // optional int32 latitude_minutes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_latitude_minutes(), target);
  }

  // optional int32 latitude_degrees = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_latitude_degrees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Lat_lon_heading_rpt_40e)
  return target;
}

size_t Lat_lon_heading_rpt_40e::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double heading = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 longitude_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_longitude_seconds());
    }

    // optional int32 longitude_minutes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_longitude_minutes());
    }

    // optional int32 longitude_degrees = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_longitude_degrees());
    }

    // optional int32 latitude_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_latitude_seconds());
    }

    // optional int32 latitude_minutes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_latitude_minutes());
    }

    // optional int32 latitude_degrees = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_latitude_degrees());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lat_lon_heading_rpt_40e::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  GOOGLE_DCHECK_NE(&from, this);
  const Lat_lon_heading_rpt_40e* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lat_lon_heading_rpt_40e>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Lat_lon_heading_rpt_40e)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Lat_lon_heading_rpt_40e)
    MergeFrom(*source);
  }
}

void Lat_lon_heading_rpt_40e::MergeFrom(const Lat_lon_heading_rpt_40e& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_seconds_ = from.longitude_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_minutes_ = from.longitude_minutes_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_degrees_ = from.longitude_degrees_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_seconds_ = from.latitude_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_minutes_ = from.latitude_minutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      latitude_degrees_ = from.latitude_degrees_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lat_lon_heading_rpt_40e::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lat_lon_heading_rpt_40e::CopyFrom(const Lat_lon_heading_rpt_40e& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Lat_lon_heading_rpt_40e)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lat_lon_heading_rpt_40e::IsInitialized() const {
  return true;
}

void Lat_lon_heading_rpt_40e::InternalSwap(Lat_lon_heading_rpt_40e* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(heading_, other->heading_);
  swap(longitude_seconds_, other->longitude_seconds_);
  swap(longitude_minutes_, other->longitude_minutes_);
  swap(longitude_degrees_, other->longitude_degrees_);
  swap(latitude_seconds_, other->latitude_seconds_);
  swap(latitude_minutes_, other->latitude_minutes_);
  swap(latitude_degrees_, other->latitude_degrees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lat_lon_heading_rpt_40e::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Yaw_rate_rpt_40d::InitAsDefaultInstance() {
}
class Yaw_rate_rpt_40d::_Internal {
 public:
  using HasBits = decltype(std::declval<Yaw_rate_rpt_40d>()._has_bits_);
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Yaw_rate_rpt_40d::Yaw_rate_rpt_40d()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Yaw_rate_rpt_40d)
}
Yaw_rate_rpt_40d::Yaw_rate_rpt_40d(const Yaw_rate_rpt_40d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yaw_rate_ = from.yaw_rate_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Yaw_rate_rpt_40d)
}

void Yaw_rate_rpt_40d::SharedCtor() {
  yaw_rate_ = 0;
}

Yaw_rate_rpt_40d::~Yaw_rate_rpt_40d() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Yaw_rate_rpt_40d)
  SharedDtor();
}

void Yaw_rate_rpt_40d::SharedDtor() {
}

void Yaw_rate_rpt_40d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Yaw_rate_rpt_40d& Yaw_rate_rpt_40d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Yaw_rate_rpt_40d_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Yaw_rate_rpt_40d::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Yaw_rate_rpt_40d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yaw_rate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Yaw_rate_rpt_40d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double yaw_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Yaw_rate_rpt_40d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Yaw_rate_rpt_40d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double yaw_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_yaw_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Yaw_rate_rpt_40d)
  return target;
}

size_t Yaw_rate_rpt_40d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Yaw_rate_rpt_40d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double yaw_rate = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Yaw_rate_rpt_40d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Yaw_rate_rpt_40d)
  GOOGLE_DCHECK_NE(&from, this);
  const Yaw_rate_rpt_40d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Yaw_rate_rpt_40d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Yaw_rate_rpt_40d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Yaw_rate_rpt_40d)
    MergeFrom(*source);
  }
}

void Yaw_rate_rpt_40d::MergeFrom(const Yaw_rate_rpt_40d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Yaw_rate_rpt_40d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_yaw_rate()) {
    _internal_set_yaw_rate(from._internal_yaw_rate());
  }
}

void Yaw_rate_rpt_40d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Yaw_rate_rpt_40d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Yaw_rate_rpt_40d::CopyFrom(const Yaw_rate_rpt_40d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Yaw_rate_rpt_40d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Yaw_rate_rpt_40d::IsInitialized() const {
  return true;
}

void Yaw_rate_rpt_40d::InternalSwap(Yaw_rate_rpt_40d* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(yaw_rate_, other->yaw_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Yaw_rate_rpt_40d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Date_time_rpt_40f::InitAsDefaultInstance() {
}
class Date_time_rpt_40f::_Internal {
 public:
  using HasBits = decltype(std::declval<Date_time_rpt_40f>()._has_bits_);
  static void set_has_time_second(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_date_month(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_date_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Date_time_rpt_40f::Date_time_rpt_40f()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Date_time_rpt_40f)
}
Date_time_rpt_40f::Date_time_rpt_40f(const Date_time_rpt_40f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_second_, &from.time_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_year_) -
    reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Date_time_rpt_40f)
}

void Date_time_rpt_40f::SharedCtor() {
  ::memset(&time_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_year_) -
      reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
}

Date_time_rpt_40f::~Date_time_rpt_40f() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Date_time_rpt_40f)
  SharedDtor();
}

void Date_time_rpt_40f::SharedDtor() {
}

void Date_time_rpt_40f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Date_time_rpt_40f& Date_time_rpt_40f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Date_time_rpt_40f_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Date_time_rpt_40f::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Date_time_rpt_40f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&time_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_year_) -
        reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Date_time_rpt_40f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 time_second = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_second(&has_bits);
          time_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_minute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_minute(&has_bits);
          time_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_hour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_hour(&has_bits);
          time_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 date_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_date_day(&has_bits);
          date_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 date_month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_date_month(&has_bits);
          date_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 date_year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_date_year(&has_bits);
          date_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Date_time_rpt_40f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Date_time_rpt_40f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time_second = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_second(), target);
  }

  // optional int32 time_minute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_minute(), target);
  }

  // optional int32 time_hour = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_hour(), target);
  }

  // optional int32 date_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_date_day(), target);
  }

  // optional int32 date_month = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_date_month(), target);
  }

  // optional int32 date_year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_date_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Date_time_rpt_40f)
  return target;
}

size_t Date_time_rpt_40f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Date_time_rpt_40f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 time_second = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_second());
    }

    // optional int32 time_minute = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_minute());
    }

    // optional int32 time_hour = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_hour());
    }

    // optional int32 date_day = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_date_day());
    }

    // optional int32 date_month = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_date_month());
    }

    // optional int32 date_year = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_date_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date_time_rpt_40f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Date_time_rpt_40f)
  GOOGLE_DCHECK_NE(&from, this);
  const Date_time_rpt_40f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Date_time_rpt_40f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Date_time_rpt_40f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Date_time_rpt_40f)
    MergeFrom(*source);
  }
}

void Date_time_rpt_40f::MergeFrom(const Date_time_rpt_40f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Date_time_rpt_40f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      time_second_ = from.time_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_minute_ = from.time_minute_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_hour_ = from.time_hour_;
    }
    if (cached_has_bits & 0x00000008u) {
      date_day_ = from.date_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      date_month_ = from.date_month_;
    }
    if (cached_has_bits & 0x00000020u) {
      date_year_ = from.date_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Date_time_rpt_40f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Date_time_rpt_40f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date_time_rpt_40f::CopyFrom(const Date_time_rpt_40f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Date_time_rpt_40f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date_time_rpt_40f::IsInitialized() const {
  return true;
}

void Date_time_rpt_40f::InternalSwap(Date_time_rpt_40f* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_second_, other->time_second_);
  swap(time_minute_, other->time_minute_);
  swap(time_hour_, other->time_hour_);
  swap(date_day_, other->date_day_);
  swap(date_month_, other->date_month_);
  swap(date_year_, other->date_year_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Date_time_rpt_40f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vin_rpt_414::InitAsDefaultInstance() {
}
class Vin_rpt_414::_Internal {
 public:
  using HasBits = decltype(std::declval<Vin_rpt_414>()._has_bits_);
  static void set_has_veh_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_veh_my_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_veh_mfg_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Vin_rpt_414::Vin_rpt_414()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Vin_rpt_414)
}
Vin_rpt_414::Vin_rpt_414(const Vin_rpt_414& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&veh_serial_, &from.veh_serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&veh_mfg_code_) -
    reinterpret_cast<char*>(&veh_serial_)) + sizeof(veh_mfg_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vin_rpt_414)
}

void Vin_rpt_414::SharedCtor() {
  ::memset(&veh_serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&veh_mfg_code_) -
      reinterpret_cast<char*>(&veh_serial_)) + sizeof(veh_mfg_code_));
}

Vin_rpt_414::~Vin_rpt_414() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vin_rpt_414)
  SharedDtor();
}

void Vin_rpt_414::SharedDtor() {
}

void Vin_rpt_414::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vin_rpt_414& Vin_rpt_414::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vin_rpt_414_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Vin_rpt_414::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vin_rpt_414)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&veh_serial_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&veh_mfg_code_) -
        reinterpret_cast<char*>(&veh_serial_)) + sizeof(veh_mfg_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vin_rpt_414::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 veh_serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_veh_serial(&has_bits);
          veh_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 veh_my_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_veh_my_code(&has_bits);
          veh_my_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 veh_mfg_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_veh_mfg_code(&has_bits);
          veh_mfg_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vin_rpt_414::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vin_rpt_414)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 veh_serial = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_veh_serial(), target);
  }

  // optional int32 veh_my_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_veh_my_code(), target);
  }

  // optional int32 veh_mfg_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_veh_mfg_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vin_rpt_414)
  return target;
}

size_t Vin_rpt_414::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vin_rpt_414)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 veh_serial = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_veh_serial());
    }

    // optional int32 veh_my_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_veh_my_code());
    }

    // optional int32 veh_mfg_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_veh_mfg_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vin_rpt_414::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Vin_rpt_414)
  GOOGLE_DCHECK_NE(&from, this);
  const Vin_rpt_414* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vin_rpt_414>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Vin_rpt_414)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Vin_rpt_414)
    MergeFrom(*source);
  }
}

void Vin_rpt_414::MergeFrom(const Vin_rpt_414& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vin_rpt_414)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      veh_serial_ = from.veh_serial_;
    }
    if (cached_has_bits & 0x00000002u) {
      veh_my_code_ = from.veh_my_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      veh_mfg_code_ = from.veh_mfg_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vin_rpt_414::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Vin_rpt_414)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vin_rpt_414::CopyFrom(const Vin_rpt_414& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vin_rpt_414)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vin_rpt_414::IsInitialized() const {
  return true;
}

void Vin_rpt_414::InternalSwap(Vin_rpt_414* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(veh_serial_, other->veh_serial_);
  swap(veh_my_code_, other->veh_my_code_);
  swap(veh_mfg_code_, other->veh_mfg_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vin_rpt_414::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Occupancy_rpt_415::InitAsDefaultInstance() {
}
class Occupancy_rpt_415::_Internal {
 public:
  using HasBits = decltype(std::declval<Occupancy_rpt_415>()._has_bits_);
  static void set_has_rear_seatbelt_buckled_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_seatbelt_buckled_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_driver_seatbelt_buckled_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rear_seat_occupied_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pass_seat_occupied_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_driver_seat_occupied_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rear_seatbelt_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pass_seatbelt_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_driver_seatbelt_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rear_seat_occupied(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pass_seat_occupied(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_driver_seat_occupied(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Occupancy_rpt_415::Occupancy_rpt_415()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Occupancy_rpt_415)
}
Occupancy_rpt_415::Occupancy_rpt_415(const Occupancy_rpt_415& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rear_seatbelt_buckled_is_valid_, &from.rear_seatbelt_buckled_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&driver_seat_occupied_) -
    reinterpret_cast<char*>(&rear_seatbelt_buckled_is_valid_)) + sizeof(driver_seat_occupied_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Occupancy_rpt_415)
}

void Occupancy_rpt_415::SharedCtor() {
  ::memset(&rear_seatbelt_buckled_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driver_seat_occupied_) -
      reinterpret_cast<char*>(&rear_seatbelt_buckled_is_valid_)) + sizeof(driver_seat_occupied_));
}

Occupancy_rpt_415::~Occupancy_rpt_415() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Occupancy_rpt_415)
  SharedDtor();
}

void Occupancy_rpt_415::SharedDtor() {
}

void Occupancy_rpt_415::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Occupancy_rpt_415& Occupancy_rpt_415::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Occupancy_rpt_415_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Occupancy_rpt_415::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Occupancy_rpt_415)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rear_seatbelt_buckled_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pass_seatbelt_buckled_) -
        reinterpret_cast<char*>(&rear_seatbelt_buckled_is_valid_)) + sizeof(pass_seatbelt_buckled_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&driver_seatbelt_buckled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driver_seat_occupied_) -
        reinterpret_cast<char*>(&driver_seatbelt_buckled_)) + sizeof(driver_seat_occupied_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Occupancy_rpt_415::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool rear_seatbelt_buckled_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rear_seatbelt_buckled_is_valid(&has_bits);
          rear_seatbelt_buckled_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pass_seatbelt_buckled_is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pass_seatbelt_buckled_is_valid(&has_bits);
          pass_seatbelt_buckled_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_seatbelt_buckled_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_driver_seatbelt_buckled_is_valid(&has_bits);
          driver_seatbelt_buckled_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_seat_occupied_is_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rear_seat_occupied_is_valid(&has_bits);
          rear_seat_occupied_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pass_seat_occupied_is_valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pass_seat_occupied_is_valid(&has_bits);
          pass_seat_occupied_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_seat_occupied_is_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_driver_seat_occupied_is_valid(&has_bits);
          driver_seat_occupied_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_seatbelt_buckled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rear_seatbelt_buckled(&has_bits);
          rear_seatbelt_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pass_seatbelt_buckled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pass_seatbelt_buckled(&has_bits);
          pass_seatbelt_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_seatbelt_buckled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_driver_seatbelt_buckled(&has_bits);
          driver_seatbelt_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_seat_occupied = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_rear_seat_occupied(&has_bits);
          rear_seat_occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pass_seat_occupied = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_pass_seat_occupied(&has_bits);
          pass_seat_occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_seat_occupied = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_driver_seat_occupied(&has_bits);
          driver_seat_occupied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Occupancy_rpt_415::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Occupancy_rpt_415)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool rear_seatbelt_buckled_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_rear_seatbelt_buckled_is_valid(), target);
  }

  // optional bool pass_seatbelt_buckled_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pass_seatbelt_buckled_is_valid(), target);
  }

  // optional bool driver_seatbelt_buckled_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_driver_seatbelt_buckled_is_valid(), target);
  }

  // optional bool rear_seat_occupied_is_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_rear_seat_occupied_is_valid(), target);
  }

  // optional bool pass_seat_occupied_is_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_pass_seat_occupied_is_valid(), target);
  }

  // optional bool driver_seat_occupied_is_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_driver_seat_occupied_is_valid(), target);
  }

  // optional bool rear_seatbelt_buckled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_rear_seatbelt_buckled(), target);
  }

  // optional bool pass_seatbelt_buckled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_pass_seatbelt_buckled(), target);
  }

  // optional bool driver_seatbelt_buckled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_driver_seatbelt_buckled(), target);
  }

  // optional bool rear_seat_occupied = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_rear_seat_occupied(), target);
  }

  // optional bool pass_seat_occupied = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_pass_seat_occupied(), target);
  }

  // optional bool driver_seat_occupied = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_driver_seat_occupied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Occupancy_rpt_415)
  return target;
}

size_t Occupancy_rpt_415::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Occupancy_rpt_415)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool rear_seatbelt_buckled_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool pass_seatbelt_buckled_is_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool driver_seatbelt_buckled_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool rear_seat_occupied_is_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool pass_seat_occupied_is_valid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool driver_seat_occupied_is_valid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rear_seatbelt_buckled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool pass_seatbelt_buckled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool driver_seatbelt_buckled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool rear_seat_occupied = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool pass_seat_occupied = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool driver_seat_occupied = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Occupancy_rpt_415::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Occupancy_rpt_415)
  GOOGLE_DCHECK_NE(&from, this);
  const Occupancy_rpt_415* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Occupancy_rpt_415>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Occupancy_rpt_415)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Occupancy_rpt_415)
    MergeFrom(*source);
  }
}

void Occupancy_rpt_415::MergeFrom(const Occupancy_rpt_415& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Occupancy_rpt_415)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rear_seatbelt_buckled_is_valid_ = from.rear_seatbelt_buckled_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      pass_seatbelt_buckled_is_valid_ = from.pass_seatbelt_buckled_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      driver_seatbelt_buckled_is_valid_ = from.driver_seatbelt_buckled_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      rear_seat_occupied_is_valid_ = from.rear_seat_occupied_is_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      pass_seat_occupied_is_valid_ = from.pass_seat_occupied_is_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      driver_seat_occupied_is_valid_ = from.driver_seat_occupied_is_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      rear_seatbelt_buckled_ = from.rear_seatbelt_buckled_;
    }
    if (cached_has_bits & 0x00000080u) {
      pass_seatbelt_buckled_ = from.pass_seatbelt_buckled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      driver_seatbelt_buckled_ = from.driver_seatbelt_buckled_;
    }
    if (cached_has_bits & 0x00000200u) {
      rear_seat_occupied_ = from.rear_seat_occupied_;
    }
    if (cached_has_bits & 0x00000400u) {
      pass_seat_occupied_ = from.pass_seat_occupied_;
    }
    if (cached_has_bits & 0x00000800u) {
      driver_seat_occupied_ = from.driver_seat_occupied_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Occupancy_rpt_415::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Occupancy_rpt_415)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Occupancy_rpt_415::CopyFrom(const Occupancy_rpt_415& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Occupancy_rpt_415)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Occupancy_rpt_415::IsInitialized() const {
  return true;
}

void Occupancy_rpt_415::InternalSwap(Occupancy_rpt_415* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rear_seatbelt_buckled_is_valid_, other->rear_seatbelt_buckled_is_valid_);
  swap(pass_seatbelt_buckled_is_valid_, other->pass_seatbelt_buckled_is_valid_);
  swap(driver_seatbelt_buckled_is_valid_, other->driver_seatbelt_buckled_is_valid_);
  swap(rear_seat_occupied_is_valid_, other->rear_seat_occupied_is_valid_);
  swap(pass_seat_occupied_is_valid_, other->pass_seat_occupied_is_valid_);
  swap(driver_seat_occupied_is_valid_, other->driver_seat_occupied_is_valid_);
  swap(rear_seatbelt_buckled_, other->rear_seatbelt_buckled_);
  swap(pass_seatbelt_buckled_, other->pass_seatbelt_buckled_);
  swap(driver_seatbelt_buckled_, other->driver_seatbelt_buckled_);
  swap(rear_seat_occupied_, other->rear_seat_occupied_);
  swap(pass_seat_occupied_, other->pass_seat_occupied_);
  swap(driver_seat_occupied_, other->driver_seat_occupied_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Occupancy_rpt_415::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Interior_lights_rpt_416::InitAsDefaultInstance() {
}
class Interior_lights_rpt_416::_Internal {
 public:
  using HasBits = decltype(std::declval<Interior_lights_rpt_416>()._has_bits_);
  static void set_has_dim_level_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mood_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rear_dome_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_front_dome_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dim_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mood_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rear_dome_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_front_dome_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Interior_lights_rpt_416::Interior_lights_rpt_416()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Interior_lights_rpt_416)
}
Interior_lights_rpt_416::Interior_lights_rpt_416(const Interior_lights_rpt_416& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dim_level_is_valid_, &from.dim_level_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_dome_lights_on_) -
    reinterpret_cast<char*>(&dim_level_is_valid_)) + sizeof(front_dome_lights_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Interior_lights_rpt_416)
}

void Interior_lights_rpt_416::SharedCtor() {
  ::memset(&dim_level_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_dome_lights_on_) -
      reinterpret_cast<char*>(&dim_level_is_valid_)) + sizeof(front_dome_lights_on_));
}

Interior_lights_rpt_416::~Interior_lights_rpt_416() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Interior_lights_rpt_416)
  SharedDtor();
}

void Interior_lights_rpt_416::SharedDtor() {
}

void Interior_lights_rpt_416::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Interior_lights_rpt_416& Interior_lights_rpt_416::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Interior_lights_rpt_416_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Interior_lights_rpt_416::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Interior_lights_rpt_416)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&dim_level_is_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&front_dome_lights_on_) -
        reinterpret_cast<char*>(&dim_level_is_valid_)) + sizeof(front_dome_lights_on_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Interior_lights_rpt_416::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool dim_level_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dim_level_is_valid(&has_bits);
          dim_level_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mood_lights_on_is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mood_lights_on_is_valid(&has_bits);
          mood_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_dome_lights_on_is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rear_dome_lights_on_is_valid(&has_bits);
          rear_dome_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool front_dome_lights_on_is_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_front_dome_lights_on_is_valid(&has_bits);
          front_dome_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Interior_lights_rpt_416.Dim_levelType dim_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Interior_lights_rpt_416_Dim_levelType_IsValid(val))) {
            _internal_set_dim_level(static_cast<::apollo::canbus::Interior_lights_rpt_416_Dim_levelType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool mood_lights_on = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mood_lights_on(&has_bits);
          mood_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rear_dome_lights_on = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rear_dome_lights_on(&has_bits);
          rear_dome_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool front_dome_lights_on = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_front_dome_lights_on(&has_bits);
          front_dome_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Interior_lights_rpt_416::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Interior_lights_rpt_416)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool dim_level_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_dim_level_is_valid(), target);
  }

  // optional bool mood_lights_on_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mood_lights_on_is_valid(), target);
  }

  // optional bool rear_dome_lights_on_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_rear_dome_lights_on_is_valid(), target);
  }

  // optional bool front_dome_lights_on_is_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_front_dome_lights_on_is_valid(), target);
  }

  // optional .apollo.canbus.Interior_lights_rpt_416.Dim_levelType dim_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dim_level(), target);
  }

  // optional bool mood_lights_on = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_mood_lights_on(), target);
  }

  // optional bool rear_dome_lights_on = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_rear_dome_lights_on(), target);
  }

  // optional bool front_dome_lights_on = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_front_dome_lights_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Interior_lights_rpt_416)
  return target;
}

size_t Interior_lights_rpt_416::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Interior_lights_rpt_416)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool dim_level_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool mood_lights_on_is_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool rear_dome_lights_on_is_valid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool front_dome_lights_on_is_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Interior_lights_rpt_416.Dim_levelType dim_level = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dim_level());
    }

    // optional bool mood_lights_on = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rear_dome_lights_on = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool front_dome_lights_on = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Interior_lights_rpt_416::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Interior_lights_rpt_416)
  GOOGLE_DCHECK_NE(&from, this);
  const Interior_lights_rpt_416* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Interior_lights_rpt_416>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Interior_lights_rpt_416)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Interior_lights_rpt_416)
    MergeFrom(*source);
  }
}

void Interior_lights_rpt_416::MergeFrom(const Interior_lights_rpt_416& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Interior_lights_rpt_416)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      dim_level_is_valid_ = from.dim_level_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mood_lights_on_is_valid_ = from.mood_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      rear_dome_lights_on_is_valid_ = from.rear_dome_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      front_dome_lights_on_is_valid_ = from.front_dome_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      dim_level_ = from.dim_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      mood_lights_on_ = from.mood_lights_on_;
    }
    if (cached_has_bits & 0x00000040u) {
      rear_dome_lights_on_ = from.rear_dome_lights_on_;
    }
    if (cached_has_bits & 0x00000080u) {
      front_dome_lights_on_ = from.front_dome_lights_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Interior_lights_rpt_416::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Interior_lights_rpt_416)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Interior_lights_rpt_416::CopyFrom(const Interior_lights_rpt_416& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Interior_lights_rpt_416)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interior_lights_rpt_416::IsInitialized() const {
  return true;
}

void Interior_lights_rpt_416::InternalSwap(Interior_lights_rpt_416* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dim_level_is_valid_, other->dim_level_is_valid_);
  swap(mood_lights_on_is_valid_, other->mood_lights_on_is_valid_);
  swap(rear_dome_lights_on_is_valid_, other->rear_dome_lights_on_is_valid_);
  swap(front_dome_lights_on_is_valid_, other->front_dome_lights_on_is_valid_);
  swap(dim_level_, other->dim_level_);
  swap(mood_lights_on_, other->mood_lights_on_);
  swap(rear_dome_lights_on_, other->rear_dome_lights_on_);
  swap(front_dome_lights_on_, other->front_dome_lights_on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Interior_lights_rpt_416::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Turn_cmd_130::InitAsDefaultInstance() {
}
class Turn_cmd_130::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_cmd_130>()._has_bits_);
  static void set_has_ignore_overrides(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_turn_signal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Turn_cmd_130::Turn_cmd_130()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turn_cmd_130)
}
Turn_cmd_130::Turn_cmd_130(const Turn_cmd_130& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ignore_overrides_, &from.ignore_overrides_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_signal_cmd_) -
    reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(turn_signal_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_cmd_130)
}

void Turn_cmd_130::SharedCtor() {
  ::memset(&ignore_overrides_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turn_signal_cmd_) -
      reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(turn_signal_cmd_));
}

Turn_cmd_130::~Turn_cmd_130() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_cmd_130)
  SharedDtor();
}

void Turn_cmd_130::SharedDtor() {
}

void Turn_cmd_130::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Turn_cmd_130& Turn_cmd_130::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Turn_cmd_130_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Turn_cmd_130::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_cmd_130)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&ignore_overrides_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&turn_signal_cmd_) -
        reinterpret_cast<char*>(&ignore_overrides_)) + sizeof(turn_signal_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Turn_cmd_130::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool ignore_overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_overrides(&has_bits);
          ignore_overrides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_clear_override(&has_bits);
          clear_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clear_faults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clear_faults(&has_bits);
          clear_faults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_cmd_130.Turn_signal_cmdType turn_signal_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType_IsValid(val))) {
            _internal_set_turn_signal_cmd(static_cast<::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Turn_cmd_130::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_cmd_130)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_overrides = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ignore_overrides(), target);
  }

  // optional bool enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // optional bool clear_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_clear_override(), target);
  }

  // optional bool clear_faults = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_clear_faults(), target);
  }

  // optional .apollo.canbus.Turn_cmd_130.Turn_signal_cmdType turn_signal_cmd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_turn_signal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_cmd_130)
  return target;
}

size_t Turn_cmd_130::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_cmd_130)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool ignore_overrides = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool clear_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool clear_faults = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Turn_cmd_130.Turn_signal_cmdType turn_signal_cmd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_signal_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turn_cmd_130::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turn_cmd_130)
  GOOGLE_DCHECK_NE(&from, this);
  const Turn_cmd_130* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Turn_cmd_130>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turn_cmd_130)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turn_cmd_130)
    MergeFrom(*source);
  }
}

void Turn_cmd_130::MergeFrom(const Turn_cmd_130& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_cmd_130)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ignore_overrides_ = from.ignore_overrides_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_ = from.enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      clear_faults_ = from.clear_faults_;
    }
    if (cached_has_bits & 0x00000010u) {
      turn_signal_cmd_ = from.turn_signal_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Turn_cmd_130::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turn_cmd_130)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn_cmd_130::CopyFrom(const Turn_cmd_130& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_cmd_130)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_cmd_130::IsInitialized() const {
  return true;
}

void Turn_cmd_130::InternalSwap(Turn_cmd_130* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignore_overrides_, other->ignore_overrides_);
  swap(enable_, other->enable_);
  swap(clear_override_, other->clear_override_);
  swap(clear_faults_, other->clear_faults_);
  swap(turn_signal_cmd_, other->turn_signal_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_cmd_130::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Detected_object_rpt_411::InitAsDefaultInstance() {
}
class Detected_object_rpt_411::_Internal {
 public:
  using HasBits = decltype(std::declval<Detected_object_rpt_411>()._has_bits_);
  static void set_has_front_object_distance_high_res(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_front_object_distance_low_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Detected_object_rpt_411::Detected_object_rpt_411()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Detected_object_rpt_411)
}
Detected_object_rpt_411::Detected_object_rpt_411(const Detected_object_rpt_411& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_object_distance_high_res_, &from.front_object_distance_high_res_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_object_distance_low_res_) -
    reinterpret_cast<char*>(&front_object_distance_high_res_)) + sizeof(front_object_distance_low_res_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Detected_object_rpt_411)
}

void Detected_object_rpt_411::SharedCtor() {
  ::memset(&front_object_distance_high_res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_object_distance_low_res_) -
      reinterpret_cast<char*>(&front_object_distance_high_res_)) + sizeof(front_object_distance_low_res_));
}

Detected_object_rpt_411::~Detected_object_rpt_411() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Detected_object_rpt_411)
  SharedDtor();
}

void Detected_object_rpt_411::SharedDtor() {
}

void Detected_object_rpt_411::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Detected_object_rpt_411& Detected_object_rpt_411::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Detected_object_rpt_411_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Detected_object_rpt_411::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Detected_object_rpt_411)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&front_object_distance_high_res_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&front_object_distance_low_res_) -
        reinterpret_cast<char*>(&front_object_distance_high_res_)) + sizeof(front_object_distance_low_res_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Detected_object_rpt_411::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double front_object_distance_high_res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_front_object_distance_high_res(&has_bits);
          front_object_distance_high_res_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double front_object_distance_low_res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_front_object_distance_low_res(&has_bits);
          front_object_distance_low_res_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Detected_object_rpt_411::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Detected_object_rpt_411)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double front_object_distance_high_res = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_front_object_distance_high_res(), target);
  }

  // optional double front_object_distance_low_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_front_object_distance_low_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Detected_object_rpt_411)
  return target;
}

size_t Detected_object_rpt_411::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Detected_object_rpt_411)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double front_object_distance_high_res = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double front_object_distance_low_res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detected_object_rpt_411::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Detected_object_rpt_411)
  GOOGLE_DCHECK_NE(&from, this);
  const Detected_object_rpt_411* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Detected_object_rpt_411>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Detected_object_rpt_411)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Detected_object_rpt_411)
    MergeFrom(*source);
  }
}

void Detected_object_rpt_411::MergeFrom(const Detected_object_rpt_411& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Detected_object_rpt_411)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      front_object_distance_high_res_ = from.front_object_distance_high_res_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_object_distance_low_res_ = from.front_object_distance_low_res_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Detected_object_rpt_411::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Detected_object_rpt_411)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detected_object_rpt_411::CopyFrom(const Detected_object_rpt_411& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Detected_object_rpt_411)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detected_object_rpt_411::IsInitialized() const {
  return true;
}

void Detected_object_rpt_411::InternalSwap(Detected_object_rpt_411* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(front_object_distance_high_res_, other->front_object_distance_high_res_);
  swap(front_object_distance_low_res_, other->front_object_distance_low_res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Detected_object_rpt_411::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Veh_specific_rpt_1_412::InitAsDefaultInstance() {
}
class Veh_specific_rpt_1_412::_Internal {
 public:
  using HasBits = decltype(std::declval<Veh_specific_rpt_1_412>()._has_bits_);
  static void set_has_shift_pos_2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shift_pos_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Veh_specific_rpt_1_412::Veh_specific_rpt_1_412()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Veh_specific_rpt_1_412)
}
Veh_specific_rpt_1_412::Veh_specific_rpt_1_412(const Veh_specific_rpt_1_412& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&shift_pos_2_, &from.shift_pos_2_,
    static_cast<size_t>(reinterpret_cast<char*>(&shift_pos_1_) -
    reinterpret_cast<char*>(&shift_pos_2_)) + sizeof(shift_pos_1_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Veh_specific_rpt_1_412)
}

void Veh_specific_rpt_1_412::SharedCtor() {
  ::memset(&shift_pos_2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shift_pos_1_) -
      reinterpret_cast<char*>(&shift_pos_2_)) + sizeof(shift_pos_1_));
}

Veh_specific_rpt_1_412::~Veh_specific_rpt_1_412() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Veh_specific_rpt_1_412)
  SharedDtor();
}

void Veh_specific_rpt_1_412::SharedDtor() {
}

void Veh_specific_rpt_1_412::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Veh_specific_rpt_1_412& Veh_specific_rpt_1_412::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Veh_specific_rpt_1_412_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Veh_specific_rpt_1_412::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Veh_specific_rpt_1_412)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&shift_pos_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shift_pos_1_) -
        reinterpret_cast<char*>(&shift_pos_2_)) + sizeof(shift_pos_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Veh_specific_rpt_1_412::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 shift_pos_2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shift_pos_2(&has_bits);
          shift_pos_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 shift_pos_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shift_pos_1(&has_bits);
          shift_pos_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Veh_specific_rpt_1_412::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Veh_specific_rpt_1_412)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 shift_pos_2 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shift_pos_2(), target);
  }

  // optional int32 shift_pos_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_shift_pos_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Veh_specific_rpt_1_412)
  return target;
}

size_t Veh_specific_rpt_1_412::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Veh_specific_rpt_1_412)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 shift_pos_2 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_shift_pos_2());
    }

    // optional int32 shift_pos_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_shift_pos_1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Veh_specific_rpt_1_412::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Veh_specific_rpt_1_412)
  GOOGLE_DCHECK_NE(&from, this);
  const Veh_specific_rpt_1_412* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Veh_specific_rpt_1_412>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Veh_specific_rpt_1_412)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Veh_specific_rpt_1_412)
    MergeFrom(*source);
  }
}

void Veh_specific_rpt_1_412::MergeFrom(const Veh_specific_rpt_1_412& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Veh_specific_rpt_1_412)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shift_pos_2_ = from.shift_pos_2_;
    }
    if (cached_has_bits & 0x00000002u) {
      shift_pos_1_ = from.shift_pos_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Veh_specific_rpt_1_412::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Veh_specific_rpt_1_412)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Veh_specific_rpt_1_412::CopyFrom(const Veh_specific_rpt_1_412& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Veh_specific_rpt_1_412)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Veh_specific_rpt_1_412::IsInitialized() const {
  return true;
}

void Veh_specific_rpt_1_412::InternalSwap(Veh_specific_rpt_1_412* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shift_pos_2_, other->shift_pos_2_);
  swap(shift_pos_1_, other->shift_pos_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Veh_specific_rpt_1_412::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Veh_dynamics_rpt_413::InitAsDefaultInstance() {
}
class Veh_dynamics_rpt_413::_Internal {
 public:
  using HasBits = decltype(std::declval<Veh_dynamics_rpt_413>()._has_bits_);
  static void set_has_veh_g_forces(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Veh_dynamics_rpt_413::Veh_dynamics_rpt_413()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Veh_dynamics_rpt_413)
}
Veh_dynamics_rpt_413::Veh_dynamics_rpt_413(const Veh_dynamics_rpt_413& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  veh_g_forces_ = from.veh_g_forces_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Veh_dynamics_rpt_413)
}

void Veh_dynamics_rpt_413::SharedCtor() {
  veh_g_forces_ = 0;
}

Veh_dynamics_rpt_413::~Veh_dynamics_rpt_413() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Veh_dynamics_rpt_413)
  SharedDtor();
}

void Veh_dynamics_rpt_413::SharedDtor() {
}

void Veh_dynamics_rpt_413::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Veh_dynamics_rpt_413& Veh_dynamics_rpt_413::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Veh_dynamics_rpt_413_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Veh_dynamics_rpt_413::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Veh_dynamics_rpt_413)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  veh_g_forces_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Veh_dynamics_rpt_413::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double veh_g_forces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_veh_g_forces(&has_bits);
          veh_g_forces_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Veh_dynamics_rpt_413::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Veh_dynamics_rpt_413)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double veh_g_forces = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_veh_g_forces(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Veh_dynamics_rpt_413)
  return target;
}

size_t Veh_dynamics_rpt_413::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Veh_dynamics_rpt_413)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double veh_g_forces = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Veh_dynamics_rpt_413::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Veh_dynamics_rpt_413)
  GOOGLE_DCHECK_NE(&from, this);
  const Veh_dynamics_rpt_413* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Veh_dynamics_rpt_413>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Veh_dynamics_rpt_413)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Veh_dynamics_rpt_413)
    MergeFrom(*source);
  }
}

void Veh_dynamics_rpt_413::MergeFrom(const Veh_dynamics_rpt_413& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Veh_dynamics_rpt_413)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_veh_g_forces()) {
    _internal_set_veh_g_forces(from._internal_veh_g_forces());
  }
}

void Veh_dynamics_rpt_413::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Veh_dynamics_rpt_413)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Veh_dynamics_rpt_413::CopyFrom(const Veh_dynamics_rpt_413& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Veh_dynamics_rpt_413)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Veh_dynamics_rpt_413::IsInitialized() const {
  return true;
}

void Veh_dynamics_rpt_413::InternalSwap(Veh_dynamics_rpt_413* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(veh_g_forces_, other->veh_g_forces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Veh_dynamics_rpt_413::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rear_lights_rpt_418::InitAsDefaultInstance() {
}
class Rear_lights_rpt_418::_Internal {
 public:
  using HasBits = decltype(std::declval<Rear_lights_rpt_418>()._has_bits_);
  static void set_has_reverse_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_lights_on_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reverse_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Rear_lights_rpt_418::Rear_lights_rpt_418()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Rear_lights_rpt_418)
}
Rear_lights_rpt_418::Rear_lights_rpt_418(const Rear_lights_rpt_418& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reverse_lights_on_is_valid_, &from.reverse_lights_on_is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_lights_on_) -
    reinterpret_cast<char*>(&reverse_lights_on_is_valid_)) + sizeof(brake_lights_on_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Rear_lights_rpt_418)
}

void Rear_lights_rpt_418::SharedCtor() {
  ::memset(&reverse_lights_on_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_lights_on_) -
      reinterpret_cast<char*>(&reverse_lights_on_is_valid_)) + sizeof(brake_lights_on_));
}

Rear_lights_rpt_418::~Rear_lights_rpt_418() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Rear_lights_rpt_418)
  SharedDtor();
}

void Rear_lights_rpt_418::SharedDtor() {
}

void Rear_lights_rpt_418::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rear_lights_rpt_418& Rear_lights_rpt_418::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rear_lights_rpt_418_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Rear_lights_rpt_418::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Rear_lights_rpt_418)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reverse_lights_on_is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_lights_on_) -
      reinterpret_cast<char*>(&reverse_lights_on_is_valid_)) + sizeof(brake_lights_on_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Rear_lights_rpt_418::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool reverse_lights_on_is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reverse_lights_on_is_valid(&has_bits);
          reverse_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool brake_lights_on_is_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_brake_lights_on_is_valid(&has_bits);
          brake_lights_on_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse_lights_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reverse_lights_on(&has_bits);
          reverse_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool brake_lights_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_brake_lights_on(&has_bits);
          brake_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rear_lights_rpt_418::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Rear_lights_rpt_418)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reverse_lights_on_is_valid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reverse_lights_on_is_valid(), target);
  }

  // optional bool brake_lights_on_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_brake_lights_on_is_valid(), target);
  }

  // optional bool reverse_lights_on = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_reverse_lights_on(), target);
  }

  // optional bool brake_lights_on = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_brake_lights_on(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Rear_lights_rpt_418)
  return target;
}

size_t Rear_lights_rpt_418::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Rear_lights_rpt_418)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool reverse_lights_on_is_valid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool brake_lights_on_is_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool reverse_lights_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool brake_lights_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rear_lights_rpt_418::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Rear_lights_rpt_418)
  GOOGLE_DCHECK_NE(&from, this);
  const Rear_lights_rpt_418* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rear_lights_rpt_418>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Rear_lights_rpt_418)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Rear_lights_rpt_418)
    MergeFrom(*source);
  }
}

void Rear_lights_rpt_418::MergeFrom(const Rear_lights_rpt_418& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Rear_lights_rpt_418)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      reverse_lights_on_is_valid_ = from.reverse_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_lights_on_is_valid_ = from.brake_lights_on_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      reverse_lights_on_ = from.reverse_lights_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_lights_on_ = from.brake_lights_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rear_lights_rpt_418::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Rear_lights_rpt_418)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rear_lights_rpt_418::CopyFrom(const Rear_lights_rpt_418& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Rear_lights_rpt_418)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rear_lights_rpt_418::IsInitialized() const {
  return true;
}

void Rear_lights_rpt_418::InternalSwap(Rear_lights_rpt_418* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reverse_lights_on_is_valid_, other->reverse_lights_on_is_valid_);
  swap(brake_lights_on_is_valid_, other->brake_lights_on_is_valid_);
  swap(reverse_lights_on_, other->reverse_lights_on_);
  swap(brake_lights_on_, other->brake_lights_on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rear_lights_rpt_418::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lexus::InitAsDefaultInstance() {
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->hazard_lights_rpt_214_ = const_cast< ::apollo::canbus::Hazard_lights_rpt_214*>(
      ::apollo::canbus::Hazard_lights_rpt_214::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->steering_cmd_12c_ = const_cast< ::apollo::canbus::Steering_cmd_12c*>(
      ::apollo::canbus::Steering_cmd_12c::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->dash_controls_right_rpt_210_ = const_cast< ::apollo::canbus::Dash_controls_right_rpt_210*>(
      ::apollo::canbus::Dash_controls_right_rpt_210::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->dash_controls_left_cmd_10c_ = const_cast< ::apollo::canbus::Dash_controls_left_cmd_10c*>(
      ::apollo::canbus::Dash_controls_left_cmd_10c::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->steering_rpt_22c_ = const_cast< ::apollo::canbus::Steering_rpt_22c*>(
      ::apollo::canbus::Steering_rpt_22c::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->turn_aux_rpt_330_ = const_cast< ::apollo::canbus::Turn_aux_rpt_330*>(
      ::apollo::canbus::Turn_aux_rpt_330::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->headlight_rpt_218_ = const_cast< ::apollo::canbus::Headlight_rpt_218*>(
      ::apollo::canbus::Headlight_rpt_218::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->hazard_lights_cmd_114_ = const_cast< ::apollo::canbus::Hazard_lights_cmd_114*>(
      ::apollo::canbus::Hazard_lights_cmd_114::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->dash_controls_left_rpt_20c_ = const_cast< ::apollo::canbus::Dash_controls_left_rpt_20c*>(
      ::apollo::canbus::Dash_controls_left_rpt_20c::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->headlight_aux_rpt_318_ = const_cast< ::apollo::canbus::Headlight_aux_rpt_318*>(
      ::apollo::canbus::Headlight_aux_rpt_318::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->dash_controls_right_cmd_110_ = const_cast< ::apollo::canbus::Dash_controls_right_cmd_110*>(
      ::apollo::canbus::Dash_controls_right_cmd_110::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->wiper_cmd_134_ = const_cast< ::apollo::canbus::Wiper_cmd_134*>(
      ::apollo::canbus::Wiper_cmd_134::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->wiper_rpt_234_ = const_cast< ::apollo::canbus::Wiper_rpt_234*>(
      ::apollo::canbus::Wiper_rpt_234::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->turn_rpt_230_ = const_cast< ::apollo::canbus::Turn_rpt_230*>(
      ::apollo::canbus::Turn_rpt_230::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->headlight_cmd_118_ = const_cast< ::apollo::canbus::Headlight_cmd_118*>(
      ::apollo::canbus::Headlight_cmd_118::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->door_rpt_417_ = const_cast< ::apollo::canbus::Door_rpt_417*>(
      ::apollo::canbus::Door_rpt_417::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->component_rpt_20_ = const_cast< ::apollo::canbus::Component_rpt_20*>(
      ::apollo::canbus::Component_rpt_20::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->wheel_speed_rpt_407_ = const_cast< ::apollo::canbus::Wheel_speed_rpt_407*>(
      ::apollo::canbus::Wheel_speed_rpt_407::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->steering_motor_rpt_3_406_ = const_cast< ::apollo::canbus::Steering_motor_rpt_3_406*>(
      ::apollo::canbus::Steering_motor_rpt_3_406::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->steering_motor_rpt_2_405_ = const_cast< ::apollo::canbus::Steering_motor_rpt_2_405*>(
      ::apollo::canbus::Steering_motor_rpt_2_405::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->steering_motor_rpt_1_404_ = const_cast< ::apollo::canbus::Steering_motor_rpt_1_404*>(
      ::apollo::canbus::Steering_motor_rpt_1_404::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->brake_motor_rpt_3_403_ = const_cast< ::apollo::canbus::Brake_motor_rpt_3_403*>(
      ::apollo::canbus::Brake_motor_rpt_3_403::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->brake_motor_rpt_2_402_ = const_cast< ::apollo::canbus::Brake_motor_rpt_2_402*>(
      ::apollo::canbus::Brake_motor_rpt_2_402::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->brake_motor_rpt_1_401_ = const_cast< ::apollo::canbus::Brake_motor_rpt_1_401*>(
      ::apollo::canbus::Brake_motor_rpt_1_401::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->wiper_aux_rpt_334_ = const_cast< ::apollo::canbus::Wiper_aux_rpt_334*>(
      ::apollo::canbus::Wiper_aux_rpt_334::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->shift_aux_rpt_328_ = const_cast< ::apollo::canbus::Shift_aux_rpt_328*>(
      ::apollo::canbus::Shift_aux_rpt_328::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->accel_rpt_200_ = const_cast< ::apollo::canbus::Accel_rpt_200*>(
      ::apollo::canbus::Accel_rpt_200::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->brake_rpt_204_ = const_cast< ::apollo::canbus::Brake_rpt_204*>(
      ::apollo::canbus::Brake_rpt_204::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->horn_cmd_11c_ = const_cast< ::apollo::canbus::Horn_cmd_11c*>(
      ::apollo::canbus::Horn_cmd_11c::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->global_rpt_10_ = const_cast< ::apollo::canbus::Global_rpt_10*>(
      ::apollo::canbus::Global_rpt_10::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->accel_aux_rpt_300_ = const_cast< ::apollo::canbus::Accel_aux_rpt_300*>(
      ::apollo::canbus::Accel_aux_rpt_300::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->cruise_control_buttons_rpt_208_ = const_cast< ::apollo::canbus::Cruise_control_buttons_rpt_208*>(
      ::apollo::canbus::Cruise_control_buttons_rpt_208::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->vehicle_speed_rpt_400_ = const_cast< ::apollo::canbus::Vehicle_speed_rpt_400*>(
      ::apollo::canbus::Vehicle_speed_rpt_400::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->brake_aux_rpt_304_ = const_cast< ::apollo::canbus::Brake_aux_rpt_304*>(
      ::apollo::canbus::Brake_aux_rpt_304::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->media_controls_cmd_120_ = const_cast< ::apollo::canbus::Media_controls_cmd_120*>(
      ::apollo::canbus::Media_controls_cmd_120::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->cruise_control_buttons_cmd_108_ = const_cast< ::apollo::canbus::Cruise_control_buttons_cmd_108*>(
      ::apollo::canbus::Cruise_control_buttons_cmd_108::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->parking_brake_cmd_124_ = const_cast< ::apollo::canbus::Parking_brake_cmd_124*>(
      ::apollo::canbus::Parking_brake_cmd_124::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->horn_rpt_21c_ = const_cast< ::apollo::canbus::Horn_rpt_21c*>(
      ::apollo::canbus::Horn_rpt_21c::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->shift_rpt_228_ = const_cast< ::apollo::canbus::Shift_rpt_228*>(
      ::apollo::canbus::Shift_rpt_228::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->shift_cmd_128_ = const_cast< ::apollo::canbus::Shift_cmd_128*>(
      ::apollo::canbus::Shift_cmd_128::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->accel_cmd_100_ = const_cast< ::apollo::canbus::Accel_cmd_100*>(
      ::apollo::canbus::Accel_cmd_100::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->parking_brake_rpt_224_ = const_cast< ::apollo::canbus::Parking_brake_rpt_224*>(
      ::apollo::canbus::Parking_brake_rpt_224::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->brake_cmd_104_ = const_cast< ::apollo::canbus::Brake_cmd_104*>(
      ::apollo::canbus::Brake_cmd_104::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->media_controls_rpt_220_ = const_cast< ::apollo::canbus::Media_controls_rpt_220*>(
      ::apollo::canbus::Media_controls_rpt_220::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->steering_aux_rpt_32c_ = const_cast< ::apollo::canbus::Steering_aux_rpt_32c*>(
      ::apollo::canbus::Steering_aux_rpt_32c::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->lat_lon_heading_rpt_40e_ = const_cast< ::apollo::canbus::Lat_lon_heading_rpt_40e*>(
      ::apollo::canbus::Lat_lon_heading_rpt_40e::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->yaw_rate_rpt_40d_ = const_cast< ::apollo::canbus::Yaw_rate_rpt_40d*>(
      ::apollo::canbus::Yaw_rate_rpt_40d::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->date_time_rpt_40f_ = const_cast< ::apollo::canbus::Date_time_rpt_40f*>(
      ::apollo::canbus::Date_time_rpt_40f::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->vin_rpt_414_ = const_cast< ::apollo::canbus::Vin_rpt_414*>(
      ::apollo::canbus::Vin_rpt_414::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->occupancy_rpt_415_ = const_cast< ::apollo::canbus::Occupancy_rpt_415*>(
      ::apollo::canbus::Occupancy_rpt_415::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->interior_lights_rpt_416_ = const_cast< ::apollo::canbus::Interior_lights_rpt_416*>(
      ::apollo::canbus::Interior_lights_rpt_416::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->turn_cmd_130_ = const_cast< ::apollo::canbus::Turn_cmd_130*>(
      ::apollo::canbus::Turn_cmd_130::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->detected_object_rpt_411_ = const_cast< ::apollo::canbus::Detected_object_rpt_411*>(
      ::apollo::canbus::Detected_object_rpt_411::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->veh_specific_rpt_1_412_ = const_cast< ::apollo::canbus::Veh_specific_rpt_1_412*>(
      ::apollo::canbus::Veh_specific_rpt_1_412::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->veh_dynamics_rpt_413_ = const_cast< ::apollo::canbus::Veh_dynamics_rpt_413*>(
      ::apollo::canbus::Veh_dynamics_rpt_413::internal_default_instance());
  ::apollo::canbus::_Lexus_default_instance_._instance.get_mutable()->rear_lights_rpt_418_ = const_cast< ::apollo::canbus::Rear_lights_rpt_418*>(
      ::apollo::canbus::Rear_lights_rpt_418::internal_default_instance());
}
class Lexus::_Internal {
 public:
  using HasBits = decltype(std::declval<Lexus>()._has_bits_);
  static const ::apollo::canbus::Hazard_lights_rpt_214& hazard_lights_rpt_214(const Lexus* msg);
  static void set_has_hazard_lights_rpt_214(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Steering_cmd_12c& steering_cmd_12c(const Lexus* msg);
  static void set_has_steering_cmd_12c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Dash_controls_right_rpt_210& dash_controls_right_rpt_210(const Lexus* msg);
  static void set_has_dash_controls_right_rpt_210(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Dash_controls_left_cmd_10c& dash_controls_left_cmd_10c(const Lexus* msg);
  static void set_has_dash_controls_left_cmd_10c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Steering_rpt_22c& steering_rpt_22c(const Lexus* msg);
  static void set_has_steering_rpt_22c(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Turn_aux_rpt_330& turn_aux_rpt_330(const Lexus* msg);
  static void set_has_turn_aux_rpt_330(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Headlight_rpt_218& headlight_rpt_218(const Lexus* msg);
  static void set_has_headlight_rpt_218(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Hazard_lights_cmd_114& hazard_lights_cmd_114(const Lexus* msg);
  static void set_has_hazard_lights_cmd_114(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Dash_controls_left_rpt_20c& dash_controls_left_rpt_20c(const Lexus* msg);
  static void set_has_dash_controls_left_rpt_20c(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Headlight_aux_rpt_318& headlight_aux_rpt_318(const Lexus* msg);
  static void set_has_headlight_aux_rpt_318(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Dash_controls_right_cmd_110& dash_controls_right_cmd_110(const Lexus* msg);
  static void set_has_dash_controls_right_cmd_110(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Wiper_cmd_134& wiper_cmd_134(const Lexus* msg);
  static void set_has_wiper_cmd_134(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Wiper_rpt_234& wiper_rpt_234(const Lexus* msg);
  static void set_has_wiper_rpt_234(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::Turn_rpt_230& turn_rpt_230(const Lexus* msg);
  static void set_has_turn_rpt_230(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::canbus::Headlight_cmd_118& headlight_cmd_118(const Lexus* msg);
  static void set_has_headlight_cmd_118(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::canbus::Door_rpt_417& door_rpt_417(const Lexus* msg);
  static void set_has_door_rpt_417(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::canbus::Component_rpt_20& component_rpt_20(const Lexus* msg);
  static void set_has_component_rpt_20(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::canbus::Wheel_speed_rpt_407& wheel_speed_rpt_407(const Lexus* msg);
  static void set_has_wheel_speed_rpt_407(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_3_406& steering_motor_rpt_3_406(const Lexus* msg);
  static void set_has_steering_motor_rpt_3_406(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_2_405& steering_motor_rpt_2_405(const Lexus* msg);
  static void set_has_steering_motor_rpt_2_405(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_1_404& steering_motor_rpt_1_404(const Lexus* msg);
  static void set_has_steering_motor_rpt_1_404(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_3_403& brake_motor_rpt_3_403(const Lexus* msg);
  static void set_has_brake_motor_rpt_3_403(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_2_402& brake_motor_rpt_2_402(const Lexus* msg);
  static void set_has_brake_motor_rpt_2_402(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_1_401& brake_motor_rpt_1_401(const Lexus* msg);
  static void set_has_brake_motor_rpt_1_401(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::canbus::Wiper_aux_rpt_334& wiper_aux_rpt_334(const Lexus* msg);
  static void set_has_wiper_aux_rpt_334(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::canbus::Shift_aux_rpt_328& shift_aux_rpt_328(const Lexus* msg);
  static void set_has_shift_aux_rpt_328(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::canbus::Accel_rpt_200& accel_rpt_200(const Lexus* msg);
  static void set_has_accel_rpt_200(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::apollo::canbus::Brake_rpt_204& brake_rpt_204(const Lexus* msg);
  static void set_has_brake_rpt_204(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::canbus::Horn_cmd_11c& horn_cmd_11c(const Lexus* msg);
  static void set_has_horn_cmd_11c(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::canbus::Global_rpt_10& global_rpt_10(const Lexus* msg);
  static void set_has_global_rpt_10(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::apollo::canbus::Accel_aux_rpt_300& accel_aux_rpt_300(const Lexus* msg);
  static void set_has_accel_aux_rpt_300(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::apollo::canbus::Cruise_control_buttons_rpt_208& cruise_control_buttons_rpt_208(const Lexus* msg);
  static void set_has_cruise_control_buttons_rpt_208(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::apollo::canbus::Vehicle_speed_rpt_400& vehicle_speed_rpt_400(const Lexus* msg);
  static void set_has_vehicle_speed_rpt_400(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::apollo::canbus::Brake_aux_rpt_304& brake_aux_rpt_304(const Lexus* msg);
  static void set_has_brake_aux_rpt_304(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::apollo::canbus::Media_controls_cmd_120& media_controls_cmd_120(const Lexus* msg);
  static void set_has_media_controls_cmd_120(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::apollo::canbus::Cruise_control_buttons_cmd_108& cruise_control_buttons_cmd_108(const Lexus* msg);
  static void set_has_cruise_control_buttons_cmd_108(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::apollo::canbus::Parking_brake_cmd_124& parking_brake_cmd_124(const Lexus* msg);
  static void set_has_parking_brake_cmd_124(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::apollo::canbus::Horn_rpt_21c& horn_rpt_21c(const Lexus* msg);
  static void set_has_horn_rpt_21c(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::apollo::canbus::Shift_rpt_228& shift_rpt_228(const Lexus* msg);
  static void set_has_shift_rpt_228(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::apollo::canbus::Shift_cmd_128& shift_cmd_128(const Lexus* msg);
  static void set_has_shift_cmd_128(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::apollo::canbus::Accel_cmd_100& accel_cmd_100(const Lexus* msg);
  static void set_has_accel_cmd_100(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::apollo::canbus::Parking_brake_rpt_224& parking_brake_rpt_224(const Lexus* msg);
  static void set_has_parking_brake_rpt_224(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::apollo::canbus::Brake_cmd_104& brake_cmd_104(const Lexus* msg);
  static void set_has_brake_cmd_104(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::apollo::canbus::Media_controls_rpt_220& media_controls_rpt_220(const Lexus* msg);
  static void set_has_media_controls_rpt_220(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::apollo::canbus::Steering_aux_rpt_32c& steering_aux_rpt_32c(const Lexus* msg);
  static void set_has_steering_aux_rpt_32c(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::apollo::canbus::Lat_lon_heading_rpt_40e& lat_lon_heading_rpt_40e(const Lexus* msg);
  static void set_has_lat_lon_heading_rpt_40e(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::apollo::canbus::Yaw_rate_rpt_40d& yaw_rate_rpt_40d(const Lexus* msg);
  static void set_has_yaw_rate_rpt_40d(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::apollo::canbus::Date_time_rpt_40f& date_time_rpt_40f(const Lexus* msg);
  static void set_has_date_time_rpt_40f(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::apollo::canbus::Vin_rpt_414& vin_rpt_414(const Lexus* msg);
  static void set_has_vin_rpt_414(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::apollo::canbus::Occupancy_rpt_415& occupancy_rpt_415(const Lexus* msg);
  static void set_has_occupancy_rpt_415(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::apollo::canbus::Interior_lights_rpt_416& interior_lights_rpt_416(const Lexus* msg);
  static void set_has_interior_lights_rpt_416(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::apollo::canbus::Turn_cmd_130& turn_cmd_130(const Lexus* msg);
  static void set_has_turn_cmd_130(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::apollo::canbus::Detected_object_rpt_411& detected_object_rpt_411(const Lexus* msg);
  static void set_has_detected_object_rpt_411(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::apollo::canbus::Veh_specific_rpt_1_412& veh_specific_rpt_1_412(const Lexus* msg);
  static void set_has_veh_specific_rpt_1_412(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::apollo::canbus::Veh_dynamics_rpt_413& veh_dynamics_rpt_413(const Lexus* msg);
  static void set_has_veh_dynamics_rpt_413(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::apollo::canbus::Rear_lights_rpt_418& rear_lights_rpt_418(const Lexus* msg);
  static void set_has_rear_lights_rpt_418(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
};

const ::apollo::canbus::Hazard_lights_rpt_214&
Lexus::_Internal::hazard_lights_rpt_214(const Lexus* msg) {
  return *msg->hazard_lights_rpt_214_;
}
const ::apollo::canbus::Steering_cmd_12c&
Lexus::_Internal::steering_cmd_12c(const Lexus* msg) {
  return *msg->steering_cmd_12c_;
}
const ::apollo::canbus::Dash_controls_right_rpt_210&
Lexus::_Internal::dash_controls_right_rpt_210(const Lexus* msg) {
  return *msg->dash_controls_right_rpt_210_;
}
const ::apollo::canbus::Dash_controls_left_cmd_10c&
Lexus::_Internal::dash_controls_left_cmd_10c(const Lexus* msg) {
  return *msg->dash_controls_left_cmd_10c_;
}
const ::apollo::canbus::Steering_rpt_22c&
Lexus::_Internal::steering_rpt_22c(const Lexus* msg) {
  return *msg->steering_rpt_22c_;
}
const ::apollo::canbus::Turn_aux_rpt_330&
Lexus::_Internal::turn_aux_rpt_330(const Lexus* msg) {
  return *msg->turn_aux_rpt_330_;
}
const ::apollo::canbus::Headlight_rpt_218&
Lexus::_Internal::headlight_rpt_218(const Lexus* msg) {
  return *msg->headlight_rpt_218_;
}
const ::apollo::canbus::Hazard_lights_cmd_114&
Lexus::_Internal::hazard_lights_cmd_114(const Lexus* msg) {
  return *msg->hazard_lights_cmd_114_;
}
const ::apollo::canbus::Dash_controls_left_rpt_20c&
Lexus::_Internal::dash_controls_left_rpt_20c(const Lexus* msg) {
  return *msg->dash_controls_left_rpt_20c_;
}
const ::apollo::canbus::Headlight_aux_rpt_318&
Lexus::_Internal::headlight_aux_rpt_318(const Lexus* msg) {
  return *msg->headlight_aux_rpt_318_;
}
const ::apollo::canbus::Dash_controls_right_cmd_110&
Lexus::_Internal::dash_controls_right_cmd_110(const Lexus* msg) {
  return *msg->dash_controls_right_cmd_110_;
}
const ::apollo::canbus::Wiper_cmd_134&
Lexus::_Internal::wiper_cmd_134(const Lexus* msg) {
  return *msg->wiper_cmd_134_;
}
const ::apollo::canbus::Wiper_rpt_234&
Lexus::_Internal::wiper_rpt_234(const Lexus* msg) {
  return *msg->wiper_rpt_234_;
}
const ::apollo::canbus::Turn_rpt_230&
Lexus::_Internal::turn_rpt_230(const Lexus* msg) {
  return *msg->turn_rpt_230_;
}
const ::apollo::canbus::Headlight_cmd_118&
Lexus::_Internal::headlight_cmd_118(const Lexus* msg) {
  return *msg->headlight_cmd_118_;
}
const ::apollo::canbus::Door_rpt_417&
Lexus::_Internal::door_rpt_417(const Lexus* msg) {
  return *msg->door_rpt_417_;
}
const ::apollo::canbus::Component_rpt_20&
Lexus::_Internal::component_rpt_20(const Lexus* msg) {
  return *msg->component_rpt_20_;
}
const ::apollo::canbus::Wheel_speed_rpt_407&
Lexus::_Internal::wheel_speed_rpt_407(const Lexus* msg) {
  return *msg->wheel_speed_rpt_407_;
}
const ::apollo::canbus::Steering_motor_rpt_3_406&
Lexus::_Internal::steering_motor_rpt_3_406(const Lexus* msg) {
  return *msg->steering_motor_rpt_3_406_;
}
const ::apollo::canbus::Steering_motor_rpt_2_405&
Lexus::_Internal::steering_motor_rpt_2_405(const Lexus* msg) {
  return *msg->steering_motor_rpt_2_405_;
}
const ::apollo::canbus::Steering_motor_rpt_1_404&
Lexus::_Internal::steering_motor_rpt_1_404(const Lexus* msg) {
  return *msg->steering_motor_rpt_1_404_;
}
const ::apollo::canbus::Brake_motor_rpt_3_403&
Lexus::_Internal::brake_motor_rpt_3_403(const Lexus* msg) {
  return *msg->brake_motor_rpt_3_403_;
}
const ::apollo::canbus::Brake_motor_rpt_2_402&
Lexus::_Internal::brake_motor_rpt_2_402(const Lexus* msg) {
  return *msg->brake_motor_rpt_2_402_;
}
const ::apollo::canbus::Brake_motor_rpt_1_401&
Lexus::_Internal::brake_motor_rpt_1_401(const Lexus* msg) {
  return *msg->brake_motor_rpt_1_401_;
}
const ::apollo::canbus::Wiper_aux_rpt_334&
Lexus::_Internal::wiper_aux_rpt_334(const Lexus* msg) {
  return *msg->wiper_aux_rpt_334_;
}
const ::apollo::canbus::Shift_aux_rpt_328&
Lexus::_Internal::shift_aux_rpt_328(const Lexus* msg) {
  return *msg->shift_aux_rpt_328_;
}
const ::apollo::canbus::Accel_rpt_200&
Lexus::_Internal::accel_rpt_200(const Lexus* msg) {
  return *msg->accel_rpt_200_;
}
const ::apollo::canbus::Brake_rpt_204&
Lexus::_Internal::brake_rpt_204(const Lexus* msg) {
  return *msg->brake_rpt_204_;
}
const ::apollo::canbus::Horn_cmd_11c&
Lexus::_Internal::horn_cmd_11c(const Lexus* msg) {
  return *msg->horn_cmd_11c_;
}
const ::apollo::canbus::Global_rpt_10&
Lexus::_Internal::global_rpt_10(const Lexus* msg) {
  return *msg->global_rpt_10_;
}
const ::apollo::canbus::Accel_aux_rpt_300&
Lexus::_Internal::accel_aux_rpt_300(const Lexus* msg) {
  return *msg->accel_aux_rpt_300_;
}
const ::apollo::canbus::Cruise_control_buttons_rpt_208&
Lexus::_Internal::cruise_control_buttons_rpt_208(const Lexus* msg) {
  return *msg->cruise_control_buttons_rpt_208_;
}
const ::apollo::canbus::Vehicle_speed_rpt_400&
Lexus::_Internal::vehicle_speed_rpt_400(const Lexus* msg) {
  return *msg->vehicle_speed_rpt_400_;
}
const ::apollo::canbus::Brake_aux_rpt_304&
Lexus::_Internal::brake_aux_rpt_304(const Lexus* msg) {
  return *msg->brake_aux_rpt_304_;
}
const ::apollo::canbus::Media_controls_cmd_120&
Lexus::_Internal::media_controls_cmd_120(const Lexus* msg) {
  return *msg->media_controls_cmd_120_;
}
const ::apollo::canbus::Cruise_control_buttons_cmd_108&
Lexus::_Internal::cruise_control_buttons_cmd_108(const Lexus* msg) {
  return *msg->cruise_control_buttons_cmd_108_;
}
const ::apollo::canbus::Parking_brake_cmd_124&
Lexus::_Internal::parking_brake_cmd_124(const Lexus* msg) {
  return *msg->parking_brake_cmd_124_;
}
const ::apollo::canbus::Horn_rpt_21c&
Lexus::_Internal::horn_rpt_21c(const Lexus* msg) {
  return *msg->horn_rpt_21c_;
}
const ::apollo::canbus::Shift_rpt_228&
Lexus::_Internal::shift_rpt_228(const Lexus* msg) {
  return *msg->shift_rpt_228_;
}
const ::apollo::canbus::Shift_cmd_128&
Lexus::_Internal::shift_cmd_128(const Lexus* msg) {
  return *msg->shift_cmd_128_;
}
const ::apollo::canbus::Accel_cmd_100&
Lexus::_Internal::accel_cmd_100(const Lexus* msg) {
  return *msg->accel_cmd_100_;
}
const ::apollo::canbus::Parking_brake_rpt_224&
Lexus::_Internal::parking_brake_rpt_224(const Lexus* msg) {
  return *msg->parking_brake_rpt_224_;
}
const ::apollo::canbus::Brake_cmd_104&
Lexus::_Internal::brake_cmd_104(const Lexus* msg) {
  return *msg->brake_cmd_104_;
}
const ::apollo::canbus::Media_controls_rpt_220&
Lexus::_Internal::media_controls_rpt_220(const Lexus* msg) {
  return *msg->media_controls_rpt_220_;
}
const ::apollo::canbus::Steering_aux_rpt_32c&
Lexus::_Internal::steering_aux_rpt_32c(const Lexus* msg) {
  return *msg->steering_aux_rpt_32c_;
}
const ::apollo::canbus::Lat_lon_heading_rpt_40e&
Lexus::_Internal::lat_lon_heading_rpt_40e(const Lexus* msg) {
  return *msg->lat_lon_heading_rpt_40e_;
}
const ::apollo::canbus::Yaw_rate_rpt_40d&
Lexus::_Internal::yaw_rate_rpt_40d(const Lexus* msg) {
  return *msg->yaw_rate_rpt_40d_;
}
const ::apollo::canbus::Date_time_rpt_40f&
Lexus::_Internal::date_time_rpt_40f(const Lexus* msg) {
  return *msg->date_time_rpt_40f_;
}
const ::apollo::canbus::Vin_rpt_414&
Lexus::_Internal::vin_rpt_414(const Lexus* msg) {
  return *msg->vin_rpt_414_;
}
const ::apollo::canbus::Occupancy_rpt_415&
Lexus::_Internal::occupancy_rpt_415(const Lexus* msg) {
  return *msg->occupancy_rpt_415_;
}
const ::apollo::canbus::Interior_lights_rpt_416&
Lexus::_Internal::interior_lights_rpt_416(const Lexus* msg) {
  return *msg->interior_lights_rpt_416_;
}
const ::apollo::canbus::Turn_cmd_130&
Lexus::_Internal::turn_cmd_130(const Lexus* msg) {
  return *msg->turn_cmd_130_;
}
const ::apollo::canbus::Detected_object_rpt_411&
Lexus::_Internal::detected_object_rpt_411(const Lexus* msg) {
  return *msg->detected_object_rpt_411_;
}
const ::apollo::canbus::Veh_specific_rpt_1_412&
Lexus::_Internal::veh_specific_rpt_1_412(const Lexus* msg) {
  return *msg->veh_specific_rpt_1_412_;
}
const ::apollo::canbus::Veh_dynamics_rpt_413&
Lexus::_Internal::veh_dynamics_rpt_413(const Lexus* msg) {
  return *msg->veh_dynamics_rpt_413_;
}
const ::apollo::canbus::Rear_lights_rpt_418&
Lexus::_Internal::rear_lights_rpt_418(const Lexus* msg) {
  return *msg->rear_lights_rpt_418_;
}
Lexus::Lexus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Lexus)
}
Lexus::Lexus(const Lexus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_hazard_lights_rpt_214()) {
    hazard_lights_rpt_214_ = new ::apollo::canbus::Hazard_lights_rpt_214(*from.hazard_lights_rpt_214_);
  } else {
    hazard_lights_rpt_214_ = nullptr;
  }
  if (from._internal_has_steering_cmd_12c()) {
    steering_cmd_12c_ = new ::apollo::canbus::Steering_cmd_12c(*from.steering_cmd_12c_);
  } else {
    steering_cmd_12c_ = nullptr;
  }
  if (from._internal_has_dash_controls_right_rpt_210()) {
    dash_controls_right_rpt_210_ = new ::apollo::canbus::Dash_controls_right_rpt_210(*from.dash_controls_right_rpt_210_);
  } else {
    dash_controls_right_rpt_210_ = nullptr;
  }
  if (from._internal_has_dash_controls_left_cmd_10c()) {
    dash_controls_left_cmd_10c_ = new ::apollo::canbus::Dash_controls_left_cmd_10c(*from.dash_controls_left_cmd_10c_);
  } else {
    dash_controls_left_cmd_10c_ = nullptr;
  }
  if (from._internal_has_steering_rpt_22c()) {
    steering_rpt_22c_ = new ::apollo::canbus::Steering_rpt_22c(*from.steering_rpt_22c_);
  } else {
    steering_rpt_22c_ = nullptr;
  }
  if (from._internal_has_turn_aux_rpt_330()) {
    turn_aux_rpt_330_ = new ::apollo::canbus::Turn_aux_rpt_330(*from.turn_aux_rpt_330_);
  } else {
    turn_aux_rpt_330_ = nullptr;
  }
  if (from._internal_has_headlight_rpt_218()) {
    headlight_rpt_218_ = new ::apollo::canbus::Headlight_rpt_218(*from.headlight_rpt_218_);
  } else {
    headlight_rpt_218_ = nullptr;
  }
  if (from._internal_has_hazard_lights_cmd_114()) {
    hazard_lights_cmd_114_ = new ::apollo::canbus::Hazard_lights_cmd_114(*from.hazard_lights_cmd_114_);
  } else {
    hazard_lights_cmd_114_ = nullptr;
  }
  if (from._internal_has_dash_controls_left_rpt_20c()) {
    dash_controls_left_rpt_20c_ = new ::apollo::canbus::Dash_controls_left_rpt_20c(*from.dash_controls_left_rpt_20c_);
  } else {
    dash_controls_left_rpt_20c_ = nullptr;
  }
  if (from._internal_has_headlight_aux_rpt_318()) {
    headlight_aux_rpt_318_ = new ::apollo::canbus::Headlight_aux_rpt_318(*from.headlight_aux_rpt_318_);
  } else {
    headlight_aux_rpt_318_ = nullptr;
  }
  if (from._internal_has_dash_controls_right_cmd_110()) {
    dash_controls_right_cmd_110_ = new ::apollo::canbus::Dash_controls_right_cmd_110(*from.dash_controls_right_cmd_110_);
  } else {
    dash_controls_right_cmd_110_ = nullptr;
  }
  if (from._internal_has_wiper_cmd_134()) {
    wiper_cmd_134_ = new ::apollo::canbus::Wiper_cmd_134(*from.wiper_cmd_134_);
  } else {
    wiper_cmd_134_ = nullptr;
  }
  if (from._internal_has_wiper_rpt_234()) {
    wiper_rpt_234_ = new ::apollo::canbus::Wiper_rpt_234(*from.wiper_rpt_234_);
  } else {
    wiper_rpt_234_ = nullptr;
  }
  if (from._internal_has_turn_rpt_230()) {
    turn_rpt_230_ = new ::apollo::canbus::Turn_rpt_230(*from.turn_rpt_230_);
  } else {
    turn_rpt_230_ = nullptr;
  }
  if (from._internal_has_headlight_cmd_118()) {
    headlight_cmd_118_ = new ::apollo::canbus::Headlight_cmd_118(*from.headlight_cmd_118_);
  } else {
    headlight_cmd_118_ = nullptr;
  }
  if (from._internal_has_door_rpt_417()) {
    door_rpt_417_ = new ::apollo::canbus::Door_rpt_417(*from.door_rpt_417_);
  } else {
    door_rpt_417_ = nullptr;
  }
  if (from._internal_has_component_rpt_20()) {
    component_rpt_20_ = new ::apollo::canbus::Component_rpt_20(*from.component_rpt_20_);
  } else {
    component_rpt_20_ = nullptr;
  }
  if (from._internal_has_wheel_speed_rpt_407()) {
    wheel_speed_rpt_407_ = new ::apollo::canbus::Wheel_speed_rpt_407(*from.wheel_speed_rpt_407_);
  } else {
    wheel_speed_rpt_407_ = nullptr;
  }
  if (from._internal_has_steering_motor_rpt_3_406()) {
    steering_motor_rpt_3_406_ = new ::apollo::canbus::Steering_motor_rpt_3_406(*from.steering_motor_rpt_3_406_);
  } else {
    steering_motor_rpt_3_406_ = nullptr;
  }
  if (from._internal_has_steering_motor_rpt_2_405()) {
    steering_motor_rpt_2_405_ = new ::apollo::canbus::Steering_motor_rpt_2_405(*from.steering_motor_rpt_2_405_);
  } else {
    steering_motor_rpt_2_405_ = nullptr;
  }
  if (from._internal_has_steering_motor_rpt_1_404()) {
    steering_motor_rpt_1_404_ = new ::apollo::canbus::Steering_motor_rpt_1_404(*from.steering_motor_rpt_1_404_);
  } else {
    steering_motor_rpt_1_404_ = nullptr;
  }
  if (from._internal_has_brake_motor_rpt_3_403()) {
    brake_motor_rpt_3_403_ = new ::apollo::canbus::Brake_motor_rpt_3_403(*from.brake_motor_rpt_3_403_);
  } else {
    brake_motor_rpt_3_403_ = nullptr;
  }
  if (from._internal_has_brake_motor_rpt_2_402()) {
    brake_motor_rpt_2_402_ = new ::apollo::canbus::Brake_motor_rpt_2_402(*from.brake_motor_rpt_2_402_);
  } else {
    brake_motor_rpt_2_402_ = nullptr;
  }
  if (from._internal_has_brake_motor_rpt_1_401()) {
    brake_motor_rpt_1_401_ = new ::apollo::canbus::Brake_motor_rpt_1_401(*from.brake_motor_rpt_1_401_);
  } else {
    brake_motor_rpt_1_401_ = nullptr;
  }
  if (from._internal_has_wiper_aux_rpt_334()) {
    wiper_aux_rpt_334_ = new ::apollo::canbus::Wiper_aux_rpt_334(*from.wiper_aux_rpt_334_);
  } else {
    wiper_aux_rpt_334_ = nullptr;
  }
  if (from._internal_has_shift_aux_rpt_328()) {
    shift_aux_rpt_328_ = new ::apollo::canbus::Shift_aux_rpt_328(*from.shift_aux_rpt_328_);
  } else {
    shift_aux_rpt_328_ = nullptr;
  }
  if (from._internal_has_accel_rpt_200()) {
    accel_rpt_200_ = new ::apollo::canbus::Accel_rpt_200(*from.accel_rpt_200_);
  } else {
    accel_rpt_200_ = nullptr;
  }
  if (from._internal_has_brake_rpt_204()) {
    brake_rpt_204_ = new ::apollo::canbus::Brake_rpt_204(*from.brake_rpt_204_);
  } else {
    brake_rpt_204_ = nullptr;
  }
  if (from._internal_has_horn_cmd_11c()) {
    horn_cmd_11c_ = new ::apollo::canbus::Horn_cmd_11c(*from.horn_cmd_11c_);
  } else {
    horn_cmd_11c_ = nullptr;
  }
  if (from._internal_has_global_rpt_10()) {
    global_rpt_10_ = new ::apollo::canbus::Global_rpt_10(*from.global_rpt_10_);
  } else {
    global_rpt_10_ = nullptr;
  }
  if (from._internal_has_accel_aux_rpt_300()) {
    accel_aux_rpt_300_ = new ::apollo::canbus::Accel_aux_rpt_300(*from.accel_aux_rpt_300_);
  } else {
    accel_aux_rpt_300_ = nullptr;
  }
  if (from._internal_has_cruise_control_buttons_rpt_208()) {
    cruise_control_buttons_rpt_208_ = new ::apollo::canbus::Cruise_control_buttons_rpt_208(*from.cruise_control_buttons_rpt_208_);
  } else {
    cruise_control_buttons_rpt_208_ = nullptr;
  }
  if (from._internal_has_vehicle_speed_rpt_400()) {
    vehicle_speed_rpt_400_ = new ::apollo::canbus::Vehicle_speed_rpt_400(*from.vehicle_speed_rpt_400_);
  } else {
    vehicle_speed_rpt_400_ = nullptr;
  }
  if (from._internal_has_brake_aux_rpt_304()) {
    brake_aux_rpt_304_ = new ::apollo::canbus::Brake_aux_rpt_304(*from.brake_aux_rpt_304_);
  } else {
    brake_aux_rpt_304_ = nullptr;
  }
  if (from._internal_has_media_controls_cmd_120()) {
    media_controls_cmd_120_ = new ::apollo::canbus::Media_controls_cmd_120(*from.media_controls_cmd_120_);
  } else {
    media_controls_cmd_120_ = nullptr;
  }
  if (from._internal_has_cruise_control_buttons_cmd_108()) {
    cruise_control_buttons_cmd_108_ = new ::apollo::canbus::Cruise_control_buttons_cmd_108(*from.cruise_control_buttons_cmd_108_);
  } else {
    cruise_control_buttons_cmd_108_ = nullptr;
  }
  if (from._internal_has_parking_brake_cmd_124()) {
    parking_brake_cmd_124_ = new ::apollo::canbus::Parking_brake_cmd_124(*from.parking_brake_cmd_124_);
  } else {
    parking_brake_cmd_124_ = nullptr;
  }
  if (from._internal_has_horn_rpt_21c()) {
    horn_rpt_21c_ = new ::apollo::canbus::Horn_rpt_21c(*from.horn_rpt_21c_);
  } else {
    horn_rpt_21c_ = nullptr;
  }
  if (from._internal_has_shift_rpt_228()) {
    shift_rpt_228_ = new ::apollo::canbus::Shift_rpt_228(*from.shift_rpt_228_);
  } else {
    shift_rpt_228_ = nullptr;
  }
  if (from._internal_has_shift_cmd_128()) {
    shift_cmd_128_ = new ::apollo::canbus::Shift_cmd_128(*from.shift_cmd_128_);
  } else {
    shift_cmd_128_ = nullptr;
  }
  if (from._internal_has_accel_cmd_100()) {
    accel_cmd_100_ = new ::apollo::canbus::Accel_cmd_100(*from.accel_cmd_100_);
  } else {
    accel_cmd_100_ = nullptr;
  }
  if (from._internal_has_parking_brake_rpt_224()) {
    parking_brake_rpt_224_ = new ::apollo::canbus::Parking_brake_rpt_224(*from.parking_brake_rpt_224_);
  } else {
    parking_brake_rpt_224_ = nullptr;
  }
  if (from._internal_has_brake_cmd_104()) {
    brake_cmd_104_ = new ::apollo::canbus::Brake_cmd_104(*from.brake_cmd_104_);
  } else {
    brake_cmd_104_ = nullptr;
  }
  if (from._internal_has_media_controls_rpt_220()) {
    media_controls_rpt_220_ = new ::apollo::canbus::Media_controls_rpt_220(*from.media_controls_rpt_220_);
  } else {
    media_controls_rpt_220_ = nullptr;
  }
  if (from._internal_has_steering_aux_rpt_32c()) {
    steering_aux_rpt_32c_ = new ::apollo::canbus::Steering_aux_rpt_32c(*from.steering_aux_rpt_32c_);
  } else {
    steering_aux_rpt_32c_ = nullptr;
  }
  if (from._internal_has_lat_lon_heading_rpt_40e()) {
    lat_lon_heading_rpt_40e_ = new ::apollo::canbus::Lat_lon_heading_rpt_40e(*from.lat_lon_heading_rpt_40e_);
  } else {
    lat_lon_heading_rpt_40e_ = nullptr;
  }
  if (from._internal_has_yaw_rate_rpt_40d()) {
    yaw_rate_rpt_40d_ = new ::apollo::canbus::Yaw_rate_rpt_40d(*from.yaw_rate_rpt_40d_);
  } else {
    yaw_rate_rpt_40d_ = nullptr;
  }
  if (from._internal_has_date_time_rpt_40f()) {
    date_time_rpt_40f_ = new ::apollo::canbus::Date_time_rpt_40f(*from.date_time_rpt_40f_);
  } else {
    date_time_rpt_40f_ = nullptr;
  }
  if (from._internal_has_vin_rpt_414()) {
    vin_rpt_414_ = new ::apollo::canbus::Vin_rpt_414(*from.vin_rpt_414_);
  } else {
    vin_rpt_414_ = nullptr;
  }
  if (from._internal_has_occupancy_rpt_415()) {
    occupancy_rpt_415_ = new ::apollo::canbus::Occupancy_rpt_415(*from.occupancy_rpt_415_);
  } else {
    occupancy_rpt_415_ = nullptr;
  }
  if (from._internal_has_interior_lights_rpt_416()) {
    interior_lights_rpt_416_ = new ::apollo::canbus::Interior_lights_rpt_416(*from.interior_lights_rpt_416_);
  } else {
    interior_lights_rpt_416_ = nullptr;
  }
  if (from._internal_has_turn_cmd_130()) {
    turn_cmd_130_ = new ::apollo::canbus::Turn_cmd_130(*from.turn_cmd_130_);
  } else {
    turn_cmd_130_ = nullptr;
  }
  if (from._internal_has_detected_object_rpt_411()) {
    detected_object_rpt_411_ = new ::apollo::canbus::Detected_object_rpt_411(*from.detected_object_rpt_411_);
  } else {
    detected_object_rpt_411_ = nullptr;
  }
  if (from._internal_has_veh_specific_rpt_1_412()) {
    veh_specific_rpt_1_412_ = new ::apollo::canbus::Veh_specific_rpt_1_412(*from.veh_specific_rpt_1_412_);
  } else {
    veh_specific_rpt_1_412_ = nullptr;
  }
  if (from._internal_has_veh_dynamics_rpt_413()) {
    veh_dynamics_rpt_413_ = new ::apollo::canbus::Veh_dynamics_rpt_413(*from.veh_dynamics_rpt_413_);
  } else {
    veh_dynamics_rpt_413_ = nullptr;
  }
  if (from._internal_has_rear_lights_rpt_418()) {
    rear_lights_rpt_418_ = new ::apollo::canbus::Rear_lights_rpt_418(*from.rear_lights_rpt_418_);
  } else {
    rear_lights_rpt_418_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Lexus)
}

void Lexus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lexus_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  ::memset(&hazard_lights_rpt_214_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rear_lights_rpt_418_) -
      reinterpret_cast<char*>(&hazard_lights_rpt_214_)) + sizeof(rear_lights_rpt_418_));
}

Lexus::~Lexus() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Lexus)
  SharedDtor();
}

void Lexus::SharedDtor() {
  if (this != internal_default_instance()) delete hazard_lights_rpt_214_;
  if (this != internal_default_instance()) delete steering_cmd_12c_;
  if (this != internal_default_instance()) delete dash_controls_right_rpt_210_;
  if (this != internal_default_instance()) delete dash_controls_left_cmd_10c_;
  if (this != internal_default_instance()) delete steering_rpt_22c_;
  if (this != internal_default_instance()) delete turn_aux_rpt_330_;
  if (this != internal_default_instance()) delete headlight_rpt_218_;
  if (this != internal_default_instance()) delete hazard_lights_cmd_114_;
  if (this != internal_default_instance()) delete dash_controls_left_rpt_20c_;
  if (this != internal_default_instance()) delete headlight_aux_rpt_318_;
  if (this != internal_default_instance()) delete dash_controls_right_cmd_110_;
  if (this != internal_default_instance()) delete wiper_cmd_134_;
  if (this != internal_default_instance()) delete wiper_rpt_234_;
  if (this != internal_default_instance()) delete turn_rpt_230_;
  if (this != internal_default_instance()) delete headlight_cmd_118_;
  if (this != internal_default_instance()) delete door_rpt_417_;
  if (this != internal_default_instance()) delete component_rpt_20_;
  if (this != internal_default_instance()) delete wheel_speed_rpt_407_;
  if (this != internal_default_instance()) delete steering_motor_rpt_3_406_;
  if (this != internal_default_instance()) delete steering_motor_rpt_2_405_;
  if (this != internal_default_instance()) delete steering_motor_rpt_1_404_;
  if (this != internal_default_instance()) delete brake_motor_rpt_3_403_;
  if (this != internal_default_instance()) delete brake_motor_rpt_2_402_;
  if (this != internal_default_instance()) delete brake_motor_rpt_1_401_;
  if (this != internal_default_instance()) delete wiper_aux_rpt_334_;
  if (this != internal_default_instance()) delete shift_aux_rpt_328_;
  if (this != internal_default_instance()) delete accel_rpt_200_;
  if (this != internal_default_instance()) delete brake_rpt_204_;
  if (this != internal_default_instance()) delete horn_cmd_11c_;
  if (this != internal_default_instance()) delete global_rpt_10_;
  if (this != internal_default_instance()) delete accel_aux_rpt_300_;
  if (this != internal_default_instance()) delete cruise_control_buttons_rpt_208_;
  if (this != internal_default_instance()) delete vehicle_speed_rpt_400_;
  if (this != internal_default_instance()) delete brake_aux_rpt_304_;
  if (this != internal_default_instance()) delete media_controls_cmd_120_;
  if (this != internal_default_instance()) delete cruise_control_buttons_cmd_108_;
  if (this != internal_default_instance()) delete parking_brake_cmd_124_;
  if (this != internal_default_instance()) delete horn_rpt_21c_;
  if (this != internal_default_instance()) delete shift_rpt_228_;
  if (this != internal_default_instance()) delete shift_cmd_128_;
  if (this != internal_default_instance()) delete accel_cmd_100_;
  if (this != internal_default_instance()) delete parking_brake_rpt_224_;
  if (this != internal_default_instance()) delete brake_cmd_104_;
  if (this != internal_default_instance()) delete media_controls_rpt_220_;
  if (this != internal_default_instance()) delete steering_aux_rpt_32c_;
  if (this != internal_default_instance()) delete lat_lon_heading_rpt_40e_;
  if (this != internal_default_instance()) delete yaw_rate_rpt_40d_;
  if (this != internal_default_instance()) delete date_time_rpt_40f_;
  if (this != internal_default_instance()) delete vin_rpt_414_;
  if (this != internal_default_instance()) delete occupancy_rpt_415_;
  if (this != internal_default_instance()) delete interior_lights_rpt_416_;
  if (this != internal_default_instance()) delete turn_cmd_130_;
  if (this != internal_default_instance()) delete detected_object_rpt_411_;
  if (this != internal_default_instance()) delete veh_specific_rpt_1_412_;
  if (this != internal_default_instance()) delete veh_dynamics_rpt_413_;
  if (this != internal_default_instance()) delete rear_lights_rpt_418_;
}

void Lexus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lexus& Lexus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lexus_modules_2fcanbus_2fproto_2flexus_2eproto.base);
  return *internal_default_instance();
}


void Lexus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Lexus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hazard_lights_rpt_214_ != nullptr);
      hazard_lights_rpt_214_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(steering_cmd_12c_ != nullptr);
      steering_cmd_12c_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dash_controls_right_rpt_210_ != nullptr);
      dash_controls_right_rpt_210_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dash_controls_left_cmd_10c_ != nullptr);
      dash_controls_left_cmd_10c_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(steering_rpt_22c_ != nullptr);
      steering_rpt_22c_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(turn_aux_rpt_330_ != nullptr);
      turn_aux_rpt_330_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(headlight_rpt_218_ != nullptr);
      headlight_rpt_218_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(hazard_lights_cmd_114_ != nullptr);
      hazard_lights_cmd_114_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(dash_controls_left_rpt_20c_ != nullptr);
      dash_controls_left_rpt_20c_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(headlight_aux_rpt_318_ != nullptr);
      headlight_aux_rpt_318_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(dash_controls_right_cmd_110_ != nullptr);
      dash_controls_right_cmd_110_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(wiper_cmd_134_ != nullptr);
      wiper_cmd_134_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(wiper_rpt_234_ != nullptr);
      wiper_rpt_234_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(turn_rpt_230_ != nullptr);
      turn_rpt_230_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(headlight_cmd_118_ != nullptr);
      headlight_cmd_118_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(door_rpt_417_ != nullptr);
      door_rpt_417_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(component_rpt_20_ != nullptr);
      component_rpt_20_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(wheel_speed_rpt_407_ != nullptr);
      wheel_speed_rpt_407_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(steering_motor_rpt_3_406_ != nullptr);
      steering_motor_rpt_3_406_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(steering_motor_rpt_2_405_ != nullptr);
      steering_motor_rpt_2_405_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(steering_motor_rpt_1_404_ != nullptr);
      steering_motor_rpt_1_404_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(brake_motor_rpt_3_403_ != nullptr);
      brake_motor_rpt_3_403_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(brake_motor_rpt_2_402_ != nullptr);
      brake_motor_rpt_2_402_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(brake_motor_rpt_1_401_ != nullptr);
      brake_motor_rpt_1_401_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(wiper_aux_rpt_334_ != nullptr);
      wiper_aux_rpt_334_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(shift_aux_rpt_328_ != nullptr);
      shift_aux_rpt_328_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(accel_rpt_200_ != nullptr);
      accel_rpt_200_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(brake_rpt_204_ != nullptr);
      brake_rpt_204_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(horn_cmd_11c_ != nullptr);
      horn_cmd_11c_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(global_rpt_10_ != nullptr);
      global_rpt_10_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(accel_aux_rpt_300_ != nullptr);
      accel_aux_rpt_300_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(cruise_control_buttons_rpt_208_ != nullptr);
      cruise_control_buttons_rpt_208_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vehicle_speed_rpt_400_ != nullptr);
      vehicle_speed_rpt_400_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(brake_aux_rpt_304_ != nullptr);
      brake_aux_rpt_304_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(media_controls_cmd_120_ != nullptr);
      media_controls_cmd_120_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cruise_control_buttons_cmd_108_ != nullptr);
      cruise_control_buttons_cmd_108_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(parking_brake_cmd_124_ != nullptr);
      parking_brake_cmd_124_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(horn_rpt_21c_ != nullptr);
      horn_rpt_21c_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(shift_rpt_228_ != nullptr);
      shift_rpt_228_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(shift_cmd_128_ != nullptr);
      shift_cmd_128_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(accel_cmd_100_ != nullptr);
      accel_cmd_100_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(parking_brake_rpt_224_ != nullptr);
      parking_brake_rpt_224_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(brake_cmd_104_ != nullptr);
      brake_cmd_104_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(media_controls_rpt_220_ != nullptr);
      media_controls_rpt_220_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(steering_aux_rpt_32c_ != nullptr);
      steering_aux_rpt_32c_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(lat_lon_heading_rpt_40e_ != nullptr);
      lat_lon_heading_rpt_40e_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(yaw_rate_rpt_40d_ != nullptr);
      yaw_rate_rpt_40d_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(date_time_rpt_40f_ != nullptr);
      date_time_rpt_40f_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(vin_rpt_414_ != nullptr);
      vin_rpt_414_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(occupancy_rpt_415_ != nullptr);
      occupancy_rpt_415_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(interior_lights_rpt_416_ != nullptr);
      interior_lights_rpt_416_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(turn_cmd_130_ != nullptr);
      turn_cmd_130_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(detected_object_rpt_411_ != nullptr);
      detected_object_rpt_411_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(veh_specific_rpt_1_412_ != nullptr);
      veh_specific_rpt_1_412_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(veh_dynamics_rpt_413_ != nullptr);
      veh_dynamics_rpt_413_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(rear_lights_rpt_418_ != nullptr);
      rear_lights_rpt_418_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Lexus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hazard_lights_rpt_214(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_cmd_12c steering_cmd_12c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_cmd_12c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_rpt_210 dash_controls_right_rpt_210 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dash_controls_right_rpt_210(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_cmd_10c dash_controls_left_cmd_10c = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dash_controls_left_cmd_10c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_rpt_22c steering_rpt_22c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_rpt_22c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_aux_rpt_330 turn_aux_rpt_330 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_aux_rpt_330(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_218 headlight_rpt_218 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_rpt_218(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_hazard_lights_cmd_114(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_left_rpt_20c dash_controls_left_rpt_20c = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dash_controls_left_rpt_20c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_aux_rpt_318(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Dash_controls_right_cmd_110 dash_controls_right_cmd_110 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_dash_controls_right_cmd_110(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_cmd_134 wiper_cmd_134 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_cmd_134(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_234 wiper_rpt_234 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_rpt_234(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_230 turn_rpt_230 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_rpt_230(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_cmd_118 headlight_cmd_118 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_cmd_118(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Door_rpt_417 door_rpt_417 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_door_rpt_417(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Component_rpt_20 component_rpt_20 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_rpt_20(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_speed_rpt_407(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_3_406 steering_motor_rpt_3_406 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_3_406(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_2_405 steering_motor_rpt_2_405 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_2_405(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_1_404 steering_motor_rpt_1_404 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_1_404(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_3_403(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_2_402(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_1_401(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_aux_rpt_334(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_aux_rpt_328 shift_aux_rpt_328 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_aux_rpt_328(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_rpt_200 accel_rpt_200 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_rpt_200(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_rpt_204 brake_rpt_204 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_rpt_204(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_cmd_11c horn_cmd_11c = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_horn_cmd_11c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_10 global_rpt_10 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_rpt_10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_aux_rpt_300 accel_aux_rpt_300 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_aux_rpt_300(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_cruise_control_buttons_rpt_208(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_speed_rpt_400(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_aux_rpt_304 brake_aux_rpt_304 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_aux_rpt_304(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Media_controls_cmd_120 media_controls_cmd_120 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_controls_cmd_120(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cruise_control_buttons_cmd_108(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_brake_cmd_124 parking_brake_cmd_124 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_brake_cmd_124(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_21c horn_rpt_21c = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_horn_rpt_21c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_228 shift_rpt_228 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_rpt_228(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_cmd_128 shift_cmd_128 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_cmd_128(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_cmd_100 accel_cmd_100 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_cmd_100(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_brake_rpt_224 parking_brake_rpt_224 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_brake_rpt_224(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_cmd_104 brake_cmd_104 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_cmd_104(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Media_controls_rpt_220 media_controls_rpt_220 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_media_controls_rpt_220(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_aux_rpt_32c steering_aux_rpt_32c = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_aux_rpt_32c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_lon_heading_rpt_40e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_yaw_rate_rpt_40d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Date_time_rpt_40f date_time_rpt_40f = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_time_rpt_40f(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vin_rpt_414 vin_rpt_414 = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_vin_rpt_414(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Occupancy_rpt_415 occupancy_rpt_415 = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_occupancy_rpt_415(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Interior_lights_rpt_416 interior_lights_rpt_416 = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_lights_rpt_416(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_cmd_130 turn_cmd_130 = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_cmd_130(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Detected_object_rpt_411 detected_object_rpt_411 = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_detected_object_rpt_411(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Veh_specific_rpt_1_412 veh_specific_rpt_1_412 = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_specific_rpt_1_412(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_dynamics_rpt_413(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Rear_lights_rpt_418 rear_lights_rpt_418 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_rear_lights_rpt_418(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lexus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Lexus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hazard_lights_rpt_214(this), target, stream);
  }

  // optional .apollo.canbus.Steering_cmd_12c steering_cmd_12c = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::steering_cmd_12c(this), target, stream);
  }

  // optional .apollo.canbus.Dash_controls_right_rpt_210 dash_controls_right_rpt_210 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dash_controls_right_rpt_210(this), target, stream);
  }

  // optional .apollo.canbus.Dash_controls_left_cmd_10c dash_controls_left_cmd_10c = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dash_controls_left_cmd_10c(this), target, stream);
  }

  // optional .apollo.canbus.Steering_rpt_22c steering_rpt_22c = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::steering_rpt_22c(this), target, stream);
  }

  // optional .apollo.canbus.Turn_aux_rpt_330 turn_aux_rpt_330 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::turn_aux_rpt_330(this), target, stream);
  }

  // optional .apollo.canbus.Headlight_rpt_218 headlight_rpt_218 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::headlight_rpt_218(this), target, stream);
  }

  // optional .apollo.canbus.Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::hazard_lights_cmd_114(this), target, stream);
  }

  // optional .apollo.canbus.Dash_controls_left_rpt_20c dash_controls_left_rpt_20c = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::dash_controls_left_rpt_20c(this), target, stream);
  }

  // optional .apollo.canbus.Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::headlight_aux_rpt_318(this), target, stream);
  }

  // optional .apollo.canbus.Dash_controls_right_cmd_110 dash_controls_right_cmd_110 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::dash_controls_right_cmd_110(this), target, stream);
  }

  // optional .apollo.canbus.Wiper_cmd_134 wiper_cmd_134 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::wiper_cmd_134(this), target, stream);
  }

  // optional .apollo.canbus.Wiper_rpt_234 wiper_rpt_234 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::wiper_rpt_234(this), target, stream);
  }

  // optional .apollo.canbus.Turn_rpt_230 turn_rpt_230 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::turn_rpt_230(this), target, stream);
  }

  // optional .apollo.canbus.Headlight_cmd_118 headlight_cmd_118 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::headlight_cmd_118(this), target, stream);
  }

  // optional .apollo.canbus.Door_rpt_417 door_rpt_417 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::door_rpt_417(this), target, stream);
  }

  // optional .apollo.canbus.Component_rpt_20 component_rpt_20 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::component_rpt_20(this), target, stream);
  }

  // optional .apollo.canbus.Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::wheel_speed_rpt_407(this), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_3_406 steering_motor_rpt_3_406 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::steering_motor_rpt_3_406(this), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_2_405 steering_motor_rpt_2_405 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::steering_motor_rpt_2_405(this), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_1_404 steering_motor_rpt_1_404 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::steering_motor_rpt_1_404(this), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::brake_motor_rpt_3_403(this), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::brake_motor_rpt_2_402(this), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::brake_motor_rpt_1_401(this), target, stream);
  }

  // optional .apollo.canbus.Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::wiper_aux_rpt_334(this), target, stream);
  }

  // optional .apollo.canbus.Shift_aux_rpt_328 shift_aux_rpt_328 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::shift_aux_rpt_328(this), target, stream);
  }

  // optional .apollo.canbus.Accel_rpt_200 accel_rpt_200 = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::accel_rpt_200(this), target, stream);
  }

  // optional .apollo.canbus.Brake_rpt_204 brake_rpt_204 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::brake_rpt_204(this), target, stream);
  }

  // optional .apollo.canbus.Horn_cmd_11c horn_cmd_11c = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::horn_cmd_11c(this), target, stream);
  }

  // optional .apollo.canbus.Global_rpt_10 global_rpt_10 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::global_rpt_10(this), target, stream);
  }

  // optional .apollo.canbus.Accel_aux_rpt_300 accel_aux_rpt_300 = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::accel_aux_rpt_300(this), target, stream);
  }

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::cruise_control_buttons_rpt_208(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional .apollo.canbus.Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::vehicle_speed_rpt_400(this), target, stream);
  }

  // optional .apollo.canbus.Brake_aux_rpt_304 brake_aux_rpt_304 = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::brake_aux_rpt_304(this), target, stream);
  }

  // optional .apollo.canbus.Media_controls_cmd_120 media_controls_cmd_120 = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::media_controls_cmd_120(this), target, stream);
  }

  // optional .apollo.canbus.Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::cruise_control_buttons_cmd_108(this), target, stream);
  }

  // optional .apollo.canbus.Parking_brake_cmd_124 parking_brake_cmd_124 = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::parking_brake_cmd_124(this), target, stream);
  }

  // optional .apollo.canbus.Horn_rpt_21c horn_rpt_21c = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::horn_rpt_21c(this), target, stream);
  }

  // optional .apollo.canbus.Shift_rpt_228 shift_rpt_228 = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::shift_rpt_228(this), target, stream);
  }

  // optional .apollo.canbus.Shift_cmd_128 shift_cmd_128 = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::shift_cmd_128(this), target, stream);
  }

  // optional .apollo.canbus.Accel_cmd_100 accel_cmd_100 = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::accel_cmd_100(this), target, stream);
  }

  // optional .apollo.canbus.Parking_brake_rpt_224 parking_brake_rpt_224 = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::parking_brake_rpt_224(this), target, stream);
  }

  // optional .apollo.canbus.Brake_cmd_104 brake_cmd_104 = 43;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::brake_cmd_104(this), target, stream);
  }

  // optional .apollo.canbus.Media_controls_rpt_220 media_controls_rpt_220 = 44;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::media_controls_rpt_220(this), target, stream);
  }

  // optional .apollo.canbus.Steering_aux_rpt_32c steering_aux_rpt_32c = 45;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::steering_aux_rpt_32c(this), target, stream);
  }

  // optional .apollo.canbus.Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::lat_lon_heading_rpt_40e(this), target, stream);
  }

  // optional .apollo.canbus.Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::yaw_rate_rpt_40d(this), target, stream);
  }

  // optional .apollo.canbus.Date_time_rpt_40f date_time_rpt_40f = 48;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::date_time_rpt_40f(this), target, stream);
  }

  // optional .apollo.canbus.Vin_rpt_414 vin_rpt_414 = 49;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::vin_rpt_414(this), target, stream);
  }

  // optional .apollo.canbus.Occupancy_rpt_415 occupancy_rpt_415 = 50;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::occupancy_rpt_415(this), target, stream);
  }

  // optional .apollo.canbus.Interior_lights_rpt_416 interior_lights_rpt_416 = 51;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::interior_lights_rpt_416(this), target, stream);
  }

  // optional .apollo.canbus.Turn_cmd_130 turn_cmd_130 = 52;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::turn_cmd_130(this), target, stream);
  }

  // optional .apollo.canbus.Detected_object_rpt_411 detected_object_rpt_411 = 53;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::detected_object_rpt_411(this), target, stream);
  }

  // optional .apollo.canbus.Veh_specific_rpt_1_412 veh_specific_rpt_1_412 = 54;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::veh_specific_rpt_1_412(this), target, stream);
  }

  // optional .apollo.canbus.Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::veh_dynamics_rpt_413(this), target, stream);
  }

  // optional .apollo.canbus.Rear_lights_rpt_418 rear_lights_rpt_418 = 56;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        56, _Internal::rear_lights_rpt_418(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Lexus)
  return target;
}

size_t Lexus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Lexus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hazard_lights_rpt_214_);
    }

    // optional .apollo.canbus.Steering_cmd_12c steering_cmd_12c = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_cmd_12c_);
    }

    // optional .apollo.canbus.Dash_controls_right_rpt_210 dash_controls_right_rpt_210 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dash_controls_right_rpt_210_);
    }

    // optional .apollo.canbus.Dash_controls_left_cmd_10c dash_controls_left_cmd_10c = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dash_controls_left_cmd_10c_);
    }

    // optional .apollo.canbus.Steering_rpt_22c steering_rpt_22c = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_rpt_22c_);
    }

    // optional .apollo.canbus.Turn_aux_rpt_330 turn_aux_rpt_330 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *turn_aux_rpt_330_);
    }

    // optional .apollo.canbus.Headlight_rpt_218 headlight_rpt_218 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *headlight_rpt_218_);
    }

    // optional .apollo.canbus.Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hazard_lights_cmd_114_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Dash_controls_left_rpt_20c dash_controls_left_rpt_20c = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dash_controls_left_rpt_20c_);
    }

    // optional .apollo.canbus.Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *headlight_aux_rpt_318_);
    }

    // optional .apollo.canbus.Dash_controls_right_cmd_110 dash_controls_right_cmd_110 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dash_controls_right_cmd_110_);
    }

    // optional .apollo.canbus.Wiper_cmd_134 wiper_cmd_134 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wiper_cmd_134_);
    }

    // optional .apollo.canbus.Wiper_rpt_234 wiper_rpt_234 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wiper_rpt_234_);
    }

    // optional .apollo.canbus.Turn_rpt_230 turn_rpt_230 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *turn_rpt_230_);
    }

    // optional .apollo.canbus.Headlight_cmd_118 headlight_cmd_118 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *headlight_cmd_118_);
    }

    // optional .apollo.canbus.Door_rpt_417 door_rpt_417 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *door_rpt_417_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.canbus.Component_rpt_20 component_rpt_20 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *component_rpt_20_);
    }

    // optional .apollo.canbus.Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wheel_speed_rpt_407_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_3_406 steering_motor_rpt_3_406 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_3_406_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_2_405 steering_motor_rpt_2_405 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_2_405_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_1_404 steering_motor_rpt_1_404 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_1_404_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_3_403_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_2_402_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_1_401_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .apollo.canbus.Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wiper_aux_rpt_334_);
    }

    // optional .apollo.canbus.Shift_aux_rpt_328 shift_aux_rpt_328 = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shift_aux_rpt_328_);
    }

    // optional .apollo.canbus.Accel_rpt_200 accel_rpt_200 = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accel_rpt_200_);
    }

    // optional .apollo.canbus.Brake_rpt_204 brake_rpt_204 = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_rpt_204_);
    }

    // optional .apollo.canbus.Horn_cmd_11c horn_cmd_11c = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *horn_cmd_11c_);
    }

    // optional .apollo.canbus.Global_rpt_10 global_rpt_10 = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_rpt_10_);
    }

    // optional .apollo.canbus.Accel_aux_rpt_300 accel_aux_rpt_300 = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accel_aux_rpt_300_);
    }

    // optional .apollo.canbus.Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cruise_control_buttons_rpt_208_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_speed_rpt_400_);
    }

    // optional .apollo.canbus.Brake_aux_rpt_304 brake_aux_rpt_304 = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_aux_rpt_304_);
    }

    // optional .apollo.canbus.Media_controls_cmd_120 media_controls_cmd_120 = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_controls_cmd_120_);
    }

    // optional .apollo.canbus.Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cruise_control_buttons_cmd_108_);
    }

    // optional .apollo.canbus.Parking_brake_cmd_124 parking_brake_cmd_124 = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_brake_cmd_124_);
    }

    // optional .apollo.canbus.Horn_rpt_21c horn_rpt_21c = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *horn_rpt_21c_);
    }

    // optional .apollo.canbus.Shift_rpt_228 shift_rpt_228 = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shift_rpt_228_);
    }

    // optional .apollo.canbus.Shift_cmd_128 shift_cmd_128 = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shift_cmd_128_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Accel_cmd_100 accel_cmd_100 = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accel_cmd_100_);
    }

    // optional .apollo.canbus.Parking_brake_rpt_224 parking_brake_rpt_224 = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_brake_rpt_224_);
    }

    // optional .apollo.canbus.Brake_cmd_104 brake_cmd_104 = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_cmd_104_);
    }

    // optional .apollo.canbus.Media_controls_rpt_220 media_controls_rpt_220 = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *media_controls_rpt_220_);
    }

    // optional .apollo.canbus.Steering_aux_rpt_32c steering_aux_rpt_32c = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_aux_rpt_32c_);
    }

    // optional .apollo.canbus.Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_lon_heading_rpt_40e_);
    }

    // optional .apollo.canbus.Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yaw_rate_rpt_40d_);
    }

    // optional .apollo.canbus.Date_time_rpt_40f date_time_rpt_40f = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_time_rpt_40f_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.canbus.Vin_rpt_414 vin_rpt_414 = 49;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vin_rpt_414_);
    }

    // optional .apollo.canbus.Occupancy_rpt_415 occupancy_rpt_415 = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *occupancy_rpt_415_);
    }

    // optional .apollo.canbus.Interior_lights_rpt_416 interior_lights_rpt_416 = 51;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interior_lights_rpt_416_);
    }

    // optional .apollo.canbus.Turn_cmd_130 turn_cmd_130 = 52;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *turn_cmd_130_);
    }

    // optional .apollo.canbus.Detected_object_rpt_411 detected_object_rpt_411 = 53;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detected_object_rpt_411_);
    }

    // optional .apollo.canbus.Veh_specific_rpt_1_412 veh_specific_rpt_1_412 = 54;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *veh_specific_rpt_1_412_);
    }

    // optional .apollo.canbus.Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *veh_dynamics_rpt_413_);
    }

    // optional .apollo.canbus.Rear_lights_rpt_418 rear_lights_rpt_418 = 56;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rear_lights_rpt_418_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lexus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Lexus)
  GOOGLE_DCHECK_NE(&from, this);
  const Lexus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lexus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Lexus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Lexus)
    MergeFrom(*source);
  }
}

void Lexus::MergeFrom(const Lexus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Lexus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hazard_lights_rpt_214()->::apollo::canbus::Hazard_lights_rpt_214::MergeFrom(from._internal_hazard_lights_rpt_214());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_steering_cmd_12c()->::apollo::canbus::Steering_cmd_12c::MergeFrom(from._internal_steering_cmd_12c());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dash_controls_right_rpt_210()->::apollo::canbus::Dash_controls_right_rpt_210::MergeFrom(from._internal_dash_controls_right_rpt_210());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dash_controls_left_cmd_10c()->::apollo::canbus::Dash_controls_left_cmd_10c::MergeFrom(from._internal_dash_controls_left_cmd_10c());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_steering_rpt_22c()->::apollo::canbus::Steering_rpt_22c::MergeFrom(from._internal_steering_rpt_22c());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_turn_aux_rpt_330()->::apollo::canbus::Turn_aux_rpt_330::MergeFrom(from._internal_turn_aux_rpt_330());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_headlight_rpt_218()->::apollo::canbus::Headlight_rpt_218::MergeFrom(from._internal_headlight_rpt_218());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_hazard_lights_cmd_114()->::apollo::canbus::Hazard_lights_cmd_114::MergeFrom(from._internal_hazard_lights_cmd_114());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_dash_controls_left_rpt_20c()->::apollo::canbus::Dash_controls_left_rpt_20c::MergeFrom(from._internal_dash_controls_left_rpt_20c());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_headlight_aux_rpt_318()->::apollo::canbus::Headlight_aux_rpt_318::MergeFrom(from._internal_headlight_aux_rpt_318());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_dash_controls_right_cmd_110()->::apollo::canbus::Dash_controls_right_cmd_110::MergeFrom(from._internal_dash_controls_right_cmd_110());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_wiper_cmd_134()->::apollo::canbus::Wiper_cmd_134::MergeFrom(from._internal_wiper_cmd_134());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_wiper_rpt_234()->::apollo::canbus::Wiper_rpt_234::MergeFrom(from._internal_wiper_rpt_234());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_turn_rpt_230()->::apollo::canbus::Turn_rpt_230::MergeFrom(from._internal_turn_rpt_230());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_headlight_cmd_118()->::apollo::canbus::Headlight_cmd_118::MergeFrom(from._internal_headlight_cmd_118());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_door_rpt_417()->::apollo::canbus::Door_rpt_417::MergeFrom(from._internal_door_rpt_417());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_component_rpt_20()->::apollo::canbus::Component_rpt_20::MergeFrom(from._internal_component_rpt_20());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_wheel_speed_rpt_407()->::apollo::canbus::Wheel_speed_rpt_407::MergeFrom(from._internal_wheel_speed_rpt_407());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_steering_motor_rpt_3_406()->::apollo::canbus::Steering_motor_rpt_3_406::MergeFrom(from._internal_steering_motor_rpt_3_406());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_steering_motor_rpt_2_405()->::apollo::canbus::Steering_motor_rpt_2_405::MergeFrom(from._internal_steering_motor_rpt_2_405());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_steering_motor_rpt_1_404()->::apollo::canbus::Steering_motor_rpt_1_404::MergeFrom(from._internal_steering_motor_rpt_1_404());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_brake_motor_rpt_3_403()->::apollo::canbus::Brake_motor_rpt_3_403::MergeFrom(from._internal_brake_motor_rpt_3_403());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_brake_motor_rpt_2_402()->::apollo::canbus::Brake_motor_rpt_2_402::MergeFrom(from._internal_brake_motor_rpt_2_402());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_brake_motor_rpt_1_401()->::apollo::canbus::Brake_motor_rpt_1_401::MergeFrom(from._internal_brake_motor_rpt_1_401());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_wiper_aux_rpt_334()->::apollo::canbus::Wiper_aux_rpt_334::MergeFrom(from._internal_wiper_aux_rpt_334());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_shift_aux_rpt_328()->::apollo::canbus::Shift_aux_rpt_328::MergeFrom(from._internal_shift_aux_rpt_328());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_accel_rpt_200()->::apollo::canbus::Accel_rpt_200::MergeFrom(from._internal_accel_rpt_200());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_brake_rpt_204()->::apollo::canbus::Brake_rpt_204::MergeFrom(from._internal_brake_rpt_204());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_horn_cmd_11c()->::apollo::canbus::Horn_cmd_11c::MergeFrom(from._internal_horn_cmd_11c());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_global_rpt_10()->::apollo::canbus::Global_rpt_10::MergeFrom(from._internal_global_rpt_10());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_mutable_accel_aux_rpt_300()->::apollo::canbus::Accel_aux_rpt_300::MergeFrom(from._internal_accel_aux_rpt_300());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_mutable_cruise_control_buttons_rpt_208()->::apollo::canbus::Cruise_control_buttons_rpt_208::MergeFrom(from._internal_cruise_control_buttons_rpt_208());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vehicle_speed_rpt_400()->::apollo::canbus::Vehicle_speed_rpt_400::MergeFrom(from._internal_vehicle_speed_rpt_400());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_brake_aux_rpt_304()->::apollo::canbus::Brake_aux_rpt_304::MergeFrom(from._internal_brake_aux_rpt_304());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_media_controls_cmd_120()->::apollo::canbus::Media_controls_cmd_120::MergeFrom(from._internal_media_controls_cmd_120());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cruise_control_buttons_cmd_108()->::apollo::canbus::Cruise_control_buttons_cmd_108::MergeFrom(from._internal_cruise_control_buttons_cmd_108());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_parking_brake_cmd_124()->::apollo::canbus::Parking_brake_cmd_124::MergeFrom(from._internal_parking_brake_cmd_124());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_horn_rpt_21c()->::apollo::canbus::Horn_rpt_21c::MergeFrom(from._internal_horn_rpt_21c());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_shift_rpt_228()->::apollo::canbus::Shift_rpt_228::MergeFrom(from._internal_shift_rpt_228());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_shift_cmd_128()->::apollo::canbus::Shift_cmd_128::MergeFrom(from._internal_shift_cmd_128());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_accel_cmd_100()->::apollo::canbus::Accel_cmd_100::MergeFrom(from._internal_accel_cmd_100());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_parking_brake_rpt_224()->::apollo::canbus::Parking_brake_rpt_224::MergeFrom(from._internal_parking_brake_rpt_224());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_brake_cmd_104()->::apollo::canbus::Brake_cmd_104::MergeFrom(from._internal_brake_cmd_104());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_media_controls_rpt_220()->::apollo::canbus::Media_controls_rpt_220::MergeFrom(from._internal_media_controls_rpt_220());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_steering_aux_rpt_32c()->::apollo::canbus::Steering_aux_rpt_32c::MergeFrom(from._internal_steering_aux_rpt_32c());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_lat_lon_heading_rpt_40e()->::apollo::canbus::Lat_lon_heading_rpt_40e::MergeFrom(from._internal_lat_lon_heading_rpt_40e());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_yaw_rate_rpt_40d()->::apollo::canbus::Yaw_rate_rpt_40d::MergeFrom(from._internal_yaw_rate_rpt_40d());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_date_time_rpt_40f()->::apollo::canbus::Date_time_rpt_40f::MergeFrom(from._internal_date_time_rpt_40f());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_vin_rpt_414()->::apollo::canbus::Vin_rpt_414::MergeFrom(from._internal_vin_rpt_414());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_occupancy_rpt_415()->::apollo::canbus::Occupancy_rpt_415::MergeFrom(from._internal_occupancy_rpt_415());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_interior_lights_rpt_416()->::apollo::canbus::Interior_lights_rpt_416::MergeFrom(from._internal_interior_lights_rpt_416());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_turn_cmd_130()->::apollo::canbus::Turn_cmd_130::MergeFrom(from._internal_turn_cmd_130());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_detected_object_rpt_411()->::apollo::canbus::Detected_object_rpt_411::MergeFrom(from._internal_detected_object_rpt_411());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_veh_specific_rpt_1_412()->::apollo::canbus::Veh_specific_rpt_1_412::MergeFrom(from._internal_veh_specific_rpt_1_412());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_veh_dynamics_rpt_413()->::apollo::canbus::Veh_dynamics_rpt_413::MergeFrom(from._internal_veh_dynamics_rpt_413());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_rear_lights_rpt_418()->::apollo::canbus::Rear_lights_rpt_418::MergeFrom(from._internal_rear_lights_rpt_418());
    }
  }
}

void Lexus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Lexus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lexus::CopyFrom(const Lexus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Lexus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lexus::IsInitialized() const {
  return true;
}

void Lexus::InternalSwap(Lexus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(hazard_lights_rpt_214_, other->hazard_lights_rpt_214_);
  swap(steering_cmd_12c_, other->steering_cmd_12c_);
  swap(dash_controls_right_rpt_210_, other->dash_controls_right_rpt_210_);
  swap(dash_controls_left_cmd_10c_, other->dash_controls_left_cmd_10c_);
  swap(steering_rpt_22c_, other->steering_rpt_22c_);
  swap(turn_aux_rpt_330_, other->turn_aux_rpt_330_);
  swap(headlight_rpt_218_, other->headlight_rpt_218_);
  swap(hazard_lights_cmd_114_, other->hazard_lights_cmd_114_);
  swap(dash_controls_left_rpt_20c_, other->dash_controls_left_rpt_20c_);
  swap(headlight_aux_rpt_318_, other->headlight_aux_rpt_318_);
  swap(dash_controls_right_cmd_110_, other->dash_controls_right_cmd_110_);
  swap(wiper_cmd_134_, other->wiper_cmd_134_);
  swap(wiper_rpt_234_, other->wiper_rpt_234_);
  swap(turn_rpt_230_, other->turn_rpt_230_);
  swap(headlight_cmd_118_, other->headlight_cmd_118_);
  swap(door_rpt_417_, other->door_rpt_417_);
  swap(component_rpt_20_, other->component_rpt_20_);
  swap(wheel_speed_rpt_407_, other->wheel_speed_rpt_407_);
  swap(steering_motor_rpt_3_406_, other->steering_motor_rpt_3_406_);
  swap(steering_motor_rpt_2_405_, other->steering_motor_rpt_2_405_);
  swap(steering_motor_rpt_1_404_, other->steering_motor_rpt_1_404_);
  swap(brake_motor_rpt_3_403_, other->brake_motor_rpt_3_403_);
  swap(brake_motor_rpt_2_402_, other->brake_motor_rpt_2_402_);
  swap(brake_motor_rpt_1_401_, other->brake_motor_rpt_1_401_);
  swap(wiper_aux_rpt_334_, other->wiper_aux_rpt_334_);
  swap(shift_aux_rpt_328_, other->shift_aux_rpt_328_);
  swap(accel_rpt_200_, other->accel_rpt_200_);
  swap(brake_rpt_204_, other->brake_rpt_204_);
  swap(horn_cmd_11c_, other->horn_cmd_11c_);
  swap(global_rpt_10_, other->global_rpt_10_);
  swap(accel_aux_rpt_300_, other->accel_aux_rpt_300_);
  swap(cruise_control_buttons_rpt_208_, other->cruise_control_buttons_rpt_208_);
  swap(vehicle_speed_rpt_400_, other->vehicle_speed_rpt_400_);
  swap(brake_aux_rpt_304_, other->brake_aux_rpt_304_);
  swap(media_controls_cmd_120_, other->media_controls_cmd_120_);
  swap(cruise_control_buttons_cmd_108_, other->cruise_control_buttons_cmd_108_);
  swap(parking_brake_cmd_124_, other->parking_brake_cmd_124_);
  swap(horn_rpt_21c_, other->horn_rpt_21c_);
  swap(shift_rpt_228_, other->shift_rpt_228_);
  swap(shift_cmd_128_, other->shift_cmd_128_);
  swap(accel_cmd_100_, other->accel_cmd_100_);
  swap(parking_brake_rpt_224_, other->parking_brake_rpt_224_);
  swap(brake_cmd_104_, other->brake_cmd_104_);
  swap(media_controls_rpt_220_, other->media_controls_rpt_220_);
  swap(steering_aux_rpt_32c_, other->steering_aux_rpt_32c_);
  swap(lat_lon_heading_rpt_40e_, other->lat_lon_heading_rpt_40e_);
  swap(yaw_rate_rpt_40d_, other->yaw_rate_rpt_40d_);
  swap(date_time_rpt_40f_, other->date_time_rpt_40f_);
  swap(vin_rpt_414_, other->vin_rpt_414_);
  swap(occupancy_rpt_415_, other->occupancy_rpt_415_);
  swap(interior_lights_rpt_416_, other->interior_lights_rpt_416_);
  swap(turn_cmd_130_, other->turn_cmd_130_);
  swap(detected_object_rpt_411_, other->detected_object_rpt_411_);
  swap(veh_specific_rpt_1_412_, other->veh_specific_rpt_1_412_);
  swap(veh_dynamics_rpt_413_, other->veh_dynamics_rpt_413_);
  swap(rear_lights_rpt_418_, other->rear_lights_rpt_418_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lexus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Hazard_lights_rpt_214* Arena::CreateMaybeMessage< ::apollo::canbus::Hazard_lights_rpt_214 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Hazard_lights_rpt_214 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_cmd_12c* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_cmd_12c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_cmd_12c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Dash_controls_right_rpt_210* Arena::CreateMaybeMessage< ::apollo::canbus::Dash_controls_right_rpt_210 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Dash_controls_right_rpt_210 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Dash_controls_left_cmd_10c* Arena::CreateMaybeMessage< ::apollo::canbus::Dash_controls_left_cmd_10c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Dash_controls_left_cmd_10c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_rpt_22c* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_rpt_22c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_rpt_22c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_aux_rpt_330* Arena::CreateMaybeMessage< ::apollo::canbus::Turn_aux_rpt_330 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turn_aux_rpt_330 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_rpt_218* Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_rpt_218 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Headlight_rpt_218 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Hazard_lights_cmd_114* Arena::CreateMaybeMessage< ::apollo::canbus::Hazard_lights_cmd_114 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Hazard_lights_cmd_114 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Dash_controls_left_rpt_20c* Arena::CreateMaybeMessage< ::apollo::canbus::Dash_controls_left_rpt_20c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Dash_controls_left_rpt_20c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_aux_rpt_318* Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_aux_rpt_318 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Headlight_aux_rpt_318 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Dash_controls_right_cmd_110* Arena::CreateMaybeMessage< ::apollo::canbus::Dash_controls_right_cmd_110 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Dash_controls_right_cmd_110 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_cmd_134* Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_cmd_134 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wiper_cmd_134 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_rpt_234* Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_rpt_234 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wiper_rpt_234 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_rpt_230* Arena::CreateMaybeMessage< ::apollo::canbus::Turn_rpt_230 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turn_rpt_230 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_cmd_118* Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_cmd_118 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Headlight_cmd_118 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Door_rpt_417* Arena::CreateMaybeMessage< ::apollo::canbus::Door_rpt_417 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Door_rpt_417 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Component_rpt_20* Arena::CreateMaybeMessage< ::apollo::canbus::Component_rpt_20 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Component_rpt_20 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wheel_speed_rpt_407* Arena::CreateMaybeMessage< ::apollo::canbus::Wheel_speed_rpt_407 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wheel_speed_rpt_407 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_3_406* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_3_406 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_3_406 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_2_405* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_2_405 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_2_405 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_1_404* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_1_404 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_1_404 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_3_403* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_3_403 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_3_403 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_2_402* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_2_402 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_2_402 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_1_401* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_1_401 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_1_401 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_aux_rpt_334* Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_aux_rpt_334 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wiper_aux_rpt_334 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_aux_rpt_328* Arena::CreateMaybeMessage< ::apollo::canbus::Shift_aux_rpt_328 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Shift_aux_rpt_328 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_rpt_200* Arena::CreateMaybeMessage< ::apollo::canbus::Accel_rpt_200 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Accel_rpt_200 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_rpt_204* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_rpt_204 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_rpt_204 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Horn_cmd_11c* Arena::CreateMaybeMessage< ::apollo::canbus::Horn_cmd_11c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Horn_cmd_11c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Global_rpt_10* Arena::CreateMaybeMessage< ::apollo::canbus::Global_rpt_10 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Global_rpt_10 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_aux_rpt_300* Arena::CreateMaybeMessage< ::apollo::canbus::Accel_aux_rpt_300 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Accel_aux_rpt_300 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Cruise_control_buttons_rpt_208* Arena::CreateMaybeMessage< ::apollo::canbus::Cruise_control_buttons_rpt_208 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Cruise_control_buttons_rpt_208 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vehicle_speed_rpt_400* Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_speed_rpt_400 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Vehicle_speed_rpt_400 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_aux_rpt_304* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_aux_rpt_304 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_aux_rpt_304 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Media_controls_cmd_120* Arena::CreateMaybeMessage< ::apollo::canbus::Media_controls_cmd_120 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Media_controls_cmd_120 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Cruise_control_buttons_cmd_108* Arena::CreateMaybeMessage< ::apollo::canbus::Cruise_control_buttons_cmd_108 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Cruise_control_buttons_cmd_108 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Parking_brake_cmd_124* Arena::CreateMaybeMessage< ::apollo::canbus::Parking_brake_cmd_124 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Parking_brake_cmd_124 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Horn_rpt_21c* Arena::CreateMaybeMessage< ::apollo::canbus::Horn_rpt_21c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Horn_rpt_21c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_rpt_228* Arena::CreateMaybeMessage< ::apollo::canbus::Shift_rpt_228 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Shift_rpt_228 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_cmd_128* Arena::CreateMaybeMessage< ::apollo::canbus::Shift_cmd_128 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Shift_cmd_128 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_cmd_100* Arena::CreateMaybeMessage< ::apollo::canbus::Accel_cmd_100 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Accel_cmd_100 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Parking_brake_rpt_224* Arena::CreateMaybeMessage< ::apollo::canbus::Parking_brake_rpt_224 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Parking_brake_rpt_224 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_cmd_104* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_cmd_104 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_cmd_104 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Media_controls_rpt_220* Arena::CreateMaybeMessage< ::apollo::canbus::Media_controls_rpt_220 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Media_controls_rpt_220 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_aux_rpt_32c* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_aux_rpt_32c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_aux_rpt_32c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Lat_lon_heading_rpt_40e* Arena::CreateMaybeMessage< ::apollo::canbus::Lat_lon_heading_rpt_40e >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Lat_lon_heading_rpt_40e >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Yaw_rate_rpt_40d* Arena::CreateMaybeMessage< ::apollo::canbus::Yaw_rate_rpt_40d >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Yaw_rate_rpt_40d >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Date_time_rpt_40f* Arena::CreateMaybeMessage< ::apollo::canbus::Date_time_rpt_40f >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Date_time_rpt_40f >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vin_rpt_414* Arena::CreateMaybeMessage< ::apollo::canbus::Vin_rpt_414 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Vin_rpt_414 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Occupancy_rpt_415* Arena::CreateMaybeMessage< ::apollo::canbus::Occupancy_rpt_415 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Occupancy_rpt_415 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Interior_lights_rpt_416* Arena::CreateMaybeMessage< ::apollo::canbus::Interior_lights_rpt_416 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Interior_lights_rpt_416 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_cmd_130* Arena::CreateMaybeMessage< ::apollo::canbus::Turn_cmd_130 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turn_cmd_130 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Detected_object_rpt_411* Arena::CreateMaybeMessage< ::apollo::canbus::Detected_object_rpt_411 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Detected_object_rpt_411 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Veh_specific_rpt_1_412* Arena::CreateMaybeMessage< ::apollo::canbus::Veh_specific_rpt_1_412 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Veh_specific_rpt_1_412 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Veh_dynamics_rpt_413* Arena::CreateMaybeMessage< ::apollo::canbus::Veh_dynamics_rpt_413 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Veh_dynamics_rpt_413 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Rear_lights_rpt_418* Arena::CreateMaybeMessage< ::apollo::canbus::Rear_lights_rpt_418 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Rear_lights_rpt_418 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Lexus* Arena::CreateMaybeMessage< ::apollo::canbus::Lexus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Lexus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
