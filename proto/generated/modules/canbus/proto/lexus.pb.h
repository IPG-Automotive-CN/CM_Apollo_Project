// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/lexus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2flexus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2flexus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[57]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto;
namespace apollo {
namespace canbus {
class Accel_aux_rpt_300;
class Accel_aux_rpt_300DefaultTypeInternal;
extern Accel_aux_rpt_300DefaultTypeInternal _Accel_aux_rpt_300_default_instance_;
class Accel_cmd_100;
class Accel_cmd_100DefaultTypeInternal;
extern Accel_cmd_100DefaultTypeInternal _Accel_cmd_100_default_instance_;
class Accel_rpt_200;
class Accel_rpt_200DefaultTypeInternal;
extern Accel_rpt_200DefaultTypeInternal _Accel_rpt_200_default_instance_;
class Brake_aux_rpt_304;
class Brake_aux_rpt_304DefaultTypeInternal;
extern Brake_aux_rpt_304DefaultTypeInternal _Brake_aux_rpt_304_default_instance_;
class Brake_cmd_104;
class Brake_cmd_104DefaultTypeInternal;
extern Brake_cmd_104DefaultTypeInternal _Brake_cmd_104_default_instance_;
class Brake_motor_rpt_1_401;
class Brake_motor_rpt_1_401DefaultTypeInternal;
extern Brake_motor_rpt_1_401DefaultTypeInternal _Brake_motor_rpt_1_401_default_instance_;
class Brake_motor_rpt_2_402;
class Brake_motor_rpt_2_402DefaultTypeInternal;
extern Brake_motor_rpt_2_402DefaultTypeInternal _Brake_motor_rpt_2_402_default_instance_;
class Brake_motor_rpt_3_403;
class Brake_motor_rpt_3_403DefaultTypeInternal;
extern Brake_motor_rpt_3_403DefaultTypeInternal _Brake_motor_rpt_3_403_default_instance_;
class Brake_rpt_204;
class Brake_rpt_204DefaultTypeInternal;
extern Brake_rpt_204DefaultTypeInternal _Brake_rpt_204_default_instance_;
class Component_rpt_20;
class Component_rpt_20DefaultTypeInternal;
extern Component_rpt_20DefaultTypeInternal _Component_rpt_20_default_instance_;
class Cruise_control_buttons_cmd_108;
class Cruise_control_buttons_cmd_108DefaultTypeInternal;
extern Cruise_control_buttons_cmd_108DefaultTypeInternal _Cruise_control_buttons_cmd_108_default_instance_;
class Cruise_control_buttons_rpt_208;
class Cruise_control_buttons_rpt_208DefaultTypeInternal;
extern Cruise_control_buttons_rpt_208DefaultTypeInternal _Cruise_control_buttons_rpt_208_default_instance_;
class Dash_controls_left_cmd_10c;
class Dash_controls_left_cmd_10cDefaultTypeInternal;
extern Dash_controls_left_cmd_10cDefaultTypeInternal _Dash_controls_left_cmd_10c_default_instance_;
class Dash_controls_left_rpt_20c;
class Dash_controls_left_rpt_20cDefaultTypeInternal;
extern Dash_controls_left_rpt_20cDefaultTypeInternal _Dash_controls_left_rpt_20c_default_instance_;
class Dash_controls_right_cmd_110;
class Dash_controls_right_cmd_110DefaultTypeInternal;
extern Dash_controls_right_cmd_110DefaultTypeInternal _Dash_controls_right_cmd_110_default_instance_;
class Dash_controls_right_rpt_210;
class Dash_controls_right_rpt_210DefaultTypeInternal;
extern Dash_controls_right_rpt_210DefaultTypeInternal _Dash_controls_right_rpt_210_default_instance_;
class Date_time_rpt_40f;
class Date_time_rpt_40fDefaultTypeInternal;
extern Date_time_rpt_40fDefaultTypeInternal _Date_time_rpt_40f_default_instance_;
class Detected_object_rpt_411;
class Detected_object_rpt_411DefaultTypeInternal;
extern Detected_object_rpt_411DefaultTypeInternal _Detected_object_rpt_411_default_instance_;
class Door_rpt_417;
class Door_rpt_417DefaultTypeInternal;
extern Door_rpt_417DefaultTypeInternal _Door_rpt_417_default_instance_;
class Global_rpt_10;
class Global_rpt_10DefaultTypeInternal;
extern Global_rpt_10DefaultTypeInternal _Global_rpt_10_default_instance_;
class Hazard_lights_cmd_114;
class Hazard_lights_cmd_114DefaultTypeInternal;
extern Hazard_lights_cmd_114DefaultTypeInternal _Hazard_lights_cmd_114_default_instance_;
class Hazard_lights_rpt_214;
class Hazard_lights_rpt_214DefaultTypeInternal;
extern Hazard_lights_rpt_214DefaultTypeInternal _Hazard_lights_rpt_214_default_instance_;
class Headlight_aux_rpt_318;
class Headlight_aux_rpt_318DefaultTypeInternal;
extern Headlight_aux_rpt_318DefaultTypeInternal _Headlight_aux_rpt_318_default_instance_;
class Headlight_cmd_118;
class Headlight_cmd_118DefaultTypeInternal;
extern Headlight_cmd_118DefaultTypeInternal _Headlight_cmd_118_default_instance_;
class Headlight_rpt_218;
class Headlight_rpt_218DefaultTypeInternal;
extern Headlight_rpt_218DefaultTypeInternal _Headlight_rpt_218_default_instance_;
class Horn_cmd_11c;
class Horn_cmd_11cDefaultTypeInternal;
extern Horn_cmd_11cDefaultTypeInternal _Horn_cmd_11c_default_instance_;
class Horn_rpt_21c;
class Horn_rpt_21cDefaultTypeInternal;
extern Horn_rpt_21cDefaultTypeInternal _Horn_rpt_21c_default_instance_;
class Interior_lights_rpt_416;
class Interior_lights_rpt_416DefaultTypeInternal;
extern Interior_lights_rpt_416DefaultTypeInternal _Interior_lights_rpt_416_default_instance_;
class Lat_lon_heading_rpt_40e;
class Lat_lon_heading_rpt_40eDefaultTypeInternal;
extern Lat_lon_heading_rpt_40eDefaultTypeInternal _Lat_lon_heading_rpt_40e_default_instance_;
class Lexus;
class LexusDefaultTypeInternal;
extern LexusDefaultTypeInternal _Lexus_default_instance_;
class Media_controls_cmd_120;
class Media_controls_cmd_120DefaultTypeInternal;
extern Media_controls_cmd_120DefaultTypeInternal _Media_controls_cmd_120_default_instance_;
class Media_controls_rpt_220;
class Media_controls_rpt_220DefaultTypeInternal;
extern Media_controls_rpt_220DefaultTypeInternal _Media_controls_rpt_220_default_instance_;
class Occupancy_rpt_415;
class Occupancy_rpt_415DefaultTypeInternal;
extern Occupancy_rpt_415DefaultTypeInternal _Occupancy_rpt_415_default_instance_;
class Parking_brake_cmd_124;
class Parking_brake_cmd_124DefaultTypeInternal;
extern Parking_brake_cmd_124DefaultTypeInternal _Parking_brake_cmd_124_default_instance_;
class Parking_brake_rpt_224;
class Parking_brake_rpt_224DefaultTypeInternal;
extern Parking_brake_rpt_224DefaultTypeInternal _Parking_brake_rpt_224_default_instance_;
class Rear_lights_rpt_418;
class Rear_lights_rpt_418DefaultTypeInternal;
extern Rear_lights_rpt_418DefaultTypeInternal _Rear_lights_rpt_418_default_instance_;
class Shift_aux_rpt_328;
class Shift_aux_rpt_328DefaultTypeInternal;
extern Shift_aux_rpt_328DefaultTypeInternal _Shift_aux_rpt_328_default_instance_;
class Shift_cmd_128;
class Shift_cmd_128DefaultTypeInternal;
extern Shift_cmd_128DefaultTypeInternal _Shift_cmd_128_default_instance_;
class Shift_rpt_228;
class Shift_rpt_228DefaultTypeInternal;
extern Shift_rpt_228DefaultTypeInternal _Shift_rpt_228_default_instance_;
class Steering_aux_rpt_32c;
class Steering_aux_rpt_32cDefaultTypeInternal;
extern Steering_aux_rpt_32cDefaultTypeInternal _Steering_aux_rpt_32c_default_instance_;
class Steering_cmd_12c;
class Steering_cmd_12cDefaultTypeInternal;
extern Steering_cmd_12cDefaultTypeInternal _Steering_cmd_12c_default_instance_;
class Steering_motor_rpt_1_404;
class Steering_motor_rpt_1_404DefaultTypeInternal;
extern Steering_motor_rpt_1_404DefaultTypeInternal _Steering_motor_rpt_1_404_default_instance_;
class Steering_motor_rpt_2_405;
class Steering_motor_rpt_2_405DefaultTypeInternal;
extern Steering_motor_rpt_2_405DefaultTypeInternal _Steering_motor_rpt_2_405_default_instance_;
class Steering_motor_rpt_3_406;
class Steering_motor_rpt_3_406DefaultTypeInternal;
extern Steering_motor_rpt_3_406DefaultTypeInternal _Steering_motor_rpt_3_406_default_instance_;
class Steering_rpt_22c;
class Steering_rpt_22cDefaultTypeInternal;
extern Steering_rpt_22cDefaultTypeInternal _Steering_rpt_22c_default_instance_;
class Turn_aux_rpt_330;
class Turn_aux_rpt_330DefaultTypeInternal;
extern Turn_aux_rpt_330DefaultTypeInternal _Turn_aux_rpt_330_default_instance_;
class Turn_cmd_130;
class Turn_cmd_130DefaultTypeInternal;
extern Turn_cmd_130DefaultTypeInternal _Turn_cmd_130_default_instance_;
class Turn_rpt_230;
class Turn_rpt_230DefaultTypeInternal;
extern Turn_rpt_230DefaultTypeInternal _Turn_rpt_230_default_instance_;
class Veh_dynamics_rpt_413;
class Veh_dynamics_rpt_413DefaultTypeInternal;
extern Veh_dynamics_rpt_413DefaultTypeInternal _Veh_dynamics_rpt_413_default_instance_;
class Veh_specific_rpt_1_412;
class Veh_specific_rpt_1_412DefaultTypeInternal;
extern Veh_specific_rpt_1_412DefaultTypeInternal _Veh_specific_rpt_1_412_default_instance_;
class Vehicle_speed_rpt_400;
class Vehicle_speed_rpt_400DefaultTypeInternal;
extern Vehicle_speed_rpt_400DefaultTypeInternal _Vehicle_speed_rpt_400_default_instance_;
class Vin_rpt_414;
class Vin_rpt_414DefaultTypeInternal;
extern Vin_rpt_414DefaultTypeInternal _Vin_rpt_414_default_instance_;
class Wheel_speed_rpt_407;
class Wheel_speed_rpt_407DefaultTypeInternal;
extern Wheel_speed_rpt_407DefaultTypeInternal _Wheel_speed_rpt_407_default_instance_;
class Wiper_aux_rpt_334;
class Wiper_aux_rpt_334DefaultTypeInternal;
extern Wiper_aux_rpt_334DefaultTypeInternal _Wiper_aux_rpt_334_default_instance_;
class Wiper_cmd_134;
class Wiper_cmd_134DefaultTypeInternal;
extern Wiper_cmd_134DefaultTypeInternal _Wiper_cmd_134_default_instance_;
class Wiper_rpt_234;
class Wiper_rpt_234DefaultTypeInternal;
extern Wiper_rpt_234DefaultTypeInternal _Wiper_rpt_234_default_instance_;
class Yaw_rate_rpt_40d;
class Yaw_rate_rpt_40dDefaultTypeInternal;
extern Yaw_rate_rpt_40dDefaultTypeInternal _Yaw_rate_rpt_40d_default_instance_;
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::canbus::Accel_aux_rpt_300* Arena::CreateMaybeMessage<::apollo::canbus::Accel_aux_rpt_300>(Arena*);
template<> ::apollo::canbus::Accel_cmd_100* Arena::CreateMaybeMessage<::apollo::canbus::Accel_cmd_100>(Arena*);
template<> ::apollo::canbus::Accel_rpt_200* Arena::CreateMaybeMessage<::apollo::canbus::Accel_rpt_200>(Arena*);
template<> ::apollo::canbus::Brake_aux_rpt_304* Arena::CreateMaybeMessage<::apollo::canbus::Brake_aux_rpt_304>(Arena*);
template<> ::apollo::canbus::Brake_cmd_104* Arena::CreateMaybeMessage<::apollo::canbus::Brake_cmd_104>(Arena*);
template<> ::apollo::canbus::Brake_motor_rpt_1_401* Arena::CreateMaybeMessage<::apollo::canbus::Brake_motor_rpt_1_401>(Arena*);
template<> ::apollo::canbus::Brake_motor_rpt_2_402* Arena::CreateMaybeMessage<::apollo::canbus::Brake_motor_rpt_2_402>(Arena*);
template<> ::apollo::canbus::Brake_motor_rpt_3_403* Arena::CreateMaybeMessage<::apollo::canbus::Brake_motor_rpt_3_403>(Arena*);
template<> ::apollo::canbus::Brake_rpt_204* Arena::CreateMaybeMessage<::apollo::canbus::Brake_rpt_204>(Arena*);
template<> ::apollo::canbus::Component_rpt_20* Arena::CreateMaybeMessage<::apollo::canbus::Component_rpt_20>(Arena*);
template<> ::apollo::canbus::Cruise_control_buttons_cmd_108* Arena::CreateMaybeMessage<::apollo::canbus::Cruise_control_buttons_cmd_108>(Arena*);
template<> ::apollo::canbus::Cruise_control_buttons_rpt_208* Arena::CreateMaybeMessage<::apollo::canbus::Cruise_control_buttons_rpt_208>(Arena*);
template<> ::apollo::canbus::Dash_controls_left_cmd_10c* Arena::CreateMaybeMessage<::apollo::canbus::Dash_controls_left_cmd_10c>(Arena*);
template<> ::apollo::canbus::Dash_controls_left_rpt_20c* Arena::CreateMaybeMessage<::apollo::canbus::Dash_controls_left_rpt_20c>(Arena*);
template<> ::apollo::canbus::Dash_controls_right_cmd_110* Arena::CreateMaybeMessage<::apollo::canbus::Dash_controls_right_cmd_110>(Arena*);
template<> ::apollo::canbus::Dash_controls_right_rpt_210* Arena::CreateMaybeMessage<::apollo::canbus::Dash_controls_right_rpt_210>(Arena*);
template<> ::apollo::canbus::Date_time_rpt_40f* Arena::CreateMaybeMessage<::apollo::canbus::Date_time_rpt_40f>(Arena*);
template<> ::apollo::canbus::Detected_object_rpt_411* Arena::CreateMaybeMessage<::apollo::canbus::Detected_object_rpt_411>(Arena*);
template<> ::apollo::canbus::Door_rpt_417* Arena::CreateMaybeMessage<::apollo::canbus::Door_rpt_417>(Arena*);
template<> ::apollo::canbus::Global_rpt_10* Arena::CreateMaybeMessage<::apollo::canbus::Global_rpt_10>(Arena*);
template<> ::apollo::canbus::Hazard_lights_cmd_114* Arena::CreateMaybeMessage<::apollo::canbus::Hazard_lights_cmd_114>(Arena*);
template<> ::apollo::canbus::Hazard_lights_rpt_214* Arena::CreateMaybeMessage<::apollo::canbus::Hazard_lights_rpt_214>(Arena*);
template<> ::apollo::canbus::Headlight_aux_rpt_318* Arena::CreateMaybeMessage<::apollo::canbus::Headlight_aux_rpt_318>(Arena*);
template<> ::apollo::canbus::Headlight_cmd_118* Arena::CreateMaybeMessage<::apollo::canbus::Headlight_cmd_118>(Arena*);
template<> ::apollo::canbus::Headlight_rpt_218* Arena::CreateMaybeMessage<::apollo::canbus::Headlight_rpt_218>(Arena*);
template<> ::apollo::canbus::Horn_cmd_11c* Arena::CreateMaybeMessage<::apollo::canbus::Horn_cmd_11c>(Arena*);
template<> ::apollo::canbus::Horn_rpt_21c* Arena::CreateMaybeMessage<::apollo::canbus::Horn_rpt_21c>(Arena*);
template<> ::apollo::canbus::Interior_lights_rpt_416* Arena::CreateMaybeMessage<::apollo::canbus::Interior_lights_rpt_416>(Arena*);
template<> ::apollo::canbus::Lat_lon_heading_rpt_40e* Arena::CreateMaybeMessage<::apollo::canbus::Lat_lon_heading_rpt_40e>(Arena*);
template<> ::apollo::canbus::Lexus* Arena::CreateMaybeMessage<::apollo::canbus::Lexus>(Arena*);
template<> ::apollo::canbus::Media_controls_cmd_120* Arena::CreateMaybeMessage<::apollo::canbus::Media_controls_cmd_120>(Arena*);
template<> ::apollo::canbus::Media_controls_rpt_220* Arena::CreateMaybeMessage<::apollo::canbus::Media_controls_rpt_220>(Arena*);
template<> ::apollo::canbus::Occupancy_rpt_415* Arena::CreateMaybeMessage<::apollo::canbus::Occupancy_rpt_415>(Arena*);
template<> ::apollo::canbus::Parking_brake_cmd_124* Arena::CreateMaybeMessage<::apollo::canbus::Parking_brake_cmd_124>(Arena*);
template<> ::apollo::canbus::Parking_brake_rpt_224* Arena::CreateMaybeMessage<::apollo::canbus::Parking_brake_rpt_224>(Arena*);
template<> ::apollo::canbus::Rear_lights_rpt_418* Arena::CreateMaybeMessage<::apollo::canbus::Rear_lights_rpt_418>(Arena*);
template<> ::apollo::canbus::Shift_aux_rpt_328* Arena::CreateMaybeMessage<::apollo::canbus::Shift_aux_rpt_328>(Arena*);
template<> ::apollo::canbus::Shift_cmd_128* Arena::CreateMaybeMessage<::apollo::canbus::Shift_cmd_128>(Arena*);
template<> ::apollo::canbus::Shift_rpt_228* Arena::CreateMaybeMessage<::apollo::canbus::Shift_rpt_228>(Arena*);
template<> ::apollo::canbus::Steering_aux_rpt_32c* Arena::CreateMaybeMessage<::apollo::canbus::Steering_aux_rpt_32c>(Arena*);
template<> ::apollo::canbus::Steering_cmd_12c* Arena::CreateMaybeMessage<::apollo::canbus::Steering_cmd_12c>(Arena*);
template<> ::apollo::canbus::Steering_motor_rpt_1_404* Arena::CreateMaybeMessage<::apollo::canbus::Steering_motor_rpt_1_404>(Arena*);
template<> ::apollo::canbus::Steering_motor_rpt_2_405* Arena::CreateMaybeMessage<::apollo::canbus::Steering_motor_rpt_2_405>(Arena*);
template<> ::apollo::canbus::Steering_motor_rpt_3_406* Arena::CreateMaybeMessage<::apollo::canbus::Steering_motor_rpt_3_406>(Arena*);
template<> ::apollo::canbus::Steering_rpt_22c* Arena::CreateMaybeMessage<::apollo::canbus::Steering_rpt_22c>(Arena*);
template<> ::apollo::canbus::Turn_aux_rpt_330* Arena::CreateMaybeMessage<::apollo::canbus::Turn_aux_rpt_330>(Arena*);
template<> ::apollo::canbus::Turn_cmd_130* Arena::CreateMaybeMessage<::apollo::canbus::Turn_cmd_130>(Arena*);
template<> ::apollo::canbus::Turn_rpt_230* Arena::CreateMaybeMessage<::apollo::canbus::Turn_rpt_230>(Arena*);
template<> ::apollo::canbus::Veh_dynamics_rpt_413* Arena::CreateMaybeMessage<::apollo::canbus::Veh_dynamics_rpt_413>(Arena*);
template<> ::apollo::canbus::Veh_specific_rpt_1_412* Arena::CreateMaybeMessage<::apollo::canbus::Veh_specific_rpt_1_412>(Arena*);
template<> ::apollo::canbus::Vehicle_speed_rpt_400* Arena::CreateMaybeMessage<::apollo::canbus::Vehicle_speed_rpt_400>(Arena*);
template<> ::apollo::canbus::Vin_rpt_414* Arena::CreateMaybeMessage<::apollo::canbus::Vin_rpt_414>(Arena*);
template<> ::apollo::canbus::Wheel_speed_rpt_407* Arena::CreateMaybeMessage<::apollo::canbus::Wheel_speed_rpt_407>(Arena*);
template<> ::apollo::canbus::Wiper_aux_rpt_334* Arena::CreateMaybeMessage<::apollo::canbus::Wiper_aux_rpt_334>(Arena*);
template<> ::apollo::canbus::Wiper_cmd_134* Arena::CreateMaybeMessage<::apollo::canbus::Wiper_cmd_134>(Arena*);
template<> ::apollo::canbus::Wiper_rpt_234* Arena::CreateMaybeMessage<::apollo::canbus::Wiper_rpt_234>(Arena*);
template<> ::apollo::canbus::Yaw_rate_rpt_40d* Arena::CreateMaybeMessage<::apollo::canbus::Yaw_rate_rpt_40d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace canbus {

enum Dash_controls_right_rpt_210_Output_valueType : int {
  Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_NONE = 0,
  Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_OK = 1,
  Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_LEFT = 2,
  Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_RIGHT = 3,
  Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_UP = 4,
  Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_DOWN = 5
};
bool Dash_controls_right_rpt_210_Output_valueType_IsValid(int value);
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210_Output_valueType_Output_valueType_MIN = Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210_Output_valueType_Output_valueType_MAX = Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_DOWN;
constexpr int Dash_controls_right_rpt_210_Output_valueType_Output_valueType_ARRAYSIZE = Dash_controls_right_rpt_210_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Output_valueType_descriptor();
template<typename T>
inline const std::string& Dash_controls_right_rpt_210_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dash_controls_right_rpt_210_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dash_controls_right_rpt_210_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dash_controls_right_rpt_210_Output_valueType_descriptor(), enum_t_value);
}
inline bool Dash_controls_right_rpt_210_Output_valueType_Parse(
    const std::string& name, Dash_controls_right_rpt_210_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dash_controls_right_rpt_210_Output_valueType>(
    Dash_controls_right_rpt_210_Output_valueType_descriptor(), name, value);
}
enum Dash_controls_right_rpt_210_Commanded_valueType : int {
  Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_NONE = 0,
  Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_OK = 1,
  Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_LEFT = 2,
  Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_RIGHT = 3,
  Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_UP = 4,
  Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_DOWN = 5
};
bool Dash_controls_right_rpt_210_Commanded_valueType_IsValid(int value);
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210_Commanded_valueType_Commanded_valueType_MIN = Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210_Commanded_valueType_Commanded_valueType_MAX = Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_DOWN;
constexpr int Dash_controls_right_rpt_210_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Dash_controls_right_rpt_210_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Dash_controls_right_rpt_210_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dash_controls_right_rpt_210_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dash_controls_right_rpt_210_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dash_controls_right_rpt_210_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Dash_controls_right_rpt_210_Commanded_valueType_Parse(
    const std::string& name, Dash_controls_right_rpt_210_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dash_controls_right_rpt_210_Commanded_valueType>(
    Dash_controls_right_rpt_210_Commanded_valueType_descriptor(), name, value);
}
enum Dash_controls_right_rpt_210_Manual_inputType : int {
  Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_NONE = 0,
  Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_OK = 1,
  Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_LEFT = 2,
  Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_RIGHT = 3,
  Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_UP = 4,
  Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_DOWN = 5
};
bool Dash_controls_right_rpt_210_Manual_inputType_IsValid(int value);
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210_Manual_inputType_Manual_inputType_MIN = Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_NONE;
constexpr Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210_Manual_inputType_Manual_inputType_MAX = Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_DOWN;
constexpr int Dash_controls_right_rpt_210_Manual_inputType_Manual_inputType_ARRAYSIZE = Dash_controls_right_rpt_210_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_rpt_210_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Dash_controls_right_rpt_210_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dash_controls_right_rpt_210_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dash_controls_right_rpt_210_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dash_controls_right_rpt_210_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Dash_controls_right_rpt_210_Manual_inputType_Parse(
    const std::string& name, Dash_controls_right_rpt_210_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dash_controls_right_rpt_210_Manual_inputType>(
    Dash_controls_right_rpt_210_Manual_inputType_descriptor(), name, value);
}
enum Dash_controls_left_cmd_10c_Dash_controls_buttonType : int {
  Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE = 0,
  Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_OK = 1,
  Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT = 2,
  Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT = 3,
  Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_UP = 4,
  Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN = 5
};
bool Dash_controls_left_cmd_10c_Dash_controls_buttonType_IsValid(int value);
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c_Dash_controls_buttonType_Dash_controls_buttonType_MIN = Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE;
constexpr Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c_Dash_controls_buttonType_Dash_controls_buttonType_MAX = Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN;
constexpr int Dash_controls_left_cmd_10c_Dash_controls_buttonType_Dash_controls_buttonType_ARRAYSIZE = Dash_controls_left_cmd_10c_Dash_controls_buttonType_Dash_controls_buttonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_cmd_10c_Dash_controls_buttonType_descriptor();
template<typename T>
inline const std::string& Dash_controls_left_cmd_10c_Dash_controls_buttonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dash_controls_left_cmd_10c_Dash_controls_buttonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dash_controls_left_cmd_10c_Dash_controls_buttonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_descriptor(), enum_t_value);
}
inline bool Dash_controls_left_cmd_10c_Dash_controls_buttonType_Parse(
    const std::string& name, Dash_controls_left_cmd_10c_Dash_controls_buttonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dash_controls_left_cmd_10c_Dash_controls_buttonType>(
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_descriptor(), name, value);
}
enum Headlight_rpt_218_Output_valueType : int {
  Headlight_rpt_218_Output_valueType_OUTPUT_VALUE_HEADLIGHTS_OFF = 0,
  Headlight_rpt_218_Output_valueType_OUTPUT_VALUE_LOW_BEAMS = 1,
  Headlight_rpt_218_Output_valueType_OUTPUT_VALUE_HIGH_BEAMS = 2
};
bool Headlight_rpt_218_Output_valueType_IsValid(int value);
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218_Output_valueType_Output_valueType_MIN = Headlight_rpt_218_Output_valueType_OUTPUT_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Output_valueType Headlight_rpt_218_Output_valueType_Output_valueType_MAX = Headlight_rpt_218_Output_valueType_OUTPUT_VALUE_HIGH_BEAMS;
constexpr int Headlight_rpt_218_Output_valueType_Output_valueType_ARRAYSIZE = Headlight_rpt_218_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Output_valueType_descriptor();
template<typename T>
inline const std::string& Headlight_rpt_218_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Headlight_rpt_218_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Headlight_rpt_218_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Headlight_rpt_218_Output_valueType_descriptor(), enum_t_value);
}
inline bool Headlight_rpt_218_Output_valueType_Parse(
    const std::string& name, Headlight_rpt_218_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Headlight_rpt_218_Output_valueType>(
    Headlight_rpt_218_Output_valueType_descriptor(), name, value);
}
enum Headlight_rpt_218_Manual_inputType : int {
  Headlight_rpt_218_Manual_inputType_MANUAL_INPUT_HEADLIGHTS_OFF = 0,
  Headlight_rpt_218_Manual_inputType_MANUAL_INPUT_LOW_BEAMS = 1,
  Headlight_rpt_218_Manual_inputType_MANUAL_INPUT_HIGH_BEAMS = 2
};
bool Headlight_rpt_218_Manual_inputType_IsValid(int value);
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218_Manual_inputType_Manual_inputType_MIN = Headlight_rpt_218_Manual_inputType_MANUAL_INPUT_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Manual_inputType Headlight_rpt_218_Manual_inputType_Manual_inputType_MAX = Headlight_rpt_218_Manual_inputType_MANUAL_INPUT_HIGH_BEAMS;
constexpr int Headlight_rpt_218_Manual_inputType_Manual_inputType_ARRAYSIZE = Headlight_rpt_218_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Headlight_rpt_218_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Headlight_rpt_218_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Headlight_rpt_218_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Headlight_rpt_218_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Headlight_rpt_218_Manual_inputType_Parse(
    const std::string& name, Headlight_rpt_218_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Headlight_rpt_218_Manual_inputType>(
    Headlight_rpt_218_Manual_inputType_descriptor(), name, value);
}
enum Headlight_rpt_218_Commanded_valueType : int {
  Headlight_rpt_218_Commanded_valueType_COMMANDED_VALUE_HEADLIGHTS_OFF = 0,
  Headlight_rpt_218_Commanded_valueType_COMMANDED_VALUE_LOW_BEAMS = 1,
  Headlight_rpt_218_Commanded_valueType_COMMANDED_VALUE_HIGH_BEAMS = 2
};
bool Headlight_rpt_218_Commanded_valueType_IsValid(int value);
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218_Commanded_valueType_Commanded_valueType_MIN = Headlight_rpt_218_Commanded_valueType_COMMANDED_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_218_Commanded_valueType Headlight_rpt_218_Commanded_valueType_Commanded_valueType_MAX = Headlight_rpt_218_Commanded_valueType_COMMANDED_VALUE_HIGH_BEAMS;
constexpr int Headlight_rpt_218_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Headlight_rpt_218_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_218_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Headlight_rpt_218_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Headlight_rpt_218_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Headlight_rpt_218_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Headlight_rpt_218_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Headlight_rpt_218_Commanded_valueType_Parse(
    const std::string& name, Headlight_rpt_218_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Headlight_rpt_218_Commanded_valueType>(
    Headlight_rpt_218_Commanded_valueType_descriptor(), name, value);
}
enum Dash_controls_left_rpt_20c_Output_valueType : int {
  Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_NONE = 0,
  Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_OK = 1,
  Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_LEFT = 2,
  Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_RIGHT = 3,
  Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_UP = 4,
  Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_DOWN = 5
};
bool Dash_controls_left_rpt_20c_Output_valueType_IsValid(int value);
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c_Output_valueType_Output_valueType_MIN = Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c_Output_valueType_Output_valueType_MAX = Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_DOWN;
constexpr int Dash_controls_left_rpt_20c_Output_valueType_Output_valueType_ARRAYSIZE = Dash_controls_left_rpt_20c_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Output_valueType_descriptor();
template<typename T>
inline const std::string& Dash_controls_left_rpt_20c_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dash_controls_left_rpt_20c_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dash_controls_left_rpt_20c_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dash_controls_left_rpt_20c_Output_valueType_descriptor(), enum_t_value);
}
inline bool Dash_controls_left_rpt_20c_Output_valueType_Parse(
    const std::string& name, Dash_controls_left_rpt_20c_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dash_controls_left_rpt_20c_Output_valueType>(
    Dash_controls_left_rpt_20c_Output_valueType_descriptor(), name, value);
}
enum Dash_controls_left_rpt_20c_Commanded_valueType : int {
  Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_NONE = 0,
  Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_OK = 1,
  Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_LEFT = 2,
  Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_RIGHT = 3,
  Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_UP = 4,
  Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_DOWN = 5
};
bool Dash_controls_left_rpt_20c_Commanded_valueType_IsValid(int value);
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c_Commanded_valueType_Commanded_valueType_MIN = Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c_Commanded_valueType_Commanded_valueType_MAX = Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_DOWN;
constexpr int Dash_controls_left_rpt_20c_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Dash_controls_left_rpt_20c_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Dash_controls_left_rpt_20c_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dash_controls_left_rpt_20c_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dash_controls_left_rpt_20c_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dash_controls_left_rpt_20c_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Dash_controls_left_rpt_20c_Commanded_valueType_Parse(
    const std::string& name, Dash_controls_left_rpt_20c_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dash_controls_left_rpt_20c_Commanded_valueType>(
    Dash_controls_left_rpt_20c_Commanded_valueType_descriptor(), name, value);
}
enum Dash_controls_left_rpt_20c_Manual_inputType : int {
  Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_NONE = 0,
  Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_OK = 1,
  Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_LEFT = 2,
  Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_RIGHT = 3,
  Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_UP = 4,
  Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_DOWN = 5
};
bool Dash_controls_left_rpt_20c_Manual_inputType_IsValid(int value);
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c_Manual_inputType_Manual_inputType_MIN = Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_NONE;
constexpr Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c_Manual_inputType_Manual_inputType_MAX = Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_DOWN;
constexpr int Dash_controls_left_rpt_20c_Manual_inputType_Manual_inputType_ARRAYSIZE = Dash_controls_left_rpt_20c_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_left_rpt_20c_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Dash_controls_left_rpt_20c_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dash_controls_left_rpt_20c_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dash_controls_left_rpt_20c_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dash_controls_left_rpt_20c_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Dash_controls_left_rpt_20c_Manual_inputType_Parse(
    const std::string& name, Dash_controls_left_rpt_20c_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dash_controls_left_rpt_20c_Manual_inputType>(
    Dash_controls_left_rpt_20c_Manual_inputType_descriptor(), name, value);
}
enum Headlight_aux_rpt_318_Headlights_modeType : int {
  Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_HEADLIGHTS_OFF = 0,
  Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_PARKING_LIGHTS_ONLY = 1,
  Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_HEADLIGHTS_ON_MANUAL_MODE = 2,
  Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_HEADLIGHTS_ON_AUTO_MODE = 3
};
bool Headlight_aux_rpt_318_Headlights_modeType_IsValid(int value);
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318_Headlights_modeType_Headlights_modeType_MIN = Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_HEADLIGHTS_OFF;
constexpr Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318_Headlights_modeType_Headlights_modeType_MAX = Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_HEADLIGHTS_ON_AUTO_MODE;
constexpr int Headlight_aux_rpt_318_Headlights_modeType_Headlights_modeType_ARRAYSIZE = Headlight_aux_rpt_318_Headlights_modeType_Headlights_modeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_aux_rpt_318_Headlights_modeType_descriptor();
template<typename T>
inline const std::string& Headlight_aux_rpt_318_Headlights_modeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Headlight_aux_rpt_318_Headlights_modeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Headlight_aux_rpt_318_Headlights_modeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Headlight_aux_rpt_318_Headlights_modeType_descriptor(), enum_t_value);
}
inline bool Headlight_aux_rpt_318_Headlights_modeType_Parse(
    const std::string& name, Headlight_aux_rpt_318_Headlights_modeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Headlight_aux_rpt_318_Headlights_modeType>(
    Headlight_aux_rpt_318_Headlights_modeType_descriptor(), name, value);
}
enum Dash_controls_right_cmd_110_Dash_controls_buttonType : int {
  Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE = 0,
  Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_OK = 1,
  Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT = 2,
  Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT = 3,
  Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_UP = 4,
  Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN = 5
};
bool Dash_controls_right_cmd_110_Dash_controls_buttonType_IsValid(int value);
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110_Dash_controls_buttonType_Dash_controls_buttonType_MIN = Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE;
constexpr Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110_Dash_controls_buttonType_Dash_controls_buttonType_MAX = Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN;
constexpr int Dash_controls_right_cmd_110_Dash_controls_buttonType_Dash_controls_buttonType_ARRAYSIZE = Dash_controls_right_cmd_110_Dash_controls_buttonType_Dash_controls_buttonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dash_controls_right_cmd_110_Dash_controls_buttonType_descriptor();
template<typename T>
inline const std::string& Dash_controls_right_cmd_110_Dash_controls_buttonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dash_controls_right_cmd_110_Dash_controls_buttonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dash_controls_right_cmd_110_Dash_controls_buttonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dash_controls_right_cmd_110_Dash_controls_buttonType_descriptor(), enum_t_value);
}
inline bool Dash_controls_right_cmd_110_Dash_controls_buttonType_Parse(
    const std::string& name, Dash_controls_right_cmd_110_Dash_controls_buttonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dash_controls_right_cmd_110_Dash_controls_buttonType>(
    Dash_controls_right_cmd_110_Dash_controls_buttonType_descriptor(), name, value);
}
enum Wiper_cmd_134_Wiper_cmdType : int {
  Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_WIPERS_OFF = 0,
  Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_1 = 1,
  Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_2 = 2,
  Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_3 = 3,
  Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_4 = 4,
  Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_5 = 5,
  Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_LOW = 6,
  Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_HIGH = 7
};
bool Wiper_cmd_134_Wiper_cmdType_IsValid(int value);
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134_Wiper_cmdType_Wiper_cmdType_MIN = Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_WIPERS_OFF;
constexpr Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134_Wiper_cmdType_Wiper_cmdType_MAX = Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_HIGH;
constexpr int Wiper_cmd_134_Wiper_cmdType_Wiper_cmdType_ARRAYSIZE = Wiper_cmd_134_Wiper_cmdType_Wiper_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_cmd_134_Wiper_cmdType_descriptor();
template<typename T>
inline const std::string& Wiper_cmd_134_Wiper_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Wiper_cmd_134_Wiper_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Wiper_cmd_134_Wiper_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Wiper_cmd_134_Wiper_cmdType_descriptor(), enum_t_value);
}
inline bool Wiper_cmd_134_Wiper_cmdType_Parse(
    const std::string& name, Wiper_cmd_134_Wiper_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Wiper_cmd_134_Wiper_cmdType>(
    Wiper_cmd_134_Wiper_cmdType_descriptor(), name, value);
}
enum Wiper_rpt_234_Output_valueType : int {
  Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_WIPERS_OFF = 0,
  Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_1 = 1,
  Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_2 = 2,
  Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_3 = 3,
  Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_4 = 4,
  Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_5 = 5,
  Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_LOW = 6,
  Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_HIGH = 7
};
bool Wiper_rpt_234_Output_valueType_IsValid(int value);
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234_Output_valueType_Output_valueType_MIN = Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_234_Output_valueType Wiper_rpt_234_Output_valueType_Output_valueType_MAX = Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_HIGH;
constexpr int Wiper_rpt_234_Output_valueType_Output_valueType_ARRAYSIZE = Wiper_rpt_234_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Output_valueType_descriptor();
template<typename T>
inline const std::string& Wiper_rpt_234_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Wiper_rpt_234_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Wiper_rpt_234_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Wiper_rpt_234_Output_valueType_descriptor(), enum_t_value);
}
inline bool Wiper_rpt_234_Output_valueType_Parse(
    const std::string& name, Wiper_rpt_234_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Wiper_rpt_234_Output_valueType>(
    Wiper_rpt_234_Output_valueType_descriptor(), name, value);
}
enum Wiper_rpt_234_Commanded_valueType : int {
  Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_WIPERS_OFF = 0,
  Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_1 = 1,
  Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_2 = 2,
  Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_3 = 3,
  Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_4 = 4,
  Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_5 = 5,
  Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_LOW = 6,
  Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_HIGH = 7
};
bool Wiper_rpt_234_Commanded_valueType_IsValid(int value);
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234_Commanded_valueType_Commanded_valueType_MIN = Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_234_Commanded_valueType Wiper_rpt_234_Commanded_valueType_Commanded_valueType_MAX = Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_HIGH;
constexpr int Wiper_rpt_234_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Wiper_rpt_234_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Wiper_rpt_234_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Wiper_rpt_234_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Wiper_rpt_234_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Wiper_rpt_234_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Wiper_rpt_234_Commanded_valueType_Parse(
    const std::string& name, Wiper_rpt_234_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Wiper_rpt_234_Commanded_valueType>(
    Wiper_rpt_234_Commanded_valueType_descriptor(), name, value);
}
enum Wiper_rpt_234_Manual_inputType : int {
  Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_WIPERS_OFF = 0,
  Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_1 = 1,
  Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_2 = 2,
  Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_3 = 3,
  Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_4 = 4,
  Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_5 = 5,
  Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_LOW = 6,
  Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_HIGH = 7
};
bool Wiper_rpt_234_Manual_inputType_IsValid(int value);
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234_Manual_inputType_Manual_inputType_MIN = Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_WIPERS_OFF;
constexpr Wiper_rpt_234_Manual_inputType Wiper_rpt_234_Manual_inputType_Manual_inputType_MAX = Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_HIGH;
constexpr int Wiper_rpt_234_Manual_inputType_Manual_inputType_ARRAYSIZE = Wiper_rpt_234_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_234_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Wiper_rpt_234_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Wiper_rpt_234_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Wiper_rpt_234_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Wiper_rpt_234_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Wiper_rpt_234_Manual_inputType_Parse(
    const std::string& name, Wiper_rpt_234_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Wiper_rpt_234_Manual_inputType>(
    Wiper_rpt_234_Manual_inputType_descriptor(), name, value);
}
enum Turn_rpt_230_Manual_inputType : int {
  Turn_rpt_230_Manual_inputType_MANUAL_INPUT_RIGHT = 0,
  Turn_rpt_230_Manual_inputType_MANUAL_INPUT_NONE = 1,
  Turn_rpt_230_Manual_inputType_MANUAL_INPUT_LEFT = 2,
  Turn_rpt_230_Manual_inputType_MANUAL_INPUT_HAZARD = 3
};
bool Turn_rpt_230_Manual_inputType_IsValid(int value);
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230_Manual_inputType_Manual_inputType_MIN = Turn_rpt_230_Manual_inputType_MANUAL_INPUT_RIGHT;
constexpr Turn_rpt_230_Manual_inputType Turn_rpt_230_Manual_inputType_Manual_inputType_MAX = Turn_rpt_230_Manual_inputType_MANUAL_INPUT_HAZARD;
constexpr int Turn_rpt_230_Manual_inputType_Manual_inputType_ARRAYSIZE = Turn_rpt_230_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Turn_rpt_230_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Turn_rpt_230_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Turn_rpt_230_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Turn_rpt_230_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Turn_rpt_230_Manual_inputType_Parse(
    const std::string& name, Turn_rpt_230_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Turn_rpt_230_Manual_inputType>(
    Turn_rpt_230_Manual_inputType_descriptor(), name, value);
}
enum Turn_rpt_230_Commanded_valueType : int {
  Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_RIGHT = 0,
  Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_NONE = 1,
  Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_LEFT = 2,
  Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_HAZARD = 3
};
bool Turn_rpt_230_Commanded_valueType_IsValid(int value);
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230_Commanded_valueType_Commanded_valueType_MIN = Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_RIGHT;
constexpr Turn_rpt_230_Commanded_valueType Turn_rpt_230_Commanded_valueType_Commanded_valueType_MAX = Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_HAZARD;
constexpr int Turn_rpt_230_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Turn_rpt_230_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Turn_rpt_230_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Turn_rpt_230_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Turn_rpt_230_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Turn_rpt_230_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Turn_rpt_230_Commanded_valueType_Parse(
    const std::string& name, Turn_rpt_230_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Turn_rpt_230_Commanded_valueType>(
    Turn_rpt_230_Commanded_valueType_descriptor(), name, value);
}
enum Turn_rpt_230_Output_valueType : int {
  Turn_rpt_230_Output_valueType_OUTPUT_VALUE_RIGHT = 0,
  Turn_rpt_230_Output_valueType_OUTPUT_VALUE_NONE = 1,
  Turn_rpt_230_Output_valueType_OUTPUT_VALUE_LEFT = 2,
  Turn_rpt_230_Output_valueType_OUTPUT_VALUE_HAZARD = 3
};
bool Turn_rpt_230_Output_valueType_IsValid(int value);
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230_Output_valueType_Output_valueType_MIN = Turn_rpt_230_Output_valueType_OUTPUT_VALUE_RIGHT;
constexpr Turn_rpt_230_Output_valueType Turn_rpt_230_Output_valueType_Output_valueType_MAX = Turn_rpt_230_Output_valueType_OUTPUT_VALUE_HAZARD;
constexpr int Turn_rpt_230_Output_valueType_Output_valueType_ARRAYSIZE = Turn_rpt_230_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_230_Output_valueType_descriptor();
template<typename T>
inline const std::string& Turn_rpt_230_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Turn_rpt_230_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Turn_rpt_230_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Turn_rpt_230_Output_valueType_descriptor(), enum_t_value);
}
inline bool Turn_rpt_230_Output_valueType_Parse(
    const std::string& name, Turn_rpt_230_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Turn_rpt_230_Output_valueType>(
    Turn_rpt_230_Output_valueType_descriptor(), name, value);
}
enum Headlight_cmd_118_Headlight_cmdType : int {
  Headlight_cmd_118_Headlight_cmdType_HEADLIGHT_CMD_HEADLIGHTS_OFF = 0,
  Headlight_cmd_118_Headlight_cmdType_HEADLIGHT_CMD_LOW_BEAMS = 1,
  Headlight_cmd_118_Headlight_cmdType_HEADLIGHT_CMD_HIGH_BEAMS = 2
};
bool Headlight_cmd_118_Headlight_cmdType_IsValid(int value);
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118_Headlight_cmdType_Headlight_cmdType_MIN = Headlight_cmd_118_Headlight_cmdType_HEADLIGHT_CMD_HEADLIGHTS_OFF;
constexpr Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118_Headlight_cmdType_Headlight_cmdType_MAX = Headlight_cmd_118_Headlight_cmdType_HEADLIGHT_CMD_HIGH_BEAMS;
constexpr int Headlight_cmd_118_Headlight_cmdType_Headlight_cmdType_ARRAYSIZE = Headlight_cmd_118_Headlight_cmdType_Headlight_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_cmd_118_Headlight_cmdType_descriptor();
template<typename T>
inline const std::string& Headlight_cmd_118_Headlight_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Headlight_cmd_118_Headlight_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Headlight_cmd_118_Headlight_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Headlight_cmd_118_Headlight_cmdType_descriptor(), enum_t_value);
}
inline bool Headlight_cmd_118_Headlight_cmdType_Parse(
    const std::string& name, Headlight_cmd_118_Headlight_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Headlight_cmd_118_Headlight_cmdType>(
    Headlight_cmd_118_Headlight_cmdType_descriptor(), name, value);
}
enum Component_rpt_20_Component_typeType : int {
  Component_rpt_20_Component_typeType_COMPONENT_TYPE_PACMOD = 0,
  Component_rpt_20_Component_typeType_COMPONENT_TYPE_PACMINI = 1,
  Component_rpt_20_Component_typeType_COMPONENT_TYPE_PACMICRO = 2
};
bool Component_rpt_20_Component_typeType_IsValid(int value);
constexpr Component_rpt_20_Component_typeType Component_rpt_20_Component_typeType_Component_typeType_MIN = Component_rpt_20_Component_typeType_COMPONENT_TYPE_PACMOD;
constexpr Component_rpt_20_Component_typeType Component_rpt_20_Component_typeType_Component_typeType_MAX = Component_rpt_20_Component_typeType_COMPONENT_TYPE_PACMICRO;
constexpr int Component_rpt_20_Component_typeType_Component_typeType_ARRAYSIZE = Component_rpt_20_Component_typeType_Component_typeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_rpt_20_Component_typeType_descriptor();
template<typename T>
inline const std::string& Component_rpt_20_Component_typeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Component_rpt_20_Component_typeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Component_rpt_20_Component_typeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Component_rpt_20_Component_typeType_descriptor(), enum_t_value);
}
inline bool Component_rpt_20_Component_typeType_Parse(
    const std::string& name, Component_rpt_20_Component_typeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Component_rpt_20_Component_typeType>(
    Component_rpt_20_Component_typeType_descriptor(), name, value);
}
enum Component_rpt_20_Component_funcType : int {
  Component_rpt_20_Component_funcType_COMPONENT_FUNC_PACMOD = 0,
  Component_rpt_20_Component_funcType_COMPONENT_FUNC_STEERING_AND_STEERING_COLUMN = 1,
  Component_rpt_20_Component_funcType_COMPONENT_FUNC_ACCELERATOR_AND_BRAKING = 2,
  Component_rpt_20_Component_funcType_COMPONENT_FUNC_BRAKING = 3,
  Component_rpt_20_Component_funcType_COMPONENT_FUNC_SHIFTING = 4,
  Component_rpt_20_Component_funcType_COMPONENT_FUNC_STEERING = 5,
  Component_rpt_20_Component_funcType_COMPONENT_FUNC_E_SHIFTER = 6,
  Component_rpt_20_Component_funcType_COMPONENT_FUNC_WATCHDOG = 7
};
bool Component_rpt_20_Component_funcType_IsValid(int value);
constexpr Component_rpt_20_Component_funcType Component_rpt_20_Component_funcType_Component_funcType_MIN = Component_rpt_20_Component_funcType_COMPONENT_FUNC_PACMOD;
constexpr Component_rpt_20_Component_funcType Component_rpt_20_Component_funcType_Component_funcType_MAX = Component_rpt_20_Component_funcType_COMPONENT_FUNC_WATCHDOG;
constexpr int Component_rpt_20_Component_funcType_Component_funcType_ARRAYSIZE = Component_rpt_20_Component_funcType_Component_funcType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_rpt_20_Component_funcType_descriptor();
template<typename T>
inline const std::string& Component_rpt_20_Component_funcType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Component_rpt_20_Component_funcType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Component_rpt_20_Component_funcType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Component_rpt_20_Component_funcType_descriptor(), enum_t_value);
}
inline bool Component_rpt_20_Component_funcType_Parse(
    const std::string& name, Component_rpt_20_Component_funcType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Component_rpt_20_Component_funcType>(
    Component_rpt_20_Component_funcType_descriptor(), name, value);
}
enum Horn_cmd_11c_Horn_cmdType : int {
  Horn_cmd_11c_Horn_cmdType_HORN_CMD_OFF = 0,
  Horn_cmd_11c_Horn_cmdType_HORN_CMD_ON = 1
};
bool Horn_cmd_11c_Horn_cmdType_IsValid(int value);
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c_Horn_cmdType_Horn_cmdType_MIN = Horn_cmd_11c_Horn_cmdType_HORN_CMD_OFF;
constexpr Horn_cmd_11c_Horn_cmdType Horn_cmd_11c_Horn_cmdType_Horn_cmdType_MAX = Horn_cmd_11c_Horn_cmdType_HORN_CMD_ON;
constexpr int Horn_cmd_11c_Horn_cmdType_Horn_cmdType_ARRAYSIZE = Horn_cmd_11c_Horn_cmdType_Horn_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_cmd_11c_Horn_cmdType_descriptor();
template<typename T>
inline const std::string& Horn_cmd_11c_Horn_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Horn_cmd_11c_Horn_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Horn_cmd_11c_Horn_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Horn_cmd_11c_Horn_cmdType_descriptor(), enum_t_value);
}
inline bool Horn_cmd_11c_Horn_cmdType_Parse(
    const std::string& name, Horn_cmd_11c_Horn_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Horn_cmd_11c_Horn_cmdType>(
    Horn_cmd_11c_Horn_cmdType_descriptor(), name, value);
}
enum Global_rpt_10_Pacmod_system_enabledType : int {
  Global_rpt_10_Pacmod_system_enabledType_PACMOD_SYSTEM_ENABLED_CONTROL_DISABLED = 0,
  Global_rpt_10_Pacmod_system_enabledType_PACMOD_SYSTEM_ENABLED_CONTROL_ENABLED = 1
};
bool Global_rpt_10_Pacmod_system_enabledType_IsValid(int value);
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10_Pacmod_system_enabledType_Pacmod_system_enabledType_MIN = Global_rpt_10_Pacmod_system_enabledType_PACMOD_SYSTEM_ENABLED_CONTROL_DISABLED;
constexpr Global_rpt_10_Pacmod_system_enabledType Global_rpt_10_Pacmod_system_enabledType_Pacmod_system_enabledType_MAX = Global_rpt_10_Pacmod_system_enabledType_PACMOD_SYSTEM_ENABLED_CONTROL_ENABLED;
constexpr int Global_rpt_10_Pacmod_system_enabledType_Pacmod_system_enabledType_ARRAYSIZE = Global_rpt_10_Pacmod_system_enabledType_Pacmod_system_enabledType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Pacmod_system_enabledType_descriptor();
template<typename T>
inline const std::string& Global_rpt_10_Pacmod_system_enabledType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Global_rpt_10_Pacmod_system_enabledType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Global_rpt_10_Pacmod_system_enabledType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Global_rpt_10_Pacmod_system_enabledType_descriptor(), enum_t_value);
}
inline bool Global_rpt_10_Pacmod_system_enabledType_Parse(
    const std::string& name, Global_rpt_10_Pacmod_system_enabledType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Global_rpt_10_Pacmod_system_enabledType>(
    Global_rpt_10_Pacmod_system_enabledType_descriptor(), name, value);
}
enum Global_rpt_10_Pacmod_system_override_activeType : int {
  Global_rpt_10_Pacmod_system_override_activeType_PACMOD_SYSTEM_OVERRIDE_ACTIVE_NOT_OVERRIDDEN = 0,
  Global_rpt_10_Pacmod_system_override_activeType_PACMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN = 1
};
bool Global_rpt_10_Pacmod_system_override_activeType_IsValid(int value);
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10_Pacmod_system_override_activeType_Pacmod_system_override_activeType_MIN = Global_rpt_10_Pacmod_system_override_activeType_PACMOD_SYSTEM_OVERRIDE_ACTIVE_NOT_OVERRIDDEN;
constexpr Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10_Pacmod_system_override_activeType_Pacmod_system_override_activeType_MAX = Global_rpt_10_Pacmod_system_override_activeType_PACMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN;
constexpr int Global_rpt_10_Pacmod_system_override_activeType_Pacmod_system_override_activeType_ARRAYSIZE = Global_rpt_10_Pacmod_system_override_activeType_Pacmod_system_override_activeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Pacmod_system_override_activeType_descriptor();
template<typename T>
inline const std::string& Global_rpt_10_Pacmod_system_override_activeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Global_rpt_10_Pacmod_system_override_activeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Global_rpt_10_Pacmod_system_override_activeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Global_rpt_10_Pacmod_system_override_activeType_descriptor(), enum_t_value);
}
inline bool Global_rpt_10_Pacmod_system_override_activeType_Parse(
    const std::string& name, Global_rpt_10_Pacmod_system_override_activeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Global_rpt_10_Pacmod_system_override_activeType>(
    Global_rpt_10_Pacmod_system_override_activeType_descriptor(), name, value);
}
enum Global_rpt_10_Brk_can_timeoutType : int {
  Global_rpt_10_Brk_can_timeoutType_BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT = 0,
  Global_rpt_10_Brk_can_timeoutType_BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT = 1
};
bool Global_rpt_10_Brk_can_timeoutType_IsValid(int value);
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10_Brk_can_timeoutType_Brk_can_timeoutType_MIN = Global_rpt_10_Brk_can_timeoutType_BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_10_Brk_can_timeoutType Global_rpt_10_Brk_can_timeoutType_Brk_can_timeoutType_MAX = Global_rpt_10_Brk_can_timeoutType_BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT;
constexpr int Global_rpt_10_Brk_can_timeoutType_Brk_can_timeoutType_ARRAYSIZE = Global_rpt_10_Brk_can_timeoutType_Brk_can_timeoutType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_10_Brk_can_timeoutType_descriptor();
template<typename T>
inline const std::string& Global_rpt_10_Brk_can_timeoutType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Global_rpt_10_Brk_can_timeoutType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Global_rpt_10_Brk_can_timeoutType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Global_rpt_10_Brk_can_timeoutType_descriptor(), enum_t_value);
}
inline bool Global_rpt_10_Brk_can_timeoutType_Parse(
    const std::string& name, Global_rpt_10_Brk_can_timeoutType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Global_rpt_10_Brk_can_timeoutType>(
    Global_rpt_10_Brk_can_timeoutType_descriptor(), name, value);
}
enum Cruise_control_buttons_rpt_208_Output_valueType : int {
  Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_NONE = 0,
  Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_CNCL = 1,
  Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER = 2,
  Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOSER = 3,
  Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_SET_DEC = 4,
  Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_RES_INC = 5,
  Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_ON_OFF = 6
};
bool Cruise_control_buttons_rpt_208_Output_valueType_IsValid(int value);
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208_Output_valueType_Output_valueType_MIN = Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208_Output_valueType_Output_valueType_MAX = Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_ON_OFF;
constexpr int Cruise_control_buttons_rpt_208_Output_valueType_Output_valueType_ARRAYSIZE = Cruise_control_buttons_rpt_208_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Output_valueType_descriptor();
template<typename T>
inline const std::string& Cruise_control_buttons_rpt_208_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cruise_control_buttons_rpt_208_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cruise_control_buttons_rpt_208_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cruise_control_buttons_rpt_208_Output_valueType_descriptor(), enum_t_value);
}
inline bool Cruise_control_buttons_rpt_208_Output_valueType_Parse(
    const std::string& name, Cruise_control_buttons_rpt_208_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cruise_control_buttons_rpt_208_Output_valueType>(
    Cruise_control_buttons_rpt_208_Output_valueType_descriptor(), name, value);
}
enum Cruise_control_buttons_rpt_208_Manual_inputType : int {
  Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_NONE = 0,
  Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_CNCL = 1,
  Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_ACC_FURTHER = 2,
  Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_ACC_CLOSER = 3,
  Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_SET_DEC = 4,
  Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_RES_INC = 5,
  Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_ON_OFF = 6
};
bool Cruise_control_buttons_rpt_208_Manual_inputType_IsValid(int value);
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208_Manual_inputType_Manual_inputType_MIN = Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208_Manual_inputType_Manual_inputType_MAX = Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_ON_OFF;
constexpr int Cruise_control_buttons_rpt_208_Manual_inputType_Manual_inputType_ARRAYSIZE = Cruise_control_buttons_rpt_208_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Cruise_control_buttons_rpt_208_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cruise_control_buttons_rpt_208_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cruise_control_buttons_rpt_208_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cruise_control_buttons_rpt_208_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Cruise_control_buttons_rpt_208_Manual_inputType_Parse(
    const std::string& name, Cruise_control_buttons_rpt_208_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cruise_control_buttons_rpt_208_Manual_inputType>(
    Cruise_control_buttons_rpt_208_Manual_inputType_descriptor(), name, value);
}
enum Cruise_control_buttons_rpt_208_Commanded_valueType : int {
  Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_NONE = 0,
  Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_CNCL = 1,
  Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_ACC_FURTHER = 2,
  Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_ACC_CLOSER = 3,
  Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_SET_DEC = 4,
  Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_RES_INC = 5,
  Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_ON_OFF = 6
};
bool Cruise_control_buttons_rpt_208_Commanded_valueType_IsValid(int value);
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208_Commanded_valueType_Commanded_valueType_MIN = Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208_Commanded_valueType_Commanded_valueType_MAX = Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_ON_OFF;
constexpr int Cruise_control_buttons_rpt_208_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Cruise_control_buttons_rpt_208_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_rpt_208_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Cruise_control_buttons_rpt_208_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cruise_control_buttons_rpt_208_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cruise_control_buttons_rpt_208_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cruise_control_buttons_rpt_208_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Cruise_control_buttons_rpt_208_Commanded_valueType_Parse(
    const std::string& name, Cruise_control_buttons_rpt_208_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cruise_control_buttons_rpt_208_Commanded_valueType>(
    Cruise_control_buttons_rpt_208_Commanded_valueType_descriptor(), name, value);
}
enum Vehicle_speed_rpt_400_Vehicle_speed_validType : int {
  Vehicle_speed_rpt_400_Vehicle_speed_validType_VEHICLE_SPEED_VALID_INVALID = 0,
  Vehicle_speed_rpt_400_Vehicle_speed_validType_VEHICLE_SPEED_VALID_VALID = 1
};
bool Vehicle_speed_rpt_400_Vehicle_speed_validType_IsValid(int value);
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400_Vehicle_speed_validType_Vehicle_speed_validType_MIN = Vehicle_speed_rpt_400_Vehicle_speed_validType_VEHICLE_SPEED_VALID_INVALID;
constexpr Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400_Vehicle_speed_validType_Vehicle_speed_validType_MAX = Vehicle_speed_rpt_400_Vehicle_speed_validType_VEHICLE_SPEED_VALID_VALID;
constexpr int Vehicle_speed_rpt_400_Vehicle_speed_validType_Vehicle_speed_validType_ARRAYSIZE = Vehicle_speed_rpt_400_Vehicle_speed_validType_Vehicle_speed_validType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_speed_rpt_400_Vehicle_speed_validType_descriptor();
template<typename T>
inline const std::string& Vehicle_speed_rpt_400_Vehicle_speed_validType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle_speed_rpt_400_Vehicle_speed_validType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle_speed_rpt_400_Vehicle_speed_validType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle_speed_rpt_400_Vehicle_speed_validType_descriptor(), enum_t_value);
}
inline bool Vehicle_speed_rpt_400_Vehicle_speed_validType_Parse(
    const std::string& name, Vehicle_speed_rpt_400_Vehicle_speed_validType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle_speed_rpt_400_Vehicle_speed_validType>(
    Vehicle_speed_rpt_400_Vehicle_speed_validType_descriptor(), name, value);
}
enum Media_controls_cmd_120_Media_controls_cmdType : int {
  Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE = 0,
  Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND = 1,
  Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE = 2,
  Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER = 3,
  Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4,
  Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP = 5,
  Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN = 6
};
bool Media_controls_cmd_120_Media_controls_cmdType_IsValid(int value);
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120_Media_controls_cmdType_Media_controls_cmdType_MIN = Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE;
constexpr Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120_Media_controls_cmdType_Media_controls_cmdType_MAX = Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN;
constexpr int Media_controls_cmd_120_Media_controls_cmdType_Media_controls_cmdType_ARRAYSIZE = Media_controls_cmd_120_Media_controls_cmdType_Media_controls_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_cmd_120_Media_controls_cmdType_descriptor();
template<typename T>
inline const std::string& Media_controls_cmd_120_Media_controls_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Media_controls_cmd_120_Media_controls_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Media_controls_cmd_120_Media_controls_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Media_controls_cmd_120_Media_controls_cmdType_descriptor(), enum_t_value);
}
inline bool Media_controls_cmd_120_Media_controls_cmdType_Parse(
    const std::string& name, Media_controls_cmd_120_Media_controls_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Media_controls_cmd_120_Media_controls_cmdType>(
    Media_controls_cmd_120_Media_controls_cmdType_descriptor(), name, value);
}
enum Cruise_control_buttons_cmd_108_Cruise_control_buttonType : int {
  Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_NONE = 0,
  Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_CNCL = 1,
  Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_FURTHER = 2,
  Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_CLOSER = 3,
  Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_SET_DEC = 4,
  Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_INC = 5,
  Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ON_OFF = 6
};
bool Cruise_control_buttons_cmd_108_Cruise_control_buttonType_IsValid(int value);
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Cruise_control_buttonType_MIN = Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_NONE;
constexpr Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Cruise_control_buttonType_MAX = Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ON_OFF;
constexpr int Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Cruise_control_buttonType_ARRAYSIZE = Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Cruise_control_buttonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cruise_control_buttons_cmd_108_Cruise_control_buttonType_descriptor();
template<typename T>
inline const std::string& Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Cruise_control_buttons_cmd_108_Cruise_control_buttonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_descriptor(), enum_t_value);
}
inline bool Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Parse(
    const std::string& name, Cruise_control_buttons_cmd_108_Cruise_control_buttonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Cruise_control_buttons_cmd_108_Cruise_control_buttonType>(
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_descriptor(), name, value);
}
enum Horn_rpt_21c_Output_valueType : int {
  Horn_rpt_21c_Output_valueType_OUTPUT_VALUE_OFF = 0,
  Horn_rpt_21c_Output_valueType_OUTPUT_VALUE_ON = 1
};
bool Horn_rpt_21c_Output_valueType_IsValid(int value);
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c_Output_valueType_Output_valueType_MIN = Horn_rpt_21c_Output_valueType_OUTPUT_VALUE_OFF;
constexpr Horn_rpt_21c_Output_valueType Horn_rpt_21c_Output_valueType_Output_valueType_MAX = Horn_rpt_21c_Output_valueType_OUTPUT_VALUE_ON;
constexpr int Horn_rpt_21c_Output_valueType_Output_valueType_ARRAYSIZE = Horn_rpt_21c_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Output_valueType_descriptor();
template<typename T>
inline const std::string& Horn_rpt_21c_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Horn_rpt_21c_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Horn_rpt_21c_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Horn_rpt_21c_Output_valueType_descriptor(), enum_t_value);
}
inline bool Horn_rpt_21c_Output_valueType_Parse(
    const std::string& name, Horn_rpt_21c_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Horn_rpt_21c_Output_valueType>(
    Horn_rpt_21c_Output_valueType_descriptor(), name, value);
}
enum Horn_rpt_21c_Commanded_valueType : int {
  Horn_rpt_21c_Commanded_valueType_COMMANDED_VALUE_OFF = 0,
  Horn_rpt_21c_Commanded_valueType_COMMANDED_VALUE_ON = 1
};
bool Horn_rpt_21c_Commanded_valueType_IsValid(int value);
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c_Commanded_valueType_Commanded_valueType_MIN = Horn_rpt_21c_Commanded_valueType_COMMANDED_VALUE_OFF;
constexpr Horn_rpt_21c_Commanded_valueType Horn_rpt_21c_Commanded_valueType_Commanded_valueType_MAX = Horn_rpt_21c_Commanded_valueType_COMMANDED_VALUE_ON;
constexpr int Horn_rpt_21c_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Horn_rpt_21c_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Horn_rpt_21c_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Horn_rpt_21c_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Horn_rpt_21c_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Horn_rpt_21c_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Horn_rpt_21c_Commanded_valueType_Parse(
    const std::string& name, Horn_rpt_21c_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Horn_rpt_21c_Commanded_valueType>(
    Horn_rpt_21c_Commanded_valueType_descriptor(), name, value);
}
enum Horn_rpt_21c_Manual_inputType : int {
  Horn_rpt_21c_Manual_inputType_MANUAL_INPUT_OFF = 0,
  Horn_rpt_21c_Manual_inputType_MANUAL_INPUT_ON = 1
};
bool Horn_rpt_21c_Manual_inputType_IsValid(int value);
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c_Manual_inputType_Manual_inputType_MIN = Horn_rpt_21c_Manual_inputType_MANUAL_INPUT_OFF;
constexpr Horn_rpt_21c_Manual_inputType Horn_rpt_21c_Manual_inputType_Manual_inputType_MAX = Horn_rpt_21c_Manual_inputType_MANUAL_INPUT_ON;
constexpr int Horn_rpt_21c_Manual_inputType_Manual_inputType_ARRAYSIZE = Horn_rpt_21c_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_21c_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Horn_rpt_21c_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Horn_rpt_21c_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Horn_rpt_21c_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Horn_rpt_21c_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Horn_rpt_21c_Manual_inputType_Parse(
    const std::string& name, Horn_rpt_21c_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Horn_rpt_21c_Manual_inputType>(
    Horn_rpt_21c_Manual_inputType_descriptor(), name, value);
}
enum Shift_rpt_228_Manual_inputType : int {
  Shift_rpt_228_Manual_inputType_MANUAL_INPUT_PARK = 0,
  Shift_rpt_228_Manual_inputType_MANUAL_INPUT_REVERSE = 1,
  Shift_rpt_228_Manual_inputType_MANUAL_INPUT_NEUTRAL = 2,
  Shift_rpt_228_Manual_inputType_MANUAL_INPUT_FORWARD_HIGH = 3,
  Shift_rpt_228_Manual_inputType_MANUAL_INPUT_LOW = 4,
  Shift_rpt_228_Manual_inputType_MANUAL_INPUT_BETWEEN_GEARS = 5,
  Shift_rpt_228_Manual_inputType_MANUAL_INPUT_ERROR = 6,
  Shift_rpt_228_Manual_inputType_MANUAL_INPUT_NONE = 7
};
bool Shift_rpt_228_Manual_inputType_IsValid(int value);
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228_Manual_inputType_Manual_inputType_MIN = Shift_rpt_228_Manual_inputType_MANUAL_INPUT_PARK;
constexpr Shift_rpt_228_Manual_inputType Shift_rpt_228_Manual_inputType_Manual_inputType_MAX = Shift_rpt_228_Manual_inputType_MANUAL_INPUT_NONE;
constexpr int Shift_rpt_228_Manual_inputType_Manual_inputType_ARRAYSIZE = Shift_rpt_228_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Shift_rpt_228_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Shift_rpt_228_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Shift_rpt_228_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Shift_rpt_228_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Shift_rpt_228_Manual_inputType_Parse(
    const std::string& name, Shift_rpt_228_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Shift_rpt_228_Manual_inputType>(
    Shift_rpt_228_Manual_inputType_descriptor(), name, value);
}
enum Shift_rpt_228_Commanded_valueType : int {
  Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_PARK = 0,
  Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_REVERSE = 1,
  Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_NEUTRAL = 2,
  Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_FORWARD_HIGH = 3,
  Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_LOW = 4,
  Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_NONE = 7
};
bool Shift_rpt_228_Commanded_valueType_IsValid(int value);
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228_Commanded_valueType_Commanded_valueType_MIN = Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_PARK;
constexpr Shift_rpt_228_Commanded_valueType Shift_rpt_228_Commanded_valueType_Commanded_valueType_MAX = Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_NONE;
constexpr int Shift_rpt_228_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Shift_rpt_228_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Shift_rpt_228_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Shift_rpt_228_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Shift_rpt_228_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Shift_rpt_228_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Shift_rpt_228_Commanded_valueType_Parse(
    const std::string& name, Shift_rpt_228_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Shift_rpt_228_Commanded_valueType>(
    Shift_rpt_228_Commanded_valueType_descriptor(), name, value);
}
enum Shift_rpt_228_Output_valueType : int {
  Shift_rpt_228_Output_valueType_OUTPUT_VALUE_PARK = 0,
  Shift_rpt_228_Output_valueType_OUTPUT_VALUE_REVERSE = 1,
  Shift_rpt_228_Output_valueType_OUTPUT_VALUE_NEUTRAL = 2,
  Shift_rpt_228_Output_valueType_OUTPUT_VALUE_FORWARD_HIGH = 3,
  Shift_rpt_228_Output_valueType_OUTPUT_VALUE_LOW = 4,
  Shift_rpt_228_Output_valueType_OUTPUT_VALUE_BETWEEN_GEARS = 5,
  Shift_rpt_228_Output_valueType_OUTPUT_VALUE_ERROR = 6,
  Shift_rpt_228_Output_valueType_OUTPUT_VALUE_NONE = 7
};
bool Shift_rpt_228_Output_valueType_IsValid(int value);
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228_Output_valueType_Output_valueType_MIN = Shift_rpt_228_Output_valueType_OUTPUT_VALUE_PARK;
constexpr Shift_rpt_228_Output_valueType Shift_rpt_228_Output_valueType_Output_valueType_MAX = Shift_rpt_228_Output_valueType_OUTPUT_VALUE_NONE;
constexpr int Shift_rpt_228_Output_valueType_Output_valueType_ARRAYSIZE = Shift_rpt_228_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_228_Output_valueType_descriptor();
template<typename T>
inline const std::string& Shift_rpt_228_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Shift_rpt_228_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Shift_rpt_228_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Shift_rpt_228_Output_valueType_descriptor(), enum_t_value);
}
inline bool Shift_rpt_228_Output_valueType_Parse(
    const std::string& name, Shift_rpt_228_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Shift_rpt_228_Output_valueType>(
    Shift_rpt_228_Output_valueType_descriptor(), name, value);
}
enum Shift_cmd_128_Shift_cmdType : int {
  Shift_cmd_128_Shift_cmdType_SHIFT_CMD_PARK = 0,
  Shift_cmd_128_Shift_cmdType_SHIFT_CMD_REVERSE = 1,
  Shift_cmd_128_Shift_cmdType_SHIFT_CMD_NEUTRAL = 2,
  Shift_cmd_128_Shift_cmdType_SHIFT_CMD_FORWARD_HIGH = 3,
  Shift_cmd_128_Shift_cmdType_SHIFT_CMD_LOW = 4,
  Shift_cmd_128_Shift_cmdType_SHIFT_CMD_NONE = 7
};
bool Shift_cmd_128_Shift_cmdType_IsValid(int value);
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128_Shift_cmdType_Shift_cmdType_MIN = Shift_cmd_128_Shift_cmdType_SHIFT_CMD_PARK;
constexpr Shift_cmd_128_Shift_cmdType Shift_cmd_128_Shift_cmdType_Shift_cmdType_MAX = Shift_cmd_128_Shift_cmdType_SHIFT_CMD_NONE;
constexpr int Shift_cmd_128_Shift_cmdType_Shift_cmdType_ARRAYSIZE = Shift_cmd_128_Shift_cmdType_Shift_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_cmd_128_Shift_cmdType_descriptor();
template<typename T>
inline const std::string& Shift_cmd_128_Shift_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Shift_cmd_128_Shift_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Shift_cmd_128_Shift_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Shift_cmd_128_Shift_cmdType_descriptor(), enum_t_value);
}
inline bool Shift_cmd_128_Shift_cmdType_Parse(
    const std::string& name, Shift_cmd_128_Shift_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Shift_cmd_128_Shift_cmdType>(
    Shift_cmd_128_Shift_cmdType_descriptor(), name, value);
}
enum Media_controls_rpt_220_Output_valueType : int {
  Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_NONE = 0,
  Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_VOICE_COMMAND = 1,
  Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_MUTE = 2,
  Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER = 3,
  Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4,
  Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_VOL_UP = 5,
  Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_VOL_DOWN = 6
};
bool Media_controls_rpt_220_Output_valueType_IsValid(int value);
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220_Output_valueType_Output_valueType_MIN = Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Output_valueType Media_controls_rpt_220_Output_valueType_Output_valueType_MAX = Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_VOL_DOWN;
constexpr int Media_controls_rpt_220_Output_valueType_Output_valueType_ARRAYSIZE = Media_controls_rpt_220_Output_valueType_Output_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Output_valueType_descriptor();
template<typename T>
inline const std::string& Media_controls_rpt_220_Output_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Media_controls_rpt_220_Output_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Media_controls_rpt_220_Output_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Media_controls_rpt_220_Output_valueType_descriptor(), enum_t_value);
}
inline bool Media_controls_rpt_220_Output_valueType_Parse(
    const std::string& name, Media_controls_rpt_220_Output_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Media_controls_rpt_220_Output_valueType>(
    Media_controls_rpt_220_Output_valueType_descriptor(), name, value);
}
enum Media_controls_rpt_220_Commanded_valueType : int {
  Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_NONE = 0,
  Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_VOICE_COMMAND = 1,
  Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_MUTE = 2,
  Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER = 3,
  Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4,
  Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP = 5,
  Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN = 6
};
bool Media_controls_rpt_220_Commanded_valueType_IsValid(int value);
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220_Commanded_valueType_Commanded_valueType_MIN = Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220_Commanded_valueType_Commanded_valueType_MAX = Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN;
constexpr int Media_controls_rpt_220_Commanded_valueType_Commanded_valueType_ARRAYSIZE = Media_controls_rpt_220_Commanded_valueType_Commanded_valueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Commanded_valueType_descriptor();
template<typename T>
inline const std::string& Media_controls_rpt_220_Commanded_valueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Media_controls_rpt_220_Commanded_valueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Media_controls_rpt_220_Commanded_valueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Media_controls_rpt_220_Commanded_valueType_descriptor(), enum_t_value);
}
inline bool Media_controls_rpt_220_Commanded_valueType_Parse(
    const std::string& name, Media_controls_rpt_220_Commanded_valueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Media_controls_rpt_220_Commanded_valueType>(
    Media_controls_rpt_220_Commanded_valueType_descriptor(), name, value);
}
enum Media_controls_rpt_220_Manual_inputType : int {
  Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_NONE = 0,
  Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_VOICE_COMMAND = 1,
  Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_MUTE = 2,
  Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_PREV_TRACK_ANSWER = 3,
  Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP = 4,
  Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_VOL_UP = 5,
  Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_VOL_DOWN = 6
};
bool Media_controls_rpt_220_Manual_inputType_IsValid(int value);
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220_Manual_inputType_Manual_inputType_MIN = Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_NONE;
constexpr Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220_Manual_inputType_Manual_inputType_MAX = Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_VOL_DOWN;
constexpr int Media_controls_rpt_220_Manual_inputType_Manual_inputType_ARRAYSIZE = Media_controls_rpt_220_Manual_inputType_Manual_inputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Media_controls_rpt_220_Manual_inputType_descriptor();
template<typename T>
inline const std::string& Media_controls_rpt_220_Manual_inputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Media_controls_rpt_220_Manual_inputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Media_controls_rpt_220_Manual_inputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Media_controls_rpt_220_Manual_inputType_descriptor(), enum_t_value);
}
inline bool Media_controls_rpt_220_Manual_inputType_Parse(
    const std::string& name, Media_controls_rpt_220_Manual_inputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Media_controls_rpt_220_Manual_inputType>(
    Media_controls_rpt_220_Manual_inputType_descriptor(), name, value);
}
enum Interior_lights_rpt_416_Dim_levelType : int {
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_MIN = 0,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_1 = 1,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_2 = 2,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_3 = 3,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_4 = 4,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_5 = 5,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_6 = 6,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_7 = 7,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_8 = 8,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_9 = 9,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_10 = 10,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_11 = 11,
  Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_MAX = 12
};
bool Interior_lights_rpt_416_Dim_levelType_IsValid(int value);
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416_Dim_levelType_Dim_levelType_MIN = Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_MIN;
constexpr Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416_Dim_levelType_Dim_levelType_MAX = Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_MAX;
constexpr int Interior_lights_rpt_416_Dim_levelType_Dim_levelType_ARRAYSIZE = Interior_lights_rpt_416_Dim_levelType_Dim_levelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interior_lights_rpt_416_Dim_levelType_descriptor();
template<typename T>
inline const std::string& Interior_lights_rpt_416_Dim_levelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Interior_lights_rpt_416_Dim_levelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Interior_lights_rpt_416_Dim_levelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Interior_lights_rpt_416_Dim_levelType_descriptor(), enum_t_value);
}
inline bool Interior_lights_rpt_416_Dim_levelType_Parse(
    const std::string& name, Interior_lights_rpt_416_Dim_levelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Interior_lights_rpt_416_Dim_levelType>(
    Interior_lights_rpt_416_Dim_levelType_descriptor(), name, value);
}
enum Turn_cmd_130_Turn_signal_cmdType : int {
  Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT = 0,
  Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_NONE = 1,
  Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_LEFT = 2,
  Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_HAZARD = 3
};
bool Turn_cmd_130_Turn_signal_cmdType_IsValid(int value);
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130_Turn_signal_cmdType_Turn_signal_cmdType_MIN = Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT;
constexpr Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130_Turn_signal_cmdType_Turn_signal_cmdType_MAX = Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_HAZARD;
constexpr int Turn_cmd_130_Turn_signal_cmdType_Turn_signal_cmdType_ARRAYSIZE = Turn_cmd_130_Turn_signal_cmdType_Turn_signal_cmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_cmd_130_Turn_signal_cmdType_descriptor();
template<typename T>
inline const std::string& Turn_cmd_130_Turn_signal_cmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Turn_cmd_130_Turn_signal_cmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Turn_cmd_130_Turn_signal_cmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Turn_cmd_130_Turn_signal_cmdType_descriptor(), enum_t_value);
}
inline bool Turn_cmd_130_Turn_signal_cmdType_Parse(
    const std::string& name, Turn_cmd_130_Turn_signal_cmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Turn_cmd_130_Turn_signal_cmdType>(
    Turn_cmd_130_Turn_signal_cmdType_descriptor(), name, value);
}
// ===================================================================

class Hazard_lights_rpt_214 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Hazard_lights_rpt_214) */ {
 public:
  Hazard_lights_rpt_214();
  virtual ~Hazard_lights_rpt_214();

  Hazard_lights_rpt_214(const Hazard_lights_rpt_214& from);
  Hazard_lights_rpt_214(Hazard_lights_rpt_214&& from) noexcept
    : Hazard_lights_rpt_214() {
    *this = ::std::move(from);
  }

  inline Hazard_lights_rpt_214& operator=(const Hazard_lights_rpt_214& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hazard_lights_rpt_214& operator=(Hazard_lights_rpt_214&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hazard_lights_rpt_214& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hazard_lights_rpt_214* internal_default_instance() {
    return reinterpret_cast<const Hazard_lights_rpt_214*>(
               &_Hazard_lights_rpt_214_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Hazard_lights_rpt_214& a, Hazard_lights_rpt_214& b) {
    a.Swap(&b);
  }
  inline void Swap(Hazard_lights_rpt_214* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hazard_lights_rpt_214* New() const final {
    return CreateMaybeMessage<Hazard_lights_rpt_214>(nullptr);
  }

  Hazard_lights_rpt_214* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hazard_lights_rpt_214>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hazard_lights_rpt_214& from);
  void MergeFrom(const Hazard_lights_rpt_214& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hazard_lights_rpt_214* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Hazard_lights_rpt_214";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputValueFieldNumber = 1,
    kCommandedValueFieldNumber = 2,
    kManualInputFieldNumber = 3,
    kVehicleFaultFieldNumber = 4,
    kPacmodFaultFieldNumber = 5,
    kOverrideActiveFieldNumber = 6,
    kOutputReportedFaultFieldNumber = 7,
    kInputOutputFaultFieldNumber = 8,
    kEnabledFieldNumber = 9,
    kCommandOutputFaultFieldNumber = 10,
  };
  // optional bool output_value = 1;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  bool output_value() const;
  void set_output_value(bool value);
  private:
  bool _internal_output_value() const;
  void _internal_set_output_value(bool value);
  public:

  // optional bool commanded_value = 2;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  bool commanded_value() const;
  void set_commanded_value(bool value);
  private:
  bool _internal_commanded_value() const;
  void _internal_set_commanded_value(bool value);
  public:

  // optional bool manual_input = 3;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  bool manual_input() const;
  void set_manual_input(bool value);
  private:
  bool _internal_manual_input() const;
  void _internal_set_manual_input(bool value);
  public:

  // optional bool vehicle_fault = 4;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 5;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 6;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 7;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 8;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 9;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 10;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Hazard_lights_rpt_214)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool output_value_;
  bool commanded_value_;
  bool manual_input_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Steering_cmd_12c :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steering_cmd_12c) */ {
 public:
  Steering_cmd_12c();
  virtual ~Steering_cmd_12c();

  Steering_cmd_12c(const Steering_cmd_12c& from);
  Steering_cmd_12c(Steering_cmd_12c&& from) noexcept
    : Steering_cmd_12c() {
    *this = ::std::move(from);
  }

  inline Steering_cmd_12c& operator=(const Steering_cmd_12c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steering_cmd_12c& operator=(Steering_cmd_12c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Steering_cmd_12c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Steering_cmd_12c* internal_default_instance() {
    return reinterpret_cast<const Steering_cmd_12c*>(
               &_Steering_cmd_12c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Steering_cmd_12c& a, Steering_cmd_12c& b) {
    a.Swap(&b);
  }
  inline void Swap(Steering_cmd_12c* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Steering_cmd_12c* New() const final {
    return CreateMaybeMessage<Steering_cmd_12c>(nullptr);
  }

  Steering_cmd_12c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Steering_cmd_12c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Steering_cmd_12c& from);
  void MergeFrom(const Steering_cmd_12c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steering_cmd_12c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steering_cmd_12c";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 5,
    kRotationRateFieldNumber = 6,
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
  };
  // optional double position = 5;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // optional double rotation_rate = 6;
  bool has_rotation_rate() const;
  private:
  bool _internal_has_rotation_rate() const;
  public:
  void clear_rotation_rate();
  double rotation_rate() const;
  void set_rotation_rate(double value);
  private:
  double _internal_rotation_rate() const;
  void _internal_set_rotation_rate(double value);
  public:

  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steering_cmd_12c)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double position_;
  double rotation_rate_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Dash_controls_right_rpt_210 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Dash_controls_right_rpt_210) */ {
 public:
  Dash_controls_right_rpt_210();
  virtual ~Dash_controls_right_rpt_210();

  Dash_controls_right_rpt_210(const Dash_controls_right_rpt_210& from);
  Dash_controls_right_rpt_210(Dash_controls_right_rpt_210&& from) noexcept
    : Dash_controls_right_rpt_210() {
    *this = ::std::move(from);
  }

  inline Dash_controls_right_rpt_210& operator=(const Dash_controls_right_rpt_210& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dash_controls_right_rpt_210& operator=(Dash_controls_right_rpt_210&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dash_controls_right_rpt_210& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dash_controls_right_rpt_210* internal_default_instance() {
    return reinterpret_cast<const Dash_controls_right_rpt_210*>(
               &_Dash_controls_right_rpt_210_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dash_controls_right_rpt_210& a, Dash_controls_right_rpt_210& b) {
    a.Swap(&b);
  }
  inline void Swap(Dash_controls_right_rpt_210* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dash_controls_right_rpt_210* New() const final {
    return CreateMaybeMessage<Dash_controls_right_rpt_210>(nullptr);
  }

  Dash_controls_right_rpt_210* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dash_controls_right_rpt_210>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dash_controls_right_rpt_210& from);
  void MergeFrom(const Dash_controls_right_rpt_210& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dash_controls_right_rpt_210* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Dash_controls_right_rpt_210";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Dash_controls_right_rpt_210_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_NONE =
    Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_NONE;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_OK =
    Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_OK;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_LEFT =
    Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_LEFT;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_RIGHT =
    Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_RIGHT;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_UP =
    Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_UP;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_DOWN =
    Dash_controls_right_rpt_210_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_DOWN;
  static inline bool Output_valueType_IsValid(int value) {
    return Dash_controls_right_rpt_210_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Dash_controls_right_rpt_210_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Dash_controls_right_rpt_210_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Dash_controls_right_rpt_210_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Dash_controls_right_rpt_210_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Dash_controls_right_rpt_210_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Dash_controls_right_rpt_210_Output_valueType_Parse(name, value);
  }

  typedef Dash_controls_right_rpt_210_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_NONE =
    Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_NONE;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_OK =
    Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_OK;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_LEFT =
    Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_LEFT;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_RIGHT =
    Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_RIGHT;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_UP =
    Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_UP;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_DOWN =
    Dash_controls_right_rpt_210_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_DOWN;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Dash_controls_right_rpt_210_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Dash_controls_right_rpt_210_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Dash_controls_right_rpt_210_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Dash_controls_right_rpt_210_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Dash_controls_right_rpt_210_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Dash_controls_right_rpt_210_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Dash_controls_right_rpt_210_Commanded_valueType_Parse(name, value);
  }

  typedef Dash_controls_right_rpt_210_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_NONE =
    Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_NONE;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_OK =
    Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_OK;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_LEFT =
    Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_LEFT;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_RIGHT =
    Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_RIGHT;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_UP =
    Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_UP;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_DOWN =
    Dash_controls_right_rpt_210_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_DOWN;
  static inline bool Manual_inputType_IsValid(int value) {
    return Dash_controls_right_rpt_210_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Dash_controls_right_rpt_210_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Dash_controls_right_rpt_210_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Dash_controls_right_rpt_210_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Dash_controls_right_rpt_210_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Dash_controls_right_rpt_210_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Dash_controls_right_rpt_210_Manual_inputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputValueFieldNumber = 1,
    kCommandedValueFieldNumber = 2,
    kVehicleFaultFieldNumber = 3,
    kPacmodFaultFieldNumber = 4,
    kOverrideActiveFieldNumber = 5,
    kOutputReportedFaultFieldNumber = 6,
    kInputOutputFaultFieldNumber = 7,
    kEnabledFieldNumber = 8,
    kCommandOutputFaultFieldNumber = 9,
    kManualInputFieldNumber = 10,
  };
  // optional .apollo.canbus.Dash_controls_right_rpt_210.Output_valueType output_value = 1;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType value);
  private:
  ::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType value);
  public:

  // optional .apollo.canbus.Dash_controls_right_rpt_210.Commanded_valueType commanded_value = 2;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType value);
  private:
  ::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType value);
  public:

  // optional bool vehicle_fault = 3;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 4;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 5;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 6;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 7;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 8;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 9;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional .apollo.canbus.Dash_controls_right_rpt_210.Manual_inputType manual_input = 10;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType value);
  private:
  ::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Dash_controls_right_rpt_210)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int output_value_;
  int commanded_value_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  int manual_input_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Dash_controls_left_cmd_10c :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Dash_controls_left_cmd_10c) */ {
 public:
  Dash_controls_left_cmd_10c();
  virtual ~Dash_controls_left_cmd_10c();

  Dash_controls_left_cmd_10c(const Dash_controls_left_cmd_10c& from);
  Dash_controls_left_cmd_10c(Dash_controls_left_cmd_10c&& from) noexcept
    : Dash_controls_left_cmd_10c() {
    *this = ::std::move(from);
  }

  inline Dash_controls_left_cmd_10c& operator=(const Dash_controls_left_cmd_10c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dash_controls_left_cmd_10c& operator=(Dash_controls_left_cmd_10c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dash_controls_left_cmd_10c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dash_controls_left_cmd_10c* internal_default_instance() {
    return reinterpret_cast<const Dash_controls_left_cmd_10c*>(
               &_Dash_controls_left_cmd_10c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Dash_controls_left_cmd_10c& a, Dash_controls_left_cmd_10c& b) {
    a.Swap(&b);
  }
  inline void Swap(Dash_controls_left_cmd_10c* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dash_controls_left_cmd_10c* New() const final {
    return CreateMaybeMessage<Dash_controls_left_cmd_10c>(nullptr);
  }

  Dash_controls_left_cmd_10c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dash_controls_left_cmd_10c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dash_controls_left_cmd_10c& from);
  void MergeFrom(const Dash_controls_left_cmd_10c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dash_controls_left_cmd_10c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Dash_controls_left_cmd_10c";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_buttonType;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_OK =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_OK;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_UP =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_UP;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN;
  static inline bool Dash_controls_buttonType_IsValid(int value) {
    return Dash_controls_left_cmd_10c_Dash_controls_buttonType_IsValid(value);
  }
  static constexpr Dash_controls_buttonType Dash_controls_buttonType_MIN =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_Dash_controls_buttonType_MIN;
  static constexpr Dash_controls_buttonType Dash_controls_buttonType_MAX =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_Dash_controls_buttonType_MAX;
  static constexpr int Dash_controls_buttonType_ARRAYSIZE =
    Dash_controls_left_cmd_10c_Dash_controls_buttonType_Dash_controls_buttonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Dash_controls_buttonType_descriptor() {
    return Dash_controls_left_cmd_10c_Dash_controls_buttonType_descriptor();
  }
  template<typename T>
  static inline const std::string& Dash_controls_buttonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Dash_controls_buttonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Dash_controls_buttonType_Name.");
    return Dash_controls_left_cmd_10c_Dash_controls_buttonType_Name(enum_t_value);
  }
  static inline bool Dash_controls_buttonType_Parse(const std::string& name,
      Dash_controls_buttonType* value) {
    return Dash_controls_left_cmd_10c_Dash_controls_buttonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
    kDashControlsButtonFieldNumber = 5,
  };
  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // optional .apollo.canbus.Dash_controls_left_cmd_10c.Dash_controls_buttonType dash_controls_button = 5;
  bool has_dash_controls_button() const;
  private:
  bool _internal_has_dash_controls_button() const;
  public:
  void clear_dash_controls_button();
  ::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType dash_controls_button() const;
  void set_dash_controls_button(::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType value);
  private:
  ::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType _internal_dash_controls_button() const;
  void _internal_set_dash_controls_button(::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Dash_controls_left_cmd_10c)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  int dash_controls_button_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Steering_rpt_22c :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steering_rpt_22c) */ {
 public:
  Steering_rpt_22c();
  virtual ~Steering_rpt_22c();

  Steering_rpt_22c(const Steering_rpt_22c& from);
  Steering_rpt_22c(Steering_rpt_22c&& from) noexcept
    : Steering_rpt_22c() {
    *this = ::std::move(from);
  }

  inline Steering_rpt_22c& operator=(const Steering_rpt_22c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steering_rpt_22c& operator=(Steering_rpt_22c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Steering_rpt_22c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Steering_rpt_22c* internal_default_instance() {
    return reinterpret_cast<const Steering_rpt_22c*>(
               &_Steering_rpt_22c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Steering_rpt_22c& a, Steering_rpt_22c& b) {
    a.Swap(&b);
  }
  inline void Swap(Steering_rpt_22c* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Steering_rpt_22c* New() const final {
    return CreateMaybeMessage<Steering_rpt_22c>(nullptr);
  }

  Steering_rpt_22c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Steering_rpt_22c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Steering_rpt_22c& from);
  void MergeFrom(const Steering_rpt_22c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steering_rpt_22c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steering_rpt_22c";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFaultFieldNumber = 1,
    kPacmodFaultFieldNumber = 2,
    kOverrideActiveFieldNumber = 3,
    kOutputReportedFaultFieldNumber = 4,
    kInputOutputFaultFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kCommandOutputFaultFieldNumber = 7,
    kManualInputFieldNumber = 8,
    kCommandedValueFieldNumber = 9,
    kOutputValueFieldNumber = 10,
  };
  // optional bool vehicle_fault = 1;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 2;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 3;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 4;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 5;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 6;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 7;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional double manual_input = 8;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  double manual_input() const;
  void set_manual_input(double value);
  private:
  double _internal_manual_input() const;
  void _internal_set_manual_input(double value);
  public:

  // optional double commanded_value = 9;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  double commanded_value() const;
  void set_commanded_value(double value);
  private:
  double _internal_commanded_value() const;
  void _internal_set_commanded_value(double value);
  public:

  // optional double output_value = 10;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  double output_value() const;
  void set_output_value(double value);
  private:
  double _internal_output_value() const;
  void _internal_set_output_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steering_rpt_22c)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  double manual_input_;
  double commanded_value_;
  double output_value_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Turn_aux_rpt_330 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Turn_aux_rpt_330) */ {
 public:
  Turn_aux_rpt_330();
  virtual ~Turn_aux_rpt_330();

  Turn_aux_rpt_330(const Turn_aux_rpt_330& from);
  Turn_aux_rpt_330(Turn_aux_rpt_330&& from) noexcept
    : Turn_aux_rpt_330() {
    *this = ::std::move(from);
  }

  inline Turn_aux_rpt_330& operator=(const Turn_aux_rpt_330& from) {
    CopyFrom(from);
    return *this;
  }
  inline Turn_aux_rpt_330& operator=(Turn_aux_rpt_330&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Turn_aux_rpt_330& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Turn_aux_rpt_330* internal_default_instance() {
    return reinterpret_cast<const Turn_aux_rpt_330*>(
               &_Turn_aux_rpt_330_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Turn_aux_rpt_330& a, Turn_aux_rpt_330& b) {
    a.Swap(&b);
  }
  inline void Swap(Turn_aux_rpt_330* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Turn_aux_rpt_330* New() const final {
    return CreateMaybeMessage<Turn_aux_rpt_330>(nullptr);
  }

  Turn_aux_rpt_330* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Turn_aux_rpt_330>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Turn_aux_rpt_330& from);
  void MergeFrom(const Turn_aux_rpt_330& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Turn_aux_rpt_330* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Turn_aux_rpt_330";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassBlinkerBulbOnIsValidFieldNumber = 1,
    kPassBlinkerBulbOnFieldNumber = 2,
    kDriverBlinkerBulbOnIsValidFieldNumber = 3,
    kDriverBlinkerBulbOnFieldNumber = 4,
  };
  // optional bool pass_blinker_bulb_on_is_valid = 1;
  bool has_pass_blinker_bulb_on_is_valid() const;
  private:
  bool _internal_has_pass_blinker_bulb_on_is_valid() const;
  public:
  void clear_pass_blinker_bulb_on_is_valid();
  bool pass_blinker_bulb_on_is_valid() const;
  void set_pass_blinker_bulb_on_is_valid(bool value);
  private:
  bool _internal_pass_blinker_bulb_on_is_valid() const;
  void _internal_set_pass_blinker_bulb_on_is_valid(bool value);
  public:

  // optional bool pass_blinker_bulb_on = 2;
  bool has_pass_blinker_bulb_on() const;
  private:
  bool _internal_has_pass_blinker_bulb_on() const;
  public:
  void clear_pass_blinker_bulb_on();
  bool pass_blinker_bulb_on() const;
  void set_pass_blinker_bulb_on(bool value);
  private:
  bool _internal_pass_blinker_bulb_on() const;
  void _internal_set_pass_blinker_bulb_on(bool value);
  public:

  // optional bool driver_blinker_bulb_on_is_valid = 3;
  bool has_driver_blinker_bulb_on_is_valid() const;
  private:
  bool _internal_has_driver_blinker_bulb_on_is_valid() const;
  public:
  void clear_driver_blinker_bulb_on_is_valid();
  bool driver_blinker_bulb_on_is_valid() const;
  void set_driver_blinker_bulb_on_is_valid(bool value);
  private:
  bool _internal_driver_blinker_bulb_on_is_valid() const;
  void _internal_set_driver_blinker_bulb_on_is_valid(bool value);
  public:

  // optional bool driver_blinker_bulb_on = 4;
  bool has_driver_blinker_bulb_on() const;
  private:
  bool _internal_has_driver_blinker_bulb_on() const;
  public:
  void clear_driver_blinker_bulb_on();
  bool driver_blinker_bulb_on() const;
  void set_driver_blinker_bulb_on(bool value);
  private:
  bool _internal_driver_blinker_bulb_on() const;
  void _internal_set_driver_blinker_bulb_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Turn_aux_rpt_330)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool pass_blinker_bulb_on_is_valid_;
  bool pass_blinker_bulb_on_;
  bool driver_blinker_bulb_on_is_valid_;
  bool driver_blinker_bulb_on_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Headlight_rpt_218 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Headlight_rpt_218) */ {
 public:
  Headlight_rpt_218();
  virtual ~Headlight_rpt_218();

  Headlight_rpt_218(const Headlight_rpt_218& from);
  Headlight_rpt_218(Headlight_rpt_218&& from) noexcept
    : Headlight_rpt_218() {
    *this = ::std::move(from);
  }

  inline Headlight_rpt_218& operator=(const Headlight_rpt_218& from) {
    CopyFrom(from);
    return *this;
  }
  inline Headlight_rpt_218& operator=(Headlight_rpt_218&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Headlight_rpt_218& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Headlight_rpt_218* internal_default_instance() {
    return reinterpret_cast<const Headlight_rpt_218*>(
               &_Headlight_rpt_218_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Headlight_rpt_218& a, Headlight_rpt_218& b) {
    a.Swap(&b);
  }
  inline void Swap(Headlight_rpt_218* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Headlight_rpt_218* New() const final {
    return CreateMaybeMessage<Headlight_rpt_218>(nullptr);
  }

  Headlight_rpt_218* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Headlight_rpt_218>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Headlight_rpt_218& from);
  void MergeFrom(const Headlight_rpt_218& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Headlight_rpt_218* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Headlight_rpt_218";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Headlight_rpt_218_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_HEADLIGHTS_OFF =
    Headlight_rpt_218_Output_valueType_OUTPUT_VALUE_HEADLIGHTS_OFF;
  static constexpr Output_valueType OUTPUT_VALUE_LOW_BEAMS =
    Headlight_rpt_218_Output_valueType_OUTPUT_VALUE_LOW_BEAMS;
  static constexpr Output_valueType OUTPUT_VALUE_HIGH_BEAMS =
    Headlight_rpt_218_Output_valueType_OUTPUT_VALUE_HIGH_BEAMS;
  static inline bool Output_valueType_IsValid(int value) {
    return Headlight_rpt_218_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Headlight_rpt_218_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Headlight_rpt_218_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Headlight_rpt_218_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Headlight_rpt_218_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Headlight_rpt_218_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Headlight_rpt_218_Output_valueType_Parse(name, value);
  }

  typedef Headlight_rpt_218_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_HEADLIGHTS_OFF =
    Headlight_rpt_218_Manual_inputType_MANUAL_INPUT_HEADLIGHTS_OFF;
  static constexpr Manual_inputType MANUAL_INPUT_LOW_BEAMS =
    Headlight_rpt_218_Manual_inputType_MANUAL_INPUT_LOW_BEAMS;
  static constexpr Manual_inputType MANUAL_INPUT_HIGH_BEAMS =
    Headlight_rpt_218_Manual_inputType_MANUAL_INPUT_HIGH_BEAMS;
  static inline bool Manual_inputType_IsValid(int value) {
    return Headlight_rpt_218_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Headlight_rpt_218_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Headlight_rpt_218_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Headlight_rpt_218_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Headlight_rpt_218_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Headlight_rpt_218_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Headlight_rpt_218_Manual_inputType_Parse(name, value);
  }

  typedef Headlight_rpt_218_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_HEADLIGHTS_OFF =
    Headlight_rpt_218_Commanded_valueType_COMMANDED_VALUE_HEADLIGHTS_OFF;
  static constexpr Commanded_valueType COMMANDED_VALUE_LOW_BEAMS =
    Headlight_rpt_218_Commanded_valueType_COMMANDED_VALUE_LOW_BEAMS;
  static constexpr Commanded_valueType COMMANDED_VALUE_HIGH_BEAMS =
    Headlight_rpt_218_Commanded_valueType_COMMANDED_VALUE_HIGH_BEAMS;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Headlight_rpt_218_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Headlight_rpt_218_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Headlight_rpt_218_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Headlight_rpt_218_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Headlight_rpt_218_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Headlight_rpt_218_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Headlight_rpt_218_Commanded_valueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFaultFieldNumber = 1,
    kPacmodFaultFieldNumber = 2,
    kOverrideActiveFieldNumber = 3,
    kOutputReportedFaultFieldNumber = 4,
    kInputOutputFaultFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kCommandOutputFaultFieldNumber = 7,
    kOutputValueFieldNumber = 8,
    kManualInputFieldNumber = 9,
    kCommandedValueFieldNumber = 10,
  };
  // optional bool vehicle_fault = 1;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 2;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 3;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 4;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 5;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 6;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 7;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional .apollo.canbus.Headlight_rpt_218.Output_valueType output_value = 8;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Headlight_rpt_218_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Headlight_rpt_218_Output_valueType value);
  private:
  ::apollo::canbus::Headlight_rpt_218_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Headlight_rpt_218_Output_valueType value);
  public:

  // optional .apollo.canbus.Headlight_rpt_218.Manual_inputType manual_input = 9;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Headlight_rpt_218_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Headlight_rpt_218_Manual_inputType value);
  private:
  ::apollo::canbus::Headlight_rpt_218_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Headlight_rpt_218_Manual_inputType value);
  public:

  // optional .apollo.canbus.Headlight_rpt_218.Commanded_valueType commanded_value = 10;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Headlight_rpt_218_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Headlight_rpt_218_Commanded_valueType value);
  private:
  ::apollo::canbus::Headlight_rpt_218_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Headlight_rpt_218_Commanded_valueType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Headlight_rpt_218)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  int output_value_;
  int manual_input_;
  int commanded_value_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Hazard_lights_cmd_114 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Hazard_lights_cmd_114) */ {
 public:
  Hazard_lights_cmd_114();
  virtual ~Hazard_lights_cmd_114();

  Hazard_lights_cmd_114(const Hazard_lights_cmd_114& from);
  Hazard_lights_cmd_114(Hazard_lights_cmd_114&& from) noexcept
    : Hazard_lights_cmd_114() {
    *this = ::std::move(from);
  }

  inline Hazard_lights_cmd_114& operator=(const Hazard_lights_cmd_114& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hazard_lights_cmd_114& operator=(Hazard_lights_cmd_114&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hazard_lights_cmd_114& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hazard_lights_cmd_114* internal_default_instance() {
    return reinterpret_cast<const Hazard_lights_cmd_114*>(
               &_Hazard_lights_cmd_114_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Hazard_lights_cmd_114& a, Hazard_lights_cmd_114& b) {
    a.Swap(&b);
  }
  inline void Swap(Hazard_lights_cmd_114* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hazard_lights_cmd_114* New() const final {
    return CreateMaybeMessage<Hazard_lights_cmd_114>(nullptr);
  }

  Hazard_lights_cmd_114* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hazard_lights_cmd_114>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hazard_lights_cmd_114& from);
  void MergeFrom(const Hazard_lights_cmd_114& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hazard_lights_cmd_114* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Hazard_lights_cmd_114";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHazardLightsCmdFieldNumber = 1,
    kIgnoreOverridesFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kEnableFieldNumber = 4,
    kClearFaultsFieldNumber = 5,
  };
  // optional bool hazard_lights_cmd = 1;
  bool has_hazard_lights_cmd() const;
  private:
  bool _internal_has_hazard_lights_cmd() const;
  public:
  void clear_hazard_lights_cmd();
  bool hazard_lights_cmd() const;
  void set_hazard_lights_cmd(bool value);
  private:
  bool _internal_hazard_lights_cmd() const;
  void _internal_set_hazard_lights_cmd(bool value);
  public:

  // optional bool ignore_overrides = 2;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool enable = 4;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_faults = 5;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Hazard_lights_cmd_114)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool hazard_lights_cmd_;
  bool ignore_overrides_;
  bool clear_override_;
  bool enable_;
  bool clear_faults_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Dash_controls_left_rpt_20c :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Dash_controls_left_rpt_20c) */ {
 public:
  Dash_controls_left_rpt_20c();
  virtual ~Dash_controls_left_rpt_20c();

  Dash_controls_left_rpt_20c(const Dash_controls_left_rpt_20c& from);
  Dash_controls_left_rpt_20c(Dash_controls_left_rpt_20c&& from) noexcept
    : Dash_controls_left_rpt_20c() {
    *this = ::std::move(from);
  }

  inline Dash_controls_left_rpt_20c& operator=(const Dash_controls_left_rpt_20c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dash_controls_left_rpt_20c& operator=(Dash_controls_left_rpt_20c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dash_controls_left_rpt_20c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dash_controls_left_rpt_20c* internal_default_instance() {
    return reinterpret_cast<const Dash_controls_left_rpt_20c*>(
               &_Dash_controls_left_rpt_20c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Dash_controls_left_rpt_20c& a, Dash_controls_left_rpt_20c& b) {
    a.Swap(&b);
  }
  inline void Swap(Dash_controls_left_rpt_20c* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dash_controls_left_rpt_20c* New() const final {
    return CreateMaybeMessage<Dash_controls_left_rpt_20c>(nullptr);
  }

  Dash_controls_left_rpt_20c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dash_controls_left_rpt_20c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dash_controls_left_rpt_20c& from);
  void MergeFrom(const Dash_controls_left_rpt_20c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dash_controls_left_rpt_20c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Dash_controls_left_rpt_20c";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Dash_controls_left_rpt_20c_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_NONE =
    Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_NONE;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_OK =
    Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_OK;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_LEFT =
    Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_LEFT;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_RIGHT =
    Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_RIGHT;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_UP =
    Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_UP;
  static constexpr Output_valueType OUTPUT_VALUE_DASH_CONTROL_DOWN =
    Dash_controls_left_rpt_20c_Output_valueType_OUTPUT_VALUE_DASH_CONTROL_DOWN;
  static inline bool Output_valueType_IsValid(int value) {
    return Dash_controls_left_rpt_20c_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Dash_controls_left_rpt_20c_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Dash_controls_left_rpt_20c_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Dash_controls_left_rpt_20c_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Dash_controls_left_rpt_20c_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Dash_controls_left_rpt_20c_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Dash_controls_left_rpt_20c_Output_valueType_Parse(name, value);
  }

  typedef Dash_controls_left_rpt_20c_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_NONE =
    Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_NONE;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_OK =
    Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_OK;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_LEFT =
    Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_LEFT;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_RIGHT =
    Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_RIGHT;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_UP =
    Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_UP;
  static constexpr Commanded_valueType COMMANDED_VALUE_DASH_CONTROL_DOWN =
    Dash_controls_left_rpt_20c_Commanded_valueType_COMMANDED_VALUE_DASH_CONTROL_DOWN;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Dash_controls_left_rpt_20c_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Dash_controls_left_rpt_20c_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Dash_controls_left_rpt_20c_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Dash_controls_left_rpt_20c_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Dash_controls_left_rpt_20c_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Dash_controls_left_rpt_20c_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Dash_controls_left_rpt_20c_Commanded_valueType_Parse(name, value);
  }

  typedef Dash_controls_left_rpt_20c_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_NONE =
    Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_NONE;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_OK =
    Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_OK;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_LEFT =
    Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_LEFT;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_RIGHT =
    Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_RIGHT;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_UP =
    Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_UP;
  static constexpr Manual_inputType MANUAL_INPUT_DASH_CONTROL_DOWN =
    Dash_controls_left_rpt_20c_Manual_inputType_MANUAL_INPUT_DASH_CONTROL_DOWN;
  static inline bool Manual_inputType_IsValid(int value) {
    return Dash_controls_left_rpt_20c_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Dash_controls_left_rpt_20c_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Dash_controls_left_rpt_20c_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Dash_controls_left_rpt_20c_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Dash_controls_left_rpt_20c_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Dash_controls_left_rpt_20c_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Dash_controls_left_rpt_20c_Manual_inputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputValueFieldNumber = 1,
    kCommandedValueFieldNumber = 2,
    kManualInputFieldNumber = 3,
    kVehicleFaultFieldNumber = 4,
    kPacmodFaultFieldNumber = 5,
    kOverrideActiveFieldNumber = 6,
    kOutputReportedFaultFieldNumber = 7,
    kInputOutputFaultFieldNumber = 8,
    kEnabledFieldNumber = 9,
    kCommandOutputFaultFieldNumber = 10,
  };
  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Output_valueType output_value = 1;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType value);
  private:
  ::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType value);
  public:

  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Commanded_valueType commanded_value = 2;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType value);
  private:
  ::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType value);
  public:

  // optional .apollo.canbus.Dash_controls_left_rpt_20c.Manual_inputType manual_input = 3;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType value);
  private:
  ::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType value);
  public:

  // optional bool vehicle_fault = 4;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 5;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 6;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 7;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 8;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 9;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 10;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Dash_controls_left_rpt_20c)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int output_value_;
  int commanded_value_;
  int manual_input_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Headlight_aux_rpt_318 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Headlight_aux_rpt_318) */ {
 public:
  Headlight_aux_rpt_318();
  virtual ~Headlight_aux_rpt_318();

  Headlight_aux_rpt_318(const Headlight_aux_rpt_318& from);
  Headlight_aux_rpt_318(Headlight_aux_rpt_318&& from) noexcept
    : Headlight_aux_rpt_318() {
    *this = ::std::move(from);
  }

  inline Headlight_aux_rpt_318& operator=(const Headlight_aux_rpt_318& from) {
    CopyFrom(from);
    return *this;
  }
  inline Headlight_aux_rpt_318& operator=(Headlight_aux_rpt_318&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Headlight_aux_rpt_318& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Headlight_aux_rpt_318* internal_default_instance() {
    return reinterpret_cast<const Headlight_aux_rpt_318*>(
               &_Headlight_aux_rpt_318_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Headlight_aux_rpt_318& a, Headlight_aux_rpt_318& b) {
    a.Swap(&b);
  }
  inline void Swap(Headlight_aux_rpt_318* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Headlight_aux_rpt_318* New() const final {
    return CreateMaybeMessage<Headlight_aux_rpt_318>(nullptr);
  }

  Headlight_aux_rpt_318* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Headlight_aux_rpt_318>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Headlight_aux_rpt_318& from);
  void MergeFrom(const Headlight_aux_rpt_318& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Headlight_aux_rpt_318* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Headlight_aux_rpt_318";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Headlight_aux_rpt_318_Headlights_modeType Headlights_modeType;
  static constexpr Headlights_modeType HEADLIGHTS_MODE_HEADLIGHTS_OFF =
    Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_HEADLIGHTS_OFF;
  static constexpr Headlights_modeType HEADLIGHTS_MODE_PARKING_LIGHTS_ONLY =
    Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_PARKING_LIGHTS_ONLY;
  static constexpr Headlights_modeType HEADLIGHTS_MODE_HEADLIGHTS_ON_MANUAL_MODE =
    Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_HEADLIGHTS_ON_MANUAL_MODE;
  static constexpr Headlights_modeType HEADLIGHTS_MODE_HEADLIGHTS_ON_AUTO_MODE =
    Headlight_aux_rpt_318_Headlights_modeType_HEADLIGHTS_MODE_HEADLIGHTS_ON_AUTO_MODE;
  static inline bool Headlights_modeType_IsValid(int value) {
    return Headlight_aux_rpt_318_Headlights_modeType_IsValid(value);
  }
  static constexpr Headlights_modeType Headlights_modeType_MIN =
    Headlight_aux_rpt_318_Headlights_modeType_Headlights_modeType_MIN;
  static constexpr Headlights_modeType Headlights_modeType_MAX =
    Headlight_aux_rpt_318_Headlights_modeType_Headlights_modeType_MAX;
  static constexpr int Headlights_modeType_ARRAYSIZE =
    Headlight_aux_rpt_318_Headlights_modeType_Headlights_modeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Headlights_modeType_descriptor() {
    return Headlight_aux_rpt_318_Headlights_modeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Headlights_modeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Headlights_modeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Headlights_modeType_Name.");
    return Headlight_aux_rpt_318_Headlights_modeType_Name(enum_t_value);
  }
  static inline bool Headlights_modeType_Parse(const std::string& name,
      Headlights_modeType* value) {
    return Headlight_aux_rpt_318_Headlights_modeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeadlightsModeFieldNumber = 2,
    kHeadlightsModeIsValidFieldNumber = 1,
    kFogLightsOnIsValidFieldNumber = 3,
    kFogLightsOnFieldNumber = 4,
    kHeadlightsOnBrightIsValidFieldNumber = 5,
    kHeadlightsOnBrightFieldNumber = 6,
    kHeadlightsOnIsValidFieldNumber = 7,
    kHeadlightsOnFieldNumber = 8,
  };
  // optional .apollo.canbus.Headlight_aux_rpt_318.Headlights_modeType headlights_mode = 2;
  bool has_headlights_mode() const;
  private:
  bool _internal_has_headlights_mode() const;
  public:
  void clear_headlights_mode();
  ::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType headlights_mode() const;
  void set_headlights_mode(::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType value);
  private:
  ::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType _internal_headlights_mode() const;
  void _internal_set_headlights_mode(::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType value);
  public:

  // optional bool headlights_mode_is_valid = 1;
  bool has_headlights_mode_is_valid() const;
  private:
  bool _internal_has_headlights_mode_is_valid() const;
  public:
  void clear_headlights_mode_is_valid();
  bool headlights_mode_is_valid() const;
  void set_headlights_mode_is_valid(bool value);
  private:
  bool _internal_headlights_mode_is_valid() const;
  void _internal_set_headlights_mode_is_valid(bool value);
  public:

  // optional bool fog_lights_on_is_valid = 3;
  bool has_fog_lights_on_is_valid() const;
  private:
  bool _internal_has_fog_lights_on_is_valid() const;
  public:
  void clear_fog_lights_on_is_valid();
  bool fog_lights_on_is_valid() const;
  void set_fog_lights_on_is_valid(bool value);
  private:
  bool _internal_fog_lights_on_is_valid() const;
  void _internal_set_fog_lights_on_is_valid(bool value);
  public:

  // optional bool fog_lights_on = 4;
  bool has_fog_lights_on() const;
  private:
  bool _internal_has_fog_lights_on() const;
  public:
  void clear_fog_lights_on();
  bool fog_lights_on() const;
  void set_fog_lights_on(bool value);
  private:
  bool _internal_fog_lights_on() const;
  void _internal_set_fog_lights_on(bool value);
  public:

  // optional bool headlights_on_bright_is_valid = 5;
  bool has_headlights_on_bright_is_valid() const;
  private:
  bool _internal_has_headlights_on_bright_is_valid() const;
  public:
  void clear_headlights_on_bright_is_valid();
  bool headlights_on_bright_is_valid() const;
  void set_headlights_on_bright_is_valid(bool value);
  private:
  bool _internal_headlights_on_bright_is_valid() const;
  void _internal_set_headlights_on_bright_is_valid(bool value);
  public:

  // optional bool headlights_on_bright = 6;
  bool has_headlights_on_bright() const;
  private:
  bool _internal_has_headlights_on_bright() const;
  public:
  void clear_headlights_on_bright();
  bool headlights_on_bright() const;
  void set_headlights_on_bright(bool value);
  private:
  bool _internal_headlights_on_bright() const;
  void _internal_set_headlights_on_bright(bool value);
  public:

  // optional bool headlights_on_is_valid = 7;
  bool has_headlights_on_is_valid() const;
  private:
  bool _internal_has_headlights_on_is_valid() const;
  public:
  void clear_headlights_on_is_valid();
  bool headlights_on_is_valid() const;
  void set_headlights_on_is_valid(bool value);
  private:
  bool _internal_headlights_on_is_valid() const;
  void _internal_set_headlights_on_is_valid(bool value);
  public:

  // optional bool headlights_on = 8;
  bool has_headlights_on() const;
  private:
  bool _internal_has_headlights_on() const;
  public:
  void clear_headlights_on();
  bool headlights_on() const;
  void set_headlights_on(bool value);
  private:
  bool _internal_headlights_on() const;
  void _internal_set_headlights_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Headlight_aux_rpt_318)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int headlights_mode_;
  bool headlights_mode_is_valid_;
  bool fog_lights_on_is_valid_;
  bool fog_lights_on_;
  bool headlights_on_bright_is_valid_;
  bool headlights_on_bright_;
  bool headlights_on_is_valid_;
  bool headlights_on_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Dash_controls_right_cmd_110 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Dash_controls_right_cmd_110) */ {
 public:
  Dash_controls_right_cmd_110();
  virtual ~Dash_controls_right_cmd_110();

  Dash_controls_right_cmd_110(const Dash_controls_right_cmd_110& from);
  Dash_controls_right_cmd_110(Dash_controls_right_cmd_110&& from) noexcept
    : Dash_controls_right_cmd_110() {
    *this = ::std::move(from);
  }

  inline Dash_controls_right_cmd_110& operator=(const Dash_controls_right_cmd_110& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dash_controls_right_cmd_110& operator=(Dash_controls_right_cmd_110&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dash_controls_right_cmd_110& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dash_controls_right_cmd_110* internal_default_instance() {
    return reinterpret_cast<const Dash_controls_right_cmd_110*>(
               &_Dash_controls_right_cmd_110_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Dash_controls_right_cmd_110& a, Dash_controls_right_cmd_110& b) {
    a.Swap(&b);
  }
  inline void Swap(Dash_controls_right_cmd_110* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dash_controls_right_cmd_110* New() const final {
    return CreateMaybeMessage<Dash_controls_right_cmd_110>(nullptr);
  }

  Dash_controls_right_cmd_110* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dash_controls_right_cmd_110>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dash_controls_right_cmd_110& from);
  void MergeFrom(const Dash_controls_right_cmd_110& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dash_controls_right_cmd_110* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Dash_controls_right_cmd_110";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_buttonType;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_NONE;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_OK =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_OK;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_LEFT;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_RIGHT;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_UP =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_UP;
  static constexpr Dash_controls_buttonType DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_DASH_CONTROLS_BUTTON_DASH_CONTROL_DOWN;
  static inline bool Dash_controls_buttonType_IsValid(int value) {
    return Dash_controls_right_cmd_110_Dash_controls_buttonType_IsValid(value);
  }
  static constexpr Dash_controls_buttonType Dash_controls_buttonType_MIN =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_Dash_controls_buttonType_MIN;
  static constexpr Dash_controls_buttonType Dash_controls_buttonType_MAX =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_Dash_controls_buttonType_MAX;
  static constexpr int Dash_controls_buttonType_ARRAYSIZE =
    Dash_controls_right_cmd_110_Dash_controls_buttonType_Dash_controls_buttonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Dash_controls_buttonType_descriptor() {
    return Dash_controls_right_cmd_110_Dash_controls_buttonType_descriptor();
  }
  template<typename T>
  static inline const std::string& Dash_controls_buttonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Dash_controls_buttonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Dash_controls_buttonType_Name.");
    return Dash_controls_right_cmd_110_Dash_controls_buttonType_Name(enum_t_value);
  }
  static inline bool Dash_controls_buttonType_Parse(const std::string& name,
      Dash_controls_buttonType* value) {
    return Dash_controls_right_cmd_110_Dash_controls_buttonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
    kDashControlsButtonFieldNumber = 5,
  };
  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // optional .apollo.canbus.Dash_controls_right_cmd_110.Dash_controls_buttonType dash_controls_button = 5;
  bool has_dash_controls_button() const;
  private:
  bool _internal_has_dash_controls_button() const;
  public:
  void clear_dash_controls_button();
  ::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType dash_controls_button() const;
  void set_dash_controls_button(::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType value);
  private:
  ::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType _internal_dash_controls_button() const;
  void _internal_set_dash_controls_button(::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Dash_controls_right_cmd_110)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  int dash_controls_button_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Wiper_cmd_134 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Wiper_cmd_134) */ {
 public:
  Wiper_cmd_134();
  virtual ~Wiper_cmd_134();

  Wiper_cmd_134(const Wiper_cmd_134& from);
  Wiper_cmd_134(Wiper_cmd_134&& from) noexcept
    : Wiper_cmd_134() {
    *this = ::std::move(from);
  }

  inline Wiper_cmd_134& operator=(const Wiper_cmd_134& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wiper_cmd_134& operator=(Wiper_cmd_134&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wiper_cmd_134& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wiper_cmd_134* internal_default_instance() {
    return reinterpret_cast<const Wiper_cmd_134*>(
               &_Wiper_cmd_134_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Wiper_cmd_134& a, Wiper_cmd_134& b) {
    a.Swap(&b);
  }
  inline void Swap(Wiper_cmd_134* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wiper_cmd_134* New() const final {
    return CreateMaybeMessage<Wiper_cmd_134>(nullptr);
  }

  Wiper_cmd_134* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wiper_cmd_134>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wiper_cmd_134& from);
  void MergeFrom(const Wiper_cmd_134& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wiper_cmd_134* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Wiper_cmd_134";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Wiper_cmd_134_Wiper_cmdType Wiper_cmdType;
  static constexpr Wiper_cmdType WIPER_CMD_WIPERS_OFF =
    Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_WIPERS_OFF;
  static constexpr Wiper_cmdType WIPER_CMD_INTERMITTENT_1 =
    Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_1;
  static constexpr Wiper_cmdType WIPER_CMD_INTERMITTENT_2 =
    Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_2;
  static constexpr Wiper_cmdType WIPER_CMD_INTERMITTENT_3 =
    Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_3;
  static constexpr Wiper_cmdType WIPER_CMD_INTERMITTENT_4 =
    Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_4;
  static constexpr Wiper_cmdType WIPER_CMD_INTERMITTENT_5 =
    Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_INTERMITTENT_5;
  static constexpr Wiper_cmdType WIPER_CMD_LOW =
    Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_LOW;
  static constexpr Wiper_cmdType WIPER_CMD_HIGH =
    Wiper_cmd_134_Wiper_cmdType_WIPER_CMD_HIGH;
  static inline bool Wiper_cmdType_IsValid(int value) {
    return Wiper_cmd_134_Wiper_cmdType_IsValid(value);
  }
  static constexpr Wiper_cmdType Wiper_cmdType_MIN =
    Wiper_cmd_134_Wiper_cmdType_Wiper_cmdType_MIN;
  static constexpr Wiper_cmdType Wiper_cmdType_MAX =
    Wiper_cmd_134_Wiper_cmdType_Wiper_cmdType_MAX;
  static constexpr int Wiper_cmdType_ARRAYSIZE =
    Wiper_cmd_134_Wiper_cmdType_Wiper_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Wiper_cmdType_descriptor() {
    return Wiper_cmd_134_Wiper_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Wiper_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Wiper_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Wiper_cmdType_Name.");
    return Wiper_cmd_134_Wiper_cmdType_Name(enum_t_value);
  }
  static inline bool Wiper_cmdType_Parse(const std::string& name,
      Wiper_cmdType* value) {
    return Wiper_cmd_134_Wiper_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 5,
    kWiperCmdFieldNumber = 4,
  };
  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 5;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // optional .apollo.canbus.Wiper_cmd_134.Wiper_cmdType wiper_cmd = 4;
  bool has_wiper_cmd() const;
  private:
  bool _internal_has_wiper_cmd() const;
  public:
  void clear_wiper_cmd();
  ::apollo::canbus::Wiper_cmd_134_Wiper_cmdType wiper_cmd() const;
  void set_wiper_cmd(::apollo::canbus::Wiper_cmd_134_Wiper_cmdType value);
  private:
  ::apollo::canbus::Wiper_cmd_134_Wiper_cmdType _internal_wiper_cmd() const;
  void _internal_set_wiper_cmd(::apollo::canbus::Wiper_cmd_134_Wiper_cmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Wiper_cmd_134)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  int wiper_cmd_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Wiper_rpt_234 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Wiper_rpt_234) */ {
 public:
  Wiper_rpt_234();
  virtual ~Wiper_rpt_234();

  Wiper_rpt_234(const Wiper_rpt_234& from);
  Wiper_rpt_234(Wiper_rpt_234&& from) noexcept
    : Wiper_rpt_234() {
    *this = ::std::move(from);
  }

  inline Wiper_rpt_234& operator=(const Wiper_rpt_234& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wiper_rpt_234& operator=(Wiper_rpt_234&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wiper_rpt_234& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wiper_rpt_234* internal_default_instance() {
    return reinterpret_cast<const Wiper_rpt_234*>(
               &_Wiper_rpt_234_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Wiper_rpt_234& a, Wiper_rpt_234& b) {
    a.Swap(&b);
  }
  inline void Swap(Wiper_rpt_234* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wiper_rpt_234* New() const final {
    return CreateMaybeMessage<Wiper_rpt_234>(nullptr);
  }

  Wiper_rpt_234* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wiper_rpt_234>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wiper_rpt_234& from);
  void MergeFrom(const Wiper_rpt_234& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wiper_rpt_234* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Wiper_rpt_234";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Wiper_rpt_234_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_WIPERS_OFF =
    Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_WIPERS_OFF;
  static constexpr Output_valueType OUTPUT_VALUE_INTERMITTENT_1 =
    Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_1;
  static constexpr Output_valueType OUTPUT_VALUE_INTERMITTENT_2 =
    Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_2;
  static constexpr Output_valueType OUTPUT_VALUE_INTERMITTENT_3 =
    Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_3;
  static constexpr Output_valueType OUTPUT_VALUE_INTERMITTENT_4 =
    Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_4;
  static constexpr Output_valueType OUTPUT_VALUE_INTERMITTENT_5 =
    Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_INTERMITTENT_5;
  static constexpr Output_valueType OUTPUT_VALUE_LOW =
    Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_LOW;
  static constexpr Output_valueType OUTPUT_VALUE_HIGH =
    Wiper_rpt_234_Output_valueType_OUTPUT_VALUE_HIGH;
  static inline bool Output_valueType_IsValid(int value) {
    return Wiper_rpt_234_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Wiper_rpt_234_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Wiper_rpt_234_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Wiper_rpt_234_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Wiper_rpt_234_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Wiper_rpt_234_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Wiper_rpt_234_Output_valueType_Parse(name, value);
  }

  typedef Wiper_rpt_234_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_WIPERS_OFF =
    Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_WIPERS_OFF;
  static constexpr Commanded_valueType COMMANDED_VALUE_INTERMITTENT_1 =
    Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_1;
  static constexpr Commanded_valueType COMMANDED_VALUE_INTERMITTENT_2 =
    Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_2;
  static constexpr Commanded_valueType COMMANDED_VALUE_INTERMITTENT_3 =
    Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_3;
  static constexpr Commanded_valueType COMMANDED_VALUE_INTERMITTENT_4 =
    Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_4;
  static constexpr Commanded_valueType COMMANDED_VALUE_INTERMITTENT_5 =
    Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_INTERMITTENT_5;
  static constexpr Commanded_valueType COMMANDED_VALUE_LOW =
    Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_LOW;
  static constexpr Commanded_valueType COMMANDED_VALUE_HIGH =
    Wiper_rpt_234_Commanded_valueType_COMMANDED_VALUE_HIGH;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Wiper_rpt_234_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Wiper_rpt_234_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Wiper_rpt_234_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Wiper_rpt_234_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Wiper_rpt_234_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Wiper_rpt_234_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Wiper_rpt_234_Commanded_valueType_Parse(name, value);
  }

  typedef Wiper_rpt_234_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_WIPERS_OFF =
    Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_WIPERS_OFF;
  static constexpr Manual_inputType MANUAL_INPUT_INTERMITTENT_1 =
    Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_1;
  static constexpr Manual_inputType MANUAL_INPUT_INTERMITTENT_2 =
    Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_2;
  static constexpr Manual_inputType MANUAL_INPUT_INTERMITTENT_3 =
    Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_3;
  static constexpr Manual_inputType MANUAL_INPUT_INTERMITTENT_4 =
    Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_4;
  static constexpr Manual_inputType MANUAL_INPUT_INTERMITTENT_5 =
    Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_INTERMITTENT_5;
  static constexpr Manual_inputType MANUAL_INPUT_LOW =
    Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_LOW;
  static constexpr Manual_inputType MANUAL_INPUT_HIGH =
    Wiper_rpt_234_Manual_inputType_MANUAL_INPUT_HIGH;
  static inline bool Manual_inputType_IsValid(int value) {
    return Wiper_rpt_234_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Wiper_rpt_234_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Wiper_rpt_234_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Wiper_rpt_234_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Wiper_rpt_234_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Wiper_rpt_234_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Wiper_rpt_234_Manual_inputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFaultFieldNumber = 1,
    kPacmodFaultFieldNumber = 2,
    kOverrideActiveFieldNumber = 3,
    kOutputReportedFaultFieldNumber = 4,
    kInputOutputFaultFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kCommandOutputFaultFieldNumber = 7,
    kOutputValueFieldNumber = 8,
    kCommandedValueFieldNumber = 9,
    kManualInputFieldNumber = 10,
  };
  // optional bool vehicle_fault = 1;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 2;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 3;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 4;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 5;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 6;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 7;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional .apollo.canbus.Wiper_rpt_234.Output_valueType output_value = 8;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Wiper_rpt_234_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Wiper_rpt_234_Output_valueType value);
  private:
  ::apollo::canbus::Wiper_rpt_234_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Wiper_rpt_234_Output_valueType value);
  public:

  // optional .apollo.canbus.Wiper_rpt_234.Commanded_valueType commanded_value = 9;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Wiper_rpt_234_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Wiper_rpt_234_Commanded_valueType value);
  private:
  ::apollo::canbus::Wiper_rpt_234_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Wiper_rpt_234_Commanded_valueType value);
  public:

  // optional .apollo.canbus.Wiper_rpt_234.Manual_inputType manual_input = 10;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Wiper_rpt_234_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Wiper_rpt_234_Manual_inputType value);
  private:
  ::apollo::canbus::Wiper_rpt_234_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Wiper_rpt_234_Manual_inputType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Wiper_rpt_234)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  int output_value_;
  int commanded_value_;
  int manual_input_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Turn_rpt_230 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Turn_rpt_230) */ {
 public:
  Turn_rpt_230();
  virtual ~Turn_rpt_230();

  Turn_rpt_230(const Turn_rpt_230& from);
  Turn_rpt_230(Turn_rpt_230&& from) noexcept
    : Turn_rpt_230() {
    *this = ::std::move(from);
  }

  inline Turn_rpt_230& operator=(const Turn_rpt_230& from) {
    CopyFrom(from);
    return *this;
  }
  inline Turn_rpt_230& operator=(Turn_rpt_230&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Turn_rpt_230& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Turn_rpt_230* internal_default_instance() {
    return reinterpret_cast<const Turn_rpt_230*>(
               &_Turn_rpt_230_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Turn_rpt_230& a, Turn_rpt_230& b) {
    a.Swap(&b);
  }
  inline void Swap(Turn_rpt_230* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Turn_rpt_230* New() const final {
    return CreateMaybeMessage<Turn_rpt_230>(nullptr);
  }

  Turn_rpt_230* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Turn_rpt_230>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Turn_rpt_230& from);
  void MergeFrom(const Turn_rpt_230& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Turn_rpt_230* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Turn_rpt_230";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Turn_rpt_230_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_RIGHT =
    Turn_rpt_230_Manual_inputType_MANUAL_INPUT_RIGHT;
  static constexpr Manual_inputType MANUAL_INPUT_NONE =
    Turn_rpt_230_Manual_inputType_MANUAL_INPUT_NONE;
  static constexpr Manual_inputType MANUAL_INPUT_LEFT =
    Turn_rpt_230_Manual_inputType_MANUAL_INPUT_LEFT;
  static constexpr Manual_inputType MANUAL_INPUT_HAZARD =
    Turn_rpt_230_Manual_inputType_MANUAL_INPUT_HAZARD;
  static inline bool Manual_inputType_IsValid(int value) {
    return Turn_rpt_230_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Turn_rpt_230_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Turn_rpt_230_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Turn_rpt_230_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Turn_rpt_230_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Turn_rpt_230_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Turn_rpt_230_Manual_inputType_Parse(name, value);
  }

  typedef Turn_rpt_230_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_RIGHT =
    Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_RIGHT;
  static constexpr Commanded_valueType COMMANDED_VALUE_NONE =
    Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_NONE;
  static constexpr Commanded_valueType COMMANDED_VALUE_LEFT =
    Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_LEFT;
  static constexpr Commanded_valueType COMMANDED_VALUE_HAZARD =
    Turn_rpt_230_Commanded_valueType_COMMANDED_VALUE_HAZARD;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Turn_rpt_230_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Turn_rpt_230_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Turn_rpt_230_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Turn_rpt_230_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Turn_rpt_230_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Turn_rpt_230_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Turn_rpt_230_Commanded_valueType_Parse(name, value);
  }

  typedef Turn_rpt_230_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_RIGHT =
    Turn_rpt_230_Output_valueType_OUTPUT_VALUE_RIGHT;
  static constexpr Output_valueType OUTPUT_VALUE_NONE =
    Turn_rpt_230_Output_valueType_OUTPUT_VALUE_NONE;
  static constexpr Output_valueType OUTPUT_VALUE_LEFT =
    Turn_rpt_230_Output_valueType_OUTPUT_VALUE_LEFT;
  static constexpr Output_valueType OUTPUT_VALUE_HAZARD =
    Turn_rpt_230_Output_valueType_OUTPUT_VALUE_HAZARD;
  static inline bool Output_valueType_IsValid(int value) {
    return Turn_rpt_230_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Turn_rpt_230_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Turn_rpt_230_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Turn_rpt_230_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Turn_rpt_230_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Turn_rpt_230_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Turn_rpt_230_Output_valueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFaultFieldNumber = 1,
    kPacmodFaultFieldNumber = 2,
    kOverrideActiveFieldNumber = 3,
    kOutputReportedFaultFieldNumber = 4,
    kInputOutputFaultFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kCommandOutputFaultFieldNumber = 7,
    kManualInputFieldNumber = 8,
    kCommandedValueFieldNumber = 9,
    kOutputValueFieldNumber = 10,
  };
  // optional bool vehicle_fault = 1;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 2;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 3;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 4;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 5;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 6;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 7;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional .apollo.canbus.Turn_rpt_230.Manual_inputType manual_input = 8;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Turn_rpt_230_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Turn_rpt_230_Manual_inputType value);
  private:
  ::apollo::canbus::Turn_rpt_230_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Turn_rpt_230_Manual_inputType value);
  public:

  // optional .apollo.canbus.Turn_rpt_230.Commanded_valueType commanded_value = 9;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Turn_rpt_230_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Turn_rpt_230_Commanded_valueType value);
  private:
  ::apollo::canbus::Turn_rpt_230_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Turn_rpt_230_Commanded_valueType value);
  public:

  // optional .apollo.canbus.Turn_rpt_230.Output_valueType output_value = 10;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Turn_rpt_230_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Turn_rpt_230_Output_valueType value);
  private:
  ::apollo::canbus::Turn_rpt_230_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Turn_rpt_230_Output_valueType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Turn_rpt_230)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  int manual_input_;
  int commanded_value_;
  int output_value_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Headlight_cmd_118 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Headlight_cmd_118) */ {
 public:
  Headlight_cmd_118();
  virtual ~Headlight_cmd_118();

  Headlight_cmd_118(const Headlight_cmd_118& from);
  Headlight_cmd_118(Headlight_cmd_118&& from) noexcept
    : Headlight_cmd_118() {
    *this = ::std::move(from);
  }

  inline Headlight_cmd_118& operator=(const Headlight_cmd_118& from) {
    CopyFrom(from);
    return *this;
  }
  inline Headlight_cmd_118& operator=(Headlight_cmd_118&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Headlight_cmd_118& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Headlight_cmd_118* internal_default_instance() {
    return reinterpret_cast<const Headlight_cmd_118*>(
               &_Headlight_cmd_118_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Headlight_cmd_118& a, Headlight_cmd_118& b) {
    a.Swap(&b);
  }
  inline void Swap(Headlight_cmd_118* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Headlight_cmd_118* New() const final {
    return CreateMaybeMessage<Headlight_cmd_118>(nullptr);
  }

  Headlight_cmd_118* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Headlight_cmd_118>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Headlight_cmd_118& from);
  void MergeFrom(const Headlight_cmd_118& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Headlight_cmd_118* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Headlight_cmd_118";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Headlight_cmd_118_Headlight_cmdType Headlight_cmdType;
  static constexpr Headlight_cmdType HEADLIGHT_CMD_HEADLIGHTS_OFF =
    Headlight_cmd_118_Headlight_cmdType_HEADLIGHT_CMD_HEADLIGHTS_OFF;
  static constexpr Headlight_cmdType HEADLIGHT_CMD_LOW_BEAMS =
    Headlight_cmd_118_Headlight_cmdType_HEADLIGHT_CMD_LOW_BEAMS;
  static constexpr Headlight_cmdType HEADLIGHT_CMD_HIGH_BEAMS =
    Headlight_cmd_118_Headlight_cmdType_HEADLIGHT_CMD_HIGH_BEAMS;
  static inline bool Headlight_cmdType_IsValid(int value) {
    return Headlight_cmd_118_Headlight_cmdType_IsValid(value);
  }
  static constexpr Headlight_cmdType Headlight_cmdType_MIN =
    Headlight_cmd_118_Headlight_cmdType_Headlight_cmdType_MIN;
  static constexpr Headlight_cmdType Headlight_cmdType_MAX =
    Headlight_cmd_118_Headlight_cmdType_Headlight_cmdType_MAX;
  static constexpr int Headlight_cmdType_ARRAYSIZE =
    Headlight_cmd_118_Headlight_cmdType_Headlight_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Headlight_cmdType_descriptor() {
    return Headlight_cmd_118_Headlight_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Headlight_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Headlight_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Headlight_cmdType_Name.");
    return Headlight_cmd_118_Headlight_cmdType_Name(enum_t_value);
  }
  static inline bool Headlight_cmdType_Parse(const std::string& name,
      Headlight_cmdType* value) {
    return Headlight_cmd_118_Headlight_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
    kHeadlightCmdFieldNumber = 5,
  };
  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // optional .apollo.canbus.Headlight_cmd_118.Headlight_cmdType headlight_cmd = 5;
  bool has_headlight_cmd() const;
  private:
  bool _internal_has_headlight_cmd() const;
  public:
  void clear_headlight_cmd();
  ::apollo::canbus::Headlight_cmd_118_Headlight_cmdType headlight_cmd() const;
  void set_headlight_cmd(::apollo::canbus::Headlight_cmd_118_Headlight_cmdType value);
  private:
  ::apollo::canbus::Headlight_cmd_118_Headlight_cmdType _internal_headlight_cmd() const;
  void _internal_set_headlight_cmd(::apollo::canbus::Headlight_cmd_118_Headlight_cmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Headlight_cmd_118)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  int headlight_cmd_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Door_rpt_417 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Door_rpt_417) */ {
 public:
  Door_rpt_417();
  virtual ~Door_rpt_417();

  Door_rpt_417(const Door_rpt_417& from);
  Door_rpt_417(Door_rpt_417&& from) noexcept
    : Door_rpt_417() {
    *this = ::std::move(from);
  }

  inline Door_rpt_417& operator=(const Door_rpt_417& from) {
    CopyFrom(from);
    return *this;
  }
  inline Door_rpt_417& operator=(Door_rpt_417&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Door_rpt_417& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Door_rpt_417* internal_default_instance() {
    return reinterpret_cast<const Door_rpt_417*>(
               &_Door_rpt_417_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Door_rpt_417& a, Door_rpt_417& b) {
    a.Swap(&b);
  }
  inline void Swap(Door_rpt_417* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Door_rpt_417* New() const final {
    return CreateMaybeMessage<Door_rpt_417>(nullptr);
  }

  Door_rpt_417* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Door_rpt_417>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Door_rpt_417& from);
  void MergeFrom(const Door_rpt_417& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Door_rpt_417* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Door_rpt_417";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuelDoorOpenIsValidFieldNumber = 1,
    kTrunkOpenIsValidFieldNumber = 2,
    kHoodOpenIsValidFieldNumber = 3,
    kRearPassDoorOpenIsValidFieldNumber = 4,
    kRearDriverDoorOpenIsValidFieldNumber = 5,
    kPassDoorOpenIsValidFieldNumber = 6,
    kDriverDoorOpenIsValidFieldNumber = 7,
    kFuelDoorOpenFieldNumber = 8,
    kTrunkOpenFieldNumber = 9,
    kHoodOpenFieldNumber = 10,
    kRearPassDoorOpenFieldNumber = 11,
    kRearDriverDoorOpenFieldNumber = 12,
    kPassDoorOpenFieldNumber = 13,
    kDriverDoorOpenFieldNumber = 14,
  };
  // optional bool fuel_door_open_is_valid = 1;
  bool has_fuel_door_open_is_valid() const;
  private:
  bool _internal_has_fuel_door_open_is_valid() const;
  public:
  void clear_fuel_door_open_is_valid();
  bool fuel_door_open_is_valid() const;
  void set_fuel_door_open_is_valid(bool value);
  private:
  bool _internal_fuel_door_open_is_valid() const;
  void _internal_set_fuel_door_open_is_valid(bool value);
  public:

  // optional bool trunk_open_is_valid = 2;
  bool has_trunk_open_is_valid() const;
  private:
  bool _internal_has_trunk_open_is_valid() const;
  public:
  void clear_trunk_open_is_valid();
  bool trunk_open_is_valid() const;
  void set_trunk_open_is_valid(bool value);
  private:
  bool _internal_trunk_open_is_valid() const;
  void _internal_set_trunk_open_is_valid(bool value);
  public:

  // optional bool hood_open_is_valid = 3;
  bool has_hood_open_is_valid() const;
  private:
  bool _internal_has_hood_open_is_valid() const;
  public:
  void clear_hood_open_is_valid();
  bool hood_open_is_valid() const;
  void set_hood_open_is_valid(bool value);
  private:
  bool _internal_hood_open_is_valid() const;
  void _internal_set_hood_open_is_valid(bool value);
  public:

  // optional bool rear_pass_door_open_is_valid = 4;
  bool has_rear_pass_door_open_is_valid() const;
  private:
  bool _internal_has_rear_pass_door_open_is_valid() const;
  public:
  void clear_rear_pass_door_open_is_valid();
  bool rear_pass_door_open_is_valid() const;
  void set_rear_pass_door_open_is_valid(bool value);
  private:
  bool _internal_rear_pass_door_open_is_valid() const;
  void _internal_set_rear_pass_door_open_is_valid(bool value);
  public:

  // optional bool rear_driver_door_open_is_valid = 5;
  bool has_rear_driver_door_open_is_valid() const;
  private:
  bool _internal_has_rear_driver_door_open_is_valid() const;
  public:
  void clear_rear_driver_door_open_is_valid();
  bool rear_driver_door_open_is_valid() const;
  void set_rear_driver_door_open_is_valid(bool value);
  private:
  bool _internal_rear_driver_door_open_is_valid() const;
  void _internal_set_rear_driver_door_open_is_valid(bool value);
  public:

  // optional bool pass_door_open_is_valid = 6;
  bool has_pass_door_open_is_valid() const;
  private:
  bool _internal_has_pass_door_open_is_valid() const;
  public:
  void clear_pass_door_open_is_valid();
  bool pass_door_open_is_valid() const;
  void set_pass_door_open_is_valid(bool value);
  private:
  bool _internal_pass_door_open_is_valid() const;
  void _internal_set_pass_door_open_is_valid(bool value);
  public:

  // optional bool driver_door_open_is_valid = 7;
  bool has_driver_door_open_is_valid() const;
  private:
  bool _internal_has_driver_door_open_is_valid() const;
  public:
  void clear_driver_door_open_is_valid();
  bool driver_door_open_is_valid() const;
  void set_driver_door_open_is_valid(bool value);
  private:
  bool _internal_driver_door_open_is_valid() const;
  void _internal_set_driver_door_open_is_valid(bool value);
  public:

  // optional bool fuel_door_open = 8;
  bool has_fuel_door_open() const;
  private:
  bool _internal_has_fuel_door_open() const;
  public:
  void clear_fuel_door_open();
  bool fuel_door_open() const;
  void set_fuel_door_open(bool value);
  private:
  bool _internal_fuel_door_open() const;
  void _internal_set_fuel_door_open(bool value);
  public:

  // optional bool trunk_open = 9;
  bool has_trunk_open() const;
  private:
  bool _internal_has_trunk_open() const;
  public:
  void clear_trunk_open();
  bool trunk_open() const;
  void set_trunk_open(bool value);
  private:
  bool _internal_trunk_open() const;
  void _internal_set_trunk_open(bool value);
  public:

  // optional bool hood_open = 10;
  bool has_hood_open() const;
  private:
  bool _internal_has_hood_open() const;
  public:
  void clear_hood_open();
  bool hood_open() const;
  void set_hood_open(bool value);
  private:
  bool _internal_hood_open() const;
  void _internal_set_hood_open(bool value);
  public:

  // optional bool rear_pass_door_open = 11;
  bool has_rear_pass_door_open() const;
  private:
  bool _internal_has_rear_pass_door_open() const;
  public:
  void clear_rear_pass_door_open();
  bool rear_pass_door_open() const;
  void set_rear_pass_door_open(bool value);
  private:
  bool _internal_rear_pass_door_open() const;
  void _internal_set_rear_pass_door_open(bool value);
  public:

  // optional bool rear_driver_door_open = 12;
  bool has_rear_driver_door_open() const;
  private:
  bool _internal_has_rear_driver_door_open() const;
  public:
  void clear_rear_driver_door_open();
  bool rear_driver_door_open() const;
  void set_rear_driver_door_open(bool value);
  private:
  bool _internal_rear_driver_door_open() const;
  void _internal_set_rear_driver_door_open(bool value);
  public:

  // optional bool pass_door_open = 13;
  bool has_pass_door_open() const;
  private:
  bool _internal_has_pass_door_open() const;
  public:
  void clear_pass_door_open();
  bool pass_door_open() const;
  void set_pass_door_open(bool value);
  private:
  bool _internal_pass_door_open() const;
  void _internal_set_pass_door_open(bool value);
  public:

  // optional bool driver_door_open = 14;
  bool has_driver_door_open() const;
  private:
  bool _internal_has_driver_door_open() const;
  public:
  void clear_driver_door_open();
  bool driver_door_open() const;
  void set_driver_door_open(bool value);
  private:
  bool _internal_driver_door_open() const;
  void _internal_set_driver_door_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Door_rpt_417)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool fuel_door_open_is_valid_;
  bool trunk_open_is_valid_;
  bool hood_open_is_valid_;
  bool rear_pass_door_open_is_valid_;
  bool rear_driver_door_open_is_valid_;
  bool pass_door_open_is_valid_;
  bool driver_door_open_is_valid_;
  bool fuel_door_open_;
  bool trunk_open_;
  bool hood_open_;
  bool rear_pass_door_open_;
  bool rear_driver_door_open_;
  bool pass_door_open_;
  bool driver_door_open_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Component_rpt_20 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Component_rpt_20) */ {
 public:
  Component_rpt_20();
  virtual ~Component_rpt_20();

  Component_rpt_20(const Component_rpt_20& from);
  Component_rpt_20(Component_rpt_20&& from) noexcept
    : Component_rpt_20() {
    *this = ::std::move(from);
  }

  inline Component_rpt_20& operator=(const Component_rpt_20& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component_rpt_20& operator=(Component_rpt_20&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component_rpt_20& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component_rpt_20* internal_default_instance() {
    return reinterpret_cast<const Component_rpt_20*>(
               &_Component_rpt_20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Component_rpt_20& a, Component_rpt_20& b) {
    a.Swap(&b);
  }
  inline void Swap(Component_rpt_20* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component_rpt_20* New() const final {
    return CreateMaybeMessage<Component_rpt_20>(nullptr);
  }

  Component_rpt_20* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component_rpt_20>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component_rpt_20& from);
  void MergeFrom(const Component_rpt_20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component_rpt_20* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Component_rpt_20";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Component_rpt_20_Component_typeType Component_typeType;
  static constexpr Component_typeType COMPONENT_TYPE_PACMOD =
    Component_rpt_20_Component_typeType_COMPONENT_TYPE_PACMOD;
  static constexpr Component_typeType COMPONENT_TYPE_PACMINI =
    Component_rpt_20_Component_typeType_COMPONENT_TYPE_PACMINI;
  static constexpr Component_typeType COMPONENT_TYPE_PACMICRO =
    Component_rpt_20_Component_typeType_COMPONENT_TYPE_PACMICRO;
  static inline bool Component_typeType_IsValid(int value) {
    return Component_rpt_20_Component_typeType_IsValid(value);
  }
  static constexpr Component_typeType Component_typeType_MIN =
    Component_rpt_20_Component_typeType_Component_typeType_MIN;
  static constexpr Component_typeType Component_typeType_MAX =
    Component_rpt_20_Component_typeType_Component_typeType_MAX;
  static constexpr int Component_typeType_ARRAYSIZE =
    Component_rpt_20_Component_typeType_Component_typeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Component_typeType_descriptor() {
    return Component_rpt_20_Component_typeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Component_typeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Component_typeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Component_typeType_Name.");
    return Component_rpt_20_Component_typeType_Name(enum_t_value);
  }
  static inline bool Component_typeType_Parse(const std::string& name,
      Component_typeType* value) {
    return Component_rpt_20_Component_typeType_Parse(name, value);
  }

  typedef Component_rpt_20_Component_funcType Component_funcType;
  static constexpr Component_funcType COMPONENT_FUNC_PACMOD =
    Component_rpt_20_Component_funcType_COMPONENT_FUNC_PACMOD;
  static constexpr Component_funcType COMPONENT_FUNC_STEERING_AND_STEERING_COLUMN =
    Component_rpt_20_Component_funcType_COMPONENT_FUNC_STEERING_AND_STEERING_COLUMN;
  static constexpr Component_funcType COMPONENT_FUNC_ACCELERATOR_AND_BRAKING =
    Component_rpt_20_Component_funcType_COMPONENT_FUNC_ACCELERATOR_AND_BRAKING;
  static constexpr Component_funcType COMPONENT_FUNC_BRAKING =
    Component_rpt_20_Component_funcType_COMPONENT_FUNC_BRAKING;
  static constexpr Component_funcType COMPONENT_FUNC_SHIFTING =
    Component_rpt_20_Component_funcType_COMPONENT_FUNC_SHIFTING;
  static constexpr Component_funcType COMPONENT_FUNC_STEERING =
    Component_rpt_20_Component_funcType_COMPONENT_FUNC_STEERING;
  static constexpr Component_funcType COMPONENT_FUNC_E_SHIFTER =
    Component_rpt_20_Component_funcType_COMPONENT_FUNC_E_SHIFTER;
  static constexpr Component_funcType COMPONENT_FUNC_WATCHDOG =
    Component_rpt_20_Component_funcType_COMPONENT_FUNC_WATCHDOG;
  static inline bool Component_funcType_IsValid(int value) {
    return Component_rpt_20_Component_funcType_IsValid(value);
  }
  static constexpr Component_funcType Component_funcType_MIN =
    Component_rpt_20_Component_funcType_Component_funcType_MIN;
  static constexpr Component_funcType Component_funcType_MAX =
    Component_rpt_20_Component_funcType_Component_funcType_MAX;
  static constexpr int Component_funcType_ARRAYSIZE =
    Component_rpt_20_Component_funcType_Component_funcType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Component_funcType_descriptor() {
    return Component_rpt_20_Component_funcType_descriptor();
  }
  template<typename T>
  static inline const std::string& Component_funcType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Component_funcType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Component_funcType_Name.");
    return Component_rpt_20_Component_funcType_Name(enum_t_value);
  }
  static inline bool Component_funcType_Parse(const std::string& name,
      Component_funcType* value) {
    return Component_rpt_20_Component_funcType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentTypeFieldNumber = 1,
    kComponentFuncFieldNumber = 2,
    kCounterFieldNumber = 3,
    kComplementFieldNumber = 4,
    kConfigFaultFieldNumber = 5,
  };
  // optional .apollo.canbus.Component_rpt_20.Component_typeType component_type = 1;
  bool has_component_type() const;
  private:
  bool _internal_has_component_type() const;
  public:
  void clear_component_type();
  ::apollo::canbus::Component_rpt_20_Component_typeType component_type() const;
  void set_component_type(::apollo::canbus::Component_rpt_20_Component_typeType value);
  private:
  ::apollo::canbus::Component_rpt_20_Component_typeType _internal_component_type() const;
  void _internal_set_component_type(::apollo::canbus::Component_rpt_20_Component_typeType value);
  public:

  // optional .apollo.canbus.Component_rpt_20.Component_funcType component_func = 2;
  bool has_component_func() const;
  private:
  bool _internal_has_component_func() const;
  public:
  void clear_component_func();
  ::apollo::canbus::Component_rpt_20_Component_funcType component_func() const;
  void set_component_func(::apollo::canbus::Component_rpt_20_Component_funcType value);
  private:
  ::apollo::canbus::Component_rpt_20_Component_funcType _internal_component_func() const;
  void _internal_set_component_func(::apollo::canbus::Component_rpt_20_Component_funcType value);
  public:

  // optional int32 counter = 3;
  bool has_counter() const;
  private:
  bool _internal_has_counter() const;
  public:
  void clear_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 counter() const;
  void set_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_counter() const;
  void _internal_set_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 complement = 4;
  bool has_complement() const;
  private:
  bool _internal_has_complement() const;
  public:
  void clear_complement();
  ::PROTOBUF_NAMESPACE_ID::int32 complement() const;
  void set_complement(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_complement() const;
  void _internal_set_complement(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool config_fault = 5;
  bool has_config_fault() const;
  private:
  bool _internal_has_config_fault() const;
  public:
  void clear_config_fault();
  bool config_fault() const;
  void set_config_fault(bool value);
  private:
  bool _internal_config_fault() const;
  void _internal_set_config_fault(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Component_rpt_20)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int component_type_;
  int component_func_;
  ::PROTOBUF_NAMESPACE_ID::int32 counter_;
  ::PROTOBUF_NAMESPACE_ID::int32 complement_;
  bool config_fault_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Wheel_speed_rpt_407 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Wheel_speed_rpt_407) */ {
 public:
  Wheel_speed_rpt_407();
  virtual ~Wheel_speed_rpt_407();

  Wheel_speed_rpt_407(const Wheel_speed_rpt_407& from);
  Wheel_speed_rpt_407(Wheel_speed_rpt_407&& from) noexcept
    : Wheel_speed_rpt_407() {
    *this = ::std::move(from);
  }

  inline Wheel_speed_rpt_407& operator=(const Wheel_speed_rpt_407& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wheel_speed_rpt_407& operator=(Wheel_speed_rpt_407&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wheel_speed_rpt_407& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wheel_speed_rpt_407* internal_default_instance() {
    return reinterpret_cast<const Wheel_speed_rpt_407*>(
               &_Wheel_speed_rpt_407_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Wheel_speed_rpt_407& a, Wheel_speed_rpt_407& b) {
    a.Swap(&b);
  }
  inline void Swap(Wheel_speed_rpt_407* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wheel_speed_rpt_407* New() const final {
    return CreateMaybeMessage<Wheel_speed_rpt_407>(nullptr);
  }

  Wheel_speed_rpt_407* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wheel_speed_rpt_407>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wheel_speed_rpt_407& from);
  void MergeFrom(const Wheel_speed_rpt_407& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wheel_speed_rpt_407* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Wheel_speed_rpt_407";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWheelSpdRearRightFieldNumber = 1,
    kWheelSpdRearLeftFieldNumber = 2,
    kWheelSpdFrontRightFieldNumber = 3,
    kWheelSpdFrontLeftFieldNumber = 4,
  };
  // optional double wheel_spd_rear_right = 1;
  bool has_wheel_spd_rear_right() const;
  private:
  bool _internal_has_wheel_spd_rear_right() const;
  public:
  void clear_wheel_spd_rear_right();
  double wheel_spd_rear_right() const;
  void set_wheel_spd_rear_right(double value);
  private:
  double _internal_wheel_spd_rear_right() const;
  void _internal_set_wheel_spd_rear_right(double value);
  public:

  // optional double wheel_spd_rear_left = 2;
  bool has_wheel_spd_rear_left() const;
  private:
  bool _internal_has_wheel_spd_rear_left() const;
  public:
  void clear_wheel_spd_rear_left();
  double wheel_spd_rear_left() const;
  void set_wheel_spd_rear_left(double value);
  private:
  double _internal_wheel_spd_rear_left() const;
  void _internal_set_wheel_spd_rear_left(double value);
  public:

  // optional double wheel_spd_front_right = 3;
  bool has_wheel_spd_front_right() const;
  private:
  bool _internal_has_wheel_spd_front_right() const;
  public:
  void clear_wheel_spd_front_right();
  double wheel_spd_front_right() const;
  void set_wheel_spd_front_right(double value);
  private:
  double _internal_wheel_spd_front_right() const;
  void _internal_set_wheel_spd_front_right(double value);
  public:

  // optional double wheel_spd_front_left = 4;
  bool has_wheel_spd_front_left() const;
  private:
  bool _internal_has_wheel_spd_front_left() const;
  public:
  void clear_wheel_spd_front_left();
  double wheel_spd_front_left() const;
  void set_wheel_spd_front_left(double value);
  private:
  double _internal_wheel_spd_front_left() const;
  void _internal_set_wheel_spd_front_left(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Wheel_speed_rpt_407)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double wheel_spd_rear_right_;
  double wheel_spd_rear_left_;
  double wheel_spd_front_right_;
  double wheel_spd_front_left_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Steering_motor_rpt_3_406 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steering_motor_rpt_3_406) */ {
 public:
  Steering_motor_rpt_3_406();
  virtual ~Steering_motor_rpt_3_406();

  Steering_motor_rpt_3_406(const Steering_motor_rpt_3_406& from);
  Steering_motor_rpt_3_406(Steering_motor_rpt_3_406&& from) noexcept
    : Steering_motor_rpt_3_406() {
    *this = ::std::move(from);
  }

  inline Steering_motor_rpt_3_406& operator=(const Steering_motor_rpt_3_406& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steering_motor_rpt_3_406& operator=(Steering_motor_rpt_3_406&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Steering_motor_rpt_3_406& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Steering_motor_rpt_3_406* internal_default_instance() {
    return reinterpret_cast<const Steering_motor_rpt_3_406*>(
               &_Steering_motor_rpt_3_406_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Steering_motor_rpt_3_406& a, Steering_motor_rpt_3_406& b) {
    a.Swap(&b);
  }
  inline void Swap(Steering_motor_rpt_3_406* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Steering_motor_rpt_3_406* New() const final {
    return CreateMaybeMessage<Steering_motor_rpt_3_406>(nullptr);
  }

  Steering_motor_rpt_3_406* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Steering_motor_rpt_3_406>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Steering_motor_rpt_3_406& from);
  void MergeFrom(const Steering_motor_rpt_3_406& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steering_motor_rpt_3_406* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steering_motor_rpt_3_406";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorqueOutputFieldNumber = 1,
    kTorqueInputFieldNumber = 2,
  };
  // optional double torque_output = 1;
  bool has_torque_output() const;
  private:
  bool _internal_has_torque_output() const;
  public:
  void clear_torque_output();
  double torque_output() const;
  void set_torque_output(double value);
  private:
  double _internal_torque_output() const;
  void _internal_set_torque_output(double value);
  public:

  // optional double torque_input = 2;
  bool has_torque_input() const;
  private:
  bool _internal_has_torque_input() const;
  public:
  void clear_torque_input();
  double torque_input() const;
  void set_torque_input(double value);
  private:
  double _internal_torque_input() const;
  void _internal_set_torque_input(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steering_motor_rpt_3_406)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double torque_output_;
  double torque_input_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Steering_motor_rpt_2_405 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steering_motor_rpt_2_405) */ {
 public:
  Steering_motor_rpt_2_405();
  virtual ~Steering_motor_rpt_2_405();

  Steering_motor_rpt_2_405(const Steering_motor_rpt_2_405& from);
  Steering_motor_rpt_2_405(Steering_motor_rpt_2_405&& from) noexcept
    : Steering_motor_rpt_2_405() {
    *this = ::std::move(from);
  }

  inline Steering_motor_rpt_2_405& operator=(const Steering_motor_rpt_2_405& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steering_motor_rpt_2_405& operator=(Steering_motor_rpt_2_405&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Steering_motor_rpt_2_405& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Steering_motor_rpt_2_405* internal_default_instance() {
    return reinterpret_cast<const Steering_motor_rpt_2_405*>(
               &_Steering_motor_rpt_2_405_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Steering_motor_rpt_2_405& a, Steering_motor_rpt_2_405& b) {
    a.Swap(&b);
  }
  inline void Swap(Steering_motor_rpt_2_405* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Steering_motor_rpt_2_405* New() const final {
    return CreateMaybeMessage<Steering_motor_rpt_2_405>(nullptr);
  }

  Steering_motor_rpt_2_405* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Steering_motor_rpt_2_405>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Steering_motor_rpt_2_405& from);
  void MergeFrom(const Steering_motor_rpt_2_405& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steering_motor_rpt_2_405* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steering_motor_rpt_2_405";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncoderTemperatureFieldNumber = 1,
    kMotorTemperatureFieldNumber = 2,
    kAngularSpeedFieldNumber = 3,
  };
  // optional int32 encoder_temperature = 1;
  bool has_encoder_temperature() const;
  private:
  bool _internal_has_encoder_temperature() const;
  public:
  void clear_encoder_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 encoder_temperature() const;
  void set_encoder_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_encoder_temperature() const;
  void _internal_set_encoder_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 motor_temperature = 2;
  bool has_motor_temperature() const;
  private:
  bool _internal_has_motor_temperature() const;
  public:
  void clear_motor_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 motor_temperature() const;
  void set_motor_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_motor_temperature() const;
  void _internal_set_motor_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double angular_speed = 3;
  bool has_angular_speed() const;
  private:
  bool _internal_has_angular_speed() const;
  public:
  void clear_angular_speed();
  double angular_speed() const;
  void set_angular_speed(double value);
  private:
  double _internal_angular_speed() const;
  void _internal_set_angular_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steering_motor_rpt_2_405)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 encoder_temperature_;
  ::PROTOBUF_NAMESPACE_ID::int32 motor_temperature_;
  double angular_speed_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Steering_motor_rpt_1_404 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steering_motor_rpt_1_404) */ {
 public:
  Steering_motor_rpt_1_404();
  virtual ~Steering_motor_rpt_1_404();

  Steering_motor_rpt_1_404(const Steering_motor_rpt_1_404& from);
  Steering_motor_rpt_1_404(Steering_motor_rpt_1_404&& from) noexcept
    : Steering_motor_rpt_1_404() {
    *this = ::std::move(from);
  }

  inline Steering_motor_rpt_1_404& operator=(const Steering_motor_rpt_1_404& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steering_motor_rpt_1_404& operator=(Steering_motor_rpt_1_404&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Steering_motor_rpt_1_404& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Steering_motor_rpt_1_404* internal_default_instance() {
    return reinterpret_cast<const Steering_motor_rpt_1_404*>(
               &_Steering_motor_rpt_1_404_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Steering_motor_rpt_1_404& a, Steering_motor_rpt_1_404& b) {
    a.Swap(&b);
  }
  inline void Swap(Steering_motor_rpt_1_404* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Steering_motor_rpt_1_404* New() const final {
    return CreateMaybeMessage<Steering_motor_rpt_1_404>(nullptr);
  }

  Steering_motor_rpt_1_404* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Steering_motor_rpt_1_404>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Steering_motor_rpt_1_404& from);
  void MergeFrom(const Steering_motor_rpt_1_404& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steering_motor_rpt_1_404* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steering_motor_rpt_1_404";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorCurrentFieldNumber = 1,
    kShaftPositionFieldNumber = 2,
  };
  // optional double motor_current = 1;
  bool has_motor_current() const;
  private:
  bool _internal_has_motor_current() const;
  public:
  void clear_motor_current();
  double motor_current() const;
  void set_motor_current(double value);
  private:
  double _internal_motor_current() const;
  void _internal_set_motor_current(double value);
  public:

  // optional double shaft_position = 2;
  bool has_shaft_position() const;
  private:
  bool _internal_has_shaft_position() const;
  public:
  void clear_shaft_position();
  double shaft_position() const;
  void set_shaft_position(double value);
  private:
  double _internal_shaft_position() const;
  void _internal_set_shaft_position(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steering_motor_rpt_1_404)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double motor_current_;
  double shaft_position_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Brake_motor_rpt_3_403 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_motor_rpt_3_403) */ {
 public:
  Brake_motor_rpt_3_403();
  virtual ~Brake_motor_rpt_3_403();

  Brake_motor_rpt_3_403(const Brake_motor_rpt_3_403& from);
  Brake_motor_rpt_3_403(Brake_motor_rpt_3_403&& from) noexcept
    : Brake_motor_rpt_3_403() {
    *this = ::std::move(from);
  }

  inline Brake_motor_rpt_3_403& operator=(const Brake_motor_rpt_3_403& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_motor_rpt_3_403& operator=(Brake_motor_rpt_3_403&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brake_motor_rpt_3_403& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brake_motor_rpt_3_403* internal_default_instance() {
    return reinterpret_cast<const Brake_motor_rpt_3_403*>(
               &_Brake_motor_rpt_3_403_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Brake_motor_rpt_3_403& a, Brake_motor_rpt_3_403& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_motor_rpt_3_403* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brake_motor_rpt_3_403* New() const final {
    return CreateMaybeMessage<Brake_motor_rpt_3_403>(nullptr);
  }

  Brake_motor_rpt_3_403* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brake_motor_rpt_3_403>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brake_motor_rpt_3_403& from);
  void MergeFrom(const Brake_motor_rpt_3_403& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_motor_rpt_3_403* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_motor_rpt_3_403";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorqueOutputFieldNumber = 1,
    kTorqueInputFieldNumber = 2,
  };
  // optional double torque_output = 1;
  bool has_torque_output() const;
  private:
  bool _internal_has_torque_output() const;
  public:
  void clear_torque_output();
  double torque_output() const;
  void set_torque_output(double value);
  private:
  double _internal_torque_output() const;
  void _internal_set_torque_output(double value);
  public:

  // optional double torque_input = 2;
  bool has_torque_input() const;
  private:
  bool _internal_has_torque_input() const;
  public:
  void clear_torque_input();
  double torque_input() const;
  void set_torque_input(double value);
  private:
  double _internal_torque_input() const;
  void _internal_set_torque_input(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_motor_rpt_3_403)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double torque_output_;
  double torque_input_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Brake_motor_rpt_2_402 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_motor_rpt_2_402) */ {
 public:
  Brake_motor_rpt_2_402();
  virtual ~Brake_motor_rpt_2_402();

  Brake_motor_rpt_2_402(const Brake_motor_rpt_2_402& from);
  Brake_motor_rpt_2_402(Brake_motor_rpt_2_402&& from) noexcept
    : Brake_motor_rpt_2_402() {
    *this = ::std::move(from);
  }

  inline Brake_motor_rpt_2_402& operator=(const Brake_motor_rpt_2_402& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_motor_rpt_2_402& operator=(Brake_motor_rpt_2_402&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brake_motor_rpt_2_402& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brake_motor_rpt_2_402* internal_default_instance() {
    return reinterpret_cast<const Brake_motor_rpt_2_402*>(
               &_Brake_motor_rpt_2_402_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Brake_motor_rpt_2_402& a, Brake_motor_rpt_2_402& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_motor_rpt_2_402* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brake_motor_rpt_2_402* New() const final {
    return CreateMaybeMessage<Brake_motor_rpt_2_402>(nullptr);
  }

  Brake_motor_rpt_2_402* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brake_motor_rpt_2_402>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brake_motor_rpt_2_402& from);
  void MergeFrom(const Brake_motor_rpt_2_402& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_motor_rpt_2_402* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_motor_rpt_2_402";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncoderTemperatureFieldNumber = 1,
    kMotorTemperatureFieldNumber = 2,
    kAngularSpeedFieldNumber = 3,
  };
  // optional int32 encoder_temperature = 1;
  bool has_encoder_temperature() const;
  private:
  bool _internal_has_encoder_temperature() const;
  public:
  void clear_encoder_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 encoder_temperature() const;
  void set_encoder_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_encoder_temperature() const;
  void _internal_set_encoder_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 motor_temperature = 2;
  bool has_motor_temperature() const;
  private:
  bool _internal_has_motor_temperature() const;
  public:
  void clear_motor_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 motor_temperature() const;
  void set_motor_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_motor_temperature() const;
  void _internal_set_motor_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double angular_speed = 3;
  bool has_angular_speed() const;
  private:
  bool _internal_has_angular_speed() const;
  public:
  void clear_angular_speed();
  double angular_speed() const;
  void set_angular_speed(double value);
  private:
  double _internal_angular_speed() const;
  void _internal_set_angular_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_motor_rpt_2_402)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 encoder_temperature_;
  ::PROTOBUF_NAMESPACE_ID::int32 motor_temperature_;
  double angular_speed_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Brake_motor_rpt_1_401 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_motor_rpt_1_401) */ {
 public:
  Brake_motor_rpt_1_401();
  virtual ~Brake_motor_rpt_1_401();

  Brake_motor_rpt_1_401(const Brake_motor_rpt_1_401& from);
  Brake_motor_rpt_1_401(Brake_motor_rpt_1_401&& from) noexcept
    : Brake_motor_rpt_1_401() {
    *this = ::std::move(from);
  }

  inline Brake_motor_rpt_1_401& operator=(const Brake_motor_rpt_1_401& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_motor_rpt_1_401& operator=(Brake_motor_rpt_1_401&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brake_motor_rpt_1_401& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brake_motor_rpt_1_401* internal_default_instance() {
    return reinterpret_cast<const Brake_motor_rpt_1_401*>(
               &_Brake_motor_rpt_1_401_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Brake_motor_rpt_1_401& a, Brake_motor_rpt_1_401& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_motor_rpt_1_401* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brake_motor_rpt_1_401* New() const final {
    return CreateMaybeMessage<Brake_motor_rpt_1_401>(nullptr);
  }

  Brake_motor_rpt_1_401* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brake_motor_rpt_1_401>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brake_motor_rpt_1_401& from);
  void MergeFrom(const Brake_motor_rpt_1_401& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_motor_rpt_1_401* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_motor_rpt_1_401";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorCurrentFieldNumber = 1,
    kShaftPositionFieldNumber = 2,
  };
  // optional double motor_current = 1;
  bool has_motor_current() const;
  private:
  bool _internal_has_motor_current() const;
  public:
  void clear_motor_current();
  double motor_current() const;
  void set_motor_current(double value);
  private:
  double _internal_motor_current() const;
  void _internal_set_motor_current(double value);
  public:

  // optional double shaft_position = 2;
  bool has_shaft_position() const;
  private:
  bool _internal_has_shaft_position() const;
  public:
  void clear_shaft_position();
  double shaft_position() const;
  void set_shaft_position(double value);
  private:
  double _internal_shaft_position() const;
  void _internal_set_shaft_position(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_motor_rpt_1_401)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double motor_current_;
  double shaft_position_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Wiper_aux_rpt_334 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Wiper_aux_rpt_334) */ {
 public:
  Wiper_aux_rpt_334();
  virtual ~Wiper_aux_rpt_334();

  Wiper_aux_rpt_334(const Wiper_aux_rpt_334& from);
  Wiper_aux_rpt_334(Wiper_aux_rpt_334&& from) noexcept
    : Wiper_aux_rpt_334() {
    *this = ::std::move(from);
  }

  inline Wiper_aux_rpt_334& operator=(const Wiper_aux_rpt_334& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wiper_aux_rpt_334& operator=(Wiper_aux_rpt_334&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wiper_aux_rpt_334& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wiper_aux_rpt_334* internal_default_instance() {
    return reinterpret_cast<const Wiper_aux_rpt_334*>(
               &_Wiper_aux_rpt_334_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Wiper_aux_rpt_334& a, Wiper_aux_rpt_334& b) {
    a.Swap(&b);
  }
  inline void Swap(Wiper_aux_rpt_334* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wiper_aux_rpt_334* New() const final {
    return CreateMaybeMessage<Wiper_aux_rpt_334>(nullptr);
  }

  Wiper_aux_rpt_334* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wiper_aux_rpt_334>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wiper_aux_rpt_334& from);
  void MergeFrom(const Wiper_aux_rpt_334& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wiper_aux_rpt_334* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Wiper_aux_rpt_334";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSprayEmptyIsValidFieldNumber = 1,
    kSprayEmptyFieldNumber = 2,
    kSprayNearEmptyIsValidFieldNumber = 3,
    kSprayNearEmptyFieldNumber = 4,
    kRearSprayingIsValidFieldNumber = 5,
    kRearSprayingFieldNumber = 6,
    kRearWipingIsValidFieldNumber = 7,
    kRearWipingFieldNumber = 8,
    kFrontSprayingIsValidFieldNumber = 9,
    kFrontSprayingFieldNumber = 10,
    kFrontWipingIsValidFieldNumber = 11,
    kFrontWipingFieldNumber = 12,
  };
  // optional bool spray_empty_is_valid = 1;
  bool has_spray_empty_is_valid() const;
  private:
  bool _internal_has_spray_empty_is_valid() const;
  public:
  void clear_spray_empty_is_valid();
  bool spray_empty_is_valid() const;
  void set_spray_empty_is_valid(bool value);
  private:
  bool _internal_spray_empty_is_valid() const;
  void _internal_set_spray_empty_is_valid(bool value);
  public:

  // optional bool spray_empty = 2;
  bool has_spray_empty() const;
  private:
  bool _internal_has_spray_empty() const;
  public:
  void clear_spray_empty();
  bool spray_empty() const;
  void set_spray_empty(bool value);
  private:
  bool _internal_spray_empty() const;
  void _internal_set_spray_empty(bool value);
  public:

  // optional bool spray_near_empty_is_valid = 3;
  bool has_spray_near_empty_is_valid() const;
  private:
  bool _internal_has_spray_near_empty_is_valid() const;
  public:
  void clear_spray_near_empty_is_valid();
  bool spray_near_empty_is_valid() const;
  void set_spray_near_empty_is_valid(bool value);
  private:
  bool _internal_spray_near_empty_is_valid() const;
  void _internal_set_spray_near_empty_is_valid(bool value);
  public:

  // optional bool spray_near_empty = 4;
  bool has_spray_near_empty() const;
  private:
  bool _internal_has_spray_near_empty() const;
  public:
  void clear_spray_near_empty();
  bool spray_near_empty() const;
  void set_spray_near_empty(bool value);
  private:
  bool _internal_spray_near_empty() const;
  void _internal_set_spray_near_empty(bool value);
  public:

  // optional bool rear_spraying_is_valid = 5;
  bool has_rear_spraying_is_valid() const;
  private:
  bool _internal_has_rear_spraying_is_valid() const;
  public:
  void clear_rear_spraying_is_valid();
  bool rear_spraying_is_valid() const;
  void set_rear_spraying_is_valid(bool value);
  private:
  bool _internal_rear_spraying_is_valid() const;
  void _internal_set_rear_spraying_is_valid(bool value);
  public:

  // optional bool rear_spraying = 6;
  bool has_rear_spraying() const;
  private:
  bool _internal_has_rear_spraying() const;
  public:
  void clear_rear_spraying();
  bool rear_spraying() const;
  void set_rear_spraying(bool value);
  private:
  bool _internal_rear_spraying() const;
  void _internal_set_rear_spraying(bool value);
  public:

  // optional bool rear_wiping_is_valid = 7;
  bool has_rear_wiping_is_valid() const;
  private:
  bool _internal_has_rear_wiping_is_valid() const;
  public:
  void clear_rear_wiping_is_valid();
  bool rear_wiping_is_valid() const;
  void set_rear_wiping_is_valid(bool value);
  private:
  bool _internal_rear_wiping_is_valid() const;
  void _internal_set_rear_wiping_is_valid(bool value);
  public:

  // optional bool rear_wiping = 8;
  bool has_rear_wiping() const;
  private:
  bool _internal_has_rear_wiping() const;
  public:
  void clear_rear_wiping();
  bool rear_wiping() const;
  void set_rear_wiping(bool value);
  private:
  bool _internal_rear_wiping() const;
  void _internal_set_rear_wiping(bool value);
  public:

  // optional bool front_spraying_is_valid = 9;
  bool has_front_spraying_is_valid() const;
  private:
  bool _internal_has_front_spraying_is_valid() const;
  public:
  void clear_front_spraying_is_valid();
  bool front_spraying_is_valid() const;
  void set_front_spraying_is_valid(bool value);
  private:
  bool _internal_front_spraying_is_valid() const;
  void _internal_set_front_spraying_is_valid(bool value);
  public:

  // optional bool front_spraying = 10;
  bool has_front_spraying() const;
  private:
  bool _internal_has_front_spraying() const;
  public:
  void clear_front_spraying();
  bool front_spraying() const;
  void set_front_spraying(bool value);
  private:
  bool _internal_front_spraying() const;
  void _internal_set_front_spraying(bool value);
  public:

  // optional bool front_wiping_is_valid = 11;
  bool has_front_wiping_is_valid() const;
  private:
  bool _internal_has_front_wiping_is_valid() const;
  public:
  void clear_front_wiping_is_valid();
  bool front_wiping_is_valid() const;
  void set_front_wiping_is_valid(bool value);
  private:
  bool _internal_front_wiping_is_valid() const;
  void _internal_set_front_wiping_is_valid(bool value);
  public:

  // optional bool front_wiping = 12;
  bool has_front_wiping() const;
  private:
  bool _internal_has_front_wiping() const;
  public:
  void clear_front_wiping();
  bool front_wiping() const;
  void set_front_wiping(bool value);
  private:
  bool _internal_front_wiping() const;
  void _internal_set_front_wiping(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Wiper_aux_rpt_334)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool spray_empty_is_valid_;
  bool spray_empty_;
  bool spray_near_empty_is_valid_;
  bool spray_near_empty_;
  bool rear_spraying_is_valid_;
  bool rear_spraying_;
  bool rear_wiping_is_valid_;
  bool rear_wiping_;
  bool front_spraying_is_valid_;
  bool front_spraying_;
  bool front_wiping_is_valid_;
  bool front_wiping_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Shift_aux_rpt_328 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Shift_aux_rpt_328) */ {
 public:
  Shift_aux_rpt_328();
  virtual ~Shift_aux_rpt_328();

  Shift_aux_rpt_328(const Shift_aux_rpt_328& from);
  Shift_aux_rpt_328(Shift_aux_rpt_328&& from) noexcept
    : Shift_aux_rpt_328() {
    *this = ::std::move(from);
  }

  inline Shift_aux_rpt_328& operator=(const Shift_aux_rpt_328& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shift_aux_rpt_328& operator=(Shift_aux_rpt_328&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shift_aux_rpt_328& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shift_aux_rpt_328* internal_default_instance() {
    return reinterpret_cast<const Shift_aux_rpt_328*>(
               &_Shift_aux_rpt_328_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Shift_aux_rpt_328& a, Shift_aux_rpt_328& b) {
    a.Swap(&b);
  }
  inline void Swap(Shift_aux_rpt_328* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shift_aux_rpt_328* New() const final {
    return CreateMaybeMessage<Shift_aux_rpt_328>(nullptr);
  }

  Shift_aux_rpt_328* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shift_aux_rpt_328>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shift_aux_rpt_328& from);
  void MergeFrom(const Shift_aux_rpt_328& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shift_aux_rpt_328* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Shift_aux_rpt_328";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedInterlockActiveIsValidFieldNumber = 1,
    kSpeedInterlockActiveFieldNumber = 2,
    kBrakeInterlockActiveIsValidFieldNumber = 3,
    kBrakeInterlockActiveFieldNumber = 4,
    kStayInNeutralModeIsValidFieldNumber = 5,
    kStayInNeutralModeFieldNumber = 6,
    kBetweenGearsIsValidFieldNumber = 7,
    kBetweenGearsFieldNumber = 8,
  };
  // optional bool speed_interlock_active_is_valid = 1;
  bool has_speed_interlock_active_is_valid() const;
  private:
  bool _internal_has_speed_interlock_active_is_valid() const;
  public:
  void clear_speed_interlock_active_is_valid();
  bool speed_interlock_active_is_valid() const;
  void set_speed_interlock_active_is_valid(bool value);
  private:
  bool _internal_speed_interlock_active_is_valid() const;
  void _internal_set_speed_interlock_active_is_valid(bool value);
  public:

  // optional bool speed_interlock_active = 2;
  bool has_speed_interlock_active() const;
  private:
  bool _internal_has_speed_interlock_active() const;
  public:
  void clear_speed_interlock_active();
  bool speed_interlock_active() const;
  void set_speed_interlock_active(bool value);
  private:
  bool _internal_speed_interlock_active() const;
  void _internal_set_speed_interlock_active(bool value);
  public:

  // optional bool brake_interlock_active_is_valid = 3;
  bool has_brake_interlock_active_is_valid() const;
  private:
  bool _internal_has_brake_interlock_active_is_valid() const;
  public:
  void clear_brake_interlock_active_is_valid();
  bool brake_interlock_active_is_valid() const;
  void set_brake_interlock_active_is_valid(bool value);
  private:
  bool _internal_brake_interlock_active_is_valid() const;
  void _internal_set_brake_interlock_active_is_valid(bool value);
  public:

  // optional bool brake_interlock_active = 4;
  bool has_brake_interlock_active() const;
  private:
  bool _internal_has_brake_interlock_active() const;
  public:
  void clear_brake_interlock_active();
  bool brake_interlock_active() const;
  void set_brake_interlock_active(bool value);
  private:
  bool _internal_brake_interlock_active() const;
  void _internal_set_brake_interlock_active(bool value);
  public:

  // optional bool stay_in_neutral_mode_is_valid = 5;
  bool has_stay_in_neutral_mode_is_valid() const;
  private:
  bool _internal_has_stay_in_neutral_mode_is_valid() const;
  public:
  void clear_stay_in_neutral_mode_is_valid();
  bool stay_in_neutral_mode_is_valid() const;
  void set_stay_in_neutral_mode_is_valid(bool value);
  private:
  bool _internal_stay_in_neutral_mode_is_valid() const;
  void _internal_set_stay_in_neutral_mode_is_valid(bool value);
  public:

  // optional bool stay_in_neutral_mode = 6;
  bool has_stay_in_neutral_mode() const;
  private:
  bool _internal_has_stay_in_neutral_mode() const;
  public:
  void clear_stay_in_neutral_mode();
  bool stay_in_neutral_mode() const;
  void set_stay_in_neutral_mode(bool value);
  private:
  bool _internal_stay_in_neutral_mode() const;
  void _internal_set_stay_in_neutral_mode(bool value);
  public:

  // optional bool between_gears_is_valid = 7;
  bool has_between_gears_is_valid() const;
  private:
  bool _internal_has_between_gears_is_valid() const;
  public:
  void clear_between_gears_is_valid();
  bool between_gears_is_valid() const;
  void set_between_gears_is_valid(bool value);
  private:
  bool _internal_between_gears_is_valid() const;
  void _internal_set_between_gears_is_valid(bool value);
  public:

  // optional bool between_gears = 8;
  bool has_between_gears() const;
  private:
  bool _internal_has_between_gears() const;
  public:
  void clear_between_gears();
  bool between_gears() const;
  void set_between_gears(bool value);
  private:
  bool _internal_between_gears() const;
  void _internal_set_between_gears(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Shift_aux_rpt_328)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool speed_interlock_active_is_valid_;
  bool speed_interlock_active_;
  bool brake_interlock_active_is_valid_;
  bool brake_interlock_active_;
  bool stay_in_neutral_mode_is_valid_;
  bool stay_in_neutral_mode_;
  bool between_gears_is_valid_;
  bool between_gears_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Accel_rpt_200 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Accel_rpt_200) */ {
 public:
  Accel_rpt_200();
  virtual ~Accel_rpt_200();

  Accel_rpt_200(const Accel_rpt_200& from);
  Accel_rpt_200(Accel_rpt_200&& from) noexcept
    : Accel_rpt_200() {
    *this = ::std::move(from);
  }

  inline Accel_rpt_200& operator=(const Accel_rpt_200& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accel_rpt_200& operator=(Accel_rpt_200&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accel_rpt_200& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accel_rpt_200* internal_default_instance() {
    return reinterpret_cast<const Accel_rpt_200*>(
               &_Accel_rpt_200_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Accel_rpt_200& a, Accel_rpt_200& b) {
    a.Swap(&b);
  }
  inline void Swap(Accel_rpt_200* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accel_rpt_200* New() const final {
    return CreateMaybeMessage<Accel_rpt_200>(nullptr);
  }

  Accel_rpt_200* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accel_rpt_200>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accel_rpt_200& from);
  void MergeFrom(const Accel_rpt_200& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accel_rpt_200* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Accel_rpt_200";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFaultFieldNumber = 1,
    kPacmodFaultFieldNumber = 2,
    kOutputReportedFaultFieldNumber = 3,
    kInputOutputFaultFieldNumber = 4,
    kCommandOutputFaultFieldNumber = 5,
    kOverrideActiveFieldNumber = 6,
    kEnabledFieldNumber = 7,
    kManualInputFieldNumber = 8,
    kCommandedValueFieldNumber = 9,
    kOutputValueFieldNumber = 10,
  };
  // optional bool vehicle_fault = 1;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 2;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool output_reported_fault = 3;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 4;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool command_output_fault = 5;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional bool override_active = 6;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool enabled = 7;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional double manual_input = 8;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  double manual_input() const;
  void set_manual_input(double value);
  private:
  double _internal_manual_input() const;
  void _internal_set_manual_input(double value);
  public:

  // optional double commanded_value = 9;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  double commanded_value() const;
  void set_commanded_value(double value);
  private:
  double _internal_commanded_value() const;
  void _internal_set_commanded_value(double value);
  public:

  // optional double output_value = 10;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  double output_value() const;
  void set_output_value(double value);
  private:
  double _internal_output_value() const;
  void _internal_set_output_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Accel_rpt_200)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool command_output_fault_;
  bool override_active_;
  bool enabled_;
  double manual_input_;
  double commanded_value_;
  double output_value_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Brake_rpt_204 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_rpt_204) */ {
 public:
  Brake_rpt_204();
  virtual ~Brake_rpt_204();

  Brake_rpt_204(const Brake_rpt_204& from);
  Brake_rpt_204(Brake_rpt_204&& from) noexcept
    : Brake_rpt_204() {
    *this = ::std::move(from);
  }

  inline Brake_rpt_204& operator=(const Brake_rpt_204& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_rpt_204& operator=(Brake_rpt_204&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brake_rpt_204& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brake_rpt_204* internal_default_instance() {
    return reinterpret_cast<const Brake_rpt_204*>(
               &_Brake_rpt_204_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Brake_rpt_204& a, Brake_rpt_204& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_rpt_204* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brake_rpt_204* New() const final {
    return CreateMaybeMessage<Brake_rpt_204>(nullptr);
  }

  Brake_rpt_204* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brake_rpt_204>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brake_rpt_204& from);
  void MergeFrom(const Brake_rpt_204& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_rpt_204* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_rpt_204";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandOutputFaultFieldNumber = 1,
    kVehicleFaultFieldNumber = 2,
    kPacmodFaultFieldNumber = 3,
    kOverrideActiveFieldNumber = 4,
    kOutputReportedFaultFieldNumber = 5,
    kInputOutputFaultFieldNumber = 6,
    kEnabledFieldNumber = 7,
    kManualInputFieldNumber = 8,
    kCommandedValueFieldNumber = 9,
    kOutputValueFieldNumber = 10,
  };
  // optional bool command_output_fault = 1;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional bool vehicle_fault = 2;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 3;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 4;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 5;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 6;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 7;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional double manual_input = 8;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  double manual_input() const;
  void set_manual_input(double value);
  private:
  double _internal_manual_input() const;
  void _internal_set_manual_input(double value);
  public:

  // optional double commanded_value = 9;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  double commanded_value() const;
  void set_commanded_value(double value);
  private:
  double _internal_commanded_value() const;
  void _internal_set_commanded_value(double value);
  public:

  // optional double output_value = 10;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  double output_value() const;
  void set_output_value(double value);
  private:
  double _internal_output_value() const;
  void _internal_set_output_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_rpt_204)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool command_output_fault_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  double manual_input_;
  double commanded_value_;
  double output_value_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Horn_cmd_11c :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Horn_cmd_11c) */ {
 public:
  Horn_cmd_11c();
  virtual ~Horn_cmd_11c();

  Horn_cmd_11c(const Horn_cmd_11c& from);
  Horn_cmd_11c(Horn_cmd_11c&& from) noexcept
    : Horn_cmd_11c() {
    *this = ::std::move(from);
  }

  inline Horn_cmd_11c& operator=(const Horn_cmd_11c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Horn_cmd_11c& operator=(Horn_cmd_11c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Horn_cmd_11c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Horn_cmd_11c* internal_default_instance() {
    return reinterpret_cast<const Horn_cmd_11c*>(
               &_Horn_cmd_11c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Horn_cmd_11c& a, Horn_cmd_11c& b) {
    a.Swap(&b);
  }
  inline void Swap(Horn_cmd_11c* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Horn_cmd_11c* New() const final {
    return CreateMaybeMessage<Horn_cmd_11c>(nullptr);
  }

  Horn_cmd_11c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Horn_cmd_11c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Horn_cmd_11c& from);
  void MergeFrom(const Horn_cmd_11c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Horn_cmd_11c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Horn_cmd_11c";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Horn_cmd_11c_Horn_cmdType Horn_cmdType;
  static constexpr Horn_cmdType HORN_CMD_OFF =
    Horn_cmd_11c_Horn_cmdType_HORN_CMD_OFF;
  static constexpr Horn_cmdType HORN_CMD_ON =
    Horn_cmd_11c_Horn_cmdType_HORN_CMD_ON;
  static inline bool Horn_cmdType_IsValid(int value) {
    return Horn_cmd_11c_Horn_cmdType_IsValid(value);
  }
  static constexpr Horn_cmdType Horn_cmdType_MIN =
    Horn_cmd_11c_Horn_cmdType_Horn_cmdType_MIN;
  static constexpr Horn_cmdType Horn_cmdType_MAX =
    Horn_cmd_11c_Horn_cmdType_Horn_cmdType_MAX;
  static constexpr int Horn_cmdType_ARRAYSIZE =
    Horn_cmd_11c_Horn_cmdType_Horn_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Horn_cmdType_descriptor() {
    return Horn_cmd_11c_Horn_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Horn_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Horn_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Horn_cmdType_Name.");
    return Horn_cmd_11c_Horn_cmdType_Name(enum_t_value);
  }
  static inline bool Horn_cmdType_Parse(const std::string& name,
      Horn_cmdType* value) {
    return Horn_cmd_11c_Horn_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
    kHornCmdFieldNumber = 5,
  };
  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // optional .apollo.canbus.Horn_cmd_11c.Horn_cmdType horn_cmd = 5;
  bool has_horn_cmd() const;
  private:
  bool _internal_has_horn_cmd() const;
  public:
  void clear_horn_cmd();
  ::apollo::canbus::Horn_cmd_11c_Horn_cmdType horn_cmd() const;
  void set_horn_cmd(::apollo::canbus::Horn_cmd_11c_Horn_cmdType value);
  private:
  ::apollo::canbus::Horn_cmd_11c_Horn_cmdType _internal_horn_cmd() const;
  void _internal_set_horn_cmd(::apollo::canbus::Horn_cmd_11c_Horn_cmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Horn_cmd_11c)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  int horn_cmd_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Global_rpt_10 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Global_rpt_10) */ {
 public:
  Global_rpt_10();
  virtual ~Global_rpt_10();

  Global_rpt_10(const Global_rpt_10& from);
  Global_rpt_10(Global_rpt_10&& from) noexcept
    : Global_rpt_10() {
    *this = ::std::move(from);
  }

  inline Global_rpt_10& operator=(const Global_rpt_10& from) {
    CopyFrom(from);
    return *this;
  }
  inline Global_rpt_10& operator=(Global_rpt_10&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Global_rpt_10& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Global_rpt_10* internal_default_instance() {
    return reinterpret_cast<const Global_rpt_10*>(
               &_Global_rpt_10_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Global_rpt_10& a, Global_rpt_10& b) {
    a.Swap(&b);
  }
  inline void Swap(Global_rpt_10* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Global_rpt_10* New() const final {
    return CreateMaybeMessage<Global_rpt_10>(nullptr);
  }

  Global_rpt_10* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Global_rpt_10>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Global_rpt_10& from);
  void MergeFrom(const Global_rpt_10& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Global_rpt_10* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Global_rpt_10";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Global_rpt_10_Pacmod_system_enabledType Pacmod_system_enabledType;
  static constexpr Pacmod_system_enabledType PACMOD_SYSTEM_ENABLED_CONTROL_DISABLED =
    Global_rpt_10_Pacmod_system_enabledType_PACMOD_SYSTEM_ENABLED_CONTROL_DISABLED;
  static constexpr Pacmod_system_enabledType PACMOD_SYSTEM_ENABLED_CONTROL_ENABLED =
    Global_rpt_10_Pacmod_system_enabledType_PACMOD_SYSTEM_ENABLED_CONTROL_ENABLED;
  static inline bool Pacmod_system_enabledType_IsValid(int value) {
    return Global_rpt_10_Pacmod_system_enabledType_IsValid(value);
  }
  static constexpr Pacmod_system_enabledType Pacmod_system_enabledType_MIN =
    Global_rpt_10_Pacmod_system_enabledType_Pacmod_system_enabledType_MIN;
  static constexpr Pacmod_system_enabledType Pacmod_system_enabledType_MAX =
    Global_rpt_10_Pacmod_system_enabledType_Pacmod_system_enabledType_MAX;
  static constexpr int Pacmod_system_enabledType_ARRAYSIZE =
    Global_rpt_10_Pacmod_system_enabledType_Pacmod_system_enabledType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Pacmod_system_enabledType_descriptor() {
    return Global_rpt_10_Pacmod_system_enabledType_descriptor();
  }
  template<typename T>
  static inline const std::string& Pacmod_system_enabledType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Pacmod_system_enabledType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Pacmod_system_enabledType_Name.");
    return Global_rpt_10_Pacmod_system_enabledType_Name(enum_t_value);
  }
  static inline bool Pacmod_system_enabledType_Parse(const std::string& name,
      Pacmod_system_enabledType* value) {
    return Global_rpt_10_Pacmod_system_enabledType_Parse(name, value);
  }

  typedef Global_rpt_10_Pacmod_system_override_activeType Pacmod_system_override_activeType;
  static constexpr Pacmod_system_override_activeType PACMOD_SYSTEM_OVERRIDE_ACTIVE_NOT_OVERRIDDEN =
    Global_rpt_10_Pacmod_system_override_activeType_PACMOD_SYSTEM_OVERRIDE_ACTIVE_NOT_OVERRIDDEN;
  static constexpr Pacmod_system_override_activeType PACMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN =
    Global_rpt_10_Pacmod_system_override_activeType_PACMOD_SYSTEM_OVERRIDE_ACTIVE_OVERRIDDEN;
  static inline bool Pacmod_system_override_activeType_IsValid(int value) {
    return Global_rpt_10_Pacmod_system_override_activeType_IsValid(value);
  }
  static constexpr Pacmod_system_override_activeType Pacmod_system_override_activeType_MIN =
    Global_rpt_10_Pacmod_system_override_activeType_Pacmod_system_override_activeType_MIN;
  static constexpr Pacmod_system_override_activeType Pacmod_system_override_activeType_MAX =
    Global_rpt_10_Pacmod_system_override_activeType_Pacmod_system_override_activeType_MAX;
  static constexpr int Pacmod_system_override_activeType_ARRAYSIZE =
    Global_rpt_10_Pacmod_system_override_activeType_Pacmod_system_override_activeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Pacmod_system_override_activeType_descriptor() {
    return Global_rpt_10_Pacmod_system_override_activeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Pacmod_system_override_activeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Pacmod_system_override_activeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Pacmod_system_override_activeType_Name.");
    return Global_rpt_10_Pacmod_system_override_activeType_Name(enum_t_value);
  }
  static inline bool Pacmod_system_override_activeType_Parse(const std::string& name,
      Pacmod_system_override_activeType* value) {
    return Global_rpt_10_Pacmod_system_override_activeType_Parse(name, value);
  }

  typedef Global_rpt_10_Brk_can_timeoutType Brk_can_timeoutType;
  static constexpr Brk_can_timeoutType BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT =
    Global_rpt_10_Brk_can_timeoutType_BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT;
  static constexpr Brk_can_timeoutType BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT =
    Global_rpt_10_Brk_can_timeoutType_BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT;
  static inline bool Brk_can_timeoutType_IsValid(int value) {
    return Global_rpt_10_Brk_can_timeoutType_IsValid(value);
  }
  static constexpr Brk_can_timeoutType Brk_can_timeoutType_MIN =
    Global_rpt_10_Brk_can_timeoutType_Brk_can_timeoutType_MIN;
  static constexpr Brk_can_timeoutType Brk_can_timeoutType_MAX =
    Global_rpt_10_Brk_can_timeoutType_Brk_can_timeoutType_MAX;
  static constexpr int Brk_can_timeoutType_ARRAYSIZE =
    Global_rpt_10_Brk_can_timeoutType_Brk_can_timeoutType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Brk_can_timeoutType_descriptor() {
    return Global_rpt_10_Brk_can_timeoutType_descriptor();
  }
  template<typename T>
  static inline const std::string& Brk_can_timeoutType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Brk_can_timeoutType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Brk_can_timeoutType_Name.");
    return Global_rpt_10_Brk_can_timeoutType_Name(enum_t_value);
  }
  static inline bool Brk_can_timeoutType_Parse(const std::string& name,
      Brk_can_timeoutType* value) {
    return Global_rpt_10_Brk_can_timeoutType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPacmodSystemEnabledFieldNumber = 3,
    kConfigFaultActiveFieldNumber = 1,
    kPacmodSubsystemTimeoutFieldNumber = 2,
    kPacmodSystemFaultActiveFieldNumber = 5,
    kVehCanTimeoutFieldNumber = 6,
    kPacmodSystemOverrideActiveFieldNumber = 4,
    kBrkCanTimeoutFieldNumber = 8,
    kStrCanTimeoutFieldNumber = 7,
    kUsrCanTimeoutFieldNumber = 9,
    kUsrCanReadErrorsFieldNumber = 10,
  };
  // optional .apollo.canbus.Global_rpt_10.Pacmod_system_enabledType pacmod_system_enabled = 3;
  bool has_pacmod_system_enabled() const;
  private:
  bool _internal_has_pacmod_system_enabled() const;
  public:
  void clear_pacmod_system_enabled();
  ::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType pacmod_system_enabled() const;
  void set_pacmod_system_enabled(::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType value);
  private:
  ::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType _internal_pacmod_system_enabled() const;
  void _internal_set_pacmod_system_enabled(::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType value);
  public:

  // optional bool config_fault_active = 1;
  bool has_config_fault_active() const;
  private:
  bool _internal_has_config_fault_active() const;
  public:
  void clear_config_fault_active();
  bool config_fault_active() const;
  void set_config_fault_active(bool value);
  private:
  bool _internal_config_fault_active() const;
  void _internal_set_config_fault_active(bool value);
  public:

  // optional bool pacmod_subsystem_timeout = 2;
  bool has_pacmod_subsystem_timeout() const;
  private:
  bool _internal_has_pacmod_subsystem_timeout() const;
  public:
  void clear_pacmod_subsystem_timeout();
  bool pacmod_subsystem_timeout() const;
  void set_pacmod_subsystem_timeout(bool value);
  private:
  bool _internal_pacmod_subsystem_timeout() const;
  void _internal_set_pacmod_subsystem_timeout(bool value);
  public:

  // optional bool pacmod_system_fault_active = 5;
  bool has_pacmod_system_fault_active() const;
  private:
  bool _internal_has_pacmod_system_fault_active() const;
  public:
  void clear_pacmod_system_fault_active();
  bool pacmod_system_fault_active() const;
  void set_pacmod_system_fault_active(bool value);
  private:
  bool _internal_pacmod_system_fault_active() const;
  void _internal_set_pacmod_system_fault_active(bool value);
  public:

  // optional bool veh_can_timeout = 6;
  bool has_veh_can_timeout() const;
  private:
  bool _internal_has_veh_can_timeout() const;
  public:
  void clear_veh_can_timeout();
  bool veh_can_timeout() const;
  void set_veh_can_timeout(bool value);
  private:
  bool _internal_veh_can_timeout() const;
  void _internal_set_veh_can_timeout(bool value);
  public:

  // optional .apollo.canbus.Global_rpt_10.Pacmod_system_override_activeType pacmod_system_override_active = 4;
  bool has_pacmod_system_override_active() const;
  private:
  bool _internal_has_pacmod_system_override_active() const;
  public:
  void clear_pacmod_system_override_active();
  ::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType pacmod_system_override_active() const;
  void set_pacmod_system_override_active(::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType value);
  private:
  ::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType _internal_pacmod_system_override_active() const;
  void _internal_set_pacmod_system_override_active(::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType value);
  public:

  // optional .apollo.canbus.Global_rpt_10.Brk_can_timeoutType brk_can_timeout = 8;
  bool has_brk_can_timeout() const;
  private:
  bool _internal_has_brk_can_timeout() const;
  public:
  void clear_brk_can_timeout();
  ::apollo::canbus::Global_rpt_10_Brk_can_timeoutType brk_can_timeout() const;
  void set_brk_can_timeout(::apollo::canbus::Global_rpt_10_Brk_can_timeoutType value);
  private:
  ::apollo::canbus::Global_rpt_10_Brk_can_timeoutType _internal_brk_can_timeout() const;
  void _internal_set_brk_can_timeout(::apollo::canbus::Global_rpt_10_Brk_can_timeoutType value);
  public:

  // optional bool str_can_timeout = 7;
  bool has_str_can_timeout() const;
  private:
  bool _internal_has_str_can_timeout() const;
  public:
  void clear_str_can_timeout();
  bool str_can_timeout() const;
  void set_str_can_timeout(bool value);
  private:
  bool _internal_str_can_timeout() const;
  void _internal_set_str_can_timeout(bool value);
  public:

  // optional bool usr_can_timeout = 9;
  bool has_usr_can_timeout() const;
  private:
  bool _internal_has_usr_can_timeout() const;
  public:
  void clear_usr_can_timeout();
  bool usr_can_timeout() const;
  void set_usr_can_timeout(bool value);
  private:
  bool _internal_usr_can_timeout() const;
  void _internal_set_usr_can_timeout(bool value);
  public:

  // optional int32 usr_can_read_errors = 10;
  bool has_usr_can_read_errors() const;
  private:
  bool _internal_has_usr_can_read_errors() const;
  public:
  void clear_usr_can_read_errors();
  ::PROTOBUF_NAMESPACE_ID::int32 usr_can_read_errors() const;
  void set_usr_can_read_errors(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usr_can_read_errors() const;
  void _internal_set_usr_can_read_errors(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Global_rpt_10)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int pacmod_system_enabled_;
  bool config_fault_active_;
  bool pacmod_subsystem_timeout_;
  bool pacmod_system_fault_active_;
  bool veh_can_timeout_;
  int pacmod_system_override_active_;
  int brk_can_timeout_;
  bool str_can_timeout_;
  bool usr_can_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 usr_can_read_errors_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Accel_aux_rpt_300 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Accel_aux_rpt_300) */ {
 public:
  Accel_aux_rpt_300();
  virtual ~Accel_aux_rpt_300();

  Accel_aux_rpt_300(const Accel_aux_rpt_300& from);
  Accel_aux_rpt_300(Accel_aux_rpt_300&& from) noexcept
    : Accel_aux_rpt_300() {
    *this = ::std::move(from);
  }

  inline Accel_aux_rpt_300& operator=(const Accel_aux_rpt_300& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accel_aux_rpt_300& operator=(Accel_aux_rpt_300&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accel_aux_rpt_300& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accel_aux_rpt_300* internal_default_instance() {
    return reinterpret_cast<const Accel_aux_rpt_300*>(
               &_Accel_aux_rpt_300_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Accel_aux_rpt_300& a, Accel_aux_rpt_300& b) {
    a.Swap(&b);
  }
  inline void Swap(Accel_aux_rpt_300* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accel_aux_rpt_300* New() const final {
    return CreateMaybeMessage<Accel_aux_rpt_300>(nullptr);
  }

  Accel_aux_rpt_300* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accel_aux_rpt_300>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accel_aux_rpt_300& from);
  void MergeFrom(const Accel_aux_rpt_300& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accel_aux_rpt_300* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Accel_aux_rpt_300";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawPedalForceFieldNumber = 4,
    kRawPedalPosFieldNumber = 6,
    kUserInteractionIsValidFieldNumber = 1,
    kUserInteractionFieldNumber = 2,
    kRawPedalForceIsValidFieldNumber = 3,
    kRawPedalPosIsValidFieldNumber = 5,
  };
  // optional double raw_pedal_force = 4;
  bool has_raw_pedal_force() const;
  private:
  bool _internal_has_raw_pedal_force() const;
  public:
  void clear_raw_pedal_force();
  double raw_pedal_force() const;
  void set_raw_pedal_force(double value);
  private:
  double _internal_raw_pedal_force() const;
  void _internal_set_raw_pedal_force(double value);
  public:

  // optional double raw_pedal_pos = 6;
  bool has_raw_pedal_pos() const;
  private:
  bool _internal_has_raw_pedal_pos() const;
  public:
  void clear_raw_pedal_pos();
  double raw_pedal_pos() const;
  void set_raw_pedal_pos(double value);
  private:
  double _internal_raw_pedal_pos() const;
  void _internal_set_raw_pedal_pos(double value);
  public:

  // optional bool user_interaction_is_valid = 1;
  bool has_user_interaction_is_valid() const;
  private:
  bool _internal_has_user_interaction_is_valid() const;
  public:
  void clear_user_interaction_is_valid();
  bool user_interaction_is_valid() const;
  void set_user_interaction_is_valid(bool value);
  private:
  bool _internal_user_interaction_is_valid() const;
  void _internal_set_user_interaction_is_valid(bool value);
  public:

  // optional bool user_interaction = 2;
  bool has_user_interaction() const;
  private:
  bool _internal_has_user_interaction() const;
  public:
  void clear_user_interaction();
  bool user_interaction() const;
  void set_user_interaction(bool value);
  private:
  bool _internal_user_interaction() const;
  void _internal_set_user_interaction(bool value);
  public:

  // optional bool raw_pedal_force_is_valid = 3;
  bool has_raw_pedal_force_is_valid() const;
  private:
  bool _internal_has_raw_pedal_force_is_valid() const;
  public:
  void clear_raw_pedal_force_is_valid();
  bool raw_pedal_force_is_valid() const;
  void set_raw_pedal_force_is_valid(bool value);
  private:
  bool _internal_raw_pedal_force_is_valid() const;
  void _internal_set_raw_pedal_force_is_valid(bool value);
  public:

  // optional bool raw_pedal_pos_is_valid = 5;
  bool has_raw_pedal_pos_is_valid() const;
  private:
  bool _internal_has_raw_pedal_pos_is_valid() const;
  public:
  void clear_raw_pedal_pos_is_valid();
  bool raw_pedal_pos_is_valid() const;
  void set_raw_pedal_pos_is_valid(bool value);
  private:
  bool _internal_raw_pedal_pos_is_valid() const;
  void _internal_set_raw_pedal_pos_is_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Accel_aux_rpt_300)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double raw_pedal_force_;
  double raw_pedal_pos_;
  bool user_interaction_is_valid_;
  bool user_interaction_;
  bool raw_pedal_force_is_valid_;
  bool raw_pedal_pos_is_valid_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Cruise_control_buttons_rpt_208 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Cruise_control_buttons_rpt_208) */ {
 public:
  Cruise_control_buttons_rpt_208();
  virtual ~Cruise_control_buttons_rpt_208();

  Cruise_control_buttons_rpt_208(const Cruise_control_buttons_rpt_208& from);
  Cruise_control_buttons_rpt_208(Cruise_control_buttons_rpt_208&& from) noexcept
    : Cruise_control_buttons_rpt_208() {
    *this = ::std::move(from);
  }

  inline Cruise_control_buttons_rpt_208& operator=(const Cruise_control_buttons_rpt_208& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cruise_control_buttons_rpt_208& operator=(Cruise_control_buttons_rpt_208&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cruise_control_buttons_rpt_208& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cruise_control_buttons_rpt_208* internal_default_instance() {
    return reinterpret_cast<const Cruise_control_buttons_rpt_208*>(
               &_Cruise_control_buttons_rpt_208_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Cruise_control_buttons_rpt_208& a, Cruise_control_buttons_rpt_208& b) {
    a.Swap(&b);
  }
  inline void Swap(Cruise_control_buttons_rpt_208* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cruise_control_buttons_rpt_208* New() const final {
    return CreateMaybeMessage<Cruise_control_buttons_rpt_208>(nullptr);
  }

  Cruise_control_buttons_rpt_208* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cruise_control_buttons_rpt_208>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cruise_control_buttons_rpt_208& from);
  void MergeFrom(const Cruise_control_buttons_rpt_208& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cruise_control_buttons_rpt_208* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Cruise_control_buttons_rpt_208";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cruise_control_buttons_rpt_208_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_CRUISE_CONTROL_NONE =
    Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_NONE;
  static constexpr Output_valueType OUTPUT_VALUE_CRUISE_CONTROL_CNCL =
    Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_CNCL;
  static constexpr Output_valueType OUTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER =
    Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_ACC_FURTHER;
  static constexpr Output_valueType OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOSER =
    Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_ACC_CLOSER;
  static constexpr Output_valueType OUTPUT_VALUE_CRUISE_CONTROL_SET_DEC =
    Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_SET_DEC;
  static constexpr Output_valueType OUTPUT_VALUE_CRUISE_CONTROL_RES_INC =
    Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_RES_INC;
  static constexpr Output_valueType OUTPUT_VALUE_CRUISE_CONTROL_ON_OFF =
    Cruise_control_buttons_rpt_208_Output_valueType_OUTPUT_VALUE_CRUISE_CONTROL_ON_OFF;
  static inline bool Output_valueType_IsValid(int value) {
    return Cruise_control_buttons_rpt_208_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Cruise_control_buttons_rpt_208_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Cruise_control_buttons_rpt_208_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Cruise_control_buttons_rpt_208_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Cruise_control_buttons_rpt_208_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Cruise_control_buttons_rpt_208_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Cruise_control_buttons_rpt_208_Output_valueType_Parse(name, value);
  }

  typedef Cruise_control_buttons_rpt_208_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_CRUISE_CONTROL_NONE =
    Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_NONE;
  static constexpr Manual_inputType MANUAL_INPUT_CRUISE_CONTROL_CNCL =
    Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_CNCL;
  static constexpr Manual_inputType MANUAL_INPUT_CRUISE_CONTROL_ACC_FURTHER =
    Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_ACC_FURTHER;
  static constexpr Manual_inputType MANUAL_INPUT_CRUISE_CONTROL_ACC_CLOSER =
    Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_ACC_CLOSER;
  static constexpr Manual_inputType MANUAL_INPUT_CRUISE_CONTROL_SET_DEC =
    Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_SET_DEC;
  static constexpr Manual_inputType MANUAL_INPUT_CRUISE_CONTROL_RES_INC =
    Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_RES_INC;
  static constexpr Manual_inputType MANUAL_INPUT_CRUISE_CONTROL_ON_OFF =
    Cruise_control_buttons_rpt_208_Manual_inputType_MANUAL_INPUT_CRUISE_CONTROL_ON_OFF;
  static inline bool Manual_inputType_IsValid(int value) {
    return Cruise_control_buttons_rpt_208_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Cruise_control_buttons_rpt_208_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Cruise_control_buttons_rpt_208_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Cruise_control_buttons_rpt_208_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Cruise_control_buttons_rpt_208_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Cruise_control_buttons_rpt_208_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Cruise_control_buttons_rpt_208_Manual_inputType_Parse(name, value);
  }

  typedef Cruise_control_buttons_rpt_208_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_CRUISE_CONTROL_NONE =
    Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_NONE;
  static constexpr Commanded_valueType COMMANDED_VALUE_CRUISE_CONTROL_CNCL =
    Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_CNCL;
  static constexpr Commanded_valueType COMMANDED_VALUE_CRUISE_CONTROL_ACC_FURTHER =
    Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_ACC_FURTHER;
  static constexpr Commanded_valueType COMMANDED_VALUE_CRUISE_CONTROL_ACC_CLOSER =
    Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_ACC_CLOSER;
  static constexpr Commanded_valueType COMMANDED_VALUE_CRUISE_CONTROL_SET_DEC =
    Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_SET_DEC;
  static constexpr Commanded_valueType COMMANDED_VALUE_CRUISE_CONTROL_RES_INC =
    Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_RES_INC;
  static constexpr Commanded_valueType COMMANDED_VALUE_CRUISE_CONTROL_ON_OFF =
    Cruise_control_buttons_rpt_208_Commanded_valueType_COMMANDED_VALUE_CRUISE_CONTROL_ON_OFF;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Cruise_control_buttons_rpt_208_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Cruise_control_buttons_rpt_208_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Cruise_control_buttons_rpt_208_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Cruise_control_buttons_rpt_208_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Cruise_control_buttons_rpt_208_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Cruise_control_buttons_rpt_208_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Cruise_control_buttons_rpt_208_Commanded_valueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputValueFieldNumber = 1,
    kManualInputFieldNumber = 2,
    kCommandedValueFieldNumber = 3,
    kVehicleFaultFieldNumber = 4,
    kPacmodFaultFieldNumber = 5,
    kOverrideActiveFieldNumber = 6,
    kOutputReportedFaultFieldNumber = 7,
    kInputOutputFaultFieldNumber = 8,
    kEnabledFieldNumber = 9,
    kCommandOutputFaultFieldNumber = 10,
  };
  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Output_valueType output_value = 1;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType value);
  private:
  ::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType value);
  public:

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Manual_inputType manual_input = 2;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType value);
  private:
  ::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType value);
  public:

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208.Commanded_valueType commanded_value = 3;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType value);
  private:
  ::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType value);
  public:

  // optional bool vehicle_fault = 4;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 5;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 6;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 7;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 8;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 9;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 10;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Cruise_control_buttons_rpt_208)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int output_value_;
  int manual_input_;
  int commanded_value_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Vehicle_speed_rpt_400 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vehicle_speed_rpt_400) */ {
 public:
  Vehicle_speed_rpt_400();
  virtual ~Vehicle_speed_rpt_400();

  Vehicle_speed_rpt_400(const Vehicle_speed_rpt_400& from);
  Vehicle_speed_rpt_400(Vehicle_speed_rpt_400&& from) noexcept
    : Vehicle_speed_rpt_400() {
    *this = ::std::move(from);
  }

  inline Vehicle_speed_rpt_400& operator=(const Vehicle_speed_rpt_400& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle_speed_rpt_400& operator=(Vehicle_speed_rpt_400&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle_speed_rpt_400& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle_speed_rpt_400* internal_default_instance() {
    return reinterpret_cast<const Vehicle_speed_rpt_400*>(
               &_Vehicle_speed_rpt_400_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Vehicle_speed_rpt_400& a, Vehicle_speed_rpt_400& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle_speed_rpt_400* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle_speed_rpt_400* New() const final {
    return CreateMaybeMessage<Vehicle_speed_rpt_400>(nullptr);
  }

  Vehicle_speed_rpt_400* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle_speed_rpt_400>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle_speed_rpt_400& from);
  void MergeFrom(const Vehicle_speed_rpt_400& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle_speed_rpt_400* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vehicle_speed_rpt_400";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_validType;
  static constexpr Vehicle_speed_validType VEHICLE_SPEED_VALID_INVALID =
    Vehicle_speed_rpt_400_Vehicle_speed_validType_VEHICLE_SPEED_VALID_INVALID;
  static constexpr Vehicle_speed_validType VEHICLE_SPEED_VALID_VALID =
    Vehicle_speed_rpt_400_Vehicle_speed_validType_VEHICLE_SPEED_VALID_VALID;
  static inline bool Vehicle_speed_validType_IsValid(int value) {
    return Vehicle_speed_rpt_400_Vehicle_speed_validType_IsValid(value);
  }
  static constexpr Vehicle_speed_validType Vehicle_speed_validType_MIN =
    Vehicle_speed_rpt_400_Vehicle_speed_validType_Vehicle_speed_validType_MIN;
  static constexpr Vehicle_speed_validType Vehicle_speed_validType_MAX =
    Vehicle_speed_rpt_400_Vehicle_speed_validType_Vehicle_speed_validType_MAX;
  static constexpr int Vehicle_speed_validType_ARRAYSIZE =
    Vehicle_speed_rpt_400_Vehicle_speed_validType_Vehicle_speed_validType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Vehicle_speed_validType_descriptor() {
    return Vehicle_speed_rpt_400_Vehicle_speed_validType_descriptor();
  }
  template<typename T>
  static inline const std::string& Vehicle_speed_validType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Vehicle_speed_validType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Vehicle_speed_validType_Name.");
    return Vehicle_speed_rpt_400_Vehicle_speed_validType_Name(enum_t_value);
  }
  static inline bool Vehicle_speed_validType_Parse(const std::string& name,
      Vehicle_speed_validType* value) {
    return Vehicle_speed_rpt_400_Vehicle_speed_validType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleSpeedFieldNumber = 1,
    kVehicleSpeedValidFieldNumber = 2,
  };
  // optional double vehicle_speed = 1;
  bool has_vehicle_speed() const;
  private:
  bool _internal_has_vehicle_speed() const;
  public:
  void clear_vehicle_speed();
  double vehicle_speed() const;
  void set_vehicle_speed(double value);
  private:
  double _internal_vehicle_speed() const;
  void _internal_set_vehicle_speed(double value);
  public:

  // optional .apollo.canbus.Vehicle_speed_rpt_400.Vehicle_speed_validType vehicle_speed_valid = 2;
  bool has_vehicle_speed_valid() const;
  private:
  bool _internal_has_vehicle_speed_valid() const;
  public:
  void clear_vehicle_speed_valid();
  ::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType vehicle_speed_valid() const;
  void set_vehicle_speed_valid(::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType value);
  private:
  ::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType _internal_vehicle_speed_valid() const;
  void _internal_set_vehicle_speed_valid(::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vehicle_speed_rpt_400)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double vehicle_speed_;
  int vehicle_speed_valid_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Brake_aux_rpt_304 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_aux_rpt_304) */ {
 public:
  Brake_aux_rpt_304();
  virtual ~Brake_aux_rpt_304();

  Brake_aux_rpt_304(const Brake_aux_rpt_304& from);
  Brake_aux_rpt_304(Brake_aux_rpt_304&& from) noexcept
    : Brake_aux_rpt_304() {
    *this = ::std::move(from);
  }

  inline Brake_aux_rpt_304& operator=(const Brake_aux_rpt_304& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_aux_rpt_304& operator=(Brake_aux_rpt_304&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brake_aux_rpt_304& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brake_aux_rpt_304* internal_default_instance() {
    return reinterpret_cast<const Brake_aux_rpt_304*>(
               &_Brake_aux_rpt_304_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Brake_aux_rpt_304& a, Brake_aux_rpt_304& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_aux_rpt_304* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brake_aux_rpt_304* New() const final {
    return CreateMaybeMessage<Brake_aux_rpt_304>(nullptr);
  }

  Brake_aux_rpt_304* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brake_aux_rpt_304>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brake_aux_rpt_304& from);
  void MergeFrom(const Brake_aux_rpt_304& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_aux_rpt_304* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_aux_rpt_304";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrakeOnOffIsValidFieldNumber = 1,
    kBrakeOnOffFieldNumber = 2,
    kUserInteractionIsValidFieldNumber = 3,
    kUserInteractionFieldNumber = 4,
    kRawBrakePressureIsValidFieldNumber = 5,
    kRawPedalForceIsValidFieldNumber = 7,
    kRawPedalPosIsValidFieldNumber = 9,
    kRawBrakePressureFieldNumber = 6,
    kRawPedalForceFieldNumber = 8,
    kRawPedalPosFieldNumber = 10,
  };
  // optional bool brake_on_off_is_valid = 1;
  bool has_brake_on_off_is_valid() const;
  private:
  bool _internal_has_brake_on_off_is_valid() const;
  public:
  void clear_brake_on_off_is_valid();
  bool brake_on_off_is_valid() const;
  void set_brake_on_off_is_valid(bool value);
  private:
  bool _internal_brake_on_off_is_valid() const;
  void _internal_set_brake_on_off_is_valid(bool value);
  public:

  // optional bool brake_on_off = 2;
  bool has_brake_on_off() const;
  private:
  bool _internal_has_brake_on_off() const;
  public:
  void clear_brake_on_off();
  bool brake_on_off() const;
  void set_brake_on_off(bool value);
  private:
  bool _internal_brake_on_off() const;
  void _internal_set_brake_on_off(bool value);
  public:

  // optional bool user_interaction_is_valid = 3;
  bool has_user_interaction_is_valid() const;
  private:
  bool _internal_has_user_interaction_is_valid() const;
  public:
  void clear_user_interaction_is_valid();
  bool user_interaction_is_valid() const;
  void set_user_interaction_is_valid(bool value);
  private:
  bool _internal_user_interaction_is_valid() const;
  void _internal_set_user_interaction_is_valid(bool value);
  public:

  // optional bool user_interaction = 4;
  bool has_user_interaction() const;
  private:
  bool _internal_has_user_interaction() const;
  public:
  void clear_user_interaction();
  bool user_interaction() const;
  void set_user_interaction(bool value);
  private:
  bool _internal_user_interaction() const;
  void _internal_set_user_interaction(bool value);
  public:

  // optional bool raw_brake_pressure_is_valid = 5;
  bool has_raw_brake_pressure_is_valid() const;
  private:
  bool _internal_has_raw_brake_pressure_is_valid() const;
  public:
  void clear_raw_brake_pressure_is_valid();
  bool raw_brake_pressure_is_valid() const;
  void set_raw_brake_pressure_is_valid(bool value);
  private:
  bool _internal_raw_brake_pressure_is_valid() const;
  void _internal_set_raw_brake_pressure_is_valid(bool value);
  public:

  // optional bool raw_pedal_force_is_valid = 7;
  bool has_raw_pedal_force_is_valid() const;
  private:
  bool _internal_has_raw_pedal_force_is_valid() const;
  public:
  void clear_raw_pedal_force_is_valid();
  bool raw_pedal_force_is_valid() const;
  void set_raw_pedal_force_is_valid(bool value);
  private:
  bool _internal_raw_pedal_force_is_valid() const;
  void _internal_set_raw_pedal_force_is_valid(bool value);
  public:

  // optional bool raw_pedal_pos_is_valid = 9;
  bool has_raw_pedal_pos_is_valid() const;
  private:
  bool _internal_has_raw_pedal_pos_is_valid() const;
  public:
  void clear_raw_pedal_pos_is_valid();
  bool raw_pedal_pos_is_valid() const;
  void set_raw_pedal_pos_is_valid(bool value);
  private:
  bool _internal_raw_pedal_pos_is_valid() const;
  void _internal_set_raw_pedal_pos_is_valid(bool value);
  public:

  // optional double raw_brake_pressure = 6;
  bool has_raw_brake_pressure() const;
  private:
  bool _internal_has_raw_brake_pressure() const;
  public:
  void clear_raw_brake_pressure();
  double raw_brake_pressure() const;
  void set_raw_brake_pressure(double value);
  private:
  double _internal_raw_brake_pressure() const;
  void _internal_set_raw_brake_pressure(double value);
  public:

  // optional double raw_pedal_force = 8;
  bool has_raw_pedal_force() const;
  private:
  bool _internal_has_raw_pedal_force() const;
  public:
  void clear_raw_pedal_force();
  double raw_pedal_force() const;
  void set_raw_pedal_force(double value);
  private:
  double _internal_raw_pedal_force() const;
  void _internal_set_raw_pedal_force(double value);
  public:

  // optional double raw_pedal_pos = 10;
  bool has_raw_pedal_pos() const;
  private:
  bool _internal_has_raw_pedal_pos() const;
  public:
  void clear_raw_pedal_pos();
  double raw_pedal_pos() const;
  void set_raw_pedal_pos(double value);
  private:
  double _internal_raw_pedal_pos() const;
  void _internal_set_raw_pedal_pos(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_aux_rpt_304)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool brake_on_off_is_valid_;
  bool brake_on_off_;
  bool user_interaction_is_valid_;
  bool user_interaction_;
  bool raw_brake_pressure_is_valid_;
  bool raw_pedal_force_is_valid_;
  bool raw_pedal_pos_is_valid_;
  double raw_brake_pressure_;
  double raw_pedal_force_;
  double raw_pedal_pos_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Media_controls_cmd_120 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Media_controls_cmd_120) */ {
 public:
  Media_controls_cmd_120();
  virtual ~Media_controls_cmd_120();

  Media_controls_cmd_120(const Media_controls_cmd_120& from);
  Media_controls_cmd_120(Media_controls_cmd_120&& from) noexcept
    : Media_controls_cmd_120() {
    *this = ::std::move(from);
  }

  inline Media_controls_cmd_120& operator=(const Media_controls_cmd_120& from) {
    CopyFrom(from);
    return *this;
  }
  inline Media_controls_cmd_120& operator=(Media_controls_cmd_120&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Media_controls_cmd_120& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Media_controls_cmd_120* internal_default_instance() {
    return reinterpret_cast<const Media_controls_cmd_120*>(
               &_Media_controls_cmd_120_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Media_controls_cmd_120& a, Media_controls_cmd_120& b) {
    a.Swap(&b);
  }
  inline void Swap(Media_controls_cmd_120* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Media_controls_cmd_120* New() const final {
    return CreateMaybeMessage<Media_controls_cmd_120>(nullptr);
  }

  Media_controls_cmd_120* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Media_controls_cmd_120>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Media_controls_cmd_120& from);
  void MergeFrom(const Media_controls_cmd_120& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Media_controls_cmd_120* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Media_controls_cmd_120";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmdType;
  static constexpr Media_controls_cmdType MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE =
    Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NONE;
  static constexpr Media_controls_cmdType MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND =
    Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOICE_COMMAND;
  static constexpr Media_controls_cmdType MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE =
    Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_MUTE;
  static constexpr Media_controls_cmdType MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER =
    Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_PREV_TRACK_ANSWER;
  static constexpr Media_controls_cmdType MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP =
    Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
  static constexpr Media_controls_cmdType MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP =
    Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_UP;
  static constexpr Media_controls_cmdType MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN =
    Media_controls_cmd_120_Media_controls_cmdType_MEDIA_CONTROLS_CMD_MEDIA_CONTROL_VOL_DOWN;
  static inline bool Media_controls_cmdType_IsValid(int value) {
    return Media_controls_cmd_120_Media_controls_cmdType_IsValid(value);
  }
  static constexpr Media_controls_cmdType Media_controls_cmdType_MIN =
    Media_controls_cmd_120_Media_controls_cmdType_Media_controls_cmdType_MIN;
  static constexpr Media_controls_cmdType Media_controls_cmdType_MAX =
    Media_controls_cmd_120_Media_controls_cmdType_Media_controls_cmdType_MAX;
  static constexpr int Media_controls_cmdType_ARRAYSIZE =
    Media_controls_cmd_120_Media_controls_cmdType_Media_controls_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Media_controls_cmdType_descriptor() {
    return Media_controls_cmd_120_Media_controls_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Media_controls_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Media_controls_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Media_controls_cmdType_Name.");
    return Media_controls_cmd_120_Media_controls_cmdType_Name(enum_t_value);
  }
  static inline bool Media_controls_cmdType_Parse(const std::string& name,
      Media_controls_cmdType* value) {
    return Media_controls_cmd_120_Media_controls_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMediaControlsCmdFieldNumber = 1,
    kIgnoreOverridesFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
    kEnableFieldNumber = 5,
  };
  // optional .apollo.canbus.Media_controls_cmd_120.Media_controls_cmdType media_controls_cmd = 1;
  bool has_media_controls_cmd() const;
  private:
  bool _internal_has_media_controls_cmd() const;
  public:
  void clear_media_controls_cmd();
  ::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType media_controls_cmd() const;
  void set_media_controls_cmd(::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType value);
  private:
  ::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType _internal_media_controls_cmd() const;
  void _internal_set_media_controls_cmd(::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType value);
  public:

  // optional bool ignore_overrides = 2;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // optional bool enable = 5;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Media_controls_cmd_120)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int media_controls_cmd_;
  bool ignore_overrides_;
  bool clear_override_;
  bool clear_faults_;
  bool enable_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Cruise_control_buttons_cmd_108 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Cruise_control_buttons_cmd_108) */ {
 public:
  Cruise_control_buttons_cmd_108();
  virtual ~Cruise_control_buttons_cmd_108();

  Cruise_control_buttons_cmd_108(const Cruise_control_buttons_cmd_108& from);
  Cruise_control_buttons_cmd_108(Cruise_control_buttons_cmd_108&& from) noexcept
    : Cruise_control_buttons_cmd_108() {
    *this = ::std::move(from);
  }

  inline Cruise_control_buttons_cmd_108& operator=(const Cruise_control_buttons_cmd_108& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cruise_control_buttons_cmd_108& operator=(Cruise_control_buttons_cmd_108&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cruise_control_buttons_cmd_108& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cruise_control_buttons_cmd_108* internal_default_instance() {
    return reinterpret_cast<const Cruise_control_buttons_cmd_108*>(
               &_Cruise_control_buttons_cmd_108_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Cruise_control_buttons_cmd_108& a, Cruise_control_buttons_cmd_108& b) {
    a.Swap(&b);
  }
  inline void Swap(Cruise_control_buttons_cmd_108* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cruise_control_buttons_cmd_108* New() const final {
    return CreateMaybeMessage<Cruise_control_buttons_cmd_108>(nullptr);
  }

  Cruise_control_buttons_cmd_108* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cruise_control_buttons_cmd_108>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cruise_control_buttons_cmd_108& from);
  void MergeFrom(const Cruise_control_buttons_cmd_108& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cruise_control_buttons_cmd_108* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Cruise_control_buttons_cmd_108";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttonType;
  static constexpr Cruise_control_buttonType CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_NONE =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_NONE;
  static constexpr Cruise_control_buttonType CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_CNCL =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_CNCL;
  static constexpr Cruise_control_buttonType CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_FURTHER =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_FURTHER;
  static constexpr Cruise_control_buttonType CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_CLOSER =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ACC_CLOSER;
  static constexpr Cruise_control_buttonType CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_SET_DEC =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_SET_DEC;
  static constexpr Cruise_control_buttonType CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_INC =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_RES_INC;
  static constexpr Cruise_control_buttonType CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ON_OFF =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_CRUISE_CONTROL_BUTTON_CRUISE_CONTROL_ON_OFF;
  static inline bool Cruise_control_buttonType_IsValid(int value) {
    return Cruise_control_buttons_cmd_108_Cruise_control_buttonType_IsValid(value);
  }
  static constexpr Cruise_control_buttonType Cruise_control_buttonType_MIN =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Cruise_control_buttonType_MIN;
  static constexpr Cruise_control_buttonType Cruise_control_buttonType_MAX =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Cruise_control_buttonType_MAX;
  static constexpr int Cruise_control_buttonType_ARRAYSIZE =
    Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Cruise_control_buttonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Cruise_control_buttonType_descriptor() {
    return Cruise_control_buttons_cmd_108_Cruise_control_buttonType_descriptor();
  }
  template<typename T>
  static inline const std::string& Cruise_control_buttonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Cruise_control_buttonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Cruise_control_buttonType_Name.");
    return Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Name(enum_t_value);
  }
  static inline bool Cruise_control_buttonType_Parse(const std::string& name,
      Cruise_control_buttonType* value) {
    return Cruise_control_buttons_cmd_108_Cruise_control_buttonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCruiseControlButtonFieldNumber = 1,
    kIgnoreOverridesFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kEnableFieldNumber = 4,
    kClearFaultsFieldNumber = 5,
  };
  // optional .apollo.canbus.Cruise_control_buttons_cmd_108.Cruise_control_buttonType cruise_control_button = 1;
  bool has_cruise_control_button() const;
  private:
  bool _internal_has_cruise_control_button() const;
  public:
  void clear_cruise_control_button();
  ::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType cruise_control_button() const;
  void set_cruise_control_button(::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType value);
  private:
  ::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType _internal_cruise_control_button() const;
  void _internal_set_cruise_control_button(::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType value);
  public:

  // optional bool ignore_overrides = 2;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool enable = 4;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_faults = 5;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Cruise_control_buttons_cmd_108)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int cruise_control_button_;
  bool ignore_overrides_;
  bool clear_override_;
  bool enable_;
  bool clear_faults_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Parking_brake_cmd_124 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Parking_brake_cmd_124) */ {
 public:
  Parking_brake_cmd_124();
  virtual ~Parking_brake_cmd_124();

  Parking_brake_cmd_124(const Parking_brake_cmd_124& from);
  Parking_brake_cmd_124(Parking_brake_cmd_124&& from) noexcept
    : Parking_brake_cmd_124() {
    *this = ::std::move(from);
  }

  inline Parking_brake_cmd_124& operator=(const Parking_brake_cmd_124& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parking_brake_cmd_124& operator=(Parking_brake_cmd_124&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parking_brake_cmd_124& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parking_brake_cmd_124* internal_default_instance() {
    return reinterpret_cast<const Parking_brake_cmd_124*>(
               &_Parking_brake_cmd_124_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Parking_brake_cmd_124& a, Parking_brake_cmd_124& b) {
    a.Swap(&b);
  }
  inline void Swap(Parking_brake_cmd_124* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parking_brake_cmd_124* New() const final {
    return CreateMaybeMessage<Parking_brake_cmd_124>(nullptr);
  }

  Parking_brake_cmd_124* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parking_brake_cmd_124>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parking_brake_cmd_124& from);
  void MergeFrom(const Parking_brake_cmd_124& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parking_brake_cmd_124* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Parking_brake_cmd_124";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kParkingBrakeCmdFieldNumber = 4,
    kClearFaultsFieldNumber = 5,
  };
  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool parking_brake_cmd = 4;
  bool has_parking_brake_cmd() const;
  private:
  bool _internal_has_parking_brake_cmd() const;
  public:
  void clear_parking_brake_cmd();
  bool parking_brake_cmd() const;
  void set_parking_brake_cmd(bool value);
  private:
  bool _internal_parking_brake_cmd() const;
  void _internal_set_parking_brake_cmd(bool value);
  public:

  // optional bool clear_faults = 5;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Parking_brake_cmd_124)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool parking_brake_cmd_;
  bool clear_faults_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Horn_rpt_21c :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Horn_rpt_21c) */ {
 public:
  Horn_rpt_21c();
  virtual ~Horn_rpt_21c();

  Horn_rpt_21c(const Horn_rpt_21c& from);
  Horn_rpt_21c(Horn_rpt_21c&& from) noexcept
    : Horn_rpt_21c() {
    *this = ::std::move(from);
  }

  inline Horn_rpt_21c& operator=(const Horn_rpt_21c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Horn_rpt_21c& operator=(Horn_rpt_21c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Horn_rpt_21c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Horn_rpt_21c* internal_default_instance() {
    return reinterpret_cast<const Horn_rpt_21c*>(
               &_Horn_rpt_21c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Horn_rpt_21c& a, Horn_rpt_21c& b) {
    a.Swap(&b);
  }
  inline void Swap(Horn_rpt_21c* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Horn_rpt_21c* New() const final {
    return CreateMaybeMessage<Horn_rpt_21c>(nullptr);
  }

  Horn_rpt_21c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Horn_rpt_21c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Horn_rpt_21c& from);
  void MergeFrom(const Horn_rpt_21c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Horn_rpt_21c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Horn_rpt_21c";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Horn_rpt_21c_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_OFF =
    Horn_rpt_21c_Output_valueType_OUTPUT_VALUE_OFF;
  static constexpr Output_valueType OUTPUT_VALUE_ON =
    Horn_rpt_21c_Output_valueType_OUTPUT_VALUE_ON;
  static inline bool Output_valueType_IsValid(int value) {
    return Horn_rpt_21c_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Horn_rpt_21c_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Horn_rpt_21c_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Horn_rpt_21c_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Horn_rpt_21c_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Horn_rpt_21c_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Horn_rpt_21c_Output_valueType_Parse(name, value);
  }

  typedef Horn_rpt_21c_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_OFF =
    Horn_rpt_21c_Commanded_valueType_COMMANDED_VALUE_OFF;
  static constexpr Commanded_valueType COMMANDED_VALUE_ON =
    Horn_rpt_21c_Commanded_valueType_COMMANDED_VALUE_ON;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Horn_rpt_21c_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Horn_rpt_21c_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Horn_rpt_21c_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Horn_rpt_21c_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Horn_rpt_21c_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Horn_rpt_21c_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Horn_rpt_21c_Commanded_valueType_Parse(name, value);
  }

  typedef Horn_rpt_21c_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_OFF =
    Horn_rpt_21c_Manual_inputType_MANUAL_INPUT_OFF;
  static constexpr Manual_inputType MANUAL_INPUT_ON =
    Horn_rpt_21c_Manual_inputType_MANUAL_INPUT_ON;
  static inline bool Manual_inputType_IsValid(int value) {
    return Horn_rpt_21c_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Horn_rpt_21c_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Horn_rpt_21c_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Horn_rpt_21c_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Horn_rpt_21c_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Horn_rpt_21c_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Horn_rpt_21c_Manual_inputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFaultFieldNumber = 1,
    kPacmodFaultFieldNumber = 2,
    kOverrideActiveFieldNumber = 3,
    kOutputReportedFaultFieldNumber = 4,
    kInputOutputFaultFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kCommandOutputFaultFieldNumber = 7,
    kOutputValueFieldNumber = 8,
    kCommandedValueFieldNumber = 9,
    kManualInputFieldNumber = 10,
  };
  // optional bool vehicle_fault = 1;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 2;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 3;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 4;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 5;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 6;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 7;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional .apollo.canbus.Horn_rpt_21c.Output_valueType output_value = 8;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Horn_rpt_21c_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Horn_rpt_21c_Output_valueType value);
  private:
  ::apollo::canbus::Horn_rpt_21c_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Horn_rpt_21c_Output_valueType value);
  public:

  // optional .apollo.canbus.Horn_rpt_21c.Commanded_valueType commanded_value = 9;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Horn_rpt_21c_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Horn_rpt_21c_Commanded_valueType value);
  private:
  ::apollo::canbus::Horn_rpt_21c_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Horn_rpt_21c_Commanded_valueType value);
  public:

  // optional .apollo.canbus.Horn_rpt_21c.Manual_inputType manual_input = 10;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Horn_rpt_21c_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Horn_rpt_21c_Manual_inputType value);
  private:
  ::apollo::canbus::Horn_rpt_21c_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Horn_rpt_21c_Manual_inputType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Horn_rpt_21c)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  int output_value_;
  int commanded_value_;
  int manual_input_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Shift_rpt_228 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Shift_rpt_228) */ {
 public:
  Shift_rpt_228();
  virtual ~Shift_rpt_228();

  Shift_rpt_228(const Shift_rpt_228& from);
  Shift_rpt_228(Shift_rpt_228&& from) noexcept
    : Shift_rpt_228() {
    *this = ::std::move(from);
  }

  inline Shift_rpt_228& operator=(const Shift_rpt_228& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shift_rpt_228& operator=(Shift_rpt_228&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shift_rpt_228& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shift_rpt_228* internal_default_instance() {
    return reinterpret_cast<const Shift_rpt_228*>(
               &_Shift_rpt_228_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Shift_rpt_228& a, Shift_rpt_228& b) {
    a.Swap(&b);
  }
  inline void Swap(Shift_rpt_228* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shift_rpt_228* New() const final {
    return CreateMaybeMessage<Shift_rpt_228>(nullptr);
  }

  Shift_rpt_228* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shift_rpt_228>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shift_rpt_228& from);
  void MergeFrom(const Shift_rpt_228& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shift_rpt_228* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Shift_rpt_228";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Shift_rpt_228_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_PARK =
    Shift_rpt_228_Manual_inputType_MANUAL_INPUT_PARK;
  static constexpr Manual_inputType MANUAL_INPUT_REVERSE =
    Shift_rpt_228_Manual_inputType_MANUAL_INPUT_REVERSE;
  static constexpr Manual_inputType MANUAL_INPUT_NEUTRAL =
    Shift_rpt_228_Manual_inputType_MANUAL_INPUT_NEUTRAL;
  static constexpr Manual_inputType MANUAL_INPUT_FORWARD_HIGH =
    Shift_rpt_228_Manual_inputType_MANUAL_INPUT_FORWARD_HIGH;
  static constexpr Manual_inputType MANUAL_INPUT_LOW =
    Shift_rpt_228_Manual_inputType_MANUAL_INPUT_LOW;
  static constexpr Manual_inputType MANUAL_INPUT_BETWEEN_GEARS =
    Shift_rpt_228_Manual_inputType_MANUAL_INPUT_BETWEEN_GEARS;
  static constexpr Manual_inputType MANUAL_INPUT_ERROR =
    Shift_rpt_228_Manual_inputType_MANUAL_INPUT_ERROR;
  static constexpr Manual_inputType MANUAL_INPUT_NONE =
    Shift_rpt_228_Manual_inputType_MANUAL_INPUT_NONE;
  static inline bool Manual_inputType_IsValid(int value) {
    return Shift_rpt_228_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Shift_rpt_228_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Shift_rpt_228_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Shift_rpt_228_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Shift_rpt_228_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Shift_rpt_228_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Shift_rpt_228_Manual_inputType_Parse(name, value);
  }

  typedef Shift_rpt_228_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_PARK =
    Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_PARK;
  static constexpr Commanded_valueType COMMANDED_VALUE_REVERSE =
    Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_REVERSE;
  static constexpr Commanded_valueType COMMANDED_VALUE_NEUTRAL =
    Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_NEUTRAL;
  static constexpr Commanded_valueType COMMANDED_VALUE_FORWARD_HIGH =
    Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_FORWARD_HIGH;
  static constexpr Commanded_valueType COMMANDED_VALUE_LOW =
    Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_LOW;
  static constexpr Commanded_valueType COMMANDED_VALUE_NONE =
    Shift_rpt_228_Commanded_valueType_COMMANDED_VALUE_NONE;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Shift_rpt_228_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Shift_rpt_228_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Shift_rpt_228_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Shift_rpt_228_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Shift_rpt_228_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Shift_rpt_228_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Shift_rpt_228_Commanded_valueType_Parse(name, value);
  }

  typedef Shift_rpt_228_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_PARK =
    Shift_rpt_228_Output_valueType_OUTPUT_VALUE_PARK;
  static constexpr Output_valueType OUTPUT_VALUE_REVERSE =
    Shift_rpt_228_Output_valueType_OUTPUT_VALUE_REVERSE;
  static constexpr Output_valueType OUTPUT_VALUE_NEUTRAL =
    Shift_rpt_228_Output_valueType_OUTPUT_VALUE_NEUTRAL;
  static constexpr Output_valueType OUTPUT_VALUE_FORWARD_HIGH =
    Shift_rpt_228_Output_valueType_OUTPUT_VALUE_FORWARD_HIGH;
  static constexpr Output_valueType OUTPUT_VALUE_LOW =
    Shift_rpt_228_Output_valueType_OUTPUT_VALUE_LOW;
  static constexpr Output_valueType OUTPUT_VALUE_BETWEEN_GEARS =
    Shift_rpt_228_Output_valueType_OUTPUT_VALUE_BETWEEN_GEARS;
  static constexpr Output_valueType OUTPUT_VALUE_ERROR =
    Shift_rpt_228_Output_valueType_OUTPUT_VALUE_ERROR;
  static constexpr Output_valueType OUTPUT_VALUE_NONE =
    Shift_rpt_228_Output_valueType_OUTPUT_VALUE_NONE;
  static inline bool Output_valueType_IsValid(int value) {
    return Shift_rpt_228_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Shift_rpt_228_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Shift_rpt_228_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Shift_rpt_228_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Shift_rpt_228_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Shift_rpt_228_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Shift_rpt_228_Output_valueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFaultFieldNumber = 1,
    kPacmodFaultFieldNumber = 2,
    kOverrideActiveFieldNumber = 3,
    kOutputReportedFaultFieldNumber = 4,
    kInputOutputFaultFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kCommandOutputFaultFieldNumber = 7,
    kManualInputFieldNumber = 8,
    kCommandedValueFieldNumber = 9,
    kOutputValueFieldNumber = 10,
  };
  // optional bool vehicle_fault = 1;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 2;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 3;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 4;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 5;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 6;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 7;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional .apollo.canbus.Shift_rpt_228.Manual_inputType manual_input = 8;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Shift_rpt_228_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Shift_rpt_228_Manual_inputType value);
  private:
  ::apollo::canbus::Shift_rpt_228_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Shift_rpt_228_Manual_inputType value);
  public:

  // optional .apollo.canbus.Shift_rpt_228.Commanded_valueType commanded_value = 9;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Shift_rpt_228_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Shift_rpt_228_Commanded_valueType value);
  private:
  ::apollo::canbus::Shift_rpt_228_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Shift_rpt_228_Commanded_valueType value);
  public:

  // optional .apollo.canbus.Shift_rpt_228.Output_valueType output_value = 10;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Shift_rpt_228_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Shift_rpt_228_Output_valueType value);
  private:
  ::apollo::canbus::Shift_rpt_228_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Shift_rpt_228_Output_valueType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Shift_rpt_228)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  int manual_input_;
  int commanded_value_;
  int output_value_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Shift_cmd_128 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Shift_cmd_128) */ {
 public:
  Shift_cmd_128();
  virtual ~Shift_cmd_128();

  Shift_cmd_128(const Shift_cmd_128& from);
  Shift_cmd_128(Shift_cmd_128&& from) noexcept
    : Shift_cmd_128() {
    *this = ::std::move(from);
  }

  inline Shift_cmd_128& operator=(const Shift_cmd_128& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shift_cmd_128& operator=(Shift_cmd_128&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shift_cmd_128& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shift_cmd_128* internal_default_instance() {
    return reinterpret_cast<const Shift_cmd_128*>(
               &_Shift_cmd_128_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Shift_cmd_128& a, Shift_cmd_128& b) {
    a.Swap(&b);
  }
  inline void Swap(Shift_cmd_128* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shift_cmd_128* New() const final {
    return CreateMaybeMessage<Shift_cmd_128>(nullptr);
  }

  Shift_cmd_128* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shift_cmd_128>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shift_cmd_128& from);
  void MergeFrom(const Shift_cmd_128& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shift_cmd_128* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Shift_cmd_128";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Shift_cmd_128_Shift_cmdType Shift_cmdType;
  static constexpr Shift_cmdType SHIFT_CMD_PARK =
    Shift_cmd_128_Shift_cmdType_SHIFT_CMD_PARK;
  static constexpr Shift_cmdType SHIFT_CMD_REVERSE =
    Shift_cmd_128_Shift_cmdType_SHIFT_CMD_REVERSE;
  static constexpr Shift_cmdType SHIFT_CMD_NEUTRAL =
    Shift_cmd_128_Shift_cmdType_SHIFT_CMD_NEUTRAL;
  static constexpr Shift_cmdType SHIFT_CMD_FORWARD_HIGH =
    Shift_cmd_128_Shift_cmdType_SHIFT_CMD_FORWARD_HIGH;
  static constexpr Shift_cmdType SHIFT_CMD_LOW =
    Shift_cmd_128_Shift_cmdType_SHIFT_CMD_LOW;
  static constexpr Shift_cmdType SHIFT_CMD_NONE =
    Shift_cmd_128_Shift_cmdType_SHIFT_CMD_NONE;
  static inline bool Shift_cmdType_IsValid(int value) {
    return Shift_cmd_128_Shift_cmdType_IsValid(value);
  }
  static constexpr Shift_cmdType Shift_cmdType_MIN =
    Shift_cmd_128_Shift_cmdType_Shift_cmdType_MIN;
  static constexpr Shift_cmdType Shift_cmdType_MAX =
    Shift_cmd_128_Shift_cmdType_Shift_cmdType_MAX;
  static constexpr int Shift_cmdType_ARRAYSIZE =
    Shift_cmd_128_Shift_cmdType_Shift_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Shift_cmdType_descriptor() {
    return Shift_cmd_128_Shift_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Shift_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Shift_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Shift_cmdType_Name.");
    return Shift_cmd_128_Shift_cmdType_Name(enum_t_value);
  }
  static inline bool Shift_cmdType_Parse(const std::string& name,
      Shift_cmdType* value) {
    return Shift_cmd_128_Shift_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
    kShiftCmdFieldNumber = 5,
  };
  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // optional .apollo.canbus.Shift_cmd_128.Shift_cmdType shift_cmd = 5;
  bool has_shift_cmd() const;
  private:
  bool _internal_has_shift_cmd() const;
  public:
  void clear_shift_cmd();
  ::apollo::canbus::Shift_cmd_128_Shift_cmdType shift_cmd() const;
  void set_shift_cmd(::apollo::canbus::Shift_cmd_128_Shift_cmdType value);
  private:
  ::apollo::canbus::Shift_cmd_128_Shift_cmdType _internal_shift_cmd() const;
  void _internal_set_shift_cmd(::apollo::canbus::Shift_cmd_128_Shift_cmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Shift_cmd_128)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  int shift_cmd_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Accel_cmd_100 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Accel_cmd_100) */ {
 public:
  Accel_cmd_100();
  virtual ~Accel_cmd_100();

  Accel_cmd_100(const Accel_cmd_100& from);
  Accel_cmd_100(Accel_cmd_100&& from) noexcept
    : Accel_cmd_100() {
    *this = ::std::move(from);
  }

  inline Accel_cmd_100& operator=(const Accel_cmd_100& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accel_cmd_100& operator=(Accel_cmd_100&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accel_cmd_100& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accel_cmd_100* internal_default_instance() {
    return reinterpret_cast<const Accel_cmd_100*>(
               &_Accel_cmd_100_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Accel_cmd_100& a, Accel_cmd_100& b) {
    a.Swap(&b);
  }
  inline void Swap(Accel_cmd_100* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accel_cmd_100* New() const final {
    return CreateMaybeMessage<Accel_cmd_100>(nullptr);
  }

  Accel_cmd_100* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accel_cmd_100>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accel_cmd_100& from);
  void MergeFrom(const Accel_cmd_100& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accel_cmd_100* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Accel_cmd_100";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelCmdFieldNumber = 5,
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
  };
  // optional double accel_cmd = 5;
  bool has_accel_cmd() const;
  private:
  bool _internal_has_accel_cmd() const;
  public:
  void clear_accel_cmd();
  double accel_cmd() const;
  void set_accel_cmd(double value);
  private:
  double _internal_accel_cmd() const;
  void _internal_set_accel_cmd(double value);
  public:

  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Accel_cmd_100)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double accel_cmd_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Parking_brake_rpt_224 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Parking_brake_rpt_224) */ {
 public:
  Parking_brake_rpt_224();
  virtual ~Parking_brake_rpt_224();

  Parking_brake_rpt_224(const Parking_brake_rpt_224& from);
  Parking_brake_rpt_224(Parking_brake_rpt_224&& from) noexcept
    : Parking_brake_rpt_224() {
    *this = ::std::move(from);
  }

  inline Parking_brake_rpt_224& operator=(const Parking_brake_rpt_224& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parking_brake_rpt_224& operator=(Parking_brake_rpt_224&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parking_brake_rpt_224& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parking_brake_rpt_224* internal_default_instance() {
    return reinterpret_cast<const Parking_brake_rpt_224*>(
               &_Parking_brake_rpt_224_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Parking_brake_rpt_224& a, Parking_brake_rpt_224& b) {
    a.Swap(&b);
  }
  inline void Swap(Parking_brake_rpt_224* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parking_brake_rpt_224* New() const final {
    return CreateMaybeMessage<Parking_brake_rpt_224>(nullptr);
  }

  Parking_brake_rpt_224* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parking_brake_rpt_224>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parking_brake_rpt_224& from);
  void MergeFrom(const Parking_brake_rpt_224& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parking_brake_rpt_224* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Parking_brake_rpt_224";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleFaultFieldNumber = 1,
    kPacmodFaultFieldNumber = 2,
    kOverrideActiveFieldNumber = 3,
    kOutputReportedFaultFieldNumber = 4,
    kInputOutputFaultFieldNumber = 5,
    kEnabledFieldNumber = 6,
    kCommandOutputFaultFieldNumber = 7,
    kOutputValueFieldNumber = 8,
    kCommandedValueFieldNumber = 9,
    kManualInputFieldNumber = 10,
  };
  // optional bool vehicle_fault = 1;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 2;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 3;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 4;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 5;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 6;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 7;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // optional bool output_value = 8;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  bool output_value() const;
  void set_output_value(bool value);
  private:
  bool _internal_output_value() const;
  void _internal_set_output_value(bool value);
  public:

  // optional bool commanded_value = 9;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  bool commanded_value() const;
  void set_commanded_value(bool value);
  private:
  bool _internal_commanded_value() const;
  void _internal_set_commanded_value(bool value);
  public:

  // optional bool manual_input = 10;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  bool manual_input() const;
  void set_manual_input(bool value);
  private:
  bool _internal_manual_input() const;
  void _internal_set_manual_input(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Parking_brake_rpt_224)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  bool output_value_;
  bool commanded_value_;
  bool manual_input_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Brake_cmd_104 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brake_cmd_104) */ {
 public:
  Brake_cmd_104();
  virtual ~Brake_cmd_104();

  Brake_cmd_104(const Brake_cmd_104& from);
  Brake_cmd_104(Brake_cmd_104&& from) noexcept
    : Brake_cmd_104() {
    *this = ::std::move(from);
  }

  inline Brake_cmd_104& operator=(const Brake_cmd_104& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brake_cmd_104& operator=(Brake_cmd_104&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brake_cmd_104& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Brake_cmd_104* internal_default_instance() {
    return reinterpret_cast<const Brake_cmd_104*>(
               &_Brake_cmd_104_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Brake_cmd_104& a, Brake_cmd_104& b) {
    a.Swap(&b);
  }
  inline void Swap(Brake_cmd_104* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brake_cmd_104* New() const final {
    return CreateMaybeMessage<Brake_cmd_104>(nullptr);
  }

  Brake_cmd_104* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brake_cmd_104>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brake_cmd_104& from);
  void MergeFrom(const Brake_cmd_104& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brake_cmd_104* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brake_cmd_104";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrakeCmdFieldNumber = 5,
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
  };
  // optional double brake_cmd = 5;
  bool has_brake_cmd() const;
  private:
  bool _internal_has_brake_cmd() const;
  public:
  void clear_brake_cmd();
  double brake_cmd() const;
  void set_brake_cmd(double value);
  private:
  double _internal_brake_cmd() const;
  void _internal_set_brake_cmd(double value);
  public:

  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brake_cmd_104)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double brake_cmd_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Media_controls_rpt_220 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Media_controls_rpt_220) */ {
 public:
  Media_controls_rpt_220();
  virtual ~Media_controls_rpt_220();

  Media_controls_rpt_220(const Media_controls_rpt_220& from);
  Media_controls_rpt_220(Media_controls_rpt_220&& from) noexcept
    : Media_controls_rpt_220() {
    *this = ::std::move(from);
  }

  inline Media_controls_rpt_220& operator=(const Media_controls_rpt_220& from) {
    CopyFrom(from);
    return *this;
  }
  inline Media_controls_rpt_220& operator=(Media_controls_rpt_220&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Media_controls_rpt_220& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Media_controls_rpt_220* internal_default_instance() {
    return reinterpret_cast<const Media_controls_rpt_220*>(
               &_Media_controls_rpt_220_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Media_controls_rpt_220& a, Media_controls_rpt_220& b) {
    a.Swap(&b);
  }
  inline void Swap(Media_controls_rpt_220* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Media_controls_rpt_220* New() const final {
    return CreateMaybeMessage<Media_controls_rpt_220>(nullptr);
  }

  Media_controls_rpt_220* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Media_controls_rpt_220>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Media_controls_rpt_220& from);
  void MergeFrom(const Media_controls_rpt_220& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Media_controls_rpt_220* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Media_controls_rpt_220";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Media_controls_rpt_220_Output_valueType Output_valueType;
  static constexpr Output_valueType OUTPUT_VALUE_MEDIA_CONTROL_NONE =
    Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_NONE;
  static constexpr Output_valueType OUTPUT_VALUE_MEDIA_CONTROL_VOICE_COMMAND =
    Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_VOICE_COMMAND;
  static constexpr Output_valueType OUTPUT_VALUE_MEDIA_CONTROL_MUTE =
    Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_MUTE;
  static constexpr Output_valueType OUTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER =
    Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER;
  static constexpr Output_valueType OUTPUT_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP =
    Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
  static constexpr Output_valueType OUTPUT_VALUE_MEDIA_CONTROL_VOL_UP =
    Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_VOL_UP;
  static constexpr Output_valueType OUTPUT_VALUE_MEDIA_CONTROL_VOL_DOWN =
    Media_controls_rpt_220_Output_valueType_OUTPUT_VALUE_MEDIA_CONTROL_VOL_DOWN;
  static inline bool Output_valueType_IsValid(int value) {
    return Media_controls_rpt_220_Output_valueType_IsValid(value);
  }
  static constexpr Output_valueType Output_valueType_MIN =
    Media_controls_rpt_220_Output_valueType_Output_valueType_MIN;
  static constexpr Output_valueType Output_valueType_MAX =
    Media_controls_rpt_220_Output_valueType_Output_valueType_MAX;
  static constexpr int Output_valueType_ARRAYSIZE =
    Media_controls_rpt_220_Output_valueType_Output_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Output_valueType_descriptor() {
    return Media_controls_rpt_220_Output_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Output_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Output_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Output_valueType_Name.");
    return Media_controls_rpt_220_Output_valueType_Name(enum_t_value);
  }
  static inline bool Output_valueType_Parse(const std::string& name,
      Output_valueType* value) {
    return Media_controls_rpt_220_Output_valueType_Parse(name, value);
  }

  typedef Media_controls_rpt_220_Commanded_valueType Commanded_valueType;
  static constexpr Commanded_valueType COMMANDED_VALUE_MEDIA_CONTROL_NONE =
    Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_NONE;
  static constexpr Commanded_valueType COMMANDED_VALUE_MEDIA_CONTROL_VOICE_COMMAND =
    Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_VOICE_COMMAND;
  static constexpr Commanded_valueType COMMANDED_VALUE_MEDIA_CONTROL_MUTE =
    Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_MUTE;
  static constexpr Commanded_valueType COMMANDED_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER =
    Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_PREV_TRACK_ANSWER;
  static constexpr Commanded_valueType COMMANDED_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP =
    Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
  static constexpr Commanded_valueType COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP =
    Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_VOL_UP;
  static constexpr Commanded_valueType COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN =
    Media_controls_rpt_220_Commanded_valueType_COMMANDED_VALUE_MEDIA_CONTROL_VOL_DOWN;
  static inline bool Commanded_valueType_IsValid(int value) {
    return Media_controls_rpt_220_Commanded_valueType_IsValid(value);
  }
  static constexpr Commanded_valueType Commanded_valueType_MIN =
    Media_controls_rpt_220_Commanded_valueType_Commanded_valueType_MIN;
  static constexpr Commanded_valueType Commanded_valueType_MAX =
    Media_controls_rpt_220_Commanded_valueType_Commanded_valueType_MAX;
  static constexpr int Commanded_valueType_ARRAYSIZE =
    Media_controls_rpt_220_Commanded_valueType_Commanded_valueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Commanded_valueType_descriptor() {
    return Media_controls_rpt_220_Commanded_valueType_descriptor();
  }
  template<typename T>
  static inline const std::string& Commanded_valueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Commanded_valueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Commanded_valueType_Name.");
    return Media_controls_rpt_220_Commanded_valueType_Name(enum_t_value);
  }
  static inline bool Commanded_valueType_Parse(const std::string& name,
      Commanded_valueType* value) {
    return Media_controls_rpt_220_Commanded_valueType_Parse(name, value);
  }

  typedef Media_controls_rpt_220_Manual_inputType Manual_inputType;
  static constexpr Manual_inputType MANUAL_INPUT_MEDIA_CONTROL_NONE =
    Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_NONE;
  static constexpr Manual_inputType MANUAL_INPUT_MEDIA_CONTROL_VOICE_COMMAND =
    Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_VOICE_COMMAND;
  static constexpr Manual_inputType MANUAL_INPUT_MEDIA_CONTROL_MUTE =
    Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_MUTE;
  static constexpr Manual_inputType MANUAL_INPUT_MEDIA_CONTROL_PREV_TRACK_ANSWER =
    Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_PREV_TRACK_ANSWER;
  static constexpr Manual_inputType MANUAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP =
    Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_NEXT_TRACK_HANG_UP;
  static constexpr Manual_inputType MANUAL_INPUT_MEDIA_CONTROL_VOL_UP =
    Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_VOL_UP;
  static constexpr Manual_inputType MANUAL_INPUT_MEDIA_CONTROL_VOL_DOWN =
    Media_controls_rpt_220_Manual_inputType_MANUAL_INPUT_MEDIA_CONTROL_VOL_DOWN;
  static inline bool Manual_inputType_IsValid(int value) {
    return Media_controls_rpt_220_Manual_inputType_IsValid(value);
  }
  static constexpr Manual_inputType Manual_inputType_MIN =
    Media_controls_rpt_220_Manual_inputType_Manual_inputType_MIN;
  static constexpr Manual_inputType Manual_inputType_MAX =
    Media_controls_rpt_220_Manual_inputType_Manual_inputType_MAX;
  static constexpr int Manual_inputType_ARRAYSIZE =
    Media_controls_rpt_220_Manual_inputType_Manual_inputType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Manual_inputType_descriptor() {
    return Media_controls_rpt_220_Manual_inputType_descriptor();
  }
  template<typename T>
  static inline const std::string& Manual_inputType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Manual_inputType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Manual_inputType_Name.");
    return Media_controls_rpt_220_Manual_inputType_Name(enum_t_value);
  }
  static inline bool Manual_inputType_Parse(const std::string& name,
      Manual_inputType* value) {
    return Media_controls_rpt_220_Manual_inputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputValueFieldNumber = 1,
    kCommandedValueFieldNumber = 2,
    kManualInputFieldNumber = 3,
    kVehicleFaultFieldNumber = 4,
    kPacmodFaultFieldNumber = 5,
    kOverrideActiveFieldNumber = 6,
    kOutputReportedFaultFieldNumber = 7,
    kInputOutputFaultFieldNumber = 8,
    kEnabledFieldNumber = 9,
    kCommandOutputFaultFieldNumber = 10,
  };
  // optional .apollo.canbus.Media_controls_rpt_220.Output_valueType output_value = 1;
  bool has_output_value() const;
  private:
  bool _internal_has_output_value() const;
  public:
  void clear_output_value();
  ::apollo::canbus::Media_controls_rpt_220_Output_valueType output_value() const;
  void set_output_value(::apollo::canbus::Media_controls_rpt_220_Output_valueType value);
  private:
  ::apollo::canbus::Media_controls_rpt_220_Output_valueType _internal_output_value() const;
  void _internal_set_output_value(::apollo::canbus::Media_controls_rpt_220_Output_valueType value);
  public:

  // optional .apollo.canbus.Media_controls_rpt_220.Commanded_valueType commanded_value = 2;
  bool has_commanded_value() const;
  private:
  bool _internal_has_commanded_value() const;
  public:
  void clear_commanded_value();
  ::apollo::canbus::Media_controls_rpt_220_Commanded_valueType commanded_value() const;
  void set_commanded_value(::apollo::canbus::Media_controls_rpt_220_Commanded_valueType value);
  private:
  ::apollo::canbus::Media_controls_rpt_220_Commanded_valueType _internal_commanded_value() const;
  void _internal_set_commanded_value(::apollo::canbus::Media_controls_rpt_220_Commanded_valueType value);
  public:

  // optional .apollo.canbus.Media_controls_rpt_220.Manual_inputType manual_input = 3;
  bool has_manual_input() const;
  private:
  bool _internal_has_manual_input() const;
  public:
  void clear_manual_input();
  ::apollo::canbus::Media_controls_rpt_220_Manual_inputType manual_input() const;
  void set_manual_input(::apollo::canbus::Media_controls_rpt_220_Manual_inputType value);
  private:
  ::apollo::canbus::Media_controls_rpt_220_Manual_inputType _internal_manual_input() const;
  void _internal_set_manual_input(::apollo::canbus::Media_controls_rpt_220_Manual_inputType value);
  public:

  // optional bool vehicle_fault = 4;
  bool has_vehicle_fault() const;
  private:
  bool _internal_has_vehicle_fault() const;
  public:
  void clear_vehicle_fault();
  bool vehicle_fault() const;
  void set_vehicle_fault(bool value);
  private:
  bool _internal_vehicle_fault() const;
  void _internal_set_vehicle_fault(bool value);
  public:

  // optional bool pacmod_fault = 5;
  bool has_pacmod_fault() const;
  private:
  bool _internal_has_pacmod_fault() const;
  public:
  void clear_pacmod_fault();
  bool pacmod_fault() const;
  void set_pacmod_fault(bool value);
  private:
  bool _internal_pacmod_fault() const;
  void _internal_set_pacmod_fault(bool value);
  public:

  // optional bool override_active = 6;
  bool has_override_active() const;
  private:
  bool _internal_has_override_active() const;
  public:
  void clear_override_active();
  bool override_active() const;
  void set_override_active(bool value);
  private:
  bool _internal_override_active() const;
  void _internal_set_override_active(bool value);
  public:

  // optional bool output_reported_fault = 7;
  bool has_output_reported_fault() const;
  private:
  bool _internal_has_output_reported_fault() const;
  public:
  void clear_output_reported_fault();
  bool output_reported_fault() const;
  void set_output_reported_fault(bool value);
  private:
  bool _internal_output_reported_fault() const;
  void _internal_set_output_reported_fault(bool value);
  public:

  // optional bool input_output_fault = 8;
  bool has_input_output_fault() const;
  private:
  bool _internal_has_input_output_fault() const;
  public:
  void clear_input_output_fault();
  bool input_output_fault() const;
  void set_input_output_fault(bool value);
  private:
  bool _internal_input_output_fault() const;
  void _internal_set_input_output_fault(bool value);
  public:

  // optional bool enabled = 9;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional bool command_output_fault = 10;
  bool has_command_output_fault() const;
  private:
  bool _internal_has_command_output_fault() const;
  public:
  void clear_command_output_fault();
  bool command_output_fault() const;
  void set_command_output_fault(bool value);
  private:
  bool _internal_command_output_fault() const;
  void _internal_set_command_output_fault(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Media_controls_rpt_220)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int output_value_;
  int commanded_value_;
  int manual_input_;
  bool vehicle_fault_;
  bool pacmod_fault_;
  bool override_active_;
  bool output_reported_fault_;
  bool input_output_fault_;
  bool enabled_;
  bool command_output_fault_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Steering_aux_rpt_32c :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Steering_aux_rpt_32c) */ {
 public:
  Steering_aux_rpt_32c();
  virtual ~Steering_aux_rpt_32c();

  Steering_aux_rpt_32c(const Steering_aux_rpt_32c& from);
  Steering_aux_rpt_32c(Steering_aux_rpt_32c&& from) noexcept
    : Steering_aux_rpt_32c() {
    *this = ::std::move(from);
  }

  inline Steering_aux_rpt_32c& operator=(const Steering_aux_rpt_32c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steering_aux_rpt_32c& operator=(Steering_aux_rpt_32c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Steering_aux_rpt_32c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Steering_aux_rpt_32c* internal_default_instance() {
    return reinterpret_cast<const Steering_aux_rpt_32c*>(
               &_Steering_aux_rpt_32c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Steering_aux_rpt_32c& a, Steering_aux_rpt_32c& b) {
    a.Swap(&b);
  }
  inline void Swap(Steering_aux_rpt_32c* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Steering_aux_rpt_32c* New() const final {
    return CreateMaybeMessage<Steering_aux_rpt_32c>(nullptr);
  }

  Steering_aux_rpt_32c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Steering_aux_rpt_32c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Steering_aux_rpt_32c& from);
  void MergeFrom(const Steering_aux_rpt_32c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steering_aux_rpt_32c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Steering_aux_rpt_32c";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInteractionIsValidFieldNumber = 1,
    kUserInteractionFieldNumber = 2,
    kRotationRateIsValidFieldNumber = 3,
    kRawTorqueIsValidFieldNumber = 5,
    kRawPositionIsValidFieldNumber = 7,
    kRotationRateFieldNumber = 4,
    kRawTorqueFieldNumber = 6,
    kRawPositionFieldNumber = 8,
  };
  // optional bool user_interaction_is_valid = 1;
  bool has_user_interaction_is_valid() const;
  private:
  bool _internal_has_user_interaction_is_valid() const;
  public:
  void clear_user_interaction_is_valid();
  bool user_interaction_is_valid() const;
  void set_user_interaction_is_valid(bool value);
  private:
  bool _internal_user_interaction_is_valid() const;
  void _internal_set_user_interaction_is_valid(bool value);
  public:

  // optional bool user_interaction = 2;
  bool has_user_interaction() const;
  private:
  bool _internal_has_user_interaction() const;
  public:
  void clear_user_interaction();
  bool user_interaction() const;
  void set_user_interaction(bool value);
  private:
  bool _internal_user_interaction() const;
  void _internal_set_user_interaction(bool value);
  public:

  // optional bool rotation_rate_is_valid = 3;
  bool has_rotation_rate_is_valid() const;
  private:
  bool _internal_has_rotation_rate_is_valid() const;
  public:
  void clear_rotation_rate_is_valid();
  bool rotation_rate_is_valid() const;
  void set_rotation_rate_is_valid(bool value);
  private:
  bool _internal_rotation_rate_is_valid() const;
  void _internal_set_rotation_rate_is_valid(bool value);
  public:

  // optional bool raw_torque_is_valid = 5;
  bool has_raw_torque_is_valid() const;
  private:
  bool _internal_has_raw_torque_is_valid() const;
  public:
  void clear_raw_torque_is_valid();
  bool raw_torque_is_valid() const;
  void set_raw_torque_is_valid(bool value);
  private:
  bool _internal_raw_torque_is_valid() const;
  void _internal_set_raw_torque_is_valid(bool value);
  public:

  // optional bool raw_position_is_valid = 7;
  bool has_raw_position_is_valid() const;
  private:
  bool _internal_has_raw_position_is_valid() const;
  public:
  void clear_raw_position_is_valid();
  bool raw_position_is_valid() const;
  void set_raw_position_is_valid(bool value);
  private:
  bool _internal_raw_position_is_valid() const;
  void _internal_set_raw_position_is_valid(bool value);
  public:

  // optional double rotation_rate = 4;
  bool has_rotation_rate() const;
  private:
  bool _internal_has_rotation_rate() const;
  public:
  void clear_rotation_rate();
  double rotation_rate() const;
  void set_rotation_rate(double value);
  private:
  double _internal_rotation_rate() const;
  void _internal_set_rotation_rate(double value);
  public:

  // optional double raw_torque = 6;
  bool has_raw_torque() const;
  private:
  bool _internal_has_raw_torque() const;
  public:
  void clear_raw_torque();
  double raw_torque() const;
  void set_raw_torque(double value);
  private:
  double _internal_raw_torque() const;
  void _internal_set_raw_torque(double value);
  public:

  // optional double raw_position = 8;
  bool has_raw_position() const;
  private:
  bool _internal_has_raw_position() const;
  public:
  void clear_raw_position();
  double raw_position() const;
  void set_raw_position(double value);
  private:
  double _internal_raw_position() const;
  void _internal_set_raw_position(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Steering_aux_rpt_32c)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool user_interaction_is_valid_;
  bool user_interaction_;
  bool rotation_rate_is_valid_;
  bool raw_torque_is_valid_;
  bool raw_position_is_valid_;
  double rotation_rate_;
  double raw_torque_;
  double raw_position_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Lat_lon_heading_rpt_40e :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Lat_lon_heading_rpt_40e) */ {
 public:
  Lat_lon_heading_rpt_40e();
  virtual ~Lat_lon_heading_rpt_40e();

  Lat_lon_heading_rpt_40e(const Lat_lon_heading_rpt_40e& from);
  Lat_lon_heading_rpt_40e(Lat_lon_heading_rpt_40e&& from) noexcept
    : Lat_lon_heading_rpt_40e() {
    *this = ::std::move(from);
  }

  inline Lat_lon_heading_rpt_40e& operator=(const Lat_lon_heading_rpt_40e& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lat_lon_heading_rpt_40e& operator=(Lat_lon_heading_rpt_40e&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lat_lon_heading_rpt_40e& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lat_lon_heading_rpt_40e* internal_default_instance() {
    return reinterpret_cast<const Lat_lon_heading_rpt_40e*>(
               &_Lat_lon_heading_rpt_40e_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Lat_lon_heading_rpt_40e& a, Lat_lon_heading_rpt_40e& b) {
    a.Swap(&b);
  }
  inline void Swap(Lat_lon_heading_rpt_40e* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lat_lon_heading_rpt_40e* New() const final {
    return CreateMaybeMessage<Lat_lon_heading_rpt_40e>(nullptr);
  }

  Lat_lon_heading_rpt_40e* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lat_lon_heading_rpt_40e>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lat_lon_heading_rpt_40e& from);
  void MergeFrom(const Lat_lon_heading_rpt_40e& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lat_lon_heading_rpt_40e* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Lat_lon_heading_rpt_40e";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingFieldNumber = 1,
    kLongitudeSecondsFieldNumber = 2,
    kLongitudeMinutesFieldNumber = 3,
    kLongitudeDegreesFieldNumber = 4,
    kLatitudeSecondsFieldNumber = 5,
    kLatitudeMinutesFieldNumber = 6,
    kLatitudeDegreesFieldNumber = 7,
  };
  // optional double heading = 1;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional int32 longitude_seconds = 2;
  bool has_longitude_seconds() const;
  private:
  bool _internal_has_longitude_seconds() const;
  public:
  void clear_longitude_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 longitude_seconds() const;
  void set_longitude_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_longitude_seconds() const;
  void _internal_set_longitude_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 longitude_minutes = 3;
  bool has_longitude_minutes() const;
  private:
  bool _internal_has_longitude_minutes() const;
  public:
  void clear_longitude_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 longitude_minutes() const;
  void set_longitude_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_longitude_minutes() const;
  void _internal_set_longitude_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 longitude_degrees = 4;
  bool has_longitude_degrees() const;
  private:
  bool _internal_has_longitude_degrees() const;
  public:
  void clear_longitude_degrees();
  ::PROTOBUF_NAMESPACE_ID::int32 longitude_degrees() const;
  void set_longitude_degrees(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_longitude_degrees() const;
  void _internal_set_longitude_degrees(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 latitude_seconds = 5;
  bool has_latitude_seconds() const;
  private:
  bool _internal_has_latitude_seconds() const;
  public:
  void clear_latitude_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 latitude_seconds() const;
  void set_latitude_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latitude_seconds() const;
  void _internal_set_latitude_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 latitude_minutes = 6;
  bool has_latitude_minutes() const;
  private:
  bool _internal_has_latitude_minutes() const;
  public:
  void clear_latitude_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 latitude_minutes() const;
  void set_latitude_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latitude_minutes() const;
  void _internal_set_latitude_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 latitude_degrees = 7;
  bool has_latitude_degrees() const;
  private:
  bool _internal_has_latitude_degrees() const;
  public:
  void clear_latitude_degrees();
  ::PROTOBUF_NAMESPACE_ID::int32 latitude_degrees() const;
  void set_latitude_degrees(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latitude_degrees() const;
  void _internal_set_latitude_degrees(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Lat_lon_heading_rpt_40e)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 longitude_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 longitude_minutes_;
  ::PROTOBUF_NAMESPACE_ID::int32 longitude_degrees_;
  ::PROTOBUF_NAMESPACE_ID::int32 latitude_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 latitude_minutes_;
  ::PROTOBUF_NAMESPACE_ID::int32 latitude_degrees_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Yaw_rate_rpt_40d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Yaw_rate_rpt_40d) */ {
 public:
  Yaw_rate_rpt_40d();
  virtual ~Yaw_rate_rpt_40d();

  Yaw_rate_rpt_40d(const Yaw_rate_rpt_40d& from);
  Yaw_rate_rpt_40d(Yaw_rate_rpt_40d&& from) noexcept
    : Yaw_rate_rpt_40d() {
    *this = ::std::move(from);
  }

  inline Yaw_rate_rpt_40d& operator=(const Yaw_rate_rpt_40d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Yaw_rate_rpt_40d& operator=(Yaw_rate_rpt_40d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Yaw_rate_rpt_40d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Yaw_rate_rpt_40d* internal_default_instance() {
    return reinterpret_cast<const Yaw_rate_rpt_40d*>(
               &_Yaw_rate_rpt_40d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Yaw_rate_rpt_40d& a, Yaw_rate_rpt_40d& b) {
    a.Swap(&b);
  }
  inline void Swap(Yaw_rate_rpt_40d* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Yaw_rate_rpt_40d* New() const final {
    return CreateMaybeMessage<Yaw_rate_rpt_40d>(nullptr);
  }

  Yaw_rate_rpt_40d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Yaw_rate_rpt_40d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Yaw_rate_rpt_40d& from);
  void MergeFrom(const Yaw_rate_rpt_40d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Yaw_rate_rpt_40d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Yaw_rate_rpt_40d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawRateFieldNumber = 1,
  };
  // optional double yaw_rate = 1;
  bool has_yaw_rate() const;
  private:
  bool _internal_has_yaw_rate() const;
  public:
  void clear_yaw_rate();
  double yaw_rate() const;
  void set_yaw_rate(double value);
  private:
  double _internal_yaw_rate() const;
  void _internal_set_yaw_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Yaw_rate_rpt_40d)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double yaw_rate_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Date_time_rpt_40f :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Date_time_rpt_40f) */ {
 public:
  Date_time_rpt_40f();
  virtual ~Date_time_rpt_40f();

  Date_time_rpt_40f(const Date_time_rpt_40f& from);
  Date_time_rpt_40f(Date_time_rpt_40f&& from) noexcept
    : Date_time_rpt_40f() {
    *this = ::std::move(from);
  }

  inline Date_time_rpt_40f& operator=(const Date_time_rpt_40f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date_time_rpt_40f& operator=(Date_time_rpt_40f&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Date_time_rpt_40f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Date_time_rpt_40f* internal_default_instance() {
    return reinterpret_cast<const Date_time_rpt_40f*>(
               &_Date_time_rpt_40f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Date_time_rpt_40f& a, Date_time_rpt_40f& b) {
    a.Swap(&b);
  }
  inline void Swap(Date_time_rpt_40f* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Date_time_rpt_40f* New() const final {
    return CreateMaybeMessage<Date_time_rpt_40f>(nullptr);
  }

  Date_time_rpt_40f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Date_time_rpt_40f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Date_time_rpt_40f& from);
  void MergeFrom(const Date_time_rpt_40f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date_time_rpt_40f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Date_time_rpt_40f";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSecondFieldNumber = 1,
    kTimeMinuteFieldNumber = 2,
    kTimeHourFieldNumber = 3,
    kDateDayFieldNumber = 4,
    kDateMonthFieldNumber = 5,
    kDateYearFieldNumber = 6,
  };
  // optional int32 time_second = 1;
  bool has_time_second() const;
  private:
  bool _internal_has_time_second() const;
  public:
  void clear_time_second();
  ::PROTOBUF_NAMESPACE_ID::int32 time_second() const;
  void set_time_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_second() const;
  void _internal_set_time_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 time_minute = 2;
  bool has_time_minute() const;
  private:
  bool _internal_has_time_minute() const;
  public:
  void clear_time_minute();
  ::PROTOBUF_NAMESPACE_ID::int32 time_minute() const;
  void set_time_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_minute() const;
  void _internal_set_time_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 time_hour = 3;
  bool has_time_hour() const;
  private:
  bool _internal_has_time_hour() const;
  public:
  void clear_time_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 time_hour() const;
  void set_time_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time_hour() const;
  void _internal_set_time_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 date_day = 4;
  bool has_date_day() const;
  private:
  bool _internal_has_date_day() const;
  public:
  void clear_date_day();
  ::PROTOBUF_NAMESPACE_ID::int32 date_day() const;
  void set_date_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_date_day() const;
  void _internal_set_date_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 date_month = 5;
  bool has_date_month() const;
  private:
  bool _internal_has_date_month() const;
  public:
  void clear_date_month();
  ::PROTOBUF_NAMESPACE_ID::int32 date_month() const;
  void set_date_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_date_month() const;
  void _internal_set_date_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 date_year = 6;
  bool has_date_year() const;
  private:
  bool _internal_has_date_year() const;
  public:
  void clear_date_year();
  ::PROTOBUF_NAMESPACE_ID::int32 date_year() const;
  void set_date_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_date_year() const;
  void _internal_set_date_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Date_time_rpt_40f)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_second_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_minute_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 date_day_;
  ::PROTOBUF_NAMESPACE_ID::int32 date_month_;
  ::PROTOBUF_NAMESPACE_ID::int32 date_year_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Vin_rpt_414 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vin_rpt_414) */ {
 public:
  Vin_rpt_414();
  virtual ~Vin_rpt_414();

  Vin_rpt_414(const Vin_rpt_414& from);
  Vin_rpt_414(Vin_rpt_414&& from) noexcept
    : Vin_rpt_414() {
    *this = ::std::move(from);
  }

  inline Vin_rpt_414& operator=(const Vin_rpt_414& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vin_rpt_414& operator=(Vin_rpt_414&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vin_rpt_414& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vin_rpt_414* internal_default_instance() {
    return reinterpret_cast<const Vin_rpt_414*>(
               &_Vin_rpt_414_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Vin_rpt_414& a, Vin_rpt_414& b) {
    a.Swap(&b);
  }
  inline void Swap(Vin_rpt_414* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vin_rpt_414* New() const final {
    return CreateMaybeMessage<Vin_rpt_414>(nullptr);
  }

  Vin_rpt_414* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vin_rpt_414>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vin_rpt_414& from);
  void MergeFrom(const Vin_rpt_414& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vin_rpt_414* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vin_rpt_414";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehSerialFieldNumber = 1,
    kVehMyCodeFieldNumber = 2,
    kVehMfgCodeFieldNumber = 3,
  };
  // optional int32 veh_serial = 1;
  bool has_veh_serial() const;
  private:
  bool _internal_has_veh_serial() const;
  public:
  void clear_veh_serial();
  ::PROTOBUF_NAMESPACE_ID::int32 veh_serial() const;
  void set_veh_serial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_veh_serial() const;
  void _internal_set_veh_serial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 veh_my_code = 2;
  bool has_veh_my_code() const;
  private:
  bool _internal_has_veh_my_code() const;
  public:
  void clear_veh_my_code();
  ::PROTOBUF_NAMESPACE_ID::int32 veh_my_code() const;
  void set_veh_my_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_veh_my_code() const;
  void _internal_set_veh_my_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 veh_mfg_code = 3;
  bool has_veh_mfg_code() const;
  private:
  bool _internal_has_veh_mfg_code() const;
  public:
  void clear_veh_mfg_code();
  ::PROTOBUF_NAMESPACE_ID::int32 veh_mfg_code() const;
  void set_veh_mfg_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_veh_mfg_code() const;
  void _internal_set_veh_mfg_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vin_rpt_414)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 veh_serial_;
  ::PROTOBUF_NAMESPACE_ID::int32 veh_my_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 veh_mfg_code_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Occupancy_rpt_415 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Occupancy_rpt_415) */ {
 public:
  Occupancy_rpt_415();
  virtual ~Occupancy_rpt_415();

  Occupancy_rpt_415(const Occupancy_rpt_415& from);
  Occupancy_rpt_415(Occupancy_rpt_415&& from) noexcept
    : Occupancy_rpt_415() {
    *this = ::std::move(from);
  }

  inline Occupancy_rpt_415& operator=(const Occupancy_rpt_415& from) {
    CopyFrom(from);
    return *this;
  }
  inline Occupancy_rpt_415& operator=(Occupancy_rpt_415&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Occupancy_rpt_415& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Occupancy_rpt_415* internal_default_instance() {
    return reinterpret_cast<const Occupancy_rpt_415*>(
               &_Occupancy_rpt_415_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(Occupancy_rpt_415& a, Occupancy_rpt_415& b) {
    a.Swap(&b);
  }
  inline void Swap(Occupancy_rpt_415* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Occupancy_rpt_415* New() const final {
    return CreateMaybeMessage<Occupancy_rpt_415>(nullptr);
  }

  Occupancy_rpt_415* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Occupancy_rpt_415>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Occupancy_rpt_415& from);
  void MergeFrom(const Occupancy_rpt_415& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Occupancy_rpt_415* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Occupancy_rpt_415";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRearSeatbeltBuckledIsValidFieldNumber = 1,
    kPassSeatbeltBuckledIsValidFieldNumber = 2,
    kDriverSeatbeltBuckledIsValidFieldNumber = 3,
    kRearSeatOccupiedIsValidFieldNumber = 4,
    kPassSeatOccupiedIsValidFieldNumber = 5,
    kDriverSeatOccupiedIsValidFieldNumber = 6,
    kRearSeatbeltBuckledFieldNumber = 7,
    kPassSeatbeltBuckledFieldNumber = 8,
    kDriverSeatbeltBuckledFieldNumber = 9,
    kRearSeatOccupiedFieldNumber = 10,
    kPassSeatOccupiedFieldNumber = 11,
    kDriverSeatOccupiedFieldNumber = 12,
  };
  // optional bool rear_seatbelt_buckled_is_valid = 1;
  bool has_rear_seatbelt_buckled_is_valid() const;
  private:
  bool _internal_has_rear_seatbelt_buckled_is_valid() const;
  public:
  void clear_rear_seatbelt_buckled_is_valid();
  bool rear_seatbelt_buckled_is_valid() const;
  void set_rear_seatbelt_buckled_is_valid(bool value);
  private:
  bool _internal_rear_seatbelt_buckled_is_valid() const;
  void _internal_set_rear_seatbelt_buckled_is_valid(bool value);
  public:

  // optional bool pass_seatbelt_buckled_is_valid = 2;
  bool has_pass_seatbelt_buckled_is_valid() const;
  private:
  bool _internal_has_pass_seatbelt_buckled_is_valid() const;
  public:
  void clear_pass_seatbelt_buckled_is_valid();
  bool pass_seatbelt_buckled_is_valid() const;
  void set_pass_seatbelt_buckled_is_valid(bool value);
  private:
  bool _internal_pass_seatbelt_buckled_is_valid() const;
  void _internal_set_pass_seatbelt_buckled_is_valid(bool value);
  public:

  // optional bool driver_seatbelt_buckled_is_valid = 3;
  bool has_driver_seatbelt_buckled_is_valid() const;
  private:
  bool _internal_has_driver_seatbelt_buckled_is_valid() const;
  public:
  void clear_driver_seatbelt_buckled_is_valid();
  bool driver_seatbelt_buckled_is_valid() const;
  void set_driver_seatbelt_buckled_is_valid(bool value);
  private:
  bool _internal_driver_seatbelt_buckled_is_valid() const;
  void _internal_set_driver_seatbelt_buckled_is_valid(bool value);
  public:

  // optional bool rear_seat_occupied_is_valid = 4;
  bool has_rear_seat_occupied_is_valid() const;
  private:
  bool _internal_has_rear_seat_occupied_is_valid() const;
  public:
  void clear_rear_seat_occupied_is_valid();
  bool rear_seat_occupied_is_valid() const;
  void set_rear_seat_occupied_is_valid(bool value);
  private:
  bool _internal_rear_seat_occupied_is_valid() const;
  void _internal_set_rear_seat_occupied_is_valid(bool value);
  public:

  // optional bool pass_seat_occupied_is_valid = 5;
  bool has_pass_seat_occupied_is_valid() const;
  private:
  bool _internal_has_pass_seat_occupied_is_valid() const;
  public:
  void clear_pass_seat_occupied_is_valid();
  bool pass_seat_occupied_is_valid() const;
  void set_pass_seat_occupied_is_valid(bool value);
  private:
  bool _internal_pass_seat_occupied_is_valid() const;
  void _internal_set_pass_seat_occupied_is_valid(bool value);
  public:

  // optional bool driver_seat_occupied_is_valid = 6;
  bool has_driver_seat_occupied_is_valid() const;
  private:
  bool _internal_has_driver_seat_occupied_is_valid() const;
  public:
  void clear_driver_seat_occupied_is_valid();
  bool driver_seat_occupied_is_valid() const;
  void set_driver_seat_occupied_is_valid(bool value);
  private:
  bool _internal_driver_seat_occupied_is_valid() const;
  void _internal_set_driver_seat_occupied_is_valid(bool value);
  public:

  // optional bool rear_seatbelt_buckled = 7;
  bool has_rear_seatbelt_buckled() const;
  private:
  bool _internal_has_rear_seatbelt_buckled() const;
  public:
  void clear_rear_seatbelt_buckled();
  bool rear_seatbelt_buckled() const;
  void set_rear_seatbelt_buckled(bool value);
  private:
  bool _internal_rear_seatbelt_buckled() const;
  void _internal_set_rear_seatbelt_buckled(bool value);
  public:

  // optional bool pass_seatbelt_buckled = 8;
  bool has_pass_seatbelt_buckled() const;
  private:
  bool _internal_has_pass_seatbelt_buckled() const;
  public:
  void clear_pass_seatbelt_buckled();
  bool pass_seatbelt_buckled() const;
  void set_pass_seatbelt_buckled(bool value);
  private:
  bool _internal_pass_seatbelt_buckled() const;
  void _internal_set_pass_seatbelt_buckled(bool value);
  public:

  // optional bool driver_seatbelt_buckled = 9;
  bool has_driver_seatbelt_buckled() const;
  private:
  bool _internal_has_driver_seatbelt_buckled() const;
  public:
  void clear_driver_seatbelt_buckled();
  bool driver_seatbelt_buckled() const;
  void set_driver_seatbelt_buckled(bool value);
  private:
  bool _internal_driver_seatbelt_buckled() const;
  void _internal_set_driver_seatbelt_buckled(bool value);
  public:

  // optional bool rear_seat_occupied = 10;
  bool has_rear_seat_occupied() const;
  private:
  bool _internal_has_rear_seat_occupied() const;
  public:
  void clear_rear_seat_occupied();
  bool rear_seat_occupied() const;
  void set_rear_seat_occupied(bool value);
  private:
  bool _internal_rear_seat_occupied() const;
  void _internal_set_rear_seat_occupied(bool value);
  public:

  // optional bool pass_seat_occupied = 11;
  bool has_pass_seat_occupied() const;
  private:
  bool _internal_has_pass_seat_occupied() const;
  public:
  void clear_pass_seat_occupied();
  bool pass_seat_occupied() const;
  void set_pass_seat_occupied(bool value);
  private:
  bool _internal_pass_seat_occupied() const;
  void _internal_set_pass_seat_occupied(bool value);
  public:

  // optional bool driver_seat_occupied = 12;
  bool has_driver_seat_occupied() const;
  private:
  bool _internal_has_driver_seat_occupied() const;
  public:
  void clear_driver_seat_occupied();
  bool driver_seat_occupied() const;
  void set_driver_seat_occupied(bool value);
  private:
  bool _internal_driver_seat_occupied() const;
  void _internal_set_driver_seat_occupied(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Occupancy_rpt_415)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool rear_seatbelt_buckled_is_valid_;
  bool pass_seatbelt_buckled_is_valid_;
  bool driver_seatbelt_buckled_is_valid_;
  bool rear_seat_occupied_is_valid_;
  bool pass_seat_occupied_is_valid_;
  bool driver_seat_occupied_is_valid_;
  bool rear_seatbelt_buckled_;
  bool pass_seatbelt_buckled_;
  bool driver_seatbelt_buckled_;
  bool rear_seat_occupied_;
  bool pass_seat_occupied_;
  bool driver_seat_occupied_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Interior_lights_rpt_416 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Interior_lights_rpt_416) */ {
 public:
  Interior_lights_rpt_416();
  virtual ~Interior_lights_rpt_416();

  Interior_lights_rpt_416(const Interior_lights_rpt_416& from);
  Interior_lights_rpt_416(Interior_lights_rpt_416&& from) noexcept
    : Interior_lights_rpt_416() {
    *this = ::std::move(from);
  }

  inline Interior_lights_rpt_416& operator=(const Interior_lights_rpt_416& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interior_lights_rpt_416& operator=(Interior_lights_rpt_416&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Interior_lights_rpt_416& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Interior_lights_rpt_416* internal_default_instance() {
    return reinterpret_cast<const Interior_lights_rpt_416*>(
               &_Interior_lights_rpt_416_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Interior_lights_rpt_416& a, Interior_lights_rpt_416& b) {
    a.Swap(&b);
  }
  inline void Swap(Interior_lights_rpt_416* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Interior_lights_rpt_416* New() const final {
    return CreateMaybeMessage<Interior_lights_rpt_416>(nullptr);
  }

  Interior_lights_rpt_416* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Interior_lights_rpt_416>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Interior_lights_rpt_416& from);
  void MergeFrom(const Interior_lights_rpt_416& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interior_lights_rpt_416* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Interior_lights_rpt_416";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Interior_lights_rpt_416_Dim_levelType Dim_levelType;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_MIN =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_MIN;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_1 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_1;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_2 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_2;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_3 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_3;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_4 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_4;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_5 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_5;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_6 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_6;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_7 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_7;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_8 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_8;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_9 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_9;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_10 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_10;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_11 =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_11;
  static constexpr Dim_levelType DIM_LEVEL_DIM_LEVEL_MAX =
    Interior_lights_rpt_416_Dim_levelType_DIM_LEVEL_DIM_LEVEL_MAX;
  static inline bool Dim_levelType_IsValid(int value) {
    return Interior_lights_rpt_416_Dim_levelType_IsValid(value);
  }
  static constexpr Dim_levelType Dim_levelType_MIN =
    Interior_lights_rpt_416_Dim_levelType_Dim_levelType_MIN;
  static constexpr Dim_levelType Dim_levelType_MAX =
    Interior_lights_rpt_416_Dim_levelType_Dim_levelType_MAX;
  static constexpr int Dim_levelType_ARRAYSIZE =
    Interior_lights_rpt_416_Dim_levelType_Dim_levelType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Dim_levelType_descriptor() {
    return Interior_lights_rpt_416_Dim_levelType_descriptor();
  }
  template<typename T>
  static inline const std::string& Dim_levelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Dim_levelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Dim_levelType_Name.");
    return Interior_lights_rpt_416_Dim_levelType_Name(enum_t_value);
  }
  static inline bool Dim_levelType_Parse(const std::string& name,
      Dim_levelType* value) {
    return Interior_lights_rpt_416_Dim_levelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDimLevelIsValidFieldNumber = 1,
    kMoodLightsOnIsValidFieldNumber = 2,
    kRearDomeLightsOnIsValidFieldNumber = 3,
    kFrontDomeLightsOnIsValidFieldNumber = 4,
    kDimLevelFieldNumber = 5,
    kMoodLightsOnFieldNumber = 6,
    kRearDomeLightsOnFieldNumber = 7,
    kFrontDomeLightsOnFieldNumber = 8,
  };
  // optional bool dim_level_is_valid = 1;
  bool has_dim_level_is_valid() const;
  private:
  bool _internal_has_dim_level_is_valid() const;
  public:
  void clear_dim_level_is_valid();
  bool dim_level_is_valid() const;
  void set_dim_level_is_valid(bool value);
  private:
  bool _internal_dim_level_is_valid() const;
  void _internal_set_dim_level_is_valid(bool value);
  public:

  // optional bool mood_lights_on_is_valid = 2;
  bool has_mood_lights_on_is_valid() const;
  private:
  bool _internal_has_mood_lights_on_is_valid() const;
  public:
  void clear_mood_lights_on_is_valid();
  bool mood_lights_on_is_valid() const;
  void set_mood_lights_on_is_valid(bool value);
  private:
  bool _internal_mood_lights_on_is_valid() const;
  void _internal_set_mood_lights_on_is_valid(bool value);
  public:

  // optional bool rear_dome_lights_on_is_valid = 3;
  bool has_rear_dome_lights_on_is_valid() const;
  private:
  bool _internal_has_rear_dome_lights_on_is_valid() const;
  public:
  void clear_rear_dome_lights_on_is_valid();
  bool rear_dome_lights_on_is_valid() const;
  void set_rear_dome_lights_on_is_valid(bool value);
  private:
  bool _internal_rear_dome_lights_on_is_valid() const;
  void _internal_set_rear_dome_lights_on_is_valid(bool value);
  public:

  // optional bool front_dome_lights_on_is_valid = 4;
  bool has_front_dome_lights_on_is_valid() const;
  private:
  bool _internal_has_front_dome_lights_on_is_valid() const;
  public:
  void clear_front_dome_lights_on_is_valid();
  bool front_dome_lights_on_is_valid() const;
  void set_front_dome_lights_on_is_valid(bool value);
  private:
  bool _internal_front_dome_lights_on_is_valid() const;
  void _internal_set_front_dome_lights_on_is_valid(bool value);
  public:

  // optional .apollo.canbus.Interior_lights_rpt_416.Dim_levelType dim_level = 5;
  bool has_dim_level() const;
  private:
  bool _internal_has_dim_level() const;
  public:
  void clear_dim_level();
  ::apollo::canbus::Interior_lights_rpt_416_Dim_levelType dim_level() const;
  void set_dim_level(::apollo::canbus::Interior_lights_rpt_416_Dim_levelType value);
  private:
  ::apollo::canbus::Interior_lights_rpt_416_Dim_levelType _internal_dim_level() const;
  void _internal_set_dim_level(::apollo::canbus::Interior_lights_rpt_416_Dim_levelType value);
  public:

  // optional bool mood_lights_on = 6;
  bool has_mood_lights_on() const;
  private:
  bool _internal_has_mood_lights_on() const;
  public:
  void clear_mood_lights_on();
  bool mood_lights_on() const;
  void set_mood_lights_on(bool value);
  private:
  bool _internal_mood_lights_on() const;
  void _internal_set_mood_lights_on(bool value);
  public:

  // optional bool rear_dome_lights_on = 7;
  bool has_rear_dome_lights_on() const;
  private:
  bool _internal_has_rear_dome_lights_on() const;
  public:
  void clear_rear_dome_lights_on();
  bool rear_dome_lights_on() const;
  void set_rear_dome_lights_on(bool value);
  private:
  bool _internal_rear_dome_lights_on() const;
  void _internal_set_rear_dome_lights_on(bool value);
  public:

  // optional bool front_dome_lights_on = 8;
  bool has_front_dome_lights_on() const;
  private:
  bool _internal_has_front_dome_lights_on() const;
  public:
  void clear_front_dome_lights_on();
  bool front_dome_lights_on() const;
  void set_front_dome_lights_on(bool value);
  private:
  bool _internal_front_dome_lights_on() const;
  void _internal_set_front_dome_lights_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Interior_lights_rpt_416)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool dim_level_is_valid_;
  bool mood_lights_on_is_valid_;
  bool rear_dome_lights_on_is_valid_;
  bool front_dome_lights_on_is_valid_;
  int dim_level_;
  bool mood_lights_on_;
  bool rear_dome_lights_on_;
  bool front_dome_lights_on_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Turn_cmd_130 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Turn_cmd_130) */ {
 public:
  Turn_cmd_130();
  virtual ~Turn_cmd_130();

  Turn_cmd_130(const Turn_cmd_130& from);
  Turn_cmd_130(Turn_cmd_130&& from) noexcept
    : Turn_cmd_130() {
    *this = ::std::move(from);
  }

  inline Turn_cmd_130& operator=(const Turn_cmd_130& from) {
    CopyFrom(from);
    return *this;
  }
  inline Turn_cmd_130& operator=(Turn_cmd_130&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Turn_cmd_130& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Turn_cmd_130* internal_default_instance() {
    return reinterpret_cast<const Turn_cmd_130*>(
               &_Turn_cmd_130_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Turn_cmd_130& a, Turn_cmd_130& b) {
    a.Swap(&b);
  }
  inline void Swap(Turn_cmd_130* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Turn_cmd_130* New() const final {
    return CreateMaybeMessage<Turn_cmd_130>(nullptr);
  }

  Turn_cmd_130* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Turn_cmd_130>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Turn_cmd_130& from);
  void MergeFrom(const Turn_cmd_130& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Turn_cmd_130* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Turn_cmd_130";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Turn_cmd_130_Turn_signal_cmdType Turn_signal_cmdType;
  static constexpr Turn_signal_cmdType TURN_SIGNAL_CMD_RIGHT =
    Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_RIGHT;
  static constexpr Turn_signal_cmdType TURN_SIGNAL_CMD_NONE =
    Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_NONE;
  static constexpr Turn_signal_cmdType TURN_SIGNAL_CMD_LEFT =
    Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_LEFT;
  static constexpr Turn_signal_cmdType TURN_SIGNAL_CMD_HAZARD =
    Turn_cmd_130_Turn_signal_cmdType_TURN_SIGNAL_CMD_HAZARD;
  static inline bool Turn_signal_cmdType_IsValid(int value) {
    return Turn_cmd_130_Turn_signal_cmdType_IsValid(value);
  }
  static constexpr Turn_signal_cmdType Turn_signal_cmdType_MIN =
    Turn_cmd_130_Turn_signal_cmdType_Turn_signal_cmdType_MIN;
  static constexpr Turn_signal_cmdType Turn_signal_cmdType_MAX =
    Turn_cmd_130_Turn_signal_cmdType_Turn_signal_cmdType_MAX;
  static constexpr int Turn_signal_cmdType_ARRAYSIZE =
    Turn_cmd_130_Turn_signal_cmdType_Turn_signal_cmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Turn_signal_cmdType_descriptor() {
    return Turn_cmd_130_Turn_signal_cmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& Turn_signal_cmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Turn_signal_cmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Turn_signal_cmdType_Name.");
    return Turn_cmd_130_Turn_signal_cmdType_Name(enum_t_value);
  }
  static inline bool Turn_signal_cmdType_Parse(const std::string& name,
      Turn_signal_cmdType* value) {
    return Turn_cmd_130_Turn_signal_cmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreOverridesFieldNumber = 1,
    kEnableFieldNumber = 2,
    kClearOverrideFieldNumber = 3,
    kClearFaultsFieldNumber = 4,
    kTurnSignalCmdFieldNumber = 5,
  };
  // optional bool ignore_overrides = 1;
  bool has_ignore_overrides() const;
  private:
  bool _internal_has_ignore_overrides() const;
  public:
  void clear_ignore_overrides();
  bool ignore_overrides() const;
  void set_ignore_overrides(bool value);
  private:
  bool _internal_ignore_overrides() const;
  void _internal_set_ignore_overrides(bool value);
  public:

  // optional bool enable = 2;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // optional bool clear_override = 3;
  bool has_clear_override() const;
  private:
  bool _internal_has_clear_override() const;
  public:
  void clear_clear_override();
  bool clear_override() const;
  void set_clear_override(bool value);
  private:
  bool _internal_clear_override() const;
  void _internal_set_clear_override(bool value);
  public:

  // optional bool clear_faults = 4;
  bool has_clear_faults() const;
  private:
  bool _internal_has_clear_faults() const;
  public:
  void clear_clear_faults();
  bool clear_faults() const;
  void set_clear_faults(bool value);
  private:
  bool _internal_clear_faults() const;
  void _internal_set_clear_faults(bool value);
  public:

  // optional .apollo.canbus.Turn_cmd_130.Turn_signal_cmdType turn_signal_cmd = 5;
  bool has_turn_signal_cmd() const;
  private:
  bool _internal_has_turn_signal_cmd() const;
  public:
  void clear_turn_signal_cmd();
  ::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType turn_signal_cmd() const;
  void set_turn_signal_cmd(::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType value);
  private:
  ::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType _internal_turn_signal_cmd() const;
  void _internal_set_turn_signal_cmd(::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Turn_cmd_130)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool ignore_overrides_;
  bool enable_;
  bool clear_override_;
  bool clear_faults_;
  int turn_signal_cmd_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Detected_object_rpt_411 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Detected_object_rpt_411) */ {
 public:
  Detected_object_rpt_411();
  virtual ~Detected_object_rpt_411();

  Detected_object_rpt_411(const Detected_object_rpt_411& from);
  Detected_object_rpt_411(Detected_object_rpt_411&& from) noexcept
    : Detected_object_rpt_411() {
    *this = ::std::move(from);
  }

  inline Detected_object_rpt_411& operator=(const Detected_object_rpt_411& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detected_object_rpt_411& operator=(Detected_object_rpt_411&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Detected_object_rpt_411& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detected_object_rpt_411* internal_default_instance() {
    return reinterpret_cast<const Detected_object_rpt_411*>(
               &_Detected_object_rpt_411_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Detected_object_rpt_411& a, Detected_object_rpt_411& b) {
    a.Swap(&b);
  }
  inline void Swap(Detected_object_rpt_411* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Detected_object_rpt_411* New() const final {
    return CreateMaybeMessage<Detected_object_rpt_411>(nullptr);
  }

  Detected_object_rpt_411* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Detected_object_rpt_411>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Detected_object_rpt_411& from);
  void MergeFrom(const Detected_object_rpt_411& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detected_object_rpt_411* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Detected_object_rpt_411";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontObjectDistanceHighResFieldNumber = 1,
    kFrontObjectDistanceLowResFieldNumber = 2,
  };
  // optional double front_object_distance_high_res = 1;
  bool has_front_object_distance_high_res() const;
  private:
  bool _internal_has_front_object_distance_high_res() const;
  public:
  void clear_front_object_distance_high_res();
  double front_object_distance_high_res() const;
  void set_front_object_distance_high_res(double value);
  private:
  double _internal_front_object_distance_high_res() const;
  void _internal_set_front_object_distance_high_res(double value);
  public:

  // optional double front_object_distance_low_res = 2;
  bool has_front_object_distance_low_res() const;
  private:
  bool _internal_has_front_object_distance_low_res() const;
  public:
  void clear_front_object_distance_low_res();
  double front_object_distance_low_res() const;
  void set_front_object_distance_low_res(double value);
  private:
  double _internal_front_object_distance_low_res() const;
  void _internal_set_front_object_distance_low_res(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Detected_object_rpt_411)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double front_object_distance_high_res_;
  double front_object_distance_low_res_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Veh_specific_rpt_1_412 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Veh_specific_rpt_1_412) */ {
 public:
  Veh_specific_rpt_1_412();
  virtual ~Veh_specific_rpt_1_412();

  Veh_specific_rpt_1_412(const Veh_specific_rpt_1_412& from);
  Veh_specific_rpt_1_412(Veh_specific_rpt_1_412&& from) noexcept
    : Veh_specific_rpt_1_412() {
    *this = ::std::move(from);
  }

  inline Veh_specific_rpt_1_412& operator=(const Veh_specific_rpt_1_412& from) {
    CopyFrom(from);
    return *this;
  }
  inline Veh_specific_rpt_1_412& operator=(Veh_specific_rpt_1_412&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Veh_specific_rpt_1_412& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Veh_specific_rpt_1_412* internal_default_instance() {
    return reinterpret_cast<const Veh_specific_rpt_1_412*>(
               &_Veh_specific_rpt_1_412_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Veh_specific_rpt_1_412& a, Veh_specific_rpt_1_412& b) {
    a.Swap(&b);
  }
  inline void Swap(Veh_specific_rpt_1_412* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Veh_specific_rpt_1_412* New() const final {
    return CreateMaybeMessage<Veh_specific_rpt_1_412>(nullptr);
  }

  Veh_specific_rpt_1_412* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Veh_specific_rpt_1_412>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Veh_specific_rpt_1_412& from);
  void MergeFrom(const Veh_specific_rpt_1_412& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Veh_specific_rpt_1_412* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Veh_specific_rpt_1_412";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftPos2FieldNumber = 1,
    kShiftPos1FieldNumber = 2,
  };
  // optional int32 shift_pos_2 = 1;
  bool has_shift_pos_2() const;
  private:
  bool _internal_has_shift_pos_2() const;
  public:
  void clear_shift_pos_2();
  ::PROTOBUF_NAMESPACE_ID::int32 shift_pos_2() const;
  void set_shift_pos_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shift_pos_2() const;
  void _internal_set_shift_pos_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 shift_pos_1 = 2;
  bool has_shift_pos_1() const;
  private:
  bool _internal_has_shift_pos_1() const;
  public:
  void clear_shift_pos_1();
  ::PROTOBUF_NAMESPACE_ID::int32 shift_pos_1() const;
  void set_shift_pos_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shift_pos_1() const;
  void _internal_set_shift_pos_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Veh_specific_rpt_1_412)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 shift_pos_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 shift_pos_1_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Veh_dynamics_rpt_413 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Veh_dynamics_rpt_413) */ {
 public:
  Veh_dynamics_rpt_413();
  virtual ~Veh_dynamics_rpt_413();

  Veh_dynamics_rpt_413(const Veh_dynamics_rpt_413& from);
  Veh_dynamics_rpt_413(Veh_dynamics_rpt_413&& from) noexcept
    : Veh_dynamics_rpt_413() {
    *this = ::std::move(from);
  }

  inline Veh_dynamics_rpt_413& operator=(const Veh_dynamics_rpt_413& from) {
    CopyFrom(from);
    return *this;
  }
  inline Veh_dynamics_rpt_413& operator=(Veh_dynamics_rpt_413&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Veh_dynamics_rpt_413& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Veh_dynamics_rpt_413* internal_default_instance() {
    return reinterpret_cast<const Veh_dynamics_rpt_413*>(
               &_Veh_dynamics_rpt_413_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Veh_dynamics_rpt_413& a, Veh_dynamics_rpt_413& b) {
    a.Swap(&b);
  }
  inline void Swap(Veh_dynamics_rpt_413* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Veh_dynamics_rpt_413* New() const final {
    return CreateMaybeMessage<Veh_dynamics_rpt_413>(nullptr);
  }

  Veh_dynamics_rpt_413* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Veh_dynamics_rpt_413>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Veh_dynamics_rpt_413& from);
  void MergeFrom(const Veh_dynamics_rpt_413& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Veh_dynamics_rpt_413* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Veh_dynamics_rpt_413";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehGForcesFieldNumber = 1,
  };
  // optional double veh_g_forces = 1;
  bool has_veh_g_forces() const;
  private:
  bool _internal_has_veh_g_forces() const;
  public:
  void clear_veh_g_forces();
  double veh_g_forces() const;
  void set_veh_g_forces(double value);
  private:
  double _internal_veh_g_forces() const;
  void _internal_set_veh_g_forces(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Veh_dynamics_rpt_413)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double veh_g_forces_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Rear_lights_rpt_418 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Rear_lights_rpt_418) */ {
 public:
  Rear_lights_rpt_418();
  virtual ~Rear_lights_rpt_418();

  Rear_lights_rpt_418(const Rear_lights_rpt_418& from);
  Rear_lights_rpt_418(Rear_lights_rpt_418&& from) noexcept
    : Rear_lights_rpt_418() {
    *this = ::std::move(from);
  }

  inline Rear_lights_rpt_418& operator=(const Rear_lights_rpt_418& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rear_lights_rpt_418& operator=(Rear_lights_rpt_418&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rear_lights_rpt_418& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rear_lights_rpt_418* internal_default_instance() {
    return reinterpret_cast<const Rear_lights_rpt_418*>(
               &_Rear_lights_rpt_418_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Rear_lights_rpt_418& a, Rear_lights_rpt_418& b) {
    a.Swap(&b);
  }
  inline void Swap(Rear_lights_rpt_418* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rear_lights_rpt_418* New() const final {
    return CreateMaybeMessage<Rear_lights_rpt_418>(nullptr);
  }

  Rear_lights_rpt_418* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rear_lights_rpt_418>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rear_lights_rpt_418& from);
  void MergeFrom(const Rear_lights_rpt_418& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rear_lights_rpt_418* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Rear_lights_rpt_418";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReverseLightsOnIsValidFieldNumber = 1,
    kBrakeLightsOnIsValidFieldNumber = 2,
    kReverseLightsOnFieldNumber = 3,
    kBrakeLightsOnFieldNumber = 4,
  };
  // optional bool reverse_lights_on_is_valid = 1;
  bool has_reverse_lights_on_is_valid() const;
  private:
  bool _internal_has_reverse_lights_on_is_valid() const;
  public:
  void clear_reverse_lights_on_is_valid();
  bool reverse_lights_on_is_valid() const;
  void set_reverse_lights_on_is_valid(bool value);
  private:
  bool _internal_reverse_lights_on_is_valid() const;
  void _internal_set_reverse_lights_on_is_valid(bool value);
  public:

  // optional bool brake_lights_on_is_valid = 2;
  bool has_brake_lights_on_is_valid() const;
  private:
  bool _internal_has_brake_lights_on_is_valid() const;
  public:
  void clear_brake_lights_on_is_valid();
  bool brake_lights_on_is_valid() const;
  void set_brake_lights_on_is_valid(bool value);
  private:
  bool _internal_brake_lights_on_is_valid() const;
  void _internal_set_brake_lights_on_is_valid(bool value);
  public:

  // optional bool reverse_lights_on = 3;
  bool has_reverse_lights_on() const;
  private:
  bool _internal_has_reverse_lights_on() const;
  public:
  void clear_reverse_lights_on();
  bool reverse_lights_on() const;
  void set_reverse_lights_on(bool value);
  private:
  bool _internal_reverse_lights_on() const;
  void _internal_set_reverse_lights_on(bool value);
  public:

  // optional bool brake_lights_on = 4;
  bool has_brake_lights_on() const;
  private:
  bool _internal_has_brake_lights_on() const;
  public:
  void clear_brake_lights_on();
  bool brake_lights_on() const;
  void set_brake_lights_on(bool value);
  private:
  bool _internal_brake_lights_on() const;
  void _internal_set_brake_lights_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Rear_lights_rpt_418)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool reverse_lights_on_is_valid_;
  bool brake_lights_on_is_valid_;
  bool reverse_lights_on_;
  bool brake_lights_on_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// -------------------------------------------------------------------

class Lexus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Lexus) */ {
 public:
  Lexus();
  virtual ~Lexus();

  Lexus(const Lexus& from);
  Lexus(Lexus&& from) noexcept
    : Lexus() {
    *this = ::std::move(from);
  }

  inline Lexus& operator=(const Lexus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lexus& operator=(Lexus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lexus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lexus* internal_default_instance() {
    return reinterpret_cast<const Lexus*>(
               &_Lexus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Lexus& a, Lexus& b) {
    a.Swap(&b);
  }
  inline void Swap(Lexus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lexus* New() const final {
    return CreateMaybeMessage<Lexus>(nullptr);
  }

  Lexus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lexus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lexus& from);
  void MergeFrom(const Lexus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lexus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Lexus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHazardLightsRpt214FieldNumber = 1,
    kSteeringCmd12CFieldNumber = 2,
    kDashControlsRightRpt210FieldNumber = 3,
    kDashControlsLeftCmd10CFieldNumber = 4,
    kSteeringRpt22CFieldNumber = 5,
    kTurnAuxRpt330FieldNumber = 6,
    kHeadlightRpt218FieldNumber = 7,
    kHazardLightsCmd114FieldNumber = 8,
    kDashControlsLeftRpt20CFieldNumber = 9,
    kHeadlightAuxRpt318FieldNumber = 10,
    kDashControlsRightCmd110FieldNumber = 11,
    kWiperCmd134FieldNumber = 12,
    kWiperRpt234FieldNumber = 13,
    kTurnRpt230FieldNumber = 14,
    kHeadlightCmd118FieldNumber = 15,
    kDoorRpt417FieldNumber = 16,
    kComponentRpt20FieldNumber = 17,
    kWheelSpeedRpt407FieldNumber = 18,
    kSteeringMotorRpt3406FieldNumber = 19,
    kSteeringMotorRpt2405FieldNumber = 20,
    kSteeringMotorRpt1404FieldNumber = 21,
    kBrakeMotorRpt3403FieldNumber = 22,
    kBrakeMotorRpt2402FieldNumber = 23,
    kBrakeMotorRpt1401FieldNumber = 24,
    kWiperAuxRpt334FieldNumber = 25,
    kShiftAuxRpt328FieldNumber = 26,
    kAccelRpt200FieldNumber = 27,
    kBrakeRpt204FieldNumber = 28,
    kHornCmd11CFieldNumber = 29,
    kGlobalRpt10FieldNumber = 30,
    kAccelAuxRpt300FieldNumber = 31,
    kCruiseControlButtonsRpt208FieldNumber = 32,
    kVehicleSpeedRpt400FieldNumber = 33,
    kBrakeAuxRpt304FieldNumber = 34,
    kMediaControlsCmd120FieldNumber = 35,
    kCruiseControlButtonsCmd108FieldNumber = 36,
    kParkingBrakeCmd124FieldNumber = 37,
    kHornRpt21CFieldNumber = 38,
    kShiftRpt228FieldNumber = 39,
    kShiftCmd128FieldNumber = 40,
    kAccelCmd100FieldNumber = 41,
    kParkingBrakeRpt224FieldNumber = 42,
    kBrakeCmd104FieldNumber = 43,
    kMediaControlsRpt220FieldNumber = 44,
    kSteeringAuxRpt32CFieldNumber = 45,
    kLatLonHeadingRpt40EFieldNumber = 46,
    kYawRateRpt40DFieldNumber = 47,
    kDateTimeRpt40FFieldNumber = 48,
    kVinRpt414FieldNumber = 49,
    kOccupancyRpt415FieldNumber = 50,
    kInteriorLightsRpt416FieldNumber = 51,
    kTurnCmd130FieldNumber = 52,
    kDetectedObjectRpt411FieldNumber = 53,
    kVehSpecificRpt1412FieldNumber = 54,
    kVehDynamicsRpt413FieldNumber = 55,
    kRearLightsRpt418FieldNumber = 56,
  };
  // optional .apollo.canbus.Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;
  bool has_hazard_lights_rpt_214() const;
  private:
  bool _internal_has_hazard_lights_rpt_214() const;
  public:
  void clear_hazard_lights_rpt_214();
  const ::apollo::canbus::Hazard_lights_rpt_214& hazard_lights_rpt_214() const;
  ::apollo::canbus::Hazard_lights_rpt_214* release_hazard_lights_rpt_214();
  ::apollo::canbus::Hazard_lights_rpt_214* mutable_hazard_lights_rpt_214();
  void set_allocated_hazard_lights_rpt_214(::apollo::canbus::Hazard_lights_rpt_214* hazard_lights_rpt_214);
  private:
  const ::apollo::canbus::Hazard_lights_rpt_214& _internal_hazard_lights_rpt_214() const;
  ::apollo::canbus::Hazard_lights_rpt_214* _internal_mutable_hazard_lights_rpt_214();
  public:

  // optional .apollo.canbus.Steering_cmd_12c steering_cmd_12c = 2;
  bool has_steering_cmd_12c() const;
  private:
  bool _internal_has_steering_cmd_12c() const;
  public:
  void clear_steering_cmd_12c();
  const ::apollo::canbus::Steering_cmd_12c& steering_cmd_12c() const;
  ::apollo::canbus::Steering_cmd_12c* release_steering_cmd_12c();
  ::apollo::canbus::Steering_cmd_12c* mutable_steering_cmd_12c();
  void set_allocated_steering_cmd_12c(::apollo::canbus::Steering_cmd_12c* steering_cmd_12c);
  private:
  const ::apollo::canbus::Steering_cmd_12c& _internal_steering_cmd_12c() const;
  ::apollo::canbus::Steering_cmd_12c* _internal_mutable_steering_cmd_12c();
  public:

  // optional .apollo.canbus.Dash_controls_right_rpt_210 dash_controls_right_rpt_210 = 3;
  bool has_dash_controls_right_rpt_210() const;
  private:
  bool _internal_has_dash_controls_right_rpt_210() const;
  public:
  void clear_dash_controls_right_rpt_210();
  const ::apollo::canbus::Dash_controls_right_rpt_210& dash_controls_right_rpt_210() const;
  ::apollo::canbus::Dash_controls_right_rpt_210* release_dash_controls_right_rpt_210();
  ::apollo::canbus::Dash_controls_right_rpt_210* mutable_dash_controls_right_rpt_210();
  void set_allocated_dash_controls_right_rpt_210(::apollo::canbus::Dash_controls_right_rpt_210* dash_controls_right_rpt_210);
  private:
  const ::apollo::canbus::Dash_controls_right_rpt_210& _internal_dash_controls_right_rpt_210() const;
  ::apollo::canbus::Dash_controls_right_rpt_210* _internal_mutable_dash_controls_right_rpt_210();
  public:

  // optional .apollo.canbus.Dash_controls_left_cmd_10c dash_controls_left_cmd_10c = 4;
  bool has_dash_controls_left_cmd_10c() const;
  private:
  bool _internal_has_dash_controls_left_cmd_10c() const;
  public:
  void clear_dash_controls_left_cmd_10c();
  const ::apollo::canbus::Dash_controls_left_cmd_10c& dash_controls_left_cmd_10c() const;
  ::apollo::canbus::Dash_controls_left_cmd_10c* release_dash_controls_left_cmd_10c();
  ::apollo::canbus::Dash_controls_left_cmd_10c* mutable_dash_controls_left_cmd_10c();
  void set_allocated_dash_controls_left_cmd_10c(::apollo::canbus::Dash_controls_left_cmd_10c* dash_controls_left_cmd_10c);
  private:
  const ::apollo::canbus::Dash_controls_left_cmd_10c& _internal_dash_controls_left_cmd_10c() const;
  ::apollo::canbus::Dash_controls_left_cmd_10c* _internal_mutable_dash_controls_left_cmd_10c();
  public:

  // optional .apollo.canbus.Steering_rpt_22c steering_rpt_22c = 5;
  bool has_steering_rpt_22c() const;
  private:
  bool _internal_has_steering_rpt_22c() const;
  public:
  void clear_steering_rpt_22c();
  const ::apollo::canbus::Steering_rpt_22c& steering_rpt_22c() const;
  ::apollo::canbus::Steering_rpt_22c* release_steering_rpt_22c();
  ::apollo::canbus::Steering_rpt_22c* mutable_steering_rpt_22c();
  void set_allocated_steering_rpt_22c(::apollo::canbus::Steering_rpt_22c* steering_rpt_22c);
  private:
  const ::apollo::canbus::Steering_rpt_22c& _internal_steering_rpt_22c() const;
  ::apollo::canbus::Steering_rpt_22c* _internal_mutable_steering_rpt_22c();
  public:

  // optional .apollo.canbus.Turn_aux_rpt_330 turn_aux_rpt_330 = 6;
  bool has_turn_aux_rpt_330() const;
  private:
  bool _internal_has_turn_aux_rpt_330() const;
  public:
  void clear_turn_aux_rpt_330();
  const ::apollo::canbus::Turn_aux_rpt_330& turn_aux_rpt_330() const;
  ::apollo::canbus::Turn_aux_rpt_330* release_turn_aux_rpt_330();
  ::apollo::canbus::Turn_aux_rpt_330* mutable_turn_aux_rpt_330();
  void set_allocated_turn_aux_rpt_330(::apollo::canbus::Turn_aux_rpt_330* turn_aux_rpt_330);
  private:
  const ::apollo::canbus::Turn_aux_rpt_330& _internal_turn_aux_rpt_330() const;
  ::apollo::canbus::Turn_aux_rpt_330* _internal_mutable_turn_aux_rpt_330();
  public:

  // optional .apollo.canbus.Headlight_rpt_218 headlight_rpt_218 = 7;
  bool has_headlight_rpt_218() const;
  private:
  bool _internal_has_headlight_rpt_218() const;
  public:
  void clear_headlight_rpt_218();
  const ::apollo::canbus::Headlight_rpt_218& headlight_rpt_218() const;
  ::apollo::canbus::Headlight_rpt_218* release_headlight_rpt_218();
  ::apollo::canbus::Headlight_rpt_218* mutable_headlight_rpt_218();
  void set_allocated_headlight_rpt_218(::apollo::canbus::Headlight_rpt_218* headlight_rpt_218);
  private:
  const ::apollo::canbus::Headlight_rpt_218& _internal_headlight_rpt_218() const;
  ::apollo::canbus::Headlight_rpt_218* _internal_mutable_headlight_rpt_218();
  public:

  // optional .apollo.canbus.Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;
  bool has_hazard_lights_cmd_114() const;
  private:
  bool _internal_has_hazard_lights_cmd_114() const;
  public:
  void clear_hazard_lights_cmd_114();
  const ::apollo::canbus::Hazard_lights_cmd_114& hazard_lights_cmd_114() const;
  ::apollo::canbus::Hazard_lights_cmd_114* release_hazard_lights_cmd_114();
  ::apollo::canbus::Hazard_lights_cmd_114* mutable_hazard_lights_cmd_114();
  void set_allocated_hazard_lights_cmd_114(::apollo::canbus::Hazard_lights_cmd_114* hazard_lights_cmd_114);
  private:
  const ::apollo::canbus::Hazard_lights_cmd_114& _internal_hazard_lights_cmd_114() const;
  ::apollo::canbus::Hazard_lights_cmd_114* _internal_mutable_hazard_lights_cmd_114();
  public:

  // optional .apollo.canbus.Dash_controls_left_rpt_20c dash_controls_left_rpt_20c = 9;
  bool has_dash_controls_left_rpt_20c() const;
  private:
  bool _internal_has_dash_controls_left_rpt_20c() const;
  public:
  void clear_dash_controls_left_rpt_20c();
  const ::apollo::canbus::Dash_controls_left_rpt_20c& dash_controls_left_rpt_20c() const;
  ::apollo::canbus::Dash_controls_left_rpt_20c* release_dash_controls_left_rpt_20c();
  ::apollo::canbus::Dash_controls_left_rpt_20c* mutable_dash_controls_left_rpt_20c();
  void set_allocated_dash_controls_left_rpt_20c(::apollo::canbus::Dash_controls_left_rpt_20c* dash_controls_left_rpt_20c);
  private:
  const ::apollo::canbus::Dash_controls_left_rpt_20c& _internal_dash_controls_left_rpt_20c() const;
  ::apollo::canbus::Dash_controls_left_rpt_20c* _internal_mutable_dash_controls_left_rpt_20c();
  public:

  // optional .apollo.canbus.Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;
  bool has_headlight_aux_rpt_318() const;
  private:
  bool _internal_has_headlight_aux_rpt_318() const;
  public:
  void clear_headlight_aux_rpt_318();
  const ::apollo::canbus::Headlight_aux_rpt_318& headlight_aux_rpt_318() const;
  ::apollo::canbus::Headlight_aux_rpt_318* release_headlight_aux_rpt_318();
  ::apollo::canbus::Headlight_aux_rpt_318* mutable_headlight_aux_rpt_318();
  void set_allocated_headlight_aux_rpt_318(::apollo::canbus::Headlight_aux_rpt_318* headlight_aux_rpt_318);
  private:
  const ::apollo::canbus::Headlight_aux_rpt_318& _internal_headlight_aux_rpt_318() const;
  ::apollo::canbus::Headlight_aux_rpt_318* _internal_mutable_headlight_aux_rpt_318();
  public:

  // optional .apollo.canbus.Dash_controls_right_cmd_110 dash_controls_right_cmd_110 = 11;
  bool has_dash_controls_right_cmd_110() const;
  private:
  bool _internal_has_dash_controls_right_cmd_110() const;
  public:
  void clear_dash_controls_right_cmd_110();
  const ::apollo::canbus::Dash_controls_right_cmd_110& dash_controls_right_cmd_110() const;
  ::apollo::canbus::Dash_controls_right_cmd_110* release_dash_controls_right_cmd_110();
  ::apollo::canbus::Dash_controls_right_cmd_110* mutable_dash_controls_right_cmd_110();
  void set_allocated_dash_controls_right_cmd_110(::apollo::canbus::Dash_controls_right_cmd_110* dash_controls_right_cmd_110);
  private:
  const ::apollo::canbus::Dash_controls_right_cmd_110& _internal_dash_controls_right_cmd_110() const;
  ::apollo::canbus::Dash_controls_right_cmd_110* _internal_mutable_dash_controls_right_cmd_110();
  public:

  // optional .apollo.canbus.Wiper_cmd_134 wiper_cmd_134 = 12;
  bool has_wiper_cmd_134() const;
  private:
  bool _internal_has_wiper_cmd_134() const;
  public:
  void clear_wiper_cmd_134();
  const ::apollo::canbus::Wiper_cmd_134& wiper_cmd_134() const;
  ::apollo::canbus::Wiper_cmd_134* release_wiper_cmd_134();
  ::apollo::canbus::Wiper_cmd_134* mutable_wiper_cmd_134();
  void set_allocated_wiper_cmd_134(::apollo::canbus::Wiper_cmd_134* wiper_cmd_134);
  private:
  const ::apollo::canbus::Wiper_cmd_134& _internal_wiper_cmd_134() const;
  ::apollo::canbus::Wiper_cmd_134* _internal_mutable_wiper_cmd_134();
  public:

  // optional .apollo.canbus.Wiper_rpt_234 wiper_rpt_234 = 13;
  bool has_wiper_rpt_234() const;
  private:
  bool _internal_has_wiper_rpt_234() const;
  public:
  void clear_wiper_rpt_234();
  const ::apollo::canbus::Wiper_rpt_234& wiper_rpt_234() const;
  ::apollo::canbus::Wiper_rpt_234* release_wiper_rpt_234();
  ::apollo::canbus::Wiper_rpt_234* mutable_wiper_rpt_234();
  void set_allocated_wiper_rpt_234(::apollo::canbus::Wiper_rpt_234* wiper_rpt_234);
  private:
  const ::apollo::canbus::Wiper_rpt_234& _internal_wiper_rpt_234() const;
  ::apollo::canbus::Wiper_rpt_234* _internal_mutable_wiper_rpt_234();
  public:

  // optional .apollo.canbus.Turn_rpt_230 turn_rpt_230 = 14;
  bool has_turn_rpt_230() const;
  private:
  bool _internal_has_turn_rpt_230() const;
  public:
  void clear_turn_rpt_230();
  const ::apollo::canbus::Turn_rpt_230& turn_rpt_230() const;
  ::apollo::canbus::Turn_rpt_230* release_turn_rpt_230();
  ::apollo::canbus::Turn_rpt_230* mutable_turn_rpt_230();
  void set_allocated_turn_rpt_230(::apollo::canbus::Turn_rpt_230* turn_rpt_230);
  private:
  const ::apollo::canbus::Turn_rpt_230& _internal_turn_rpt_230() const;
  ::apollo::canbus::Turn_rpt_230* _internal_mutable_turn_rpt_230();
  public:

  // optional .apollo.canbus.Headlight_cmd_118 headlight_cmd_118 = 15;
  bool has_headlight_cmd_118() const;
  private:
  bool _internal_has_headlight_cmd_118() const;
  public:
  void clear_headlight_cmd_118();
  const ::apollo::canbus::Headlight_cmd_118& headlight_cmd_118() const;
  ::apollo::canbus::Headlight_cmd_118* release_headlight_cmd_118();
  ::apollo::canbus::Headlight_cmd_118* mutable_headlight_cmd_118();
  void set_allocated_headlight_cmd_118(::apollo::canbus::Headlight_cmd_118* headlight_cmd_118);
  private:
  const ::apollo::canbus::Headlight_cmd_118& _internal_headlight_cmd_118() const;
  ::apollo::canbus::Headlight_cmd_118* _internal_mutable_headlight_cmd_118();
  public:

  // optional .apollo.canbus.Door_rpt_417 door_rpt_417 = 16;
  bool has_door_rpt_417() const;
  private:
  bool _internal_has_door_rpt_417() const;
  public:
  void clear_door_rpt_417();
  const ::apollo::canbus::Door_rpt_417& door_rpt_417() const;
  ::apollo::canbus::Door_rpt_417* release_door_rpt_417();
  ::apollo::canbus::Door_rpt_417* mutable_door_rpt_417();
  void set_allocated_door_rpt_417(::apollo::canbus::Door_rpt_417* door_rpt_417);
  private:
  const ::apollo::canbus::Door_rpt_417& _internal_door_rpt_417() const;
  ::apollo::canbus::Door_rpt_417* _internal_mutable_door_rpt_417();
  public:

  // optional .apollo.canbus.Component_rpt_20 component_rpt_20 = 17;
  bool has_component_rpt_20() const;
  private:
  bool _internal_has_component_rpt_20() const;
  public:
  void clear_component_rpt_20();
  const ::apollo::canbus::Component_rpt_20& component_rpt_20() const;
  ::apollo::canbus::Component_rpt_20* release_component_rpt_20();
  ::apollo::canbus::Component_rpt_20* mutable_component_rpt_20();
  void set_allocated_component_rpt_20(::apollo::canbus::Component_rpt_20* component_rpt_20);
  private:
  const ::apollo::canbus::Component_rpt_20& _internal_component_rpt_20() const;
  ::apollo::canbus::Component_rpt_20* _internal_mutable_component_rpt_20();
  public:

  // optional .apollo.canbus.Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;
  bool has_wheel_speed_rpt_407() const;
  private:
  bool _internal_has_wheel_speed_rpt_407() const;
  public:
  void clear_wheel_speed_rpt_407();
  const ::apollo::canbus::Wheel_speed_rpt_407& wheel_speed_rpt_407() const;
  ::apollo::canbus::Wheel_speed_rpt_407* release_wheel_speed_rpt_407();
  ::apollo::canbus::Wheel_speed_rpt_407* mutable_wheel_speed_rpt_407();
  void set_allocated_wheel_speed_rpt_407(::apollo::canbus::Wheel_speed_rpt_407* wheel_speed_rpt_407);
  private:
  const ::apollo::canbus::Wheel_speed_rpt_407& _internal_wheel_speed_rpt_407() const;
  ::apollo::canbus::Wheel_speed_rpt_407* _internal_mutable_wheel_speed_rpt_407();
  public:

  // optional .apollo.canbus.Steering_motor_rpt_3_406 steering_motor_rpt_3_406 = 19;
  bool has_steering_motor_rpt_3_406() const;
  private:
  bool _internal_has_steering_motor_rpt_3_406() const;
  public:
  void clear_steering_motor_rpt_3_406();
  const ::apollo::canbus::Steering_motor_rpt_3_406& steering_motor_rpt_3_406() const;
  ::apollo::canbus::Steering_motor_rpt_3_406* release_steering_motor_rpt_3_406();
  ::apollo::canbus::Steering_motor_rpt_3_406* mutable_steering_motor_rpt_3_406();
  void set_allocated_steering_motor_rpt_3_406(::apollo::canbus::Steering_motor_rpt_3_406* steering_motor_rpt_3_406);
  private:
  const ::apollo::canbus::Steering_motor_rpt_3_406& _internal_steering_motor_rpt_3_406() const;
  ::apollo::canbus::Steering_motor_rpt_3_406* _internal_mutable_steering_motor_rpt_3_406();
  public:

  // optional .apollo.canbus.Steering_motor_rpt_2_405 steering_motor_rpt_2_405 = 20;
  bool has_steering_motor_rpt_2_405() const;
  private:
  bool _internal_has_steering_motor_rpt_2_405() const;
  public:
  void clear_steering_motor_rpt_2_405();
  const ::apollo::canbus::Steering_motor_rpt_2_405& steering_motor_rpt_2_405() const;
  ::apollo::canbus::Steering_motor_rpt_2_405* release_steering_motor_rpt_2_405();
  ::apollo::canbus::Steering_motor_rpt_2_405* mutable_steering_motor_rpt_2_405();
  void set_allocated_steering_motor_rpt_2_405(::apollo::canbus::Steering_motor_rpt_2_405* steering_motor_rpt_2_405);
  private:
  const ::apollo::canbus::Steering_motor_rpt_2_405& _internal_steering_motor_rpt_2_405() const;
  ::apollo::canbus::Steering_motor_rpt_2_405* _internal_mutable_steering_motor_rpt_2_405();
  public:

  // optional .apollo.canbus.Steering_motor_rpt_1_404 steering_motor_rpt_1_404 = 21;
  bool has_steering_motor_rpt_1_404() const;
  private:
  bool _internal_has_steering_motor_rpt_1_404() const;
  public:
  void clear_steering_motor_rpt_1_404();
  const ::apollo::canbus::Steering_motor_rpt_1_404& steering_motor_rpt_1_404() const;
  ::apollo::canbus::Steering_motor_rpt_1_404* release_steering_motor_rpt_1_404();
  ::apollo::canbus::Steering_motor_rpt_1_404* mutable_steering_motor_rpt_1_404();
  void set_allocated_steering_motor_rpt_1_404(::apollo::canbus::Steering_motor_rpt_1_404* steering_motor_rpt_1_404);
  private:
  const ::apollo::canbus::Steering_motor_rpt_1_404& _internal_steering_motor_rpt_1_404() const;
  ::apollo::canbus::Steering_motor_rpt_1_404* _internal_mutable_steering_motor_rpt_1_404();
  public:

  // optional .apollo.canbus.Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;
  bool has_brake_motor_rpt_3_403() const;
  private:
  bool _internal_has_brake_motor_rpt_3_403() const;
  public:
  void clear_brake_motor_rpt_3_403();
  const ::apollo::canbus::Brake_motor_rpt_3_403& brake_motor_rpt_3_403() const;
  ::apollo::canbus::Brake_motor_rpt_3_403* release_brake_motor_rpt_3_403();
  ::apollo::canbus::Brake_motor_rpt_3_403* mutable_brake_motor_rpt_3_403();
  void set_allocated_brake_motor_rpt_3_403(::apollo::canbus::Brake_motor_rpt_3_403* brake_motor_rpt_3_403);
  private:
  const ::apollo::canbus::Brake_motor_rpt_3_403& _internal_brake_motor_rpt_3_403() const;
  ::apollo::canbus::Brake_motor_rpt_3_403* _internal_mutable_brake_motor_rpt_3_403();
  public:

  // optional .apollo.canbus.Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;
  bool has_brake_motor_rpt_2_402() const;
  private:
  bool _internal_has_brake_motor_rpt_2_402() const;
  public:
  void clear_brake_motor_rpt_2_402();
  const ::apollo::canbus::Brake_motor_rpt_2_402& brake_motor_rpt_2_402() const;
  ::apollo::canbus::Brake_motor_rpt_2_402* release_brake_motor_rpt_2_402();
  ::apollo::canbus::Brake_motor_rpt_2_402* mutable_brake_motor_rpt_2_402();
  void set_allocated_brake_motor_rpt_2_402(::apollo::canbus::Brake_motor_rpt_2_402* brake_motor_rpt_2_402);
  private:
  const ::apollo::canbus::Brake_motor_rpt_2_402& _internal_brake_motor_rpt_2_402() const;
  ::apollo::canbus::Brake_motor_rpt_2_402* _internal_mutable_brake_motor_rpt_2_402();
  public:

  // optional .apollo.canbus.Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;
  bool has_brake_motor_rpt_1_401() const;
  private:
  bool _internal_has_brake_motor_rpt_1_401() const;
  public:
  void clear_brake_motor_rpt_1_401();
  const ::apollo::canbus::Brake_motor_rpt_1_401& brake_motor_rpt_1_401() const;
  ::apollo::canbus::Brake_motor_rpt_1_401* release_brake_motor_rpt_1_401();
  ::apollo::canbus::Brake_motor_rpt_1_401* mutable_brake_motor_rpt_1_401();
  void set_allocated_brake_motor_rpt_1_401(::apollo::canbus::Brake_motor_rpt_1_401* brake_motor_rpt_1_401);
  private:
  const ::apollo::canbus::Brake_motor_rpt_1_401& _internal_brake_motor_rpt_1_401() const;
  ::apollo::canbus::Brake_motor_rpt_1_401* _internal_mutable_brake_motor_rpt_1_401();
  public:

  // optional .apollo.canbus.Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;
  bool has_wiper_aux_rpt_334() const;
  private:
  bool _internal_has_wiper_aux_rpt_334() const;
  public:
  void clear_wiper_aux_rpt_334();
  const ::apollo::canbus::Wiper_aux_rpt_334& wiper_aux_rpt_334() const;
  ::apollo::canbus::Wiper_aux_rpt_334* release_wiper_aux_rpt_334();
  ::apollo::canbus::Wiper_aux_rpt_334* mutable_wiper_aux_rpt_334();
  void set_allocated_wiper_aux_rpt_334(::apollo::canbus::Wiper_aux_rpt_334* wiper_aux_rpt_334);
  private:
  const ::apollo::canbus::Wiper_aux_rpt_334& _internal_wiper_aux_rpt_334() const;
  ::apollo::canbus::Wiper_aux_rpt_334* _internal_mutable_wiper_aux_rpt_334();
  public:

  // optional .apollo.canbus.Shift_aux_rpt_328 shift_aux_rpt_328 = 26;
  bool has_shift_aux_rpt_328() const;
  private:
  bool _internal_has_shift_aux_rpt_328() const;
  public:
  void clear_shift_aux_rpt_328();
  const ::apollo::canbus::Shift_aux_rpt_328& shift_aux_rpt_328() const;
  ::apollo::canbus::Shift_aux_rpt_328* release_shift_aux_rpt_328();
  ::apollo::canbus::Shift_aux_rpt_328* mutable_shift_aux_rpt_328();
  void set_allocated_shift_aux_rpt_328(::apollo::canbus::Shift_aux_rpt_328* shift_aux_rpt_328);
  private:
  const ::apollo::canbus::Shift_aux_rpt_328& _internal_shift_aux_rpt_328() const;
  ::apollo::canbus::Shift_aux_rpt_328* _internal_mutable_shift_aux_rpt_328();
  public:

  // optional .apollo.canbus.Accel_rpt_200 accel_rpt_200 = 27;
  bool has_accel_rpt_200() const;
  private:
  bool _internal_has_accel_rpt_200() const;
  public:
  void clear_accel_rpt_200();
  const ::apollo::canbus::Accel_rpt_200& accel_rpt_200() const;
  ::apollo::canbus::Accel_rpt_200* release_accel_rpt_200();
  ::apollo::canbus::Accel_rpt_200* mutable_accel_rpt_200();
  void set_allocated_accel_rpt_200(::apollo::canbus::Accel_rpt_200* accel_rpt_200);
  private:
  const ::apollo::canbus::Accel_rpt_200& _internal_accel_rpt_200() const;
  ::apollo::canbus::Accel_rpt_200* _internal_mutable_accel_rpt_200();
  public:

  // optional .apollo.canbus.Brake_rpt_204 brake_rpt_204 = 28;
  bool has_brake_rpt_204() const;
  private:
  bool _internal_has_brake_rpt_204() const;
  public:
  void clear_brake_rpt_204();
  const ::apollo::canbus::Brake_rpt_204& brake_rpt_204() const;
  ::apollo::canbus::Brake_rpt_204* release_brake_rpt_204();
  ::apollo::canbus::Brake_rpt_204* mutable_brake_rpt_204();
  void set_allocated_brake_rpt_204(::apollo::canbus::Brake_rpt_204* brake_rpt_204);
  private:
  const ::apollo::canbus::Brake_rpt_204& _internal_brake_rpt_204() const;
  ::apollo::canbus::Brake_rpt_204* _internal_mutable_brake_rpt_204();
  public:

  // optional .apollo.canbus.Horn_cmd_11c horn_cmd_11c = 29;
  bool has_horn_cmd_11c() const;
  private:
  bool _internal_has_horn_cmd_11c() const;
  public:
  void clear_horn_cmd_11c();
  const ::apollo::canbus::Horn_cmd_11c& horn_cmd_11c() const;
  ::apollo::canbus::Horn_cmd_11c* release_horn_cmd_11c();
  ::apollo::canbus::Horn_cmd_11c* mutable_horn_cmd_11c();
  void set_allocated_horn_cmd_11c(::apollo::canbus::Horn_cmd_11c* horn_cmd_11c);
  private:
  const ::apollo::canbus::Horn_cmd_11c& _internal_horn_cmd_11c() const;
  ::apollo::canbus::Horn_cmd_11c* _internal_mutable_horn_cmd_11c();
  public:

  // optional .apollo.canbus.Global_rpt_10 global_rpt_10 = 30;
  bool has_global_rpt_10() const;
  private:
  bool _internal_has_global_rpt_10() const;
  public:
  void clear_global_rpt_10();
  const ::apollo::canbus::Global_rpt_10& global_rpt_10() const;
  ::apollo::canbus::Global_rpt_10* release_global_rpt_10();
  ::apollo::canbus::Global_rpt_10* mutable_global_rpt_10();
  void set_allocated_global_rpt_10(::apollo::canbus::Global_rpt_10* global_rpt_10);
  private:
  const ::apollo::canbus::Global_rpt_10& _internal_global_rpt_10() const;
  ::apollo::canbus::Global_rpt_10* _internal_mutable_global_rpt_10();
  public:

  // optional .apollo.canbus.Accel_aux_rpt_300 accel_aux_rpt_300 = 31;
  bool has_accel_aux_rpt_300() const;
  private:
  bool _internal_has_accel_aux_rpt_300() const;
  public:
  void clear_accel_aux_rpt_300();
  const ::apollo::canbus::Accel_aux_rpt_300& accel_aux_rpt_300() const;
  ::apollo::canbus::Accel_aux_rpt_300* release_accel_aux_rpt_300();
  ::apollo::canbus::Accel_aux_rpt_300* mutable_accel_aux_rpt_300();
  void set_allocated_accel_aux_rpt_300(::apollo::canbus::Accel_aux_rpt_300* accel_aux_rpt_300);
  private:
  const ::apollo::canbus::Accel_aux_rpt_300& _internal_accel_aux_rpt_300() const;
  ::apollo::canbus::Accel_aux_rpt_300* _internal_mutable_accel_aux_rpt_300();
  public:

  // optional .apollo.canbus.Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 = 32;
  bool has_cruise_control_buttons_rpt_208() const;
  private:
  bool _internal_has_cruise_control_buttons_rpt_208() const;
  public:
  void clear_cruise_control_buttons_rpt_208();
  const ::apollo::canbus::Cruise_control_buttons_rpt_208& cruise_control_buttons_rpt_208() const;
  ::apollo::canbus::Cruise_control_buttons_rpt_208* release_cruise_control_buttons_rpt_208();
  ::apollo::canbus::Cruise_control_buttons_rpt_208* mutable_cruise_control_buttons_rpt_208();
  void set_allocated_cruise_control_buttons_rpt_208(::apollo::canbus::Cruise_control_buttons_rpt_208* cruise_control_buttons_rpt_208);
  private:
  const ::apollo::canbus::Cruise_control_buttons_rpt_208& _internal_cruise_control_buttons_rpt_208() const;
  ::apollo::canbus::Cruise_control_buttons_rpt_208* _internal_mutable_cruise_control_buttons_rpt_208();
  public:

  // optional .apollo.canbus.Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;
  bool has_vehicle_speed_rpt_400() const;
  private:
  bool _internal_has_vehicle_speed_rpt_400() const;
  public:
  void clear_vehicle_speed_rpt_400();
  const ::apollo::canbus::Vehicle_speed_rpt_400& vehicle_speed_rpt_400() const;
  ::apollo::canbus::Vehicle_speed_rpt_400* release_vehicle_speed_rpt_400();
  ::apollo::canbus::Vehicle_speed_rpt_400* mutable_vehicle_speed_rpt_400();
  void set_allocated_vehicle_speed_rpt_400(::apollo::canbus::Vehicle_speed_rpt_400* vehicle_speed_rpt_400);
  private:
  const ::apollo::canbus::Vehicle_speed_rpt_400& _internal_vehicle_speed_rpt_400() const;
  ::apollo::canbus::Vehicle_speed_rpt_400* _internal_mutable_vehicle_speed_rpt_400();
  public:

  // optional .apollo.canbus.Brake_aux_rpt_304 brake_aux_rpt_304 = 34;
  bool has_brake_aux_rpt_304() const;
  private:
  bool _internal_has_brake_aux_rpt_304() const;
  public:
  void clear_brake_aux_rpt_304();
  const ::apollo::canbus::Brake_aux_rpt_304& brake_aux_rpt_304() const;
  ::apollo::canbus::Brake_aux_rpt_304* release_brake_aux_rpt_304();
  ::apollo::canbus::Brake_aux_rpt_304* mutable_brake_aux_rpt_304();
  void set_allocated_brake_aux_rpt_304(::apollo::canbus::Brake_aux_rpt_304* brake_aux_rpt_304);
  private:
  const ::apollo::canbus::Brake_aux_rpt_304& _internal_brake_aux_rpt_304() const;
  ::apollo::canbus::Brake_aux_rpt_304* _internal_mutable_brake_aux_rpt_304();
  public:

  // optional .apollo.canbus.Media_controls_cmd_120 media_controls_cmd_120 = 35;
  bool has_media_controls_cmd_120() const;
  private:
  bool _internal_has_media_controls_cmd_120() const;
  public:
  void clear_media_controls_cmd_120();
  const ::apollo::canbus::Media_controls_cmd_120& media_controls_cmd_120() const;
  ::apollo::canbus::Media_controls_cmd_120* release_media_controls_cmd_120();
  ::apollo::canbus::Media_controls_cmd_120* mutable_media_controls_cmd_120();
  void set_allocated_media_controls_cmd_120(::apollo::canbus::Media_controls_cmd_120* media_controls_cmd_120);
  private:
  const ::apollo::canbus::Media_controls_cmd_120& _internal_media_controls_cmd_120() const;
  ::apollo::canbus::Media_controls_cmd_120* _internal_mutable_media_controls_cmd_120();
  public:

  // optional .apollo.canbus.Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 = 36;
  bool has_cruise_control_buttons_cmd_108() const;
  private:
  bool _internal_has_cruise_control_buttons_cmd_108() const;
  public:
  void clear_cruise_control_buttons_cmd_108();
  const ::apollo::canbus::Cruise_control_buttons_cmd_108& cruise_control_buttons_cmd_108() const;
  ::apollo::canbus::Cruise_control_buttons_cmd_108* release_cruise_control_buttons_cmd_108();
  ::apollo::canbus::Cruise_control_buttons_cmd_108* mutable_cruise_control_buttons_cmd_108();
  void set_allocated_cruise_control_buttons_cmd_108(::apollo::canbus::Cruise_control_buttons_cmd_108* cruise_control_buttons_cmd_108);
  private:
  const ::apollo::canbus::Cruise_control_buttons_cmd_108& _internal_cruise_control_buttons_cmd_108() const;
  ::apollo::canbus::Cruise_control_buttons_cmd_108* _internal_mutable_cruise_control_buttons_cmd_108();
  public:

  // optional .apollo.canbus.Parking_brake_cmd_124 parking_brake_cmd_124 = 37;
  bool has_parking_brake_cmd_124() const;
  private:
  bool _internal_has_parking_brake_cmd_124() const;
  public:
  void clear_parking_brake_cmd_124();
  const ::apollo::canbus::Parking_brake_cmd_124& parking_brake_cmd_124() const;
  ::apollo::canbus::Parking_brake_cmd_124* release_parking_brake_cmd_124();
  ::apollo::canbus::Parking_brake_cmd_124* mutable_parking_brake_cmd_124();
  void set_allocated_parking_brake_cmd_124(::apollo::canbus::Parking_brake_cmd_124* parking_brake_cmd_124);
  private:
  const ::apollo::canbus::Parking_brake_cmd_124& _internal_parking_brake_cmd_124() const;
  ::apollo::canbus::Parking_brake_cmd_124* _internal_mutable_parking_brake_cmd_124();
  public:

  // optional .apollo.canbus.Horn_rpt_21c horn_rpt_21c = 38;
  bool has_horn_rpt_21c() const;
  private:
  bool _internal_has_horn_rpt_21c() const;
  public:
  void clear_horn_rpt_21c();
  const ::apollo::canbus::Horn_rpt_21c& horn_rpt_21c() const;
  ::apollo::canbus::Horn_rpt_21c* release_horn_rpt_21c();
  ::apollo::canbus::Horn_rpt_21c* mutable_horn_rpt_21c();
  void set_allocated_horn_rpt_21c(::apollo::canbus::Horn_rpt_21c* horn_rpt_21c);
  private:
  const ::apollo::canbus::Horn_rpt_21c& _internal_horn_rpt_21c() const;
  ::apollo::canbus::Horn_rpt_21c* _internal_mutable_horn_rpt_21c();
  public:

  // optional .apollo.canbus.Shift_rpt_228 shift_rpt_228 = 39;
  bool has_shift_rpt_228() const;
  private:
  bool _internal_has_shift_rpt_228() const;
  public:
  void clear_shift_rpt_228();
  const ::apollo::canbus::Shift_rpt_228& shift_rpt_228() const;
  ::apollo::canbus::Shift_rpt_228* release_shift_rpt_228();
  ::apollo::canbus::Shift_rpt_228* mutable_shift_rpt_228();
  void set_allocated_shift_rpt_228(::apollo::canbus::Shift_rpt_228* shift_rpt_228);
  private:
  const ::apollo::canbus::Shift_rpt_228& _internal_shift_rpt_228() const;
  ::apollo::canbus::Shift_rpt_228* _internal_mutable_shift_rpt_228();
  public:

  // optional .apollo.canbus.Shift_cmd_128 shift_cmd_128 = 40;
  bool has_shift_cmd_128() const;
  private:
  bool _internal_has_shift_cmd_128() const;
  public:
  void clear_shift_cmd_128();
  const ::apollo::canbus::Shift_cmd_128& shift_cmd_128() const;
  ::apollo::canbus::Shift_cmd_128* release_shift_cmd_128();
  ::apollo::canbus::Shift_cmd_128* mutable_shift_cmd_128();
  void set_allocated_shift_cmd_128(::apollo::canbus::Shift_cmd_128* shift_cmd_128);
  private:
  const ::apollo::canbus::Shift_cmd_128& _internal_shift_cmd_128() const;
  ::apollo::canbus::Shift_cmd_128* _internal_mutable_shift_cmd_128();
  public:

  // optional .apollo.canbus.Accel_cmd_100 accel_cmd_100 = 41;
  bool has_accel_cmd_100() const;
  private:
  bool _internal_has_accel_cmd_100() const;
  public:
  void clear_accel_cmd_100();
  const ::apollo::canbus::Accel_cmd_100& accel_cmd_100() const;
  ::apollo::canbus::Accel_cmd_100* release_accel_cmd_100();
  ::apollo::canbus::Accel_cmd_100* mutable_accel_cmd_100();
  void set_allocated_accel_cmd_100(::apollo::canbus::Accel_cmd_100* accel_cmd_100);
  private:
  const ::apollo::canbus::Accel_cmd_100& _internal_accel_cmd_100() const;
  ::apollo::canbus::Accel_cmd_100* _internal_mutable_accel_cmd_100();
  public:

  // optional .apollo.canbus.Parking_brake_rpt_224 parking_brake_rpt_224 = 42;
  bool has_parking_brake_rpt_224() const;
  private:
  bool _internal_has_parking_brake_rpt_224() const;
  public:
  void clear_parking_brake_rpt_224();
  const ::apollo::canbus::Parking_brake_rpt_224& parking_brake_rpt_224() const;
  ::apollo::canbus::Parking_brake_rpt_224* release_parking_brake_rpt_224();
  ::apollo::canbus::Parking_brake_rpt_224* mutable_parking_brake_rpt_224();
  void set_allocated_parking_brake_rpt_224(::apollo::canbus::Parking_brake_rpt_224* parking_brake_rpt_224);
  private:
  const ::apollo::canbus::Parking_brake_rpt_224& _internal_parking_brake_rpt_224() const;
  ::apollo::canbus::Parking_brake_rpt_224* _internal_mutable_parking_brake_rpt_224();
  public:

  // optional .apollo.canbus.Brake_cmd_104 brake_cmd_104 = 43;
  bool has_brake_cmd_104() const;
  private:
  bool _internal_has_brake_cmd_104() const;
  public:
  void clear_brake_cmd_104();
  const ::apollo::canbus::Brake_cmd_104& brake_cmd_104() const;
  ::apollo::canbus::Brake_cmd_104* release_brake_cmd_104();
  ::apollo::canbus::Brake_cmd_104* mutable_brake_cmd_104();
  void set_allocated_brake_cmd_104(::apollo::canbus::Brake_cmd_104* brake_cmd_104);
  private:
  const ::apollo::canbus::Brake_cmd_104& _internal_brake_cmd_104() const;
  ::apollo::canbus::Brake_cmd_104* _internal_mutable_brake_cmd_104();
  public:

  // optional .apollo.canbus.Media_controls_rpt_220 media_controls_rpt_220 = 44;
  bool has_media_controls_rpt_220() const;
  private:
  bool _internal_has_media_controls_rpt_220() const;
  public:
  void clear_media_controls_rpt_220();
  const ::apollo::canbus::Media_controls_rpt_220& media_controls_rpt_220() const;
  ::apollo::canbus::Media_controls_rpt_220* release_media_controls_rpt_220();
  ::apollo::canbus::Media_controls_rpt_220* mutable_media_controls_rpt_220();
  void set_allocated_media_controls_rpt_220(::apollo::canbus::Media_controls_rpt_220* media_controls_rpt_220);
  private:
  const ::apollo::canbus::Media_controls_rpt_220& _internal_media_controls_rpt_220() const;
  ::apollo::canbus::Media_controls_rpt_220* _internal_mutable_media_controls_rpt_220();
  public:

  // optional .apollo.canbus.Steering_aux_rpt_32c steering_aux_rpt_32c = 45;
  bool has_steering_aux_rpt_32c() const;
  private:
  bool _internal_has_steering_aux_rpt_32c() const;
  public:
  void clear_steering_aux_rpt_32c();
  const ::apollo::canbus::Steering_aux_rpt_32c& steering_aux_rpt_32c() const;
  ::apollo::canbus::Steering_aux_rpt_32c* release_steering_aux_rpt_32c();
  ::apollo::canbus::Steering_aux_rpt_32c* mutable_steering_aux_rpt_32c();
  void set_allocated_steering_aux_rpt_32c(::apollo::canbus::Steering_aux_rpt_32c* steering_aux_rpt_32c);
  private:
  const ::apollo::canbus::Steering_aux_rpt_32c& _internal_steering_aux_rpt_32c() const;
  ::apollo::canbus::Steering_aux_rpt_32c* _internal_mutable_steering_aux_rpt_32c();
  public:

  // optional .apollo.canbus.Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e = 46;
  bool has_lat_lon_heading_rpt_40e() const;
  private:
  bool _internal_has_lat_lon_heading_rpt_40e() const;
  public:
  void clear_lat_lon_heading_rpt_40e();
  const ::apollo::canbus::Lat_lon_heading_rpt_40e& lat_lon_heading_rpt_40e() const;
  ::apollo::canbus::Lat_lon_heading_rpt_40e* release_lat_lon_heading_rpt_40e();
  ::apollo::canbus::Lat_lon_heading_rpt_40e* mutable_lat_lon_heading_rpt_40e();
  void set_allocated_lat_lon_heading_rpt_40e(::apollo::canbus::Lat_lon_heading_rpt_40e* lat_lon_heading_rpt_40e);
  private:
  const ::apollo::canbus::Lat_lon_heading_rpt_40e& _internal_lat_lon_heading_rpt_40e() const;
  ::apollo::canbus::Lat_lon_heading_rpt_40e* _internal_mutable_lat_lon_heading_rpt_40e();
  public:

  // optional .apollo.canbus.Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;
  bool has_yaw_rate_rpt_40d() const;
  private:
  bool _internal_has_yaw_rate_rpt_40d() const;
  public:
  void clear_yaw_rate_rpt_40d();
  const ::apollo::canbus::Yaw_rate_rpt_40d& yaw_rate_rpt_40d() const;
  ::apollo::canbus::Yaw_rate_rpt_40d* release_yaw_rate_rpt_40d();
  ::apollo::canbus::Yaw_rate_rpt_40d* mutable_yaw_rate_rpt_40d();
  void set_allocated_yaw_rate_rpt_40d(::apollo::canbus::Yaw_rate_rpt_40d* yaw_rate_rpt_40d);
  private:
  const ::apollo::canbus::Yaw_rate_rpt_40d& _internal_yaw_rate_rpt_40d() const;
  ::apollo::canbus::Yaw_rate_rpt_40d* _internal_mutable_yaw_rate_rpt_40d();
  public:

  // optional .apollo.canbus.Date_time_rpt_40f date_time_rpt_40f = 48;
  bool has_date_time_rpt_40f() const;
  private:
  bool _internal_has_date_time_rpt_40f() const;
  public:
  void clear_date_time_rpt_40f();
  const ::apollo::canbus::Date_time_rpt_40f& date_time_rpt_40f() const;
  ::apollo::canbus::Date_time_rpt_40f* release_date_time_rpt_40f();
  ::apollo::canbus::Date_time_rpt_40f* mutable_date_time_rpt_40f();
  void set_allocated_date_time_rpt_40f(::apollo::canbus::Date_time_rpt_40f* date_time_rpt_40f);
  private:
  const ::apollo::canbus::Date_time_rpt_40f& _internal_date_time_rpt_40f() const;
  ::apollo::canbus::Date_time_rpt_40f* _internal_mutable_date_time_rpt_40f();
  public:

  // optional .apollo.canbus.Vin_rpt_414 vin_rpt_414 = 49;
  bool has_vin_rpt_414() const;
  private:
  bool _internal_has_vin_rpt_414() const;
  public:
  void clear_vin_rpt_414();
  const ::apollo::canbus::Vin_rpt_414& vin_rpt_414() const;
  ::apollo::canbus::Vin_rpt_414* release_vin_rpt_414();
  ::apollo::canbus::Vin_rpt_414* mutable_vin_rpt_414();
  void set_allocated_vin_rpt_414(::apollo::canbus::Vin_rpt_414* vin_rpt_414);
  private:
  const ::apollo::canbus::Vin_rpt_414& _internal_vin_rpt_414() const;
  ::apollo::canbus::Vin_rpt_414* _internal_mutable_vin_rpt_414();
  public:

  // optional .apollo.canbus.Occupancy_rpt_415 occupancy_rpt_415 = 50;
  bool has_occupancy_rpt_415() const;
  private:
  bool _internal_has_occupancy_rpt_415() const;
  public:
  void clear_occupancy_rpt_415();
  const ::apollo::canbus::Occupancy_rpt_415& occupancy_rpt_415() const;
  ::apollo::canbus::Occupancy_rpt_415* release_occupancy_rpt_415();
  ::apollo::canbus::Occupancy_rpt_415* mutable_occupancy_rpt_415();
  void set_allocated_occupancy_rpt_415(::apollo::canbus::Occupancy_rpt_415* occupancy_rpt_415);
  private:
  const ::apollo::canbus::Occupancy_rpt_415& _internal_occupancy_rpt_415() const;
  ::apollo::canbus::Occupancy_rpt_415* _internal_mutable_occupancy_rpt_415();
  public:

  // optional .apollo.canbus.Interior_lights_rpt_416 interior_lights_rpt_416 = 51;
  bool has_interior_lights_rpt_416() const;
  private:
  bool _internal_has_interior_lights_rpt_416() const;
  public:
  void clear_interior_lights_rpt_416();
  const ::apollo::canbus::Interior_lights_rpt_416& interior_lights_rpt_416() const;
  ::apollo::canbus::Interior_lights_rpt_416* release_interior_lights_rpt_416();
  ::apollo::canbus::Interior_lights_rpt_416* mutable_interior_lights_rpt_416();
  void set_allocated_interior_lights_rpt_416(::apollo::canbus::Interior_lights_rpt_416* interior_lights_rpt_416);
  private:
  const ::apollo::canbus::Interior_lights_rpt_416& _internal_interior_lights_rpt_416() const;
  ::apollo::canbus::Interior_lights_rpt_416* _internal_mutable_interior_lights_rpt_416();
  public:

  // optional .apollo.canbus.Turn_cmd_130 turn_cmd_130 = 52;
  bool has_turn_cmd_130() const;
  private:
  bool _internal_has_turn_cmd_130() const;
  public:
  void clear_turn_cmd_130();
  const ::apollo::canbus::Turn_cmd_130& turn_cmd_130() const;
  ::apollo::canbus::Turn_cmd_130* release_turn_cmd_130();
  ::apollo::canbus::Turn_cmd_130* mutable_turn_cmd_130();
  void set_allocated_turn_cmd_130(::apollo::canbus::Turn_cmd_130* turn_cmd_130);
  private:
  const ::apollo::canbus::Turn_cmd_130& _internal_turn_cmd_130() const;
  ::apollo::canbus::Turn_cmd_130* _internal_mutable_turn_cmd_130();
  public:

  // optional .apollo.canbus.Detected_object_rpt_411 detected_object_rpt_411 = 53;
  bool has_detected_object_rpt_411() const;
  private:
  bool _internal_has_detected_object_rpt_411() const;
  public:
  void clear_detected_object_rpt_411();
  const ::apollo::canbus::Detected_object_rpt_411& detected_object_rpt_411() const;
  ::apollo::canbus::Detected_object_rpt_411* release_detected_object_rpt_411();
  ::apollo::canbus::Detected_object_rpt_411* mutable_detected_object_rpt_411();
  void set_allocated_detected_object_rpt_411(::apollo::canbus::Detected_object_rpt_411* detected_object_rpt_411);
  private:
  const ::apollo::canbus::Detected_object_rpt_411& _internal_detected_object_rpt_411() const;
  ::apollo::canbus::Detected_object_rpt_411* _internal_mutable_detected_object_rpt_411();
  public:

  // optional .apollo.canbus.Veh_specific_rpt_1_412 veh_specific_rpt_1_412 = 54;
  bool has_veh_specific_rpt_1_412() const;
  private:
  bool _internal_has_veh_specific_rpt_1_412() const;
  public:
  void clear_veh_specific_rpt_1_412();
  const ::apollo::canbus::Veh_specific_rpt_1_412& veh_specific_rpt_1_412() const;
  ::apollo::canbus::Veh_specific_rpt_1_412* release_veh_specific_rpt_1_412();
  ::apollo::canbus::Veh_specific_rpt_1_412* mutable_veh_specific_rpt_1_412();
  void set_allocated_veh_specific_rpt_1_412(::apollo::canbus::Veh_specific_rpt_1_412* veh_specific_rpt_1_412);
  private:
  const ::apollo::canbus::Veh_specific_rpt_1_412& _internal_veh_specific_rpt_1_412() const;
  ::apollo::canbus::Veh_specific_rpt_1_412* _internal_mutable_veh_specific_rpt_1_412();
  public:

  // optional .apollo.canbus.Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;
  bool has_veh_dynamics_rpt_413() const;
  private:
  bool _internal_has_veh_dynamics_rpt_413() const;
  public:
  void clear_veh_dynamics_rpt_413();
  const ::apollo::canbus::Veh_dynamics_rpt_413& veh_dynamics_rpt_413() const;
  ::apollo::canbus::Veh_dynamics_rpt_413* release_veh_dynamics_rpt_413();
  ::apollo::canbus::Veh_dynamics_rpt_413* mutable_veh_dynamics_rpt_413();
  void set_allocated_veh_dynamics_rpt_413(::apollo::canbus::Veh_dynamics_rpt_413* veh_dynamics_rpt_413);
  private:
  const ::apollo::canbus::Veh_dynamics_rpt_413& _internal_veh_dynamics_rpt_413() const;
  ::apollo::canbus::Veh_dynamics_rpt_413* _internal_mutable_veh_dynamics_rpt_413();
  public:

  // optional .apollo.canbus.Rear_lights_rpt_418 rear_lights_rpt_418 = 56;
  bool has_rear_lights_rpt_418() const;
  private:
  bool _internal_has_rear_lights_rpt_418() const;
  public:
  void clear_rear_lights_rpt_418();
  const ::apollo::canbus::Rear_lights_rpt_418& rear_lights_rpt_418() const;
  ::apollo::canbus::Rear_lights_rpt_418* release_rear_lights_rpt_418();
  ::apollo::canbus::Rear_lights_rpt_418* mutable_rear_lights_rpt_418();
  void set_allocated_rear_lights_rpt_418(::apollo::canbus::Rear_lights_rpt_418* rear_lights_rpt_418);
  private:
  const ::apollo::canbus::Rear_lights_rpt_418& _internal_rear_lights_rpt_418() const;
  ::apollo::canbus::Rear_lights_rpt_418* _internal_mutable_rear_lights_rpt_418();
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Lexus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::canbus::Hazard_lights_rpt_214* hazard_lights_rpt_214_;
  ::apollo::canbus::Steering_cmd_12c* steering_cmd_12c_;
  ::apollo::canbus::Dash_controls_right_rpt_210* dash_controls_right_rpt_210_;
  ::apollo::canbus::Dash_controls_left_cmd_10c* dash_controls_left_cmd_10c_;
  ::apollo::canbus::Steering_rpt_22c* steering_rpt_22c_;
  ::apollo::canbus::Turn_aux_rpt_330* turn_aux_rpt_330_;
  ::apollo::canbus::Headlight_rpt_218* headlight_rpt_218_;
  ::apollo::canbus::Hazard_lights_cmd_114* hazard_lights_cmd_114_;
  ::apollo::canbus::Dash_controls_left_rpt_20c* dash_controls_left_rpt_20c_;
  ::apollo::canbus::Headlight_aux_rpt_318* headlight_aux_rpt_318_;
  ::apollo::canbus::Dash_controls_right_cmd_110* dash_controls_right_cmd_110_;
  ::apollo::canbus::Wiper_cmd_134* wiper_cmd_134_;
  ::apollo::canbus::Wiper_rpt_234* wiper_rpt_234_;
  ::apollo::canbus::Turn_rpt_230* turn_rpt_230_;
  ::apollo::canbus::Headlight_cmd_118* headlight_cmd_118_;
  ::apollo::canbus::Door_rpt_417* door_rpt_417_;
  ::apollo::canbus::Component_rpt_20* component_rpt_20_;
  ::apollo::canbus::Wheel_speed_rpt_407* wheel_speed_rpt_407_;
  ::apollo::canbus::Steering_motor_rpt_3_406* steering_motor_rpt_3_406_;
  ::apollo::canbus::Steering_motor_rpt_2_405* steering_motor_rpt_2_405_;
  ::apollo::canbus::Steering_motor_rpt_1_404* steering_motor_rpt_1_404_;
  ::apollo::canbus::Brake_motor_rpt_3_403* brake_motor_rpt_3_403_;
  ::apollo::canbus::Brake_motor_rpt_2_402* brake_motor_rpt_2_402_;
  ::apollo::canbus::Brake_motor_rpt_1_401* brake_motor_rpt_1_401_;
  ::apollo::canbus::Wiper_aux_rpt_334* wiper_aux_rpt_334_;
  ::apollo::canbus::Shift_aux_rpt_328* shift_aux_rpt_328_;
  ::apollo::canbus::Accel_rpt_200* accel_rpt_200_;
  ::apollo::canbus::Brake_rpt_204* brake_rpt_204_;
  ::apollo::canbus::Horn_cmd_11c* horn_cmd_11c_;
  ::apollo::canbus::Global_rpt_10* global_rpt_10_;
  ::apollo::canbus::Accel_aux_rpt_300* accel_aux_rpt_300_;
  ::apollo::canbus::Cruise_control_buttons_rpt_208* cruise_control_buttons_rpt_208_;
  ::apollo::canbus::Vehicle_speed_rpt_400* vehicle_speed_rpt_400_;
  ::apollo::canbus::Brake_aux_rpt_304* brake_aux_rpt_304_;
  ::apollo::canbus::Media_controls_cmd_120* media_controls_cmd_120_;
  ::apollo::canbus::Cruise_control_buttons_cmd_108* cruise_control_buttons_cmd_108_;
  ::apollo::canbus::Parking_brake_cmd_124* parking_brake_cmd_124_;
  ::apollo::canbus::Horn_rpt_21c* horn_rpt_21c_;
  ::apollo::canbus::Shift_rpt_228* shift_rpt_228_;
  ::apollo::canbus::Shift_cmd_128* shift_cmd_128_;
  ::apollo::canbus::Accel_cmd_100* accel_cmd_100_;
  ::apollo::canbus::Parking_brake_rpt_224* parking_brake_rpt_224_;
  ::apollo::canbus::Brake_cmd_104* brake_cmd_104_;
  ::apollo::canbus::Media_controls_rpt_220* media_controls_rpt_220_;
  ::apollo::canbus::Steering_aux_rpt_32c* steering_aux_rpt_32c_;
  ::apollo::canbus::Lat_lon_heading_rpt_40e* lat_lon_heading_rpt_40e_;
  ::apollo::canbus::Yaw_rate_rpt_40d* yaw_rate_rpt_40d_;
  ::apollo::canbus::Date_time_rpt_40f* date_time_rpt_40f_;
  ::apollo::canbus::Vin_rpt_414* vin_rpt_414_;
  ::apollo::canbus::Occupancy_rpt_415* occupancy_rpt_415_;
  ::apollo::canbus::Interior_lights_rpt_416* interior_lights_rpt_416_;
  ::apollo::canbus::Turn_cmd_130* turn_cmd_130_;
  ::apollo::canbus::Detected_object_rpt_411* detected_object_rpt_411_;
  ::apollo::canbus::Veh_specific_rpt_1_412* veh_specific_rpt_1_412_;
  ::apollo::canbus::Veh_dynamics_rpt_413* veh_dynamics_rpt_413_;
  ::apollo::canbus::Rear_lights_rpt_418* rear_lights_rpt_418_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2flexus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Hazard_lights_rpt_214

// optional bool output_value = 1;
inline bool Hazard_lights_rpt_214::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_output_value() const {
  return _internal_has_output_value();
}
inline void Hazard_lights_rpt_214::clear_output_value() {
  output_value_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Hazard_lights_rpt_214::_internal_output_value() const {
  return output_value_;
}
inline bool Hazard_lights_rpt_214::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.output_value)
  return _internal_output_value();
}
inline void Hazard_lights_rpt_214::_internal_set_output_value(bool value) {
  _has_bits_[0] |= 0x00000001u;
  output_value_ = value;
}
inline void Hazard_lights_rpt_214::set_output_value(bool value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.output_value)
}

// optional bool commanded_value = 2;
inline bool Hazard_lights_rpt_214::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Hazard_lights_rpt_214::clear_commanded_value() {
  commanded_value_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Hazard_lights_rpt_214::_internal_commanded_value() const {
  return commanded_value_;
}
inline bool Hazard_lights_rpt_214::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.commanded_value)
  return _internal_commanded_value();
}
inline void Hazard_lights_rpt_214::_internal_set_commanded_value(bool value) {
  _has_bits_[0] |= 0x00000002u;
  commanded_value_ = value;
}
inline void Hazard_lights_rpt_214::set_commanded_value(bool value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.commanded_value)
}

// optional bool manual_input = 3;
inline bool Hazard_lights_rpt_214::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Hazard_lights_rpt_214::clear_manual_input() {
  manual_input_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Hazard_lights_rpt_214::_internal_manual_input() const {
  return manual_input_;
}
inline bool Hazard_lights_rpt_214::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.manual_input)
  return _internal_manual_input();
}
inline void Hazard_lights_rpt_214::_internal_set_manual_input(bool value) {
  _has_bits_[0] |= 0x00000004u;
  manual_input_ = value;
}
inline void Hazard_lights_rpt_214::set_manual_input(bool value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.manual_input)
}

// optional bool vehicle_fault = 4;
inline bool Hazard_lights_rpt_214::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Hazard_lights_rpt_214::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Hazard_lights_rpt_214::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Hazard_lights_rpt_214::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Hazard_lights_rpt_214::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  vehicle_fault_ = value;
}
inline void Hazard_lights_rpt_214::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.vehicle_fault)
}

// optional bool pacmod_fault = 5;
inline bool Hazard_lights_rpt_214::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Hazard_lights_rpt_214::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Hazard_lights_rpt_214::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Hazard_lights_rpt_214::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Hazard_lights_rpt_214::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  pacmod_fault_ = value;
}
inline void Hazard_lights_rpt_214::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.pacmod_fault)
}

// optional bool override_active = 6;
inline bool Hazard_lights_rpt_214::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_override_active() const {
  return _internal_has_override_active();
}
inline void Hazard_lights_rpt_214::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Hazard_lights_rpt_214::_internal_override_active() const {
  return override_active_;
}
inline bool Hazard_lights_rpt_214::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.override_active)
  return _internal_override_active();
}
inline void Hazard_lights_rpt_214::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  override_active_ = value;
}
inline void Hazard_lights_rpt_214::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.override_active)
}

// optional bool output_reported_fault = 7;
inline bool Hazard_lights_rpt_214::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Hazard_lights_rpt_214::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Hazard_lights_rpt_214::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Hazard_lights_rpt_214::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Hazard_lights_rpt_214::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  output_reported_fault_ = value;
}
inline void Hazard_lights_rpt_214::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.output_reported_fault)
}

// optional bool input_output_fault = 8;
inline bool Hazard_lights_rpt_214::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Hazard_lights_rpt_214::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Hazard_lights_rpt_214::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Hazard_lights_rpt_214::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.input_output_fault)
  return _internal_input_output_fault();
}
inline void Hazard_lights_rpt_214::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000080u;
  input_output_fault_ = value;
}
inline void Hazard_lights_rpt_214::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.input_output_fault)
}

// optional bool enabled = 9;
inline bool Hazard_lights_rpt_214::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_enabled() const {
  return _internal_has_enabled();
}
inline void Hazard_lights_rpt_214::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Hazard_lights_rpt_214::_internal_enabled() const {
  return enabled_;
}
inline bool Hazard_lights_rpt_214::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.enabled)
  return _internal_enabled();
}
inline void Hazard_lights_rpt_214::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enabled_ = value;
}
inline void Hazard_lights_rpt_214::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.enabled)
}

// optional bool command_output_fault = 10;
inline bool Hazard_lights_rpt_214::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Hazard_lights_rpt_214::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Hazard_lights_rpt_214::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Hazard_lights_rpt_214::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Hazard_lights_rpt_214::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_rpt_214.command_output_fault)
  return _internal_command_output_fault();
}
inline void Hazard_lights_rpt_214::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000200u;
  command_output_fault_ = value;
}
inline void Hazard_lights_rpt_214::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_rpt_214.command_output_fault)
}

// -------------------------------------------------------------------

// Steering_cmd_12c

// optional bool ignore_overrides = 1;
inline bool Steering_cmd_12c::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Steering_cmd_12c::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Steering_cmd_12c::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Steering_cmd_12c::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Steering_cmd_12c::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_cmd_12c.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Steering_cmd_12c::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000004u;
  ignore_overrides_ = value;
}
inline void Steering_cmd_12c::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_cmd_12c.ignore_overrides)
}

// optional bool enable = 2;
inline bool Steering_cmd_12c::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Steering_cmd_12c::has_enable() const {
  return _internal_has_enable();
}
inline void Steering_cmd_12c::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Steering_cmd_12c::_internal_enable() const {
  return enable_;
}
inline bool Steering_cmd_12c::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_cmd_12c.enable)
  return _internal_enable();
}
inline void Steering_cmd_12c::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_ = value;
}
inline void Steering_cmd_12c::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_cmd_12c.enable)
}

// optional bool clear_override = 3;
inline bool Steering_cmd_12c::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Steering_cmd_12c::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Steering_cmd_12c::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Steering_cmd_12c::_internal_clear_override() const {
  return clear_override_;
}
inline bool Steering_cmd_12c::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_cmd_12c.clear_override)
  return _internal_clear_override();
}
inline void Steering_cmd_12c::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000010u;
  clear_override_ = value;
}
inline void Steering_cmd_12c::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_cmd_12c.clear_override)
}

// optional bool clear_faults = 4;
inline bool Steering_cmd_12c::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Steering_cmd_12c::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Steering_cmd_12c::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Steering_cmd_12c::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Steering_cmd_12c::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_cmd_12c.clear_faults)
  return _internal_clear_faults();
}
inline void Steering_cmd_12c::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000020u;
  clear_faults_ = value;
}
inline void Steering_cmd_12c::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_cmd_12c.clear_faults)
}

// optional double position = 5;
inline bool Steering_cmd_12c::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steering_cmd_12c::has_position() const {
  return _internal_has_position();
}
inline void Steering_cmd_12c::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Steering_cmd_12c::_internal_position() const {
  return position_;
}
inline double Steering_cmd_12c::position() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_cmd_12c.position)
  return _internal_position();
}
inline void Steering_cmd_12c::_internal_set_position(double value) {
  _has_bits_[0] |= 0x00000001u;
  position_ = value;
}
inline void Steering_cmd_12c::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_cmd_12c.position)
}

// optional double rotation_rate = 6;
inline bool Steering_cmd_12c::_internal_has_rotation_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steering_cmd_12c::has_rotation_rate() const {
  return _internal_has_rotation_rate();
}
inline void Steering_cmd_12c::clear_rotation_rate() {
  rotation_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Steering_cmd_12c::_internal_rotation_rate() const {
  return rotation_rate_;
}
inline double Steering_cmd_12c::rotation_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_cmd_12c.rotation_rate)
  return _internal_rotation_rate();
}
inline void Steering_cmd_12c::_internal_set_rotation_rate(double value) {
  _has_bits_[0] |= 0x00000002u;
  rotation_rate_ = value;
}
inline void Steering_cmd_12c::set_rotation_rate(double value) {
  _internal_set_rotation_rate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_cmd_12c.rotation_rate)
}

// -------------------------------------------------------------------

// Dash_controls_right_rpt_210

// optional .apollo.canbus.Dash_controls_right_rpt_210.Output_valueType output_value = 1;
inline bool Dash_controls_right_rpt_210::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_output_value() const {
  return _internal_has_output_value();
}
inline void Dash_controls_right_rpt_210::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType Dash_controls_right_rpt_210::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.output_value)
  return _internal_output_value();
}
inline void Dash_controls_right_rpt_210::_internal_set_output_value(::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType value) {
  assert(::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  output_value_ = value;
}
inline void Dash_controls_right_rpt_210::set_output_value(::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.output_value)
}

// optional .apollo.canbus.Dash_controls_right_rpt_210.Commanded_valueType commanded_value = 2;
inline bool Dash_controls_right_rpt_210::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Dash_controls_right_rpt_210::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType Dash_controls_right_rpt_210::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.commanded_value)
  return _internal_commanded_value();
}
inline void Dash_controls_right_rpt_210::_internal_set_commanded_value(::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType value) {
  assert(::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  commanded_value_ = value;
}
inline void Dash_controls_right_rpt_210::set_commanded_value(::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.commanded_value)
}

// optional bool vehicle_fault = 3;
inline bool Dash_controls_right_rpt_210::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Dash_controls_right_rpt_210::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Dash_controls_right_rpt_210::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Dash_controls_right_rpt_210::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Dash_controls_right_rpt_210::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000004u;
  vehicle_fault_ = value;
}
inline void Dash_controls_right_rpt_210::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.vehicle_fault)
}

// optional bool pacmod_fault = 4;
inline bool Dash_controls_right_rpt_210::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Dash_controls_right_rpt_210::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Dash_controls_right_rpt_210::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Dash_controls_right_rpt_210::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Dash_controls_right_rpt_210::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  pacmod_fault_ = value;
}
inline void Dash_controls_right_rpt_210::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.pacmod_fault)
}

// optional bool override_active = 5;
inline bool Dash_controls_right_rpt_210::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_override_active() const {
  return _internal_has_override_active();
}
inline void Dash_controls_right_rpt_210::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Dash_controls_right_rpt_210::_internal_override_active() const {
  return override_active_;
}
inline bool Dash_controls_right_rpt_210::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.override_active)
  return _internal_override_active();
}
inline void Dash_controls_right_rpt_210::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000010u;
  override_active_ = value;
}
inline void Dash_controls_right_rpt_210::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.override_active)
}

// optional bool output_reported_fault = 6;
inline bool Dash_controls_right_rpt_210::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Dash_controls_right_rpt_210::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Dash_controls_right_rpt_210::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Dash_controls_right_rpt_210::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Dash_controls_right_rpt_210::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000020u;
  output_reported_fault_ = value;
}
inline void Dash_controls_right_rpt_210::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.output_reported_fault)
}

// optional bool input_output_fault = 7;
inline bool Dash_controls_right_rpt_210::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Dash_controls_right_rpt_210::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Dash_controls_right_rpt_210::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Dash_controls_right_rpt_210::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.input_output_fault)
  return _internal_input_output_fault();
}
inline void Dash_controls_right_rpt_210::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  input_output_fault_ = value;
}
inline void Dash_controls_right_rpt_210::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.input_output_fault)
}

// optional bool enabled = 8;
inline bool Dash_controls_right_rpt_210::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_enabled() const {
  return _internal_has_enabled();
}
inline void Dash_controls_right_rpt_210::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Dash_controls_right_rpt_210::_internal_enabled() const {
  return enabled_;
}
inline bool Dash_controls_right_rpt_210::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.enabled)
  return _internal_enabled();
}
inline void Dash_controls_right_rpt_210::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  enabled_ = value;
}
inline void Dash_controls_right_rpt_210::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.enabled)
}

// optional bool command_output_fault = 9;
inline bool Dash_controls_right_rpt_210::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Dash_controls_right_rpt_210::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Dash_controls_right_rpt_210::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Dash_controls_right_rpt_210::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.command_output_fault)
  return _internal_command_output_fault();
}
inline void Dash_controls_right_rpt_210::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000100u;
  command_output_fault_ = value;
}
inline void Dash_controls_right_rpt_210::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.command_output_fault)
}

// optional .apollo.canbus.Dash_controls_right_rpt_210.Manual_inputType manual_input = 10;
inline bool Dash_controls_right_rpt_210::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Dash_controls_right_rpt_210::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Dash_controls_right_rpt_210::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType Dash_controls_right_rpt_210::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_rpt_210.manual_input)
  return _internal_manual_input();
}
inline void Dash_controls_right_rpt_210::_internal_set_manual_input(::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType value) {
  assert(::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  manual_input_ = value;
}
inline void Dash_controls_right_rpt_210::set_manual_input(::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_rpt_210.manual_input)
}

// -------------------------------------------------------------------

// Dash_controls_left_cmd_10c

// optional bool ignore_overrides = 1;
inline bool Dash_controls_left_cmd_10c::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dash_controls_left_cmd_10c::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Dash_controls_left_cmd_10c::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Dash_controls_left_cmd_10c::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Dash_controls_left_cmd_10c::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_cmd_10c.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Dash_controls_left_cmd_10c::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_overrides_ = value;
}
inline void Dash_controls_left_cmd_10c::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_cmd_10c.ignore_overrides)
}

// optional bool enable = 2;
inline bool Dash_controls_left_cmd_10c::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dash_controls_left_cmd_10c::has_enable() const {
  return _internal_has_enable();
}
inline void Dash_controls_left_cmd_10c::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Dash_controls_left_cmd_10c::_internal_enable() const {
  return enable_;
}
inline bool Dash_controls_left_cmd_10c::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_cmd_10c.enable)
  return _internal_enable();
}
inline void Dash_controls_left_cmd_10c::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ = value;
}
inline void Dash_controls_left_cmd_10c::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_cmd_10c.enable)
}

// optional bool clear_override = 3;
inline bool Dash_controls_left_cmd_10c::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Dash_controls_left_cmd_10c::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Dash_controls_left_cmd_10c::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Dash_controls_left_cmd_10c::_internal_clear_override() const {
  return clear_override_;
}
inline bool Dash_controls_left_cmd_10c::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_cmd_10c.clear_override)
  return _internal_clear_override();
}
inline void Dash_controls_left_cmd_10c::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Dash_controls_left_cmd_10c::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_cmd_10c.clear_override)
}

// optional bool clear_faults = 4;
inline bool Dash_controls_left_cmd_10c::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Dash_controls_left_cmd_10c::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Dash_controls_left_cmd_10c::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Dash_controls_left_cmd_10c::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Dash_controls_left_cmd_10c::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_cmd_10c.clear_faults)
  return _internal_clear_faults();
}
inline void Dash_controls_left_cmd_10c::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_faults_ = value;
}
inline void Dash_controls_left_cmd_10c::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_cmd_10c.clear_faults)
}

// optional .apollo.canbus.Dash_controls_left_cmd_10c.Dash_controls_buttonType dash_controls_button = 5;
inline bool Dash_controls_left_cmd_10c::_internal_has_dash_controls_button() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Dash_controls_left_cmd_10c::has_dash_controls_button() const {
  return _internal_has_dash_controls_button();
}
inline void Dash_controls_left_cmd_10c::clear_dash_controls_button() {
  dash_controls_button_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::_internal_dash_controls_button() const {
  return static_cast< ::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType >(dash_controls_button_);
}
inline ::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType Dash_controls_left_cmd_10c::dash_controls_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_cmd_10c.dash_controls_button)
  return _internal_dash_controls_button();
}
inline void Dash_controls_left_cmd_10c::_internal_set_dash_controls_button(::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType value) {
  assert(::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dash_controls_button_ = value;
}
inline void Dash_controls_left_cmd_10c::set_dash_controls_button(::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType value) {
  _internal_set_dash_controls_button(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_cmd_10c.dash_controls_button)
}

// -------------------------------------------------------------------

// Steering_rpt_22c

// optional bool vehicle_fault = 1;
inline bool Steering_rpt_22c::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Steering_rpt_22c::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Steering_rpt_22c::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Steering_rpt_22c::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Steering_rpt_22c::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_fault_ = value;
}
inline void Steering_rpt_22c::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.vehicle_fault)
}

// optional bool pacmod_fault = 2;
inline bool Steering_rpt_22c::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Steering_rpt_22c::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Steering_rpt_22c::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Steering_rpt_22c::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Steering_rpt_22c::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pacmod_fault_ = value;
}
inline void Steering_rpt_22c::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.pacmod_fault)
}

// optional bool override_active = 3;
inline bool Steering_rpt_22c::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_override_active() const {
  return _internal_has_override_active();
}
inline void Steering_rpt_22c::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Steering_rpt_22c::_internal_override_active() const {
  return override_active_;
}
inline bool Steering_rpt_22c::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.override_active)
  return _internal_override_active();
}
inline void Steering_rpt_22c::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  override_active_ = value;
}
inline void Steering_rpt_22c::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.override_active)
}

// optional bool output_reported_fault = 4;
inline bool Steering_rpt_22c::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Steering_rpt_22c::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Steering_rpt_22c::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Steering_rpt_22c::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Steering_rpt_22c::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  output_reported_fault_ = value;
}
inline void Steering_rpt_22c::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.output_reported_fault)
}

// optional bool input_output_fault = 5;
inline bool Steering_rpt_22c::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Steering_rpt_22c::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Steering_rpt_22c::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Steering_rpt_22c::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.input_output_fault)
  return _internal_input_output_fault();
}
inline void Steering_rpt_22c::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  input_output_fault_ = value;
}
inline void Steering_rpt_22c::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.input_output_fault)
}

// optional bool enabled = 6;
inline bool Steering_rpt_22c::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_enabled() const {
  return _internal_has_enabled();
}
inline void Steering_rpt_22c::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Steering_rpt_22c::_internal_enabled() const {
  return enabled_;
}
inline bool Steering_rpt_22c::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.enabled)
  return _internal_enabled();
}
inline void Steering_rpt_22c::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enabled_ = value;
}
inline void Steering_rpt_22c::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.enabled)
}

// optional bool command_output_fault = 7;
inline bool Steering_rpt_22c::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Steering_rpt_22c::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Steering_rpt_22c::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Steering_rpt_22c::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.command_output_fault)
  return _internal_command_output_fault();
}
inline void Steering_rpt_22c::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  command_output_fault_ = value;
}
inline void Steering_rpt_22c::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.command_output_fault)
}

// optional double manual_input = 8;
inline bool Steering_rpt_22c::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Steering_rpt_22c::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Steering_rpt_22c::_internal_manual_input() const {
  return manual_input_;
}
inline double Steering_rpt_22c::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.manual_input)
  return _internal_manual_input();
}
inline void Steering_rpt_22c::_internal_set_manual_input(double value) {
  _has_bits_[0] |= 0x00000080u;
  manual_input_ = value;
}
inline void Steering_rpt_22c::set_manual_input(double value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.manual_input)
}

// optional double commanded_value = 9;
inline bool Steering_rpt_22c::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Steering_rpt_22c::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Steering_rpt_22c::_internal_commanded_value() const {
  return commanded_value_;
}
inline double Steering_rpt_22c::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.commanded_value)
  return _internal_commanded_value();
}
inline void Steering_rpt_22c::_internal_set_commanded_value(double value) {
  _has_bits_[0] |= 0x00000100u;
  commanded_value_ = value;
}
inline void Steering_rpt_22c::set_commanded_value(double value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.commanded_value)
}

// optional double output_value = 10;
inline bool Steering_rpt_22c::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Steering_rpt_22c::has_output_value() const {
  return _internal_has_output_value();
}
inline void Steering_rpt_22c::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Steering_rpt_22c::_internal_output_value() const {
  return output_value_;
}
inline double Steering_rpt_22c::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_rpt_22c.output_value)
  return _internal_output_value();
}
inline void Steering_rpt_22c::_internal_set_output_value(double value) {
  _has_bits_[0] |= 0x00000200u;
  output_value_ = value;
}
inline void Steering_rpt_22c::set_output_value(double value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_rpt_22c.output_value)
}

// -------------------------------------------------------------------

// Turn_aux_rpt_330

// optional bool pass_blinker_bulb_on_is_valid = 1;
inline bool Turn_aux_rpt_330::_internal_has_pass_blinker_bulb_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Turn_aux_rpt_330::has_pass_blinker_bulb_on_is_valid() const {
  return _internal_has_pass_blinker_bulb_on_is_valid();
}
inline void Turn_aux_rpt_330::clear_pass_blinker_bulb_on_is_valid() {
  pass_blinker_bulb_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Turn_aux_rpt_330::_internal_pass_blinker_bulb_on_is_valid() const {
  return pass_blinker_bulb_on_is_valid_;
}
inline bool Turn_aux_rpt_330::pass_blinker_bulb_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_aux_rpt_330.pass_blinker_bulb_on_is_valid)
  return _internal_pass_blinker_bulb_on_is_valid();
}
inline void Turn_aux_rpt_330::_internal_set_pass_blinker_bulb_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  pass_blinker_bulb_on_is_valid_ = value;
}
inline void Turn_aux_rpt_330::set_pass_blinker_bulb_on_is_valid(bool value) {
  _internal_set_pass_blinker_bulb_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_aux_rpt_330.pass_blinker_bulb_on_is_valid)
}

// optional bool pass_blinker_bulb_on = 2;
inline bool Turn_aux_rpt_330::_internal_has_pass_blinker_bulb_on() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Turn_aux_rpt_330::has_pass_blinker_bulb_on() const {
  return _internal_has_pass_blinker_bulb_on();
}
inline void Turn_aux_rpt_330::clear_pass_blinker_bulb_on() {
  pass_blinker_bulb_on_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Turn_aux_rpt_330::_internal_pass_blinker_bulb_on() const {
  return pass_blinker_bulb_on_;
}
inline bool Turn_aux_rpt_330::pass_blinker_bulb_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_aux_rpt_330.pass_blinker_bulb_on)
  return _internal_pass_blinker_bulb_on();
}
inline void Turn_aux_rpt_330::_internal_set_pass_blinker_bulb_on(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pass_blinker_bulb_on_ = value;
}
inline void Turn_aux_rpt_330::set_pass_blinker_bulb_on(bool value) {
  _internal_set_pass_blinker_bulb_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_aux_rpt_330.pass_blinker_bulb_on)
}

// optional bool driver_blinker_bulb_on_is_valid = 3;
inline bool Turn_aux_rpt_330::_internal_has_driver_blinker_bulb_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Turn_aux_rpt_330::has_driver_blinker_bulb_on_is_valid() const {
  return _internal_has_driver_blinker_bulb_on_is_valid();
}
inline void Turn_aux_rpt_330::clear_driver_blinker_bulb_on_is_valid() {
  driver_blinker_bulb_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Turn_aux_rpt_330::_internal_driver_blinker_bulb_on_is_valid() const {
  return driver_blinker_bulb_on_is_valid_;
}
inline bool Turn_aux_rpt_330::driver_blinker_bulb_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_aux_rpt_330.driver_blinker_bulb_on_is_valid)
  return _internal_driver_blinker_bulb_on_is_valid();
}
inline void Turn_aux_rpt_330::_internal_set_driver_blinker_bulb_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  driver_blinker_bulb_on_is_valid_ = value;
}
inline void Turn_aux_rpt_330::set_driver_blinker_bulb_on_is_valid(bool value) {
  _internal_set_driver_blinker_bulb_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_aux_rpt_330.driver_blinker_bulb_on_is_valid)
}

// optional bool driver_blinker_bulb_on = 4;
inline bool Turn_aux_rpt_330::_internal_has_driver_blinker_bulb_on() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Turn_aux_rpt_330::has_driver_blinker_bulb_on() const {
  return _internal_has_driver_blinker_bulb_on();
}
inline void Turn_aux_rpt_330::clear_driver_blinker_bulb_on() {
  driver_blinker_bulb_on_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Turn_aux_rpt_330::_internal_driver_blinker_bulb_on() const {
  return driver_blinker_bulb_on_;
}
inline bool Turn_aux_rpt_330::driver_blinker_bulb_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_aux_rpt_330.driver_blinker_bulb_on)
  return _internal_driver_blinker_bulb_on();
}
inline void Turn_aux_rpt_330::_internal_set_driver_blinker_bulb_on(bool value) {
  _has_bits_[0] |= 0x00000008u;
  driver_blinker_bulb_on_ = value;
}
inline void Turn_aux_rpt_330::set_driver_blinker_bulb_on(bool value) {
  _internal_set_driver_blinker_bulb_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_aux_rpt_330.driver_blinker_bulb_on)
}

// -------------------------------------------------------------------

// Headlight_rpt_218

// optional bool vehicle_fault = 1;
inline bool Headlight_rpt_218::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Headlight_rpt_218::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Headlight_rpt_218::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Headlight_rpt_218::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Headlight_rpt_218::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_fault_ = value;
}
inline void Headlight_rpt_218::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.vehicle_fault)
}

// optional bool pacmod_fault = 2;
inline bool Headlight_rpt_218::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Headlight_rpt_218::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Headlight_rpt_218::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Headlight_rpt_218::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Headlight_rpt_218::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pacmod_fault_ = value;
}
inline void Headlight_rpt_218::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.pacmod_fault)
}

// optional bool override_active = 3;
inline bool Headlight_rpt_218::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_override_active() const {
  return _internal_has_override_active();
}
inline void Headlight_rpt_218::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Headlight_rpt_218::_internal_override_active() const {
  return override_active_;
}
inline bool Headlight_rpt_218::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.override_active)
  return _internal_override_active();
}
inline void Headlight_rpt_218::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  override_active_ = value;
}
inline void Headlight_rpt_218::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.override_active)
}

// optional bool output_reported_fault = 4;
inline bool Headlight_rpt_218::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Headlight_rpt_218::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Headlight_rpt_218::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Headlight_rpt_218::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Headlight_rpt_218::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  output_reported_fault_ = value;
}
inline void Headlight_rpt_218::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.output_reported_fault)
}

// optional bool input_output_fault = 5;
inline bool Headlight_rpt_218::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Headlight_rpt_218::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Headlight_rpt_218::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Headlight_rpt_218::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.input_output_fault)
  return _internal_input_output_fault();
}
inline void Headlight_rpt_218::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  input_output_fault_ = value;
}
inline void Headlight_rpt_218::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.input_output_fault)
}

// optional bool enabled = 6;
inline bool Headlight_rpt_218::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_enabled() const {
  return _internal_has_enabled();
}
inline void Headlight_rpt_218::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Headlight_rpt_218::_internal_enabled() const {
  return enabled_;
}
inline bool Headlight_rpt_218::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.enabled)
  return _internal_enabled();
}
inline void Headlight_rpt_218::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enabled_ = value;
}
inline void Headlight_rpt_218::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.enabled)
}

// optional bool command_output_fault = 7;
inline bool Headlight_rpt_218::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Headlight_rpt_218::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Headlight_rpt_218::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Headlight_rpt_218::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.command_output_fault)
  return _internal_command_output_fault();
}
inline void Headlight_rpt_218::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  command_output_fault_ = value;
}
inline void Headlight_rpt_218::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.command_output_fault)
}

// optional .apollo.canbus.Headlight_rpt_218.Output_valueType output_value = 8;
inline bool Headlight_rpt_218::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_output_value() const {
  return _internal_has_output_value();
}
inline void Headlight_rpt_218::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Headlight_rpt_218_Output_valueType Headlight_rpt_218::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Headlight_rpt_218_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Headlight_rpt_218_Output_valueType Headlight_rpt_218::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.output_value)
  return _internal_output_value();
}
inline void Headlight_rpt_218::_internal_set_output_value(::apollo::canbus::Headlight_rpt_218_Output_valueType value) {
  assert(::apollo::canbus::Headlight_rpt_218_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  output_value_ = value;
}
inline void Headlight_rpt_218::set_output_value(::apollo::canbus::Headlight_rpt_218_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.output_value)
}

// optional .apollo.canbus.Headlight_rpt_218.Manual_inputType manual_input = 9;
inline bool Headlight_rpt_218::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Headlight_rpt_218::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Headlight_rpt_218_Manual_inputType Headlight_rpt_218::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Headlight_rpt_218_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Headlight_rpt_218_Manual_inputType Headlight_rpt_218::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.manual_input)
  return _internal_manual_input();
}
inline void Headlight_rpt_218::_internal_set_manual_input(::apollo::canbus::Headlight_rpt_218_Manual_inputType value) {
  assert(::apollo::canbus::Headlight_rpt_218_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  manual_input_ = value;
}
inline void Headlight_rpt_218::set_manual_input(::apollo::canbus::Headlight_rpt_218_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.manual_input)
}

// optional .apollo.canbus.Headlight_rpt_218.Commanded_valueType commanded_value = 10;
inline bool Headlight_rpt_218::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Headlight_rpt_218::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Headlight_rpt_218::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Headlight_rpt_218_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Headlight_rpt_218_Commanded_valueType Headlight_rpt_218::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_rpt_218.commanded_value)
  return _internal_commanded_value();
}
inline void Headlight_rpt_218::_internal_set_commanded_value(::apollo::canbus::Headlight_rpt_218_Commanded_valueType value) {
  assert(::apollo::canbus::Headlight_rpt_218_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  commanded_value_ = value;
}
inline void Headlight_rpt_218::set_commanded_value(::apollo::canbus::Headlight_rpt_218_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_rpt_218.commanded_value)
}

// -------------------------------------------------------------------

// Hazard_lights_cmd_114

// optional bool hazard_lights_cmd = 1;
inline bool Hazard_lights_cmd_114::_internal_has_hazard_lights_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Hazard_lights_cmd_114::has_hazard_lights_cmd() const {
  return _internal_has_hazard_lights_cmd();
}
inline void Hazard_lights_cmd_114::clear_hazard_lights_cmd() {
  hazard_lights_cmd_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Hazard_lights_cmd_114::_internal_hazard_lights_cmd() const {
  return hazard_lights_cmd_;
}
inline bool Hazard_lights_cmd_114::hazard_lights_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_cmd_114.hazard_lights_cmd)
  return _internal_hazard_lights_cmd();
}
inline void Hazard_lights_cmd_114::_internal_set_hazard_lights_cmd(bool value) {
  _has_bits_[0] |= 0x00000001u;
  hazard_lights_cmd_ = value;
}
inline void Hazard_lights_cmd_114::set_hazard_lights_cmd(bool value) {
  _internal_set_hazard_lights_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_cmd_114.hazard_lights_cmd)
}

// optional bool ignore_overrides = 2;
inline bool Hazard_lights_cmd_114::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Hazard_lights_cmd_114::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Hazard_lights_cmd_114::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Hazard_lights_cmd_114::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Hazard_lights_cmd_114::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_cmd_114.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Hazard_lights_cmd_114::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ignore_overrides_ = value;
}
inline void Hazard_lights_cmd_114::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_cmd_114.ignore_overrides)
}

// optional bool clear_override = 3;
inline bool Hazard_lights_cmd_114::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Hazard_lights_cmd_114::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Hazard_lights_cmd_114::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Hazard_lights_cmd_114::_internal_clear_override() const {
  return clear_override_;
}
inline bool Hazard_lights_cmd_114::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_cmd_114.clear_override)
  return _internal_clear_override();
}
inline void Hazard_lights_cmd_114::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Hazard_lights_cmd_114::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_cmd_114.clear_override)
}

// optional bool enable = 4;
inline bool Hazard_lights_cmd_114::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Hazard_lights_cmd_114::has_enable() const {
  return _internal_has_enable();
}
inline void Hazard_lights_cmd_114::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Hazard_lights_cmd_114::_internal_enable() const {
  return enable_;
}
inline bool Hazard_lights_cmd_114::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_cmd_114.enable)
  return _internal_enable();
}
inline void Hazard_lights_cmd_114::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_ = value;
}
inline void Hazard_lights_cmd_114::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_cmd_114.enable)
}

// optional bool clear_faults = 5;
inline bool Hazard_lights_cmd_114::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Hazard_lights_cmd_114::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Hazard_lights_cmd_114::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Hazard_lights_cmd_114::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Hazard_lights_cmd_114::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Hazard_lights_cmd_114.clear_faults)
  return _internal_clear_faults();
}
inline void Hazard_lights_cmd_114::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000010u;
  clear_faults_ = value;
}
inline void Hazard_lights_cmd_114::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Hazard_lights_cmd_114.clear_faults)
}

// -------------------------------------------------------------------

// Dash_controls_left_rpt_20c

// optional .apollo.canbus.Dash_controls_left_rpt_20c.Output_valueType output_value = 1;
inline bool Dash_controls_left_rpt_20c::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_output_value() const {
  return _internal_has_output_value();
}
inline void Dash_controls_left_rpt_20c::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType Dash_controls_left_rpt_20c::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.output_value)
  return _internal_output_value();
}
inline void Dash_controls_left_rpt_20c::_internal_set_output_value(::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType value) {
  assert(::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  output_value_ = value;
}
inline void Dash_controls_left_rpt_20c::set_output_value(::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.output_value)
}

// optional .apollo.canbus.Dash_controls_left_rpt_20c.Commanded_valueType commanded_value = 2;
inline bool Dash_controls_left_rpt_20c::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Dash_controls_left_rpt_20c::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType Dash_controls_left_rpt_20c::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.commanded_value)
  return _internal_commanded_value();
}
inline void Dash_controls_left_rpt_20c::_internal_set_commanded_value(::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType value) {
  assert(::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  commanded_value_ = value;
}
inline void Dash_controls_left_rpt_20c::set_commanded_value(::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.commanded_value)
}

// optional .apollo.canbus.Dash_controls_left_rpt_20c.Manual_inputType manual_input = 3;
inline bool Dash_controls_left_rpt_20c::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Dash_controls_left_rpt_20c::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType Dash_controls_left_rpt_20c::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.manual_input)
  return _internal_manual_input();
}
inline void Dash_controls_left_rpt_20c::_internal_set_manual_input(::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType value) {
  assert(::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  manual_input_ = value;
}
inline void Dash_controls_left_rpt_20c::set_manual_input(::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.manual_input)
}

// optional bool vehicle_fault = 4;
inline bool Dash_controls_left_rpt_20c::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Dash_controls_left_rpt_20c::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Dash_controls_left_rpt_20c::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Dash_controls_left_rpt_20c::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Dash_controls_left_rpt_20c::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  vehicle_fault_ = value;
}
inline void Dash_controls_left_rpt_20c::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.vehicle_fault)
}

// optional bool pacmod_fault = 5;
inline bool Dash_controls_left_rpt_20c::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Dash_controls_left_rpt_20c::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Dash_controls_left_rpt_20c::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Dash_controls_left_rpt_20c::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Dash_controls_left_rpt_20c::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  pacmod_fault_ = value;
}
inline void Dash_controls_left_rpt_20c::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.pacmod_fault)
}

// optional bool override_active = 6;
inline bool Dash_controls_left_rpt_20c::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_override_active() const {
  return _internal_has_override_active();
}
inline void Dash_controls_left_rpt_20c::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Dash_controls_left_rpt_20c::_internal_override_active() const {
  return override_active_;
}
inline bool Dash_controls_left_rpt_20c::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.override_active)
  return _internal_override_active();
}
inline void Dash_controls_left_rpt_20c::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  override_active_ = value;
}
inline void Dash_controls_left_rpt_20c::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.override_active)
}

// optional bool output_reported_fault = 7;
inline bool Dash_controls_left_rpt_20c::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Dash_controls_left_rpt_20c::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Dash_controls_left_rpt_20c::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Dash_controls_left_rpt_20c::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Dash_controls_left_rpt_20c::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  output_reported_fault_ = value;
}
inline void Dash_controls_left_rpt_20c::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.output_reported_fault)
}

// optional bool input_output_fault = 8;
inline bool Dash_controls_left_rpt_20c::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Dash_controls_left_rpt_20c::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Dash_controls_left_rpt_20c::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Dash_controls_left_rpt_20c::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.input_output_fault)
  return _internal_input_output_fault();
}
inline void Dash_controls_left_rpt_20c::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000080u;
  input_output_fault_ = value;
}
inline void Dash_controls_left_rpt_20c::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.input_output_fault)
}

// optional bool enabled = 9;
inline bool Dash_controls_left_rpt_20c::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_enabled() const {
  return _internal_has_enabled();
}
inline void Dash_controls_left_rpt_20c::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Dash_controls_left_rpt_20c::_internal_enabled() const {
  return enabled_;
}
inline bool Dash_controls_left_rpt_20c::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.enabled)
  return _internal_enabled();
}
inline void Dash_controls_left_rpt_20c::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enabled_ = value;
}
inline void Dash_controls_left_rpt_20c::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.enabled)
}

// optional bool command_output_fault = 10;
inline bool Dash_controls_left_rpt_20c::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Dash_controls_left_rpt_20c::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Dash_controls_left_rpt_20c::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Dash_controls_left_rpt_20c::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Dash_controls_left_rpt_20c::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_left_rpt_20c.command_output_fault)
  return _internal_command_output_fault();
}
inline void Dash_controls_left_rpt_20c::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000200u;
  command_output_fault_ = value;
}
inline void Dash_controls_left_rpt_20c::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_left_rpt_20c.command_output_fault)
}

// -------------------------------------------------------------------

// Headlight_aux_rpt_318

// optional bool headlights_mode_is_valid = 1;
inline bool Headlight_aux_rpt_318::_internal_has_headlights_mode_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Headlight_aux_rpt_318::has_headlights_mode_is_valid() const {
  return _internal_has_headlights_mode_is_valid();
}
inline void Headlight_aux_rpt_318::clear_headlights_mode_is_valid() {
  headlights_mode_is_valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Headlight_aux_rpt_318::_internal_headlights_mode_is_valid() const {
  return headlights_mode_is_valid_;
}
inline bool Headlight_aux_rpt_318::headlights_mode_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_aux_rpt_318.headlights_mode_is_valid)
  return _internal_headlights_mode_is_valid();
}
inline void Headlight_aux_rpt_318::_internal_set_headlights_mode_is_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  headlights_mode_is_valid_ = value;
}
inline void Headlight_aux_rpt_318::set_headlights_mode_is_valid(bool value) {
  _internal_set_headlights_mode_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_aux_rpt_318.headlights_mode_is_valid)
}

// optional .apollo.canbus.Headlight_aux_rpt_318.Headlights_modeType headlights_mode = 2;
inline bool Headlight_aux_rpt_318::_internal_has_headlights_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Headlight_aux_rpt_318::has_headlights_mode() const {
  return _internal_has_headlights_mode();
}
inline void Headlight_aux_rpt_318::clear_headlights_mode() {
  headlights_mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::_internal_headlights_mode() const {
  return static_cast< ::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType >(headlights_mode_);
}
inline ::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType Headlight_aux_rpt_318::headlights_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_aux_rpt_318.headlights_mode)
  return _internal_headlights_mode();
}
inline void Headlight_aux_rpt_318::_internal_set_headlights_mode(::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType value) {
  assert(::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  headlights_mode_ = value;
}
inline void Headlight_aux_rpt_318::set_headlights_mode(::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType value) {
  _internal_set_headlights_mode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_aux_rpt_318.headlights_mode)
}

// optional bool fog_lights_on_is_valid = 3;
inline bool Headlight_aux_rpt_318::_internal_has_fog_lights_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Headlight_aux_rpt_318::has_fog_lights_on_is_valid() const {
  return _internal_has_fog_lights_on_is_valid();
}
inline void Headlight_aux_rpt_318::clear_fog_lights_on_is_valid() {
  fog_lights_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Headlight_aux_rpt_318::_internal_fog_lights_on_is_valid() const {
  return fog_lights_on_is_valid_;
}
inline bool Headlight_aux_rpt_318::fog_lights_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_aux_rpt_318.fog_lights_on_is_valid)
  return _internal_fog_lights_on_is_valid();
}
inline void Headlight_aux_rpt_318::_internal_set_fog_lights_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  fog_lights_on_is_valid_ = value;
}
inline void Headlight_aux_rpt_318::set_fog_lights_on_is_valid(bool value) {
  _internal_set_fog_lights_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_aux_rpt_318.fog_lights_on_is_valid)
}

// optional bool fog_lights_on = 4;
inline bool Headlight_aux_rpt_318::_internal_has_fog_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Headlight_aux_rpt_318::has_fog_lights_on() const {
  return _internal_has_fog_lights_on();
}
inline void Headlight_aux_rpt_318::clear_fog_lights_on() {
  fog_lights_on_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Headlight_aux_rpt_318::_internal_fog_lights_on() const {
  return fog_lights_on_;
}
inline bool Headlight_aux_rpt_318::fog_lights_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_aux_rpt_318.fog_lights_on)
  return _internal_fog_lights_on();
}
inline void Headlight_aux_rpt_318::_internal_set_fog_lights_on(bool value) {
  _has_bits_[0] |= 0x00000008u;
  fog_lights_on_ = value;
}
inline void Headlight_aux_rpt_318::set_fog_lights_on(bool value) {
  _internal_set_fog_lights_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_aux_rpt_318.fog_lights_on)
}

// optional bool headlights_on_bright_is_valid = 5;
inline bool Headlight_aux_rpt_318::_internal_has_headlights_on_bright_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Headlight_aux_rpt_318::has_headlights_on_bright_is_valid() const {
  return _internal_has_headlights_on_bright_is_valid();
}
inline void Headlight_aux_rpt_318::clear_headlights_on_bright_is_valid() {
  headlights_on_bright_is_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Headlight_aux_rpt_318::_internal_headlights_on_bright_is_valid() const {
  return headlights_on_bright_is_valid_;
}
inline bool Headlight_aux_rpt_318::headlights_on_bright_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_aux_rpt_318.headlights_on_bright_is_valid)
  return _internal_headlights_on_bright_is_valid();
}
inline void Headlight_aux_rpt_318::_internal_set_headlights_on_bright_is_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  headlights_on_bright_is_valid_ = value;
}
inline void Headlight_aux_rpt_318::set_headlights_on_bright_is_valid(bool value) {
  _internal_set_headlights_on_bright_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_aux_rpt_318.headlights_on_bright_is_valid)
}

// optional bool headlights_on_bright = 6;
inline bool Headlight_aux_rpt_318::_internal_has_headlights_on_bright() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Headlight_aux_rpt_318::has_headlights_on_bright() const {
  return _internal_has_headlights_on_bright();
}
inline void Headlight_aux_rpt_318::clear_headlights_on_bright() {
  headlights_on_bright_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Headlight_aux_rpt_318::_internal_headlights_on_bright() const {
  return headlights_on_bright_;
}
inline bool Headlight_aux_rpt_318::headlights_on_bright() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_aux_rpt_318.headlights_on_bright)
  return _internal_headlights_on_bright();
}
inline void Headlight_aux_rpt_318::_internal_set_headlights_on_bright(bool value) {
  _has_bits_[0] |= 0x00000020u;
  headlights_on_bright_ = value;
}
inline void Headlight_aux_rpt_318::set_headlights_on_bright(bool value) {
  _internal_set_headlights_on_bright(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_aux_rpt_318.headlights_on_bright)
}

// optional bool headlights_on_is_valid = 7;
inline bool Headlight_aux_rpt_318::_internal_has_headlights_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Headlight_aux_rpt_318::has_headlights_on_is_valid() const {
  return _internal_has_headlights_on_is_valid();
}
inline void Headlight_aux_rpt_318::clear_headlights_on_is_valid() {
  headlights_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Headlight_aux_rpt_318::_internal_headlights_on_is_valid() const {
  return headlights_on_is_valid_;
}
inline bool Headlight_aux_rpt_318::headlights_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_aux_rpt_318.headlights_on_is_valid)
  return _internal_headlights_on_is_valid();
}
inline void Headlight_aux_rpt_318::_internal_set_headlights_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  headlights_on_is_valid_ = value;
}
inline void Headlight_aux_rpt_318::set_headlights_on_is_valid(bool value) {
  _internal_set_headlights_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_aux_rpt_318.headlights_on_is_valid)
}

// optional bool headlights_on = 8;
inline bool Headlight_aux_rpt_318::_internal_has_headlights_on() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Headlight_aux_rpt_318::has_headlights_on() const {
  return _internal_has_headlights_on();
}
inline void Headlight_aux_rpt_318::clear_headlights_on() {
  headlights_on_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Headlight_aux_rpt_318::_internal_headlights_on() const {
  return headlights_on_;
}
inline bool Headlight_aux_rpt_318::headlights_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_aux_rpt_318.headlights_on)
  return _internal_headlights_on();
}
inline void Headlight_aux_rpt_318::_internal_set_headlights_on(bool value) {
  _has_bits_[0] |= 0x00000080u;
  headlights_on_ = value;
}
inline void Headlight_aux_rpt_318::set_headlights_on(bool value) {
  _internal_set_headlights_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_aux_rpt_318.headlights_on)
}

// -------------------------------------------------------------------

// Dash_controls_right_cmd_110

// optional bool ignore_overrides = 1;
inline bool Dash_controls_right_cmd_110::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dash_controls_right_cmd_110::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Dash_controls_right_cmd_110::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Dash_controls_right_cmd_110::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Dash_controls_right_cmd_110::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_cmd_110.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Dash_controls_right_cmd_110::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_overrides_ = value;
}
inline void Dash_controls_right_cmd_110::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_cmd_110.ignore_overrides)
}

// optional bool enable = 2;
inline bool Dash_controls_right_cmd_110::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dash_controls_right_cmd_110::has_enable() const {
  return _internal_has_enable();
}
inline void Dash_controls_right_cmd_110::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Dash_controls_right_cmd_110::_internal_enable() const {
  return enable_;
}
inline bool Dash_controls_right_cmd_110::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_cmd_110.enable)
  return _internal_enable();
}
inline void Dash_controls_right_cmd_110::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ = value;
}
inline void Dash_controls_right_cmd_110::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_cmd_110.enable)
}

// optional bool clear_override = 3;
inline bool Dash_controls_right_cmd_110::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Dash_controls_right_cmd_110::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Dash_controls_right_cmd_110::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Dash_controls_right_cmd_110::_internal_clear_override() const {
  return clear_override_;
}
inline bool Dash_controls_right_cmd_110::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_cmd_110.clear_override)
  return _internal_clear_override();
}
inline void Dash_controls_right_cmd_110::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Dash_controls_right_cmd_110::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_cmd_110.clear_override)
}

// optional bool clear_faults = 4;
inline bool Dash_controls_right_cmd_110::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Dash_controls_right_cmd_110::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Dash_controls_right_cmd_110::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Dash_controls_right_cmd_110::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Dash_controls_right_cmd_110::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_cmd_110.clear_faults)
  return _internal_clear_faults();
}
inline void Dash_controls_right_cmd_110::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_faults_ = value;
}
inline void Dash_controls_right_cmd_110::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_cmd_110.clear_faults)
}

// optional .apollo.canbus.Dash_controls_right_cmd_110.Dash_controls_buttonType dash_controls_button = 5;
inline bool Dash_controls_right_cmd_110::_internal_has_dash_controls_button() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Dash_controls_right_cmd_110::has_dash_controls_button() const {
  return _internal_has_dash_controls_button();
}
inline void Dash_controls_right_cmd_110::clear_dash_controls_button() {
  dash_controls_button_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::_internal_dash_controls_button() const {
  return static_cast< ::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType >(dash_controls_button_);
}
inline ::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType Dash_controls_right_cmd_110::dash_controls_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Dash_controls_right_cmd_110.dash_controls_button)
  return _internal_dash_controls_button();
}
inline void Dash_controls_right_cmd_110::_internal_set_dash_controls_button(::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType value) {
  assert(::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dash_controls_button_ = value;
}
inline void Dash_controls_right_cmd_110::set_dash_controls_button(::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType value) {
  _internal_set_dash_controls_button(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Dash_controls_right_cmd_110.dash_controls_button)
}

// -------------------------------------------------------------------

// Wiper_cmd_134

// optional bool ignore_overrides = 1;
inline bool Wiper_cmd_134::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Wiper_cmd_134::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Wiper_cmd_134::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Wiper_cmd_134::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Wiper_cmd_134::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_cmd_134.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Wiper_cmd_134::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_overrides_ = value;
}
inline void Wiper_cmd_134::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_cmd_134.ignore_overrides)
}

// optional bool enable = 2;
inline bool Wiper_cmd_134::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Wiper_cmd_134::has_enable() const {
  return _internal_has_enable();
}
inline void Wiper_cmd_134::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Wiper_cmd_134::_internal_enable() const {
  return enable_;
}
inline bool Wiper_cmd_134::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_cmd_134.enable)
  return _internal_enable();
}
inline void Wiper_cmd_134::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ = value;
}
inline void Wiper_cmd_134::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_cmd_134.enable)
}

// optional bool clear_override = 3;
inline bool Wiper_cmd_134::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Wiper_cmd_134::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Wiper_cmd_134::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Wiper_cmd_134::_internal_clear_override() const {
  return clear_override_;
}
inline bool Wiper_cmd_134::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_cmd_134.clear_override)
  return _internal_clear_override();
}
inline void Wiper_cmd_134::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Wiper_cmd_134::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_cmd_134.clear_override)
}

// optional .apollo.canbus.Wiper_cmd_134.Wiper_cmdType wiper_cmd = 4;
inline bool Wiper_cmd_134::_internal_has_wiper_cmd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Wiper_cmd_134::has_wiper_cmd() const {
  return _internal_has_wiper_cmd();
}
inline void Wiper_cmd_134::clear_wiper_cmd() {
  wiper_cmd_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::_internal_wiper_cmd() const {
  return static_cast< ::apollo::canbus::Wiper_cmd_134_Wiper_cmdType >(wiper_cmd_);
}
inline ::apollo::canbus::Wiper_cmd_134_Wiper_cmdType Wiper_cmd_134::wiper_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_cmd_134.wiper_cmd)
  return _internal_wiper_cmd();
}
inline void Wiper_cmd_134::_internal_set_wiper_cmd(::apollo::canbus::Wiper_cmd_134_Wiper_cmdType value) {
  assert(::apollo::canbus::Wiper_cmd_134_Wiper_cmdType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  wiper_cmd_ = value;
}
inline void Wiper_cmd_134::set_wiper_cmd(::apollo::canbus::Wiper_cmd_134_Wiper_cmdType value) {
  _internal_set_wiper_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_cmd_134.wiper_cmd)
}

// optional bool clear_faults = 5;
inline bool Wiper_cmd_134::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Wiper_cmd_134::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Wiper_cmd_134::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Wiper_cmd_134::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Wiper_cmd_134::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_cmd_134.clear_faults)
  return _internal_clear_faults();
}
inline void Wiper_cmd_134::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_faults_ = value;
}
inline void Wiper_cmd_134::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_cmd_134.clear_faults)
}

// -------------------------------------------------------------------

// Wiper_rpt_234

// optional bool vehicle_fault = 1;
inline bool Wiper_rpt_234::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Wiper_rpt_234::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Wiper_rpt_234::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Wiper_rpt_234::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Wiper_rpt_234::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_fault_ = value;
}
inline void Wiper_rpt_234::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.vehicle_fault)
}

// optional bool pacmod_fault = 2;
inline bool Wiper_rpt_234::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Wiper_rpt_234::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Wiper_rpt_234::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Wiper_rpt_234::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Wiper_rpt_234::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pacmod_fault_ = value;
}
inline void Wiper_rpt_234::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.pacmod_fault)
}

// optional bool override_active = 3;
inline bool Wiper_rpt_234::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_override_active() const {
  return _internal_has_override_active();
}
inline void Wiper_rpt_234::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Wiper_rpt_234::_internal_override_active() const {
  return override_active_;
}
inline bool Wiper_rpt_234::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.override_active)
  return _internal_override_active();
}
inline void Wiper_rpt_234::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  override_active_ = value;
}
inline void Wiper_rpt_234::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.override_active)
}

// optional bool output_reported_fault = 4;
inline bool Wiper_rpt_234::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Wiper_rpt_234::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Wiper_rpt_234::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Wiper_rpt_234::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Wiper_rpt_234::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  output_reported_fault_ = value;
}
inline void Wiper_rpt_234::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.output_reported_fault)
}

// optional bool input_output_fault = 5;
inline bool Wiper_rpt_234::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Wiper_rpt_234::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Wiper_rpt_234::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Wiper_rpt_234::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.input_output_fault)
  return _internal_input_output_fault();
}
inline void Wiper_rpt_234::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  input_output_fault_ = value;
}
inline void Wiper_rpt_234::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.input_output_fault)
}

// optional bool enabled = 6;
inline bool Wiper_rpt_234::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_enabled() const {
  return _internal_has_enabled();
}
inline void Wiper_rpt_234::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Wiper_rpt_234::_internal_enabled() const {
  return enabled_;
}
inline bool Wiper_rpt_234::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.enabled)
  return _internal_enabled();
}
inline void Wiper_rpt_234::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enabled_ = value;
}
inline void Wiper_rpt_234::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.enabled)
}

// optional bool command_output_fault = 7;
inline bool Wiper_rpt_234::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Wiper_rpt_234::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Wiper_rpt_234::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Wiper_rpt_234::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.command_output_fault)
  return _internal_command_output_fault();
}
inline void Wiper_rpt_234::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  command_output_fault_ = value;
}
inline void Wiper_rpt_234::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.command_output_fault)
}

// optional .apollo.canbus.Wiper_rpt_234.Output_valueType output_value = 8;
inline bool Wiper_rpt_234::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_output_value() const {
  return _internal_has_output_value();
}
inline void Wiper_rpt_234::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Wiper_rpt_234_Output_valueType Wiper_rpt_234::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Wiper_rpt_234_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Wiper_rpt_234_Output_valueType Wiper_rpt_234::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.output_value)
  return _internal_output_value();
}
inline void Wiper_rpt_234::_internal_set_output_value(::apollo::canbus::Wiper_rpt_234_Output_valueType value) {
  assert(::apollo::canbus::Wiper_rpt_234_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  output_value_ = value;
}
inline void Wiper_rpt_234::set_output_value(::apollo::canbus::Wiper_rpt_234_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.output_value)
}

// optional .apollo.canbus.Wiper_rpt_234.Commanded_valueType commanded_value = 9;
inline bool Wiper_rpt_234::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Wiper_rpt_234::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Wiper_rpt_234_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Wiper_rpt_234_Commanded_valueType Wiper_rpt_234::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.commanded_value)
  return _internal_commanded_value();
}
inline void Wiper_rpt_234::_internal_set_commanded_value(::apollo::canbus::Wiper_rpt_234_Commanded_valueType value) {
  assert(::apollo::canbus::Wiper_rpt_234_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  commanded_value_ = value;
}
inline void Wiper_rpt_234::set_commanded_value(::apollo::canbus::Wiper_rpt_234_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.commanded_value)
}

// optional .apollo.canbus.Wiper_rpt_234.Manual_inputType manual_input = 10;
inline bool Wiper_rpt_234::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Wiper_rpt_234::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Wiper_rpt_234::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Wiper_rpt_234_Manual_inputType Wiper_rpt_234::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Wiper_rpt_234_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Wiper_rpt_234_Manual_inputType Wiper_rpt_234::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_rpt_234.manual_input)
  return _internal_manual_input();
}
inline void Wiper_rpt_234::_internal_set_manual_input(::apollo::canbus::Wiper_rpt_234_Manual_inputType value) {
  assert(::apollo::canbus::Wiper_rpt_234_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  manual_input_ = value;
}
inline void Wiper_rpt_234::set_manual_input(::apollo::canbus::Wiper_rpt_234_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_rpt_234.manual_input)
}

// -------------------------------------------------------------------

// Turn_rpt_230

// optional bool vehicle_fault = 1;
inline bool Turn_rpt_230::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Turn_rpt_230::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Turn_rpt_230::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Turn_rpt_230::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Turn_rpt_230::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_fault_ = value;
}
inline void Turn_rpt_230::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.vehicle_fault)
}

// optional bool pacmod_fault = 2;
inline bool Turn_rpt_230::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Turn_rpt_230::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Turn_rpt_230::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Turn_rpt_230::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Turn_rpt_230::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pacmod_fault_ = value;
}
inline void Turn_rpt_230::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.pacmod_fault)
}

// optional bool override_active = 3;
inline bool Turn_rpt_230::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_override_active() const {
  return _internal_has_override_active();
}
inline void Turn_rpt_230::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Turn_rpt_230::_internal_override_active() const {
  return override_active_;
}
inline bool Turn_rpt_230::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.override_active)
  return _internal_override_active();
}
inline void Turn_rpt_230::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  override_active_ = value;
}
inline void Turn_rpt_230::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.override_active)
}

// optional bool output_reported_fault = 4;
inline bool Turn_rpt_230::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Turn_rpt_230::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Turn_rpt_230::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Turn_rpt_230::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Turn_rpt_230::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  output_reported_fault_ = value;
}
inline void Turn_rpt_230::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.output_reported_fault)
}

// optional bool input_output_fault = 5;
inline bool Turn_rpt_230::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Turn_rpt_230::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Turn_rpt_230::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Turn_rpt_230::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.input_output_fault)
  return _internal_input_output_fault();
}
inline void Turn_rpt_230::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  input_output_fault_ = value;
}
inline void Turn_rpt_230::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.input_output_fault)
}

// optional bool enabled = 6;
inline bool Turn_rpt_230::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_enabled() const {
  return _internal_has_enabled();
}
inline void Turn_rpt_230::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Turn_rpt_230::_internal_enabled() const {
  return enabled_;
}
inline bool Turn_rpt_230::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.enabled)
  return _internal_enabled();
}
inline void Turn_rpt_230::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enabled_ = value;
}
inline void Turn_rpt_230::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.enabled)
}

// optional bool command_output_fault = 7;
inline bool Turn_rpt_230::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Turn_rpt_230::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Turn_rpt_230::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Turn_rpt_230::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.command_output_fault)
  return _internal_command_output_fault();
}
inline void Turn_rpt_230::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  command_output_fault_ = value;
}
inline void Turn_rpt_230::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.command_output_fault)
}

// optional .apollo.canbus.Turn_rpt_230.Manual_inputType manual_input = 8;
inline bool Turn_rpt_230::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Turn_rpt_230::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Turn_rpt_230_Manual_inputType Turn_rpt_230::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Turn_rpt_230_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Turn_rpt_230_Manual_inputType Turn_rpt_230::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.manual_input)
  return _internal_manual_input();
}
inline void Turn_rpt_230::_internal_set_manual_input(::apollo::canbus::Turn_rpt_230_Manual_inputType value) {
  assert(::apollo::canbus::Turn_rpt_230_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  manual_input_ = value;
}
inline void Turn_rpt_230::set_manual_input(::apollo::canbus::Turn_rpt_230_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.manual_input)
}

// optional .apollo.canbus.Turn_rpt_230.Commanded_valueType commanded_value = 9;
inline bool Turn_rpt_230::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Turn_rpt_230::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Turn_rpt_230_Commanded_valueType Turn_rpt_230::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Turn_rpt_230_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Turn_rpt_230_Commanded_valueType Turn_rpt_230::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.commanded_value)
  return _internal_commanded_value();
}
inline void Turn_rpt_230::_internal_set_commanded_value(::apollo::canbus::Turn_rpt_230_Commanded_valueType value) {
  assert(::apollo::canbus::Turn_rpt_230_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  commanded_value_ = value;
}
inline void Turn_rpt_230::set_commanded_value(::apollo::canbus::Turn_rpt_230_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.commanded_value)
}

// optional .apollo.canbus.Turn_rpt_230.Output_valueType output_value = 10;
inline bool Turn_rpt_230::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Turn_rpt_230::has_output_value() const {
  return _internal_has_output_value();
}
inline void Turn_rpt_230::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Turn_rpt_230_Output_valueType Turn_rpt_230::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Turn_rpt_230_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Turn_rpt_230_Output_valueType Turn_rpt_230::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_rpt_230.output_value)
  return _internal_output_value();
}
inline void Turn_rpt_230::_internal_set_output_value(::apollo::canbus::Turn_rpt_230_Output_valueType value) {
  assert(::apollo::canbus::Turn_rpt_230_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  output_value_ = value;
}
inline void Turn_rpt_230::set_output_value(::apollo::canbus::Turn_rpt_230_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_rpt_230.output_value)
}

// -------------------------------------------------------------------

// Headlight_cmd_118

// optional bool ignore_overrides = 1;
inline bool Headlight_cmd_118::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Headlight_cmd_118::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Headlight_cmd_118::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Headlight_cmd_118::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Headlight_cmd_118::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_cmd_118.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Headlight_cmd_118::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_overrides_ = value;
}
inline void Headlight_cmd_118::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_cmd_118.ignore_overrides)
}

// optional bool enable = 2;
inline bool Headlight_cmd_118::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Headlight_cmd_118::has_enable() const {
  return _internal_has_enable();
}
inline void Headlight_cmd_118::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Headlight_cmd_118::_internal_enable() const {
  return enable_;
}
inline bool Headlight_cmd_118::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_cmd_118.enable)
  return _internal_enable();
}
inline void Headlight_cmd_118::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ = value;
}
inline void Headlight_cmd_118::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_cmd_118.enable)
}

// optional bool clear_override = 3;
inline bool Headlight_cmd_118::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Headlight_cmd_118::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Headlight_cmd_118::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Headlight_cmd_118::_internal_clear_override() const {
  return clear_override_;
}
inline bool Headlight_cmd_118::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_cmd_118.clear_override)
  return _internal_clear_override();
}
inline void Headlight_cmd_118::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Headlight_cmd_118::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_cmd_118.clear_override)
}

// optional bool clear_faults = 4;
inline bool Headlight_cmd_118::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Headlight_cmd_118::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Headlight_cmd_118::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Headlight_cmd_118::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Headlight_cmd_118::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_cmd_118.clear_faults)
  return _internal_clear_faults();
}
inline void Headlight_cmd_118::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_faults_ = value;
}
inline void Headlight_cmd_118::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_cmd_118.clear_faults)
}

// optional .apollo.canbus.Headlight_cmd_118.Headlight_cmdType headlight_cmd = 5;
inline bool Headlight_cmd_118::_internal_has_headlight_cmd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Headlight_cmd_118::has_headlight_cmd() const {
  return _internal_has_headlight_cmd();
}
inline void Headlight_cmd_118::clear_headlight_cmd() {
  headlight_cmd_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::_internal_headlight_cmd() const {
  return static_cast< ::apollo::canbus::Headlight_cmd_118_Headlight_cmdType >(headlight_cmd_);
}
inline ::apollo::canbus::Headlight_cmd_118_Headlight_cmdType Headlight_cmd_118::headlight_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Headlight_cmd_118.headlight_cmd)
  return _internal_headlight_cmd();
}
inline void Headlight_cmd_118::_internal_set_headlight_cmd(::apollo::canbus::Headlight_cmd_118_Headlight_cmdType value) {
  assert(::apollo::canbus::Headlight_cmd_118_Headlight_cmdType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  headlight_cmd_ = value;
}
inline void Headlight_cmd_118::set_headlight_cmd(::apollo::canbus::Headlight_cmd_118_Headlight_cmdType value) {
  _internal_set_headlight_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Headlight_cmd_118.headlight_cmd)
}

// -------------------------------------------------------------------

// Door_rpt_417

// optional bool fuel_door_open_is_valid = 1;
inline bool Door_rpt_417::_internal_has_fuel_door_open_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Door_rpt_417::has_fuel_door_open_is_valid() const {
  return _internal_has_fuel_door_open_is_valid();
}
inline void Door_rpt_417::clear_fuel_door_open_is_valid() {
  fuel_door_open_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Door_rpt_417::_internal_fuel_door_open_is_valid() const {
  return fuel_door_open_is_valid_;
}
inline bool Door_rpt_417::fuel_door_open_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.fuel_door_open_is_valid)
  return _internal_fuel_door_open_is_valid();
}
inline void Door_rpt_417::_internal_set_fuel_door_open_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  fuel_door_open_is_valid_ = value;
}
inline void Door_rpt_417::set_fuel_door_open_is_valid(bool value) {
  _internal_set_fuel_door_open_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.fuel_door_open_is_valid)
}

// optional bool trunk_open_is_valid = 2;
inline bool Door_rpt_417::_internal_has_trunk_open_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Door_rpt_417::has_trunk_open_is_valid() const {
  return _internal_has_trunk_open_is_valid();
}
inline void Door_rpt_417::clear_trunk_open_is_valid() {
  trunk_open_is_valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Door_rpt_417::_internal_trunk_open_is_valid() const {
  return trunk_open_is_valid_;
}
inline bool Door_rpt_417::trunk_open_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.trunk_open_is_valid)
  return _internal_trunk_open_is_valid();
}
inline void Door_rpt_417::_internal_set_trunk_open_is_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  trunk_open_is_valid_ = value;
}
inline void Door_rpt_417::set_trunk_open_is_valid(bool value) {
  _internal_set_trunk_open_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.trunk_open_is_valid)
}

// optional bool hood_open_is_valid = 3;
inline bool Door_rpt_417::_internal_has_hood_open_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Door_rpt_417::has_hood_open_is_valid() const {
  return _internal_has_hood_open_is_valid();
}
inline void Door_rpt_417::clear_hood_open_is_valid() {
  hood_open_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Door_rpt_417::_internal_hood_open_is_valid() const {
  return hood_open_is_valid_;
}
inline bool Door_rpt_417::hood_open_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.hood_open_is_valid)
  return _internal_hood_open_is_valid();
}
inline void Door_rpt_417::_internal_set_hood_open_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  hood_open_is_valid_ = value;
}
inline void Door_rpt_417::set_hood_open_is_valid(bool value) {
  _internal_set_hood_open_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.hood_open_is_valid)
}

// optional bool rear_pass_door_open_is_valid = 4;
inline bool Door_rpt_417::_internal_has_rear_pass_door_open_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Door_rpt_417::has_rear_pass_door_open_is_valid() const {
  return _internal_has_rear_pass_door_open_is_valid();
}
inline void Door_rpt_417::clear_rear_pass_door_open_is_valid() {
  rear_pass_door_open_is_valid_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Door_rpt_417::_internal_rear_pass_door_open_is_valid() const {
  return rear_pass_door_open_is_valid_;
}
inline bool Door_rpt_417::rear_pass_door_open_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.rear_pass_door_open_is_valid)
  return _internal_rear_pass_door_open_is_valid();
}
inline void Door_rpt_417::_internal_set_rear_pass_door_open_is_valid(bool value) {
  _has_bits_[0] |= 0x00000008u;
  rear_pass_door_open_is_valid_ = value;
}
inline void Door_rpt_417::set_rear_pass_door_open_is_valid(bool value) {
  _internal_set_rear_pass_door_open_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.rear_pass_door_open_is_valid)
}

// optional bool rear_driver_door_open_is_valid = 5;
inline bool Door_rpt_417::_internal_has_rear_driver_door_open_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Door_rpt_417::has_rear_driver_door_open_is_valid() const {
  return _internal_has_rear_driver_door_open_is_valid();
}
inline void Door_rpt_417::clear_rear_driver_door_open_is_valid() {
  rear_driver_door_open_is_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Door_rpt_417::_internal_rear_driver_door_open_is_valid() const {
  return rear_driver_door_open_is_valid_;
}
inline bool Door_rpt_417::rear_driver_door_open_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.rear_driver_door_open_is_valid)
  return _internal_rear_driver_door_open_is_valid();
}
inline void Door_rpt_417::_internal_set_rear_driver_door_open_is_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  rear_driver_door_open_is_valid_ = value;
}
inline void Door_rpt_417::set_rear_driver_door_open_is_valid(bool value) {
  _internal_set_rear_driver_door_open_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.rear_driver_door_open_is_valid)
}

// optional bool pass_door_open_is_valid = 6;
inline bool Door_rpt_417::_internal_has_pass_door_open_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Door_rpt_417::has_pass_door_open_is_valid() const {
  return _internal_has_pass_door_open_is_valid();
}
inline void Door_rpt_417::clear_pass_door_open_is_valid() {
  pass_door_open_is_valid_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Door_rpt_417::_internal_pass_door_open_is_valid() const {
  return pass_door_open_is_valid_;
}
inline bool Door_rpt_417::pass_door_open_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.pass_door_open_is_valid)
  return _internal_pass_door_open_is_valid();
}
inline void Door_rpt_417::_internal_set_pass_door_open_is_valid(bool value) {
  _has_bits_[0] |= 0x00000020u;
  pass_door_open_is_valid_ = value;
}
inline void Door_rpt_417::set_pass_door_open_is_valid(bool value) {
  _internal_set_pass_door_open_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.pass_door_open_is_valid)
}

// optional bool driver_door_open_is_valid = 7;
inline bool Door_rpt_417::_internal_has_driver_door_open_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Door_rpt_417::has_driver_door_open_is_valid() const {
  return _internal_has_driver_door_open_is_valid();
}
inline void Door_rpt_417::clear_driver_door_open_is_valid() {
  driver_door_open_is_valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Door_rpt_417::_internal_driver_door_open_is_valid() const {
  return driver_door_open_is_valid_;
}
inline bool Door_rpt_417::driver_door_open_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.driver_door_open_is_valid)
  return _internal_driver_door_open_is_valid();
}
inline void Door_rpt_417::_internal_set_driver_door_open_is_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  driver_door_open_is_valid_ = value;
}
inline void Door_rpt_417::set_driver_door_open_is_valid(bool value) {
  _internal_set_driver_door_open_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.driver_door_open_is_valid)
}

// optional bool fuel_door_open = 8;
inline bool Door_rpt_417::_internal_has_fuel_door_open() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Door_rpt_417::has_fuel_door_open() const {
  return _internal_has_fuel_door_open();
}
inline void Door_rpt_417::clear_fuel_door_open() {
  fuel_door_open_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Door_rpt_417::_internal_fuel_door_open() const {
  return fuel_door_open_;
}
inline bool Door_rpt_417::fuel_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.fuel_door_open)
  return _internal_fuel_door_open();
}
inline void Door_rpt_417::_internal_set_fuel_door_open(bool value) {
  _has_bits_[0] |= 0x00000080u;
  fuel_door_open_ = value;
}
inline void Door_rpt_417::set_fuel_door_open(bool value) {
  _internal_set_fuel_door_open(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.fuel_door_open)
}

// optional bool trunk_open = 9;
inline bool Door_rpt_417::_internal_has_trunk_open() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Door_rpt_417::has_trunk_open() const {
  return _internal_has_trunk_open();
}
inline void Door_rpt_417::clear_trunk_open() {
  trunk_open_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Door_rpt_417::_internal_trunk_open() const {
  return trunk_open_;
}
inline bool Door_rpt_417::trunk_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.trunk_open)
  return _internal_trunk_open();
}
inline void Door_rpt_417::_internal_set_trunk_open(bool value) {
  _has_bits_[0] |= 0x00000100u;
  trunk_open_ = value;
}
inline void Door_rpt_417::set_trunk_open(bool value) {
  _internal_set_trunk_open(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.trunk_open)
}

// optional bool hood_open = 10;
inline bool Door_rpt_417::_internal_has_hood_open() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Door_rpt_417::has_hood_open() const {
  return _internal_has_hood_open();
}
inline void Door_rpt_417::clear_hood_open() {
  hood_open_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Door_rpt_417::_internal_hood_open() const {
  return hood_open_;
}
inline bool Door_rpt_417::hood_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.hood_open)
  return _internal_hood_open();
}
inline void Door_rpt_417::_internal_set_hood_open(bool value) {
  _has_bits_[0] |= 0x00000200u;
  hood_open_ = value;
}
inline void Door_rpt_417::set_hood_open(bool value) {
  _internal_set_hood_open(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.hood_open)
}

// optional bool rear_pass_door_open = 11;
inline bool Door_rpt_417::_internal_has_rear_pass_door_open() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Door_rpt_417::has_rear_pass_door_open() const {
  return _internal_has_rear_pass_door_open();
}
inline void Door_rpt_417::clear_rear_pass_door_open() {
  rear_pass_door_open_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Door_rpt_417::_internal_rear_pass_door_open() const {
  return rear_pass_door_open_;
}
inline bool Door_rpt_417::rear_pass_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.rear_pass_door_open)
  return _internal_rear_pass_door_open();
}
inline void Door_rpt_417::_internal_set_rear_pass_door_open(bool value) {
  _has_bits_[0] |= 0x00000400u;
  rear_pass_door_open_ = value;
}
inline void Door_rpt_417::set_rear_pass_door_open(bool value) {
  _internal_set_rear_pass_door_open(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.rear_pass_door_open)
}

// optional bool rear_driver_door_open = 12;
inline bool Door_rpt_417::_internal_has_rear_driver_door_open() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Door_rpt_417::has_rear_driver_door_open() const {
  return _internal_has_rear_driver_door_open();
}
inline void Door_rpt_417::clear_rear_driver_door_open() {
  rear_driver_door_open_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Door_rpt_417::_internal_rear_driver_door_open() const {
  return rear_driver_door_open_;
}
inline bool Door_rpt_417::rear_driver_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.rear_driver_door_open)
  return _internal_rear_driver_door_open();
}
inline void Door_rpt_417::_internal_set_rear_driver_door_open(bool value) {
  _has_bits_[0] |= 0x00000800u;
  rear_driver_door_open_ = value;
}
inline void Door_rpt_417::set_rear_driver_door_open(bool value) {
  _internal_set_rear_driver_door_open(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.rear_driver_door_open)
}

// optional bool pass_door_open = 13;
inline bool Door_rpt_417::_internal_has_pass_door_open() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Door_rpt_417::has_pass_door_open() const {
  return _internal_has_pass_door_open();
}
inline void Door_rpt_417::clear_pass_door_open() {
  pass_door_open_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Door_rpt_417::_internal_pass_door_open() const {
  return pass_door_open_;
}
inline bool Door_rpt_417::pass_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.pass_door_open)
  return _internal_pass_door_open();
}
inline void Door_rpt_417::_internal_set_pass_door_open(bool value) {
  _has_bits_[0] |= 0x00001000u;
  pass_door_open_ = value;
}
inline void Door_rpt_417::set_pass_door_open(bool value) {
  _internal_set_pass_door_open(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.pass_door_open)
}

// optional bool driver_door_open = 14;
inline bool Door_rpt_417::_internal_has_driver_door_open() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Door_rpt_417::has_driver_door_open() const {
  return _internal_has_driver_door_open();
}
inline void Door_rpt_417::clear_driver_door_open() {
  driver_door_open_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Door_rpt_417::_internal_driver_door_open() const {
  return driver_door_open_;
}
inline bool Door_rpt_417::driver_door_open() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Door_rpt_417.driver_door_open)
  return _internal_driver_door_open();
}
inline void Door_rpt_417::_internal_set_driver_door_open(bool value) {
  _has_bits_[0] |= 0x00002000u;
  driver_door_open_ = value;
}
inline void Door_rpt_417::set_driver_door_open(bool value) {
  _internal_set_driver_door_open(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Door_rpt_417.driver_door_open)
}

// -------------------------------------------------------------------

// Component_rpt_20

// optional .apollo.canbus.Component_rpt_20.Component_typeType component_type = 1;
inline bool Component_rpt_20::_internal_has_component_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Component_rpt_20::has_component_type() const {
  return _internal_has_component_type();
}
inline void Component_rpt_20::clear_component_type() {
  component_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Component_rpt_20_Component_typeType Component_rpt_20::_internal_component_type() const {
  return static_cast< ::apollo::canbus::Component_rpt_20_Component_typeType >(component_type_);
}
inline ::apollo::canbus::Component_rpt_20_Component_typeType Component_rpt_20::component_type() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Component_rpt_20.component_type)
  return _internal_component_type();
}
inline void Component_rpt_20::_internal_set_component_type(::apollo::canbus::Component_rpt_20_Component_typeType value) {
  assert(::apollo::canbus::Component_rpt_20_Component_typeType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  component_type_ = value;
}
inline void Component_rpt_20::set_component_type(::apollo::canbus::Component_rpt_20_Component_typeType value) {
  _internal_set_component_type(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Component_rpt_20.component_type)
}

// optional .apollo.canbus.Component_rpt_20.Component_funcType component_func = 2;
inline bool Component_rpt_20::_internal_has_component_func() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Component_rpt_20::has_component_func() const {
  return _internal_has_component_func();
}
inline void Component_rpt_20::clear_component_func() {
  component_func_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Component_rpt_20_Component_funcType Component_rpt_20::_internal_component_func() const {
  return static_cast< ::apollo::canbus::Component_rpt_20_Component_funcType >(component_func_);
}
inline ::apollo::canbus::Component_rpt_20_Component_funcType Component_rpt_20::component_func() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Component_rpt_20.component_func)
  return _internal_component_func();
}
inline void Component_rpt_20::_internal_set_component_func(::apollo::canbus::Component_rpt_20_Component_funcType value) {
  assert(::apollo::canbus::Component_rpt_20_Component_funcType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  component_func_ = value;
}
inline void Component_rpt_20::set_component_func(::apollo::canbus::Component_rpt_20_Component_funcType value) {
  _internal_set_component_func(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Component_rpt_20.component_func)
}

// optional int32 counter = 3;
inline bool Component_rpt_20::_internal_has_counter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Component_rpt_20::has_counter() const {
  return _internal_has_counter();
}
inline void Component_rpt_20::clear_counter() {
  counter_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Component_rpt_20::_internal_counter() const {
  return counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Component_rpt_20::counter() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Component_rpt_20.counter)
  return _internal_counter();
}
inline void Component_rpt_20::_internal_set_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  counter_ = value;
}
inline void Component_rpt_20::set_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Component_rpt_20.counter)
}

// optional int32 complement = 4;
inline bool Component_rpt_20::_internal_has_complement() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Component_rpt_20::has_complement() const {
  return _internal_has_complement();
}
inline void Component_rpt_20::clear_complement() {
  complement_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Component_rpt_20::_internal_complement() const {
  return complement_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Component_rpt_20::complement() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Component_rpt_20.complement)
  return _internal_complement();
}
inline void Component_rpt_20::_internal_set_complement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  complement_ = value;
}
inline void Component_rpt_20::set_complement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_complement(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Component_rpt_20.complement)
}

// optional bool config_fault = 5;
inline bool Component_rpt_20::_internal_has_config_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Component_rpt_20::has_config_fault() const {
  return _internal_has_config_fault();
}
inline void Component_rpt_20::clear_config_fault() {
  config_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Component_rpt_20::_internal_config_fault() const {
  return config_fault_;
}
inline bool Component_rpt_20::config_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Component_rpt_20.config_fault)
  return _internal_config_fault();
}
inline void Component_rpt_20::_internal_set_config_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  config_fault_ = value;
}
inline void Component_rpt_20::set_config_fault(bool value) {
  _internal_set_config_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Component_rpt_20.config_fault)
}

// -------------------------------------------------------------------

// Wheel_speed_rpt_407

// optional double wheel_spd_rear_right = 1;
inline bool Wheel_speed_rpt_407::_internal_has_wheel_spd_rear_right() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Wheel_speed_rpt_407::has_wheel_spd_rear_right() const {
  return _internal_has_wheel_spd_rear_right();
}
inline void Wheel_speed_rpt_407::clear_wheel_spd_rear_right() {
  wheel_spd_rear_right_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Wheel_speed_rpt_407::_internal_wheel_spd_rear_right() const {
  return wheel_spd_rear_right_;
}
inline double Wheel_speed_rpt_407::wheel_spd_rear_right() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wheel_speed_rpt_407.wheel_spd_rear_right)
  return _internal_wheel_spd_rear_right();
}
inline void Wheel_speed_rpt_407::_internal_set_wheel_spd_rear_right(double value) {
  _has_bits_[0] |= 0x00000001u;
  wheel_spd_rear_right_ = value;
}
inline void Wheel_speed_rpt_407::set_wheel_spd_rear_right(double value) {
  _internal_set_wheel_spd_rear_right(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wheel_speed_rpt_407.wheel_spd_rear_right)
}

// optional double wheel_spd_rear_left = 2;
inline bool Wheel_speed_rpt_407::_internal_has_wheel_spd_rear_left() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Wheel_speed_rpt_407::has_wheel_spd_rear_left() const {
  return _internal_has_wheel_spd_rear_left();
}
inline void Wheel_speed_rpt_407::clear_wheel_spd_rear_left() {
  wheel_spd_rear_left_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Wheel_speed_rpt_407::_internal_wheel_spd_rear_left() const {
  return wheel_spd_rear_left_;
}
inline double Wheel_speed_rpt_407::wheel_spd_rear_left() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wheel_speed_rpt_407.wheel_spd_rear_left)
  return _internal_wheel_spd_rear_left();
}
inline void Wheel_speed_rpt_407::_internal_set_wheel_spd_rear_left(double value) {
  _has_bits_[0] |= 0x00000002u;
  wheel_spd_rear_left_ = value;
}
inline void Wheel_speed_rpt_407::set_wheel_spd_rear_left(double value) {
  _internal_set_wheel_spd_rear_left(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wheel_speed_rpt_407.wheel_spd_rear_left)
}

// optional double wheel_spd_front_right = 3;
inline bool Wheel_speed_rpt_407::_internal_has_wheel_spd_front_right() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Wheel_speed_rpt_407::has_wheel_spd_front_right() const {
  return _internal_has_wheel_spd_front_right();
}
inline void Wheel_speed_rpt_407::clear_wheel_spd_front_right() {
  wheel_spd_front_right_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Wheel_speed_rpt_407::_internal_wheel_spd_front_right() const {
  return wheel_spd_front_right_;
}
inline double Wheel_speed_rpt_407::wheel_spd_front_right() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wheel_speed_rpt_407.wheel_spd_front_right)
  return _internal_wheel_spd_front_right();
}
inline void Wheel_speed_rpt_407::_internal_set_wheel_spd_front_right(double value) {
  _has_bits_[0] |= 0x00000004u;
  wheel_spd_front_right_ = value;
}
inline void Wheel_speed_rpt_407::set_wheel_spd_front_right(double value) {
  _internal_set_wheel_spd_front_right(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wheel_speed_rpt_407.wheel_spd_front_right)
}

// optional double wheel_spd_front_left = 4;
inline bool Wheel_speed_rpt_407::_internal_has_wheel_spd_front_left() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Wheel_speed_rpt_407::has_wheel_spd_front_left() const {
  return _internal_has_wheel_spd_front_left();
}
inline void Wheel_speed_rpt_407::clear_wheel_spd_front_left() {
  wheel_spd_front_left_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Wheel_speed_rpt_407::_internal_wheel_spd_front_left() const {
  return wheel_spd_front_left_;
}
inline double Wheel_speed_rpt_407::wheel_spd_front_left() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wheel_speed_rpt_407.wheel_spd_front_left)
  return _internal_wheel_spd_front_left();
}
inline void Wheel_speed_rpt_407::_internal_set_wheel_spd_front_left(double value) {
  _has_bits_[0] |= 0x00000008u;
  wheel_spd_front_left_ = value;
}
inline void Wheel_speed_rpt_407::set_wheel_spd_front_left(double value) {
  _internal_set_wheel_spd_front_left(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wheel_speed_rpt_407.wheel_spd_front_left)
}

// -------------------------------------------------------------------

// Steering_motor_rpt_3_406

// optional double torque_output = 1;
inline bool Steering_motor_rpt_3_406::_internal_has_torque_output() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steering_motor_rpt_3_406::has_torque_output() const {
  return _internal_has_torque_output();
}
inline void Steering_motor_rpt_3_406::clear_torque_output() {
  torque_output_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Steering_motor_rpt_3_406::_internal_torque_output() const {
  return torque_output_;
}
inline double Steering_motor_rpt_3_406::torque_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_motor_rpt_3_406.torque_output)
  return _internal_torque_output();
}
inline void Steering_motor_rpt_3_406::_internal_set_torque_output(double value) {
  _has_bits_[0] |= 0x00000001u;
  torque_output_ = value;
}
inline void Steering_motor_rpt_3_406::set_torque_output(double value) {
  _internal_set_torque_output(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_motor_rpt_3_406.torque_output)
}

// optional double torque_input = 2;
inline bool Steering_motor_rpt_3_406::_internal_has_torque_input() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steering_motor_rpt_3_406::has_torque_input() const {
  return _internal_has_torque_input();
}
inline void Steering_motor_rpt_3_406::clear_torque_input() {
  torque_input_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Steering_motor_rpt_3_406::_internal_torque_input() const {
  return torque_input_;
}
inline double Steering_motor_rpt_3_406::torque_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_motor_rpt_3_406.torque_input)
  return _internal_torque_input();
}
inline void Steering_motor_rpt_3_406::_internal_set_torque_input(double value) {
  _has_bits_[0] |= 0x00000002u;
  torque_input_ = value;
}
inline void Steering_motor_rpt_3_406::set_torque_input(double value) {
  _internal_set_torque_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_motor_rpt_3_406.torque_input)
}

// -------------------------------------------------------------------

// Steering_motor_rpt_2_405

// optional int32 encoder_temperature = 1;
inline bool Steering_motor_rpt_2_405::_internal_has_encoder_temperature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steering_motor_rpt_2_405::has_encoder_temperature() const {
  return _internal_has_encoder_temperature();
}
inline void Steering_motor_rpt_2_405::clear_encoder_temperature() {
  encoder_temperature_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Steering_motor_rpt_2_405::_internal_encoder_temperature() const {
  return encoder_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Steering_motor_rpt_2_405::encoder_temperature() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_motor_rpt_2_405.encoder_temperature)
  return _internal_encoder_temperature();
}
inline void Steering_motor_rpt_2_405::_internal_set_encoder_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  encoder_temperature_ = value;
}
inline void Steering_motor_rpt_2_405::set_encoder_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_encoder_temperature(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_motor_rpt_2_405.encoder_temperature)
}

// optional int32 motor_temperature = 2;
inline bool Steering_motor_rpt_2_405::_internal_has_motor_temperature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steering_motor_rpt_2_405::has_motor_temperature() const {
  return _internal_has_motor_temperature();
}
inline void Steering_motor_rpt_2_405::clear_motor_temperature() {
  motor_temperature_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Steering_motor_rpt_2_405::_internal_motor_temperature() const {
  return motor_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Steering_motor_rpt_2_405::motor_temperature() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_motor_rpt_2_405.motor_temperature)
  return _internal_motor_temperature();
}
inline void Steering_motor_rpt_2_405::_internal_set_motor_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  motor_temperature_ = value;
}
inline void Steering_motor_rpt_2_405::set_motor_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_motor_temperature(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_motor_rpt_2_405.motor_temperature)
}

// optional double angular_speed = 3;
inline bool Steering_motor_rpt_2_405::_internal_has_angular_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Steering_motor_rpt_2_405::has_angular_speed() const {
  return _internal_has_angular_speed();
}
inline void Steering_motor_rpt_2_405::clear_angular_speed() {
  angular_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Steering_motor_rpt_2_405::_internal_angular_speed() const {
  return angular_speed_;
}
inline double Steering_motor_rpt_2_405::angular_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_motor_rpt_2_405.angular_speed)
  return _internal_angular_speed();
}
inline void Steering_motor_rpt_2_405::_internal_set_angular_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  angular_speed_ = value;
}
inline void Steering_motor_rpt_2_405::set_angular_speed(double value) {
  _internal_set_angular_speed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_motor_rpt_2_405.angular_speed)
}

// -------------------------------------------------------------------

// Steering_motor_rpt_1_404

// optional double motor_current = 1;
inline bool Steering_motor_rpt_1_404::_internal_has_motor_current() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steering_motor_rpt_1_404::has_motor_current() const {
  return _internal_has_motor_current();
}
inline void Steering_motor_rpt_1_404::clear_motor_current() {
  motor_current_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Steering_motor_rpt_1_404::_internal_motor_current() const {
  return motor_current_;
}
inline double Steering_motor_rpt_1_404::motor_current() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_motor_rpt_1_404.motor_current)
  return _internal_motor_current();
}
inline void Steering_motor_rpt_1_404::_internal_set_motor_current(double value) {
  _has_bits_[0] |= 0x00000001u;
  motor_current_ = value;
}
inline void Steering_motor_rpt_1_404::set_motor_current(double value) {
  _internal_set_motor_current(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_motor_rpt_1_404.motor_current)
}

// optional double shaft_position = 2;
inline bool Steering_motor_rpt_1_404::_internal_has_shaft_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steering_motor_rpt_1_404::has_shaft_position() const {
  return _internal_has_shaft_position();
}
inline void Steering_motor_rpt_1_404::clear_shaft_position() {
  shaft_position_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Steering_motor_rpt_1_404::_internal_shaft_position() const {
  return shaft_position_;
}
inline double Steering_motor_rpt_1_404::shaft_position() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_motor_rpt_1_404.shaft_position)
  return _internal_shaft_position();
}
inline void Steering_motor_rpt_1_404::_internal_set_shaft_position(double value) {
  _has_bits_[0] |= 0x00000002u;
  shaft_position_ = value;
}
inline void Steering_motor_rpt_1_404::set_shaft_position(double value) {
  _internal_set_shaft_position(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_motor_rpt_1_404.shaft_position)
}

// -------------------------------------------------------------------

// Brake_motor_rpt_3_403

// optional double torque_output = 1;
inline bool Brake_motor_rpt_3_403::_internal_has_torque_output() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_motor_rpt_3_403::has_torque_output() const {
  return _internal_has_torque_output();
}
inline void Brake_motor_rpt_3_403::clear_torque_output() {
  torque_output_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Brake_motor_rpt_3_403::_internal_torque_output() const {
  return torque_output_;
}
inline double Brake_motor_rpt_3_403::torque_output() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_motor_rpt_3_403.torque_output)
  return _internal_torque_output();
}
inline void Brake_motor_rpt_3_403::_internal_set_torque_output(double value) {
  _has_bits_[0] |= 0x00000001u;
  torque_output_ = value;
}
inline void Brake_motor_rpt_3_403::set_torque_output(double value) {
  _internal_set_torque_output(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_motor_rpt_3_403.torque_output)
}

// optional double torque_input = 2;
inline bool Brake_motor_rpt_3_403::_internal_has_torque_input() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_motor_rpt_3_403::has_torque_input() const {
  return _internal_has_torque_input();
}
inline void Brake_motor_rpt_3_403::clear_torque_input() {
  torque_input_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Brake_motor_rpt_3_403::_internal_torque_input() const {
  return torque_input_;
}
inline double Brake_motor_rpt_3_403::torque_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_motor_rpt_3_403.torque_input)
  return _internal_torque_input();
}
inline void Brake_motor_rpt_3_403::_internal_set_torque_input(double value) {
  _has_bits_[0] |= 0x00000002u;
  torque_input_ = value;
}
inline void Brake_motor_rpt_3_403::set_torque_input(double value) {
  _internal_set_torque_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_motor_rpt_3_403.torque_input)
}

// -------------------------------------------------------------------

// Brake_motor_rpt_2_402

// optional int32 encoder_temperature = 1;
inline bool Brake_motor_rpt_2_402::_internal_has_encoder_temperature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_motor_rpt_2_402::has_encoder_temperature() const {
  return _internal_has_encoder_temperature();
}
inline void Brake_motor_rpt_2_402::clear_encoder_temperature() {
  encoder_temperature_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brake_motor_rpt_2_402::_internal_encoder_temperature() const {
  return encoder_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brake_motor_rpt_2_402::encoder_temperature() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_motor_rpt_2_402.encoder_temperature)
  return _internal_encoder_temperature();
}
inline void Brake_motor_rpt_2_402::_internal_set_encoder_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  encoder_temperature_ = value;
}
inline void Brake_motor_rpt_2_402::set_encoder_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_encoder_temperature(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_motor_rpt_2_402.encoder_temperature)
}

// optional int32 motor_temperature = 2;
inline bool Brake_motor_rpt_2_402::_internal_has_motor_temperature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_motor_rpt_2_402::has_motor_temperature() const {
  return _internal_has_motor_temperature();
}
inline void Brake_motor_rpt_2_402::clear_motor_temperature() {
  motor_temperature_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brake_motor_rpt_2_402::_internal_motor_temperature() const {
  return motor_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brake_motor_rpt_2_402::motor_temperature() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_motor_rpt_2_402.motor_temperature)
  return _internal_motor_temperature();
}
inline void Brake_motor_rpt_2_402::_internal_set_motor_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  motor_temperature_ = value;
}
inline void Brake_motor_rpt_2_402::set_motor_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_motor_temperature(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_motor_rpt_2_402.motor_temperature)
}

// optional double angular_speed = 3;
inline bool Brake_motor_rpt_2_402::_internal_has_angular_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brake_motor_rpt_2_402::has_angular_speed() const {
  return _internal_has_angular_speed();
}
inline void Brake_motor_rpt_2_402::clear_angular_speed() {
  angular_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Brake_motor_rpt_2_402::_internal_angular_speed() const {
  return angular_speed_;
}
inline double Brake_motor_rpt_2_402::angular_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_motor_rpt_2_402.angular_speed)
  return _internal_angular_speed();
}
inline void Brake_motor_rpt_2_402::_internal_set_angular_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  angular_speed_ = value;
}
inline void Brake_motor_rpt_2_402::set_angular_speed(double value) {
  _internal_set_angular_speed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_motor_rpt_2_402.angular_speed)
}

// -------------------------------------------------------------------

// Brake_motor_rpt_1_401

// optional double motor_current = 1;
inline bool Brake_motor_rpt_1_401::_internal_has_motor_current() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_motor_rpt_1_401::has_motor_current() const {
  return _internal_has_motor_current();
}
inline void Brake_motor_rpt_1_401::clear_motor_current() {
  motor_current_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Brake_motor_rpt_1_401::_internal_motor_current() const {
  return motor_current_;
}
inline double Brake_motor_rpt_1_401::motor_current() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_motor_rpt_1_401.motor_current)
  return _internal_motor_current();
}
inline void Brake_motor_rpt_1_401::_internal_set_motor_current(double value) {
  _has_bits_[0] |= 0x00000001u;
  motor_current_ = value;
}
inline void Brake_motor_rpt_1_401::set_motor_current(double value) {
  _internal_set_motor_current(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_motor_rpt_1_401.motor_current)
}

// optional double shaft_position = 2;
inline bool Brake_motor_rpt_1_401::_internal_has_shaft_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_motor_rpt_1_401::has_shaft_position() const {
  return _internal_has_shaft_position();
}
inline void Brake_motor_rpt_1_401::clear_shaft_position() {
  shaft_position_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Brake_motor_rpt_1_401::_internal_shaft_position() const {
  return shaft_position_;
}
inline double Brake_motor_rpt_1_401::shaft_position() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_motor_rpt_1_401.shaft_position)
  return _internal_shaft_position();
}
inline void Brake_motor_rpt_1_401::_internal_set_shaft_position(double value) {
  _has_bits_[0] |= 0x00000002u;
  shaft_position_ = value;
}
inline void Brake_motor_rpt_1_401::set_shaft_position(double value) {
  _internal_set_shaft_position(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_motor_rpt_1_401.shaft_position)
}

// -------------------------------------------------------------------

// Wiper_aux_rpt_334

// optional bool spray_empty_is_valid = 1;
inline bool Wiper_aux_rpt_334::_internal_has_spray_empty_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_spray_empty_is_valid() const {
  return _internal_has_spray_empty_is_valid();
}
inline void Wiper_aux_rpt_334::clear_spray_empty_is_valid() {
  spray_empty_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Wiper_aux_rpt_334::_internal_spray_empty_is_valid() const {
  return spray_empty_is_valid_;
}
inline bool Wiper_aux_rpt_334::spray_empty_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.spray_empty_is_valid)
  return _internal_spray_empty_is_valid();
}
inline void Wiper_aux_rpt_334::_internal_set_spray_empty_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  spray_empty_is_valid_ = value;
}
inline void Wiper_aux_rpt_334::set_spray_empty_is_valid(bool value) {
  _internal_set_spray_empty_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.spray_empty_is_valid)
}

// optional bool spray_empty = 2;
inline bool Wiper_aux_rpt_334::_internal_has_spray_empty() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_spray_empty() const {
  return _internal_has_spray_empty();
}
inline void Wiper_aux_rpt_334::clear_spray_empty() {
  spray_empty_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Wiper_aux_rpt_334::_internal_spray_empty() const {
  return spray_empty_;
}
inline bool Wiper_aux_rpt_334::spray_empty() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.spray_empty)
  return _internal_spray_empty();
}
inline void Wiper_aux_rpt_334::_internal_set_spray_empty(bool value) {
  _has_bits_[0] |= 0x00000002u;
  spray_empty_ = value;
}
inline void Wiper_aux_rpt_334::set_spray_empty(bool value) {
  _internal_set_spray_empty(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.spray_empty)
}

// optional bool spray_near_empty_is_valid = 3;
inline bool Wiper_aux_rpt_334::_internal_has_spray_near_empty_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_spray_near_empty_is_valid() const {
  return _internal_has_spray_near_empty_is_valid();
}
inline void Wiper_aux_rpt_334::clear_spray_near_empty_is_valid() {
  spray_near_empty_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Wiper_aux_rpt_334::_internal_spray_near_empty_is_valid() const {
  return spray_near_empty_is_valid_;
}
inline bool Wiper_aux_rpt_334::spray_near_empty_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.spray_near_empty_is_valid)
  return _internal_spray_near_empty_is_valid();
}
inline void Wiper_aux_rpt_334::_internal_set_spray_near_empty_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  spray_near_empty_is_valid_ = value;
}
inline void Wiper_aux_rpt_334::set_spray_near_empty_is_valid(bool value) {
  _internal_set_spray_near_empty_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.spray_near_empty_is_valid)
}

// optional bool spray_near_empty = 4;
inline bool Wiper_aux_rpt_334::_internal_has_spray_near_empty() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_spray_near_empty() const {
  return _internal_has_spray_near_empty();
}
inline void Wiper_aux_rpt_334::clear_spray_near_empty() {
  spray_near_empty_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Wiper_aux_rpt_334::_internal_spray_near_empty() const {
  return spray_near_empty_;
}
inline bool Wiper_aux_rpt_334::spray_near_empty() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.spray_near_empty)
  return _internal_spray_near_empty();
}
inline void Wiper_aux_rpt_334::_internal_set_spray_near_empty(bool value) {
  _has_bits_[0] |= 0x00000008u;
  spray_near_empty_ = value;
}
inline void Wiper_aux_rpt_334::set_spray_near_empty(bool value) {
  _internal_set_spray_near_empty(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.spray_near_empty)
}

// optional bool rear_spraying_is_valid = 5;
inline bool Wiper_aux_rpt_334::_internal_has_rear_spraying_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_rear_spraying_is_valid() const {
  return _internal_has_rear_spraying_is_valid();
}
inline void Wiper_aux_rpt_334::clear_rear_spraying_is_valid() {
  rear_spraying_is_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Wiper_aux_rpt_334::_internal_rear_spraying_is_valid() const {
  return rear_spraying_is_valid_;
}
inline bool Wiper_aux_rpt_334::rear_spraying_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.rear_spraying_is_valid)
  return _internal_rear_spraying_is_valid();
}
inline void Wiper_aux_rpt_334::_internal_set_rear_spraying_is_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  rear_spraying_is_valid_ = value;
}
inline void Wiper_aux_rpt_334::set_rear_spraying_is_valid(bool value) {
  _internal_set_rear_spraying_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.rear_spraying_is_valid)
}

// optional bool rear_spraying = 6;
inline bool Wiper_aux_rpt_334::_internal_has_rear_spraying() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_rear_spraying() const {
  return _internal_has_rear_spraying();
}
inline void Wiper_aux_rpt_334::clear_rear_spraying() {
  rear_spraying_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Wiper_aux_rpt_334::_internal_rear_spraying() const {
  return rear_spraying_;
}
inline bool Wiper_aux_rpt_334::rear_spraying() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.rear_spraying)
  return _internal_rear_spraying();
}
inline void Wiper_aux_rpt_334::_internal_set_rear_spraying(bool value) {
  _has_bits_[0] |= 0x00000020u;
  rear_spraying_ = value;
}
inline void Wiper_aux_rpt_334::set_rear_spraying(bool value) {
  _internal_set_rear_spraying(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.rear_spraying)
}

// optional bool rear_wiping_is_valid = 7;
inline bool Wiper_aux_rpt_334::_internal_has_rear_wiping_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_rear_wiping_is_valid() const {
  return _internal_has_rear_wiping_is_valid();
}
inline void Wiper_aux_rpt_334::clear_rear_wiping_is_valid() {
  rear_wiping_is_valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Wiper_aux_rpt_334::_internal_rear_wiping_is_valid() const {
  return rear_wiping_is_valid_;
}
inline bool Wiper_aux_rpt_334::rear_wiping_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.rear_wiping_is_valid)
  return _internal_rear_wiping_is_valid();
}
inline void Wiper_aux_rpt_334::_internal_set_rear_wiping_is_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  rear_wiping_is_valid_ = value;
}
inline void Wiper_aux_rpt_334::set_rear_wiping_is_valid(bool value) {
  _internal_set_rear_wiping_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.rear_wiping_is_valid)
}

// optional bool rear_wiping = 8;
inline bool Wiper_aux_rpt_334::_internal_has_rear_wiping() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_rear_wiping() const {
  return _internal_has_rear_wiping();
}
inline void Wiper_aux_rpt_334::clear_rear_wiping() {
  rear_wiping_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Wiper_aux_rpt_334::_internal_rear_wiping() const {
  return rear_wiping_;
}
inline bool Wiper_aux_rpt_334::rear_wiping() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.rear_wiping)
  return _internal_rear_wiping();
}
inline void Wiper_aux_rpt_334::_internal_set_rear_wiping(bool value) {
  _has_bits_[0] |= 0x00000080u;
  rear_wiping_ = value;
}
inline void Wiper_aux_rpt_334::set_rear_wiping(bool value) {
  _internal_set_rear_wiping(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.rear_wiping)
}

// optional bool front_spraying_is_valid = 9;
inline bool Wiper_aux_rpt_334::_internal_has_front_spraying_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_front_spraying_is_valid() const {
  return _internal_has_front_spraying_is_valid();
}
inline void Wiper_aux_rpt_334::clear_front_spraying_is_valid() {
  front_spraying_is_valid_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Wiper_aux_rpt_334::_internal_front_spraying_is_valid() const {
  return front_spraying_is_valid_;
}
inline bool Wiper_aux_rpt_334::front_spraying_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.front_spraying_is_valid)
  return _internal_front_spraying_is_valid();
}
inline void Wiper_aux_rpt_334::_internal_set_front_spraying_is_valid(bool value) {
  _has_bits_[0] |= 0x00000100u;
  front_spraying_is_valid_ = value;
}
inline void Wiper_aux_rpt_334::set_front_spraying_is_valid(bool value) {
  _internal_set_front_spraying_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.front_spraying_is_valid)
}

// optional bool front_spraying = 10;
inline bool Wiper_aux_rpt_334::_internal_has_front_spraying() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_front_spraying() const {
  return _internal_has_front_spraying();
}
inline void Wiper_aux_rpt_334::clear_front_spraying() {
  front_spraying_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Wiper_aux_rpt_334::_internal_front_spraying() const {
  return front_spraying_;
}
inline bool Wiper_aux_rpt_334::front_spraying() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.front_spraying)
  return _internal_front_spraying();
}
inline void Wiper_aux_rpt_334::_internal_set_front_spraying(bool value) {
  _has_bits_[0] |= 0x00000200u;
  front_spraying_ = value;
}
inline void Wiper_aux_rpt_334::set_front_spraying(bool value) {
  _internal_set_front_spraying(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.front_spraying)
}

// optional bool front_wiping_is_valid = 11;
inline bool Wiper_aux_rpt_334::_internal_has_front_wiping_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_front_wiping_is_valid() const {
  return _internal_has_front_wiping_is_valid();
}
inline void Wiper_aux_rpt_334::clear_front_wiping_is_valid() {
  front_wiping_is_valid_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Wiper_aux_rpt_334::_internal_front_wiping_is_valid() const {
  return front_wiping_is_valid_;
}
inline bool Wiper_aux_rpt_334::front_wiping_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.front_wiping_is_valid)
  return _internal_front_wiping_is_valid();
}
inline void Wiper_aux_rpt_334::_internal_set_front_wiping_is_valid(bool value) {
  _has_bits_[0] |= 0x00000400u;
  front_wiping_is_valid_ = value;
}
inline void Wiper_aux_rpt_334::set_front_wiping_is_valid(bool value) {
  _internal_set_front_wiping_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.front_wiping_is_valid)
}

// optional bool front_wiping = 12;
inline bool Wiper_aux_rpt_334::_internal_has_front_wiping() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Wiper_aux_rpt_334::has_front_wiping() const {
  return _internal_has_front_wiping();
}
inline void Wiper_aux_rpt_334::clear_front_wiping() {
  front_wiping_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Wiper_aux_rpt_334::_internal_front_wiping() const {
  return front_wiping_;
}
inline bool Wiper_aux_rpt_334::front_wiping() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Wiper_aux_rpt_334.front_wiping)
  return _internal_front_wiping();
}
inline void Wiper_aux_rpt_334::_internal_set_front_wiping(bool value) {
  _has_bits_[0] |= 0x00000800u;
  front_wiping_ = value;
}
inline void Wiper_aux_rpt_334::set_front_wiping(bool value) {
  _internal_set_front_wiping(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Wiper_aux_rpt_334.front_wiping)
}

// -------------------------------------------------------------------

// Shift_aux_rpt_328

// optional bool speed_interlock_active_is_valid = 1;
inline bool Shift_aux_rpt_328::_internal_has_speed_interlock_active_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Shift_aux_rpt_328::has_speed_interlock_active_is_valid() const {
  return _internal_has_speed_interlock_active_is_valid();
}
inline void Shift_aux_rpt_328::clear_speed_interlock_active_is_valid() {
  speed_interlock_active_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Shift_aux_rpt_328::_internal_speed_interlock_active_is_valid() const {
  return speed_interlock_active_is_valid_;
}
inline bool Shift_aux_rpt_328::speed_interlock_active_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_aux_rpt_328.speed_interlock_active_is_valid)
  return _internal_speed_interlock_active_is_valid();
}
inline void Shift_aux_rpt_328::_internal_set_speed_interlock_active_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  speed_interlock_active_is_valid_ = value;
}
inline void Shift_aux_rpt_328::set_speed_interlock_active_is_valid(bool value) {
  _internal_set_speed_interlock_active_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_aux_rpt_328.speed_interlock_active_is_valid)
}

// optional bool speed_interlock_active = 2;
inline bool Shift_aux_rpt_328::_internal_has_speed_interlock_active() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Shift_aux_rpt_328::has_speed_interlock_active() const {
  return _internal_has_speed_interlock_active();
}
inline void Shift_aux_rpt_328::clear_speed_interlock_active() {
  speed_interlock_active_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Shift_aux_rpt_328::_internal_speed_interlock_active() const {
  return speed_interlock_active_;
}
inline bool Shift_aux_rpt_328::speed_interlock_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_aux_rpt_328.speed_interlock_active)
  return _internal_speed_interlock_active();
}
inline void Shift_aux_rpt_328::_internal_set_speed_interlock_active(bool value) {
  _has_bits_[0] |= 0x00000002u;
  speed_interlock_active_ = value;
}
inline void Shift_aux_rpt_328::set_speed_interlock_active(bool value) {
  _internal_set_speed_interlock_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_aux_rpt_328.speed_interlock_active)
}

// optional bool brake_interlock_active_is_valid = 3;
inline bool Shift_aux_rpt_328::_internal_has_brake_interlock_active_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Shift_aux_rpt_328::has_brake_interlock_active_is_valid() const {
  return _internal_has_brake_interlock_active_is_valid();
}
inline void Shift_aux_rpt_328::clear_brake_interlock_active_is_valid() {
  brake_interlock_active_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Shift_aux_rpt_328::_internal_brake_interlock_active_is_valid() const {
  return brake_interlock_active_is_valid_;
}
inline bool Shift_aux_rpt_328::brake_interlock_active_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_aux_rpt_328.brake_interlock_active_is_valid)
  return _internal_brake_interlock_active_is_valid();
}
inline void Shift_aux_rpt_328::_internal_set_brake_interlock_active_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  brake_interlock_active_is_valid_ = value;
}
inline void Shift_aux_rpt_328::set_brake_interlock_active_is_valid(bool value) {
  _internal_set_brake_interlock_active_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_aux_rpt_328.brake_interlock_active_is_valid)
}

// optional bool brake_interlock_active = 4;
inline bool Shift_aux_rpt_328::_internal_has_brake_interlock_active() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Shift_aux_rpt_328::has_brake_interlock_active() const {
  return _internal_has_brake_interlock_active();
}
inline void Shift_aux_rpt_328::clear_brake_interlock_active() {
  brake_interlock_active_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Shift_aux_rpt_328::_internal_brake_interlock_active() const {
  return brake_interlock_active_;
}
inline bool Shift_aux_rpt_328::brake_interlock_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_aux_rpt_328.brake_interlock_active)
  return _internal_brake_interlock_active();
}
inline void Shift_aux_rpt_328::_internal_set_brake_interlock_active(bool value) {
  _has_bits_[0] |= 0x00000008u;
  brake_interlock_active_ = value;
}
inline void Shift_aux_rpt_328::set_brake_interlock_active(bool value) {
  _internal_set_brake_interlock_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_aux_rpt_328.brake_interlock_active)
}

// optional bool stay_in_neutral_mode_is_valid = 5;
inline bool Shift_aux_rpt_328::_internal_has_stay_in_neutral_mode_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Shift_aux_rpt_328::has_stay_in_neutral_mode_is_valid() const {
  return _internal_has_stay_in_neutral_mode_is_valid();
}
inline void Shift_aux_rpt_328::clear_stay_in_neutral_mode_is_valid() {
  stay_in_neutral_mode_is_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Shift_aux_rpt_328::_internal_stay_in_neutral_mode_is_valid() const {
  return stay_in_neutral_mode_is_valid_;
}
inline bool Shift_aux_rpt_328::stay_in_neutral_mode_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_aux_rpt_328.stay_in_neutral_mode_is_valid)
  return _internal_stay_in_neutral_mode_is_valid();
}
inline void Shift_aux_rpt_328::_internal_set_stay_in_neutral_mode_is_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  stay_in_neutral_mode_is_valid_ = value;
}
inline void Shift_aux_rpt_328::set_stay_in_neutral_mode_is_valid(bool value) {
  _internal_set_stay_in_neutral_mode_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_aux_rpt_328.stay_in_neutral_mode_is_valid)
}

// optional bool stay_in_neutral_mode = 6;
inline bool Shift_aux_rpt_328::_internal_has_stay_in_neutral_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Shift_aux_rpt_328::has_stay_in_neutral_mode() const {
  return _internal_has_stay_in_neutral_mode();
}
inline void Shift_aux_rpt_328::clear_stay_in_neutral_mode() {
  stay_in_neutral_mode_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Shift_aux_rpt_328::_internal_stay_in_neutral_mode() const {
  return stay_in_neutral_mode_;
}
inline bool Shift_aux_rpt_328::stay_in_neutral_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_aux_rpt_328.stay_in_neutral_mode)
  return _internal_stay_in_neutral_mode();
}
inline void Shift_aux_rpt_328::_internal_set_stay_in_neutral_mode(bool value) {
  _has_bits_[0] |= 0x00000020u;
  stay_in_neutral_mode_ = value;
}
inline void Shift_aux_rpt_328::set_stay_in_neutral_mode(bool value) {
  _internal_set_stay_in_neutral_mode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_aux_rpt_328.stay_in_neutral_mode)
}

// optional bool between_gears_is_valid = 7;
inline bool Shift_aux_rpt_328::_internal_has_between_gears_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Shift_aux_rpt_328::has_between_gears_is_valid() const {
  return _internal_has_between_gears_is_valid();
}
inline void Shift_aux_rpt_328::clear_between_gears_is_valid() {
  between_gears_is_valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Shift_aux_rpt_328::_internal_between_gears_is_valid() const {
  return between_gears_is_valid_;
}
inline bool Shift_aux_rpt_328::between_gears_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_aux_rpt_328.between_gears_is_valid)
  return _internal_between_gears_is_valid();
}
inline void Shift_aux_rpt_328::_internal_set_between_gears_is_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  between_gears_is_valid_ = value;
}
inline void Shift_aux_rpt_328::set_between_gears_is_valid(bool value) {
  _internal_set_between_gears_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_aux_rpt_328.between_gears_is_valid)
}

// optional bool between_gears = 8;
inline bool Shift_aux_rpt_328::_internal_has_between_gears() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Shift_aux_rpt_328::has_between_gears() const {
  return _internal_has_between_gears();
}
inline void Shift_aux_rpt_328::clear_between_gears() {
  between_gears_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Shift_aux_rpt_328::_internal_between_gears() const {
  return between_gears_;
}
inline bool Shift_aux_rpt_328::between_gears() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_aux_rpt_328.between_gears)
  return _internal_between_gears();
}
inline void Shift_aux_rpt_328::_internal_set_between_gears(bool value) {
  _has_bits_[0] |= 0x00000080u;
  between_gears_ = value;
}
inline void Shift_aux_rpt_328::set_between_gears(bool value) {
  _internal_set_between_gears(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_aux_rpt_328.between_gears)
}

// -------------------------------------------------------------------

// Accel_rpt_200

// optional bool vehicle_fault = 1;
inline bool Accel_rpt_200::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Accel_rpt_200::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Accel_rpt_200::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Accel_rpt_200::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Accel_rpt_200::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_fault_ = value;
}
inline void Accel_rpt_200::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.vehicle_fault)
}

// optional bool pacmod_fault = 2;
inline bool Accel_rpt_200::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Accel_rpt_200::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Accel_rpt_200::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Accel_rpt_200::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Accel_rpt_200::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pacmod_fault_ = value;
}
inline void Accel_rpt_200::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.pacmod_fault)
}

// optional bool output_reported_fault = 3;
inline bool Accel_rpt_200::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Accel_rpt_200::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Accel_rpt_200::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Accel_rpt_200::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Accel_rpt_200::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000004u;
  output_reported_fault_ = value;
}
inline void Accel_rpt_200::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.output_reported_fault)
}

// optional bool input_output_fault = 4;
inline bool Accel_rpt_200::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Accel_rpt_200::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Accel_rpt_200::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Accel_rpt_200::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.input_output_fault)
  return _internal_input_output_fault();
}
inline void Accel_rpt_200::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  input_output_fault_ = value;
}
inline void Accel_rpt_200::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.input_output_fault)
}

// optional bool command_output_fault = 5;
inline bool Accel_rpt_200::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Accel_rpt_200::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Accel_rpt_200::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Accel_rpt_200::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.command_output_fault)
  return _internal_command_output_fault();
}
inline void Accel_rpt_200::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  command_output_fault_ = value;
}
inline void Accel_rpt_200::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.command_output_fault)
}

// optional bool override_active = 6;
inline bool Accel_rpt_200::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_override_active() const {
  return _internal_has_override_active();
}
inline void Accel_rpt_200::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Accel_rpt_200::_internal_override_active() const {
  return override_active_;
}
inline bool Accel_rpt_200::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.override_active)
  return _internal_override_active();
}
inline void Accel_rpt_200::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  override_active_ = value;
}
inline void Accel_rpt_200::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.override_active)
}

// optional bool enabled = 7;
inline bool Accel_rpt_200::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_enabled() const {
  return _internal_has_enabled();
}
inline void Accel_rpt_200::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Accel_rpt_200::_internal_enabled() const {
  return enabled_;
}
inline bool Accel_rpt_200::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.enabled)
  return _internal_enabled();
}
inline void Accel_rpt_200::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enabled_ = value;
}
inline void Accel_rpt_200::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.enabled)
}

// optional double manual_input = 8;
inline bool Accel_rpt_200::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Accel_rpt_200::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Accel_rpt_200::_internal_manual_input() const {
  return manual_input_;
}
inline double Accel_rpt_200::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.manual_input)
  return _internal_manual_input();
}
inline void Accel_rpt_200::_internal_set_manual_input(double value) {
  _has_bits_[0] |= 0x00000080u;
  manual_input_ = value;
}
inline void Accel_rpt_200::set_manual_input(double value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.manual_input)
}

// optional double commanded_value = 9;
inline bool Accel_rpt_200::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Accel_rpt_200::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Accel_rpt_200::_internal_commanded_value() const {
  return commanded_value_;
}
inline double Accel_rpt_200::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.commanded_value)
  return _internal_commanded_value();
}
inline void Accel_rpt_200::_internal_set_commanded_value(double value) {
  _has_bits_[0] |= 0x00000100u;
  commanded_value_ = value;
}
inline void Accel_rpt_200::set_commanded_value(double value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.commanded_value)
}

// optional double output_value = 10;
inline bool Accel_rpt_200::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Accel_rpt_200::has_output_value() const {
  return _internal_has_output_value();
}
inline void Accel_rpt_200::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Accel_rpt_200::_internal_output_value() const {
  return output_value_;
}
inline double Accel_rpt_200::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_rpt_200.output_value)
  return _internal_output_value();
}
inline void Accel_rpt_200::_internal_set_output_value(double value) {
  _has_bits_[0] |= 0x00000200u;
  output_value_ = value;
}
inline void Accel_rpt_200::set_output_value(double value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_rpt_200.output_value)
}

// -------------------------------------------------------------------

// Brake_rpt_204

// optional bool command_output_fault = 1;
inline bool Brake_rpt_204::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Brake_rpt_204::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Brake_rpt_204::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Brake_rpt_204::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.command_output_fault)
  return _internal_command_output_fault();
}
inline void Brake_rpt_204::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  command_output_fault_ = value;
}
inline void Brake_rpt_204::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.command_output_fault)
}

// optional bool vehicle_fault = 2;
inline bool Brake_rpt_204::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Brake_rpt_204::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Brake_rpt_204::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Brake_rpt_204::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Brake_rpt_204::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_fault_ = value;
}
inline void Brake_rpt_204::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.vehicle_fault)
}

// optional bool pacmod_fault = 3;
inline bool Brake_rpt_204::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Brake_rpt_204::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Brake_rpt_204::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Brake_rpt_204::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Brake_rpt_204::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000004u;
  pacmod_fault_ = value;
}
inline void Brake_rpt_204::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.pacmod_fault)
}

// optional bool override_active = 4;
inline bool Brake_rpt_204::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_override_active() const {
  return _internal_has_override_active();
}
inline void Brake_rpt_204::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Brake_rpt_204::_internal_override_active() const {
  return override_active_;
}
inline bool Brake_rpt_204::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.override_active)
  return _internal_override_active();
}
inline void Brake_rpt_204::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000008u;
  override_active_ = value;
}
inline void Brake_rpt_204::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.override_active)
}

// optional bool output_reported_fault = 5;
inline bool Brake_rpt_204::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Brake_rpt_204::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Brake_rpt_204::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Brake_rpt_204::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Brake_rpt_204::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  output_reported_fault_ = value;
}
inline void Brake_rpt_204::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.output_reported_fault)
}

// optional bool input_output_fault = 6;
inline bool Brake_rpt_204::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Brake_rpt_204::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Brake_rpt_204::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Brake_rpt_204::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.input_output_fault)
  return _internal_input_output_fault();
}
inline void Brake_rpt_204::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000020u;
  input_output_fault_ = value;
}
inline void Brake_rpt_204::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.input_output_fault)
}

// optional bool enabled = 7;
inline bool Brake_rpt_204::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_enabled() const {
  return _internal_has_enabled();
}
inline void Brake_rpt_204::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Brake_rpt_204::_internal_enabled() const {
  return enabled_;
}
inline bool Brake_rpt_204::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.enabled)
  return _internal_enabled();
}
inline void Brake_rpt_204::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  enabled_ = value;
}
inline void Brake_rpt_204::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.enabled)
}

// optional double manual_input = 8;
inline bool Brake_rpt_204::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Brake_rpt_204::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Brake_rpt_204::_internal_manual_input() const {
  return manual_input_;
}
inline double Brake_rpt_204::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.manual_input)
  return _internal_manual_input();
}
inline void Brake_rpt_204::_internal_set_manual_input(double value) {
  _has_bits_[0] |= 0x00000080u;
  manual_input_ = value;
}
inline void Brake_rpt_204::set_manual_input(double value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.manual_input)
}

// optional double commanded_value = 9;
inline bool Brake_rpt_204::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Brake_rpt_204::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Brake_rpt_204::_internal_commanded_value() const {
  return commanded_value_;
}
inline double Brake_rpt_204::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.commanded_value)
  return _internal_commanded_value();
}
inline void Brake_rpt_204::_internal_set_commanded_value(double value) {
  _has_bits_[0] |= 0x00000100u;
  commanded_value_ = value;
}
inline void Brake_rpt_204::set_commanded_value(double value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.commanded_value)
}

// optional double output_value = 10;
inline bool Brake_rpt_204::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Brake_rpt_204::has_output_value() const {
  return _internal_has_output_value();
}
inline void Brake_rpt_204::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Brake_rpt_204::_internal_output_value() const {
  return output_value_;
}
inline double Brake_rpt_204::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_rpt_204.output_value)
  return _internal_output_value();
}
inline void Brake_rpt_204::_internal_set_output_value(double value) {
  _has_bits_[0] |= 0x00000200u;
  output_value_ = value;
}
inline void Brake_rpt_204::set_output_value(double value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_rpt_204.output_value)
}

// -------------------------------------------------------------------

// Horn_cmd_11c

// optional bool ignore_overrides = 1;
inline bool Horn_cmd_11c::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Horn_cmd_11c::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Horn_cmd_11c::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Horn_cmd_11c::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Horn_cmd_11c::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_cmd_11c.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Horn_cmd_11c::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_overrides_ = value;
}
inline void Horn_cmd_11c::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_cmd_11c.ignore_overrides)
}

// optional bool enable = 2;
inline bool Horn_cmd_11c::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Horn_cmd_11c::has_enable() const {
  return _internal_has_enable();
}
inline void Horn_cmd_11c::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Horn_cmd_11c::_internal_enable() const {
  return enable_;
}
inline bool Horn_cmd_11c::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_cmd_11c.enable)
  return _internal_enable();
}
inline void Horn_cmd_11c::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ = value;
}
inline void Horn_cmd_11c::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_cmd_11c.enable)
}

// optional bool clear_override = 3;
inline bool Horn_cmd_11c::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Horn_cmd_11c::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Horn_cmd_11c::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Horn_cmd_11c::_internal_clear_override() const {
  return clear_override_;
}
inline bool Horn_cmd_11c::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_cmd_11c.clear_override)
  return _internal_clear_override();
}
inline void Horn_cmd_11c::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Horn_cmd_11c::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_cmd_11c.clear_override)
}

// optional bool clear_faults = 4;
inline bool Horn_cmd_11c::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Horn_cmd_11c::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Horn_cmd_11c::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Horn_cmd_11c::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Horn_cmd_11c::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_cmd_11c.clear_faults)
  return _internal_clear_faults();
}
inline void Horn_cmd_11c::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_faults_ = value;
}
inline void Horn_cmd_11c::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_cmd_11c.clear_faults)
}

// optional .apollo.canbus.Horn_cmd_11c.Horn_cmdType horn_cmd = 5;
inline bool Horn_cmd_11c::_internal_has_horn_cmd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Horn_cmd_11c::has_horn_cmd() const {
  return _internal_has_horn_cmd();
}
inline void Horn_cmd_11c::clear_horn_cmd() {
  horn_cmd_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::_internal_horn_cmd() const {
  return static_cast< ::apollo::canbus::Horn_cmd_11c_Horn_cmdType >(horn_cmd_);
}
inline ::apollo::canbus::Horn_cmd_11c_Horn_cmdType Horn_cmd_11c::horn_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_cmd_11c.horn_cmd)
  return _internal_horn_cmd();
}
inline void Horn_cmd_11c::_internal_set_horn_cmd(::apollo::canbus::Horn_cmd_11c_Horn_cmdType value) {
  assert(::apollo::canbus::Horn_cmd_11c_Horn_cmdType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  horn_cmd_ = value;
}
inline void Horn_cmd_11c::set_horn_cmd(::apollo::canbus::Horn_cmd_11c_Horn_cmdType value) {
  _internal_set_horn_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_cmd_11c.horn_cmd)
}

// -------------------------------------------------------------------

// Global_rpt_10

// optional bool config_fault_active = 1;
inline bool Global_rpt_10::_internal_has_config_fault_active() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Global_rpt_10::has_config_fault_active() const {
  return _internal_has_config_fault_active();
}
inline void Global_rpt_10::clear_config_fault_active() {
  config_fault_active_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Global_rpt_10::_internal_config_fault_active() const {
  return config_fault_active_;
}
inline bool Global_rpt_10::config_fault_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.config_fault_active)
  return _internal_config_fault_active();
}
inline void Global_rpt_10::_internal_set_config_fault_active(bool value) {
  _has_bits_[0] |= 0x00000002u;
  config_fault_active_ = value;
}
inline void Global_rpt_10::set_config_fault_active(bool value) {
  _internal_set_config_fault_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.config_fault_active)
}

// optional bool pacmod_subsystem_timeout = 2;
inline bool Global_rpt_10::_internal_has_pacmod_subsystem_timeout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Global_rpt_10::has_pacmod_subsystem_timeout() const {
  return _internal_has_pacmod_subsystem_timeout();
}
inline void Global_rpt_10::clear_pacmod_subsystem_timeout() {
  pacmod_subsystem_timeout_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Global_rpt_10::_internal_pacmod_subsystem_timeout() const {
  return pacmod_subsystem_timeout_;
}
inline bool Global_rpt_10::pacmod_subsystem_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.pacmod_subsystem_timeout)
  return _internal_pacmod_subsystem_timeout();
}
inline void Global_rpt_10::_internal_set_pacmod_subsystem_timeout(bool value) {
  _has_bits_[0] |= 0x00000004u;
  pacmod_subsystem_timeout_ = value;
}
inline void Global_rpt_10::set_pacmod_subsystem_timeout(bool value) {
  _internal_set_pacmod_subsystem_timeout(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.pacmod_subsystem_timeout)
}

// optional .apollo.canbus.Global_rpt_10.Pacmod_system_enabledType pacmod_system_enabled = 3;
inline bool Global_rpt_10::_internal_has_pacmod_system_enabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Global_rpt_10::has_pacmod_system_enabled() const {
  return _internal_has_pacmod_system_enabled();
}
inline void Global_rpt_10::clear_pacmod_system_enabled() {
  pacmod_system_enabled_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::_internal_pacmod_system_enabled() const {
  return static_cast< ::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType >(pacmod_system_enabled_);
}
inline ::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType Global_rpt_10::pacmod_system_enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.pacmod_system_enabled)
  return _internal_pacmod_system_enabled();
}
inline void Global_rpt_10::_internal_set_pacmod_system_enabled(::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType value) {
  assert(::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  pacmod_system_enabled_ = value;
}
inline void Global_rpt_10::set_pacmod_system_enabled(::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType value) {
  _internal_set_pacmod_system_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.pacmod_system_enabled)
}

// optional .apollo.canbus.Global_rpt_10.Pacmod_system_override_activeType pacmod_system_override_active = 4;
inline bool Global_rpt_10::_internal_has_pacmod_system_override_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Global_rpt_10::has_pacmod_system_override_active() const {
  return _internal_has_pacmod_system_override_active();
}
inline void Global_rpt_10::clear_pacmod_system_override_active() {
  pacmod_system_override_active_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::_internal_pacmod_system_override_active() const {
  return static_cast< ::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType >(pacmod_system_override_active_);
}
inline ::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType Global_rpt_10::pacmod_system_override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.pacmod_system_override_active)
  return _internal_pacmod_system_override_active();
}
inline void Global_rpt_10::_internal_set_pacmod_system_override_active(::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType value) {
  assert(::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  pacmod_system_override_active_ = value;
}
inline void Global_rpt_10::set_pacmod_system_override_active(::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType value) {
  _internal_set_pacmod_system_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.pacmod_system_override_active)
}

// optional bool pacmod_system_fault_active = 5;
inline bool Global_rpt_10::_internal_has_pacmod_system_fault_active() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Global_rpt_10::has_pacmod_system_fault_active() const {
  return _internal_has_pacmod_system_fault_active();
}
inline void Global_rpt_10::clear_pacmod_system_fault_active() {
  pacmod_system_fault_active_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Global_rpt_10::_internal_pacmod_system_fault_active() const {
  return pacmod_system_fault_active_;
}
inline bool Global_rpt_10::pacmod_system_fault_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.pacmod_system_fault_active)
  return _internal_pacmod_system_fault_active();
}
inline void Global_rpt_10::_internal_set_pacmod_system_fault_active(bool value) {
  _has_bits_[0] |= 0x00000008u;
  pacmod_system_fault_active_ = value;
}
inline void Global_rpt_10::set_pacmod_system_fault_active(bool value) {
  _internal_set_pacmod_system_fault_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.pacmod_system_fault_active)
}

// optional bool veh_can_timeout = 6;
inline bool Global_rpt_10::_internal_has_veh_can_timeout() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Global_rpt_10::has_veh_can_timeout() const {
  return _internal_has_veh_can_timeout();
}
inline void Global_rpt_10::clear_veh_can_timeout() {
  veh_can_timeout_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Global_rpt_10::_internal_veh_can_timeout() const {
  return veh_can_timeout_;
}
inline bool Global_rpt_10::veh_can_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.veh_can_timeout)
  return _internal_veh_can_timeout();
}
inline void Global_rpt_10::_internal_set_veh_can_timeout(bool value) {
  _has_bits_[0] |= 0x00000010u;
  veh_can_timeout_ = value;
}
inline void Global_rpt_10::set_veh_can_timeout(bool value) {
  _internal_set_veh_can_timeout(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.veh_can_timeout)
}

// optional bool str_can_timeout = 7;
inline bool Global_rpt_10::_internal_has_str_can_timeout() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Global_rpt_10::has_str_can_timeout() const {
  return _internal_has_str_can_timeout();
}
inline void Global_rpt_10::clear_str_can_timeout() {
  str_can_timeout_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Global_rpt_10::_internal_str_can_timeout() const {
  return str_can_timeout_;
}
inline bool Global_rpt_10::str_can_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.str_can_timeout)
  return _internal_str_can_timeout();
}
inline void Global_rpt_10::_internal_set_str_can_timeout(bool value) {
  _has_bits_[0] |= 0x00000080u;
  str_can_timeout_ = value;
}
inline void Global_rpt_10::set_str_can_timeout(bool value) {
  _internal_set_str_can_timeout(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.str_can_timeout)
}

// optional .apollo.canbus.Global_rpt_10.Brk_can_timeoutType brk_can_timeout = 8;
inline bool Global_rpt_10::_internal_has_brk_can_timeout() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Global_rpt_10::has_brk_can_timeout() const {
  return _internal_has_brk_can_timeout();
}
inline void Global_rpt_10::clear_brk_can_timeout() {
  brk_can_timeout_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Global_rpt_10_Brk_can_timeoutType Global_rpt_10::_internal_brk_can_timeout() const {
  return static_cast< ::apollo::canbus::Global_rpt_10_Brk_can_timeoutType >(brk_can_timeout_);
}
inline ::apollo::canbus::Global_rpt_10_Brk_can_timeoutType Global_rpt_10::brk_can_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.brk_can_timeout)
  return _internal_brk_can_timeout();
}
inline void Global_rpt_10::_internal_set_brk_can_timeout(::apollo::canbus::Global_rpt_10_Brk_can_timeoutType value) {
  assert(::apollo::canbus::Global_rpt_10_Brk_can_timeoutType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  brk_can_timeout_ = value;
}
inline void Global_rpt_10::set_brk_can_timeout(::apollo::canbus::Global_rpt_10_Brk_can_timeoutType value) {
  _internal_set_brk_can_timeout(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.brk_can_timeout)
}

// optional bool usr_can_timeout = 9;
inline bool Global_rpt_10::_internal_has_usr_can_timeout() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Global_rpt_10::has_usr_can_timeout() const {
  return _internal_has_usr_can_timeout();
}
inline void Global_rpt_10::clear_usr_can_timeout() {
  usr_can_timeout_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Global_rpt_10::_internal_usr_can_timeout() const {
  return usr_can_timeout_;
}
inline bool Global_rpt_10::usr_can_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.usr_can_timeout)
  return _internal_usr_can_timeout();
}
inline void Global_rpt_10::_internal_set_usr_can_timeout(bool value) {
  _has_bits_[0] |= 0x00000100u;
  usr_can_timeout_ = value;
}
inline void Global_rpt_10::set_usr_can_timeout(bool value) {
  _internal_set_usr_can_timeout(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.usr_can_timeout)
}

// optional int32 usr_can_read_errors = 10;
inline bool Global_rpt_10::_internal_has_usr_can_read_errors() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Global_rpt_10::has_usr_can_read_errors() const {
  return _internal_has_usr_can_read_errors();
}
inline void Global_rpt_10::clear_usr_can_read_errors() {
  usr_can_read_errors_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Global_rpt_10::_internal_usr_can_read_errors() const {
  return usr_can_read_errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Global_rpt_10::usr_can_read_errors() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Global_rpt_10.usr_can_read_errors)
  return _internal_usr_can_read_errors();
}
inline void Global_rpt_10::_internal_set_usr_can_read_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  usr_can_read_errors_ = value;
}
inline void Global_rpt_10::set_usr_can_read_errors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usr_can_read_errors(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Global_rpt_10.usr_can_read_errors)
}

// -------------------------------------------------------------------

// Accel_aux_rpt_300

// optional bool user_interaction_is_valid = 1;
inline bool Accel_aux_rpt_300::_internal_has_user_interaction_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Accel_aux_rpt_300::has_user_interaction_is_valid() const {
  return _internal_has_user_interaction_is_valid();
}
inline void Accel_aux_rpt_300::clear_user_interaction_is_valid() {
  user_interaction_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Accel_aux_rpt_300::_internal_user_interaction_is_valid() const {
  return user_interaction_is_valid_;
}
inline bool Accel_aux_rpt_300::user_interaction_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_aux_rpt_300.user_interaction_is_valid)
  return _internal_user_interaction_is_valid();
}
inline void Accel_aux_rpt_300::_internal_set_user_interaction_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  user_interaction_is_valid_ = value;
}
inline void Accel_aux_rpt_300::set_user_interaction_is_valid(bool value) {
  _internal_set_user_interaction_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_aux_rpt_300.user_interaction_is_valid)
}

// optional bool user_interaction = 2;
inline bool Accel_aux_rpt_300::_internal_has_user_interaction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Accel_aux_rpt_300::has_user_interaction() const {
  return _internal_has_user_interaction();
}
inline void Accel_aux_rpt_300::clear_user_interaction() {
  user_interaction_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Accel_aux_rpt_300::_internal_user_interaction() const {
  return user_interaction_;
}
inline bool Accel_aux_rpt_300::user_interaction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_aux_rpt_300.user_interaction)
  return _internal_user_interaction();
}
inline void Accel_aux_rpt_300::_internal_set_user_interaction(bool value) {
  _has_bits_[0] |= 0x00000008u;
  user_interaction_ = value;
}
inline void Accel_aux_rpt_300::set_user_interaction(bool value) {
  _internal_set_user_interaction(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_aux_rpt_300.user_interaction)
}

// optional bool raw_pedal_force_is_valid = 3;
inline bool Accel_aux_rpt_300::_internal_has_raw_pedal_force_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Accel_aux_rpt_300::has_raw_pedal_force_is_valid() const {
  return _internal_has_raw_pedal_force_is_valid();
}
inline void Accel_aux_rpt_300::clear_raw_pedal_force_is_valid() {
  raw_pedal_force_is_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Accel_aux_rpt_300::_internal_raw_pedal_force_is_valid() const {
  return raw_pedal_force_is_valid_;
}
inline bool Accel_aux_rpt_300::raw_pedal_force_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_aux_rpt_300.raw_pedal_force_is_valid)
  return _internal_raw_pedal_force_is_valid();
}
inline void Accel_aux_rpt_300::_internal_set_raw_pedal_force_is_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  raw_pedal_force_is_valid_ = value;
}
inline void Accel_aux_rpt_300::set_raw_pedal_force_is_valid(bool value) {
  _internal_set_raw_pedal_force_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_aux_rpt_300.raw_pedal_force_is_valid)
}

// optional double raw_pedal_force = 4;
inline bool Accel_aux_rpt_300::_internal_has_raw_pedal_force() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Accel_aux_rpt_300::has_raw_pedal_force() const {
  return _internal_has_raw_pedal_force();
}
inline void Accel_aux_rpt_300::clear_raw_pedal_force() {
  raw_pedal_force_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Accel_aux_rpt_300::_internal_raw_pedal_force() const {
  return raw_pedal_force_;
}
inline double Accel_aux_rpt_300::raw_pedal_force() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_aux_rpt_300.raw_pedal_force)
  return _internal_raw_pedal_force();
}
inline void Accel_aux_rpt_300::_internal_set_raw_pedal_force(double value) {
  _has_bits_[0] |= 0x00000001u;
  raw_pedal_force_ = value;
}
inline void Accel_aux_rpt_300::set_raw_pedal_force(double value) {
  _internal_set_raw_pedal_force(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_aux_rpt_300.raw_pedal_force)
}

// optional bool raw_pedal_pos_is_valid = 5;
inline bool Accel_aux_rpt_300::_internal_has_raw_pedal_pos_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Accel_aux_rpt_300::has_raw_pedal_pos_is_valid() const {
  return _internal_has_raw_pedal_pos_is_valid();
}
inline void Accel_aux_rpt_300::clear_raw_pedal_pos_is_valid() {
  raw_pedal_pos_is_valid_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Accel_aux_rpt_300::_internal_raw_pedal_pos_is_valid() const {
  return raw_pedal_pos_is_valid_;
}
inline bool Accel_aux_rpt_300::raw_pedal_pos_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_aux_rpt_300.raw_pedal_pos_is_valid)
  return _internal_raw_pedal_pos_is_valid();
}
inline void Accel_aux_rpt_300::_internal_set_raw_pedal_pos_is_valid(bool value) {
  _has_bits_[0] |= 0x00000020u;
  raw_pedal_pos_is_valid_ = value;
}
inline void Accel_aux_rpt_300::set_raw_pedal_pos_is_valid(bool value) {
  _internal_set_raw_pedal_pos_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_aux_rpt_300.raw_pedal_pos_is_valid)
}

// optional double raw_pedal_pos = 6;
inline bool Accel_aux_rpt_300::_internal_has_raw_pedal_pos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Accel_aux_rpt_300::has_raw_pedal_pos() const {
  return _internal_has_raw_pedal_pos();
}
inline void Accel_aux_rpt_300::clear_raw_pedal_pos() {
  raw_pedal_pos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Accel_aux_rpt_300::_internal_raw_pedal_pos() const {
  return raw_pedal_pos_;
}
inline double Accel_aux_rpt_300::raw_pedal_pos() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_aux_rpt_300.raw_pedal_pos)
  return _internal_raw_pedal_pos();
}
inline void Accel_aux_rpt_300::_internal_set_raw_pedal_pos(double value) {
  _has_bits_[0] |= 0x00000002u;
  raw_pedal_pos_ = value;
}
inline void Accel_aux_rpt_300::set_raw_pedal_pos(double value) {
  _internal_set_raw_pedal_pos(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_aux_rpt_300.raw_pedal_pos)
}

// -------------------------------------------------------------------

// Cruise_control_buttons_rpt_208

// optional .apollo.canbus.Cruise_control_buttons_rpt_208.Output_valueType output_value = 1;
inline bool Cruise_control_buttons_rpt_208::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_output_value() const {
  return _internal_has_output_value();
}
inline void Cruise_control_buttons_rpt_208::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType Cruise_control_buttons_rpt_208::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.output_value)
  return _internal_output_value();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_output_value(::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType value) {
  assert(::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  output_value_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_output_value(::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.output_value)
}

// optional .apollo.canbus.Cruise_control_buttons_rpt_208.Manual_inputType manual_input = 2;
inline bool Cruise_control_buttons_rpt_208::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Cruise_control_buttons_rpt_208::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType Cruise_control_buttons_rpt_208::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.manual_input)
  return _internal_manual_input();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_manual_input(::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType value) {
  assert(::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  manual_input_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_manual_input(::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.manual_input)
}

// optional .apollo.canbus.Cruise_control_buttons_rpt_208.Commanded_valueType commanded_value = 3;
inline bool Cruise_control_buttons_rpt_208::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Cruise_control_buttons_rpt_208::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType Cruise_control_buttons_rpt_208::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.commanded_value)
  return _internal_commanded_value();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_commanded_value(::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType value) {
  assert(::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  commanded_value_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_commanded_value(::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.commanded_value)
}

// optional bool vehicle_fault = 4;
inline bool Cruise_control_buttons_rpt_208::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Cruise_control_buttons_rpt_208::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Cruise_control_buttons_rpt_208::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Cruise_control_buttons_rpt_208::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  vehicle_fault_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.vehicle_fault)
}

// optional bool pacmod_fault = 5;
inline bool Cruise_control_buttons_rpt_208::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Cruise_control_buttons_rpt_208::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Cruise_control_buttons_rpt_208::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Cruise_control_buttons_rpt_208::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  pacmod_fault_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.pacmod_fault)
}

// optional bool override_active = 6;
inline bool Cruise_control_buttons_rpt_208::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_override_active() const {
  return _internal_has_override_active();
}
inline void Cruise_control_buttons_rpt_208::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Cruise_control_buttons_rpt_208::_internal_override_active() const {
  return override_active_;
}
inline bool Cruise_control_buttons_rpt_208::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.override_active)
  return _internal_override_active();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  override_active_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.override_active)
}

// optional bool output_reported_fault = 7;
inline bool Cruise_control_buttons_rpt_208::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Cruise_control_buttons_rpt_208::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Cruise_control_buttons_rpt_208::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Cruise_control_buttons_rpt_208::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  output_reported_fault_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.output_reported_fault)
}

// optional bool input_output_fault = 8;
inline bool Cruise_control_buttons_rpt_208::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Cruise_control_buttons_rpt_208::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Cruise_control_buttons_rpt_208::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Cruise_control_buttons_rpt_208::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.input_output_fault)
  return _internal_input_output_fault();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000080u;
  input_output_fault_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.input_output_fault)
}

// optional bool enabled = 9;
inline bool Cruise_control_buttons_rpt_208::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_enabled() const {
  return _internal_has_enabled();
}
inline void Cruise_control_buttons_rpt_208::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Cruise_control_buttons_rpt_208::_internal_enabled() const {
  return enabled_;
}
inline bool Cruise_control_buttons_rpt_208::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.enabled)
  return _internal_enabled();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enabled_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.enabled)
}

// optional bool command_output_fault = 10;
inline bool Cruise_control_buttons_rpt_208::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Cruise_control_buttons_rpt_208::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Cruise_control_buttons_rpt_208::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Cruise_control_buttons_rpt_208::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Cruise_control_buttons_rpt_208::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_rpt_208.command_output_fault)
  return _internal_command_output_fault();
}
inline void Cruise_control_buttons_rpt_208::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000200u;
  command_output_fault_ = value;
}
inline void Cruise_control_buttons_rpt_208::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_rpt_208.command_output_fault)
}

// -------------------------------------------------------------------

// Vehicle_speed_rpt_400

// optional double vehicle_speed = 1;
inline bool Vehicle_speed_rpt_400::_internal_has_vehicle_speed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vehicle_speed_rpt_400::has_vehicle_speed() const {
  return _internal_has_vehicle_speed();
}
inline void Vehicle_speed_rpt_400::clear_vehicle_speed() {
  vehicle_speed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vehicle_speed_rpt_400::_internal_vehicle_speed() const {
  return vehicle_speed_;
}
inline double Vehicle_speed_rpt_400::vehicle_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehicle_speed_rpt_400.vehicle_speed)
  return _internal_vehicle_speed();
}
inline void Vehicle_speed_rpt_400::_internal_set_vehicle_speed(double value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_speed_ = value;
}
inline void Vehicle_speed_rpt_400::set_vehicle_speed(double value) {
  _internal_set_vehicle_speed(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehicle_speed_rpt_400.vehicle_speed)
}

// optional .apollo.canbus.Vehicle_speed_rpt_400.Vehicle_speed_validType vehicle_speed_valid = 2;
inline bool Vehicle_speed_rpt_400::_internal_has_vehicle_speed_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vehicle_speed_rpt_400::has_vehicle_speed_valid() const {
  return _internal_has_vehicle_speed_valid();
}
inline void Vehicle_speed_rpt_400::clear_vehicle_speed_valid() {
  vehicle_speed_valid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::_internal_vehicle_speed_valid() const {
  return static_cast< ::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType >(vehicle_speed_valid_);
}
inline ::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType Vehicle_speed_rpt_400::vehicle_speed_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehicle_speed_rpt_400.vehicle_speed_valid)
  return _internal_vehicle_speed_valid();
}
inline void Vehicle_speed_rpt_400::_internal_set_vehicle_speed_valid(::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType value) {
  assert(::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  vehicle_speed_valid_ = value;
}
inline void Vehicle_speed_rpt_400::set_vehicle_speed_valid(::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType value) {
  _internal_set_vehicle_speed_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehicle_speed_rpt_400.vehicle_speed_valid)
}

// -------------------------------------------------------------------

// Brake_aux_rpt_304

// optional bool brake_on_off_is_valid = 1;
inline bool Brake_aux_rpt_304::_internal_has_brake_on_off_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_brake_on_off_is_valid() const {
  return _internal_has_brake_on_off_is_valid();
}
inline void Brake_aux_rpt_304::clear_brake_on_off_is_valid() {
  brake_on_off_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Brake_aux_rpt_304::_internal_brake_on_off_is_valid() const {
  return brake_on_off_is_valid_;
}
inline bool Brake_aux_rpt_304::brake_on_off_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.brake_on_off_is_valid)
  return _internal_brake_on_off_is_valid();
}
inline void Brake_aux_rpt_304::_internal_set_brake_on_off_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  brake_on_off_is_valid_ = value;
}
inline void Brake_aux_rpt_304::set_brake_on_off_is_valid(bool value) {
  _internal_set_brake_on_off_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.brake_on_off_is_valid)
}

// optional bool brake_on_off = 2;
inline bool Brake_aux_rpt_304::_internal_has_brake_on_off() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_brake_on_off() const {
  return _internal_has_brake_on_off();
}
inline void Brake_aux_rpt_304::clear_brake_on_off() {
  brake_on_off_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Brake_aux_rpt_304::_internal_brake_on_off() const {
  return brake_on_off_;
}
inline bool Brake_aux_rpt_304::brake_on_off() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.brake_on_off)
  return _internal_brake_on_off();
}
inline void Brake_aux_rpt_304::_internal_set_brake_on_off(bool value) {
  _has_bits_[0] |= 0x00000002u;
  brake_on_off_ = value;
}
inline void Brake_aux_rpt_304::set_brake_on_off(bool value) {
  _internal_set_brake_on_off(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.brake_on_off)
}

// optional bool user_interaction_is_valid = 3;
inline bool Brake_aux_rpt_304::_internal_has_user_interaction_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_user_interaction_is_valid() const {
  return _internal_has_user_interaction_is_valid();
}
inline void Brake_aux_rpt_304::clear_user_interaction_is_valid() {
  user_interaction_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Brake_aux_rpt_304::_internal_user_interaction_is_valid() const {
  return user_interaction_is_valid_;
}
inline bool Brake_aux_rpt_304::user_interaction_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.user_interaction_is_valid)
  return _internal_user_interaction_is_valid();
}
inline void Brake_aux_rpt_304::_internal_set_user_interaction_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  user_interaction_is_valid_ = value;
}
inline void Brake_aux_rpt_304::set_user_interaction_is_valid(bool value) {
  _internal_set_user_interaction_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.user_interaction_is_valid)
}

// optional bool user_interaction = 4;
inline bool Brake_aux_rpt_304::_internal_has_user_interaction() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_user_interaction() const {
  return _internal_has_user_interaction();
}
inline void Brake_aux_rpt_304::clear_user_interaction() {
  user_interaction_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Brake_aux_rpt_304::_internal_user_interaction() const {
  return user_interaction_;
}
inline bool Brake_aux_rpt_304::user_interaction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.user_interaction)
  return _internal_user_interaction();
}
inline void Brake_aux_rpt_304::_internal_set_user_interaction(bool value) {
  _has_bits_[0] |= 0x00000008u;
  user_interaction_ = value;
}
inline void Brake_aux_rpt_304::set_user_interaction(bool value) {
  _internal_set_user_interaction(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.user_interaction)
}

// optional bool raw_brake_pressure_is_valid = 5;
inline bool Brake_aux_rpt_304::_internal_has_raw_brake_pressure_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_raw_brake_pressure_is_valid() const {
  return _internal_has_raw_brake_pressure_is_valid();
}
inline void Brake_aux_rpt_304::clear_raw_brake_pressure_is_valid() {
  raw_brake_pressure_is_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Brake_aux_rpt_304::_internal_raw_brake_pressure_is_valid() const {
  return raw_brake_pressure_is_valid_;
}
inline bool Brake_aux_rpt_304::raw_brake_pressure_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.raw_brake_pressure_is_valid)
  return _internal_raw_brake_pressure_is_valid();
}
inline void Brake_aux_rpt_304::_internal_set_raw_brake_pressure_is_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  raw_brake_pressure_is_valid_ = value;
}
inline void Brake_aux_rpt_304::set_raw_brake_pressure_is_valid(bool value) {
  _internal_set_raw_brake_pressure_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.raw_brake_pressure_is_valid)
}

// optional double raw_brake_pressure = 6;
inline bool Brake_aux_rpt_304::_internal_has_raw_brake_pressure() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_raw_brake_pressure() const {
  return _internal_has_raw_brake_pressure();
}
inline void Brake_aux_rpt_304::clear_raw_brake_pressure() {
  raw_brake_pressure_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Brake_aux_rpt_304::_internal_raw_brake_pressure() const {
  return raw_brake_pressure_;
}
inline double Brake_aux_rpt_304::raw_brake_pressure() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.raw_brake_pressure)
  return _internal_raw_brake_pressure();
}
inline void Brake_aux_rpt_304::_internal_set_raw_brake_pressure(double value) {
  _has_bits_[0] |= 0x00000080u;
  raw_brake_pressure_ = value;
}
inline void Brake_aux_rpt_304::set_raw_brake_pressure(double value) {
  _internal_set_raw_brake_pressure(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.raw_brake_pressure)
}

// optional bool raw_pedal_force_is_valid = 7;
inline bool Brake_aux_rpt_304::_internal_has_raw_pedal_force_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_raw_pedal_force_is_valid() const {
  return _internal_has_raw_pedal_force_is_valid();
}
inline void Brake_aux_rpt_304::clear_raw_pedal_force_is_valid() {
  raw_pedal_force_is_valid_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Brake_aux_rpt_304::_internal_raw_pedal_force_is_valid() const {
  return raw_pedal_force_is_valid_;
}
inline bool Brake_aux_rpt_304::raw_pedal_force_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.raw_pedal_force_is_valid)
  return _internal_raw_pedal_force_is_valid();
}
inline void Brake_aux_rpt_304::_internal_set_raw_pedal_force_is_valid(bool value) {
  _has_bits_[0] |= 0x00000020u;
  raw_pedal_force_is_valid_ = value;
}
inline void Brake_aux_rpt_304::set_raw_pedal_force_is_valid(bool value) {
  _internal_set_raw_pedal_force_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.raw_pedal_force_is_valid)
}

// optional double raw_pedal_force = 8;
inline bool Brake_aux_rpt_304::_internal_has_raw_pedal_force() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_raw_pedal_force() const {
  return _internal_has_raw_pedal_force();
}
inline void Brake_aux_rpt_304::clear_raw_pedal_force() {
  raw_pedal_force_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Brake_aux_rpt_304::_internal_raw_pedal_force() const {
  return raw_pedal_force_;
}
inline double Brake_aux_rpt_304::raw_pedal_force() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.raw_pedal_force)
  return _internal_raw_pedal_force();
}
inline void Brake_aux_rpt_304::_internal_set_raw_pedal_force(double value) {
  _has_bits_[0] |= 0x00000100u;
  raw_pedal_force_ = value;
}
inline void Brake_aux_rpt_304::set_raw_pedal_force(double value) {
  _internal_set_raw_pedal_force(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.raw_pedal_force)
}

// optional bool raw_pedal_pos_is_valid = 9;
inline bool Brake_aux_rpt_304::_internal_has_raw_pedal_pos_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_raw_pedal_pos_is_valid() const {
  return _internal_has_raw_pedal_pos_is_valid();
}
inline void Brake_aux_rpt_304::clear_raw_pedal_pos_is_valid() {
  raw_pedal_pos_is_valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Brake_aux_rpt_304::_internal_raw_pedal_pos_is_valid() const {
  return raw_pedal_pos_is_valid_;
}
inline bool Brake_aux_rpt_304::raw_pedal_pos_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.raw_pedal_pos_is_valid)
  return _internal_raw_pedal_pos_is_valid();
}
inline void Brake_aux_rpt_304::_internal_set_raw_pedal_pos_is_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  raw_pedal_pos_is_valid_ = value;
}
inline void Brake_aux_rpt_304::set_raw_pedal_pos_is_valid(bool value) {
  _internal_set_raw_pedal_pos_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.raw_pedal_pos_is_valid)
}

// optional double raw_pedal_pos = 10;
inline bool Brake_aux_rpt_304::_internal_has_raw_pedal_pos() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Brake_aux_rpt_304::has_raw_pedal_pos() const {
  return _internal_has_raw_pedal_pos();
}
inline void Brake_aux_rpt_304::clear_raw_pedal_pos() {
  raw_pedal_pos_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Brake_aux_rpt_304::_internal_raw_pedal_pos() const {
  return raw_pedal_pos_;
}
inline double Brake_aux_rpt_304::raw_pedal_pos() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_aux_rpt_304.raw_pedal_pos)
  return _internal_raw_pedal_pos();
}
inline void Brake_aux_rpt_304::_internal_set_raw_pedal_pos(double value) {
  _has_bits_[0] |= 0x00000200u;
  raw_pedal_pos_ = value;
}
inline void Brake_aux_rpt_304::set_raw_pedal_pos(double value) {
  _internal_set_raw_pedal_pos(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_aux_rpt_304.raw_pedal_pos)
}

// -------------------------------------------------------------------

// Media_controls_cmd_120

// optional .apollo.canbus.Media_controls_cmd_120.Media_controls_cmdType media_controls_cmd = 1;
inline bool Media_controls_cmd_120::_internal_has_media_controls_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Media_controls_cmd_120::has_media_controls_cmd() const {
  return _internal_has_media_controls_cmd();
}
inline void Media_controls_cmd_120::clear_media_controls_cmd() {
  media_controls_cmd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::_internal_media_controls_cmd() const {
  return static_cast< ::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType >(media_controls_cmd_);
}
inline ::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType Media_controls_cmd_120::media_controls_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_cmd_120.media_controls_cmd)
  return _internal_media_controls_cmd();
}
inline void Media_controls_cmd_120::_internal_set_media_controls_cmd(::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType value) {
  assert(::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  media_controls_cmd_ = value;
}
inline void Media_controls_cmd_120::set_media_controls_cmd(::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType value) {
  _internal_set_media_controls_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_cmd_120.media_controls_cmd)
}

// optional bool ignore_overrides = 2;
inline bool Media_controls_cmd_120::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Media_controls_cmd_120::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Media_controls_cmd_120::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Media_controls_cmd_120::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Media_controls_cmd_120::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_cmd_120.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Media_controls_cmd_120::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ignore_overrides_ = value;
}
inline void Media_controls_cmd_120::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_cmd_120.ignore_overrides)
}

// optional bool clear_override = 3;
inline bool Media_controls_cmd_120::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Media_controls_cmd_120::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Media_controls_cmd_120::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Media_controls_cmd_120::_internal_clear_override() const {
  return clear_override_;
}
inline bool Media_controls_cmd_120::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_cmd_120.clear_override)
  return _internal_clear_override();
}
inline void Media_controls_cmd_120::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Media_controls_cmd_120::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_cmd_120.clear_override)
}

// optional bool clear_faults = 4;
inline bool Media_controls_cmd_120::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Media_controls_cmd_120::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Media_controls_cmd_120::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Media_controls_cmd_120::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Media_controls_cmd_120::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_cmd_120.clear_faults)
  return _internal_clear_faults();
}
inline void Media_controls_cmd_120::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_faults_ = value;
}
inline void Media_controls_cmd_120::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_cmd_120.clear_faults)
}

// optional bool enable = 5;
inline bool Media_controls_cmd_120::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Media_controls_cmd_120::has_enable() const {
  return _internal_has_enable();
}
inline void Media_controls_cmd_120::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Media_controls_cmd_120::_internal_enable() const {
  return enable_;
}
inline bool Media_controls_cmd_120::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_cmd_120.enable)
  return _internal_enable();
}
inline void Media_controls_cmd_120::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enable_ = value;
}
inline void Media_controls_cmd_120::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_cmd_120.enable)
}

// -------------------------------------------------------------------

// Cruise_control_buttons_cmd_108

// optional .apollo.canbus.Cruise_control_buttons_cmd_108.Cruise_control_buttonType cruise_control_button = 1;
inline bool Cruise_control_buttons_cmd_108::_internal_has_cruise_control_button() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Cruise_control_buttons_cmd_108::has_cruise_control_button() const {
  return _internal_has_cruise_control_button();
}
inline void Cruise_control_buttons_cmd_108::clear_cruise_control_button() {
  cruise_control_button_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::_internal_cruise_control_button() const {
  return static_cast< ::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType >(cruise_control_button_);
}
inline ::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType Cruise_control_buttons_cmd_108::cruise_control_button() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_cmd_108.cruise_control_button)
  return _internal_cruise_control_button();
}
inline void Cruise_control_buttons_cmd_108::_internal_set_cruise_control_button(::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType value) {
  assert(::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  cruise_control_button_ = value;
}
inline void Cruise_control_buttons_cmd_108::set_cruise_control_button(::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType value) {
  _internal_set_cruise_control_button(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_cmd_108.cruise_control_button)
}

// optional bool ignore_overrides = 2;
inline bool Cruise_control_buttons_cmd_108::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Cruise_control_buttons_cmd_108::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Cruise_control_buttons_cmd_108::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Cruise_control_buttons_cmd_108::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Cruise_control_buttons_cmd_108::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_cmd_108.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Cruise_control_buttons_cmd_108::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ignore_overrides_ = value;
}
inline void Cruise_control_buttons_cmd_108::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_cmd_108.ignore_overrides)
}

// optional bool clear_override = 3;
inline bool Cruise_control_buttons_cmd_108::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Cruise_control_buttons_cmd_108::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Cruise_control_buttons_cmd_108::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Cruise_control_buttons_cmd_108::_internal_clear_override() const {
  return clear_override_;
}
inline bool Cruise_control_buttons_cmd_108::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_cmd_108.clear_override)
  return _internal_clear_override();
}
inline void Cruise_control_buttons_cmd_108::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Cruise_control_buttons_cmd_108::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_cmd_108.clear_override)
}

// optional bool enable = 4;
inline bool Cruise_control_buttons_cmd_108::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Cruise_control_buttons_cmd_108::has_enable() const {
  return _internal_has_enable();
}
inline void Cruise_control_buttons_cmd_108::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Cruise_control_buttons_cmd_108::_internal_enable() const {
  return enable_;
}
inline bool Cruise_control_buttons_cmd_108::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_cmd_108.enable)
  return _internal_enable();
}
inline void Cruise_control_buttons_cmd_108::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_ = value;
}
inline void Cruise_control_buttons_cmd_108::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_cmd_108.enable)
}

// optional bool clear_faults = 5;
inline bool Cruise_control_buttons_cmd_108::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Cruise_control_buttons_cmd_108::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Cruise_control_buttons_cmd_108::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Cruise_control_buttons_cmd_108::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Cruise_control_buttons_cmd_108::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Cruise_control_buttons_cmd_108.clear_faults)
  return _internal_clear_faults();
}
inline void Cruise_control_buttons_cmd_108::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000010u;
  clear_faults_ = value;
}
inline void Cruise_control_buttons_cmd_108::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Cruise_control_buttons_cmd_108.clear_faults)
}

// -------------------------------------------------------------------

// Parking_brake_cmd_124

// optional bool ignore_overrides = 1;
inline bool Parking_brake_cmd_124::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Parking_brake_cmd_124::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Parking_brake_cmd_124::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Parking_brake_cmd_124::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Parking_brake_cmd_124::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_cmd_124.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Parking_brake_cmd_124::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_overrides_ = value;
}
inline void Parking_brake_cmd_124::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_cmd_124.ignore_overrides)
}

// optional bool enable = 2;
inline bool Parking_brake_cmd_124::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Parking_brake_cmd_124::has_enable() const {
  return _internal_has_enable();
}
inline void Parking_brake_cmd_124::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Parking_brake_cmd_124::_internal_enable() const {
  return enable_;
}
inline bool Parking_brake_cmd_124::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_cmd_124.enable)
  return _internal_enable();
}
inline void Parking_brake_cmd_124::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ = value;
}
inline void Parking_brake_cmd_124::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_cmd_124.enable)
}

// optional bool clear_override = 3;
inline bool Parking_brake_cmd_124::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Parking_brake_cmd_124::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Parking_brake_cmd_124::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Parking_brake_cmd_124::_internal_clear_override() const {
  return clear_override_;
}
inline bool Parking_brake_cmd_124::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_cmd_124.clear_override)
  return _internal_clear_override();
}
inline void Parking_brake_cmd_124::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Parking_brake_cmd_124::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_cmd_124.clear_override)
}

// optional bool parking_brake_cmd = 4;
inline bool Parking_brake_cmd_124::_internal_has_parking_brake_cmd() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Parking_brake_cmd_124::has_parking_brake_cmd() const {
  return _internal_has_parking_brake_cmd();
}
inline void Parking_brake_cmd_124::clear_parking_brake_cmd() {
  parking_brake_cmd_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Parking_brake_cmd_124::_internal_parking_brake_cmd() const {
  return parking_brake_cmd_;
}
inline bool Parking_brake_cmd_124::parking_brake_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_cmd_124.parking_brake_cmd)
  return _internal_parking_brake_cmd();
}
inline void Parking_brake_cmd_124::_internal_set_parking_brake_cmd(bool value) {
  _has_bits_[0] |= 0x00000008u;
  parking_brake_cmd_ = value;
}
inline void Parking_brake_cmd_124::set_parking_brake_cmd(bool value) {
  _internal_set_parking_brake_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_cmd_124.parking_brake_cmd)
}

// optional bool clear_faults = 5;
inline bool Parking_brake_cmd_124::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Parking_brake_cmd_124::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Parking_brake_cmd_124::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Parking_brake_cmd_124::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Parking_brake_cmd_124::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_cmd_124.clear_faults)
  return _internal_clear_faults();
}
inline void Parking_brake_cmd_124::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000010u;
  clear_faults_ = value;
}
inline void Parking_brake_cmd_124::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_cmd_124.clear_faults)
}

// -------------------------------------------------------------------

// Horn_rpt_21c

// optional bool vehicle_fault = 1;
inline bool Horn_rpt_21c::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Horn_rpt_21c::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Horn_rpt_21c::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Horn_rpt_21c::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Horn_rpt_21c::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_fault_ = value;
}
inline void Horn_rpt_21c::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.vehicle_fault)
}

// optional bool pacmod_fault = 2;
inline bool Horn_rpt_21c::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Horn_rpt_21c::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Horn_rpt_21c::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Horn_rpt_21c::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Horn_rpt_21c::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pacmod_fault_ = value;
}
inline void Horn_rpt_21c::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.pacmod_fault)
}

// optional bool override_active = 3;
inline bool Horn_rpt_21c::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_override_active() const {
  return _internal_has_override_active();
}
inline void Horn_rpt_21c::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Horn_rpt_21c::_internal_override_active() const {
  return override_active_;
}
inline bool Horn_rpt_21c::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.override_active)
  return _internal_override_active();
}
inline void Horn_rpt_21c::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  override_active_ = value;
}
inline void Horn_rpt_21c::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.override_active)
}

// optional bool output_reported_fault = 4;
inline bool Horn_rpt_21c::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Horn_rpt_21c::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Horn_rpt_21c::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Horn_rpt_21c::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Horn_rpt_21c::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  output_reported_fault_ = value;
}
inline void Horn_rpt_21c::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.output_reported_fault)
}

// optional bool input_output_fault = 5;
inline bool Horn_rpt_21c::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Horn_rpt_21c::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Horn_rpt_21c::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Horn_rpt_21c::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.input_output_fault)
  return _internal_input_output_fault();
}
inline void Horn_rpt_21c::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  input_output_fault_ = value;
}
inline void Horn_rpt_21c::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.input_output_fault)
}

// optional bool enabled = 6;
inline bool Horn_rpt_21c::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_enabled() const {
  return _internal_has_enabled();
}
inline void Horn_rpt_21c::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Horn_rpt_21c::_internal_enabled() const {
  return enabled_;
}
inline bool Horn_rpt_21c::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.enabled)
  return _internal_enabled();
}
inline void Horn_rpt_21c::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enabled_ = value;
}
inline void Horn_rpt_21c::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.enabled)
}

// optional bool command_output_fault = 7;
inline bool Horn_rpt_21c::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Horn_rpt_21c::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Horn_rpt_21c::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Horn_rpt_21c::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.command_output_fault)
  return _internal_command_output_fault();
}
inline void Horn_rpt_21c::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  command_output_fault_ = value;
}
inline void Horn_rpt_21c::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.command_output_fault)
}

// optional .apollo.canbus.Horn_rpt_21c.Output_valueType output_value = 8;
inline bool Horn_rpt_21c::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_output_value() const {
  return _internal_has_output_value();
}
inline void Horn_rpt_21c::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Horn_rpt_21c_Output_valueType Horn_rpt_21c::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Horn_rpt_21c_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Horn_rpt_21c_Output_valueType Horn_rpt_21c::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.output_value)
  return _internal_output_value();
}
inline void Horn_rpt_21c::_internal_set_output_value(::apollo::canbus::Horn_rpt_21c_Output_valueType value) {
  assert(::apollo::canbus::Horn_rpt_21c_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  output_value_ = value;
}
inline void Horn_rpt_21c::set_output_value(::apollo::canbus::Horn_rpt_21c_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.output_value)
}

// optional .apollo.canbus.Horn_rpt_21c.Commanded_valueType commanded_value = 9;
inline bool Horn_rpt_21c::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Horn_rpt_21c::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Horn_rpt_21c_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Horn_rpt_21c_Commanded_valueType Horn_rpt_21c::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.commanded_value)
  return _internal_commanded_value();
}
inline void Horn_rpt_21c::_internal_set_commanded_value(::apollo::canbus::Horn_rpt_21c_Commanded_valueType value) {
  assert(::apollo::canbus::Horn_rpt_21c_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  commanded_value_ = value;
}
inline void Horn_rpt_21c::set_commanded_value(::apollo::canbus::Horn_rpt_21c_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.commanded_value)
}

// optional .apollo.canbus.Horn_rpt_21c.Manual_inputType manual_input = 10;
inline bool Horn_rpt_21c::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Horn_rpt_21c::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Horn_rpt_21c::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Horn_rpt_21c_Manual_inputType Horn_rpt_21c::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Horn_rpt_21c_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Horn_rpt_21c_Manual_inputType Horn_rpt_21c::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Horn_rpt_21c.manual_input)
  return _internal_manual_input();
}
inline void Horn_rpt_21c::_internal_set_manual_input(::apollo::canbus::Horn_rpt_21c_Manual_inputType value) {
  assert(::apollo::canbus::Horn_rpt_21c_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  manual_input_ = value;
}
inline void Horn_rpt_21c::set_manual_input(::apollo::canbus::Horn_rpt_21c_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Horn_rpt_21c.manual_input)
}

// -------------------------------------------------------------------

// Shift_rpt_228

// optional bool vehicle_fault = 1;
inline bool Shift_rpt_228::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Shift_rpt_228::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Shift_rpt_228::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Shift_rpt_228::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Shift_rpt_228::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_fault_ = value;
}
inline void Shift_rpt_228::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.vehicle_fault)
}

// optional bool pacmod_fault = 2;
inline bool Shift_rpt_228::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Shift_rpt_228::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Shift_rpt_228::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Shift_rpt_228::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Shift_rpt_228::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pacmod_fault_ = value;
}
inline void Shift_rpt_228::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.pacmod_fault)
}

// optional bool override_active = 3;
inline bool Shift_rpt_228::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_override_active() const {
  return _internal_has_override_active();
}
inline void Shift_rpt_228::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Shift_rpt_228::_internal_override_active() const {
  return override_active_;
}
inline bool Shift_rpt_228::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.override_active)
  return _internal_override_active();
}
inline void Shift_rpt_228::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  override_active_ = value;
}
inline void Shift_rpt_228::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.override_active)
}

// optional bool output_reported_fault = 4;
inline bool Shift_rpt_228::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Shift_rpt_228::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Shift_rpt_228::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Shift_rpt_228::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Shift_rpt_228::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  output_reported_fault_ = value;
}
inline void Shift_rpt_228::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.output_reported_fault)
}

// optional bool input_output_fault = 5;
inline bool Shift_rpt_228::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Shift_rpt_228::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Shift_rpt_228::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Shift_rpt_228::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.input_output_fault)
  return _internal_input_output_fault();
}
inline void Shift_rpt_228::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  input_output_fault_ = value;
}
inline void Shift_rpt_228::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.input_output_fault)
}

// optional bool enabled = 6;
inline bool Shift_rpt_228::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_enabled() const {
  return _internal_has_enabled();
}
inline void Shift_rpt_228::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Shift_rpt_228::_internal_enabled() const {
  return enabled_;
}
inline bool Shift_rpt_228::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.enabled)
  return _internal_enabled();
}
inline void Shift_rpt_228::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enabled_ = value;
}
inline void Shift_rpt_228::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.enabled)
}

// optional bool command_output_fault = 7;
inline bool Shift_rpt_228::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Shift_rpt_228::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Shift_rpt_228::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Shift_rpt_228::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.command_output_fault)
  return _internal_command_output_fault();
}
inline void Shift_rpt_228::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  command_output_fault_ = value;
}
inline void Shift_rpt_228::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.command_output_fault)
}

// optional .apollo.canbus.Shift_rpt_228.Manual_inputType manual_input = 8;
inline bool Shift_rpt_228::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Shift_rpt_228::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Shift_rpt_228_Manual_inputType Shift_rpt_228::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Shift_rpt_228_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Shift_rpt_228_Manual_inputType Shift_rpt_228::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.manual_input)
  return _internal_manual_input();
}
inline void Shift_rpt_228::_internal_set_manual_input(::apollo::canbus::Shift_rpt_228_Manual_inputType value) {
  assert(::apollo::canbus::Shift_rpt_228_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  manual_input_ = value;
}
inline void Shift_rpt_228::set_manual_input(::apollo::canbus::Shift_rpt_228_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.manual_input)
}

// optional .apollo.canbus.Shift_rpt_228.Commanded_valueType commanded_value = 9;
inline bool Shift_rpt_228::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Shift_rpt_228::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Shift_rpt_228_Commanded_valueType Shift_rpt_228::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Shift_rpt_228_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Shift_rpt_228_Commanded_valueType Shift_rpt_228::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.commanded_value)
  return _internal_commanded_value();
}
inline void Shift_rpt_228::_internal_set_commanded_value(::apollo::canbus::Shift_rpt_228_Commanded_valueType value) {
  assert(::apollo::canbus::Shift_rpt_228_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  commanded_value_ = value;
}
inline void Shift_rpt_228::set_commanded_value(::apollo::canbus::Shift_rpt_228_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.commanded_value)
}

// optional .apollo.canbus.Shift_rpt_228.Output_valueType output_value = 10;
inline bool Shift_rpt_228::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Shift_rpt_228::has_output_value() const {
  return _internal_has_output_value();
}
inline void Shift_rpt_228::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Shift_rpt_228_Output_valueType Shift_rpt_228::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Shift_rpt_228_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Shift_rpt_228_Output_valueType Shift_rpt_228::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_rpt_228.output_value)
  return _internal_output_value();
}
inline void Shift_rpt_228::_internal_set_output_value(::apollo::canbus::Shift_rpt_228_Output_valueType value) {
  assert(::apollo::canbus::Shift_rpt_228_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  output_value_ = value;
}
inline void Shift_rpt_228::set_output_value(::apollo::canbus::Shift_rpt_228_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_rpt_228.output_value)
}

// -------------------------------------------------------------------

// Shift_cmd_128

// optional bool ignore_overrides = 1;
inline bool Shift_cmd_128::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Shift_cmd_128::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Shift_cmd_128::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Shift_cmd_128::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Shift_cmd_128::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_cmd_128.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Shift_cmd_128::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_overrides_ = value;
}
inline void Shift_cmd_128::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_cmd_128.ignore_overrides)
}

// optional bool enable = 2;
inline bool Shift_cmd_128::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Shift_cmd_128::has_enable() const {
  return _internal_has_enable();
}
inline void Shift_cmd_128::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Shift_cmd_128::_internal_enable() const {
  return enable_;
}
inline bool Shift_cmd_128::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_cmd_128.enable)
  return _internal_enable();
}
inline void Shift_cmd_128::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ = value;
}
inline void Shift_cmd_128::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_cmd_128.enable)
}

// optional bool clear_override = 3;
inline bool Shift_cmd_128::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Shift_cmd_128::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Shift_cmd_128::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Shift_cmd_128::_internal_clear_override() const {
  return clear_override_;
}
inline bool Shift_cmd_128::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_cmd_128.clear_override)
  return _internal_clear_override();
}
inline void Shift_cmd_128::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Shift_cmd_128::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_cmd_128.clear_override)
}

// optional bool clear_faults = 4;
inline bool Shift_cmd_128::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Shift_cmd_128::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Shift_cmd_128::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Shift_cmd_128::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Shift_cmd_128::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_cmd_128.clear_faults)
  return _internal_clear_faults();
}
inline void Shift_cmd_128::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_faults_ = value;
}
inline void Shift_cmd_128::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_cmd_128.clear_faults)
}

// optional .apollo.canbus.Shift_cmd_128.Shift_cmdType shift_cmd = 5;
inline bool Shift_cmd_128::_internal_has_shift_cmd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Shift_cmd_128::has_shift_cmd() const {
  return _internal_has_shift_cmd();
}
inline void Shift_cmd_128::clear_shift_cmd() {
  shift_cmd_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Shift_cmd_128_Shift_cmdType Shift_cmd_128::_internal_shift_cmd() const {
  return static_cast< ::apollo::canbus::Shift_cmd_128_Shift_cmdType >(shift_cmd_);
}
inline ::apollo::canbus::Shift_cmd_128_Shift_cmdType Shift_cmd_128::shift_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Shift_cmd_128.shift_cmd)
  return _internal_shift_cmd();
}
inline void Shift_cmd_128::_internal_set_shift_cmd(::apollo::canbus::Shift_cmd_128_Shift_cmdType value) {
  assert(::apollo::canbus::Shift_cmd_128_Shift_cmdType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  shift_cmd_ = value;
}
inline void Shift_cmd_128::set_shift_cmd(::apollo::canbus::Shift_cmd_128_Shift_cmdType value) {
  _internal_set_shift_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Shift_cmd_128.shift_cmd)
}

// -------------------------------------------------------------------

// Accel_cmd_100

// optional bool ignore_overrides = 1;
inline bool Accel_cmd_100::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Accel_cmd_100::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Accel_cmd_100::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Accel_cmd_100::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Accel_cmd_100::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_cmd_100.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Accel_cmd_100::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ignore_overrides_ = value;
}
inline void Accel_cmd_100::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_cmd_100.ignore_overrides)
}

// optional bool enable = 2;
inline bool Accel_cmd_100::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Accel_cmd_100::has_enable() const {
  return _internal_has_enable();
}
inline void Accel_cmd_100::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Accel_cmd_100::_internal_enable() const {
  return enable_;
}
inline bool Accel_cmd_100::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_cmd_100.enable)
  return _internal_enable();
}
inline void Accel_cmd_100::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_ = value;
}
inline void Accel_cmd_100::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_cmd_100.enable)
}

// optional bool clear_override = 3;
inline bool Accel_cmd_100::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Accel_cmd_100::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Accel_cmd_100::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Accel_cmd_100::_internal_clear_override() const {
  return clear_override_;
}
inline bool Accel_cmd_100::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_cmd_100.clear_override)
  return _internal_clear_override();
}
inline void Accel_cmd_100::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_override_ = value;
}
inline void Accel_cmd_100::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_cmd_100.clear_override)
}

// optional bool clear_faults = 4;
inline bool Accel_cmd_100::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Accel_cmd_100::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Accel_cmd_100::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Accel_cmd_100::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Accel_cmd_100::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_cmd_100.clear_faults)
  return _internal_clear_faults();
}
inline void Accel_cmd_100::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000010u;
  clear_faults_ = value;
}
inline void Accel_cmd_100::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_cmd_100.clear_faults)
}

// optional double accel_cmd = 5;
inline bool Accel_cmd_100::_internal_has_accel_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Accel_cmd_100::has_accel_cmd() const {
  return _internal_has_accel_cmd();
}
inline void Accel_cmd_100::clear_accel_cmd() {
  accel_cmd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Accel_cmd_100::_internal_accel_cmd() const {
  return accel_cmd_;
}
inline double Accel_cmd_100::accel_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accel_cmd_100.accel_cmd)
  return _internal_accel_cmd();
}
inline void Accel_cmd_100::_internal_set_accel_cmd(double value) {
  _has_bits_[0] |= 0x00000001u;
  accel_cmd_ = value;
}
inline void Accel_cmd_100::set_accel_cmd(double value) {
  _internal_set_accel_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accel_cmd_100.accel_cmd)
}

// -------------------------------------------------------------------

// Parking_brake_rpt_224

// optional bool vehicle_fault = 1;
inline bool Parking_brake_rpt_224::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Parking_brake_rpt_224::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Parking_brake_rpt_224::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Parking_brake_rpt_224::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Parking_brake_rpt_224::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_fault_ = value;
}
inline void Parking_brake_rpt_224::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.vehicle_fault)
}

// optional bool pacmod_fault = 2;
inline bool Parking_brake_rpt_224::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Parking_brake_rpt_224::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Parking_brake_rpt_224::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Parking_brake_rpt_224::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Parking_brake_rpt_224::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pacmod_fault_ = value;
}
inline void Parking_brake_rpt_224::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.pacmod_fault)
}

// optional bool override_active = 3;
inline bool Parking_brake_rpt_224::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_override_active() const {
  return _internal_has_override_active();
}
inline void Parking_brake_rpt_224::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Parking_brake_rpt_224::_internal_override_active() const {
  return override_active_;
}
inline bool Parking_brake_rpt_224::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.override_active)
  return _internal_override_active();
}
inline void Parking_brake_rpt_224::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000004u;
  override_active_ = value;
}
inline void Parking_brake_rpt_224::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.override_active)
}

// optional bool output_reported_fault = 4;
inline bool Parking_brake_rpt_224::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Parking_brake_rpt_224::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Parking_brake_rpt_224::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Parking_brake_rpt_224::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Parking_brake_rpt_224::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  output_reported_fault_ = value;
}
inline void Parking_brake_rpt_224::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.output_reported_fault)
}

// optional bool input_output_fault = 5;
inline bool Parking_brake_rpt_224::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Parking_brake_rpt_224::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Parking_brake_rpt_224::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Parking_brake_rpt_224::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.input_output_fault)
  return _internal_input_output_fault();
}
inline void Parking_brake_rpt_224::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  input_output_fault_ = value;
}
inline void Parking_brake_rpt_224::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.input_output_fault)
}

// optional bool enabled = 6;
inline bool Parking_brake_rpt_224::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_enabled() const {
  return _internal_has_enabled();
}
inline void Parking_brake_rpt_224::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Parking_brake_rpt_224::_internal_enabled() const {
  return enabled_;
}
inline bool Parking_brake_rpt_224::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.enabled)
  return _internal_enabled();
}
inline void Parking_brake_rpt_224::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000020u;
  enabled_ = value;
}
inline void Parking_brake_rpt_224::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.enabled)
}

// optional bool command_output_fault = 7;
inline bool Parking_brake_rpt_224::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Parking_brake_rpt_224::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Parking_brake_rpt_224::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Parking_brake_rpt_224::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.command_output_fault)
  return _internal_command_output_fault();
}
inline void Parking_brake_rpt_224::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  command_output_fault_ = value;
}
inline void Parking_brake_rpt_224::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.command_output_fault)
}

// optional bool output_value = 8;
inline bool Parking_brake_rpt_224::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_output_value() const {
  return _internal_has_output_value();
}
inline void Parking_brake_rpt_224::clear_output_value() {
  output_value_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Parking_brake_rpt_224::_internal_output_value() const {
  return output_value_;
}
inline bool Parking_brake_rpt_224::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.output_value)
  return _internal_output_value();
}
inline void Parking_brake_rpt_224::_internal_set_output_value(bool value) {
  _has_bits_[0] |= 0x00000080u;
  output_value_ = value;
}
inline void Parking_brake_rpt_224::set_output_value(bool value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.output_value)
}

// optional bool commanded_value = 9;
inline bool Parking_brake_rpt_224::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Parking_brake_rpt_224::clear_commanded_value() {
  commanded_value_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Parking_brake_rpt_224::_internal_commanded_value() const {
  return commanded_value_;
}
inline bool Parking_brake_rpt_224::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.commanded_value)
  return _internal_commanded_value();
}
inline void Parking_brake_rpt_224::_internal_set_commanded_value(bool value) {
  _has_bits_[0] |= 0x00000100u;
  commanded_value_ = value;
}
inline void Parking_brake_rpt_224::set_commanded_value(bool value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.commanded_value)
}

// optional bool manual_input = 10;
inline bool Parking_brake_rpt_224::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Parking_brake_rpt_224::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Parking_brake_rpt_224::clear_manual_input() {
  manual_input_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Parking_brake_rpt_224::_internal_manual_input() const {
  return manual_input_;
}
inline bool Parking_brake_rpt_224::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Parking_brake_rpt_224.manual_input)
  return _internal_manual_input();
}
inline void Parking_brake_rpt_224::_internal_set_manual_input(bool value) {
  _has_bits_[0] |= 0x00000200u;
  manual_input_ = value;
}
inline void Parking_brake_rpt_224::set_manual_input(bool value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Parking_brake_rpt_224.manual_input)
}

// -------------------------------------------------------------------

// Brake_cmd_104

// optional bool ignore_overrides = 1;
inline bool Brake_cmd_104::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brake_cmd_104::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Brake_cmd_104::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Brake_cmd_104::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Brake_cmd_104::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_cmd_104.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Brake_cmd_104::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ignore_overrides_ = value;
}
inline void Brake_cmd_104::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_cmd_104.ignore_overrides)
}

// optional bool enable = 2;
inline bool Brake_cmd_104::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brake_cmd_104::has_enable() const {
  return _internal_has_enable();
}
inline void Brake_cmd_104::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Brake_cmd_104::_internal_enable() const {
  return enable_;
}
inline bool Brake_cmd_104::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_cmd_104.enable)
  return _internal_enable();
}
inline void Brake_cmd_104::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_ = value;
}
inline void Brake_cmd_104::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_cmd_104.enable)
}

// optional bool clear_override = 3;
inline bool Brake_cmd_104::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Brake_cmd_104::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Brake_cmd_104::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Brake_cmd_104::_internal_clear_override() const {
  return clear_override_;
}
inline bool Brake_cmd_104::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_cmd_104.clear_override)
  return _internal_clear_override();
}
inline void Brake_cmd_104::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_override_ = value;
}
inline void Brake_cmd_104::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_cmd_104.clear_override)
}

// optional bool clear_faults = 4;
inline bool Brake_cmd_104::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Brake_cmd_104::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Brake_cmd_104::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Brake_cmd_104::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Brake_cmd_104::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_cmd_104.clear_faults)
  return _internal_clear_faults();
}
inline void Brake_cmd_104::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000010u;
  clear_faults_ = value;
}
inline void Brake_cmd_104::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_cmd_104.clear_faults)
}

// optional double brake_cmd = 5;
inline bool Brake_cmd_104::_internal_has_brake_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brake_cmd_104::has_brake_cmd() const {
  return _internal_has_brake_cmd();
}
inline void Brake_cmd_104::clear_brake_cmd() {
  brake_cmd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Brake_cmd_104::_internal_brake_cmd() const {
  return brake_cmd_;
}
inline double Brake_cmd_104::brake_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brake_cmd_104.brake_cmd)
  return _internal_brake_cmd();
}
inline void Brake_cmd_104::_internal_set_brake_cmd(double value) {
  _has_bits_[0] |= 0x00000001u;
  brake_cmd_ = value;
}
inline void Brake_cmd_104::set_brake_cmd(double value) {
  _internal_set_brake_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brake_cmd_104.brake_cmd)
}

// -------------------------------------------------------------------

// Media_controls_rpt_220

// optional .apollo.canbus.Media_controls_rpt_220.Output_valueType output_value = 1;
inline bool Media_controls_rpt_220::_internal_has_output_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_output_value() const {
  return _internal_has_output_value();
}
inline void Media_controls_rpt_220::clear_output_value() {
  output_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::_internal_output_value() const {
  return static_cast< ::apollo::canbus::Media_controls_rpt_220_Output_valueType >(output_value_);
}
inline ::apollo::canbus::Media_controls_rpt_220_Output_valueType Media_controls_rpt_220::output_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.output_value)
  return _internal_output_value();
}
inline void Media_controls_rpt_220::_internal_set_output_value(::apollo::canbus::Media_controls_rpt_220_Output_valueType value) {
  assert(::apollo::canbus::Media_controls_rpt_220_Output_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  output_value_ = value;
}
inline void Media_controls_rpt_220::set_output_value(::apollo::canbus::Media_controls_rpt_220_Output_valueType value) {
  _internal_set_output_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.output_value)
}

// optional .apollo.canbus.Media_controls_rpt_220.Commanded_valueType commanded_value = 2;
inline bool Media_controls_rpt_220::_internal_has_commanded_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_commanded_value() const {
  return _internal_has_commanded_value();
}
inline void Media_controls_rpt_220::clear_commanded_value() {
  commanded_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::_internal_commanded_value() const {
  return static_cast< ::apollo::canbus::Media_controls_rpt_220_Commanded_valueType >(commanded_value_);
}
inline ::apollo::canbus::Media_controls_rpt_220_Commanded_valueType Media_controls_rpt_220::commanded_value() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.commanded_value)
  return _internal_commanded_value();
}
inline void Media_controls_rpt_220::_internal_set_commanded_value(::apollo::canbus::Media_controls_rpt_220_Commanded_valueType value) {
  assert(::apollo::canbus::Media_controls_rpt_220_Commanded_valueType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  commanded_value_ = value;
}
inline void Media_controls_rpt_220::set_commanded_value(::apollo::canbus::Media_controls_rpt_220_Commanded_valueType value) {
  _internal_set_commanded_value(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.commanded_value)
}

// optional .apollo.canbus.Media_controls_rpt_220.Manual_inputType manual_input = 3;
inline bool Media_controls_rpt_220::_internal_has_manual_input() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_manual_input() const {
  return _internal_has_manual_input();
}
inline void Media_controls_rpt_220::clear_manual_input() {
  manual_input_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::_internal_manual_input() const {
  return static_cast< ::apollo::canbus::Media_controls_rpt_220_Manual_inputType >(manual_input_);
}
inline ::apollo::canbus::Media_controls_rpt_220_Manual_inputType Media_controls_rpt_220::manual_input() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.manual_input)
  return _internal_manual_input();
}
inline void Media_controls_rpt_220::_internal_set_manual_input(::apollo::canbus::Media_controls_rpt_220_Manual_inputType value) {
  assert(::apollo::canbus::Media_controls_rpt_220_Manual_inputType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  manual_input_ = value;
}
inline void Media_controls_rpt_220::set_manual_input(::apollo::canbus::Media_controls_rpt_220_Manual_inputType value) {
  _internal_set_manual_input(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.manual_input)
}

// optional bool vehicle_fault = 4;
inline bool Media_controls_rpt_220::_internal_has_vehicle_fault() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_vehicle_fault() const {
  return _internal_has_vehicle_fault();
}
inline void Media_controls_rpt_220::clear_vehicle_fault() {
  vehicle_fault_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Media_controls_rpt_220::_internal_vehicle_fault() const {
  return vehicle_fault_;
}
inline bool Media_controls_rpt_220::vehicle_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.vehicle_fault)
  return _internal_vehicle_fault();
}
inline void Media_controls_rpt_220::_internal_set_vehicle_fault(bool value) {
  _has_bits_[0] |= 0x00000008u;
  vehicle_fault_ = value;
}
inline void Media_controls_rpt_220::set_vehicle_fault(bool value) {
  _internal_set_vehicle_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.vehicle_fault)
}

// optional bool pacmod_fault = 5;
inline bool Media_controls_rpt_220::_internal_has_pacmod_fault() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_pacmod_fault() const {
  return _internal_has_pacmod_fault();
}
inline void Media_controls_rpt_220::clear_pacmod_fault() {
  pacmod_fault_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Media_controls_rpt_220::_internal_pacmod_fault() const {
  return pacmod_fault_;
}
inline bool Media_controls_rpt_220::pacmod_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.pacmod_fault)
  return _internal_pacmod_fault();
}
inline void Media_controls_rpt_220::_internal_set_pacmod_fault(bool value) {
  _has_bits_[0] |= 0x00000010u;
  pacmod_fault_ = value;
}
inline void Media_controls_rpt_220::set_pacmod_fault(bool value) {
  _internal_set_pacmod_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.pacmod_fault)
}

// optional bool override_active = 6;
inline bool Media_controls_rpt_220::_internal_has_override_active() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_override_active() const {
  return _internal_has_override_active();
}
inline void Media_controls_rpt_220::clear_override_active() {
  override_active_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Media_controls_rpt_220::_internal_override_active() const {
  return override_active_;
}
inline bool Media_controls_rpt_220::override_active() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.override_active)
  return _internal_override_active();
}
inline void Media_controls_rpt_220::_internal_set_override_active(bool value) {
  _has_bits_[0] |= 0x00000020u;
  override_active_ = value;
}
inline void Media_controls_rpt_220::set_override_active(bool value) {
  _internal_set_override_active(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.override_active)
}

// optional bool output_reported_fault = 7;
inline bool Media_controls_rpt_220::_internal_has_output_reported_fault() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_output_reported_fault() const {
  return _internal_has_output_reported_fault();
}
inline void Media_controls_rpt_220::clear_output_reported_fault() {
  output_reported_fault_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Media_controls_rpt_220::_internal_output_reported_fault() const {
  return output_reported_fault_;
}
inline bool Media_controls_rpt_220::output_reported_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.output_reported_fault)
  return _internal_output_reported_fault();
}
inline void Media_controls_rpt_220::_internal_set_output_reported_fault(bool value) {
  _has_bits_[0] |= 0x00000040u;
  output_reported_fault_ = value;
}
inline void Media_controls_rpt_220::set_output_reported_fault(bool value) {
  _internal_set_output_reported_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.output_reported_fault)
}

// optional bool input_output_fault = 8;
inline bool Media_controls_rpt_220::_internal_has_input_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_input_output_fault() const {
  return _internal_has_input_output_fault();
}
inline void Media_controls_rpt_220::clear_input_output_fault() {
  input_output_fault_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Media_controls_rpt_220::_internal_input_output_fault() const {
  return input_output_fault_;
}
inline bool Media_controls_rpt_220::input_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.input_output_fault)
  return _internal_input_output_fault();
}
inline void Media_controls_rpt_220::_internal_set_input_output_fault(bool value) {
  _has_bits_[0] |= 0x00000080u;
  input_output_fault_ = value;
}
inline void Media_controls_rpt_220::set_input_output_fault(bool value) {
  _internal_set_input_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.input_output_fault)
}

// optional bool enabled = 9;
inline bool Media_controls_rpt_220::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_enabled() const {
  return _internal_has_enabled();
}
inline void Media_controls_rpt_220::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Media_controls_rpt_220::_internal_enabled() const {
  return enabled_;
}
inline bool Media_controls_rpt_220::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.enabled)
  return _internal_enabled();
}
inline void Media_controls_rpt_220::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  enabled_ = value;
}
inline void Media_controls_rpt_220::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.enabled)
}

// optional bool command_output_fault = 10;
inline bool Media_controls_rpt_220::_internal_has_command_output_fault() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Media_controls_rpt_220::has_command_output_fault() const {
  return _internal_has_command_output_fault();
}
inline void Media_controls_rpt_220::clear_command_output_fault() {
  command_output_fault_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Media_controls_rpt_220::_internal_command_output_fault() const {
  return command_output_fault_;
}
inline bool Media_controls_rpt_220::command_output_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Media_controls_rpt_220.command_output_fault)
  return _internal_command_output_fault();
}
inline void Media_controls_rpt_220::_internal_set_command_output_fault(bool value) {
  _has_bits_[0] |= 0x00000200u;
  command_output_fault_ = value;
}
inline void Media_controls_rpt_220::set_command_output_fault(bool value) {
  _internal_set_command_output_fault(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Media_controls_rpt_220.command_output_fault)
}

// -------------------------------------------------------------------

// Steering_aux_rpt_32c

// optional bool user_interaction_is_valid = 1;
inline bool Steering_aux_rpt_32c::_internal_has_user_interaction_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steering_aux_rpt_32c::has_user_interaction_is_valid() const {
  return _internal_has_user_interaction_is_valid();
}
inline void Steering_aux_rpt_32c::clear_user_interaction_is_valid() {
  user_interaction_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Steering_aux_rpt_32c::_internal_user_interaction_is_valid() const {
  return user_interaction_is_valid_;
}
inline bool Steering_aux_rpt_32c::user_interaction_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_aux_rpt_32c.user_interaction_is_valid)
  return _internal_user_interaction_is_valid();
}
inline void Steering_aux_rpt_32c::_internal_set_user_interaction_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  user_interaction_is_valid_ = value;
}
inline void Steering_aux_rpt_32c::set_user_interaction_is_valid(bool value) {
  _internal_set_user_interaction_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_aux_rpt_32c.user_interaction_is_valid)
}

// optional bool user_interaction = 2;
inline bool Steering_aux_rpt_32c::_internal_has_user_interaction() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steering_aux_rpt_32c::has_user_interaction() const {
  return _internal_has_user_interaction();
}
inline void Steering_aux_rpt_32c::clear_user_interaction() {
  user_interaction_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Steering_aux_rpt_32c::_internal_user_interaction() const {
  return user_interaction_;
}
inline bool Steering_aux_rpt_32c::user_interaction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_aux_rpt_32c.user_interaction)
  return _internal_user_interaction();
}
inline void Steering_aux_rpt_32c::_internal_set_user_interaction(bool value) {
  _has_bits_[0] |= 0x00000002u;
  user_interaction_ = value;
}
inline void Steering_aux_rpt_32c::set_user_interaction(bool value) {
  _internal_set_user_interaction(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_aux_rpt_32c.user_interaction)
}

// optional bool rotation_rate_is_valid = 3;
inline bool Steering_aux_rpt_32c::_internal_has_rotation_rate_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Steering_aux_rpt_32c::has_rotation_rate_is_valid() const {
  return _internal_has_rotation_rate_is_valid();
}
inline void Steering_aux_rpt_32c::clear_rotation_rate_is_valid() {
  rotation_rate_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Steering_aux_rpt_32c::_internal_rotation_rate_is_valid() const {
  return rotation_rate_is_valid_;
}
inline bool Steering_aux_rpt_32c::rotation_rate_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_aux_rpt_32c.rotation_rate_is_valid)
  return _internal_rotation_rate_is_valid();
}
inline void Steering_aux_rpt_32c::_internal_set_rotation_rate_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  rotation_rate_is_valid_ = value;
}
inline void Steering_aux_rpt_32c::set_rotation_rate_is_valid(bool value) {
  _internal_set_rotation_rate_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_aux_rpt_32c.rotation_rate_is_valid)
}

// optional double rotation_rate = 4;
inline bool Steering_aux_rpt_32c::_internal_has_rotation_rate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Steering_aux_rpt_32c::has_rotation_rate() const {
  return _internal_has_rotation_rate();
}
inline void Steering_aux_rpt_32c::clear_rotation_rate() {
  rotation_rate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Steering_aux_rpt_32c::_internal_rotation_rate() const {
  return rotation_rate_;
}
inline double Steering_aux_rpt_32c::rotation_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_aux_rpt_32c.rotation_rate)
  return _internal_rotation_rate();
}
inline void Steering_aux_rpt_32c::_internal_set_rotation_rate(double value) {
  _has_bits_[0] |= 0x00000020u;
  rotation_rate_ = value;
}
inline void Steering_aux_rpt_32c::set_rotation_rate(double value) {
  _internal_set_rotation_rate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_aux_rpt_32c.rotation_rate)
}

// optional bool raw_torque_is_valid = 5;
inline bool Steering_aux_rpt_32c::_internal_has_raw_torque_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Steering_aux_rpt_32c::has_raw_torque_is_valid() const {
  return _internal_has_raw_torque_is_valid();
}
inline void Steering_aux_rpt_32c::clear_raw_torque_is_valid() {
  raw_torque_is_valid_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Steering_aux_rpt_32c::_internal_raw_torque_is_valid() const {
  return raw_torque_is_valid_;
}
inline bool Steering_aux_rpt_32c::raw_torque_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_aux_rpt_32c.raw_torque_is_valid)
  return _internal_raw_torque_is_valid();
}
inline void Steering_aux_rpt_32c::_internal_set_raw_torque_is_valid(bool value) {
  _has_bits_[0] |= 0x00000008u;
  raw_torque_is_valid_ = value;
}
inline void Steering_aux_rpt_32c::set_raw_torque_is_valid(bool value) {
  _internal_set_raw_torque_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_aux_rpt_32c.raw_torque_is_valid)
}

// optional double raw_torque = 6;
inline bool Steering_aux_rpt_32c::_internal_has_raw_torque() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Steering_aux_rpt_32c::has_raw_torque() const {
  return _internal_has_raw_torque();
}
inline void Steering_aux_rpt_32c::clear_raw_torque() {
  raw_torque_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Steering_aux_rpt_32c::_internal_raw_torque() const {
  return raw_torque_;
}
inline double Steering_aux_rpt_32c::raw_torque() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_aux_rpt_32c.raw_torque)
  return _internal_raw_torque();
}
inline void Steering_aux_rpt_32c::_internal_set_raw_torque(double value) {
  _has_bits_[0] |= 0x00000040u;
  raw_torque_ = value;
}
inline void Steering_aux_rpt_32c::set_raw_torque(double value) {
  _internal_set_raw_torque(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_aux_rpt_32c.raw_torque)
}

// optional bool raw_position_is_valid = 7;
inline bool Steering_aux_rpt_32c::_internal_has_raw_position_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Steering_aux_rpt_32c::has_raw_position_is_valid() const {
  return _internal_has_raw_position_is_valid();
}
inline void Steering_aux_rpt_32c::clear_raw_position_is_valid() {
  raw_position_is_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Steering_aux_rpt_32c::_internal_raw_position_is_valid() const {
  return raw_position_is_valid_;
}
inline bool Steering_aux_rpt_32c::raw_position_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_aux_rpt_32c.raw_position_is_valid)
  return _internal_raw_position_is_valid();
}
inline void Steering_aux_rpt_32c::_internal_set_raw_position_is_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  raw_position_is_valid_ = value;
}
inline void Steering_aux_rpt_32c::set_raw_position_is_valid(bool value) {
  _internal_set_raw_position_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_aux_rpt_32c.raw_position_is_valid)
}

// optional double raw_position = 8;
inline bool Steering_aux_rpt_32c::_internal_has_raw_position() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Steering_aux_rpt_32c::has_raw_position() const {
  return _internal_has_raw_position();
}
inline void Steering_aux_rpt_32c::clear_raw_position() {
  raw_position_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Steering_aux_rpt_32c::_internal_raw_position() const {
  return raw_position_;
}
inline double Steering_aux_rpt_32c::raw_position() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Steering_aux_rpt_32c.raw_position)
  return _internal_raw_position();
}
inline void Steering_aux_rpt_32c::_internal_set_raw_position(double value) {
  _has_bits_[0] |= 0x00000080u;
  raw_position_ = value;
}
inline void Steering_aux_rpt_32c::set_raw_position(double value) {
  _internal_set_raw_position(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Steering_aux_rpt_32c.raw_position)
}

// -------------------------------------------------------------------

// Lat_lon_heading_rpt_40e

// optional double heading = 1;
inline bool Lat_lon_heading_rpt_40e::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Lat_lon_heading_rpt_40e::has_heading() const {
  return _internal_has_heading();
}
inline void Lat_lon_heading_rpt_40e::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Lat_lon_heading_rpt_40e::_internal_heading() const {
  return heading_;
}
inline double Lat_lon_heading_rpt_40e::heading() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lat_lon_heading_rpt_40e.heading)
  return _internal_heading();
}
inline void Lat_lon_heading_rpt_40e::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000001u;
  heading_ = value;
}
inline void Lat_lon_heading_rpt_40e::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lat_lon_heading_rpt_40e.heading)
}

// optional int32 longitude_seconds = 2;
inline bool Lat_lon_heading_rpt_40e::_internal_has_longitude_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Lat_lon_heading_rpt_40e::has_longitude_seconds() const {
  return _internal_has_longitude_seconds();
}
inline void Lat_lon_heading_rpt_40e::clear_longitude_seconds() {
  longitude_seconds_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::_internal_longitude_seconds() const {
  return longitude_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::longitude_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lat_lon_heading_rpt_40e.longitude_seconds)
  return _internal_longitude_seconds();
}
inline void Lat_lon_heading_rpt_40e::_internal_set_longitude_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_seconds_ = value;
}
inline void Lat_lon_heading_rpt_40e::set_longitude_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_longitude_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lat_lon_heading_rpt_40e.longitude_seconds)
}

// optional int32 longitude_minutes = 3;
inline bool Lat_lon_heading_rpt_40e::_internal_has_longitude_minutes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Lat_lon_heading_rpt_40e::has_longitude_minutes() const {
  return _internal_has_longitude_minutes();
}
inline void Lat_lon_heading_rpt_40e::clear_longitude_minutes() {
  longitude_minutes_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::_internal_longitude_minutes() const {
  return longitude_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::longitude_minutes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lat_lon_heading_rpt_40e.longitude_minutes)
  return _internal_longitude_minutes();
}
inline void Lat_lon_heading_rpt_40e::_internal_set_longitude_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  longitude_minutes_ = value;
}
inline void Lat_lon_heading_rpt_40e::set_longitude_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_longitude_minutes(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lat_lon_heading_rpt_40e.longitude_minutes)
}

// optional int32 longitude_degrees = 4;
inline bool Lat_lon_heading_rpt_40e::_internal_has_longitude_degrees() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Lat_lon_heading_rpt_40e::has_longitude_degrees() const {
  return _internal_has_longitude_degrees();
}
inline void Lat_lon_heading_rpt_40e::clear_longitude_degrees() {
  longitude_degrees_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::_internal_longitude_degrees() const {
  return longitude_degrees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::longitude_degrees() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lat_lon_heading_rpt_40e.longitude_degrees)
  return _internal_longitude_degrees();
}
inline void Lat_lon_heading_rpt_40e::_internal_set_longitude_degrees(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  longitude_degrees_ = value;
}
inline void Lat_lon_heading_rpt_40e::set_longitude_degrees(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_longitude_degrees(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lat_lon_heading_rpt_40e.longitude_degrees)
}

// optional int32 latitude_seconds = 5;
inline bool Lat_lon_heading_rpt_40e::_internal_has_latitude_seconds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Lat_lon_heading_rpt_40e::has_latitude_seconds() const {
  return _internal_has_latitude_seconds();
}
inline void Lat_lon_heading_rpt_40e::clear_latitude_seconds() {
  latitude_seconds_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::_internal_latitude_seconds() const {
  return latitude_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::latitude_seconds() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lat_lon_heading_rpt_40e.latitude_seconds)
  return _internal_latitude_seconds();
}
inline void Lat_lon_heading_rpt_40e::_internal_set_latitude_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  latitude_seconds_ = value;
}
inline void Lat_lon_heading_rpt_40e::set_latitude_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_latitude_seconds(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lat_lon_heading_rpt_40e.latitude_seconds)
}

// optional int32 latitude_minutes = 6;
inline bool Lat_lon_heading_rpt_40e::_internal_has_latitude_minutes() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Lat_lon_heading_rpt_40e::has_latitude_minutes() const {
  return _internal_has_latitude_minutes();
}
inline void Lat_lon_heading_rpt_40e::clear_latitude_minutes() {
  latitude_minutes_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::_internal_latitude_minutes() const {
  return latitude_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::latitude_minutes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lat_lon_heading_rpt_40e.latitude_minutes)
  return _internal_latitude_minutes();
}
inline void Lat_lon_heading_rpt_40e::_internal_set_latitude_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  latitude_minutes_ = value;
}
inline void Lat_lon_heading_rpt_40e::set_latitude_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_latitude_minutes(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lat_lon_heading_rpt_40e.latitude_minutes)
}

// optional int32 latitude_degrees = 7;
inline bool Lat_lon_heading_rpt_40e::_internal_has_latitude_degrees() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Lat_lon_heading_rpt_40e::has_latitude_degrees() const {
  return _internal_has_latitude_degrees();
}
inline void Lat_lon_heading_rpt_40e::clear_latitude_degrees() {
  latitude_degrees_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::_internal_latitude_degrees() const {
  return latitude_degrees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lat_lon_heading_rpt_40e::latitude_degrees() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lat_lon_heading_rpt_40e.latitude_degrees)
  return _internal_latitude_degrees();
}
inline void Lat_lon_heading_rpt_40e::_internal_set_latitude_degrees(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  latitude_degrees_ = value;
}
inline void Lat_lon_heading_rpt_40e::set_latitude_degrees(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_latitude_degrees(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lat_lon_heading_rpt_40e.latitude_degrees)
}

// -------------------------------------------------------------------

// Yaw_rate_rpt_40d

// optional double yaw_rate = 1;
inline bool Yaw_rate_rpt_40d::_internal_has_yaw_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Yaw_rate_rpt_40d::has_yaw_rate() const {
  return _internal_has_yaw_rate();
}
inline void Yaw_rate_rpt_40d::clear_yaw_rate() {
  yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Yaw_rate_rpt_40d::_internal_yaw_rate() const {
  return yaw_rate_;
}
inline double Yaw_rate_rpt_40d::yaw_rate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Yaw_rate_rpt_40d.yaw_rate)
  return _internal_yaw_rate();
}
inline void Yaw_rate_rpt_40d::_internal_set_yaw_rate(double value) {
  _has_bits_[0] |= 0x00000001u;
  yaw_rate_ = value;
}
inline void Yaw_rate_rpt_40d::set_yaw_rate(double value) {
  _internal_set_yaw_rate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Yaw_rate_rpt_40d.yaw_rate)
}

// -------------------------------------------------------------------

// Date_time_rpt_40f

// optional int32 time_second = 1;
inline bool Date_time_rpt_40f::_internal_has_time_second() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Date_time_rpt_40f::has_time_second() const {
  return _internal_has_time_second();
}
inline void Date_time_rpt_40f::clear_time_second() {
  time_second_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::_internal_time_second() const {
  return time_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::time_second() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Date_time_rpt_40f.time_second)
  return _internal_time_second();
}
inline void Date_time_rpt_40f::_internal_set_time_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  time_second_ = value;
}
inline void Date_time_rpt_40f::set_time_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_second(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Date_time_rpt_40f.time_second)
}

// optional int32 time_minute = 2;
inline bool Date_time_rpt_40f::_internal_has_time_minute() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Date_time_rpt_40f::has_time_minute() const {
  return _internal_has_time_minute();
}
inline void Date_time_rpt_40f::clear_time_minute() {
  time_minute_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::_internal_time_minute() const {
  return time_minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::time_minute() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Date_time_rpt_40f.time_minute)
  return _internal_time_minute();
}
inline void Date_time_rpt_40f::_internal_set_time_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_minute_ = value;
}
inline void Date_time_rpt_40f::set_time_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_minute(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Date_time_rpt_40f.time_minute)
}

// optional int32 time_hour = 3;
inline bool Date_time_rpt_40f::_internal_has_time_hour() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Date_time_rpt_40f::has_time_hour() const {
  return _internal_has_time_hour();
}
inline void Date_time_rpt_40f::clear_time_hour() {
  time_hour_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::_internal_time_hour() const {
  return time_hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::time_hour() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Date_time_rpt_40f.time_hour)
  return _internal_time_hour();
}
inline void Date_time_rpt_40f::_internal_set_time_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  time_hour_ = value;
}
inline void Date_time_rpt_40f::set_time_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time_hour(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Date_time_rpt_40f.time_hour)
}

// optional int32 date_day = 4;
inline bool Date_time_rpt_40f::_internal_has_date_day() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Date_time_rpt_40f::has_date_day() const {
  return _internal_has_date_day();
}
inline void Date_time_rpt_40f::clear_date_day() {
  date_day_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::_internal_date_day() const {
  return date_day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::date_day() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Date_time_rpt_40f.date_day)
  return _internal_date_day();
}
inline void Date_time_rpt_40f::_internal_set_date_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  date_day_ = value;
}
inline void Date_time_rpt_40f::set_date_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_date_day(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Date_time_rpt_40f.date_day)
}

// optional int32 date_month = 5;
inline bool Date_time_rpt_40f::_internal_has_date_month() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Date_time_rpt_40f::has_date_month() const {
  return _internal_has_date_month();
}
inline void Date_time_rpt_40f::clear_date_month() {
  date_month_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::_internal_date_month() const {
  return date_month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::date_month() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Date_time_rpt_40f.date_month)
  return _internal_date_month();
}
inline void Date_time_rpt_40f::_internal_set_date_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  date_month_ = value;
}
inline void Date_time_rpt_40f::set_date_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_date_month(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Date_time_rpt_40f.date_month)
}

// optional int32 date_year = 6;
inline bool Date_time_rpt_40f::_internal_has_date_year() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Date_time_rpt_40f::has_date_year() const {
  return _internal_has_date_year();
}
inline void Date_time_rpt_40f::clear_date_year() {
  date_year_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::_internal_date_year() const {
  return date_year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date_time_rpt_40f::date_year() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Date_time_rpt_40f.date_year)
  return _internal_date_year();
}
inline void Date_time_rpt_40f::_internal_set_date_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  date_year_ = value;
}
inline void Date_time_rpt_40f::set_date_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_date_year(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Date_time_rpt_40f.date_year)
}

// -------------------------------------------------------------------

// Vin_rpt_414

// optional int32 veh_serial = 1;
inline bool Vin_rpt_414::_internal_has_veh_serial() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vin_rpt_414::has_veh_serial() const {
  return _internal_has_veh_serial();
}
inline void Vin_rpt_414::clear_veh_serial() {
  veh_serial_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vin_rpt_414::_internal_veh_serial() const {
  return veh_serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vin_rpt_414::veh_serial() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vin_rpt_414.veh_serial)
  return _internal_veh_serial();
}
inline void Vin_rpt_414::_internal_set_veh_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  veh_serial_ = value;
}
inline void Vin_rpt_414::set_veh_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_veh_serial(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vin_rpt_414.veh_serial)
}

// optional int32 veh_my_code = 2;
inline bool Vin_rpt_414::_internal_has_veh_my_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vin_rpt_414::has_veh_my_code() const {
  return _internal_has_veh_my_code();
}
inline void Vin_rpt_414::clear_veh_my_code() {
  veh_my_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vin_rpt_414::_internal_veh_my_code() const {
  return veh_my_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vin_rpt_414::veh_my_code() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vin_rpt_414.veh_my_code)
  return _internal_veh_my_code();
}
inline void Vin_rpt_414::_internal_set_veh_my_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  veh_my_code_ = value;
}
inline void Vin_rpt_414::set_veh_my_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_veh_my_code(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vin_rpt_414.veh_my_code)
}

// optional int32 veh_mfg_code = 3;
inline bool Vin_rpt_414::_internal_has_veh_mfg_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vin_rpt_414::has_veh_mfg_code() const {
  return _internal_has_veh_mfg_code();
}
inline void Vin_rpt_414::clear_veh_mfg_code() {
  veh_mfg_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vin_rpt_414::_internal_veh_mfg_code() const {
  return veh_mfg_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vin_rpt_414::veh_mfg_code() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vin_rpt_414.veh_mfg_code)
  return _internal_veh_mfg_code();
}
inline void Vin_rpt_414::_internal_set_veh_mfg_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  veh_mfg_code_ = value;
}
inline void Vin_rpt_414::set_veh_mfg_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_veh_mfg_code(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vin_rpt_414.veh_mfg_code)
}

// -------------------------------------------------------------------

// Occupancy_rpt_415

// optional bool rear_seatbelt_buckled_is_valid = 1;
inline bool Occupancy_rpt_415::_internal_has_rear_seatbelt_buckled_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_rear_seatbelt_buckled_is_valid() const {
  return _internal_has_rear_seatbelt_buckled_is_valid();
}
inline void Occupancy_rpt_415::clear_rear_seatbelt_buckled_is_valid() {
  rear_seatbelt_buckled_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Occupancy_rpt_415::_internal_rear_seatbelt_buckled_is_valid() const {
  return rear_seatbelt_buckled_is_valid_;
}
inline bool Occupancy_rpt_415::rear_seatbelt_buckled_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.rear_seatbelt_buckled_is_valid)
  return _internal_rear_seatbelt_buckled_is_valid();
}
inline void Occupancy_rpt_415::_internal_set_rear_seatbelt_buckled_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  rear_seatbelt_buckled_is_valid_ = value;
}
inline void Occupancy_rpt_415::set_rear_seatbelt_buckled_is_valid(bool value) {
  _internal_set_rear_seatbelt_buckled_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.rear_seatbelt_buckled_is_valid)
}

// optional bool pass_seatbelt_buckled_is_valid = 2;
inline bool Occupancy_rpt_415::_internal_has_pass_seatbelt_buckled_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_pass_seatbelt_buckled_is_valid() const {
  return _internal_has_pass_seatbelt_buckled_is_valid();
}
inline void Occupancy_rpt_415::clear_pass_seatbelt_buckled_is_valid() {
  pass_seatbelt_buckled_is_valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Occupancy_rpt_415::_internal_pass_seatbelt_buckled_is_valid() const {
  return pass_seatbelt_buckled_is_valid_;
}
inline bool Occupancy_rpt_415::pass_seatbelt_buckled_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.pass_seatbelt_buckled_is_valid)
  return _internal_pass_seatbelt_buckled_is_valid();
}
inline void Occupancy_rpt_415::_internal_set_pass_seatbelt_buckled_is_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  pass_seatbelt_buckled_is_valid_ = value;
}
inline void Occupancy_rpt_415::set_pass_seatbelt_buckled_is_valid(bool value) {
  _internal_set_pass_seatbelt_buckled_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.pass_seatbelt_buckled_is_valid)
}

// optional bool driver_seatbelt_buckled_is_valid = 3;
inline bool Occupancy_rpt_415::_internal_has_driver_seatbelt_buckled_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_driver_seatbelt_buckled_is_valid() const {
  return _internal_has_driver_seatbelt_buckled_is_valid();
}
inline void Occupancy_rpt_415::clear_driver_seatbelt_buckled_is_valid() {
  driver_seatbelt_buckled_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Occupancy_rpt_415::_internal_driver_seatbelt_buckled_is_valid() const {
  return driver_seatbelt_buckled_is_valid_;
}
inline bool Occupancy_rpt_415::driver_seatbelt_buckled_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.driver_seatbelt_buckled_is_valid)
  return _internal_driver_seatbelt_buckled_is_valid();
}
inline void Occupancy_rpt_415::_internal_set_driver_seatbelt_buckled_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  driver_seatbelt_buckled_is_valid_ = value;
}
inline void Occupancy_rpt_415::set_driver_seatbelt_buckled_is_valid(bool value) {
  _internal_set_driver_seatbelt_buckled_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.driver_seatbelt_buckled_is_valid)
}

// optional bool rear_seat_occupied_is_valid = 4;
inline bool Occupancy_rpt_415::_internal_has_rear_seat_occupied_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_rear_seat_occupied_is_valid() const {
  return _internal_has_rear_seat_occupied_is_valid();
}
inline void Occupancy_rpt_415::clear_rear_seat_occupied_is_valid() {
  rear_seat_occupied_is_valid_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Occupancy_rpt_415::_internal_rear_seat_occupied_is_valid() const {
  return rear_seat_occupied_is_valid_;
}
inline bool Occupancy_rpt_415::rear_seat_occupied_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.rear_seat_occupied_is_valid)
  return _internal_rear_seat_occupied_is_valid();
}
inline void Occupancy_rpt_415::_internal_set_rear_seat_occupied_is_valid(bool value) {
  _has_bits_[0] |= 0x00000008u;
  rear_seat_occupied_is_valid_ = value;
}
inline void Occupancy_rpt_415::set_rear_seat_occupied_is_valid(bool value) {
  _internal_set_rear_seat_occupied_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.rear_seat_occupied_is_valid)
}

// optional bool pass_seat_occupied_is_valid = 5;
inline bool Occupancy_rpt_415::_internal_has_pass_seat_occupied_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_pass_seat_occupied_is_valid() const {
  return _internal_has_pass_seat_occupied_is_valid();
}
inline void Occupancy_rpt_415::clear_pass_seat_occupied_is_valid() {
  pass_seat_occupied_is_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Occupancy_rpt_415::_internal_pass_seat_occupied_is_valid() const {
  return pass_seat_occupied_is_valid_;
}
inline bool Occupancy_rpt_415::pass_seat_occupied_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.pass_seat_occupied_is_valid)
  return _internal_pass_seat_occupied_is_valid();
}
inline void Occupancy_rpt_415::_internal_set_pass_seat_occupied_is_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  pass_seat_occupied_is_valid_ = value;
}
inline void Occupancy_rpt_415::set_pass_seat_occupied_is_valid(bool value) {
  _internal_set_pass_seat_occupied_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.pass_seat_occupied_is_valid)
}

// optional bool driver_seat_occupied_is_valid = 6;
inline bool Occupancy_rpt_415::_internal_has_driver_seat_occupied_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_driver_seat_occupied_is_valid() const {
  return _internal_has_driver_seat_occupied_is_valid();
}
inline void Occupancy_rpt_415::clear_driver_seat_occupied_is_valid() {
  driver_seat_occupied_is_valid_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Occupancy_rpt_415::_internal_driver_seat_occupied_is_valid() const {
  return driver_seat_occupied_is_valid_;
}
inline bool Occupancy_rpt_415::driver_seat_occupied_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.driver_seat_occupied_is_valid)
  return _internal_driver_seat_occupied_is_valid();
}
inline void Occupancy_rpt_415::_internal_set_driver_seat_occupied_is_valid(bool value) {
  _has_bits_[0] |= 0x00000020u;
  driver_seat_occupied_is_valid_ = value;
}
inline void Occupancy_rpt_415::set_driver_seat_occupied_is_valid(bool value) {
  _internal_set_driver_seat_occupied_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.driver_seat_occupied_is_valid)
}

// optional bool rear_seatbelt_buckled = 7;
inline bool Occupancy_rpt_415::_internal_has_rear_seatbelt_buckled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_rear_seatbelt_buckled() const {
  return _internal_has_rear_seatbelt_buckled();
}
inline void Occupancy_rpt_415::clear_rear_seatbelt_buckled() {
  rear_seatbelt_buckled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Occupancy_rpt_415::_internal_rear_seatbelt_buckled() const {
  return rear_seatbelt_buckled_;
}
inline bool Occupancy_rpt_415::rear_seatbelt_buckled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.rear_seatbelt_buckled)
  return _internal_rear_seatbelt_buckled();
}
inline void Occupancy_rpt_415::_internal_set_rear_seatbelt_buckled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  rear_seatbelt_buckled_ = value;
}
inline void Occupancy_rpt_415::set_rear_seatbelt_buckled(bool value) {
  _internal_set_rear_seatbelt_buckled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.rear_seatbelt_buckled)
}

// optional bool pass_seatbelt_buckled = 8;
inline bool Occupancy_rpt_415::_internal_has_pass_seatbelt_buckled() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_pass_seatbelt_buckled() const {
  return _internal_has_pass_seatbelt_buckled();
}
inline void Occupancy_rpt_415::clear_pass_seatbelt_buckled() {
  pass_seatbelt_buckled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Occupancy_rpt_415::_internal_pass_seatbelt_buckled() const {
  return pass_seatbelt_buckled_;
}
inline bool Occupancy_rpt_415::pass_seatbelt_buckled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.pass_seatbelt_buckled)
  return _internal_pass_seatbelt_buckled();
}
inline void Occupancy_rpt_415::_internal_set_pass_seatbelt_buckled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  pass_seatbelt_buckled_ = value;
}
inline void Occupancy_rpt_415::set_pass_seatbelt_buckled(bool value) {
  _internal_set_pass_seatbelt_buckled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.pass_seatbelt_buckled)
}

// optional bool driver_seatbelt_buckled = 9;
inline bool Occupancy_rpt_415::_internal_has_driver_seatbelt_buckled() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_driver_seatbelt_buckled() const {
  return _internal_has_driver_seatbelt_buckled();
}
inline void Occupancy_rpt_415::clear_driver_seatbelt_buckled() {
  driver_seatbelt_buckled_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Occupancy_rpt_415::_internal_driver_seatbelt_buckled() const {
  return driver_seatbelt_buckled_;
}
inline bool Occupancy_rpt_415::driver_seatbelt_buckled() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.driver_seatbelt_buckled)
  return _internal_driver_seatbelt_buckled();
}
inline void Occupancy_rpt_415::_internal_set_driver_seatbelt_buckled(bool value) {
  _has_bits_[0] |= 0x00000100u;
  driver_seatbelt_buckled_ = value;
}
inline void Occupancy_rpt_415::set_driver_seatbelt_buckled(bool value) {
  _internal_set_driver_seatbelt_buckled(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.driver_seatbelt_buckled)
}

// optional bool rear_seat_occupied = 10;
inline bool Occupancy_rpt_415::_internal_has_rear_seat_occupied() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_rear_seat_occupied() const {
  return _internal_has_rear_seat_occupied();
}
inline void Occupancy_rpt_415::clear_rear_seat_occupied() {
  rear_seat_occupied_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Occupancy_rpt_415::_internal_rear_seat_occupied() const {
  return rear_seat_occupied_;
}
inline bool Occupancy_rpt_415::rear_seat_occupied() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.rear_seat_occupied)
  return _internal_rear_seat_occupied();
}
inline void Occupancy_rpt_415::_internal_set_rear_seat_occupied(bool value) {
  _has_bits_[0] |= 0x00000200u;
  rear_seat_occupied_ = value;
}
inline void Occupancy_rpt_415::set_rear_seat_occupied(bool value) {
  _internal_set_rear_seat_occupied(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.rear_seat_occupied)
}

// optional bool pass_seat_occupied = 11;
inline bool Occupancy_rpt_415::_internal_has_pass_seat_occupied() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_pass_seat_occupied() const {
  return _internal_has_pass_seat_occupied();
}
inline void Occupancy_rpt_415::clear_pass_seat_occupied() {
  pass_seat_occupied_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Occupancy_rpt_415::_internal_pass_seat_occupied() const {
  return pass_seat_occupied_;
}
inline bool Occupancy_rpt_415::pass_seat_occupied() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.pass_seat_occupied)
  return _internal_pass_seat_occupied();
}
inline void Occupancy_rpt_415::_internal_set_pass_seat_occupied(bool value) {
  _has_bits_[0] |= 0x00000400u;
  pass_seat_occupied_ = value;
}
inline void Occupancy_rpt_415::set_pass_seat_occupied(bool value) {
  _internal_set_pass_seat_occupied(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.pass_seat_occupied)
}

// optional bool driver_seat_occupied = 12;
inline bool Occupancy_rpt_415::_internal_has_driver_seat_occupied() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Occupancy_rpt_415::has_driver_seat_occupied() const {
  return _internal_has_driver_seat_occupied();
}
inline void Occupancy_rpt_415::clear_driver_seat_occupied() {
  driver_seat_occupied_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Occupancy_rpt_415::_internal_driver_seat_occupied() const {
  return driver_seat_occupied_;
}
inline bool Occupancy_rpt_415::driver_seat_occupied() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Occupancy_rpt_415.driver_seat_occupied)
  return _internal_driver_seat_occupied();
}
inline void Occupancy_rpt_415::_internal_set_driver_seat_occupied(bool value) {
  _has_bits_[0] |= 0x00000800u;
  driver_seat_occupied_ = value;
}
inline void Occupancy_rpt_415::set_driver_seat_occupied(bool value) {
  _internal_set_driver_seat_occupied(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Occupancy_rpt_415.driver_seat_occupied)
}

// -------------------------------------------------------------------

// Interior_lights_rpt_416

// optional bool dim_level_is_valid = 1;
inline bool Interior_lights_rpt_416::_internal_has_dim_level_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Interior_lights_rpt_416::has_dim_level_is_valid() const {
  return _internal_has_dim_level_is_valid();
}
inline void Interior_lights_rpt_416::clear_dim_level_is_valid() {
  dim_level_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Interior_lights_rpt_416::_internal_dim_level_is_valid() const {
  return dim_level_is_valid_;
}
inline bool Interior_lights_rpt_416::dim_level_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Interior_lights_rpt_416.dim_level_is_valid)
  return _internal_dim_level_is_valid();
}
inline void Interior_lights_rpt_416::_internal_set_dim_level_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  dim_level_is_valid_ = value;
}
inline void Interior_lights_rpt_416::set_dim_level_is_valid(bool value) {
  _internal_set_dim_level_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Interior_lights_rpt_416.dim_level_is_valid)
}

// optional bool mood_lights_on_is_valid = 2;
inline bool Interior_lights_rpt_416::_internal_has_mood_lights_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Interior_lights_rpt_416::has_mood_lights_on_is_valid() const {
  return _internal_has_mood_lights_on_is_valid();
}
inline void Interior_lights_rpt_416::clear_mood_lights_on_is_valid() {
  mood_lights_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Interior_lights_rpt_416::_internal_mood_lights_on_is_valid() const {
  return mood_lights_on_is_valid_;
}
inline bool Interior_lights_rpt_416::mood_lights_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Interior_lights_rpt_416.mood_lights_on_is_valid)
  return _internal_mood_lights_on_is_valid();
}
inline void Interior_lights_rpt_416::_internal_set_mood_lights_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  mood_lights_on_is_valid_ = value;
}
inline void Interior_lights_rpt_416::set_mood_lights_on_is_valid(bool value) {
  _internal_set_mood_lights_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Interior_lights_rpt_416.mood_lights_on_is_valid)
}

// optional bool rear_dome_lights_on_is_valid = 3;
inline bool Interior_lights_rpt_416::_internal_has_rear_dome_lights_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Interior_lights_rpt_416::has_rear_dome_lights_on_is_valid() const {
  return _internal_has_rear_dome_lights_on_is_valid();
}
inline void Interior_lights_rpt_416::clear_rear_dome_lights_on_is_valid() {
  rear_dome_lights_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Interior_lights_rpt_416::_internal_rear_dome_lights_on_is_valid() const {
  return rear_dome_lights_on_is_valid_;
}
inline bool Interior_lights_rpt_416::rear_dome_lights_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Interior_lights_rpt_416.rear_dome_lights_on_is_valid)
  return _internal_rear_dome_lights_on_is_valid();
}
inline void Interior_lights_rpt_416::_internal_set_rear_dome_lights_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  rear_dome_lights_on_is_valid_ = value;
}
inline void Interior_lights_rpt_416::set_rear_dome_lights_on_is_valid(bool value) {
  _internal_set_rear_dome_lights_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Interior_lights_rpt_416.rear_dome_lights_on_is_valid)
}

// optional bool front_dome_lights_on_is_valid = 4;
inline bool Interior_lights_rpt_416::_internal_has_front_dome_lights_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Interior_lights_rpt_416::has_front_dome_lights_on_is_valid() const {
  return _internal_has_front_dome_lights_on_is_valid();
}
inline void Interior_lights_rpt_416::clear_front_dome_lights_on_is_valid() {
  front_dome_lights_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Interior_lights_rpt_416::_internal_front_dome_lights_on_is_valid() const {
  return front_dome_lights_on_is_valid_;
}
inline bool Interior_lights_rpt_416::front_dome_lights_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Interior_lights_rpt_416.front_dome_lights_on_is_valid)
  return _internal_front_dome_lights_on_is_valid();
}
inline void Interior_lights_rpt_416::_internal_set_front_dome_lights_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000008u;
  front_dome_lights_on_is_valid_ = value;
}
inline void Interior_lights_rpt_416::set_front_dome_lights_on_is_valid(bool value) {
  _internal_set_front_dome_lights_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Interior_lights_rpt_416.front_dome_lights_on_is_valid)
}

// optional .apollo.canbus.Interior_lights_rpt_416.Dim_levelType dim_level = 5;
inline bool Interior_lights_rpt_416::_internal_has_dim_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Interior_lights_rpt_416::has_dim_level() const {
  return _internal_has_dim_level();
}
inline void Interior_lights_rpt_416::clear_dim_level() {
  dim_level_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::_internal_dim_level() const {
  return static_cast< ::apollo::canbus::Interior_lights_rpt_416_Dim_levelType >(dim_level_);
}
inline ::apollo::canbus::Interior_lights_rpt_416_Dim_levelType Interior_lights_rpt_416::dim_level() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Interior_lights_rpt_416.dim_level)
  return _internal_dim_level();
}
inline void Interior_lights_rpt_416::_internal_set_dim_level(::apollo::canbus::Interior_lights_rpt_416_Dim_levelType value) {
  assert(::apollo::canbus::Interior_lights_rpt_416_Dim_levelType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dim_level_ = value;
}
inline void Interior_lights_rpt_416::set_dim_level(::apollo::canbus::Interior_lights_rpt_416_Dim_levelType value) {
  _internal_set_dim_level(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Interior_lights_rpt_416.dim_level)
}

// optional bool mood_lights_on = 6;
inline bool Interior_lights_rpt_416::_internal_has_mood_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Interior_lights_rpt_416::has_mood_lights_on() const {
  return _internal_has_mood_lights_on();
}
inline void Interior_lights_rpt_416::clear_mood_lights_on() {
  mood_lights_on_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Interior_lights_rpt_416::_internal_mood_lights_on() const {
  return mood_lights_on_;
}
inline bool Interior_lights_rpt_416::mood_lights_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Interior_lights_rpt_416.mood_lights_on)
  return _internal_mood_lights_on();
}
inline void Interior_lights_rpt_416::_internal_set_mood_lights_on(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mood_lights_on_ = value;
}
inline void Interior_lights_rpt_416::set_mood_lights_on(bool value) {
  _internal_set_mood_lights_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Interior_lights_rpt_416.mood_lights_on)
}

// optional bool rear_dome_lights_on = 7;
inline bool Interior_lights_rpt_416::_internal_has_rear_dome_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Interior_lights_rpt_416::has_rear_dome_lights_on() const {
  return _internal_has_rear_dome_lights_on();
}
inline void Interior_lights_rpt_416::clear_rear_dome_lights_on() {
  rear_dome_lights_on_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Interior_lights_rpt_416::_internal_rear_dome_lights_on() const {
  return rear_dome_lights_on_;
}
inline bool Interior_lights_rpt_416::rear_dome_lights_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Interior_lights_rpt_416.rear_dome_lights_on)
  return _internal_rear_dome_lights_on();
}
inline void Interior_lights_rpt_416::_internal_set_rear_dome_lights_on(bool value) {
  _has_bits_[0] |= 0x00000040u;
  rear_dome_lights_on_ = value;
}
inline void Interior_lights_rpt_416::set_rear_dome_lights_on(bool value) {
  _internal_set_rear_dome_lights_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Interior_lights_rpt_416.rear_dome_lights_on)
}

// optional bool front_dome_lights_on = 8;
inline bool Interior_lights_rpt_416::_internal_has_front_dome_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Interior_lights_rpt_416::has_front_dome_lights_on() const {
  return _internal_has_front_dome_lights_on();
}
inline void Interior_lights_rpt_416::clear_front_dome_lights_on() {
  front_dome_lights_on_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Interior_lights_rpt_416::_internal_front_dome_lights_on() const {
  return front_dome_lights_on_;
}
inline bool Interior_lights_rpt_416::front_dome_lights_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Interior_lights_rpt_416.front_dome_lights_on)
  return _internal_front_dome_lights_on();
}
inline void Interior_lights_rpt_416::_internal_set_front_dome_lights_on(bool value) {
  _has_bits_[0] |= 0x00000080u;
  front_dome_lights_on_ = value;
}
inline void Interior_lights_rpt_416::set_front_dome_lights_on(bool value) {
  _internal_set_front_dome_lights_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Interior_lights_rpt_416.front_dome_lights_on)
}

// -------------------------------------------------------------------

// Turn_cmd_130

// optional bool ignore_overrides = 1;
inline bool Turn_cmd_130::_internal_has_ignore_overrides() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Turn_cmd_130::has_ignore_overrides() const {
  return _internal_has_ignore_overrides();
}
inline void Turn_cmd_130::clear_ignore_overrides() {
  ignore_overrides_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Turn_cmd_130::_internal_ignore_overrides() const {
  return ignore_overrides_;
}
inline bool Turn_cmd_130::ignore_overrides() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_cmd_130.ignore_overrides)
  return _internal_ignore_overrides();
}
inline void Turn_cmd_130::_internal_set_ignore_overrides(bool value) {
  _has_bits_[0] |= 0x00000001u;
  ignore_overrides_ = value;
}
inline void Turn_cmd_130::set_ignore_overrides(bool value) {
  _internal_set_ignore_overrides(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_cmd_130.ignore_overrides)
}

// optional bool enable = 2;
inline bool Turn_cmd_130::_internal_has_enable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Turn_cmd_130::has_enable() const {
  return _internal_has_enable();
}
inline void Turn_cmd_130::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Turn_cmd_130::_internal_enable() const {
  return enable_;
}
inline bool Turn_cmd_130::enable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_cmd_130.enable)
  return _internal_enable();
}
inline void Turn_cmd_130::_internal_set_enable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_ = value;
}
inline void Turn_cmd_130::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_cmd_130.enable)
}

// optional bool clear_override = 3;
inline bool Turn_cmd_130::_internal_has_clear_override() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Turn_cmd_130::has_clear_override() const {
  return _internal_has_clear_override();
}
inline void Turn_cmd_130::clear_clear_override() {
  clear_override_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Turn_cmd_130::_internal_clear_override() const {
  return clear_override_;
}
inline bool Turn_cmd_130::clear_override() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_cmd_130.clear_override)
  return _internal_clear_override();
}
inline void Turn_cmd_130::_internal_set_clear_override(bool value) {
  _has_bits_[0] |= 0x00000004u;
  clear_override_ = value;
}
inline void Turn_cmd_130::set_clear_override(bool value) {
  _internal_set_clear_override(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_cmd_130.clear_override)
}

// optional bool clear_faults = 4;
inline bool Turn_cmd_130::_internal_has_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Turn_cmd_130::has_clear_faults() const {
  return _internal_has_clear_faults();
}
inline void Turn_cmd_130::clear_clear_faults() {
  clear_faults_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Turn_cmd_130::_internal_clear_faults() const {
  return clear_faults_;
}
inline bool Turn_cmd_130::clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_cmd_130.clear_faults)
  return _internal_clear_faults();
}
inline void Turn_cmd_130::_internal_set_clear_faults(bool value) {
  _has_bits_[0] |= 0x00000008u;
  clear_faults_ = value;
}
inline void Turn_cmd_130::set_clear_faults(bool value) {
  _internal_set_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_cmd_130.clear_faults)
}

// optional .apollo.canbus.Turn_cmd_130.Turn_signal_cmdType turn_signal_cmd = 5;
inline bool Turn_cmd_130::_internal_has_turn_signal_cmd() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Turn_cmd_130::has_turn_signal_cmd() const {
  return _internal_has_turn_signal_cmd();
}
inline void Turn_cmd_130::clear_turn_signal_cmd() {
  turn_signal_cmd_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::_internal_turn_signal_cmd() const {
  return static_cast< ::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType >(turn_signal_cmd_);
}
inline ::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType Turn_cmd_130::turn_signal_cmd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Turn_cmd_130.turn_signal_cmd)
  return _internal_turn_signal_cmd();
}
inline void Turn_cmd_130::_internal_set_turn_signal_cmd(::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType value) {
  assert(::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  turn_signal_cmd_ = value;
}
inline void Turn_cmd_130::set_turn_signal_cmd(::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType value) {
  _internal_set_turn_signal_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Turn_cmd_130.turn_signal_cmd)
}

// -------------------------------------------------------------------

// Detected_object_rpt_411

// optional double front_object_distance_high_res = 1;
inline bool Detected_object_rpt_411::_internal_has_front_object_distance_high_res() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Detected_object_rpt_411::has_front_object_distance_high_res() const {
  return _internal_has_front_object_distance_high_res();
}
inline void Detected_object_rpt_411::clear_front_object_distance_high_res() {
  front_object_distance_high_res_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Detected_object_rpt_411::_internal_front_object_distance_high_res() const {
  return front_object_distance_high_res_;
}
inline double Detected_object_rpt_411::front_object_distance_high_res() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Detected_object_rpt_411.front_object_distance_high_res)
  return _internal_front_object_distance_high_res();
}
inline void Detected_object_rpt_411::_internal_set_front_object_distance_high_res(double value) {
  _has_bits_[0] |= 0x00000001u;
  front_object_distance_high_res_ = value;
}
inline void Detected_object_rpt_411::set_front_object_distance_high_res(double value) {
  _internal_set_front_object_distance_high_res(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Detected_object_rpt_411.front_object_distance_high_res)
}

// optional double front_object_distance_low_res = 2;
inline bool Detected_object_rpt_411::_internal_has_front_object_distance_low_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Detected_object_rpt_411::has_front_object_distance_low_res() const {
  return _internal_has_front_object_distance_low_res();
}
inline void Detected_object_rpt_411::clear_front_object_distance_low_res() {
  front_object_distance_low_res_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Detected_object_rpt_411::_internal_front_object_distance_low_res() const {
  return front_object_distance_low_res_;
}
inline double Detected_object_rpt_411::front_object_distance_low_res() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Detected_object_rpt_411.front_object_distance_low_res)
  return _internal_front_object_distance_low_res();
}
inline void Detected_object_rpt_411::_internal_set_front_object_distance_low_res(double value) {
  _has_bits_[0] |= 0x00000002u;
  front_object_distance_low_res_ = value;
}
inline void Detected_object_rpt_411::set_front_object_distance_low_res(double value) {
  _internal_set_front_object_distance_low_res(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Detected_object_rpt_411.front_object_distance_low_res)
}

// -------------------------------------------------------------------

// Veh_specific_rpt_1_412

// optional int32 shift_pos_2 = 1;
inline bool Veh_specific_rpt_1_412::_internal_has_shift_pos_2() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Veh_specific_rpt_1_412::has_shift_pos_2() const {
  return _internal_has_shift_pos_2();
}
inline void Veh_specific_rpt_1_412::clear_shift_pos_2() {
  shift_pos_2_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Veh_specific_rpt_1_412::_internal_shift_pos_2() const {
  return shift_pos_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Veh_specific_rpt_1_412::shift_pos_2() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Veh_specific_rpt_1_412.shift_pos_2)
  return _internal_shift_pos_2();
}
inline void Veh_specific_rpt_1_412::_internal_set_shift_pos_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  shift_pos_2_ = value;
}
inline void Veh_specific_rpt_1_412::set_shift_pos_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shift_pos_2(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Veh_specific_rpt_1_412.shift_pos_2)
}

// optional int32 shift_pos_1 = 2;
inline bool Veh_specific_rpt_1_412::_internal_has_shift_pos_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Veh_specific_rpt_1_412::has_shift_pos_1() const {
  return _internal_has_shift_pos_1();
}
inline void Veh_specific_rpt_1_412::clear_shift_pos_1() {
  shift_pos_1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Veh_specific_rpt_1_412::_internal_shift_pos_1() const {
  return shift_pos_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Veh_specific_rpt_1_412::shift_pos_1() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Veh_specific_rpt_1_412.shift_pos_1)
  return _internal_shift_pos_1();
}
inline void Veh_specific_rpt_1_412::_internal_set_shift_pos_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  shift_pos_1_ = value;
}
inline void Veh_specific_rpt_1_412::set_shift_pos_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shift_pos_1(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Veh_specific_rpt_1_412.shift_pos_1)
}

// -------------------------------------------------------------------

// Veh_dynamics_rpt_413

// optional double veh_g_forces = 1;
inline bool Veh_dynamics_rpt_413::_internal_has_veh_g_forces() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Veh_dynamics_rpt_413::has_veh_g_forces() const {
  return _internal_has_veh_g_forces();
}
inline void Veh_dynamics_rpt_413::clear_veh_g_forces() {
  veh_g_forces_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Veh_dynamics_rpt_413::_internal_veh_g_forces() const {
  return veh_g_forces_;
}
inline double Veh_dynamics_rpt_413::veh_g_forces() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Veh_dynamics_rpt_413.veh_g_forces)
  return _internal_veh_g_forces();
}
inline void Veh_dynamics_rpt_413::_internal_set_veh_g_forces(double value) {
  _has_bits_[0] |= 0x00000001u;
  veh_g_forces_ = value;
}
inline void Veh_dynamics_rpt_413::set_veh_g_forces(double value) {
  _internal_set_veh_g_forces(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Veh_dynamics_rpt_413.veh_g_forces)
}

// -------------------------------------------------------------------

// Rear_lights_rpt_418

// optional bool reverse_lights_on_is_valid = 1;
inline bool Rear_lights_rpt_418::_internal_has_reverse_lights_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rear_lights_rpt_418::has_reverse_lights_on_is_valid() const {
  return _internal_has_reverse_lights_on_is_valid();
}
inline void Rear_lights_rpt_418::clear_reverse_lights_on_is_valid() {
  reverse_lights_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Rear_lights_rpt_418::_internal_reverse_lights_on_is_valid() const {
  return reverse_lights_on_is_valid_;
}
inline bool Rear_lights_rpt_418::reverse_lights_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Rear_lights_rpt_418.reverse_lights_on_is_valid)
  return _internal_reverse_lights_on_is_valid();
}
inline void Rear_lights_rpt_418::_internal_set_reverse_lights_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  reverse_lights_on_is_valid_ = value;
}
inline void Rear_lights_rpt_418::set_reverse_lights_on_is_valid(bool value) {
  _internal_set_reverse_lights_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Rear_lights_rpt_418.reverse_lights_on_is_valid)
}

// optional bool brake_lights_on_is_valid = 2;
inline bool Rear_lights_rpt_418::_internal_has_brake_lights_on_is_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rear_lights_rpt_418::has_brake_lights_on_is_valid() const {
  return _internal_has_brake_lights_on_is_valid();
}
inline void Rear_lights_rpt_418::clear_brake_lights_on_is_valid() {
  brake_lights_on_is_valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Rear_lights_rpt_418::_internal_brake_lights_on_is_valid() const {
  return brake_lights_on_is_valid_;
}
inline bool Rear_lights_rpt_418::brake_lights_on_is_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Rear_lights_rpt_418.brake_lights_on_is_valid)
  return _internal_brake_lights_on_is_valid();
}
inline void Rear_lights_rpt_418::_internal_set_brake_lights_on_is_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  brake_lights_on_is_valid_ = value;
}
inline void Rear_lights_rpt_418::set_brake_lights_on_is_valid(bool value) {
  _internal_set_brake_lights_on_is_valid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Rear_lights_rpt_418.brake_lights_on_is_valid)
}

// optional bool reverse_lights_on = 3;
inline bool Rear_lights_rpt_418::_internal_has_reverse_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rear_lights_rpt_418::has_reverse_lights_on() const {
  return _internal_has_reverse_lights_on();
}
inline void Rear_lights_rpt_418::clear_reverse_lights_on() {
  reverse_lights_on_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Rear_lights_rpt_418::_internal_reverse_lights_on() const {
  return reverse_lights_on_;
}
inline bool Rear_lights_rpt_418::reverse_lights_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Rear_lights_rpt_418.reverse_lights_on)
  return _internal_reverse_lights_on();
}
inline void Rear_lights_rpt_418::_internal_set_reverse_lights_on(bool value) {
  _has_bits_[0] |= 0x00000004u;
  reverse_lights_on_ = value;
}
inline void Rear_lights_rpt_418::set_reverse_lights_on(bool value) {
  _internal_set_reverse_lights_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Rear_lights_rpt_418.reverse_lights_on)
}

// optional bool brake_lights_on = 4;
inline bool Rear_lights_rpt_418::_internal_has_brake_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Rear_lights_rpt_418::has_brake_lights_on() const {
  return _internal_has_brake_lights_on();
}
inline void Rear_lights_rpt_418::clear_brake_lights_on() {
  brake_lights_on_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Rear_lights_rpt_418::_internal_brake_lights_on() const {
  return brake_lights_on_;
}
inline bool Rear_lights_rpt_418::brake_lights_on() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Rear_lights_rpt_418.brake_lights_on)
  return _internal_brake_lights_on();
}
inline void Rear_lights_rpt_418::_internal_set_brake_lights_on(bool value) {
  _has_bits_[0] |= 0x00000008u;
  brake_lights_on_ = value;
}
inline void Rear_lights_rpt_418::set_brake_lights_on(bool value) {
  _internal_set_brake_lights_on(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Rear_lights_rpt_418.brake_lights_on)
}

// -------------------------------------------------------------------

// Lexus

// optional .apollo.canbus.Hazard_lights_rpt_214 hazard_lights_rpt_214 = 1;
inline bool Lexus::_internal_has_hazard_lights_rpt_214() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hazard_lights_rpt_214_ != nullptr);
  return value;
}
inline bool Lexus::has_hazard_lights_rpt_214() const {
  return _internal_has_hazard_lights_rpt_214();
}
inline void Lexus::clear_hazard_lights_rpt_214() {
  if (hazard_lights_rpt_214_ != nullptr) hazard_lights_rpt_214_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::canbus::Hazard_lights_rpt_214& Lexus::_internal_hazard_lights_rpt_214() const {
  const ::apollo::canbus::Hazard_lights_rpt_214* p = hazard_lights_rpt_214_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Hazard_lights_rpt_214*>(
      &::apollo::canbus::_Hazard_lights_rpt_214_default_instance_);
}
inline const ::apollo::canbus::Hazard_lights_rpt_214& Lexus::hazard_lights_rpt_214() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.hazard_lights_rpt_214)
  return _internal_hazard_lights_rpt_214();
}
inline ::apollo::canbus::Hazard_lights_rpt_214* Lexus::release_hazard_lights_rpt_214() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.hazard_lights_rpt_214)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Hazard_lights_rpt_214* temp = hazard_lights_rpt_214_;
  hazard_lights_rpt_214_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Hazard_lights_rpt_214* Lexus::_internal_mutable_hazard_lights_rpt_214() {
  _has_bits_[0] |= 0x00000001u;
  if (hazard_lights_rpt_214_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Hazard_lights_rpt_214>(GetArenaNoVirtual());
    hazard_lights_rpt_214_ = p;
  }
  return hazard_lights_rpt_214_;
}
inline ::apollo::canbus::Hazard_lights_rpt_214* Lexus::mutable_hazard_lights_rpt_214() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.hazard_lights_rpt_214)
  return _internal_mutable_hazard_lights_rpt_214();
}
inline void Lexus::set_allocated_hazard_lights_rpt_214(::apollo::canbus::Hazard_lights_rpt_214* hazard_lights_rpt_214) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hazard_lights_rpt_214_;
  }
  if (hazard_lights_rpt_214) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hazard_lights_rpt_214 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hazard_lights_rpt_214, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hazard_lights_rpt_214_ = hazard_lights_rpt_214;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.hazard_lights_rpt_214)
}

// optional .apollo.canbus.Steering_cmd_12c steering_cmd_12c = 2;
inline bool Lexus::_internal_has_steering_cmd_12c() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || steering_cmd_12c_ != nullptr);
  return value;
}
inline bool Lexus::has_steering_cmd_12c() const {
  return _internal_has_steering_cmd_12c();
}
inline void Lexus::clear_steering_cmd_12c() {
  if (steering_cmd_12c_ != nullptr) steering_cmd_12c_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::canbus::Steering_cmd_12c& Lexus::_internal_steering_cmd_12c() const {
  const ::apollo::canbus::Steering_cmd_12c* p = steering_cmd_12c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Steering_cmd_12c*>(
      &::apollo::canbus::_Steering_cmd_12c_default_instance_);
}
inline const ::apollo::canbus::Steering_cmd_12c& Lexus::steering_cmd_12c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.steering_cmd_12c)
  return _internal_steering_cmd_12c();
}
inline ::apollo::canbus::Steering_cmd_12c* Lexus::release_steering_cmd_12c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.steering_cmd_12c)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Steering_cmd_12c* temp = steering_cmd_12c_;
  steering_cmd_12c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steering_cmd_12c* Lexus::_internal_mutable_steering_cmd_12c() {
  _has_bits_[0] |= 0x00000002u;
  if (steering_cmd_12c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steering_cmd_12c>(GetArenaNoVirtual());
    steering_cmd_12c_ = p;
  }
  return steering_cmd_12c_;
}
inline ::apollo::canbus::Steering_cmd_12c* Lexus::mutable_steering_cmd_12c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.steering_cmd_12c)
  return _internal_mutable_steering_cmd_12c();
}
inline void Lexus::set_allocated_steering_cmd_12c(::apollo::canbus::Steering_cmd_12c* steering_cmd_12c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steering_cmd_12c_;
  }
  if (steering_cmd_12c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steering_cmd_12c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_cmd_12c, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  steering_cmd_12c_ = steering_cmd_12c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.steering_cmd_12c)
}

// optional .apollo.canbus.Dash_controls_right_rpt_210 dash_controls_right_rpt_210 = 3;
inline bool Lexus::_internal_has_dash_controls_right_rpt_210() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dash_controls_right_rpt_210_ != nullptr);
  return value;
}
inline bool Lexus::has_dash_controls_right_rpt_210() const {
  return _internal_has_dash_controls_right_rpt_210();
}
inline void Lexus::clear_dash_controls_right_rpt_210() {
  if (dash_controls_right_rpt_210_ != nullptr) dash_controls_right_rpt_210_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::canbus::Dash_controls_right_rpt_210& Lexus::_internal_dash_controls_right_rpt_210() const {
  const ::apollo::canbus::Dash_controls_right_rpt_210* p = dash_controls_right_rpt_210_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Dash_controls_right_rpt_210*>(
      &::apollo::canbus::_Dash_controls_right_rpt_210_default_instance_);
}
inline const ::apollo::canbus::Dash_controls_right_rpt_210& Lexus::dash_controls_right_rpt_210() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.dash_controls_right_rpt_210)
  return _internal_dash_controls_right_rpt_210();
}
inline ::apollo::canbus::Dash_controls_right_rpt_210* Lexus::release_dash_controls_right_rpt_210() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.dash_controls_right_rpt_210)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Dash_controls_right_rpt_210* temp = dash_controls_right_rpt_210_;
  dash_controls_right_rpt_210_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Dash_controls_right_rpt_210* Lexus::_internal_mutable_dash_controls_right_rpt_210() {
  _has_bits_[0] |= 0x00000004u;
  if (dash_controls_right_rpt_210_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Dash_controls_right_rpt_210>(GetArenaNoVirtual());
    dash_controls_right_rpt_210_ = p;
  }
  return dash_controls_right_rpt_210_;
}
inline ::apollo::canbus::Dash_controls_right_rpt_210* Lexus::mutable_dash_controls_right_rpt_210() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.dash_controls_right_rpt_210)
  return _internal_mutable_dash_controls_right_rpt_210();
}
inline void Lexus::set_allocated_dash_controls_right_rpt_210(::apollo::canbus::Dash_controls_right_rpt_210* dash_controls_right_rpt_210) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dash_controls_right_rpt_210_;
  }
  if (dash_controls_right_rpt_210) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dash_controls_right_rpt_210 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dash_controls_right_rpt_210, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dash_controls_right_rpt_210_ = dash_controls_right_rpt_210;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.dash_controls_right_rpt_210)
}

// optional .apollo.canbus.Dash_controls_left_cmd_10c dash_controls_left_cmd_10c = 4;
inline bool Lexus::_internal_has_dash_controls_left_cmd_10c() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || dash_controls_left_cmd_10c_ != nullptr);
  return value;
}
inline bool Lexus::has_dash_controls_left_cmd_10c() const {
  return _internal_has_dash_controls_left_cmd_10c();
}
inline void Lexus::clear_dash_controls_left_cmd_10c() {
  if (dash_controls_left_cmd_10c_ != nullptr) dash_controls_left_cmd_10c_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::canbus::Dash_controls_left_cmd_10c& Lexus::_internal_dash_controls_left_cmd_10c() const {
  const ::apollo::canbus::Dash_controls_left_cmd_10c* p = dash_controls_left_cmd_10c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Dash_controls_left_cmd_10c*>(
      &::apollo::canbus::_Dash_controls_left_cmd_10c_default_instance_);
}
inline const ::apollo::canbus::Dash_controls_left_cmd_10c& Lexus::dash_controls_left_cmd_10c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.dash_controls_left_cmd_10c)
  return _internal_dash_controls_left_cmd_10c();
}
inline ::apollo::canbus::Dash_controls_left_cmd_10c* Lexus::release_dash_controls_left_cmd_10c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.dash_controls_left_cmd_10c)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Dash_controls_left_cmd_10c* temp = dash_controls_left_cmd_10c_;
  dash_controls_left_cmd_10c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Dash_controls_left_cmd_10c* Lexus::_internal_mutable_dash_controls_left_cmd_10c() {
  _has_bits_[0] |= 0x00000008u;
  if (dash_controls_left_cmd_10c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Dash_controls_left_cmd_10c>(GetArenaNoVirtual());
    dash_controls_left_cmd_10c_ = p;
  }
  return dash_controls_left_cmd_10c_;
}
inline ::apollo::canbus::Dash_controls_left_cmd_10c* Lexus::mutable_dash_controls_left_cmd_10c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.dash_controls_left_cmd_10c)
  return _internal_mutable_dash_controls_left_cmd_10c();
}
inline void Lexus::set_allocated_dash_controls_left_cmd_10c(::apollo::canbus::Dash_controls_left_cmd_10c* dash_controls_left_cmd_10c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dash_controls_left_cmd_10c_;
  }
  if (dash_controls_left_cmd_10c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dash_controls_left_cmd_10c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dash_controls_left_cmd_10c, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dash_controls_left_cmd_10c_ = dash_controls_left_cmd_10c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.dash_controls_left_cmd_10c)
}

// optional .apollo.canbus.Steering_rpt_22c steering_rpt_22c = 5;
inline bool Lexus::_internal_has_steering_rpt_22c() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || steering_rpt_22c_ != nullptr);
  return value;
}
inline bool Lexus::has_steering_rpt_22c() const {
  return _internal_has_steering_rpt_22c();
}
inline void Lexus::clear_steering_rpt_22c() {
  if (steering_rpt_22c_ != nullptr) steering_rpt_22c_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::canbus::Steering_rpt_22c& Lexus::_internal_steering_rpt_22c() const {
  const ::apollo::canbus::Steering_rpt_22c* p = steering_rpt_22c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Steering_rpt_22c*>(
      &::apollo::canbus::_Steering_rpt_22c_default_instance_);
}
inline const ::apollo::canbus::Steering_rpt_22c& Lexus::steering_rpt_22c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.steering_rpt_22c)
  return _internal_steering_rpt_22c();
}
inline ::apollo::canbus::Steering_rpt_22c* Lexus::release_steering_rpt_22c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.steering_rpt_22c)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Steering_rpt_22c* temp = steering_rpt_22c_;
  steering_rpt_22c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steering_rpt_22c* Lexus::_internal_mutable_steering_rpt_22c() {
  _has_bits_[0] |= 0x00000010u;
  if (steering_rpt_22c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steering_rpt_22c>(GetArenaNoVirtual());
    steering_rpt_22c_ = p;
  }
  return steering_rpt_22c_;
}
inline ::apollo::canbus::Steering_rpt_22c* Lexus::mutable_steering_rpt_22c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.steering_rpt_22c)
  return _internal_mutable_steering_rpt_22c();
}
inline void Lexus::set_allocated_steering_rpt_22c(::apollo::canbus::Steering_rpt_22c* steering_rpt_22c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steering_rpt_22c_;
  }
  if (steering_rpt_22c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steering_rpt_22c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_rpt_22c, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  steering_rpt_22c_ = steering_rpt_22c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.steering_rpt_22c)
}

// optional .apollo.canbus.Turn_aux_rpt_330 turn_aux_rpt_330 = 6;
inline bool Lexus::_internal_has_turn_aux_rpt_330() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || turn_aux_rpt_330_ != nullptr);
  return value;
}
inline bool Lexus::has_turn_aux_rpt_330() const {
  return _internal_has_turn_aux_rpt_330();
}
inline void Lexus::clear_turn_aux_rpt_330() {
  if (turn_aux_rpt_330_ != nullptr) turn_aux_rpt_330_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::canbus::Turn_aux_rpt_330& Lexus::_internal_turn_aux_rpt_330() const {
  const ::apollo::canbus::Turn_aux_rpt_330* p = turn_aux_rpt_330_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Turn_aux_rpt_330*>(
      &::apollo::canbus::_Turn_aux_rpt_330_default_instance_);
}
inline const ::apollo::canbus::Turn_aux_rpt_330& Lexus::turn_aux_rpt_330() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.turn_aux_rpt_330)
  return _internal_turn_aux_rpt_330();
}
inline ::apollo::canbus::Turn_aux_rpt_330* Lexus::release_turn_aux_rpt_330() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.turn_aux_rpt_330)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Turn_aux_rpt_330* temp = turn_aux_rpt_330_;
  turn_aux_rpt_330_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Turn_aux_rpt_330* Lexus::_internal_mutable_turn_aux_rpt_330() {
  _has_bits_[0] |= 0x00000020u;
  if (turn_aux_rpt_330_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Turn_aux_rpt_330>(GetArenaNoVirtual());
    turn_aux_rpt_330_ = p;
  }
  return turn_aux_rpt_330_;
}
inline ::apollo::canbus::Turn_aux_rpt_330* Lexus::mutable_turn_aux_rpt_330() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.turn_aux_rpt_330)
  return _internal_mutable_turn_aux_rpt_330();
}
inline void Lexus::set_allocated_turn_aux_rpt_330(::apollo::canbus::Turn_aux_rpt_330* turn_aux_rpt_330) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete turn_aux_rpt_330_;
  }
  if (turn_aux_rpt_330) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      turn_aux_rpt_330 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, turn_aux_rpt_330, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  turn_aux_rpt_330_ = turn_aux_rpt_330;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.turn_aux_rpt_330)
}

// optional .apollo.canbus.Headlight_rpt_218 headlight_rpt_218 = 7;
inline bool Lexus::_internal_has_headlight_rpt_218() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || headlight_rpt_218_ != nullptr);
  return value;
}
inline bool Lexus::has_headlight_rpt_218() const {
  return _internal_has_headlight_rpt_218();
}
inline void Lexus::clear_headlight_rpt_218() {
  if (headlight_rpt_218_ != nullptr) headlight_rpt_218_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::canbus::Headlight_rpt_218& Lexus::_internal_headlight_rpt_218() const {
  const ::apollo::canbus::Headlight_rpt_218* p = headlight_rpt_218_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Headlight_rpt_218*>(
      &::apollo::canbus::_Headlight_rpt_218_default_instance_);
}
inline const ::apollo::canbus::Headlight_rpt_218& Lexus::headlight_rpt_218() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.headlight_rpt_218)
  return _internal_headlight_rpt_218();
}
inline ::apollo::canbus::Headlight_rpt_218* Lexus::release_headlight_rpt_218() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.headlight_rpt_218)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Headlight_rpt_218* temp = headlight_rpt_218_;
  headlight_rpt_218_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Headlight_rpt_218* Lexus::_internal_mutable_headlight_rpt_218() {
  _has_bits_[0] |= 0x00000040u;
  if (headlight_rpt_218_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Headlight_rpt_218>(GetArenaNoVirtual());
    headlight_rpt_218_ = p;
  }
  return headlight_rpt_218_;
}
inline ::apollo::canbus::Headlight_rpt_218* Lexus::mutable_headlight_rpt_218() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.headlight_rpt_218)
  return _internal_mutable_headlight_rpt_218();
}
inline void Lexus::set_allocated_headlight_rpt_218(::apollo::canbus::Headlight_rpt_218* headlight_rpt_218) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete headlight_rpt_218_;
  }
  if (headlight_rpt_218) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      headlight_rpt_218 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headlight_rpt_218, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  headlight_rpt_218_ = headlight_rpt_218;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.headlight_rpt_218)
}

// optional .apollo.canbus.Hazard_lights_cmd_114 hazard_lights_cmd_114 = 8;
inline bool Lexus::_internal_has_hazard_lights_cmd_114() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || hazard_lights_cmd_114_ != nullptr);
  return value;
}
inline bool Lexus::has_hazard_lights_cmd_114() const {
  return _internal_has_hazard_lights_cmd_114();
}
inline void Lexus::clear_hazard_lights_cmd_114() {
  if (hazard_lights_cmd_114_ != nullptr) hazard_lights_cmd_114_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::canbus::Hazard_lights_cmd_114& Lexus::_internal_hazard_lights_cmd_114() const {
  const ::apollo::canbus::Hazard_lights_cmd_114* p = hazard_lights_cmd_114_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Hazard_lights_cmd_114*>(
      &::apollo::canbus::_Hazard_lights_cmd_114_default_instance_);
}
inline const ::apollo::canbus::Hazard_lights_cmd_114& Lexus::hazard_lights_cmd_114() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.hazard_lights_cmd_114)
  return _internal_hazard_lights_cmd_114();
}
inline ::apollo::canbus::Hazard_lights_cmd_114* Lexus::release_hazard_lights_cmd_114() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.hazard_lights_cmd_114)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Hazard_lights_cmd_114* temp = hazard_lights_cmd_114_;
  hazard_lights_cmd_114_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Hazard_lights_cmd_114* Lexus::_internal_mutable_hazard_lights_cmd_114() {
  _has_bits_[0] |= 0x00000080u;
  if (hazard_lights_cmd_114_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Hazard_lights_cmd_114>(GetArenaNoVirtual());
    hazard_lights_cmd_114_ = p;
  }
  return hazard_lights_cmd_114_;
}
inline ::apollo::canbus::Hazard_lights_cmd_114* Lexus::mutable_hazard_lights_cmd_114() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.hazard_lights_cmd_114)
  return _internal_mutable_hazard_lights_cmd_114();
}
inline void Lexus::set_allocated_hazard_lights_cmd_114(::apollo::canbus::Hazard_lights_cmd_114* hazard_lights_cmd_114) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hazard_lights_cmd_114_;
  }
  if (hazard_lights_cmd_114) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hazard_lights_cmd_114 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hazard_lights_cmd_114, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  hazard_lights_cmd_114_ = hazard_lights_cmd_114;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.hazard_lights_cmd_114)
}

// optional .apollo.canbus.Dash_controls_left_rpt_20c dash_controls_left_rpt_20c = 9;
inline bool Lexus::_internal_has_dash_controls_left_rpt_20c() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || dash_controls_left_rpt_20c_ != nullptr);
  return value;
}
inline bool Lexus::has_dash_controls_left_rpt_20c() const {
  return _internal_has_dash_controls_left_rpt_20c();
}
inline void Lexus::clear_dash_controls_left_rpt_20c() {
  if (dash_controls_left_rpt_20c_ != nullptr) dash_controls_left_rpt_20c_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::canbus::Dash_controls_left_rpt_20c& Lexus::_internal_dash_controls_left_rpt_20c() const {
  const ::apollo::canbus::Dash_controls_left_rpt_20c* p = dash_controls_left_rpt_20c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Dash_controls_left_rpt_20c*>(
      &::apollo::canbus::_Dash_controls_left_rpt_20c_default_instance_);
}
inline const ::apollo::canbus::Dash_controls_left_rpt_20c& Lexus::dash_controls_left_rpt_20c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.dash_controls_left_rpt_20c)
  return _internal_dash_controls_left_rpt_20c();
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c* Lexus::release_dash_controls_left_rpt_20c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.dash_controls_left_rpt_20c)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Dash_controls_left_rpt_20c* temp = dash_controls_left_rpt_20c_;
  dash_controls_left_rpt_20c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c* Lexus::_internal_mutable_dash_controls_left_rpt_20c() {
  _has_bits_[0] |= 0x00000100u;
  if (dash_controls_left_rpt_20c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Dash_controls_left_rpt_20c>(GetArenaNoVirtual());
    dash_controls_left_rpt_20c_ = p;
  }
  return dash_controls_left_rpt_20c_;
}
inline ::apollo::canbus::Dash_controls_left_rpt_20c* Lexus::mutable_dash_controls_left_rpt_20c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.dash_controls_left_rpt_20c)
  return _internal_mutable_dash_controls_left_rpt_20c();
}
inline void Lexus::set_allocated_dash_controls_left_rpt_20c(::apollo::canbus::Dash_controls_left_rpt_20c* dash_controls_left_rpt_20c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dash_controls_left_rpt_20c_;
  }
  if (dash_controls_left_rpt_20c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dash_controls_left_rpt_20c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dash_controls_left_rpt_20c, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  dash_controls_left_rpt_20c_ = dash_controls_left_rpt_20c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.dash_controls_left_rpt_20c)
}

// optional .apollo.canbus.Headlight_aux_rpt_318 headlight_aux_rpt_318 = 10;
inline bool Lexus::_internal_has_headlight_aux_rpt_318() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || headlight_aux_rpt_318_ != nullptr);
  return value;
}
inline bool Lexus::has_headlight_aux_rpt_318() const {
  return _internal_has_headlight_aux_rpt_318();
}
inline void Lexus::clear_headlight_aux_rpt_318() {
  if (headlight_aux_rpt_318_ != nullptr) headlight_aux_rpt_318_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::canbus::Headlight_aux_rpt_318& Lexus::_internal_headlight_aux_rpt_318() const {
  const ::apollo::canbus::Headlight_aux_rpt_318* p = headlight_aux_rpt_318_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Headlight_aux_rpt_318*>(
      &::apollo::canbus::_Headlight_aux_rpt_318_default_instance_);
}
inline const ::apollo::canbus::Headlight_aux_rpt_318& Lexus::headlight_aux_rpt_318() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.headlight_aux_rpt_318)
  return _internal_headlight_aux_rpt_318();
}
inline ::apollo::canbus::Headlight_aux_rpt_318* Lexus::release_headlight_aux_rpt_318() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.headlight_aux_rpt_318)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Headlight_aux_rpt_318* temp = headlight_aux_rpt_318_;
  headlight_aux_rpt_318_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Headlight_aux_rpt_318* Lexus::_internal_mutable_headlight_aux_rpt_318() {
  _has_bits_[0] |= 0x00000200u;
  if (headlight_aux_rpt_318_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Headlight_aux_rpt_318>(GetArenaNoVirtual());
    headlight_aux_rpt_318_ = p;
  }
  return headlight_aux_rpt_318_;
}
inline ::apollo::canbus::Headlight_aux_rpt_318* Lexus::mutable_headlight_aux_rpt_318() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.headlight_aux_rpt_318)
  return _internal_mutable_headlight_aux_rpt_318();
}
inline void Lexus::set_allocated_headlight_aux_rpt_318(::apollo::canbus::Headlight_aux_rpt_318* headlight_aux_rpt_318) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete headlight_aux_rpt_318_;
  }
  if (headlight_aux_rpt_318) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      headlight_aux_rpt_318 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headlight_aux_rpt_318, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  headlight_aux_rpt_318_ = headlight_aux_rpt_318;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.headlight_aux_rpt_318)
}

// optional .apollo.canbus.Dash_controls_right_cmd_110 dash_controls_right_cmd_110 = 11;
inline bool Lexus::_internal_has_dash_controls_right_cmd_110() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || dash_controls_right_cmd_110_ != nullptr);
  return value;
}
inline bool Lexus::has_dash_controls_right_cmd_110() const {
  return _internal_has_dash_controls_right_cmd_110();
}
inline void Lexus::clear_dash_controls_right_cmd_110() {
  if (dash_controls_right_cmd_110_ != nullptr) dash_controls_right_cmd_110_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::canbus::Dash_controls_right_cmd_110& Lexus::_internal_dash_controls_right_cmd_110() const {
  const ::apollo::canbus::Dash_controls_right_cmd_110* p = dash_controls_right_cmd_110_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Dash_controls_right_cmd_110*>(
      &::apollo::canbus::_Dash_controls_right_cmd_110_default_instance_);
}
inline const ::apollo::canbus::Dash_controls_right_cmd_110& Lexus::dash_controls_right_cmd_110() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.dash_controls_right_cmd_110)
  return _internal_dash_controls_right_cmd_110();
}
inline ::apollo::canbus::Dash_controls_right_cmd_110* Lexus::release_dash_controls_right_cmd_110() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.dash_controls_right_cmd_110)
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Dash_controls_right_cmd_110* temp = dash_controls_right_cmd_110_;
  dash_controls_right_cmd_110_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Dash_controls_right_cmd_110* Lexus::_internal_mutable_dash_controls_right_cmd_110() {
  _has_bits_[0] |= 0x00000400u;
  if (dash_controls_right_cmd_110_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Dash_controls_right_cmd_110>(GetArenaNoVirtual());
    dash_controls_right_cmd_110_ = p;
  }
  return dash_controls_right_cmd_110_;
}
inline ::apollo::canbus::Dash_controls_right_cmd_110* Lexus::mutable_dash_controls_right_cmd_110() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.dash_controls_right_cmd_110)
  return _internal_mutable_dash_controls_right_cmd_110();
}
inline void Lexus::set_allocated_dash_controls_right_cmd_110(::apollo::canbus::Dash_controls_right_cmd_110* dash_controls_right_cmd_110) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dash_controls_right_cmd_110_;
  }
  if (dash_controls_right_cmd_110) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dash_controls_right_cmd_110 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dash_controls_right_cmd_110, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  dash_controls_right_cmd_110_ = dash_controls_right_cmd_110;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.dash_controls_right_cmd_110)
}

// optional .apollo.canbus.Wiper_cmd_134 wiper_cmd_134 = 12;
inline bool Lexus::_internal_has_wiper_cmd_134() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || wiper_cmd_134_ != nullptr);
  return value;
}
inline bool Lexus::has_wiper_cmd_134() const {
  return _internal_has_wiper_cmd_134();
}
inline void Lexus::clear_wiper_cmd_134() {
  if (wiper_cmd_134_ != nullptr) wiper_cmd_134_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::canbus::Wiper_cmd_134& Lexus::_internal_wiper_cmd_134() const {
  const ::apollo::canbus::Wiper_cmd_134* p = wiper_cmd_134_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Wiper_cmd_134*>(
      &::apollo::canbus::_Wiper_cmd_134_default_instance_);
}
inline const ::apollo::canbus::Wiper_cmd_134& Lexus::wiper_cmd_134() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.wiper_cmd_134)
  return _internal_wiper_cmd_134();
}
inline ::apollo::canbus::Wiper_cmd_134* Lexus::release_wiper_cmd_134() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.wiper_cmd_134)
  _has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Wiper_cmd_134* temp = wiper_cmd_134_;
  wiper_cmd_134_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Wiper_cmd_134* Lexus::_internal_mutable_wiper_cmd_134() {
  _has_bits_[0] |= 0x00000800u;
  if (wiper_cmd_134_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Wiper_cmd_134>(GetArenaNoVirtual());
    wiper_cmd_134_ = p;
  }
  return wiper_cmd_134_;
}
inline ::apollo::canbus::Wiper_cmd_134* Lexus::mutable_wiper_cmd_134() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.wiper_cmd_134)
  return _internal_mutable_wiper_cmd_134();
}
inline void Lexus::set_allocated_wiper_cmd_134(::apollo::canbus::Wiper_cmd_134* wiper_cmd_134) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wiper_cmd_134_;
  }
  if (wiper_cmd_134) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wiper_cmd_134 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wiper_cmd_134, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  wiper_cmd_134_ = wiper_cmd_134;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.wiper_cmd_134)
}

// optional .apollo.canbus.Wiper_rpt_234 wiper_rpt_234 = 13;
inline bool Lexus::_internal_has_wiper_rpt_234() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || wiper_rpt_234_ != nullptr);
  return value;
}
inline bool Lexus::has_wiper_rpt_234() const {
  return _internal_has_wiper_rpt_234();
}
inline void Lexus::clear_wiper_rpt_234() {
  if (wiper_rpt_234_ != nullptr) wiper_rpt_234_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::canbus::Wiper_rpt_234& Lexus::_internal_wiper_rpt_234() const {
  const ::apollo::canbus::Wiper_rpt_234* p = wiper_rpt_234_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Wiper_rpt_234*>(
      &::apollo::canbus::_Wiper_rpt_234_default_instance_);
}
inline const ::apollo::canbus::Wiper_rpt_234& Lexus::wiper_rpt_234() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.wiper_rpt_234)
  return _internal_wiper_rpt_234();
}
inline ::apollo::canbus::Wiper_rpt_234* Lexus::release_wiper_rpt_234() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.wiper_rpt_234)
  _has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Wiper_rpt_234* temp = wiper_rpt_234_;
  wiper_rpt_234_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Wiper_rpt_234* Lexus::_internal_mutable_wiper_rpt_234() {
  _has_bits_[0] |= 0x00001000u;
  if (wiper_rpt_234_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Wiper_rpt_234>(GetArenaNoVirtual());
    wiper_rpt_234_ = p;
  }
  return wiper_rpt_234_;
}
inline ::apollo::canbus::Wiper_rpt_234* Lexus::mutable_wiper_rpt_234() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.wiper_rpt_234)
  return _internal_mutable_wiper_rpt_234();
}
inline void Lexus::set_allocated_wiper_rpt_234(::apollo::canbus::Wiper_rpt_234* wiper_rpt_234) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wiper_rpt_234_;
  }
  if (wiper_rpt_234) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wiper_rpt_234 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wiper_rpt_234, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  wiper_rpt_234_ = wiper_rpt_234;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.wiper_rpt_234)
}

// optional .apollo.canbus.Turn_rpt_230 turn_rpt_230 = 14;
inline bool Lexus::_internal_has_turn_rpt_230() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || turn_rpt_230_ != nullptr);
  return value;
}
inline bool Lexus::has_turn_rpt_230() const {
  return _internal_has_turn_rpt_230();
}
inline void Lexus::clear_turn_rpt_230() {
  if (turn_rpt_230_ != nullptr) turn_rpt_230_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::canbus::Turn_rpt_230& Lexus::_internal_turn_rpt_230() const {
  const ::apollo::canbus::Turn_rpt_230* p = turn_rpt_230_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Turn_rpt_230*>(
      &::apollo::canbus::_Turn_rpt_230_default_instance_);
}
inline const ::apollo::canbus::Turn_rpt_230& Lexus::turn_rpt_230() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.turn_rpt_230)
  return _internal_turn_rpt_230();
}
inline ::apollo::canbus::Turn_rpt_230* Lexus::release_turn_rpt_230() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.turn_rpt_230)
  _has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Turn_rpt_230* temp = turn_rpt_230_;
  turn_rpt_230_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Turn_rpt_230* Lexus::_internal_mutable_turn_rpt_230() {
  _has_bits_[0] |= 0x00002000u;
  if (turn_rpt_230_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Turn_rpt_230>(GetArenaNoVirtual());
    turn_rpt_230_ = p;
  }
  return turn_rpt_230_;
}
inline ::apollo::canbus::Turn_rpt_230* Lexus::mutable_turn_rpt_230() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.turn_rpt_230)
  return _internal_mutable_turn_rpt_230();
}
inline void Lexus::set_allocated_turn_rpt_230(::apollo::canbus::Turn_rpt_230* turn_rpt_230) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete turn_rpt_230_;
  }
  if (turn_rpt_230) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      turn_rpt_230 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, turn_rpt_230, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  turn_rpt_230_ = turn_rpt_230;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.turn_rpt_230)
}

// optional .apollo.canbus.Headlight_cmd_118 headlight_cmd_118 = 15;
inline bool Lexus::_internal_has_headlight_cmd_118() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || headlight_cmd_118_ != nullptr);
  return value;
}
inline bool Lexus::has_headlight_cmd_118() const {
  return _internal_has_headlight_cmd_118();
}
inline void Lexus::clear_headlight_cmd_118() {
  if (headlight_cmd_118_ != nullptr) headlight_cmd_118_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::apollo::canbus::Headlight_cmd_118& Lexus::_internal_headlight_cmd_118() const {
  const ::apollo::canbus::Headlight_cmd_118* p = headlight_cmd_118_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Headlight_cmd_118*>(
      &::apollo::canbus::_Headlight_cmd_118_default_instance_);
}
inline const ::apollo::canbus::Headlight_cmd_118& Lexus::headlight_cmd_118() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.headlight_cmd_118)
  return _internal_headlight_cmd_118();
}
inline ::apollo::canbus::Headlight_cmd_118* Lexus::release_headlight_cmd_118() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.headlight_cmd_118)
  _has_bits_[0] &= ~0x00004000u;
  ::apollo::canbus::Headlight_cmd_118* temp = headlight_cmd_118_;
  headlight_cmd_118_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Headlight_cmd_118* Lexus::_internal_mutable_headlight_cmd_118() {
  _has_bits_[0] |= 0x00004000u;
  if (headlight_cmd_118_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Headlight_cmd_118>(GetArenaNoVirtual());
    headlight_cmd_118_ = p;
  }
  return headlight_cmd_118_;
}
inline ::apollo::canbus::Headlight_cmd_118* Lexus::mutable_headlight_cmd_118() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.headlight_cmd_118)
  return _internal_mutable_headlight_cmd_118();
}
inline void Lexus::set_allocated_headlight_cmd_118(::apollo::canbus::Headlight_cmd_118* headlight_cmd_118) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete headlight_cmd_118_;
  }
  if (headlight_cmd_118) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      headlight_cmd_118 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headlight_cmd_118, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  headlight_cmd_118_ = headlight_cmd_118;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.headlight_cmd_118)
}

// optional .apollo.canbus.Door_rpt_417 door_rpt_417 = 16;
inline bool Lexus::_internal_has_door_rpt_417() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || door_rpt_417_ != nullptr);
  return value;
}
inline bool Lexus::has_door_rpt_417() const {
  return _internal_has_door_rpt_417();
}
inline void Lexus::clear_door_rpt_417() {
  if (door_rpt_417_ != nullptr) door_rpt_417_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::apollo::canbus::Door_rpt_417& Lexus::_internal_door_rpt_417() const {
  const ::apollo::canbus::Door_rpt_417* p = door_rpt_417_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Door_rpt_417*>(
      &::apollo::canbus::_Door_rpt_417_default_instance_);
}
inline const ::apollo::canbus::Door_rpt_417& Lexus::door_rpt_417() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.door_rpt_417)
  return _internal_door_rpt_417();
}
inline ::apollo::canbus::Door_rpt_417* Lexus::release_door_rpt_417() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.door_rpt_417)
  _has_bits_[0] &= ~0x00008000u;
  ::apollo::canbus::Door_rpt_417* temp = door_rpt_417_;
  door_rpt_417_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Door_rpt_417* Lexus::_internal_mutable_door_rpt_417() {
  _has_bits_[0] |= 0x00008000u;
  if (door_rpt_417_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Door_rpt_417>(GetArenaNoVirtual());
    door_rpt_417_ = p;
  }
  return door_rpt_417_;
}
inline ::apollo::canbus::Door_rpt_417* Lexus::mutable_door_rpt_417() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.door_rpt_417)
  return _internal_mutable_door_rpt_417();
}
inline void Lexus::set_allocated_door_rpt_417(::apollo::canbus::Door_rpt_417* door_rpt_417) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete door_rpt_417_;
  }
  if (door_rpt_417) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      door_rpt_417 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, door_rpt_417, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  door_rpt_417_ = door_rpt_417;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.door_rpt_417)
}

// optional .apollo.canbus.Component_rpt_20 component_rpt_20 = 17;
inline bool Lexus::_internal_has_component_rpt_20() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || component_rpt_20_ != nullptr);
  return value;
}
inline bool Lexus::has_component_rpt_20() const {
  return _internal_has_component_rpt_20();
}
inline void Lexus::clear_component_rpt_20() {
  if (component_rpt_20_ != nullptr) component_rpt_20_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::apollo::canbus::Component_rpt_20& Lexus::_internal_component_rpt_20() const {
  const ::apollo::canbus::Component_rpt_20* p = component_rpt_20_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Component_rpt_20*>(
      &::apollo::canbus::_Component_rpt_20_default_instance_);
}
inline const ::apollo::canbus::Component_rpt_20& Lexus::component_rpt_20() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.component_rpt_20)
  return _internal_component_rpt_20();
}
inline ::apollo::canbus::Component_rpt_20* Lexus::release_component_rpt_20() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.component_rpt_20)
  _has_bits_[0] &= ~0x00010000u;
  ::apollo::canbus::Component_rpt_20* temp = component_rpt_20_;
  component_rpt_20_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Component_rpt_20* Lexus::_internal_mutable_component_rpt_20() {
  _has_bits_[0] |= 0x00010000u;
  if (component_rpt_20_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Component_rpt_20>(GetArenaNoVirtual());
    component_rpt_20_ = p;
  }
  return component_rpt_20_;
}
inline ::apollo::canbus::Component_rpt_20* Lexus::mutable_component_rpt_20() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.component_rpt_20)
  return _internal_mutable_component_rpt_20();
}
inline void Lexus::set_allocated_component_rpt_20(::apollo::canbus::Component_rpt_20* component_rpt_20) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete component_rpt_20_;
  }
  if (component_rpt_20) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component_rpt_20 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_rpt_20, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  component_rpt_20_ = component_rpt_20;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.component_rpt_20)
}

// optional .apollo.canbus.Wheel_speed_rpt_407 wheel_speed_rpt_407 = 18;
inline bool Lexus::_internal_has_wheel_speed_rpt_407() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || wheel_speed_rpt_407_ != nullptr);
  return value;
}
inline bool Lexus::has_wheel_speed_rpt_407() const {
  return _internal_has_wheel_speed_rpt_407();
}
inline void Lexus::clear_wheel_speed_rpt_407() {
  if (wheel_speed_rpt_407_ != nullptr) wheel_speed_rpt_407_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::apollo::canbus::Wheel_speed_rpt_407& Lexus::_internal_wheel_speed_rpt_407() const {
  const ::apollo::canbus::Wheel_speed_rpt_407* p = wheel_speed_rpt_407_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Wheel_speed_rpt_407*>(
      &::apollo::canbus::_Wheel_speed_rpt_407_default_instance_);
}
inline const ::apollo::canbus::Wheel_speed_rpt_407& Lexus::wheel_speed_rpt_407() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.wheel_speed_rpt_407)
  return _internal_wheel_speed_rpt_407();
}
inline ::apollo::canbus::Wheel_speed_rpt_407* Lexus::release_wheel_speed_rpt_407() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.wheel_speed_rpt_407)
  _has_bits_[0] &= ~0x00020000u;
  ::apollo::canbus::Wheel_speed_rpt_407* temp = wheel_speed_rpt_407_;
  wheel_speed_rpt_407_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Wheel_speed_rpt_407* Lexus::_internal_mutable_wheel_speed_rpt_407() {
  _has_bits_[0] |= 0x00020000u;
  if (wheel_speed_rpt_407_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Wheel_speed_rpt_407>(GetArenaNoVirtual());
    wheel_speed_rpt_407_ = p;
  }
  return wheel_speed_rpt_407_;
}
inline ::apollo::canbus::Wheel_speed_rpt_407* Lexus::mutable_wheel_speed_rpt_407() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.wheel_speed_rpt_407)
  return _internal_mutable_wheel_speed_rpt_407();
}
inline void Lexus::set_allocated_wheel_speed_rpt_407(::apollo::canbus::Wheel_speed_rpt_407* wheel_speed_rpt_407) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wheel_speed_rpt_407_;
  }
  if (wheel_speed_rpt_407) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wheel_speed_rpt_407 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheel_speed_rpt_407, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  wheel_speed_rpt_407_ = wheel_speed_rpt_407;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.wheel_speed_rpt_407)
}

// optional .apollo.canbus.Steering_motor_rpt_3_406 steering_motor_rpt_3_406 = 19;
inline bool Lexus::_internal_has_steering_motor_rpt_3_406() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || steering_motor_rpt_3_406_ != nullptr);
  return value;
}
inline bool Lexus::has_steering_motor_rpt_3_406() const {
  return _internal_has_steering_motor_rpt_3_406();
}
inline void Lexus::clear_steering_motor_rpt_3_406() {
  if (steering_motor_rpt_3_406_ != nullptr) steering_motor_rpt_3_406_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::apollo::canbus::Steering_motor_rpt_3_406& Lexus::_internal_steering_motor_rpt_3_406() const {
  const ::apollo::canbus::Steering_motor_rpt_3_406* p = steering_motor_rpt_3_406_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Steering_motor_rpt_3_406*>(
      &::apollo::canbus::_Steering_motor_rpt_3_406_default_instance_);
}
inline const ::apollo::canbus::Steering_motor_rpt_3_406& Lexus::steering_motor_rpt_3_406() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.steering_motor_rpt_3_406)
  return _internal_steering_motor_rpt_3_406();
}
inline ::apollo::canbus::Steering_motor_rpt_3_406* Lexus::release_steering_motor_rpt_3_406() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.steering_motor_rpt_3_406)
  _has_bits_[0] &= ~0x00040000u;
  ::apollo::canbus::Steering_motor_rpt_3_406* temp = steering_motor_rpt_3_406_;
  steering_motor_rpt_3_406_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steering_motor_rpt_3_406* Lexus::_internal_mutable_steering_motor_rpt_3_406() {
  _has_bits_[0] |= 0x00040000u;
  if (steering_motor_rpt_3_406_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steering_motor_rpt_3_406>(GetArenaNoVirtual());
    steering_motor_rpt_3_406_ = p;
  }
  return steering_motor_rpt_3_406_;
}
inline ::apollo::canbus::Steering_motor_rpt_3_406* Lexus::mutable_steering_motor_rpt_3_406() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.steering_motor_rpt_3_406)
  return _internal_mutable_steering_motor_rpt_3_406();
}
inline void Lexus::set_allocated_steering_motor_rpt_3_406(::apollo::canbus::Steering_motor_rpt_3_406* steering_motor_rpt_3_406) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steering_motor_rpt_3_406_;
  }
  if (steering_motor_rpt_3_406) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steering_motor_rpt_3_406 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_motor_rpt_3_406, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  steering_motor_rpt_3_406_ = steering_motor_rpt_3_406;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.steering_motor_rpt_3_406)
}

// optional .apollo.canbus.Steering_motor_rpt_2_405 steering_motor_rpt_2_405 = 20;
inline bool Lexus::_internal_has_steering_motor_rpt_2_405() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || steering_motor_rpt_2_405_ != nullptr);
  return value;
}
inline bool Lexus::has_steering_motor_rpt_2_405() const {
  return _internal_has_steering_motor_rpt_2_405();
}
inline void Lexus::clear_steering_motor_rpt_2_405() {
  if (steering_motor_rpt_2_405_ != nullptr) steering_motor_rpt_2_405_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::apollo::canbus::Steering_motor_rpt_2_405& Lexus::_internal_steering_motor_rpt_2_405() const {
  const ::apollo::canbus::Steering_motor_rpt_2_405* p = steering_motor_rpt_2_405_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Steering_motor_rpt_2_405*>(
      &::apollo::canbus::_Steering_motor_rpt_2_405_default_instance_);
}
inline const ::apollo::canbus::Steering_motor_rpt_2_405& Lexus::steering_motor_rpt_2_405() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.steering_motor_rpt_2_405)
  return _internal_steering_motor_rpt_2_405();
}
inline ::apollo::canbus::Steering_motor_rpt_2_405* Lexus::release_steering_motor_rpt_2_405() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.steering_motor_rpt_2_405)
  _has_bits_[0] &= ~0x00080000u;
  ::apollo::canbus::Steering_motor_rpt_2_405* temp = steering_motor_rpt_2_405_;
  steering_motor_rpt_2_405_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steering_motor_rpt_2_405* Lexus::_internal_mutable_steering_motor_rpt_2_405() {
  _has_bits_[0] |= 0x00080000u;
  if (steering_motor_rpt_2_405_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steering_motor_rpt_2_405>(GetArenaNoVirtual());
    steering_motor_rpt_2_405_ = p;
  }
  return steering_motor_rpt_2_405_;
}
inline ::apollo::canbus::Steering_motor_rpt_2_405* Lexus::mutable_steering_motor_rpt_2_405() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.steering_motor_rpt_2_405)
  return _internal_mutable_steering_motor_rpt_2_405();
}
inline void Lexus::set_allocated_steering_motor_rpt_2_405(::apollo::canbus::Steering_motor_rpt_2_405* steering_motor_rpt_2_405) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steering_motor_rpt_2_405_;
  }
  if (steering_motor_rpt_2_405) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steering_motor_rpt_2_405 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_motor_rpt_2_405, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  steering_motor_rpt_2_405_ = steering_motor_rpt_2_405;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.steering_motor_rpt_2_405)
}

// optional .apollo.canbus.Steering_motor_rpt_1_404 steering_motor_rpt_1_404 = 21;
inline bool Lexus::_internal_has_steering_motor_rpt_1_404() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || steering_motor_rpt_1_404_ != nullptr);
  return value;
}
inline bool Lexus::has_steering_motor_rpt_1_404() const {
  return _internal_has_steering_motor_rpt_1_404();
}
inline void Lexus::clear_steering_motor_rpt_1_404() {
  if (steering_motor_rpt_1_404_ != nullptr) steering_motor_rpt_1_404_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::apollo::canbus::Steering_motor_rpt_1_404& Lexus::_internal_steering_motor_rpt_1_404() const {
  const ::apollo::canbus::Steering_motor_rpt_1_404* p = steering_motor_rpt_1_404_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Steering_motor_rpt_1_404*>(
      &::apollo::canbus::_Steering_motor_rpt_1_404_default_instance_);
}
inline const ::apollo::canbus::Steering_motor_rpt_1_404& Lexus::steering_motor_rpt_1_404() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.steering_motor_rpt_1_404)
  return _internal_steering_motor_rpt_1_404();
}
inline ::apollo::canbus::Steering_motor_rpt_1_404* Lexus::release_steering_motor_rpt_1_404() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.steering_motor_rpt_1_404)
  _has_bits_[0] &= ~0x00100000u;
  ::apollo::canbus::Steering_motor_rpt_1_404* temp = steering_motor_rpt_1_404_;
  steering_motor_rpt_1_404_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steering_motor_rpt_1_404* Lexus::_internal_mutable_steering_motor_rpt_1_404() {
  _has_bits_[0] |= 0x00100000u;
  if (steering_motor_rpt_1_404_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steering_motor_rpt_1_404>(GetArenaNoVirtual());
    steering_motor_rpt_1_404_ = p;
  }
  return steering_motor_rpt_1_404_;
}
inline ::apollo::canbus::Steering_motor_rpt_1_404* Lexus::mutable_steering_motor_rpt_1_404() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.steering_motor_rpt_1_404)
  return _internal_mutable_steering_motor_rpt_1_404();
}
inline void Lexus::set_allocated_steering_motor_rpt_1_404(::apollo::canbus::Steering_motor_rpt_1_404* steering_motor_rpt_1_404) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steering_motor_rpt_1_404_;
  }
  if (steering_motor_rpt_1_404) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steering_motor_rpt_1_404 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_motor_rpt_1_404, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  steering_motor_rpt_1_404_ = steering_motor_rpt_1_404;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.steering_motor_rpt_1_404)
}

// optional .apollo.canbus.Brake_motor_rpt_3_403 brake_motor_rpt_3_403 = 22;
inline bool Lexus::_internal_has_brake_motor_rpt_3_403() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || brake_motor_rpt_3_403_ != nullptr);
  return value;
}
inline bool Lexus::has_brake_motor_rpt_3_403() const {
  return _internal_has_brake_motor_rpt_3_403();
}
inline void Lexus::clear_brake_motor_rpt_3_403() {
  if (brake_motor_rpt_3_403_ != nullptr) brake_motor_rpt_3_403_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::apollo::canbus::Brake_motor_rpt_3_403& Lexus::_internal_brake_motor_rpt_3_403() const {
  const ::apollo::canbus::Brake_motor_rpt_3_403* p = brake_motor_rpt_3_403_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Brake_motor_rpt_3_403*>(
      &::apollo::canbus::_Brake_motor_rpt_3_403_default_instance_);
}
inline const ::apollo::canbus::Brake_motor_rpt_3_403& Lexus::brake_motor_rpt_3_403() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.brake_motor_rpt_3_403)
  return _internal_brake_motor_rpt_3_403();
}
inline ::apollo::canbus::Brake_motor_rpt_3_403* Lexus::release_brake_motor_rpt_3_403() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.brake_motor_rpt_3_403)
  _has_bits_[0] &= ~0x00200000u;
  ::apollo::canbus::Brake_motor_rpt_3_403* temp = brake_motor_rpt_3_403_;
  brake_motor_rpt_3_403_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_motor_rpt_3_403* Lexus::_internal_mutable_brake_motor_rpt_3_403() {
  _has_bits_[0] |= 0x00200000u;
  if (brake_motor_rpt_3_403_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_motor_rpt_3_403>(GetArenaNoVirtual());
    brake_motor_rpt_3_403_ = p;
  }
  return brake_motor_rpt_3_403_;
}
inline ::apollo::canbus::Brake_motor_rpt_3_403* Lexus::mutable_brake_motor_rpt_3_403() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.brake_motor_rpt_3_403)
  return _internal_mutable_brake_motor_rpt_3_403();
}
inline void Lexus::set_allocated_brake_motor_rpt_3_403(::apollo::canbus::Brake_motor_rpt_3_403* brake_motor_rpt_3_403) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brake_motor_rpt_3_403_;
  }
  if (brake_motor_rpt_3_403) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brake_motor_rpt_3_403 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_motor_rpt_3_403, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  brake_motor_rpt_3_403_ = brake_motor_rpt_3_403;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.brake_motor_rpt_3_403)
}

// optional .apollo.canbus.Brake_motor_rpt_2_402 brake_motor_rpt_2_402 = 23;
inline bool Lexus::_internal_has_brake_motor_rpt_2_402() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || brake_motor_rpt_2_402_ != nullptr);
  return value;
}
inline bool Lexus::has_brake_motor_rpt_2_402() const {
  return _internal_has_brake_motor_rpt_2_402();
}
inline void Lexus::clear_brake_motor_rpt_2_402() {
  if (brake_motor_rpt_2_402_ != nullptr) brake_motor_rpt_2_402_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::apollo::canbus::Brake_motor_rpt_2_402& Lexus::_internal_brake_motor_rpt_2_402() const {
  const ::apollo::canbus::Brake_motor_rpt_2_402* p = brake_motor_rpt_2_402_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Brake_motor_rpt_2_402*>(
      &::apollo::canbus::_Brake_motor_rpt_2_402_default_instance_);
}
inline const ::apollo::canbus::Brake_motor_rpt_2_402& Lexus::brake_motor_rpt_2_402() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.brake_motor_rpt_2_402)
  return _internal_brake_motor_rpt_2_402();
}
inline ::apollo::canbus::Brake_motor_rpt_2_402* Lexus::release_brake_motor_rpt_2_402() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.brake_motor_rpt_2_402)
  _has_bits_[0] &= ~0x00400000u;
  ::apollo::canbus::Brake_motor_rpt_2_402* temp = brake_motor_rpt_2_402_;
  brake_motor_rpt_2_402_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_motor_rpt_2_402* Lexus::_internal_mutable_brake_motor_rpt_2_402() {
  _has_bits_[0] |= 0x00400000u;
  if (brake_motor_rpt_2_402_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_motor_rpt_2_402>(GetArenaNoVirtual());
    brake_motor_rpt_2_402_ = p;
  }
  return brake_motor_rpt_2_402_;
}
inline ::apollo::canbus::Brake_motor_rpt_2_402* Lexus::mutable_brake_motor_rpt_2_402() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.brake_motor_rpt_2_402)
  return _internal_mutable_brake_motor_rpt_2_402();
}
inline void Lexus::set_allocated_brake_motor_rpt_2_402(::apollo::canbus::Brake_motor_rpt_2_402* brake_motor_rpt_2_402) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brake_motor_rpt_2_402_;
  }
  if (brake_motor_rpt_2_402) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brake_motor_rpt_2_402 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_motor_rpt_2_402, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  brake_motor_rpt_2_402_ = brake_motor_rpt_2_402;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.brake_motor_rpt_2_402)
}

// optional .apollo.canbus.Brake_motor_rpt_1_401 brake_motor_rpt_1_401 = 24;
inline bool Lexus::_internal_has_brake_motor_rpt_1_401() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || brake_motor_rpt_1_401_ != nullptr);
  return value;
}
inline bool Lexus::has_brake_motor_rpt_1_401() const {
  return _internal_has_brake_motor_rpt_1_401();
}
inline void Lexus::clear_brake_motor_rpt_1_401() {
  if (brake_motor_rpt_1_401_ != nullptr) brake_motor_rpt_1_401_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::apollo::canbus::Brake_motor_rpt_1_401& Lexus::_internal_brake_motor_rpt_1_401() const {
  const ::apollo::canbus::Brake_motor_rpt_1_401* p = brake_motor_rpt_1_401_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Brake_motor_rpt_1_401*>(
      &::apollo::canbus::_Brake_motor_rpt_1_401_default_instance_);
}
inline const ::apollo::canbus::Brake_motor_rpt_1_401& Lexus::brake_motor_rpt_1_401() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.brake_motor_rpt_1_401)
  return _internal_brake_motor_rpt_1_401();
}
inline ::apollo::canbus::Brake_motor_rpt_1_401* Lexus::release_brake_motor_rpt_1_401() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.brake_motor_rpt_1_401)
  _has_bits_[0] &= ~0x00800000u;
  ::apollo::canbus::Brake_motor_rpt_1_401* temp = brake_motor_rpt_1_401_;
  brake_motor_rpt_1_401_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_motor_rpt_1_401* Lexus::_internal_mutable_brake_motor_rpt_1_401() {
  _has_bits_[0] |= 0x00800000u;
  if (brake_motor_rpt_1_401_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_motor_rpt_1_401>(GetArenaNoVirtual());
    brake_motor_rpt_1_401_ = p;
  }
  return brake_motor_rpt_1_401_;
}
inline ::apollo::canbus::Brake_motor_rpt_1_401* Lexus::mutable_brake_motor_rpt_1_401() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.brake_motor_rpt_1_401)
  return _internal_mutable_brake_motor_rpt_1_401();
}
inline void Lexus::set_allocated_brake_motor_rpt_1_401(::apollo::canbus::Brake_motor_rpt_1_401* brake_motor_rpt_1_401) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brake_motor_rpt_1_401_;
  }
  if (brake_motor_rpt_1_401) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brake_motor_rpt_1_401 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_motor_rpt_1_401, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  brake_motor_rpt_1_401_ = brake_motor_rpt_1_401;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.brake_motor_rpt_1_401)
}

// optional .apollo.canbus.Wiper_aux_rpt_334 wiper_aux_rpt_334 = 25;
inline bool Lexus::_internal_has_wiper_aux_rpt_334() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || wiper_aux_rpt_334_ != nullptr);
  return value;
}
inline bool Lexus::has_wiper_aux_rpt_334() const {
  return _internal_has_wiper_aux_rpt_334();
}
inline void Lexus::clear_wiper_aux_rpt_334() {
  if (wiper_aux_rpt_334_ != nullptr) wiper_aux_rpt_334_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::apollo::canbus::Wiper_aux_rpt_334& Lexus::_internal_wiper_aux_rpt_334() const {
  const ::apollo::canbus::Wiper_aux_rpt_334* p = wiper_aux_rpt_334_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Wiper_aux_rpt_334*>(
      &::apollo::canbus::_Wiper_aux_rpt_334_default_instance_);
}
inline const ::apollo::canbus::Wiper_aux_rpt_334& Lexus::wiper_aux_rpt_334() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.wiper_aux_rpt_334)
  return _internal_wiper_aux_rpt_334();
}
inline ::apollo::canbus::Wiper_aux_rpt_334* Lexus::release_wiper_aux_rpt_334() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.wiper_aux_rpt_334)
  _has_bits_[0] &= ~0x01000000u;
  ::apollo::canbus::Wiper_aux_rpt_334* temp = wiper_aux_rpt_334_;
  wiper_aux_rpt_334_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Wiper_aux_rpt_334* Lexus::_internal_mutable_wiper_aux_rpt_334() {
  _has_bits_[0] |= 0x01000000u;
  if (wiper_aux_rpt_334_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Wiper_aux_rpt_334>(GetArenaNoVirtual());
    wiper_aux_rpt_334_ = p;
  }
  return wiper_aux_rpt_334_;
}
inline ::apollo::canbus::Wiper_aux_rpt_334* Lexus::mutable_wiper_aux_rpt_334() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.wiper_aux_rpt_334)
  return _internal_mutable_wiper_aux_rpt_334();
}
inline void Lexus::set_allocated_wiper_aux_rpt_334(::apollo::canbus::Wiper_aux_rpt_334* wiper_aux_rpt_334) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wiper_aux_rpt_334_;
  }
  if (wiper_aux_rpt_334) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wiper_aux_rpt_334 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wiper_aux_rpt_334, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  wiper_aux_rpt_334_ = wiper_aux_rpt_334;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.wiper_aux_rpt_334)
}

// optional .apollo.canbus.Shift_aux_rpt_328 shift_aux_rpt_328 = 26;
inline bool Lexus::_internal_has_shift_aux_rpt_328() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || shift_aux_rpt_328_ != nullptr);
  return value;
}
inline bool Lexus::has_shift_aux_rpt_328() const {
  return _internal_has_shift_aux_rpt_328();
}
inline void Lexus::clear_shift_aux_rpt_328() {
  if (shift_aux_rpt_328_ != nullptr) shift_aux_rpt_328_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::apollo::canbus::Shift_aux_rpt_328& Lexus::_internal_shift_aux_rpt_328() const {
  const ::apollo::canbus::Shift_aux_rpt_328* p = shift_aux_rpt_328_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Shift_aux_rpt_328*>(
      &::apollo::canbus::_Shift_aux_rpt_328_default_instance_);
}
inline const ::apollo::canbus::Shift_aux_rpt_328& Lexus::shift_aux_rpt_328() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.shift_aux_rpt_328)
  return _internal_shift_aux_rpt_328();
}
inline ::apollo::canbus::Shift_aux_rpt_328* Lexus::release_shift_aux_rpt_328() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.shift_aux_rpt_328)
  _has_bits_[0] &= ~0x02000000u;
  ::apollo::canbus::Shift_aux_rpt_328* temp = shift_aux_rpt_328_;
  shift_aux_rpt_328_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Shift_aux_rpt_328* Lexus::_internal_mutable_shift_aux_rpt_328() {
  _has_bits_[0] |= 0x02000000u;
  if (shift_aux_rpt_328_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Shift_aux_rpt_328>(GetArenaNoVirtual());
    shift_aux_rpt_328_ = p;
  }
  return shift_aux_rpt_328_;
}
inline ::apollo::canbus::Shift_aux_rpt_328* Lexus::mutable_shift_aux_rpt_328() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.shift_aux_rpt_328)
  return _internal_mutable_shift_aux_rpt_328();
}
inline void Lexus::set_allocated_shift_aux_rpt_328(::apollo::canbus::Shift_aux_rpt_328* shift_aux_rpt_328) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shift_aux_rpt_328_;
  }
  if (shift_aux_rpt_328) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shift_aux_rpt_328 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shift_aux_rpt_328, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  shift_aux_rpt_328_ = shift_aux_rpt_328;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.shift_aux_rpt_328)
}

// optional .apollo.canbus.Accel_rpt_200 accel_rpt_200 = 27;
inline bool Lexus::_internal_has_accel_rpt_200() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || accel_rpt_200_ != nullptr);
  return value;
}
inline bool Lexus::has_accel_rpt_200() const {
  return _internal_has_accel_rpt_200();
}
inline void Lexus::clear_accel_rpt_200() {
  if (accel_rpt_200_ != nullptr) accel_rpt_200_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::apollo::canbus::Accel_rpt_200& Lexus::_internal_accel_rpt_200() const {
  const ::apollo::canbus::Accel_rpt_200* p = accel_rpt_200_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Accel_rpt_200*>(
      &::apollo::canbus::_Accel_rpt_200_default_instance_);
}
inline const ::apollo::canbus::Accel_rpt_200& Lexus::accel_rpt_200() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.accel_rpt_200)
  return _internal_accel_rpt_200();
}
inline ::apollo::canbus::Accel_rpt_200* Lexus::release_accel_rpt_200() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.accel_rpt_200)
  _has_bits_[0] &= ~0x04000000u;
  ::apollo::canbus::Accel_rpt_200* temp = accel_rpt_200_;
  accel_rpt_200_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Accel_rpt_200* Lexus::_internal_mutable_accel_rpt_200() {
  _has_bits_[0] |= 0x04000000u;
  if (accel_rpt_200_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Accel_rpt_200>(GetArenaNoVirtual());
    accel_rpt_200_ = p;
  }
  return accel_rpt_200_;
}
inline ::apollo::canbus::Accel_rpt_200* Lexus::mutable_accel_rpt_200() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.accel_rpt_200)
  return _internal_mutable_accel_rpt_200();
}
inline void Lexus::set_allocated_accel_rpt_200(::apollo::canbus::Accel_rpt_200* accel_rpt_200) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete accel_rpt_200_;
  }
  if (accel_rpt_200) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accel_rpt_200 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel_rpt_200, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  accel_rpt_200_ = accel_rpt_200;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.accel_rpt_200)
}

// optional .apollo.canbus.Brake_rpt_204 brake_rpt_204 = 28;
inline bool Lexus::_internal_has_brake_rpt_204() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || brake_rpt_204_ != nullptr);
  return value;
}
inline bool Lexus::has_brake_rpt_204() const {
  return _internal_has_brake_rpt_204();
}
inline void Lexus::clear_brake_rpt_204() {
  if (brake_rpt_204_ != nullptr) brake_rpt_204_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::apollo::canbus::Brake_rpt_204& Lexus::_internal_brake_rpt_204() const {
  const ::apollo::canbus::Brake_rpt_204* p = brake_rpt_204_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Brake_rpt_204*>(
      &::apollo::canbus::_Brake_rpt_204_default_instance_);
}
inline const ::apollo::canbus::Brake_rpt_204& Lexus::brake_rpt_204() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.brake_rpt_204)
  return _internal_brake_rpt_204();
}
inline ::apollo::canbus::Brake_rpt_204* Lexus::release_brake_rpt_204() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.brake_rpt_204)
  _has_bits_[0] &= ~0x08000000u;
  ::apollo::canbus::Brake_rpt_204* temp = brake_rpt_204_;
  brake_rpt_204_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_rpt_204* Lexus::_internal_mutable_brake_rpt_204() {
  _has_bits_[0] |= 0x08000000u;
  if (brake_rpt_204_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_rpt_204>(GetArenaNoVirtual());
    brake_rpt_204_ = p;
  }
  return brake_rpt_204_;
}
inline ::apollo::canbus::Brake_rpt_204* Lexus::mutable_brake_rpt_204() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.brake_rpt_204)
  return _internal_mutable_brake_rpt_204();
}
inline void Lexus::set_allocated_brake_rpt_204(::apollo::canbus::Brake_rpt_204* brake_rpt_204) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brake_rpt_204_;
  }
  if (brake_rpt_204) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brake_rpt_204 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_rpt_204, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  brake_rpt_204_ = brake_rpt_204;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.brake_rpt_204)
}

// optional .apollo.canbus.Horn_cmd_11c horn_cmd_11c = 29;
inline bool Lexus::_internal_has_horn_cmd_11c() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || horn_cmd_11c_ != nullptr);
  return value;
}
inline bool Lexus::has_horn_cmd_11c() const {
  return _internal_has_horn_cmd_11c();
}
inline void Lexus::clear_horn_cmd_11c() {
  if (horn_cmd_11c_ != nullptr) horn_cmd_11c_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::apollo::canbus::Horn_cmd_11c& Lexus::_internal_horn_cmd_11c() const {
  const ::apollo::canbus::Horn_cmd_11c* p = horn_cmd_11c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Horn_cmd_11c*>(
      &::apollo::canbus::_Horn_cmd_11c_default_instance_);
}
inline const ::apollo::canbus::Horn_cmd_11c& Lexus::horn_cmd_11c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.horn_cmd_11c)
  return _internal_horn_cmd_11c();
}
inline ::apollo::canbus::Horn_cmd_11c* Lexus::release_horn_cmd_11c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.horn_cmd_11c)
  _has_bits_[0] &= ~0x10000000u;
  ::apollo::canbus::Horn_cmd_11c* temp = horn_cmd_11c_;
  horn_cmd_11c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Horn_cmd_11c* Lexus::_internal_mutable_horn_cmd_11c() {
  _has_bits_[0] |= 0x10000000u;
  if (horn_cmd_11c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Horn_cmd_11c>(GetArenaNoVirtual());
    horn_cmd_11c_ = p;
  }
  return horn_cmd_11c_;
}
inline ::apollo::canbus::Horn_cmd_11c* Lexus::mutable_horn_cmd_11c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.horn_cmd_11c)
  return _internal_mutable_horn_cmd_11c();
}
inline void Lexus::set_allocated_horn_cmd_11c(::apollo::canbus::Horn_cmd_11c* horn_cmd_11c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete horn_cmd_11c_;
  }
  if (horn_cmd_11c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      horn_cmd_11c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horn_cmd_11c, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  horn_cmd_11c_ = horn_cmd_11c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.horn_cmd_11c)
}

// optional .apollo.canbus.Global_rpt_10 global_rpt_10 = 30;
inline bool Lexus::_internal_has_global_rpt_10() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || global_rpt_10_ != nullptr);
  return value;
}
inline bool Lexus::has_global_rpt_10() const {
  return _internal_has_global_rpt_10();
}
inline void Lexus::clear_global_rpt_10() {
  if (global_rpt_10_ != nullptr) global_rpt_10_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::apollo::canbus::Global_rpt_10& Lexus::_internal_global_rpt_10() const {
  const ::apollo::canbus::Global_rpt_10* p = global_rpt_10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Global_rpt_10*>(
      &::apollo::canbus::_Global_rpt_10_default_instance_);
}
inline const ::apollo::canbus::Global_rpt_10& Lexus::global_rpt_10() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.global_rpt_10)
  return _internal_global_rpt_10();
}
inline ::apollo::canbus::Global_rpt_10* Lexus::release_global_rpt_10() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.global_rpt_10)
  _has_bits_[0] &= ~0x20000000u;
  ::apollo::canbus::Global_rpt_10* temp = global_rpt_10_;
  global_rpt_10_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Global_rpt_10* Lexus::_internal_mutable_global_rpt_10() {
  _has_bits_[0] |= 0x20000000u;
  if (global_rpt_10_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Global_rpt_10>(GetArenaNoVirtual());
    global_rpt_10_ = p;
  }
  return global_rpt_10_;
}
inline ::apollo::canbus::Global_rpt_10* Lexus::mutable_global_rpt_10() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.global_rpt_10)
  return _internal_mutable_global_rpt_10();
}
inline void Lexus::set_allocated_global_rpt_10(::apollo::canbus::Global_rpt_10* global_rpt_10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_rpt_10_;
  }
  if (global_rpt_10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_rpt_10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_rpt_10, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  global_rpt_10_ = global_rpt_10;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.global_rpt_10)
}

// optional .apollo.canbus.Accel_aux_rpt_300 accel_aux_rpt_300 = 31;
inline bool Lexus::_internal_has_accel_aux_rpt_300() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || accel_aux_rpt_300_ != nullptr);
  return value;
}
inline bool Lexus::has_accel_aux_rpt_300() const {
  return _internal_has_accel_aux_rpt_300();
}
inline void Lexus::clear_accel_aux_rpt_300() {
  if (accel_aux_rpt_300_ != nullptr) accel_aux_rpt_300_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::apollo::canbus::Accel_aux_rpt_300& Lexus::_internal_accel_aux_rpt_300() const {
  const ::apollo::canbus::Accel_aux_rpt_300* p = accel_aux_rpt_300_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Accel_aux_rpt_300*>(
      &::apollo::canbus::_Accel_aux_rpt_300_default_instance_);
}
inline const ::apollo::canbus::Accel_aux_rpt_300& Lexus::accel_aux_rpt_300() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.accel_aux_rpt_300)
  return _internal_accel_aux_rpt_300();
}
inline ::apollo::canbus::Accel_aux_rpt_300* Lexus::release_accel_aux_rpt_300() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.accel_aux_rpt_300)
  _has_bits_[0] &= ~0x40000000u;
  ::apollo::canbus::Accel_aux_rpt_300* temp = accel_aux_rpt_300_;
  accel_aux_rpt_300_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Accel_aux_rpt_300* Lexus::_internal_mutable_accel_aux_rpt_300() {
  _has_bits_[0] |= 0x40000000u;
  if (accel_aux_rpt_300_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Accel_aux_rpt_300>(GetArenaNoVirtual());
    accel_aux_rpt_300_ = p;
  }
  return accel_aux_rpt_300_;
}
inline ::apollo::canbus::Accel_aux_rpt_300* Lexus::mutable_accel_aux_rpt_300() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.accel_aux_rpt_300)
  return _internal_mutable_accel_aux_rpt_300();
}
inline void Lexus::set_allocated_accel_aux_rpt_300(::apollo::canbus::Accel_aux_rpt_300* accel_aux_rpt_300) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete accel_aux_rpt_300_;
  }
  if (accel_aux_rpt_300) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accel_aux_rpt_300 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel_aux_rpt_300, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  accel_aux_rpt_300_ = accel_aux_rpt_300;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.accel_aux_rpt_300)
}

// optional .apollo.canbus.Cruise_control_buttons_rpt_208 cruise_control_buttons_rpt_208 = 32;
inline bool Lexus::_internal_has_cruise_control_buttons_rpt_208() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || cruise_control_buttons_rpt_208_ != nullptr);
  return value;
}
inline bool Lexus::has_cruise_control_buttons_rpt_208() const {
  return _internal_has_cruise_control_buttons_rpt_208();
}
inline void Lexus::clear_cruise_control_buttons_rpt_208() {
  if (cruise_control_buttons_rpt_208_ != nullptr) cruise_control_buttons_rpt_208_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
inline const ::apollo::canbus::Cruise_control_buttons_rpt_208& Lexus::_internal_cruise_control_buttons_rpt_208() const {
  const ::apollo::canbus::Cruise_control_buttons_rpt_208* p = cruise_control_buttons_rpt_208_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Cruise_control_buttons_rpt_208*>(
      &::apollo::canbus::_Cruise_control_buttons_rpt_208_default_instance_);
}
inline const ::apollo::canbus::Cruise_control_buttons_rpt_208& Lexus::cruise_control_buttons_rpt_208() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.cruise_control_buttons_rpt_208)
  return _internal_cruise_control_buttons_rpt_208();
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208* Lexus::release_cruise_control_buttons_rpt_208() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.cruise_control_buttons_rpt_208)
  _has_bits_[0] &= ~0x80000000u;
  ::apollo::canbus::Cruise_control_buttons_rpt_208* temp = cruise_control_buttons_rpt_208_;
  cruise_control_buttons_rpt_208_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208* Lexus::_internal_mutable_cruise_control_buttons_rpt_208() {
  _has_bits_[0] |= 0x80000000u;
  if (cruise_control_buttons_rpt_208_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Cruise_control_buttons_rpt_208>(GetArenaNoVirtual());
    cruise_control_buttons_rpt_208_ = p;
  }
  return cruise_control_buttons_rpt_208_;
}
inline ::apollo::canbus::Cruise_control_buttons_rpt_208* Lexus::mutable_cruise_control_buttons_rpt_208() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.cruise_control_buttons_rpt_208)
  return _internal_mutable_cruise_control_buttons_rpt_208();
}
inline void Lexus::set_allocated_cruise_control_buttons_rpt_208(::apollo::canbus::Cruise_control_buttons_rpt_208* cruise_control_buttons_rpt_208) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cruise_control_buttons_rpt_208_;
  }
  if (cruise_control_buttons_rpt_208) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cruise_control_buttons_rpt_208 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cruise_control_buttons_rpt_208, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  cruise_control_buttons_rpt_208_ = cruise_control_buttons_rpt_208;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.cruise_control_buttons_rpt_208)
}

// optional .apollo.canbus.Vehicle_speed_rpt_400 vehicle_speed_rpt_400 = 33;
inline bool Lexus::_internal_has_vehicle_speed_rpt_400() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_speed_rpt_400_ != nullptr);
  return value;
}
inline bool Lexus::has_vehicle_speed_rpt_400() const {
  return _internal_has_vehicle_speed_rpt_400();
}
inline void Lexus::clear_vehicle_speed_rpt_400() {
  if (vehicle_speed_rpt_400_ != nullptr) vehicle_speed_rpt_400_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
inline const ::apollo::canbus::Vehicle_speed_rpt_400& Lexus::_internal_vehicle_speed_rpt_400() const {
  const ::apollo::canbus::Vehicle_speed_rpt_400* p = vehicle_speed_rpt_400_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Vehicle_speed_rpt_400*>(
      &::apollo::canbus::_Vehicle_speed_rpt_400_default_instance_);
}
inline const ::apollo::canbus::Vehicle_speed_rpt_400& Lexus::vehicle_speed_rpt_400() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.vehicle_speed_rpt_400)
  return _internal_vehicle_speed_rpt_400();
}
inline ::apollo::canbus::Vehicle_speed_rpt_400* Lexus::release_vehicle_speed_rpt_400() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.vehicle_speed_rpt_400)
  _has_bits_[1] &= ~0x00000001u;
  ::apollo::canbus::Vehicle_speed_rpt_400* temp = vehicle_speed_rpt_400_;
  vehicle_speed_rpt_400_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vehicle_speed_rpt_400* Lexus::_internal_mutable_vehicle_speed_rpt_400() {
  _has_bits_[1] |= 0x00000001u;
  if (vehicle_speed_rpt_400_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vehicle_speed_rpt_400>(GetArenaNoVirtual());
    vehicle_speed_rpt_400_ = p;
  }
  return vehicle_speed_rpt_400_;
}
inline ::apollo::canbus::Vehicle_speed_rpt_400* Lexus::mutable_vehicle_speed_rpt_400() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.vehicle_speed_rpt_400)
  return _internal_mutable_vehicle_speed_rpt_400();
}
inline void Lexus::set_allocated_vehicle_speed_rpt_400(::apollo::canbus::Vehicle_speed_rpt_400* vehicle_speed_rpt_400) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_speed_rpt_400_;
  }
  if (vehicle_speed_rpt_400) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_speed_rpt_400 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_speed_rpt_400, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  vehicle_speed_rpt_400_ = vehicle_speed_rpt_400;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.vehicle_speed_rpt_400)
}

// optional .apollo.canbus.Brake_aux_rpt_304 brake_aux_rpt_304 = 34;
inline bool Lexus::_internal_has_brake_aux_rpt_304() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || brake_aux_rpt_304_ != nullptr);
  return value;
}
inline bool Lexus::has_brake_aux_rpt_304() const {
  return _internal_has_brake_aux_rpt_304();
}
inline void Lexus::clear_brake_aux_rpt_304() {
  if (brake_aux_rpt_304_ != nullptr) brake_aux_rpt_304_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::apollo::canbus::Brake_aux_rpt_304& Lexus::_internal_brake_aux_rpt_304() const {
  const ::apollo::canbus::Brake_aux_rpt_304* p = brake_aux_rpt_304_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Brake_aux_rpt_304*>(
      &::apollo::canbus::_Brake_aux_rpt_304_default_instance_);
}
inline const ::apollo::canbus::Brake_aux_rpt_304& Lexus::brake_aux_rpt_304() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.brake_aux_rpt_304)
  return _internal_brake_aux_rpt_304();
}
inline ::apollo::canbus::Brake_aux_rpt_304* Lexus::release_brake_aux_rpt_304() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.brake_aux_rpt_304)
  _has_bits_[1] &= ~0x00000002u;
  ::apollo::canbus::Brake_aux_rpt_304* temp = brake_aux_rpt_304_;
  brake_aux_rpt_304_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_aux_rpt_304* Lexus::_internal_mutable_brake_aux_rpt_304() {
  _has_bits_[1] |= 0x00000002u;
  if (brake_aux_rpt_304_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_aux_rpt_304>(GetArenaNoVirtual());
    brake_aux_rpt_304_ = p;
  }
  return brake_aux_rpt_304_;
}
inline ::apollo::canbus::Brake_aux_rpt_304* Lexus::mutable_brake_aux_rpt_304() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.brake_aux_rpt_304)
  return _internal_mutable_brake_aux_rpt_304();
}
inline void Lexus::set_allocated_brake_aux_rpt_304(::apollo::canbus::Brake_aux_rpt_304* brake_aux_rpt_304) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brake_aux_rpt_304_;
  }
  if (brake_aux_rpt_304) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brake_aux_rpt_304 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_aux_rpt_304, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  brake_aux_rpt_304_ = brake_aux_rpt_304;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.brake_aux_rpt_304)
}

// optional .apollo.canbus.Media_controls_cmd_120 media_controls_cmd_120 = 35;
inline bool Lexus::_internal_has_media_controls_cmd_120() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || media_controls_cmd_120_ != nullptr);
  return value;
}
inline bool Lexus::has_media_controls_cmd_120() const {
  return _internal_has_media_controls_cmd_120();
}
inline void Lexus::clear_media_controls_cmd_120() {
  if (media_controls_cmd_120_ != nullptr) media_controls_cmd_120_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::apollo::canbus::Media_controls_cmd_120& Lexus::_internal_media_controls_cmd_120() const {
  const ::apollo::canbus::Media_controls_cmd_120* p = media_controls_cmd_120_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Media_controls_cmd_120*>(
      &::apollo::canbus::_Media_controls_cmd_120_default_instance_);
}
inline const ::apollo::canbus::Media_controls_cmd_120& Lexus::media_controls_cmd_120() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.media_controls_cmd_120)
  return _internal_media_controls_cmd_120();
}
inline ::apollo::canbus::Media_controls_cmd_120* Lexus::release_media_controls_cmd_120() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.media_controls_cmd_120)
  _has_bits_[1] &= ~0x00000004u;
  ::apollo::canbus::Media_controls_cmd_120* temp = media_controls_cmd_120_;
  media_controls_cmd_120_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Media_controls_cmd_120* Lexus::_internal_mutable_media_controls_cmd_120() {
  _has_bits_[1] |= 0x00000004u;
  if (media_controls_cmd_120_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Media_controls_cmd_120>(GetArenaNoVirtual());
    media_controls_cmd_120_ = p;
  }
  return media_controls_cmd_120_;
}
inline ::apollo::canbus::Media_controls_cmd_120* Lexus::mutable_media_controls_cmd_120() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.media_controls_cmd_120)
  return _internal_mutable_media_controls_cmd_120();
}
inline void Lexus::set_allocated_media_controls_cmd_120(::apollo::canbus::Media_controls_cmd_120* media_controls_cmd_120) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete media_controls_cmd_120_;
  }
  if (media_controls_cmd_120) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      media_controls_cmd_120 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_controls_cmd_120, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  media_controls_cmd_120_ = media_controls_cmd_120;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.media_controls_cmd_120)
}

// optional .apollo.canbus.Cruise_control_buttons_cmd_108 cruise_control_buttons_cmd_108 = 36;
inline bool Lexus::_internal_has_cruise_control_buttons_cmd_108() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || cruise_control_buttons_cmd_108_ != nullptr);
  return value;
}
inline bool Lexus::has_cruise_control_buttons_cmd_108() const {
  return _internal_has_cruise_control_buttons_cmd_108();
}
inline void Lexus::clear_cruise_control_buttons_cmd_108() {
  if (cruise_control_buttons_cmd_108_ != nullptr) cruise_control_buttons_cmd_108_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
inline const ::apollo::canbus::Cruise_control_buttons_cmd_108& Lexus::_internal_cruise_control_buttons_cmd_108() const {
  const ::apollo::canbus::Cruise_control_buttons_cmd_108* p = cruise_control_buttons_cmd_108_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Cruise_control_buttons_cmd_108*>(
      &::apollo::canbus::_Cruise_control_buttons_cmd_108_default_instance_);
}
inline const ::apollo::canbus::Cruise_control_buttons_cmd_108& Lexus::cruise_control_buttons_cmd_108() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.cruise_control_buttons_cmd_108)
  return _internal_cruise_control_buttons_cmd_108();
}
inline ::apollo::canbus::Cruise_control_buttons_cmd_108* Lexus::release_cruise_control_buttons_cmd_108() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.cruise_control_buttons_cmd_108)
  _has_bits_[1] &= ~0x00000008u;
  ::apollo::canbus::Cruise_control_buttons_cmd_108* temp = cruise_control_buttons_cmd_108_;
  cruise_control_buttons_cmd_108_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Cruise_control_buttons_cmd_108* Lexus::_internal_mutable_cruise_control_buttons_cmd_108() {
  _has_bits_[1] |= 0x00000008u;
  if (cruise_control_buttons_cmd_108_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Cruise_control_buttons_cmd_108>(GetArenaNoVirtual());
    cruise_control_buttons_cmd_108_ = p;
  }
  return cruise_control_buttons_cmd_108_;
}
inline ::apollo::canbus::Cruise_control_buttons_cmd_108* Lexus::mutable_cruise_control_buttons_cmd_108() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.cruise_control_buttons_cmd_108)
  return _internal_mutable_cruise_control_buttons_cmd_108();
}
inline void Lexus::set_allocated_cruise_control_buttons_cmd_108(::apollo::canbus::Cruise_control_buttons_cmd_108* cruise_control_buttons_cmd_108) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cruise_control_buttons_cmd_108_;
  }
  if (cruise_control_buttons_cmd_108) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cruise_control_buttons_cmd_108 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cruise_control_buttons_cmd_108, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  cruise_control_buttons_cmd_108_ = cruise_control_buttons_cmd_108;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.cruise_control_buttons_cmd_108)
}

// optional .apollo.canbus.Parking_brake_cmd_124 parking_brake_cmd_124 = 37;
inline bool Lexus::_internal_has_parking_brake_cmd_124() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || parking_brake_cmd_124_ != nullptr);
  return value;
}
inline bool Lexus::has_parking_brake_cmd_124() const {
  return _internal_has_parking_brake_cmd_124();
}
inline void Lexus::clear_parking_brake_cmd_124() {
  if (parking_brake_cmd_124_ != nullptr) parking_brake_cmd_124_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::apollo::canbus::Parking_brake_cmd_124& Lexus::_internal_parking_brake_cmd_124() const {
  const ::apollo::canbus::Parking_brake_cmd_124* p = parking_brake_cmd_124_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Parking_brake_cmd_124*>(
      &::apollo::canbus::_Parking_brake_cmd_124_default_instance_);
}
inline const ::apollo::canbus::Parking_brake_cmd_124& Lexus::parking_brake_cmd_124() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.parking_brake_cmd_124)
  return _internal_parking_brake_cmd_124();
}
inline ::apollo::canbus::Parking_brake_cmd_124* Lexus::release_parking_brake_cmd_124() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.parking_brake_cmd_124)
  _has_bits_[1] &= ~0x00000010u;
  ::apollo::canbus::Parking_brake_cmd_124* temp = parking_brake_cmd_124_;
  parking_brake_cmd_124_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Parking_brake_cmd_124* Lexus::_internal_mutable_parking_brake_cmd_124() {
  _has_bits_[1] |= 0x00000010u;
  if (parking_brake_cmd_124_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Parking_brake_cmd_124>(GetArenaNoVirtual());
    parking_brake_cmd_124_ = p;
  }
  return parking_brake_cmd_124_;
}
inline ::apollo::canbus::Parking_brake_cmd_124* Lexus::mutable_parking_brake_cmd_124() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.parking_brake_cmd_124)
  return _internal_mutable_parking_brake_cmd_124();
}
inline void Lexus::set_allocated_parking_brake_cmd_124(::apollo::canbus::Parking_brake_cmd_124* parking_brake_cmd_124) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parking_brake_cmd_124_;
  }
  if (parking_brake_cmd_124) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parking_brake_cmd_124 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_brake_cmd_124, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  parking_brake_cmd_124_ = parking_brake_cmd_124;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.parking_brake_cmd_124)
}

// optional .apollo.canbus.Horn_rpt_21c horn_rpt_21c = 38;
inline bool Lexus::_internal_has_horn_rpt_21c() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || horn_rpt_21c_ != nullptr);
  return value;
}
inline bool Lexus::has_horn_rpt_21c() const {
  return _internal_has_horn_rpt_21c();
}
inline void Lexus::clear_horn_rpt_21c() {
  if (horn_rpt_21c_ != nullptr) horn_rpt_21c_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::apollo::canbus::Horn_rpt_21c& Lexus::_internal_horn_rpt_21c() const {
  const ::apollo::canbus::Horn_rpt_21c* p = horn_rpt_21c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Horn_rpt_21c*>(
      &::apollo::canbus::_Horn_rpt_21c_default_instance_);
}
inline const ::apollo::canbus::Horn_rpt_21c& Lexus::horn_rpt_21c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.horn_rpt_21c)
  return _internal_horn_rpt_21c();
}
inline ::apollo::canbus::Horn_rpt_21c* Lexus::release_horn_rpt_21c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.horn_rpt_21c)
  _has_bits_[1] &= ~0x00000020u;
  ::apollo::canbus::Horn_rpt_21c* temp = horn_rpt_21c_;
  horn_rpt_21c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Horn_rpt_21c* Lexus::_internal_mutable_horn_rpt_21c() {
  _has_bits_[1] |= 0x00000020u;
  if (horn_rpt_21c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Horn_rpt_21c>(GetArenaNoVirtual());
    horn_rpt_21c_ = p;
  }
  return horn_rpt_21c_;
}
inline ::apollo::canbus::Horn_rpt_21c* Lexus::mutable_horn_rpt_21c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.horn_rpt_21c)
  return _internal_mutable_horn_rpt_21c();
}
inline void Lexus::set_allocated_horn_rpt_21c(::apollo::canbus::Horn_rpt_21c* horn_rpt_21c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete horn_rpt_21c_;
  }
  if (horn_rpt_21c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      horn_rpt_21c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horn_rpt_21c, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  horn_rpt_21c_ = horn_rpt_21c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.horn_rpt_21c)
}

// optional .apollo.canbus.Shift_rpt_228 shift_rpt_228 = 39;
inline bool Lexus::_internal_has_shift_rpt_228() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || shift_rpt_228_ != nullptr);
  return value;
}
inline bool Lexus::has_shift_rpt_228() const {
  return _internal_has_shift_rpt_228();
}
inline void Lexus::clear_shift_rpt_228() {
  if (shift_rpt_228_ != nullptr) shift_rpt_228_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::apollo::canbus::Shift_rpt_228& Lexus::_internal_shift_rpt_228() const {
  const ::apollo::canbus::Shift_rpt_228* p = shift_rpt_228_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Shift_rpt_228*>(
      &::apollo::canbus::_Shift_rpt_228_default_instance_);
}
inline const ::apollo::canbus::Shift_rpt_228& Lexus::shift_rpt_228() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.shift_rpt_228)
  return _internal_shift_rpt_228();
}
inline ::apollo::canbus::Shift_rpt_228* Lexus::release_shift_rpt_228() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.shift_rpt_228)
  _has_bits_[1] &= ~0x00000040u;
  ::apollo::canbus::Shift_rpt_228* temp = shift_rpt_228_;
  shift_rpt_228_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Shift_rpt_228* Lexus::_internal_mutable_shift_rpt_228() {
  _has_bits_[1] |= 0x00000040u;
  if (shift_rpt_228_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Shift_rpt_228>(GetArenaNoVirtual());
    shift_rpt_228_ = p;
  }
  return shift_rpt_228_;
}
inline ::apollo::canbus::Shift_rpt_228* Lexus::mutable_shift_rpt_228() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.shift_rpt_228)
  return _internal_mutable_shift_rpt_228();
}
inline void Lexus::set_allocated_shift_rpt_228(::apollo::canbus::Shift_rpt_228* shift_rpt_228) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shift_rpt_228_;
  }
  if (shift_rpt_228) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shift_rpt_228 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shift_rpt_228, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  shift_rpt_228_ = shift_rpt_228;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.shift_rpt_228)
}

// optional .apollo.canbus.Shift_cmd_128 shift_cmd_128 = 40;
inline bool Lexus::_internal_has_shift_cmd_128() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || shift_cmd_128_ != nullptr);
  return value;
}
inline bool Lexus::has_shift_cmd_128() const {
  return _internal_has_shift_cmd_128();
}
inline void Lexus::clear_shift_cmd_128() {
  if (shift_cmd_128_ != nullptr) shift_cmd_128_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::apollo::canbus::Shift_cmd_128& Lexus::_internal_shift_cmd_128() const {
  const ::apollo::canbus::Shift_cmd_128* p = shift_cmd_128_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Shift_cmd_128*>(
      &::apollo::canbus::_Shift_cmd_128_default_instance_);
}
inline const ::apollo::canbus::Shift_cmd_128& Lexus::shift_cmd_128() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.shift_cmd_128)
  return _internal_shift_cmd_128();
}
inline ::apollo::canbus::Shift_cmd_128* Lexus::release_shift_cmd_128() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.shift_cmd_128)
  _has_bits_[1] &= ~0x00000080u;
  ::apollo::canbus::Shift_cmd_128* temp = shift_cmd_128_;
  shift_cmd_128_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Shift_cmd_128* Lexus::_internal_mutable_shift_cmd_128() {
  _has_bits_[1] |= 0x00000080u;
  if (shift_cmd_128_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Shift_cmd_128>(GetArenaNoVirtual());
    shift_cmd_128_ = p;
  }
  return shift_cmd_128_;
}
inline ::apollo::canbus::Shift_cmd_128* Lexus::mutable_shift_cmd_128() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.shift_cmd_128)
  return _internal_mutable_shift_cmd_128();
}
inline void Lexus::set_allocated_shift_cmd_128(::apollo::canbus::Shift_cmd_128* shift_cmd_128) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shift_cmd_128_;
  }
  if (shift_cmd_128) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shift_cmd_128 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shift_cmd_128, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  shift_cmd_128_ = shift_cmd_128;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.shift_cmd_128)
}

// optional .apollo.canbus.Accel_cmd_100 accel_cmd_100 = 41;
inline bool Lexus::_internal_has_accel_cmd_100() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || accel_cmd_100_ != nullptr);
  return value;
}
inline bool Lexus::has_accel_cmd_100() const {
  return _internal_has_accel_cmd_100();
}
inline void Lexus::clear_accel_cmd_100() {
  if (accel_cmd_100_ != nullptr) accel_cmd_100_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::apollo::canbus::Accel_cmd_100& Lexus::_internal_accel_cmd_100() const {
  const ::apollo::canbus::Accel_cmd_100* p = accel_cmd_100_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Accel_cmd_100*>(
      &::apollo::canbus::_Accel_cmd_100_default_instance_);
}
inline const ::apollo::canbus::Accel_cmd_100& Lexus::accel_cmd_100() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.accel_cmd_100)
  return _internal_accel_cmd_100();
}
inline ::apollo::canbus::Accel_cmd_100* Lexus::release_accel_cmd_100() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.accel_cmd_100)
  _has_bits_[1] &= ~0x00000100u;
  ::apollo::canbus::Accel_cmd_100* temp = accel_cmd_100_;
  accel_cmd_100_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Accel_cmd_100* Lexus::_internal_mutable_accel_cmd_100() {
  _has_bits_[1] |= 0x00000100u;
  if (accel_cmd_100_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Accel_cmd_100>(GetArenaNoVirtual());
    accel_cmd_100_ = p;
  }
  return accel_cmd_100_;
}
inline ::apollo::canbus::Accel_cmd_100* Lexus::mutable_accel_cmd_100() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.accel_cmd_100)
  return _internal_mutable_accel_cmd_100();
}
inline void Lexus::set_allocated_accel_cmd_100(::apollo::canbus::Accel_cmd_100* accel_cmd_100) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete accel_cmd_100_;
  }
  if (accel_cmd_100) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accel_cmd_100 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel_cmd_100, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  accel_cmd_100_ = accel_cmd_100;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.accel_cmd_100)
}

// optional .apollo.canbus.Parking_brake_rpt_224 parking_brake_rpt_224 = 42;
inline bool Lexus::_internal_has_parking_brake_rpt_224() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || parking_brake_rpt_224_ != nullptr);
  return value;
}
inline bool Lexus::has_parking_brake_rpt_224() const {
  return _internal_has_parking_brake_rpt_224();
}
inline void Lexus::clear_parking_brake_rpt_224() {
  if (parking_brake_rpt_224_ != nullptr) parking_brake_rpt_224_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::apollo::canbus::Parking_brake_rpt_224& Lexus::_internal_parking_brake_rpt_224() const {
  const ::apollo::canbus::Parking_brake_rpt_224* p = parking_brake_rpt_224_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Parking_brake_rpt_224*>(
      &::apollo::canbus::_Parking_brake_rpt_224_default_instance_);
}
inline const ::apollo::canbus::Parking_brake_rpt_224& Lexus::parking_brake_rpt_224() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.parking_brake_rpt_224)
  return _internal_parking_brake_rpt_224();
}
inline ::apollo::canbus::Parking_brake_rpt_224* Lexus::release_parking_brake_rpt_224() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.parking_brake_rpt_224)
  _has_bits_[1] &= ~0x00000200u;
  ::apollo::canbus::Parking_brake_rpt_224* temp = parking_brake_rpt_224_;
  parking_brake_rpt_224_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Parking_brake_rpt_224* Lexus::_internal_mutable_parking_brake_rpt_224() {
  _has_bits_[1] |= 0x00000200u;
  if (parking_brake_rpt_224_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Parking_brake_rpt_224>(GetArenaNoVirtual());
    parking_brake_rpt_224_ = p;
  }
  return parking_brake_rpt_224_;
}
inline ::apollo::canbus::Parking_brake_rpt_224* Lexus::mutable_parking_brake_rpt_224() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.parking_brake_rpt_224)
  return _internal_mutable_parking_brake_rpt_224();
}
inline void Lexus::set_allocated_parking_brake_rpt_224(::apollo::canbus::Parking_brake_rpt_224* parking_brake_rpt_224) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parking_brake_rpt_224_;
  }
  if (parking_brake_rpt_224) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parking_brake_rpt_224 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_brake_rpt_224, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  parking_brake_rpt_224_ = parking_brake_rpt_224;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.parking_brake_rpt_224)
}

// optional .apollo.canbus.Brake_cmd_104 brake_cmd_104 = 43;
inline bool Lexus::_internal_has_brake_cmd_104() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || brake_cmd_104_ != nullptr);
  return value;
}
inline bool Lexus::has_brake_cmd_104() const {
  return _internal_has_brake_cmd_104();
}
inline void Lexus::clear_brake_cmd_104() {
  if (brake_cmd_104_ != nullptr) brake_cmd_104_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::apollo::canbus::Brake_cmd_104& Lexus::_internal_brake_cmd_104() const {
  const ::apollo::canbus::Brake_cmd_104* p = brake_cmd_104_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Brake_cmd_104*>(
      &::apollo::canbus::_Brake_cmd_104_default_instance_);
}
inline const ::apollo::canbus::Brake_cmd_104& Lexus::brake_cmd_104() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.brake_cmd_104)
  return _internal_brake_cmd_104();
}
inline ::apollo::canbus::Brake_cmd_104* Lexus::release_brake_cmd_104() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.brake_cmd_104)
  _has_bits_[1] &= ~0x00000400u;
  ::apollo::canbus::Brake_cmd_104* temp = brake_cmd_104_;
  brake_cmd_104_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brake_cmd_104* Lexus::_internal_mutable_brake_cmd_104() {
  _has_bits_[1] |= 0x00000400u;
  if (brake_cmd_104_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brake_cmd_104>(GetArenaNoVirtual());
    brake_cmd_104_ = p;
  }
  return brake_cmd_104_;
}
inline ::apollo::canbus::Brake_cmd_104* Lexus::mutable_brake_cmd_104() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.brake_cmd_104)
  return _internal_mutable_brake_cmd_104();
}
inline void Lexus::set_allocated_brake_cmd_104(::apollo::canbus::Brake_cmd_104* brake_cmd_104) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete brake_cmd_104_;
  }
  if (brake_cmd_104) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brake_cmd_104 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_cmd_104, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  brake_cmd_104_ = brake_cmd_104;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.brake_cmd_104)
}

// optional .apollo.canbus.Media_controls_rpt_220 media_controls_rpt_220 = 44;
inline bool Lexus::_internal_has_media_controls_rpt_220() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || media_controls_rpt_220_ != nullptr);
  return value;
}
inline bool Lexus::has_media_controls_rpt_220() const {
  return _internal_has_media_controls_rpt_220();
}
inline void Lexus::clear_media_controls_rpt_220() {
  if (media_controls_rpt_220_ != nullptr) media_controls_rpt_220_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::apollo::canbus::Media_controls_rpt_220& Lexus::_internal_media_controls_rpt_220() const {
  const ::apollo::canbus::Media_controls_rpt_220* p = media_controls_rpt_220_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Media_controls_rpt_220*>(
      &::apollo::canbus::_Media_controls_rpt_220_default_instance_);
}
inline const ::apollo::canbus::Media_controls_rpt_220& Lexus::media_controls_rpt_220() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.media_controls_rpt_220)
  return _internal_media_controls_rpt_220();
}
inline ::apollo::canbus::Media_controls_rpt_220* Lexus::release_media_controls_rpt_220() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.media_controls_rpt_220)
  _has_bits_[1] &= ~0x00000800u;
  ::apollo::canbus::Media_controls_rpt_220* temp = media_controls_rpt_220_;
  media_controls_rpt_220_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Media_controls_rpt_220* Lexus::_internal_mutable_media_controls_rpt_220() {
  _has_bits_[1] |= 0x00000800u;
  if (media_controls_rpt_220_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Media_controls_rpt_220>(GetArenaNoVirtual());
    media_controls_rpt_220_ = p;
  }
  return media_controls_rpt_220_;
}
inline ::apollo::canbus::Media_controls_rpt_220* Lexus::mutable_media_controls_rpt_220() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.media_controls_rpt_220)
  return _internal_mutable_media_controls_rpt_220();
}
inline void Lexus::set_allocated_media_controls_rpt_220(::apollo::canbus::Media_controls_rpt_220* media_controls_rpt_220) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete media_controls_rpt_220_;
  }
  if (media_controls_rpt_220) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      media_controls_rpt_220 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_controls_rpt_220, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  media_controls_rpt_220_ = media_controls_rpt_220;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.media_controls_rpt_220)
}

// optional .apollo.canbus.Steering_aux_rpt_32c steering_aux_rpt_32c = 45;
inline bool Lexus::_internal_has_steering_aux_rpt_32c() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || steering_aux_rpt_32c_ != nullptr);
  return value;
}
inline bool Lexus::has_steering_aux_rpt_32c() const {
  return _internal_has_steering_aux_rpt_32c();
}
inline void Lexus::clear_steering_aux_rpt_32c() {
  if (steering_aux_rpt_32c_ != nullptr) steering_aux_rpt_32c_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
inline const ::apollo::canbus::Steering_aux_rpt_32c& Lexus::_internal_steering_aux_rpt_32c() const {
  const ::apollo::canbus::Steering_aux_rpt_32c* p = steering_aux_rpt_32c_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Steering_aux_rpt_32c*>(
      &::apollo::canbus::_Steering_aux_rpt_32c_default_instance_);
}
inline const ::apollo::canbus::Steering_aux_rpt_32c& Lexus::steering_aux_rpt_32c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.steering_aux_rpt_32c)
  return _internal_steering_aux_rpt_32c();
}
inline ::apollo::canbus::Steering_aux_rpt_32c* Lexus::release_steering_aux_rpt_32c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.steering_aux_rpt_32c)
  _has_bits_[1] &= ~0x00001000u;
  ::apollo::canbus::Steering_aux_rpt_32c* temp = steering_aux_rpt_32c_;
  steering_aux_rpt_32c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Steering_aux_rpt_32c* Lexus::_internal_mutable_steering_aux_rpt_32c() {
  _has_bits_[1] |= 0x00001000u;
  if (steering_aux_rpt_32c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Steering_aux_rpt_32c>(GetArenaNoVirtual());
    steering_aux_rpt_32c_ = p;
  }
  return steering_aux_rpt_32c_;
}
inline ::apollo::canbus::Steering_aux_rpt_32c* Lexus::mutable_steering_aux_rpt_32c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.steering_aux_rpt_32c)
  return _internal_mutable_steering_aux_rpt_32c();
}
inline void Lexus::set_allocated_steering_aux_rpt_32c(::apollo::canbus::Steering_aux_rpt_32c* steering_aux_rpt_32c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete steering_aux_rpt_32c_;
  }
  if (steering_aux_rpt_32c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steering_aux_rpt_32c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering_aux_rpt_32c, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  steering_aux_rpt_32c_ = steering_aux_rpt_32c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.steering_aux_rpt_32c)
}

// optional .apollo.canbus.Lat_lon_heading_rpt_40e lat_lon_heading_rpt_40e = 46;
inline bool Lexus::_internal_has_lat_lon_heading_rpt_40e() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || lat_lon_heading_rpt_40e_ != nullptr);
  return value;
}
inline bool Lexus::has_lat_lon_heading_rpt_40e() const {
  return _internal_has_lat_lon_heading_rpt_40e();
}
inline void Lexus::clear_lat_lon_heading_rpt_40e() {
  if (lat_lon_heading_rpt_40e_ != nullptr) lat_lon_heading_rpt_40e_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
inline const ::apollo::canbus::Lat_lon_heading_rpt_40e& Lexus::_internal_lat_lon_heading_rpt_40e() const {
  const ::apollo::canbus::Lat_lon_heading_rpt_40e* p = lat_lon_heading_rpt_40e_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Lat_lon_heading_rpt_40e*>(
      &::apollo::canbus::_Lat_lon_heading_rpt_40e_default_instance_);
}
inline const ::apollo::canbus::Lat_lon_heading_rpt_40e& Lexus::lat_lon_heading_rpt_40e() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.lat_lon_heading_rpt_40e)
  return _internal_lat_lon_heading_rpt_40e();
}
inline ::apollo::canbus::Lat_lon_heading_rpt_40e* Lexus::release_lat_lon_heading_rpt_40e() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.lat_lon_heading_rpt_40e)
  _has_bits_[1] &= ~0x00002000u;
  ::apollo::canbus::Lat_lon_heading_rpt_40e* temp = lat_lon_heading_rpt_40e_;
  lat_lon_heading_rpt_40e_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Lat_lon_heading_rpt_40e* Lexus::_internal_mutable_lat_lon_heading_rpt_40e() {
  _has_bits_[1] |= 0x00002000u;
  if (lat_lon_heading_rpt_40e_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Lat_lon_heading_rpt_40e>(GetArenaNoVirtual());
    lat_lon_heading_rpt_40e_ = p;
  }
  return lat_lon_heading_rpt_40e_;
}
inline ::apollo::canbus::Lat_lon_heading_rpt_40e* Lexus::mutable_lat_lon_heading_rpt_40e() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.lat_lon_heading_rpt_40e)
  return _internal_mutable_lat_lon_heading_rpt_40e();
}
inline void Lexus::set_allocated_lat_lon_heading_rpt_40e(::apollo::canbus::Lat_lon_heading_rpt_40e* lat_lon_heading_rpt_40e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lat_lon_heading_rpt_40e_;
  }
  if (lat_lon_heading_rpt_40e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lat_lon_heading_rpt_40e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_lon_heading_rpt_40e, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  lat_lon_heading_rpt_40e_ = lat_lon_heading_rpt_40e;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.lat_lon_heading_rpt_40e)
}

// optional .apollo.canbus.Yaw_rate_rpt_40d yaw_rate_rpt_40d = 47;
inline bool Lexus::_internal_has_yaw_rate_rpt_40d() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || yaw_rate_rpt_40d_ != nullptr);
  return value;
}
inline bool Lexus::has_yaw_rate_rpt_40d() const {
  return _internal_has_yaw_rate_rpt_40d();
}
inline void Lexus::clear_yaw_rate_rpt_40d() {
  if (yaw_rate_rpt_40d_ != nullptr) yaw_rate_rpt_40d_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::apollo::canbus::Yaw_rate_rpt_40d& Lexus::_internal_yaw_rate_rpt_40d() const {
  const ::apollo::canbus::Yaw_rate_rpt_40d* p = yaw_rate_rpt_40d_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Yaw_rate_rpt_40d*>(
      &::apollo::canbus::_Yaw_rate_rpt_40d_default_instance_);
}
inline const ::apollo::canbus::Yaw_rate_rpt_40d& Lexus::yaw_rate_rpt_40d() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.yaw_rate_rpt_40d)
  return _internal_yaw_rate_rpt_40d();
}
inline ::apollo::canbus::Yaw_rate_rpt_40d* Lexus::release_yaw_rate_rpt_40d() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.yaw_rate_rpt_40d)
  _has_bits_[1] &= ~0x00004000u;
  ::apollo::canbus::Yaw_rate_rpt_40d* temp = yaw_rate_rpt_40d_;
  yaw_rate_rpt_40d_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Yaw_rate_rpt_40d* Lexus::_internal_mutable_yaw_rate_rpt_40d() {
  _has_bits_[1] |= 0x00004000u;
  if (yaw_rate_rpt_40d_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Yaw_rate_rpt_40d>(GetArenaNoVirtual());
    yaw_rate_rpt_40d_ = p;
  }
  return yaw_rate_rpt_40d_;
}
inline ::apollo::canbus::Yaw_rate_rpt_40d* Lexus::mutable_yaw_rate_rpt_40d() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.yaw_rate_rpt_40d)
  return _internal_mutable_yaw_rate_rpt_40d();
}
inline void Lexus::set_allocated_yaw_rate_rpt_40d(::apollo::canbus::Yaw_rate_rpt_40d* yaw_rate_rpt_40d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete yaw_rate_rpt_40d_;
  }
  if (yaw_rate_rpt_40d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      yaw_rate_rpt_40d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yaw_rate_rpt_40d, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  yaw_rate_rpt_40d_ = yaw_rate_rpt_40d;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.yaw_rate_rpt_40d)
}

// optional .apollo.canbus.Date_time_rpt_40f date_time_rpt_40f = 48;
inline bool Lexus::_internal_has_date_time_rpt_40f() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || date_time_rpt_40f_ != nullptr);
  return value;
}
inline bool Lexus::has_date_time_rpt_40f() const {
  return _internal_has_date_time_rpt_40f();
}
inline void Lexus::clear_date_time_rpt_40f() {
  if (date_time_rpt_40f_ != nullptr) date_time_rpt_40f_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
inline const ::apollo::canbus::Date_time_rpt_40f& Lexus::_internal_date_time_rpt_40f() const {
  const ::apollo::canbus::Date_time_rpt_40f* p = date_time_rpt_40f_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Date_time_rpt_40f*>(
      &::apollo::canbus::_Date_time_rpt_40f_default_instance_);
}
inline const ::apollo::canbus::Date_time_rpt_40f& Lexus::date_time_rpt_40f() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.date_time_rpt_40f)
  return _internal_date_time_rpt_40f();
}
inline ::apollo::canbus::Date_time_rpt_40f* Lexus::release_date_time_rpt_40f() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.date_time_rpt_40f)
  _has_bits_[1] &= ~0x00008000u;
  ::apollo::canbus::Date_time_rpt_40f* temp = date_time_rpt_40f_;
  date_time_rpt_40f_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Date_time_rpt_40f* Lexus::_internal_mutable_date_time_rpt_40f() {
  _has_bits_[1] |= 0x00008000u;
  if (date_time_rpt_40f_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Date_time_rpt_40f>(GetArenaNoVirtual());
    date_time_rpt_40f_ = p;
  }
  return date_time_rpt_40f_;
}
inline ::apollo::canbus::Date_time_rpt_40f* Lexus::mutable_date_time_rpt_40f() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.date_time_rpt_40f)
  return _internal_mutable_date_time_rpt_40f();
}
inline void Lexus::set_allocated_date_time_rpt_40f(::apollo::canbus::Date_time_rpt_40f* date_time_rpt_40f) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete date_time_rpt_40f_;
  }
  if (date_time_rpt_40f) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      date_time_rpt_40f = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_time_rpt_40f, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  date_time_rpt_40f_ = date_time_rpt_40f;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.date_time_rpt_40f)
}

// optional .apollo.canbus.Vin_rpt_414 vin_rpt_414 = 49;
inline bool Lexus::_internal_has_vin_rpt_414() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || vin_rpt_414_ != nullptr);
  return value;
}
inline bool Lexus::has_vin_rpt_414() const {
  return _internal_has_vin_rpt_414();
}
inline void Lexus::clear_vin_rpt_414() {
  if (vin_rpt_414_ != nullptr) vin_rpt_414_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
inline const ::apollo::canbus::Vin_rpt_414& Lexus::_internal_vin_rpt_414() const {
  const ::apollo::canbus::Vin_rpt_414* p = vin_rpt_414_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Vin_rpt_414*>(
      &::apollo::canbus::_Vin_rpt_414_default_instance_);
}
inline const ::apollo::canbus::Vin_rpt_414& Lexus::vin_rpt_414() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.vin_rpt_414)
  return _internal_vin_rpt_414();
}
inline ::apollo::canbus::Vin_rpt_414* Lexus::release_vin_rpt_414() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.vin_rpt_414)
  _has_bits_[1] &= ~0x00010000u;
  ::apollo::canbus::Vin_rpt_414* temp = vin_rpt_414_;
  vin_rpt_414_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vin_rpt_414* Lexus::_internal_mutable_vin_rpt_414() {
  _has_bits_[1] |= 0x00010000u;
  if (vin_rpt_414_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vin_rpt_414>(GetArenaNoVirtual());
    vin_rpt_414_ = p;
  }
  return vin_rpt_414_;
}
inline ::apollo::canbus::Vin_rpt_414* Lexus::mutable_vin_rpt_414() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.vin_rpt_414)
  return _internal_mutable_vin_rpt_414();
}
inline void Lexus::set_allocated_vin_rpt_414(::apollo::canbus::Vin_rpt_414* vin_rpt_414) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vin_rpt_414_;
  }
  if (vin_rpt_414) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vin_rpt_414 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vin_rpt_414, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  vin_rpt_414_ = vin_rpt_414;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.vin_rpt_414)
}

// optional .apollo.canbus.Occupancy_rpt_415 occupancy_rpt_415 = 50;
inline bool Lexus::_internal_has_occupancy_rpt_415() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || occupancy_rpt_415_ != nullptr);
  return value;
}
inline bool Lexus::has_occupancy_rpt_415() const {
  return _internal_has_occupancy_rpt_415();
}
inline void Lexus::clear_occupancy_rpt_415() {
  if (occupancy_rpt_415_ != nullptr) occupancy_rpt_415_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
inline const ::apollo::canbus::Occupancy_rpt_415& Lexus::_internal_occupancy_rpt_415() const {
  const ::apollo::canbus::Occupancy_rpt_415* p = occupancy_rpt_415_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Occupancy_rpt_415*>(
      &::apollo::canbus::_Occupancy_rpt_415_default_instance_);
}
inline const ::apollo::canbus::Occupancy_rpt_415& Lexus::occupancy_rpt_415() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.occupancy_rpt_415)
  return _internal_occupancy_rpt_415();
}
inline ::apollo::canbus::Occupancy_rpt_415* Lexus::release_occupancy_rpt_415() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.occupancy_rpt_415)
  _has_bits_[1] &= ~0x00020000u;
  ::apollo::canbus::Occupancy_rpt_415* temp = occupancy_rpt_415_;
  occupancy_rpt_415_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Occupancy_rpt_415* Lexus::_internal_mutable_occupancy_rpt_415() {
  _has_bits_[1] |= 0x00020000u;
  if (occupancy_rpt_415_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Occupancy_rpt_415>(GetArenaNoVirtual());
    occupancy_rpt_415_ = p;
  }
  return occupancy_rpt_415_;
}
inline ::apollo::canbus::Occupancy_rpt_415* Lexus::mutable_occupancy_rpt_415() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.occupancy_rpt_415)
  return _internal_mutable_occupancy_rpt_415();
}
inline void Lexus::set_allocated_occupancy_rpt_415(::apollo::canbus::Occupancy_rpt_415* occupancy_rpt_415) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete occupancy_rpt_415_;
  }
  if (occupancy_rpt_415) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      occupancy_rpt_415 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occupancy_rpt_415, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  occupancy_rpt_415_ = occupancy_rpt_415;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.occupancy_rpt_415)
}

// optional .apollo.canbus.Interior_lights_rpt_416 interior_lights_rpt_416 = 51;
inline bool Lexus::_internal_has_interior_lights_rpt_416() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || interior_lights_rpt_416_ != nullptr);
  return value;
}
inline bool Lexus::has_interior_lights_rpt_416() const {
  return _internal_has_interior_lights_rpt_416();
}
inline void Lexus::clear_interior_lights_rpt_416() {
  if (interior_lights_rpt_416_ != nullptr) interior_lights_rpt_416_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
inline const ::apollo::canbus::Interior_lights_rpt_416& Lexus::_internal_interior_lights_rpt_416() const {
  const ::apollo::canbus::Interior_lights_rpt_416* p = interior_lights_rpt_416_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Interior_lights_rpt_416*>(
      &::apollo::canbus::_Interior_lights_rpt_416_default_instance_);
}
inline const ::apollo::canbus::Interior_lights_rpt_416& Lexus::interior_lights_rpt_416() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.interior_lights_rpt_416)
  return _internal_interior_lights_rpt_416();
}
inline ::apollo::canbus::Interior_lights_rpt_416* Lexus::release_interior_lights_rpt_416() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.interior_lights_rpt_416)
  _has_bits_[1] &= ~0x00040000u;
  ::apollo::canbus::Interior_lights_rpt_416* temp = interior_lights_rpt_416_;
  interior_lights_rpt_416_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Interior_lights_rpt_416* Lexus::_internal_mutable_interior_lights_rpt_416() {
  _has_bits_[1] |= 0x00040000u;
  if (interior_lights_rpt_416_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Interior_lights_rpt_416>(GetArenaNoVirtual());
    interior_lights_rpt_416_ = p;
  }
  return interior_lights_rpt_416_;
}
inline ::apollo::canbus::Interior_lights_rpt_416* Lexus::mutable_interior_lights_rpt_416() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.interior_lights_rpt_416)
  return _internal_mutable_interior_lights_rpt_416();
}
inline void Lexus::set_allocated_interior_lights_rpt_416(::apollo::canbus::Interior_lights_rpt_416* interior_lights_rpt_416) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete interior_lights_rpt_416_;
  }
  if (interior_lights_rpt_416) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interior_lights_rpt_416 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interior_lights_rpt_416, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  interior_lights_rpt_416_ = interior_lights_rpt_416;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.interior_lights_rpt_416)
}

// optional .apollo.canbus.Turn_cmd_130 turn_cmd_130 = 52;
inline bool Lexus::_internal_has_turn_cmd_130() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || turn_cmd_130_ != nullptr);
  return value;
}
inline bool Lexus::has_turn_cmd_130() const {
  return _internal_has_turn_cmd_130();
}
inline void Lexus::clear_turn_cmd_130() {
  if (turn_cmd_130_ != nullptr) turn_cmd_130_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
inline const ::apollo::canbus::Turn_cmd_130& Lexus::_internal_turn_cmd_130() const {
  const ::apollo::canbus::Turn_cmd_130* p = turn_cmd_130_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Turn_cmd_130*>(
      &::apollo::canbus::_Turn_cmd_130_default_instance_);
}
inline const ::apollo::canbus::Turn_cmd_130& Lexus::turn_cmd_130() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.turn_cmd_130)
  return _internal_turn_cmd_130();
}
inline ::apollo::canbus::Turn_cmd_130* Lexus::release_turn_cmd_130() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.turn_cmd_130)
  _has_bits_[1] &= ~0x00080000u;
  ::apollo::canbus::Turn_cmd_130* temp = turn_cmd_130_;
  turn_cmd_130_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Turn_cmd_130* Lexus::_internal_mutable_turn_cmd_130() {
  _has_bits_[1] |= 0x00080000u;
  if (turn_cmd_130_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Turn_cmd_130>(GetArenaNoVirtual());
    turn_cmd_130_ = p;
  }
  return turn_cmd_130_;
}
inline ::apollo::canbus::Turn_cmd_130* Lexus::mutable_turn_cmd_130() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.turn_cmd_130)
  return _internal_mutable_turn_cmd_130();
}
inline void Lexus::set_allocated_turn_cmd_130(::apollo::canbus::Turn_cmd_130* turn_cmd_130) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete turn_cmd_130_;
  }
  if (turn_cmd_130) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      turn_cmd_130 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, turn_cmd_130, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  turn_cmd_130_ = turn_cmd_130;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.turn_cmd_130)
}

// optional .apollo.canbus.Detected_object_rpt_411 detected_object_rpt_411 = 53;
inline bool Lexus::_internal_has_detected_object_rpt_411() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || detected_object_rpt_411_ != nullptr);
  return value;
}
inline bool Lexus::has_detected_object_rpt_411() const {
  return _internal_has_detected_object_rpt_411();
}
inline void Lexus::clear_detected_object_rpt_411() {
  if (detected_object_rpt_411_ != nullptr) detected_object_rpt_411_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
inline const ::apollo::canbus::Detected_object_rpt_411& Lexus::_internal_detected_object_rpt_411() const {
  const ::apollo::canbus::Detected_object_rpt_411* p = detected_object_rpt_411_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Detected_object_rpt_411*>(
      &::apollo::canbus::_Detected_object_rpt_411_default_instance_);
}
inline const ::apollo::canbus::Detected_object_rpt_411& Lexus::detected_object_rpt_411() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.detected_object_rpt_411)
  return _internal_detected_object_rpt_411();
}
inline ::apollo::canbus::Detected_object_rpt_411* Lexus::release_detected_object_rpt_411() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.detected_object_rpt_411)
  _has_bits_[1] &= ~0x00100000u;
  ::apollo::canbus::Detected_object_rpt_411* temp = detected_object_rpt_411_;
  detected_object_rpt_411_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Detected_object_rpt_411* Lexus::_internal_mutable_detected_object_rpt_411() {
  _has_bits_[1] |= 0x00100000u;
  if (detected_object_rpt_411_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Detected_object_rpt_411>(GetArenaNoVirtual());
    detected_object_rpt_411_ = p;
  }
  return detected_object_rpt_411_;
}
inline ::apollo::canbus::Detected_object_rpt_411* Lexus::mutable_detected_object_rpt_411() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.detected_object_rpt_411)
  return _internal_mutable_detected_object_rpt_411();
}
inline void Lexus::set_allocated_detected_object_rpt_411(::apollo::canbus::Detected_object_rpt_411* detected_object_rpt_411) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detected_object_rpt_411_;
  }
  if (detected_object_rpt_411) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detected_object_rpt_411 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detected_object_rpt_411, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  detected_object_rpt_411_ = detected_object_rpt_411;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.detected_object_rpt_411)
}

// optional .apollo.canbus.Veh_specific_rpt_1_412 veh_specific_rpt_1_412 = 54;
inline bool Lexus::_internal_has_veh_specific_rpt_1_412() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || veh_specific_rpt_1_412_ != nullptr);
  return value;
}
inline bool Lexus::has_veh_specific_rpt_1_412() const {
  return _internal_has_veh_specific_rpt_1_412();
}
inline void Lexus::clear_veh_specific_rpt_1_412() {
  if (veh_specific_rpt_1_412_ != nullptr) veh_specific_rpt_1_412_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
inline const ::apollo::canbus::Veh_specific_rpt_1_412& Lexus::_internal_veh_specific_rpt_1_412() const {
  const ::apollo::canbus::Veh_specific_rpt_1_412* p = veh_specific_rpt_1_412_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Veh_specific_rpt_1_412*>(
      &::apollo::canbus::_Veh_specific_rpt_1_412_default_instance_);
}
inline const ::apollo::canbus::Veh_specific_rpt_1_412& Lexus::veh_specific_rpt_1_412() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.veh_specific_rpt_1_412)
  return _internal_veh_specific_rpt_1_412();
}
inline ::apollo::canbus::Veh_specific_rpt_1_412* Lexus::release_veh_specific_rpt_1_412() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.veh_specific_rpt_1_412)
  _has_bits_[1] &= ~0x00200000u;
  ::apollo::canbus::Veh_specific_rpt_1_412* temp = veh_specific_rpt_1_412_;
  veh_specific_rpt_1_412_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Veh_specific_rpt_1_412* Lexus::_internal_mutable_veh_specific_rpt_1_412() {
  _has_bits_[1] |= 0x00200000u;
  if (veh_specific_rpt_1_412_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Veh_specific_rpt_1_412>(GetArenaNoVirtual());
    veh_specific_rpt_1_412_ = p;
  }
  return veh_specific_rpt_1_412_;
}
inline ::apollo::canbus::Veh_specific_rpt_1_412* Lexus::mutable_veh_specific_rpt_1_412() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.veh_specific_rpt_1_412)
  return _internal_mutable_veh_specific_rpt_1_412();
}
inline void Lexus::set_allocated_veh_specific_rpt_1_412(::apollo::canbus::Veh_specific_rpt_1_412* veh_specific_rpt_1_412) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete veh_specific_rpt_1_412_;
  }
  if (veh_specific_rpt_1_412) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      veh_specific_rpt_1_412 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_specific_rpt_1_412, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  veh_specific_rpt_1_412_ = veh_specific_rpt_1_412;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.veh_specific_rpt_1_412)
}

// optional .apollo.canbus.Veh_dynamics_rpt_413 veh_dynamics_rpt_413 = 55;
inline bool Lexus::_internal_has_veh_dynamics_rpt_413() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || veh_dynamics_rpt_413_ != nullptr);
  return value;
}
inline bool Lexus::has_veh_dynamics_rpt_413() const {
  return _internal_has_veh_dynamics_rpt_413();
}
inline void Lexus::clear_veh_dynamics_rpt_413() {
  if (veh_dynamics_rpt_413_ != nullptr) veh_dynamics_rpt_413_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
inline const ::apollo::canbus::Veh_dynamics_rpt_413& Lexus::_internal_veh_dynamics_rpt_413() const {
  const ::apollo::canbus::Veh_dynamics_rpt_413* p = veh_dynamics_rpt_413_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Veh_dynamics_rpt_413*>(
      &::apollo::canbus::_Veh_dynamics_rpt_413_default_instance_);
}
inline const ::apollo::canbus::Veh_dynamics_rpt_413& Lexus::veh_dynamics_rpt_413() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.veh_dynamics_rpt_413)
  return _internal_veh_dynamics_rpt_413();
}
inline ::apollo::canbus::Veh_dynamics_rpt_413* Lexus::release_veh_dynamics_rpt_413() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.veh_dynamics_rpt_413)
  _has_bits_[1] &= ~0x00400000u;
  ::apollo::canbus::Veh_dynamics_rpt_413* temp = veh_dynamics_rpt_413_;
  veh_dynamics_rpt_413_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Veh_dynamics_rpt_413* Lexus::_internal_mutable_veh_dynamics_rpt_413() {
  _has_bits_[1] |= 0x00400000u;
  if (veh_dynamics_rpt_413_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Veh_dynamics_rpt_413>(GetArenaNoVirtual());
    veh_dynamics_rpt_413_ = p;
  }
  return veh_dynamics_rpt_413_;
}
inline ::apollo::canbus::Veh_dynamics_rpt_413* Lexus::mutable_veh_dynamics_rpt_413() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.veh_dynamics_rpt_413)
  return _internal_mutable_veh_dynamics_rpt_413();
}
inline void Lexus::set_allocated_veh_dynamics_rpt_413(::apollo::canbus::Veh_dynamics_rpt_413* veh_dynamics_rpt_413) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete veh_dynamics_rpt_413_;
  }
  if (veh_dynamics_rpt_413) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      veh_dynamics_rpt_413 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_dynamics_rpt_413, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  veh_dynamics_rpt_413_ = veh_dynamics_rpt_413;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.veh_dynamics_rpt_413)
}

// optional .apollo.canbus.Rear_lights_rpt_418 rear_lights_rpt_418 = 56;
inline bool Lexus::_internal_has_rear_lights_rpt_418() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || rear_lights_rpt_418_ != nullptr);
  return value;
}
inline bool Lexus::has_rear_lights_rpt_418() const {
  return _internal_has_rear_lights_rpt_418();
}
inline void Lexus::clear_rear_lights_rpt_418() {
  if (rear_lights_rpt_418_ != nullptr) rear_lights_rpt_418_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
inline const ::apollo::canbus::Rear_lights_rpt_418& Lexus::_internal_rear_lights_rpt_418() const {
  const ::apollo::canbus::Rear_lights_rpt_418* p = rear_lights_rpt_418_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::Rear_lights_rpt_418*>(
      &::apollo::canbus::_Rear_lights_rpt_418_default_instance_);
}
inline const ::apollo::canbus::Rear_lights_rpt_418& Lexus::rear_lights_rpt_418() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lexus.rear_lights_rpt_418)
  return _internal_rear_lights_rpt_418();
}
inline ::apollo::canbus::Rear_lights_rpt_418* Lexus::release_rear_lights_rpt_418() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Lexus.rear_lights_rpt_418)
  _has_bits_[1] &= ~0x00800000u;
  ::apollo::canbus::Rear_lights_rpt_418* temp = rear_lights_rpt_418_;
  rear_lights_rpt_418_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Rear_lights_rpt_418* Lexus::_internal_mutable_rear_lights_rpt_418() {
  _has_bits_[1] |= 0x00800000u;
  if (rear_lights_rpt_418_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Rear_lights_rpt_418>(GetArenaNoVirtual());
    rear_lights_rpt_418_ = p;
  }
  return rear_lights_rpt_418_;
}
inline ::apollo::canbus::Rear_lights_rpt_418* Lexus::mutable_rear_lights_rpt_418() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Lexus.rear_lights_rpt_418)
  return _internal_mutable_rear_lights_rpt_418();
}
inline void Lexus::set_allocated_rear_lights_rpt_418(::apollo::canbus::Rear_lights_rpt_418* rear_lights_rpt_418) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rear_lights_rpt_418_;
  }
  if (rear_lights_rpt_418) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rear_lights_rpt_418 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rear_lights_rpt_418, submessage_arena);
    }
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  rear_lights_rpt_418_ = rear_lights_rpt_418;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Lexus.rear_lights_rpt_418)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType>() {
  return ::apollo::canbus::Dash_controls_right_rpt_210_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType>() {
  return ::apollo::canbus::Dash_controls_right_rpt_210_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType>() {
  return ::apollo::canbus::Dash_controls_right_rpt_210_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType>() {
  return ::apollo::canbus::Dash_controls_left_cmd_10c_Dash_controls_buttonType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Headlight_rpt_218_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Headlight_rpt_218_Output_valueType>() {
  return ::apollo::canbus::Headlight_rpt_218_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Headlight_rpt_218_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Headlight_rpt_218_Manual_inputType>() {
  return ::apollo::canbus::Headlight_rpt_218_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Headlight_rpt_218_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Headlight_rpt_218_Commanded_valueType>() {
  return ::apollo::canbus::Headlight_rpt_218_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType>() {
  return ::apollo::canbus::Dash_controls_left_rpt_20c_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType>() {
  return ::apollo::canbus::Dash_controls_left_rpt_20c_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType>() {
  return ::apollo::canbus::Dash_controls_left_rpt_20c_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType>() {
  return ::apollo::canbus::Headlight_aux_rpt_318_Headlights_modeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType>() {
  return ::apollo::canbus::Dash_controls_right_cmd_110_Dash_controls_buttonType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Wiper_cmd_134_Wiper_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Wiper_cmd_134_Wiper_cmdType>() {
  return ::apollo::canbus::Wiper_cmd_134_Wiper_cmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Wiper_rpt_234_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Wiper_rpt_234_Output_valueType>() {
  return ::apollo::canbus::Wiper_rpt_234_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Wiper_rpt_234_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Wiper_rpt_234_Commanded_valueType>() {
  return ::apollo::canbus::Wiper_rpt_234_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Wiper_rpt_234_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Wiper_rpt_234_Manual_inputType>() {
  return ::apollo::canbus::Wiper_rpt_234_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Turn_rpt_230_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Turn_rpt_230_Manual_inputType>() {
  return ::apollo::canbus::Turn_rpt_230_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Turn_rpt_230_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Turn_rpt_230_Commanded_valueType>() {
  return ::apollo::canbus::Turn_rpt_230_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Turn_rpt_230_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Turn_rpt_230_Output_valueType>() {
  return ::apollo::canbus::Turn_rpt_230_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Headlight_cmd_118_Headlight_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Headlight_cmd_118_Headlight_cmdType>() {
  return ::apollo::canbus::Headlight_cmd_118_Headlight_cmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Component_rpt_20_Component_typeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Component_rpt_20_Component_typeType>() {
  return ::apollo::canbus::Component_rpt_20_Component_typeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Component_rpt_20_Component_funcType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Component_rpt_20_Component_funcType>() {
  return ::apollo::canbus::Component_rpt_20_Component_funcType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Horn_cmd_11c_Horn_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Horn_cmd_11c_Horn_cmdType>() {
  return ::apollo::canbus::Horn_cmd_11c_Horn_cmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType>() {
  return ::apollo::canbus::Global_rpt_10_Pacmod_system_enabledType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType>() {
  return ::apollo::canbus::Global_rpt_10_Pacmod_system_override_activeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Global_rpt_10_Brk_can_timeoutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Global_rpt_10_Brk_can_timeoutType>() {
  return ::apollo::canbus::Global_rpt_10_Brk_can_timeoutType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType>() {
  return ::apollo::canbus::Cruise_control_buttons_rpt_208_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType>() {
  return ::apollo::canbus::Cruise_control_buttons_rpt_208_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType>() {
  return ::apollo::canbus::Cruise_control_buttons_rpt_208_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType>() {
  return ::apollo::canbus::Vehicle_speed_rpt_400_Vehicle_speed_validType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType>() {
  return ::apollo::canbus::Media_controls_cmd_120_Media_controls_cmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType>() {
  return ::apollo::canbus::Cruise_control_buttons_cmd_108_Cruise_control_buttonType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Horn_rpt_21c_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Horn_rpt_21c_Output_valueType>() {
  return ::apollo::canbus::Horn_rpt_21c_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Horn_rpt_21c_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Horn_rpt_21c_Commanded_valueType>() {
  return ::apollo::canbus::Horn_rpt_21c_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Horn_rpt_21c_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Horn_rpt_21c_Manual_inputType>() {
  return ::apollo::canbus::Horn_rpt_21c_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Shift_rpt_228_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Shift_rpt_228_Manual_inputType>() {
  return ::apollo::canbus::Shift_rpt_228_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Shift_rpt_228_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Shift_rpt_228_Commanded_valueType>() {
  return ::apollo::canbus::Shift_rpt_228_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Shift_rpt_228_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Shift_rpt_228_Output_valueType>() {
  return ::apollo::canbus::Shift_rpt_228_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Shift_cmd_128_Shift_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Shift_cmd_128_Shift_cmdType>() {
  return ::apollo::canbus::Shift_cmd_128_Shift_cmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Media_controls_rpt_220_Output_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Media_controls_rpt_220_Output_valueType>() {
  return ::apollo::canbus::Media_controls_rpt_220_Output_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Media_controls_rpt_220_Commanded_valueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Media_controls_rpt_220_Commanded_valueType>() {
  return ::apollo::canbus::Media_controls_rpt_220_Commanded_valueType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Media_controls_rpt_220_Manual_inputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Media_controls_rpt_220_Manual_inputType>() {
  return ::apollo::canbus::Media_controls_rpt_220_Manual_inputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Interior_lights_rpt_416_Dim_levelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Interior_lights_rpt_416_Dim_levelType>() {
  return ::apollo::canbus::Interior_lights_rpt_416_Dim_levelType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType>() {
  return ::apollo::canbus::Turn_cmd_130_Turn_signal_cmdType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2flexus_2eproto
