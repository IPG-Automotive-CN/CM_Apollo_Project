// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/vehicle_parameter.proto

#include "modules/canbus/proto/vehicle_parameter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace canbus {
class VehicleParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleParameter> _instance;
} _VehicleParameter_default_instance_;
}  // namespace canbus
}  // namespace apollo
static void InitDefaultsscc_info_VehicleParameter_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_VehicleParameter_default_instance_;
    new (ptr) ::apollo::canbus::VehicleParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::VehicleParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleParameter_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleParameter_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleParameter, brand_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleParameter, max_engine_pedal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleParameter, max_enable_fail_attempt_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleParameter, driving_mode_),
  1,
  0,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::canbus::VehicleParameter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_VehicleParameter_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/canbus/proto/vehicle_parameter"
  ".proto\022\rapollo.canbus\032\"modules/canbus/pr"
  "oto/chassis.proto\0321modules/common/config"
  "s/proto/vehicle_config.proto\"\263\001\n\020Vehicle"
  "Parameter\022*\n\005brand\030\001 \001(\0162\033.apollo.common"
  ".VehicleBrand\022\030\n\020max_engine_pedal\030\002 \001(\001\022"
  "\037\n\027max_enable_fail_attempt\030\003 \001(\005\0228\n\014driv"
  "ing_mode\030\004 \001(\0162\".apollo.canbus.Chassis.D"
  "rivingMode"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto_sccs[1] = {
  &scc_info_VehicleParameter_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto_once;
static bool descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto = {
  &descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto_initialized, descriptor_table_protodef_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto, "modules/canbus/proto/vehicle_parameter.proto", 330,
  &descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto_sccs, descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto, 1, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto), true);
namespace apollo {
namespace canbus {

// ===================================================================

void VehicleParameter::InitAsDefaultInstance() {
}
class VehicleParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleParameter>()._has_bits_);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_engine_pedal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_enable_fail_attempt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

VehicleParameter::VehicleParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.VehicleParameter)
}
VehicleParameter::VehicleParameter(const VehicleParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_engine_pedal_, &from.max_engine_pedal_,
    static_cast<size_t>(reinterpret_cast<char*>(&driving_mode_) -
    reinterpret_cast<char*>(&max_engine_pedal_)) + sizeof(driving_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.VehicleParameter)
}

void VehicleParameter::SharedCtor() {
  ::memset(&max_engine_pedal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&driving_mode_) -
      reinterpret_cast<char*>(&max_engine_pedal_)) + sizeof(driving_mode_));
}

VehicleParameter::~VehicleParameter() {
  // @@protoc_insertion_point(destructor:apollo.canbus.VehicleParameter)
  SharedDtor();
}

void VehicleParameter::SharedDtor() {
}

void VehicleParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleParameter& VehicleParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleParameter_modules_2fcanbus_2fproto_2fvehicle_5fparameter_2eproto.base);
  return *internal_default_instance();
}


void VehicleParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.VehicleParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&max_engine_pedal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driving_mode_) -
        reinterpret_cast<char*>(&max_engine_pedal_)) + sizeof(driving_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.VehicleBrand brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::common::VehicleBrand_IsValid(val))) {
            _internal_set_brand(static_cast<::apollo::common::VehicleBrand>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double max_engine_pedal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_max_engine_pedal(&has_bits);
          max_engine_pedal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 max_enable_fail_attempt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_enable_fail_attempt(&has_bits);
          max_enable_fail_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.VehicleParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.VehicleBrand brand = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brand(), target);
  }

  // optional double max_engine_pedal = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_engine_pedal(), target);
  }

  // optional int32 max_enable_fail_attempt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_enable_fail_attempt(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_driving_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.VehicleParameter)
  return target;
}

size_t VehicleParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.VehicleParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double max_engine_pedal = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.common.VehicleBrand brand = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brand());
    }

    // optional int32 max_enable_fail_attempt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_enable_fail_attempt());
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.VehicleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.VehicleParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.VehicleParameter)
    MergeFrom(*source);
  }
}

void VehicleParameter::MergeFrom(const VehicleParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.VehicleParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      max_engine_pedal_ = from.max_engine_pedal_;
    }
    if (cached_has_bits & 0x00000002u) {
      brand_ = from.brand_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_enable_fail_attempt_ = from.max_enable_fail_attempt_;
    }
    if (cached_has_bits & 0x00000008u) {
      driving_mode_ = from.driving_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.VehicleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleParameter::CopyFrom(const VehicleParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.VehicleParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParameter::IsInitialized() const {
  return true;
}

void VehicleParameter::InternalSwap(VehicleParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_engine_pedal_, other->max_engine_pedal_);
  swap(brand_, other->brand_);
  swap(max_enable_fail_attempt_, other->max_enable_fail_attempt_);
  swap(driving_mode_, other->driving_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::VehicleParameter* Arena::CreateMaybeMessage< ::apollo::canbus::VehicleParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::VehicleParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
