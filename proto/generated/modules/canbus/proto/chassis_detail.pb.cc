// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis_detail.proto

#include "modules/canbus/proto/chassis_detail.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_cmd_67_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_rpt_68_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicInfo_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Battery_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_cmd_6b_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_1_70_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_2_71_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_3_72_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_rpt_6c_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Ch_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckResponseSignal_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_time_rpt_83_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deceleration_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ems_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Epb_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Eps_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esp_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gas_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_Ge3_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gear_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<30> scc_info_Gem_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Global_cmd_69_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Global_rpt_6a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_cmd_76_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_rpt_77_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Horn_cmd_78_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Horn_rpt_79_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lat_lon_heading_rpt_82_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2flexus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<56> scc_info_Lexus_modules_2fcanbus_2fproto_2flexus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Light_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parking_brake_status_rpt_80_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Safety_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_cmd_65_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_rpt_66_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_cmd_6d_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_1_73_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_2_74_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_3_75_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_rpt_1_6e_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Surround_modules_2fcanbus_2fproto_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2ftransit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_Transit_modules_2fcanbus_2fproto_2ftransit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_cmd_63_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_rpt_64_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSpd_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_speed_rpt_6f_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fwey_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Wey_modules_2fcanbus_2fproto_2fwey_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wheel_speed_rpt_7a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_cmd_90_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_rpt_91_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Yaw_rate_rpt_81_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Zhongyun_modules_2fcanbus_2fproto_2fzhongyun_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleID_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto;
namespace apollo {
namespace canbus {
class ChassisDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChassisDetail> _instance;
} _ChassisDetail_default_instance_;
class CheckResponseSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckResponseSignal> _instance;
} _CheckResponseSignal_default_instance_;
class BatteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Battery> _instance;
} _Battery_default_instance_;
class LightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Light> _instance;
} _Light_default_instance_;
class EpsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Eps> _instance;
} _Eps_default_instance_;
class VehicleSpdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleSpd> _instance;
} _VehicleSpd_default_instance_;
class DecelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deceleration> _instance;
} _Deceleration_default_instance_;
class BrakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake> _instance;
} _Brake_default_instance_;
class EpbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Epb> _instance;
} _Epb_default_instance_;
class GasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gas> _instance;
} _Gas_default_instance_;
class EspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esp> _instance;
} _Esp_default_instance_;
class EmsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ems> _instance;
} _Ems_default_instance_;
class GearDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gear> _instance;
} _Gear_default_instance_;
class SafetyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Safety> _instance;
} _Safety_default_instance_;
class BasicInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicInfo> _instance;
} _BasicInfo_default_instance_;
class Global_rpt_6aDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Global_rpt_6a> _instance;
} _Global_rpt_6a_default_instance_;
class Brake_cmd_6bDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_cmd_6b> _instance;
} _Brake_cmd_6b_default_instance_;
class Brake_rpt_6cDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_rpt_6c> _instance;
} _Brake_rpt_6c_default_instance_;
class Steering_cmd_6dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_cmd_6d> _instance;
} _Steering_cmd_6d_default_instance_;
class Steering_rpt_1_6eDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_rpt_1_6e> _instance;
} _Steering_rpt_1_6e_default_instance_;
class Wheel_speed_rpt_7aDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wheel_speed_rpt_7a> _instance;
} _Wheel_speed_rpt_7a_default_instance_;
class Date_time_rpt_83DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Date_time_rpt_83> _instance;
} _Date_time_rpt_83_default_instance_;
class Brake_motor_rpt_1_70DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_motor_rpt_1_70> _instance;
} _Brake_motor_rpt_1_70_default_instance_;
class Headlight_rpt_77DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Headlight_rpt_77> _instance;
} _Headlight_rpt_77_default_instance_;
class Accel_rpt_68DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accel_rpt_68> _instance;
} _Accel_rpt_68_default_instance_;
class Steering_motor_rpt_3_75DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_motor_rpt_3_75> _instance;
} _Steering_motor_rpt_3_75_default_instance_;
class Turn_cmd_63DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Turn_cmd_63> _instance;
} _Turn_cmd_63_default_instance_;
class Turn_rpt_64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Turn_rpt_64> _instance;
} _Turn_rpt_64_default_instance_;
class Shift_cmd_65DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shift_cmd_65> _instance;
} _Shift_cmd_65_default_instance_;
class Shift_rpt_66DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Shift_rpt_66> _instance;
} _Shift_rpt_66_default_instance_;
class Accel_cmd_67DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accel_cmd_67> _instance;
} _Accel_cmd_67_default_instance_;
class Lat_lon_heading_rpt_82DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lat_lon_heading_rpt_82> _instance;
} _Lat_lon_heading_rpt_82_default_instance_;
class Global_cmd_69DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Global_cmd_69> _instance;
} _Global_cmd_69_default_instance_;
class Parking_brake_status_rpt_80DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Parking_brake_status_rpt_80> _instance;
} _Parking_brake_status_rpt_80_default_instance_;
class Yaw_rate_rpt_81DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Yaw_rate_rpt_81> _instance;
} _Yaw_rate_rpt_81_default_instance_;
class Horn_rpt_79DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Horn_rpt_79> _instance;
} _Horn_rpt_79_default_instance_;
class Horn_cmd_78DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Horn_cmd_78> _instance;
} _Horn_cmd_78_default_instance_;
class Wiper_rpt_91DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wiper_rpt_91> _instance;
} _Wiper_rpt_91_default_instance_;
class Vehicle_speed_rpt_6fDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle_speed_rpt_6f> _instance;
} _Vehicle_speed_rpt_6f_default_instance_;
class Headlight_cmd_76DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Headlight_cmd_76> _instance;
} _Headlight_cmd_76_default_instance_;
class Steering_motor_rpt_2_74DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_motor_rpt_2_74> _instance;
} _Steering_motor_rpt_2_74_default_instance_;
class Brake_motor_rpt_2_71DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_motor_rpt_2_71> _instance;
} _Brake_motor_rpt_2_71_default_instance_;
class Steering_motor_rpt_1_73DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steering_motor_rpt_1_73> _instance;
} _Steering_motor_rpt_1_73_default_instance_;
class Wiper_cmd_90DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wiper_cmd_90> _instance;
} _Wiper_cmd_90_default_instance_;
class Brake_motor_rpt_3_72DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_motor_rpt_3_72> _instance;
} _Brake_motor_rpt_3_72_default_instance_;
class GemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gem> _instance;
} _Gem_default_instance_;
}  // namespace canbus
}  // namespace apollo
static void InitDefaultsscc_info_Accel_cmd_67_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Accel_cmd_67_default_instance_;
    new (ptr) ::apollo::canbus::Accel_cmd_67();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Accel_cmd_67::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_cmd_67_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Accel_cmd_67_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Accel_rpt_68_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Accel_rpt_68_default_instance_;
    new (ptr) ::apollo::canbus::Accel_rpt_68();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Accel_rpt_68::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Accel_rpt_68_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Accel_rpt_68_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_BasicInfo_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_BasicInfo_default_instance_;
    new (ptr) ::apollo::canbus::BasicInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::BasicInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicInfo_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicInfo_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Battery_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Battery_default_instance_;
    new (ptr) ::apollo::canbus::Battery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Battery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Battery_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Battery_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Brake_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_default_instance_;
    new (ptr) ::apollo::canbus::Brake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Brake_cmd_6b_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_cmd_6b_default_instance_;
    new (ptr) ::apollo::canbus::Brake_cmd_6b();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_cmd_6b::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_cmd_6b_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_cmd_6b_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Brake_motor_rpt_1_70_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_1_70_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_1_70();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_1_70::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_1_70_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_motor_rpt_1_70_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Brake_motor_rpt_2_71_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_2_71_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_2_71();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_2_71::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_2_71_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_motor_rpt_2_71_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Brake_motor_rpt_3_72_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_3_72_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_3_72();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_3_72::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_motor_rpt_3_72_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_motor_rpt_3_72_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Brake_rpt_6c_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_rpt_6c_default_instance_;
    new (ptr) ::apollo::canbus::Brake_rpt_6c();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_rpt_6c::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_rpt_6c_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_rpt_6c_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_ChassisDetail_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_ChassisDetail_default_instance_;
    new (ptr) ::apollo::canbus::ChassisDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::ChassisDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<24> scc_info_ChassisDetail_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 24, 0, InitDefaultsscc_info_ChassisDetail_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {
      &scc_info_BasicInfo_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Safety_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Gear_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Ems_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Esp_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Gas_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Epb_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Brake_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Deceleration_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_VehicleSpd_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Eps_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Light_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Battery_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_CheckResponseSignal_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto.base,
      &scc_info_Surround_modules_2fcanbus_2fproto_2fchassis_2eproto.base,
      &scc_info_Gem_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Lexus_modules_2fcanbus_2fproto_2flexus_2eproto.base,
      &scc_info_Transit_modules_2fcanbus_2fproto_2ftransit_2eproto.base,
      &scc_info_Ge3_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Wey_modules_2fcanbus_2fproto_2fwey_2eproto.base,
      &scc_info_Zhongyun_modules_2fcanbus_2fproto_2fzhongyun_2eproto.base,
      &scc_info_Ch_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_VehicleID_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_CheckResponseSignal_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_CheckResponseSignal_default_instance_;
    new (ptr) ::apollo::canbus::CheckResponseSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::CheckResponseSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckResponseSignal_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckResponseSignal_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Date_time_rpt_83_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Date_time_rpt_83_default_instance_;
    new (ptr) ::apollo::canbus::Date_time_rpt_83();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Date_time_rpt_83::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_time_rpt_83_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Date_time_rpt_83_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Deceleration_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Deceleration_default_instance_;
    new (ptr) ::apollo::canbus::Deceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Deceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deceleration_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Deceleration_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Ems_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Ems_default_instance_;
    new (ptr) ::apollo::canbus::Ems();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Ems::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ems_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ems_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Epb_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Epb_default_instance_;
    new (ptr) ::apollo::canbus::Epb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Epb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Epb_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Epb_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Eps_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Eps_default_instance_;
    new (ptr) ::apollo::canbus::Eps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Eps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Eps_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Eps_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Esp_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Esp_default_instance_;
    new (ptr) ::apollo::canbus::Esp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Esp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esp_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esp_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Gas_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gas_default_instance_;
    new (ptr) ::apollo::canbus::Gas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gas_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gas_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Gear_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gear_default_instance_;
    new (ptr) ::apollo::canbus::Gear();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gear::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gear_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gear_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Gem_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gem_default_instance_;
    new (ptr) ::apollo::canbus::Gem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<30> scc_info_Gem_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 30, 0, InitDefaultsscc_info_Gem_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {
      &scc_info_Global_rpt_6a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Brake_cmd_6b_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Brake_rpt_6c_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Steering_cmd_6d_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Steering_rpt_1_6e_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Wheel_speed_rpt_7a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Date_time_rpt_83_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Brake_motor_rpt_1_70_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Headlight_rpt_77_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Accel_rpt_68_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Steering_motor_rpt_3_75_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Turn_cmd_63_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Turn_rpt_64_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Shift_cmd_65_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Shift_rpt_66_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Accel_cmd_67_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Lat_lon_heading_rpt_82_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Global_cmd_69_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Parking_brake_status_rpt_80_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Yaw_rate_rpt_81_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Horn_rpt_79_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Horn_cmd_78_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Wiper_rpt_91_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Vehicle_speed_rpt_6f_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Headlight_cmd_76_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Steering_motor_rpt_2_74_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Brake_motor_rpt_2_71_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Steering_motor_rpt_1_73_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Wiper_cmd_90_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
      &scc_info_Brake_motor_rpt_3_72_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,}};

static void InitDefaultsscc_info_Global_cmd_69_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Global_cmd_69_default_instance_;
    new (ptr) ::apollo::canbus::Global_cmd_69();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Global_cmd_69::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Global_cmd_69_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Global_cmd_69_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Global_rpt_6a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Global_rpt_6a_default_instance_;
    new (ptr) ::apollo::canbus::Global_rpt_6a();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Global_rpt_6a::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Global_rpt_6a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Global_rpt_6a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Headlight_cmd_76_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Headlight_cmd_76_default_instance_;
    new (ptr) ::apollo::canbus::Headlight_cmd_76();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Headlight_cmd_76::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_cmd_76_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Headlight_cmd_76_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Headlight_rpt_77_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Headlight_rpt_77_default_instance_;
    new (ptr) ::apollo::canbus::Headlight_rpt_77();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Headlight_rpt_77::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Headlight_rpt_77_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Headlight_rpt_77_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Horn_cmd_78_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Horn_cmd_78_default_instance_;
    new (ptr) ::apollo::canbus::Horn_cmd_78();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Horn_cmd_78::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Horn_cmd_78_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Horn_cmd_78_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Horn_rpt_79_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Horn_rpt_79_default_instance_;
    new (ptr) ::apollo::canbus::Horn_rpt_79();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Horn_rpt_79::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Horn_rpt_79_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Horn_rpt_79_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Lat_lon_heading_rpt_82_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Lat_lon_heading_rpt_82_default_instance_;
    new (ptr) ::apollo::canbus::Lat_lon_heading_rpt_82();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Lat_lon_heading_rpt_82::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lat_lon_heading_rpt_82_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Lat_lon_heading_rpt_82_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Light_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Light_default_instance_;
    new (ptr) ::apollo::canbus::Light();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Light::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Light_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Light_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Parking_brake_status_rpt_80_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Parking_brake_status_rpt_80_default_instance_;
    new (ptr) ::apollo::canbus::Parking_brake_status_rpt_80();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Parking_brake_status_rpt_80::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parking_brake_status_rpt_80_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Parking_brake_status_rpt_80_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Safety_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Safety_default_instance_;
    new (ptr) ::apollo::canbus::Safety();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Safety::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Safety_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Safety_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Shift_cmd_65_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Shift_cmd_65_default_instance_;
    new (ptr) ::apollo::canbus::Shift_cmd_65();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Shift_cmd_65::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_cmd_65_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shift_cmd_65_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Shift_rpt_66_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Shift_rpt_66_default_instance_;
    new (ptr) ::apollo::canbus::Shift_rpt_66();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Shift_rpt_66::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Shift_rpt_66_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Shift_rpt_66_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Steering_cmd_6d_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_cmd_6d_default_instance_;
    new (ptr) ::apollo::canbus::Steering_cmd_6d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_cmd_6d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_cmd_6d_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_cmd_6d_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Steering_motor_rpt_1_73_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_1_73_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_1_73();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_1_73::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_1_73_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_motor_rpt_1_73_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Steering_motor_rpt_2_74_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_2_74_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_2_74();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_2_74::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_2_74_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_motor_rpt_2_74_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Steering_motor_rpt_3_75_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_3_75_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_3_75();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_3_75::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_motor_rpt_3_75_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_motor_rpt_3_75_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Steering_rpt_1_6e_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_rpt_1_6e_default_instance_;
    new (ptr) ::apollo::canbus::Steering_rpt_1_6e();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_rpt_1_6e::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steering_rpt_1_6e_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steering_rpt_1_6e_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Turn_cmd_63_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turn_cmd_63_default_instance_;
    new (ptr) ::apollo::canbus::Turn_cmd_63();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turn_cmd_63::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_cmd_63_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Turn_cmd_63_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Turn_rpt_64_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turn_rpt_64_default_instance_;
    new (ptr) ::apollo::canbus::Turn_rpt_64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turn_rpt_64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turn_rpt_64_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Turn_rpt_64_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_VehicleSpd_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_VehicleSpd_default_instance_;
    new (ptr) ::apollo::canbus::VehicleSpd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::VehicleSpd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSpd_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VehicleSpd_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle_speed_rpt_6f_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Vehicle_speed_rpt_6f_default_instance_;
    new (ptr) ::apollo::canbus::Vehicle_speed_rpt_6f();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Vehicle_speed_rpt_6f::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle_speed_rpt_6f_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle_speed_rpt_6f_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Wheel_speed_rpt_7a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wheel_speed_rpt_7a_default_instance_;
    new (ptr) ::apollo::canbus::Wheel_speed_rpt_7a();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wheel_speed_rpt_7a::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wheel_speed_rpt_7a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wheel_speed_rpt_7a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Wiper_cmd_90_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wiper_cmd_90_default_instance_;
    new (ptr) ::apollo::canbus::Wiper_cmd_90();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wiper_cmd_90::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_cmd_90_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wiper_cmd_90_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Wiper_rpt_91_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wiper_rpt_91_default_instance_;
    new (ptr) ::apollo::canbus::Wiper_rpt_91();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wiper_rpt_91::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Wiper_rpt_91_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Wiper_rpt_91_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static void InitDefaultsscc_info_Yaw_rate_rpt_81_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Yaw_rate_rpt_81_default_instance_;
    new (ptr) ::apollo::canbus::Yaw_rate_rpt_81();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Yaw_rate_rpt_81::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Yaw_rate_rpt_81_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Yaw_rate_rpt_81_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[41];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, car_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, basic_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, safety_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, ems_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, esp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, gas_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, epb_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, vehicle_spd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, eps_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, light_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, battery_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, check_response_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, license_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, surround_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, gem_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, lexus_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, transit_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, ge3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, wey_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, zhongyun_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, ch_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisDetail, vehicle_id_),
  24,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_eps_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_epb_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_esp_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_vtog_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_scu_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_switch_online_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_vcu_online_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Battery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Battery, battery_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Battery, fuel_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, turn_light_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, beam_lamp_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, is_brake_lamp_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, is_auto_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, wiper_gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, lotion_gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, is_horn_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, lincoln_lamp_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, lincoln_wiper_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Light, lincoln_ambient_),
  0,
  1,
  2,
  3,
  5,
  6,
  4,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, is_eps_fail_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, eps_control_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, eps_driver_hand_torq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, is_steering_angle_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_spd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, is_trimming_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, is_calibration_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, is_failure_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, allow_enter_autonomous_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, current_driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, vehicle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, epas_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, steering_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, driver_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, driver_activity_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, watchdog_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, channel_1_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, channel_2_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, calibration_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, connector_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, timestamp_65_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, major_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, minor_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Eps, build_number_),
  2,
  1,
  0,
  3,
  6,
  7,
  4,
  5,
  13,
  8,
  9,
  10,
  11,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  22,
  21,
  23,
  24,
  25,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_vehicle_standstill_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_vehicle_spd_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, vehicle_spd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_rr_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_rr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_rr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_rl_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_rl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_rl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_fr_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_fr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_fr_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_fl_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_fl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_fl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_yaw_rate_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, yaw_rate_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_ax_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ax_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ax_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_ay_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ay_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ay_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, lat_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, long_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, vert_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, roll_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, acc_est_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::VehicleSpd, timestamp_sec_),
  1,
  2,
  0,
  3,
  5,
  6,
  4,
  8,
  7,
  12,
  9,
  10,
  13,
  11,
  16,
  14,
  17,
  18,
  15,
  19,
  20,
  29,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, is_deceleration_available_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, is_deceleration_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, is_evb_fail_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, evb_pressure_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, brake_pressure_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Deceleration, brake_pressure_spd_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_pedal_pressed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_force_exist_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_over_heat_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, is_hand_brake_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, brake_pedal_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, brake_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, brake_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, boo_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, boo_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, boo_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_applying_brakes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_source_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, brake_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, driver_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, driver_activity_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, channel_1_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, channel_2_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, boo_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, connector_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, brake_torque_req_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, hsa_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, brake_torque_act_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, hsa_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, wheel_torque_act_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, major_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, minor_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake, build_number_),
  1,
  2,
  3,
  4,
  0,
  5,
  9,
  10,
  11,
  6,
  7,
  8,
  13,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  24,
  23,
  25,
  26,
  27,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, is_epb_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, is_epb_released_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, epb_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Epb, parking_brake_status_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_pedal_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_pedal_pressed_more_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, gas_pedal_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, throttle_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, throttle_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, throttle_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, watchdog_source_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, throttle_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, driver_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, driver_activity_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, watchdog_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, channel_1_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, channel_2_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, connector_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, accelerator_pedal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, accelerator_pedal_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, major_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, minor_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gas, build_number_),
  1,
  2,
  0,
  3,
  6,
  7,
  8,
  5,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_acc_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_on_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_tcsvdc_fail_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_stab_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_stab_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_trac_active_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Esp, is_trac_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_acc_available_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_acc_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, engine_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, max_engine_torq_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, min_engine_torq_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, base_engine_torq_constant_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_speed_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, engine_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, engine_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, is_over_engine_torque_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ems, engine_rpm_),
  2,
  3,
  1,
  0,
  6,
  7,
  4,
  9,
  8,
  5,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, is_shift_position_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, gear_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, driver_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, gear_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear, canbus_fault_),
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_driver_car_door_close_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_driver_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, emergency_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, has_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_motor_invertor_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_system_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_power_battery_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_motor_invertor_over_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_small_battery_charge_discharge_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_rearleft_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_rearright_door_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_hood_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_trunk_open_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_detected_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_airbag_enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_buckled_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, front_left_tire_press_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, front_right_tire_press_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, rear_left_tire_press_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, rear_right_tire_press_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Safety, car_driving_mode_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_auto_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, power_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_air_bag_deployed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, odo_meter_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, drive_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_system_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_human_interrupt_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_on_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_off_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_res_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_cancel_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_on_off_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_res_cancel_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_inc_spd_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_dec_spd_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_inc_gap_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_dec_gap_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, lka_button_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, canbus_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, gps_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, year_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, hours_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, compass_direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, pdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_gps_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_inferred_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, altitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, hdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, vdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, num_satellites_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::BasicInfo, gps_speed_),
  1,
  0,
  2,
  5,
  6,
  3,
  4,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  20,
  21,
  27,
  19,
  22,
  23,
  24,
  25,
  26,
  30,
  31,
  28,
  29,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, pacmod_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, override_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, veh_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, str_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, brk_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, usr_can_timeout_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, usr_can_read_errors_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, brake_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, brake_on_off_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, position_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, speed_limit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, output_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, wheel_spd_rear_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, wheel_spd_rear_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, wheel_spd_front_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, wheel_spd_front_left_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, time_second_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, time_minute_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, time_hour_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, date_day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, date_month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, date_year_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, motor_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, shaft_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, commanded_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, output_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, torque_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, torque_input_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, turn_signal_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, output_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, shift_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, manual_input_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, output_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, accel_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, longitude_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, longitude_minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, longitude_degrees_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, latitude_seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, latitude_minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, latitude_degrees_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, pacmod_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, clear_override_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, ignore_override_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, parking_brake_enabled_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, yaw_rate_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, manual_input_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, horn_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, output_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, commanded_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, manual_input_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, vehicle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, vehicle_speed_valid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, headlight_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, encoder_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, motor_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, angular_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, encoder_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, motor_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, angular_speed_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, motor_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, shaft_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, wiper_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, torque_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, torque_input_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, global_rpt_6a_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, brake_cmd_6b_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, brake_rpt_6c_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, steering_cmd_6d_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, steering_rpt_1_6e_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, wheel_speed_rpt_7a_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, date_time_rpt_83_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, brake_motor_rpt_1_70_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, headlight_rpt_77_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, accel_rpt_68_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, steering_motor_rpt_3_75_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, turn_cmd_63_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, turn_rpt_64_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, shift_cmd_65_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, shift_rpt_66_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, accel_cmd_67_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, lat_lon_heading_rpt_82_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, global_cmd_69_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, parking_brake_status_rpt_80_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, yaw_rate_rpt_81_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, horn_rpt_79_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, horn_cmd_78_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, wiper_rpt_91_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, vehicle_speed_rpt_6f_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, headlight_cmd_76_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, steering_motor_rpt_2_74_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, brake_motor_rpt_2_71_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, steering_motor_rpt_1_73_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, wiper_cmd_90_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gem, brake_motor_rpt_3_72_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, sizeof(::apollo::canbus::ChassisDetail)},
  { 55, 67, sizeof(::apollo::canbus::CheckResponseSignal)},
  { 74, 81, sizeof(::apollo::canbus::Battery)},
  { 83, 98, sizeof(::apollo::canbus::Light)},
  { 108, 139, sizeof(::apollo::canbus::Eps)},
  { 165, 200, sizeof(::apollo::canbus::VehicleSpd)},
  { 230, 242, sizeof(::apollo::canbus::Deceleration)},
  { 249, 284, sizeof(::apollo::canbus::Brake)},
  { 314, 323, sizeof(::apollo::canbus::Epb)},
  { 327, 352, sizeof(::apollo::canbus::Gas)},
  { 372, 388, sizeof(::apollo::canbus::Esp)},
  { 399, 415, sizeof(::apollo::canbus::Ems)},
  { 426, 436, sizeof(::apollo::canbus::Gear)},
  { 441, 469, sizeof(::apollo::canbus::Safety)},
  { 492, 536, sizeof(::apollo::canbus::BasicInfo)},
  { 575, 587, sizeof(::apollo::canbus::Global_rpt_6a)},
  { 594, 600, sizeof(::apollo::canbus::Brake_cmd_6b)},
  { 601, 610, sizeof(::apollo::canbus::Brake_rpt_6c)},
  { 614, 621, sizeof(::apollo::canbus::Steering_cmd_6d)},
  { 623, 631, sizeof(::apollo::canbus::Steering_rpt_1_6e)},
  { 634, 643, sizeof(::apollo::canbus::Wheel_speed_rpt_7a)},
  { 647, 658, sizeof(::apollo::canbus::Date_time_rpt_83)},
  { 664, 671, sizeof(::apollo::canbus::Brake_motor_rpt_1_70)},
  { 673, 681, sizeof(::apollo::canbus::Headlight_rpt_77)},
  { 684, 692, sizeof(::apollo::canbus::Accel_rpt_68)},
  { 695, 702, sizeof(::apollo::canbus::Steering_motor_rpt_3_75)},
  { 704, 710, sizeof(::apollo::canbus::Turn_cmd_63)},
  { 711, 719, sizeof(::apollo::canbus::Turn_rpt_64)},
  { 722, 728, sizeof(::apollo::canbus::Shift_cmd_65)},
  { 729, 737, sizeof(::apollo::canbus::Shift_rpt_66)},
  { 740, 746, sizeof(::apollo::canbus::Accel_cmd_67)},
  { 747, 759, sizeof(::apollo::canbus::Lat_lon_heading_rpt_82)},
  { 766, 774, sizeof(::apollo::canbus::Global_cmd_69)},
  { 777, 783, sizeof(::apollo::canbus::Parking_brake_status_rpt_80)},
  { 784, 790, sizeof(::apollo::canbus::Yaw_rate_rpt_81)},
  { 791, 799, sizeof(::apollo::canbus::Horn_rpt_79)},
  { 802, 808, sizeof(::apollo::canbus::Horn_cmd_78)},
  { 809, 817, sizeof(::apollo::canbus::Wiper_rpt_91)},
  { 820, 827, sizeof(::apollo::canbus::Vehicle_speed_rpt_6f)},
  { 829, 835, sizeof(::apollo::canbus::Headlight_cmd_76)},
  { 836, 844, sizeof(::apollo::canbus::Steering_motor_rpt_2_74)},
  { 847, 855, sizeof(::apollo::canbus::Brake_motor_rpt_2_71)},
  { 858, 865, sizeof(::apollo::canbus::Steering_motor_rpt_1_73)},
  { 867, 873, sizeof(::apollo::canbus::Wiper_cmd_90)},
  { 874, 881, sizeof(::apollo::canbus::Brake_motor_rpt_3_72)},
  { 883, 918, sizeof(::apollo::canbus::Gem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_ChassisDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_CheckResponseSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Battery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Light_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Eps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_VehicleSpd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Deceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Epb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Gas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Esp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Gear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Safety_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_BasicInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Global_rpt_6a_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_cmd_6b_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_rpt_6c_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_cmd_6d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_rpt_1_6e_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Wheel_speed_rpt_7a_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Date_time_rpt_83_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_motor_rpt_1_70_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Headlight_rpt_77_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Accel_rpt_68_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_motor_rpt_3_75_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Turn_cmd_63_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Turn_rpt_64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Shift_cmd_65_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Shift_rpt_66_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Accel_cmd_67_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Lat_lon_heading_rpt_82_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Global_cmd_69_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Parking_brake_status_rpt_80_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Yaw_rate_rpt_81_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Horn_rpt_79_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Horn_cmd_78_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Wiper_rpt_91_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Vehicle_speed_rpt_6f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Headlight_cmd_76_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_motor_rpt_2_74_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_motor_rpt_2_71_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steering_motor_rpt_1_73_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Wiper_cmd_90_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_motor_rpt_3_72_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Gem_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/canbus/proto/chassis_detail.pr"
  "oto\022\rapollo.canbus\0321modules/common/confi"
  "gs/proto/vehicle_config.proto\032\"modules/c"
  "anbus/proto/chassis.proto\032\036modules/canbu"
  "s/proto/ge3.proto\032 modules/canbus/proto/"
  "lexus.proto\032\"modules/canbus/proto/transi"
  "t.proto\032\036modules/canbus/proto/wey.proto\032"
  "#modules/canbus/proto/zhongyun.proto\032\035mo"
  "dules/canbus/proto/ch.proto\"\236\010\n\rChassisD"
  "etail\0223\n\010car_type\030\001 \001(\0162!.apollo.canbus."
  "ChassisDetail.Type\022\'\n\005basic\030\002 \001(\0132\030.apol"
  "lo.canbus.BasicInfo\022%\n\006safety\030\003 \001(\0132\025.ap"
  "ollo.canbus.Safety\022!\n\004gear\030\004 \001(\0132\023.apoll"
  "o.canbus.Gear\022\037\n\003ems\030\005 \001(\0132\022.apollo.canb"
  "us.Ems\022\037\n\003esp\030\006 \001(\0132\022.apollo.canbus.Esp\022"
  "\037\n\003gas\030\007 \001(\0132\022.apollo.canbus.Gas\022\037\n\003epb\030"
  "\010 \001(\0132\022.apollo.canbus.Epb\022#\n\005brake\030\t \001(\013"
  "2\024.apollo.canbus.Brake\0221\n\014deceleration\030\n"
  " \001(\0132\033.apollo.canbus.Deceleration\022.\n\013veh"
  "icle_spd\030\013 \001(\0132\031.apollo.canbus.VehicleSp"
  "d\022\037\n\003eps\030\014 \001(\0132\022.apollo.canbus.Eps\022#\n\005li"
  "ght\030\r \001(\0132\024.apollo.canbus.Light\022\'\n\007batte"
  "ry\030\016 \001(\0132\026.apollo.canbus.Battery\022:\n\016chec"
  "k_response\030\017 \001(\0132\".apollo.canbus.CheckRe"
  "sponseSignal\022+\n\007license\030\020 \001(\0132\026.apollo.c"
  "anbus.LicenseB\002\030\001\022)\n\010surround\030\021 \001(\0132\027.ap"
  "ollo.canbus.Surround\022\037\n\003gem\030\022 \001(\0132\022.apol"
  "lo.canbus.Gem\022#\n\005lexus\030\023 \001(\0132\024.apollo.ca"
  "nbus.Lexus\022\'\n\007transit\030\024 \001(\0132\026.apollo.can"
  "bus.Transit\022\037\n\003ge3\030\025 \001(\0132\022.apollo.canbus"
  ".Ge3\022\037\n\003wey\030\026 \001(\0132\022.apollo.canbus.Wey\022)\n"
  "\010zhongyun\030\027 \001(\0132\027.apollo.canbus.Zhongyun"
  "\022\035\n\002ch\030\030 \001(\0132\021.apollo.canbus.Ch\022,\n\nvehic"
  "le_id\030e \001(\0132\030.apollo.common.VehicleID\"-\n"
  "\004Type\022\017\n\013QIRUI_EQ_15\020\000\022\024\n\020CHANGAN_RUICHE"
  "NG\020\001\"\353\001\n\023CheckResponseSignal\022\034\n\ris_eps_o"
  "nline\030\001 \001(\010:\005false\022\034\n\ris_epb_online\030\002 \001("
  "\010:\005false\022\034\n\ris_esp_online\030\003 \001(\010:\005false\022\035"
  "\n\016is_vtog_online\030\004 \001(\010:\005false\022\034\n\ris_scu_"
  "online\030\005 \001(\010:\005false\022\037\n\020is_switch_online\030"
  "\006 \001(\010:\005false\022\034\n\ris_vcu_online\030\007 \001(\010:\005fal"
  "se\"6\n\007Battery\022\027\n\017battery_percent\030\001 \001(\001\022\022"
  "\n\nfuel_level\030\002 \001(\001\"\261\t\n\005Light\022;\n\017turn_lig"
  "ht_type\030\001 \001(\0162\".apollo.canbus.Light.Turn"
  "LightType\0229\n\016beam_lamp_type\030\002 \001(\0162!.apol"
  "lo.canbus.Light.BeamLampType\022\030\n\020is_brake"
  "_lamp_on\030\003 \001(\010\022\025\n\ris_auto_light\030\004 \001(\010\022\022\n"
  "\nwiper_gear\030\005 \001(\005\022\023\n\013lotion_gear\030\006 \001(\005\022\022"
  "\n\nis_horn_on\030\007 \001(\010\022\?\n\021lincoln_lamp_type\030"
  "\010 \001(\0162$.apollo.canbus.Light.LincolnLampT"
  "ype\022<\n\rlincoln_wiper\030\t \001(\0162%.apollo.canb"
  "us.Light.LincolnWiperType\022@\n\017lincoln_amb"
  "ient\030\n \001(\0162\'.apollo.canbus.Light.Lincoln"
  "AmbientType\"[\n\rTurnLightType\022\022\n\016TURN_LIG"
  "HT_OFF\020\000\022\020\n\014TURN_LEFT_ON\020\001\022\021\n\rTURN_RIGHT"
  "_ON\020\002\022\021\n\rTURN_LIGHT_ON\020\003\"\?\n\014BeamLampType"
  "\022\014\n\010BEAM_OFF\020\000\022\020\n\014HIGH_BEAM_ON\020\001\022\017\n\013LOW_"
  "BEAM_ON\020\002\"Y\n\017LincolnLampType\022\r\n\tBEAM_NUL"
  "L\020\000\022\026\n\022BEAM_FLASH_TO_PASS\020\001\022\r\n\tBEAM_HIGH"
  "\020\002\022\020\n\014BEAM_INVALID\020\003\"\334\002\n\020LincolnWiperTyp"
  "e\022\r\n\tWIPER_OFF\020\000\022\022\n\016WIPER_AUTO_OFF\020\001\022\024\n\020"
  "WIPER_OFF_MOVING\020\002\022\024\n\020WIPER_MANUAL_OFF\020\003"
  "\022\023\n\017WIPER_MANUAL_ON\020\004\022\024\n\020WIPER_MANUAL_LO"
  "W\020\005\022\025\n\021WIPER_MANUAL_HIGH\020\006\022\024\n\020WIPER_MIST"
  "_FLICK\020\007\022\016\n\nWIPER_WASH\020\010\022\022\n\016WIPER_AUTO_L"
  "OW\020\t\022\023\n\017WIPER_AUTO_HIGH\020\n\022\027\n\023WIPER_COURT"
  "ESY_WIPE\020\013\022\025\n\021WIPER_AUTO_ADJUST\020\014\022\022\n\016WIP"
  "ER_RESERVED\020\r\022\021\n\rWIPER_STALLED\020\016\022\021\n\rWIPE"
  "R_NO_DATA\020\017\"\250\001\n\022LincolnAmbientType\022\020\n\014AM"
  "BIENT_DARK\020\000\022\021\n\rAMBIENT_LIGHT\020\001\022\024\n\020AMBIE"
  "NT_TWILIGHT\020\002\022\025\n\021AMBIENT_TUNNEL_ON\020\003\022\026\n\022"
  "AMBIENT_TUNNEL_OFF\020\004\022\023\n\017AMBIENT_INVALID\020"
  "\005\022\023\n\017AMBIENT_NO_DATA\020\007\"\205\006\n\003Eps\022\023\n\013is_eps"
  "_fail\030\001 \001(\010\0222\n\021eps_control_state\030\002 \001(\0162\027"
  ".apollo.canbus.Eps.Type\022\034\n\024eps_driver_ha"
  "nd_torq\030\003 \001(\001\022\037\n\027is_steering_angle_valid"
  "\030\004 \001(\010\022\026\n\016steering_angle\030\005 \001(\001\022\032\n\022steeri"
  "ng_angle_spd\030\006 \001(\001\022\032\n\022is_trimming_status"
  "\030\007 \001(\010\022\035\n\025is_calibration_status\030\010 \001(\010\022\031\n"
  "\021is_failure_status\030\t \001(\010\022#\n\033allow_enter_"
  "autonomous_mode\030\n \001(\005\022\034\n\024current_driving"
  "_mode\030\013 \001(\005\022\032\n\022steering_angle_cmd\030\014 \001(\001\022"
  "\025\n\rvehicle_speed\030\r \001(\001\022\023\n\013epas_torque\030\016 "
  "\001(\001\022\030\n\020steering_enabled\030\017 \001(\010\022\027\n\017driver_"
  "override\030\020 \001(\010\022\027\n\017driver_activity\030\021 \001(\010\022"
  "\026\n\016watchdog_fault\030\022 \001(\010\022\027\n\017channel_1_fau"
  "lt\030\023 \001(\010\022\027\n\017channel_2_fault\030\024 \001(\010\022\031\n\021cal"
  "ibration_fault\030\025 \001(\010\022\027\n\017connector_fault\030"
  "\026 \001(\010\022\024\n\014timestamp_65\030\027 \001(\001\022\025\n\rmajor_ver"
  "sion\030\030 \001(\005\022\025\n\rminor_version\030\031 \001(\005\022\024\n\014bui"
  "ld_number\030\032 \001(\005\"=\n\004Type\022\021\n\rNOT_AVAILABLE"
  "\020\000\022\t\n\005READY\020\001\022\n\n\006ACTIVE\020\002\022\013\n\007INVALID\020\003\"\353"
  "\006\n\nVehicleSpd\022\035\n\025is_vehicle_standstill\030\001"
  " \001(\010\022\034\n\024is_vehicle_spd_valid\030\002 \001(\010\022\026\n\013ve"
  "hicle_spd\030\003 \001(\001:\0010\022\035\n\025is_wheel_spd_rr_va"
  "lid\030\004 \001(\010\022D\n\022wheel_direction_rr\030\005 \001(\0162(."
  "apollo.canbus.WheelSpeed.WheelSpeedType\022"
  "\024\n\014wheel_spd_rr\030\006 \001(\001\022\035\n\025is_wheel_spd_rl"
  "_valid\030\007 \001(\010\022D\n\022wheel_direction_rl\030\010 \001(\016"
  "2(.apollo.canbus.WheelSpeed.WheelSpeedTy"
  "pe\022\024\n\014wheel_spd_rl\030\t \001(\001\022\035\n\025is_wheel_spd"
  "_fr_valid\030\n \001(\010\022D\n\022wheel_direction_fr\030\013 "
  "\001(\0162(.apollo.canbus.WheelSpeed.WheelSpee"
  "dType\022\024\n\014wheel_spd_fr\030\014 \001(\001\022\035\n\025is_wheel_"
  "spd_fl_valid\030\r \001(\010\022D\n\022wheel_direction_fl"
  "\030\016 \001(\0162(.apollo.canbus.WheelSpeed.WheelS"
  "peedType\022\024\n\014wheel_spd_fl\030\017 \001(\001\022\031\n\021is_yaw"
  "_rate_valid\030\020 \001(\010\022\020\n\010yaw_rate\030\021 \001(\001\022\027\n\017y"
  "aw_rate_offset\030\022 \001(\001\022\023\n\013is_ax_valid\030\023 \001("
  "\010\022\n\n\002ax\030\024 \001(\001\022\021\n\tax_offset\030\025 \001(\001\022\023\n\013is_a"
  "y_valid\030\026 \001(\010\022\n\n\002ay\030\027 \001(\001\022\021\n\tay_offset\030\030"
  " \001(\001\022\017\n\007lat_acc\030\031 \001(\001\022\020\n\010long_acc\030\032 \001(\001\022"
  "\020\n\010vert_acc\030\033 \001(\001\022\021\n\troll_rate\030\034 \001(\001\022\017\n\007"
  "acc_est\030\035 \001(\001\022\025\n\rtimestamp_sec\030\036 \001(\001\"\322\001\n"
  "\014Deceleration\022!\n\031is_deceleration_availab"
  "le\030\001 \001(\010\022\036\n\026is_deceleration_active\030\002 \001(\010"
  "\022\027\n\014deceleration\030\003 \001(\001:\0010\022\023\n\013is_evb_fail"
  "\030\004 \001(\001\022\027\n\014evb_pressure\030\005 \001(\001:\0010\022\031\n\016brake"
  "_pressure\030\006 \001(\001:\0010\022\035\n\022brake_pressure_spd"
  "\030\007 \001(\001:\0010\"\266\010\n\005Brake\022%\n\026is_brake_pedal_pr"
  "essed\030\001 \001(\010:\005false\022\034\n\024is_brake_force_exi"
  "st\030\002 \001(\010\022\032\n\022is_brake_over_heat\030\003 \001(\010\022\030\n\020"
  "is_hand_brake_on\030\004 \001(\010\022\034\n\024brake_pedal_po"
  "sition\030\005 \001(\001\022\026\n\016is_brake_valid\030\006 \001(\010\022\023\n\013"
  "brake_input\030\007 \001(\001\022\021\n\tbrake_cmd\030\010 \001(\001\022\024\n\014"
  "brake_output\030\t \001(\001\022\021\n\tboo_input\030\n \001(\010\022\017\n"
  "\007boo_cmd\030\013 \001(\010\022\022\n\nboo_output\030\014 \001(\010\022 \n\030wa"
  "tchdog_applying_brakes\030\r \001(\010\022\027\n\017watchdog"
  "_source\030\016 \001(\005\022\025\n\rbrake_enabled\030\017 \001(\010\022\027\n\017"
  "driver_override\030\020 \001(\010\022\027\n\017driver_activity"
  "\030\021 \001(\010\022\026\n\016watchdog_fault\030\022 \001(\010\022\027\n\017channe"
  "l_1_fault\030\023 \001(\010\022\027\n\017channel_2_fault\030\024 \001(\010"
  "\022\021\n\tboo_fault\030\025 \001(\010\022\027\n\017connector_fault\030\026"
  " \001(\010\022\030\n\020brake_torque_req\030\027 \001(\001\0226\n\nhsa_st"
  "atus\030\030 \001(\0162\".apollo.canbus.Brake.HSAStat"
  "usType\022\030\n\020brake_torque_act\030\031 \001(\001\0222\n\010hsa_"
  "mode\030\032 \001(\0162 .apollo.canbus.Brake.HSAMode"
  "Type\022\030\n\020wheel_torque_act\030\033 \001(\001\022\025\n\rmajor_"
  "version\030\034 \001(\005\022\025\n\rminor_version\030\035 \001(\005\022\024\n\014"
  "build_number\030\036 \001(\005\"\273\001\n\rHSAStatusType\022\020\n\014"
  "HSA_INACTIVE\020\000\022\030\n\024HSA_FINDING_GRADIENT\020\001"
  "\022\026\n\022HSA_ACTIVE_PRESSED\020\002\022\027\n\023HSA_ACTIVE_R"
  "ELEASED\020\003\022\024\n\020HSA_FAST_RELEASE\020\004\022\024\n\020HSA_S"
  "LOW_RELEASE\020\005\022\016\n\nHSA_FAILED\020\006\022\021\n\rHSA_UND"
  "EFINED\020\007\"P\n\013HSAModeType\022\013\n\007HSA_OFF\020\000\022\014\n\010"
  "HSA_AUTO\020\001\022\016\n\nHSA_MANUAL\020\002\022\026\n\022HSA_MODE_U"
  "NDEFINED\020\003\"\333\001\n\003Epb\022\024\n\014is_epb_error\030\001 \001(\010"
  "\022\027\n\017is_epb_released\030\002 \001(\010\022\022\n\nepb_status\030"
  "\003 \001(\005\022;\n\024parking_brake_status\030\004 \001(\0162\035.ap"
  "ollo.canbus.Epb.PBrakeType\"T\n\nPBrakeType"
  "\022\016\n\nPBRAKE_OFF\020\000\022\025\n\021PBRAKE_TRANSITION\020\001\022"
  "\r\n\tPBRAKE_ON\020\002\022\020\n\014PBRAKE_FAULT\020\003\"\216\004\n\003Gas"
  "\022\032\n\022is_gas_pedal_error\030\001 \001(\010\022!\n\031is_gas_p"
  "edal_pressed_more\030\002 \001(\010\022\035\n\022gas_pedal_pos"
  "ition\030\003 \001(\001:\0010\022\033\n\014is_gas_valid\030\004 \001(\010:\005fa"
  "lse\022\026\n\016throttle_input\030\005 \001(\001\022\024\n\014throttle_"
  "cmd\030\006 \001(\001\022\027\n\017throttle_output\030\007 \001(\001\022\027\n\017wa"
  "tchdog_source\030\010 \001(\005\022\030\n\020throttle_enabled\030"
  "\t \001(\010\022\027\n\017driver_override\030\n \001(\010\022\027\n\017driver"
  "_activity\030\013 \001(\010\022\026\n\016watchdog_fault\030\014 \001(\010\022"
  "\027\n\017channel_1_fault\030\r \001(\010\022\027\n\017channel_2_fa"
  "ult\030\016 \001(\010\022\027\n\017connector_fault\030\017 \001(\010\022\031\n\021ac"
  "celerator_pedal\030\020 \001(\001\022\036\n\026accelerator_ped"
  "al_rate\030\021 \001(\001\022\025\n\rmajor_version\030\022 \001(\005\022\025\n\r"
  "minor_version\030\023 \001(\005\022\024\n\014build_number\030\024 \001("
  "\005\"\210\002\n\003Esp\022\030\n\020is_esp_acc_error\030\001 \001(\010\022\021\n\ti"
  "s_esp_on\030\002 \001(\010\022\025\n\ris_esp_active\030\003 \001(\010\022\024\n"
  "\014is_abs_error\030\004 \001(\010\022\025\n\ris_abs_active\030\005 \001"
  "(\010\022\026\n\016is_tcsvdc_fail\030\006 \001(\010\022\026\n\016is_abs_ena"
  "bled\030\007 \001(\010\022\026\n\016is_stab_active\030\010 \001(\010\022\027\n\017is"
  "_stab_enabled\030\t \001(\010\022\026\n\016is_trac_active\030\n "
  "\001(\010\022\027\n\017is_trac_enabled\030\013 \001(\010\"\215\003\n\003Ems\022\037\n\027"
  "is_engine_acc_available\030\001 \001(\010\022\033\n\023is_engi"
  "ne_acc_error\030\002 \001(\010\022-\n\014engine_state\030\003 \001(\016"
  "2\027.apollo.canbus.Ems.Type\022\037\n\027max_engine_"
  "torq_percent\030\004 \001(\001\022\037\n\027min_engine_torq_pe"
  "rcent\030\005 \001(\001\022!\n\031base_engine_torq_constant"
  "\030\006 \001(\005\022\035\n\025is_engine_speed_error\030\007 \001(\010\022\024\n"
  "\014engine_speed\030\010 \001(\001\022\025\n\rengine_torque\030\t \001"
  "(\005\022\035\n\025is_over_engine_torque\030\n \001(\010\022\022\n\neng"
  "ine_rpm\030\013 \001(\001\"5\n\004Type\022\010\n\004STOP\020\000\022\t\n\005CRANK"
  "\020\001\022\013\n\007RUNNING\020\002\022\013\n\007INVALID\020\003\"\306\001\n\004Gear\022\037\n"
  "\027is_shift_position_valid\030\001 \001(\010\0227\n\ngear_s"
  "tate\030\002 \001(\0162#.apollo.canbus.Chassis.GearP"
  "osition\022\027\n\017driver_override\030\003 \001(\010\0225\n\010gear"
  "_cmd\030\004 \001(\0162#.apollo.canbus.Chassis.GearP"
  "osition\022\024\n\014canbus_fault\030\005 \001(\010\"\356\005\n\006Safety"
  "\022 \n\030is_driver_car_door_close\030\001 \001(\010\022\031\n\021is"
  "_driver_buckled\030\002 \001(\010\022\030\n\020emergency_butto"
  "n\030\003 \001(\005\022\030\n\thas_error\030\004 \001(\010:\005false\022\037\n\027is_"
  "motor_invertor_fault\030\005 \001(\010\022\027\n\017is_system_"
  "fault\030\006 \001(\010\022\036\n\026is_power_battery_fault\030\007 "
  "\001(\010\022*\n\"is_motor_invertor_over_temperatur"
  "e\030\010 \001(\010\022/\n\'is_small_battery_charge_disch"
  "arge_fault\030\t \001(\010\022\024\n\014driving_mode\030\n \001(\005\022\036"
  "\n\026is_passenger_door_open\030\013 \001(\010\022\035\n\025is_rea"
  "rleft_door_open\030\014 \001(\010\022\036\n\026is_rearright_do"
  "or_open\030\r \001(\010\022\024\n\014is_hood_open\030\016 \001(\010\022\025\n\ri"
  "s_trunk_open\030\017 \001(\010\022\035\n\025is_passenger_detec"
  "ted\030\020 \001(\010\022#\n\033is_passenger_airbag_enabled"
  "\030\021 \001(\010\022\034\n\024is_passenger_buckled\030\022 \001(\010\022\035\n\025"
  "front_left_tire_press\030\023 \001(\005\022\036\n\026front_rig"
  "ht_tire_press\030\024 \001(\005\022\034\n\024rear_left_tire_pr"
  "ess\030\025 \001(\005\022\035\n\025rear_right_tire_press\030\026 \001(\005"
  "\022<\n\020car_driving_mode\030\027 \001(\0162\".apollo.canb"
  "us.Chassis.DrivingMode\"\274\007\n\tBasicInfo\022\024\n\014"
  "is_auto_mode\030\001 \001(\010\0222\n\013power_state\030\002 \001(\0162"
  "\035.apollo.canbus.BasicInfo.Type\022\033\n\023is_air"
  "_bag_deployed\030\003 \001(\010\022\021\n\todo_meter\030\004 \001(\001\022\023"
  "\n\013drive_range\030\005 \001(\001\022\027\n\017is_system_error\030\006"
  " \001(\010\022\032\n\022is_human_interrupt\030\007 \001(\010\022\025\n\racc_"
  "on_button\030\010 \001(\010\022\026\n\016acc_off_button\030\t \001(\010\022"
  "\026\n\016acc_res_button\030\n \001(\010\022\031\n\021acc_cancel_bu"
  "tton\030\013 \001(\010\022\031\n\021acc_on_off_button\030\014 \001(\010\022\035\n"
  "\025acc_res_cancel_button\030\r \001(\010\022\032\n\022acc_inc_"
  "spd_button\030\016 \001(\010\022\032\n\022acc_dec_spd_button\030\017"
  " \001(\010\022\032\n\022acc_inc_gap_button\030\020 \001(\010\022\032\n\022acc_"
  "dec_gap_button\030\021 \001(\010\022\022\n\nlka_button\030\022 \001(\010"
  "\022\024\n\014canbus_fault\030\023 \001(\010\022\020\n\010latitude\030\024 \001(\001"
  "\022\021\n\tlongitude\030\025 \001(\001\022\021\n\tgps_valid\030\026 \001(\010\022\014"
  "\n\004year\030\027 \001(\005\022\r\n\005month\030\030 \001(\005\022\013\n\003day\030\031 \001(\005"
  "\022\r\n\005hours\030\032 \001(\005\022\017\n\007minutes\030\033 \001(\005\022\017\n\007seco"
  "nds\030\034 \001(\005\022\031\n\021compass_direction\030\035 \001(\001\022\014\n\004"
  "pdop\030\036 \001(\001\022\024\n\014is_gps_fault\030\037 \001(\010\022\023\n\013is_i"
  "nferred\030  \001(\010\022\020\n\010altitude\030! \001(\001\022\017\n\007headi"
  "ng\030\" \001(\001\022\014\n\004hdop\030# \001(\001\022\014\n\004vdop\030$ \001(\001\022*\n\007"
  "quality\030% \001(\0162\031.apollo.canbus.GpsQuality"
  "\022\026\n\016num_satellites\030& \001(\005\022\021\n\tgps_speed\030\' "
  "\001(\001\"8\n\004Type\022\007\n\003OFF\020\000\022\007\n\003ACC\020\001\022\006\n\002ON\020\002\022\t\n"
  "\005START\020\003\022\013\n\007INVALID\020\004\"\365\004\n\rGlobal_rpt_6a\022"
  "E\n\rpacmod_status\030\001 \001(\0162..apollo.canbus.G"
  "lobal_rpt_6a.Pacmod_statusType\022I\n\017overri"
  "de_status\030\002 \001(\01620.apollo.canbus.Global_r"
  "pt_6a.Override_statusType\022\027\n\017veh_can_tim"
  "eout\030\003 \001(\010\022\027\n\017str_can_timeout\030\004 \001(\010\022I\n\017b"
  "rk_can_timeout\030\005 \001(\01620.apollo.canbus.Glo"
  "bal_rpt_6a.Brk_can_timeoutType\022\027\n\017usr_ca"
  "n_timeout\030\006 \001(\010\022\033\n\023usr_can_read_errors\030\007"
  " \001(\005\"Z\n\021Pacmod_statusType\022\"\n\036PACMOD_STAT"
  "US_CONTROL_DISABLED\020\000\022!\n\035PACMOD_STATUS_C"
  "ONTROL_ENABLED\020\001\"Y\n\023Override_statusType\022"
  "\"\n\036OVERRIDE_STATUS_NOT_OVERRIDDEN\020\000\022\036\n\032O"
  "VERRIDE_STATUS_OVERRIDDEN\020\001\"h\n\023Brk_can_t"
  "imeoutType\022)\n%BRK_CAN_TIMEOUT_NO_ACTIVE_"
  "CAN_TIMEOUT\020\000\022&\n\"BRK_CAN_TIMEOUT_ACTIVE_"
  "CAN_TIMEOUT\020\001\"!\n\014Brake_cmd_6b\022\021\n\tbrake_c"
  "md\030\001 \001(\001\"\326\001\n\014Brake_rpt_6c\022\024\n\014manual_inpu"
  "t\030\001 \001(\001\022\027\n\017commanded_value\030\002 \001(\001\022\024\n\014outp"
  "ut_value\030\003 \001(\001\022B\n\014brake_on_off\030\004 \001(\0162,.a"
  "pollo.canbus.Brake_rpt_6c.Brake_on_offTy"
  "pe\"=\n\020Brake_on_offType\022\024\n\020BRAKE_ON_OFF_O"
  "FF\020\000\022\023\n\017BRAKE_ON_OFF_ON\020\001\">\n\017Steering_cm"
  "d_6d\022\026\n\016position_value\030\001 \001(\001\022\023\n\013speed_li"
  "mit\030\002 \001(\001\"X\n\021Steering_rpt_1_6e\022\024\n\014manual"
  "_input\030\001 \001(\001\022\027\n\017commanded_value\030\002 \001(\001\022\024\n"
  "\014output_value\030\003 \001(\001\"\214\001\n\022Wheel_speed_rpt_"
  "7a\022\034\n\024wheel_spd_rear_right\030\001 \001(\005\022\033\n\023whee"
  "l_spd_rear_left\030\002 \001(\005\022\035\n\025wheel_spd_front"
  "_right\030\003 \001(\005\022\034\n\024wheel_spd_front_left\030\004 \001"
  "(\005\"\210\001\n\020Date_time_rpt_83\022\023\n\013time_second\030\001"
  " \001(\005\022\023\n\013time_minute\030\002 \001(\005\022\021\n\ttime_hour\030\003"
  " \001(\005\022\020\n\010date_day\030\004 \001(\005\022\022\n\ndate_month\030\005 \001"
  "(\005\022\021\n\tdate_year\030\006 \001(\005\"E\n\024Brake_motor_rpt"
  "_1_70\022\025\n\rmotor_current\030\001 \001(\001\022\026\n\016shaft_po"
  "sition\030\002 \001(\001\"\306\004\n\020Headlight_rpt_77\022F\n\014out"
  "put_value\030\001 \001(\01620.apollo.canbus.Headligh"
  "t_rpt_77.Output_valueType\022F\n\014manual_inpu"
  "t\030\002 \001(\01620.apollo.canbus.Headlight_rpt_77"
  ".Manual_inputType\022L\n\017commanded_value\030\003 \001"
  "(\01623.apollo.canbus.Headlight_rpt_77.Comm"
  "anded_valueType\"l\n\020Output_valueType\022\037\n\033O"
  "UTPUT_VALUE_HEADLIGHTS_OFF\020\000\022\032\n\026OUTPUT_V"
  "ALUE_LOW_BEAMS\020\001\022\033\n\027OUTPUT_VALUE_HIGH_BE"
  "AMS\020\002\"l\n\020Manual_inputType\022\037\n\033MANUAL_INPU"
  "T_HEADLIGHTS_OFF\020\000\022\032\n\026MANUAL_INPUT_LOW_B"
  "EAMS\020\001\022\033\n\027MANUAL_INPUT_HIGH_BEAMS\020\002\"x\n\023C"
  "ommanded_valueType\022\"\n\036COMMANDED_VALUE_HE"
  "ADLIGHTS_OFF\020\000\022\035\n\031COMMANDED_VALUE_LOW_BE"
  "AMS\020\001\022\036\n\032COMMANDED_VALUE_HIGH_BEAMS\020\002\"S\n"
  "\014Accel_rpt_68\022\024\n\014manual_input\030\001 \001(\001\022\027\n\017c"
  "ommanded_value\030\002 \001(\001\022\024\n\014output_value\030\003 \001"
  "(\001\"F\n\027Steering_motor_rpt_3_75\022\025\n\rtorque_"
  "output\030\001 \001(\001\022\024\n\014torque_input\030\002 \001(\001\"\331\001\n\013T"
  "urn_cmd_63\022G\n\017turn_signal_cmd\030\001 \001(\0162..ap"
  "ollo.canbus.Turn_cmd_63.Turn_signal_cmdT"
  "ype\"\200\001\n\023Turn_signal_cmdType\022\031\n\025TURN_SIGN"
  "AL_CMD_RIGHT\020\000\022\030\n\024TURN_SIGNAL_CMD_NONE\020\001"
  "\022\030\n\024TURN_SIGNAL_CMD_LEFT\020\002\022\032\n\026TURN_SIGNA"
  "L_CMD_HAZARD\020\003\"\305\004\n\013Turn_rpt_64\022A\n\014manual"
  "_input\030\001 \001(\0162+.apollo.canbus.Turn_rpt_64"
  ".Manual_inputType\022G\n\017commanded_value\030\002 \001"
  "(\0162..apollo.canbus.Turn_rpt_64.Commanded"
  "_valueType\022A\n\014output_value\030\003 \001(\0162+.apoll"
  "o.canbus.Turn_rpt_64.Output_valueType\"q\n"
  "\020Manual_inputType\022\026\n\022MANUAL_INPUT_RIGHT\020"
  "\000\022\025\n\021MANUAL_INPUT_NONE\020\001\022\025\n\021MANUAL_INPUT"
  "_LEFT\020\002\022\027\n\023MANUAL_INPUT_HAZARD\020\003\"\200\001\n\023Com"
  "manded_valueType\022\031\n\025COMMANDED_VALUE_RIGH"
  "T\020\000\022\030\n\024COMMANDED_VALUE_NONE\020\001\022\030\n\024COMMAND"
  "ED_VALUE_LEFT\020\002\022\032\n\026COMMANDED_VALUE_HAZAR"
  "D\020\003\"q\n\020Output_valueType\022\026\n\022OUTPUT_VALUE_"
  "RIGHT\020\000\022\025\n\021OUTPUT_VALUE_NONE\020\001\022\025\n\021OUTPUT"
  "_VALUE_LEFT\020\002\022\027\n\023OUTPUT_VALUE_HAZARD\020\003\"\311"
  "\001\n\014Shift_cmd_65\022<\n\tshift_cmd\030\001 \001(\0162).apo"
  "llo.canbus.Shift_cmd_65.Shift_cmdType\"{\n"
  "\rShift_cmdType\022\022\n\016SHIFT_CMD_PARK\020\000\022\025\n\021SH"
  "IFT_CMD_REVERSE\020\001\022\025\n\021SHIFT_CMD_NEUTRAL\020\002"
  "\022\025\n\021SHIFT_CMD_FORWARD\020\003\022\021\n\rSHIFT_CMD_LOW"
  "\020\004\"\245\005\n\014Shift_rpt_66\022B\n\014manual_input\030\001 \001("
  "\0162,.apollo.canbus.Shift_rpt_66.Manual_in"
  "putType\022H\n\017commanded_value\030\002 \001(\0162/.apoll"
  "o.canbus.Shift_rpt_66.Commanded_valueTyp"
  "e\022B\n\014output_value\030\003 \001(\0162,.apollo.canbus."
  "Shift_rpt_66.Output_valueType\"\216\001\n\020Manual"
  "_inputType\022\025\n\021MANUAL_INPUT_PARK\020\000\022\030\n\024MAN"
  "UAL_INPUT_REVERSE\020\001\022\030\n\024MANUAL_INPUT_NEUT"
  "RAL\020\002\022\030\n\024MANUAL_INPUT_FORWARD\020\003\022\025\n\021MANUA"
  "L_INPUT_HIGH\020\004\"\240\001\n\023Commanded_valueType\022\030"
  "\n\024COMMANDED_VALUE_PARK\020\000\022\033\n\027COMMANDED_VA"
  "LUE_REVERSE\020\001\022\033\n\027COMMANDED_VALUE_NEUTRAL"
  "\020\002\022\033\n\027COMMANDED_VALUE_FORWARD\020\003\022\030\n\024COMMA"
  "NDED_VALUE_HIGH\020\004\"\216\001\n\020Output_valueType\022\025"
  "\n\021OUTPUT_VALUE_PARK\020\000\022\030\n\024OUTPUT_VALUE_RE"
  "VERSE\020\001\022\030\n\024OUTPUT_VALUE_NEUTRAL\020\002\022\030\n\024OUT"
  "PUT_VALUE_FORWARD\020\003\022\025\n\021OUTPUT_VALUE_HIGH"
  "\020\004\"!\n\014Accel_cmd_67\022\021\n\taccel_cmd\030\001 \001(\001\"\310\001"
  "\n\026Lat_lon_heading_rpt_82\022\017\n\007heading\030\001 \001("
  "\001\022\031\n\021longitude_seconds\030\002 \001(\005\022\031\n\021longitud"
  "e_minutes\030\003 \001(\005\022\031\n\021longitude_degrees\030\004 \001"
  "(\005\022\030\n\020latitude_seconds\030\005 \001(\005\022\030\n\020latitude"
  "_minutes\030\006 \001(\005\022\030\n\020latitude_degrees\030\007 \001(\005"
  "\"\253\004\n\rGlobal_cmd_69\022E\n\rpacmod_enable\030\001 \001("
  "\0162..apollo.canbus.Global_cmd_69.Pacmod_e"
  "nableType\022G\n\016clear_override\030\002 \001(\0162/.apol"
  "lo.canbus.Global_cmd_69.Clear_overrideTy"
  "pe\022I\n\017ignore_override\030\003 \001(\01620.apollo.can"
  "bus.Global_cmd_69.Ignore_overrideType\"Z\n"
  "\021Pacmod_enableType\022\"\n\036PACMOD_ENABLE_CONT"
  "ROL_DISABLED\020\000\022!\n\035PACMOD_ENABLE_CONTROL_"
  "ENABLED\020\001\"p\n\022Clear_overrideType\022/\n+CLEAR"
  "_OVERRIDE_DON_T_CLEAR_ACTIVE_OVERRIDES\020\000"
  "\022)\n%CLEAR_OVERRIDE_CLEAR_ACTIVE_OVERRIDE"
  "S\020\001\"q\n\023Ignore_overrideType\022/\n+IGNORE_OVE"
  "RRIDE_DON_T_IGNORE_USER_OVERRIDES\020\000\022)\n%I"
  "GNORE_OVERRIDE_IGNORE_USER_OVERRIDES\020\001\"\334"
  "\001\n\033Parking_brake_status_rpt_80\022c\n\025parkin"
  "g_brake_enabled\030\001 \001(\0162D.apollo.canbus.Pa"
  "rking_brake_status_rpt_80.Parking_brake_"
  "enabledType\"X\n\031Parking_brake_enabledType"
  "\022\035\n\031PARKING_BRAKE_ENABLED_OFF\020\000\022\034\n\030PARKI"
  "NG_BRAKE_ENABLED_ON\020\001\"#\n\017Yaw_rate_rpt_81"
  "\022\020\n\010yaw_rate\030\001 \001(\001\"\242\003\n\013Horn_rpt_79\022A\n\014ou"
  "tput_value\030\001 \001(\0162+.apollo.canbus.Horn_rp"
  "t_79.Output_valueType\022G\n\017commanded_value"
  "\030\002 \001(\0162..apollo.canbus.Horn_rpt_79.Comma"
  "nded_valueType\022A\n\014manual_input\030\003 \001(\0162+.a"
  "pollo.canbus.Horn_rpt_79.Manual_inputTyp"
  "e\"=\n\020Output_valueType\022\024\n\020OUTPUT_VALUE_OF"
  "F\020\000\022\023\n\017OUTPUT_VALUE_ON\020\001\"F\n\023Commanded_va"
  "lueType\022\027\n\023COMMANDED_VALUE_OFF\020\000\022\026\n\022COMM"
  "ANDED_VALUE_ON\020\001\"=\n\020Manual_inputType\022\024\n\020"
  "MANUAL_INPUT_OFF\020\000\022\023\n\017MANUAL_INPUT_ON\020\001\""
  "{\n\013Horn_cmd_78\0229\n\010horn_cmd\030\001 \001(\0162\'.apoll"
  "o.canbus.Horn_cmd_78.Horn_cmdType\"1\n\014Hor"
  "n_cmdType\022\020\n\014HORN_CMD_OFF\020\000\022\017\n\013HORN_CMD_"
  "ON\020\001\"\207\010\n\014Wiper_rpt_91\022B\n\014output_value\030\001 "
  "\001(\0162,.apollo.canbus.Wiper_rpt_91.Output_"
  "valueType\022H\n\017commanded_value\030\002 \001(\0162/.apo"
  "llo.canbus.Wiper_rpt_91.Commanded_valueT"
  "ype\022B\n\014manual_input\030\003 \001(\0162,.apollo.canbu"
  "s.Wiper_rpt_91.Manual_inputType\"\201\002\n\020Outp"
  "ut_valueType\022\033\n\027OUTPUT_VALUE_WIPERS_OFF\020"
  "\000\022\037\n\033OUTPUT_VALUE_INTERMITTENT_1\020\001\022\037\n\033OU"
  "TPUT_VALUE_INTERMITTENT_2\020\002\022\037\n\033OUTPUT_VA"
  "LUE_INTERMITTENT_3\020\003\022\037\n\033OUTPUT_VALUE_INT"
  "ERMITTENT_4\020\004\022\037\n\033OUTPUT_VALUE_INTERMITTE"
  "NT_5\020\005\022\024\n\020OUTPUT_VALUE_LOW\020\006\022\025\n\021OUTPUT_V"
  "ALUE_HIGH\020\007\"\234\002\n\023Commanded_valueType\022\036\n\032C"
  "OMMANDED_VALUE_WIPERS_OFF\020\000\022\"\n\036COMMANDED"
  "_VALUE_INTERMITTENT_1\020\001\022\"\n\036COMMANDED_VAL"
  "UE_INTERMITTENT_2\020\002\022\"\n\036COMMANDED_VALUE_I"
  "NTERMITTENT_3\020\003\022\"\n\036COMMANDED_VALUE_INTER"
  "MITTENT_4\020\004\022\"\n\036COMMANDED_VALUE_INTERMITT"
  "ENT_5\020\005\022\027\n\023COMMANDED_VALUE_LOW\020\006\022\030\n\024COMM"
  "ANDED_VALUE_HIGH\020\007\"\201\002\n\020Manual_inputType\022"
  "\033\n\027MANUAL_INPUT_WIPERS_OFF\020\000\022\037\n\033MANUAL_I"
  "NPUT_INTERMITTENT_1\020\001\022\037\n\033MANUAL_INPUT_IN"
  "TERMITTENT_2\020\002\022\037\n\033MANUAL_INPUT_INTERMITT"
  "ENT_3\020\003\022\037\n\033MANUAL_INPUT_INTERMITTENT_4\020\004"
  "\022\037\n\033MANUAL_INPUT_INTERMITTENT_5\020\005\022\024\n\020MAN"
  "UAL_INPUT_LOW\020\006\022\025\n\021MANUAL_INPUT_HIGH\020\007\"\342"
  "\001\n\024Vehicle_speed_rpt_6f\022\025\n\rvehicle_speed"
  "\030\001 \001(\001\022X\n\023vehicle_speed_valid\030\002 \001(\0162;.ap"
  "ollo.canbus.Vehicle_speed_rpt_6f.Vehicle"
  "_speed_validType\"Y\n\027Vehicle_speed_validT"
  "ype\022\037\n\033VEHICLE_SPEED_VALID_INVALID\020\000\022\035\n\031"
  "VEHICLE_SPEED_VALID_VALID\020\001\"\316\001\n\020Headligh"
  "t_cmd_76\022H\n\rheadlight_cmd\030\001 \001(\01621.apollo"
  ".canbus.Headlight_cmd_76.Headlight_cmdTy"
  "pe\"p\n\021Headlight_cmdType\022 \n\034HEADLIGHT_CMD"
  "_HEADLIGHTS_OFF\020\000\022\033\n\027HEADLIGHT_CMD_LOW_B"
  "EAMS\020\001\022\034\n\030HEADLIGHT_CMD_HIGH_BEAMS\020\002\"h\n\027"
  "Steering_motor_rpt_2_74\022\033\n\023encoder_tempe"
  "rature\030\001 \001(\005\022\031\n\021motor_temperature\030\002 \001(\005\022"
  "\025\n\rangular_speed\030\003 \001(\001\"e\n\024Brake_motor_rp"
  "t_2_71\022\033\n\023encoder_temperature\030\001 \001(\005\022\031\n\021m"
  "otor_temperature\030\002 \001(\005\022\025\n\rangular_speed\030"
  "\003 \001(\001\"H\n\027Steering_motor_rpt_1_73\022\025\n\rmoto"
  "r_current\030\001 \001(\001\022\026\n\016shaft_position\030\002 \001(\001\""
  "\265\002\n\014Wiper_cmd_90\022<\n\twiper_cmd\030\001 \001(\0162).ap"
  "ollo.canbus.Wiper_cmd_90.Wiper_cmdType\"\346"
  "\001\n\rWiper_cmdType\022\030\n\024WIPER_CMD_WIPERS_OFF"
  "\020\000\022\034\n\030WIPER_CMD_INTERMITTENT_1\020\001\022\034\n\030WIPE"
  "R_CMD_INTERMITTENT_2\020\002\022\034\n\030WIPER_CMD_INTE"
  "RMITTENT_3\020\003\022\034\n\030WIPER_CMD_INTERMITTENT_4"
  "\020\004\022\034\n\030WIPER_CMD_INTERMITTENT_5\020\005\022\021\n\rWIPE"
  "R_CMD_LOW\020\006\022\022\n\016WIPER_CMD_HIGH\020\007\"C\n\024Brake"
  "_motor_rpt_3_72\022\025\n\rtorque_output\030\001 \001(\001\022\024"
  "\n\014torque_input\030\002 \001(\001\"\351\r\n\003Gem\0223\n\rglobal_r"
  "pt_6a\030\001 \001(\0132\034.apollo.canbus.Global_rpt_6"
  "a\0221\n\014brake_cmd_6b\030\002 \001(\0132\033.apollo.canbus."
  "Brake_cmd_6b\0221\n\014brake_rpt_6c\030\003 \001(\0132\033.apo"
  "llo.canbus.Brake_rpt_6c\0227\n\017steering_cmd_"
  "6d\030\004 \001(\0132\036.apollo.canbus.Steering_cmd_6d"
  "\022;\n\021steering_rpt_1_6e\030\005 \001(\0132 .apollo.can"
  "bus.Steering_rpt_1_6e\022=\n\022wheel_speed_rpt"
  "_7a\030\006 \001(\0132!.apollo.canbus.Wheel_speed_rp"
  "t_7a\0229\n\020date_time_rpt_83\030\007 \001(\0132\037.apollo."
  "canbus.Date_time_rpt_83\022A\n\024brake_motor_r"
  "pt_1_70\030\010 \001(\0132#.apollo.canbus.Brake_moto"
  "r_rpt_1_70\0229\n\020headlight_rpt_77\030\t \001(\0132\037.a"
  "pollo.canbus.Headlight_rpt_77\0221\n\014accel_r"
  "pt_68\030\n \001(\0132\033.apollo.canbus.Accel_rpt_68"
  "\022G\n\027steering_motor_rpt_3_75\030\013 \001(\0132&.apol"
  "lo.canbus.Steering_motor_rpt_3_75\022/\n\013tur"
  "n_cmd_63\030\014 \001(\0132\032.apollo.canbus.Turn_cmd_"
  "63\022/\n\013turn_rpt_64\030\r \001(\0132\032.apollo.canbus."
  "Turn_rpt_64\0221\n\014shift_cmd_65\030\016 \001(\0132\033.apol"
  "lo.canbus.Shift_cmd_65\0221\n\014shift_rpt_66\030\017"
  " \001(\0132\033.apollo.canbus.Shift_rpt_66\0221\n\014acc"
  "el_cmd_67\030\020 \001(\0132\033.apollo.canbus.Accel_cm"
  "d_67\022E\n\026lat_lon_heading_rpt_82\030\021 \001(\0132%.a"
  "pollo.canbus.Lat_lon_heading_rpt_82\0223\n\rg"
  "lobal_cmd_69\030\022 \001(\0132\034.apollo.canbus.Globa"
  "l_cmd_69\022O\n\033parking_brake_status_rpt_80\030"
  "\023 \001(\0132*.apollo.canbus.Parking_brake_stat"
  "us_rpt_80\0227\n\017yaw_rate_rpt_81\030\024 \001(\0132\036.apo"
  "llo.canbus.Yaw_rate_rpt_81\022/\n\013horn_rpt_7"
  "9\030\025 \001(\0132\032.apollo.canbus.Horn_rpt_79\022/\n\013h"
  "orn_cmd_78\030\026 \001(\0132\032.apollo.canbus.Horn_cm"
  "d_78\0221\n\014wiper_rpt_91\030\027 \001(\0132\033.apollo.canb"
  "us.Wiper_rpt_91\022A\n\024vehicle_speed_rpt_6f\030"
  "\030 \001(\0132#.apollo.canbus.Vehicle_speed_rpt_"
  "6f\0229\n\020headlight_cmd_76\030\031 \001(\0132\037.apollo.ca"
  "nbus.Headlight_cmd_76\022G\n\027steering_motor_"
  "rpt_2_74\030\032 \001(\0132&.apollo.canbus.Steering_"
  "motor_rpt_2_74\022A\n\024brake_motor_rpt_2_71\030\033"
  " \001(\0132#.apollo.canbus.Brake_motor_rpt_2_7"
  "1\022G\n\027steering_motor_rpt_1_73\030\034 \001(\0132&.apo"
  "llo.canbus.Steering_motor_rpt_1_73\0221\n\014wi"
  "per_cmd_90\030\035 \001(\0132\033.apollo.canbus.Wiper_c"
  "md_90\022A\n\024brake_motor_rpt_3_72\030\036 \001(\0132#.ap"
  "ollo.canbus.Brake_motor_rpt_3_72"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_deps[8] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2flexus_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2ftransit_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2fwey_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2fzhongyun_2eproto,
  &::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_sccs[46] = {
  &scc_info_Accel_cmd_67_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Accel_rpt_68_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_BasicInfo_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Battery_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Brake_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Brake_cmd_6b_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Brake_motor_rpt_1_70_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Brake_motor_rpt_2_71_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Brake_motor_rpt_3_72_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Brake_rpt_6c_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_ChassisDetail_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_CheckResponseSignal_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Date_time_rpt_83_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Deceleration_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Ems_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Epb_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Eps_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Esp_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Gas_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Gear_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Gem_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Global_cmd_69_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Global_rpt_6a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Headlight_cmd_76_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Headlight_rpt_77_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Horn_cmd_78_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Horn_rpt_79_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Lat_lon_heading_rpt_82_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Light_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Parking_brake_status_rpt_80_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Safety_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Shift_cmd_65_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Shift_rpt_66_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Steering_cmd_6d_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Steering_motor_rpt_1_73_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Steering_motor_rpt_2_74_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Steering_motor_rpt_3_75_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Steering_rpt_1_6e_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Turn_cmd_63_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Turn_rpt_64_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_VehicleSpd_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Vehicle_speed_rpt_6f_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Wheel_speed_rpt_7a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Wiper_cmd_90_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Wiper_rpt_91_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
  &scc_info_Yaw_rate_rpt_81_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once;
static bool descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto = {
  &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_initialized, descriptor_table_protodef_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto, "modules/canbus/proto/chassis_detail.proto", 18512,
  &descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_sccs, descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto_deps, 46, 8,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto, 46, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto), true);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChassisDetail_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[0];
}
bool ChassisDetail_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChassisDetail_Type ChassisDetail::QIRUI_EQ_15;
constexpr ChassisDetail_Type ChassisDetail::CHANGAN_RUICHENG;
constexpr ChassisDetail_Type ChassisDetail::Type_MIN;
constexpr ChassisDetail_Type ChassisDetail::Type_MAX;
constexpr int ChassisDetail::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_TurnLightType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[1];
}
bool Light_TurnLightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Light_TurnLightType Light::TURN_LIGHT_OFF;
constexpr Light_TurnLightType Light::TURN_LEFT_ON;
constexpr Light_TurnLightType Light::TURN_RIGHT_ON;
constexpr Light_TurnLightType Light::TURN_LIGHT_ON;
constexpr Light_TurnLightType Light::TurnLightType_MIN;
constexpr Light_TurnLightType Light::TurnLightType_MAX;
constexpr int Light::TurnLightType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_BeamLampType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[2];
}
bool Light_BeamLampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Light_BeamLampType Light::BEAM_OFF;
constexpr Light_BeamLampType Light::HIGH_BEAM_ON;
constexpr Light_BeamLampType Light::LOW_BEAM_ON;
constexpr Light_BeamLampType Light::BeamLampType_MIN;
constexpr Light_BeamLampType Light::BeamLampType_MAX;
constexpr int Light::BeamLampType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_LincolnLampType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[3];
}
bool Light_LincolnLampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Light_LincolnLampType Light::BEAM_NULL;
constexpr Light_LincolnLampType Light::BEAM_FLASH_TO_PASS;
constexpr Light_LincolnLampType Light::BEAM_HIGH;
constexpr Light_LincolnLampType Light::BEAM_INVALID;
constexpr Light_LincolnLampType Light::LincolnLampType_MIN;
constexpr Light_LincolnLampType Light::LincolnLampType_MAX;
constexpr int Light::LincolnLampType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_LincolnWiperType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[4];
}
bool Light_LincolnWiperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Light_LincolnWiperType Light::WIPER_OFF;
constexpr Light_LincolnWiperType Light::WIPER_AUTO_OFF;
constexpr Light_LincolnWiperType Light::WIPER_OFF_MOVING;
constexpr Light_LincolnWiperType Light::WIPER_MANUAL_OFF;
constexpr Light_LincolnWiperType Light::WIPER_MANUAL_ON;
constexpr Light_LincolnWiperType Light::WIPER_MANUAL_LOW;
constexpr Light_LincolnWiperType Light::WIPER_MANUAL_HIGH;
constexpr Light_LincolnWiperType Light::WIPER_MIST_FLICK;
constexpr Light_LincolnWiperType Light::WIPER_WASH;
constexpr Light_LincolnWiperType Light::WIPER_AUTO_LOW;
constexpr Light_LincolnWiperType Light::WIPER_AUTO_HIGH;
constexpr Light_LincolnWiperType Light::WIPER_COURTESY_WIPE;
constexpr Light_LincolnWiperType Light::WIPER_AUTO_ADJUST;
constexpr Light_LincolnWiperType Light::WIPER_RESERVED;
constexpr Light_LincolnWiperType Light::WIPER_STALLED;
constexpr Light_LincolnWiperType Light::WIPER_NO_DATA;
constexpr Light_LincolnWiperType Light::LincolnWiperType_MIN;
constexpr Light_LincolnWiperType Light::LincolnWiperType_MAX;
constexpr int Light::LincolnWiperType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Light_LincolnAmbientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[5];
}
bool Light_LincolnAmbientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Light_LincolnAmbientType Light::AMBIENT_DARK;
constexpr Light_LincolnAmbientType Light::AMBIENT_LIGHT;
constexpr Light_LincolnAmbientType Light::AMBIENT_TWILIGHT;
constexpr Light_LincolnAmbientType Light::AMBIENT_TUNNEL_ON;
constexpr Light_LincolnAmbientType Light::AMBIENT_TUNNEL_OFF;
constexpr Light_LincolnAmbientType Light::AMBIENT_INVALID;
constexpr Light_LincolnAmbientType Light::AMBIENT_NO_DATA;
constexpr Light_LincolnAmbientType Light::LincolnAmbientType_MIN;
constexpr Light_LincolnAmbientType Light::LincolnAmbientType_MAX;
constexpr int Light::LincolnAmbientType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Eps_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[6];
}
bool Eps_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Eps_Type Eps::NOT_AVAILABLE;
constexpr Eps_Type Eps::READY;
constexpr Eps_Type Eps::ACTIVE;
constexpr Eps_Type Eps::INVALID;
constexpr Eps_Type Eps::Type_MIN;
constexpr Eps_Type Eps::Type_MAX;
constexpr int Eps::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_HSAStatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[7];
}
bool Brake_HSAStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Brake_HSAStatusType Brake::HSA_INACTIVE;
constexpr Brake_HSAStatusType Brake::HSA_FINDING_GRADIENT;
constexpr Brake_HSAStatusType Brake::HSA_ACTIVE_PRESSED;
constexpr Brake_HSAStatusType Brake::HSA_ACTIVE_RELEASED;
constexpr Brake_HSAStatusType Brake::HSA_FAST_RELEASE;
constexpr Brake_HSAStatusType Brake::HSA_SLOW_RELEASE;
constexpr Brake_HSAStatusType Brake::HSA_FAILED;
constexpr Brake_HSAStatusType Brake::HSA_UNDEFINED;
constexpr Brake_HSAStatusType Brake::HSAStatusType_MIN;
constexpr Brake_HSAStatusType Brake::HSAStatusType_MAX;
constexpr int Brake::HSAStatusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_HSAModeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[8];
}
bool Brake_HSAModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Brake_HSAModeType Brake::HSA_OFF;
constexpr Brake_HSAModeType Brake::HSA_AUTO;
constexpr Brake_HSAModeType Brake::HSA_MANUAL;
constexpr Brake_HSAModeType Brake::HSA_MODE_UNDEFINED;
constexpr Brake_HSAModeType Brake::HSAModeType_MIN;
constexpr Brake_HSAModeType Brake::HSAModeType_MAX;
constexpr int Brake::HSAModeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epb_PBrakeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[9];
}
bool Epb_PBrakeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Epb_PBrakeType Epb::PBRAKE_OFF;
constexpr Epb_PBrakeType Epb::PBRAKE_TRANSITION;
constexpr Epb_PBrakeType Epb::PBRAKE_ON;
constexpr Epb_PBrakeType Epb::PBRAKE_FAULT;
constexpr Epb_PBrakeType Epb::PBrakeType_MIN;
constexpr Epb_PBrakeType Epb::PBrakeType_MAX;
constexpr int Epb::PBrakeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ems_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[10];
}
bool Ems_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Ems_Type Ems::STOP;
constexpr Ems_Type Ems::CRANK;
constexpr Ems_Type Ems::RUNNING;
constexpr Ems_Type Ems::INVALID;
constexpr Ems_Type Ems::Type_MIN;
constexpr Ems_Type Ems::Type_MAX;
constexpr int Ems::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasicInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[11];
}
bool BasicInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BasicInfo_Type BasicInfo::OFF;
constexpr BasicInfo_Type BasicInfo::ACC;
constexpr BasicInfo_Type BasicInfo::ON;
constexpr BasicInfo_Type BasicInfo::START;
constexpr BasicInfo_Type BasicInfo::INVALID;
constexpr BasicInfo_Type BasicInfo::Type_MIN;
constexpr BasicInfo_Type BasicInfo::Type_MAX;
constexpr int BasicInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_6a_Pacmod_statusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[12];
}
bool Global_rpt_6a_Pacmod_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_rpt_6a_Pacmod_statusType Global_rpt_6a::PACMOD_STATUS_CONTROL_DISABLED;
constexpr Global_rpt_6a_Pacmod_statusType Global_rpt_6a::PACMOD_STATUS_CONTROL_ENABLED;
constexpr Global_rpt_6a_Pacmod_statusType Global_rpt_6a::Pacmod_statusType_MIN;
constexpr Global_rpt_6a_Pacmod_statusType Global_rpt_6a::Pacmod_statusType_MAX;
constexpr int Global_rpt_6a::Pacmod_statusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_6a_Override_statusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[13];
}
bool Global_rpt_6a_Override_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_rpt_6a_Override_statusType Global_rpt_6a::OVERRIDE_STATUS_NOT_OVERRIDDEN;
constexpr Global_rpt_6a_Override_statusType Global_rpt_6a::OVERRIDE_STATUS_OVERRIDDEN;
constexpr Global_rpt_6a_Override_statusType Global_rpt_6a::Override_statusType_MIN;
constexpr Global_rpt_6a_Override_statusType Global_rpt_6a::Override_statusType_MAX;
constexpr int Global_rpt_6a::Override_statusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_rpt_6a_Brk_can_timeoutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[14];
}
bool Global_rpt_6a_Brk_can_timeoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT;
constexpr Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::Brk_can_timeoutType_MIN;
constexpr Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::Brk_can_timeoutType_MAX;
constexpr int Global_rpt_6a::Brk_can_timeoutType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_rpt_6c_Brake_on_offType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[15];
}
bool Brake_rpt_6c_Brake_on_offType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::BRAKE_ON_OFF_OFF;
constexpr Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::BRAKE_ON_OFF_ON;
constexpr Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::Brake_on_offType_MIN;
constexpr Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::Brake_on_offType_MAX;
constexpr int Brake_rpt_6c::Brake_on_offType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_77_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[16];
}
bool Headlight_rpt_77_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_LOW_BEAMS;
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_HIGH_BEAMS;
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::Output_valueType_MIN;
constexpr Headlight_rpt_77_Output_valueType Headlight_rpt_77::Output_valueType_MAX;
constexpr int Headlight_rpt_77::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_77_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[17];
}
bool Headlight_rpt_77_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_HEADLIGHTS_OFF;
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_LOW_BEAMS;
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_HIGH_BEAMS;
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::Manual_inputType_MIN;
constexpr Headlight_rpt_77_Manual_inputType Headlight_rpt_77::Manual_inputType_MAX;
constexpr int Headlight_rpt_77::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_rpt_77_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[18];
}
bool Headlight_rpt_77_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_HEADLIGHTS_OFF;
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_LOW_BEAMS;
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_HIGH_BEAMS;
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::Commanded_valueType_MIN;
constexpr Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::Commanded_valueType_MAX;
constexpr int Headlight_rpt_77::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_cmd_63_Turn_signal_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[19];
}
bool Turn_cmd_63_Turn_signal_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_RIGHT;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_NONE;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_LEFT;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_HAZARD;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::Turn_signal_cmdType_MIN;
constexpr Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::Turn_signal_cmdType_MAX;
constexpr int Turn_cmd_63::Turn_signal_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_64_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[20];
}
bool Turn_rpt_64_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_RIGHT;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_NONE;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_LEFT;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_HAZARD;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::Manual_inputType_MIN;
constexpr Turn_rpt_64_Manual_inputType Turn_rpt_64::Manual_inputType_MAX;
constexpr int Turn_rpt_64::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_64_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[21];
}
bool Turn_rpt_64_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_RIGHT;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_NONE;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_LEFT;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_HAZARD;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::Commanded_valueType_MIN;
constexpr Turn_rpt_64_Commanded_valueType Turn_rpt_64::Commanded_valueType_MAX;
constexpr int Turn_rpt_64::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turn_rpt_64_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[22];
}
bool Turn_rpt_64_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_RIGHT;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_NONE;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_LEFT;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_HAZARD;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::Output_valueType_MIN;
constexpr Turn_rpt_64_Output_valueType Turn_rpt_64::Output_valueType_MAX;
constexpr int Turn_rpt_64::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_cmd_65_Shift_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[23];
}
bool Shift_cmd_65_Shift_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_PARK;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_REVERSE;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_NEUTRAL;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_FORWARD;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_LOW;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::Shift_cmdType_MIN;
constexpr Shift_cmd_65_Shift_cmdType Shift_cmd_65::Shift_cmdType_MAX;
constexpr int Shift_cmd_65::Shift_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_66_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[24];
}
bool Shift_rpt_66_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_PARK;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_REVERSE;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_NEUTRAL;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_FORWARD;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_HIGH;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::Manual_inputType_MIN;
constexpr Shift_rpt_66_Manual_inputType Shift_rpt_66::Manual_inputType_MAX;
constexpr int Shift_rpt_66::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_66_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[25];
}
bool Shift_rpt_66_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_PARK;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_REVERSE;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_NEUTRAL;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_FORWARD;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_HIGH;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::Commanded_valueType_MIN;
constexpr Shift_rpt_66_Commanded_valueType Shift_rpt_66::Commanded_valueType_MAX;
constexpr int Shift_rpt_66::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Shift_rpt_66_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[26];
}
bool Shift_rpt_66_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_PARK;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_REVERSE;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_NEUTRAL;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_FORWARD;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_HIGH;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::Output_valueType_MIN;
constexpr Shift_rpt_66_Output_valueType Shift_rpt_66::Output_valueType_MAX;
constexpr int Shift_rpt_66::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_cmd_69_Pacmod_enableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[27];
}
bool Global_cmd_69_Pacmod_enableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_cmd_69_Pacmod_enableType Global_cmd_69::PACMOD_ENABLE_CONTROL_DISABLED;
constexpr Global_cmd_69_Pacmod_enableType Global_cmd_69::PACMOD_ENABLE_CONTROL_ENABLED;
constexpr Global_cmd_69_Pacmod_enableType Global_cmd_69::Pacmod_enableType_MIN;
constexpr Global_cmd_69_Pacmod_enableType Global_cmd_69::Pacmod_enableType_MAX;
constexpr int Global_cmd_69::Pacmod_enableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_cmd_69_Clear_overrideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[28];
}
bool Global_cmd_69_Clear_overrideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_cmd_69_Clear_overrideType Global_cmd_69::CLEAR_OVERRIDE_DON_T_CLEAR_ACTIVE_OVERRIDES;
constexpr Global_cmd_69_Clear_overrideType Global_cmd_69::CLEAR_OVERRIDE_CLEAR_ACTIVE_OVERRIDES;
constexpr Global_cmd_69_Clear_overrideType Global_cmd_69::Clear_overrideType_MIN;
constexpr Global_cmd_69_Clear_overrideType Global_cmd_69::Clear_overrideType_MAX;
constexpr int Global_cmd_69::Clear_overrideType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Global_cmd_69_Ignore_overrideType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[29];
}
bool Global_cmd_69_Ignore_overrideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Global_cmd_69_Ignore_overrideType Global_cmd_69::IGNORE_OVERRIDE_DON_T_IGNORE_USER_OVERRIDES;
constexpr Global_cmd_69_Ignore_overrideType Global_cmd_69::IGNORE_OVERRIDE_IGNORE_USER_OVERRIDES;
constexpr Global_cmd_69_Ignore_overrideType Global_cmd_69::Ignore_overrideType_MIN;
constexpr Global_cmd_69_Ignore_overrideType Global_cmd_69::Ignore_overrideType_MAX;
constexpr int Global_cmd_69::Ignore_overrideType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Parking_brake_status_rpt_80_Parking_brake_enabledType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[30];
}
bool Parking_brake_status_rpt_80_Parking_brake_enabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::PARKING_BRAKE_ENABLED_OFF;
constexpr Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::PARKING_BRAKE_ENABLED_ON;
constexpr Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::Parking_brake_enabledType_MIN;
constexpr Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::Parking_brake_enabledType_MAX;
constexpr int Parking_brake_status_rpt_80::Parking_brake_enabledType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_79_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[31];
}
bool Horn_rpt_79_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Horn_rpt_79_Output_valueType Horn_rpt_79::OUTPUT_VALUE_OFF;
constexpr Horn_rpt_79_Output_valueType Horn_rpt_79::OUTPUT_VALUE_ON;
constexpr Horn_rpt_79_Output_valueType Horn_rpt_79::Output_valueType_MIN;
constexpr Horn_rpt_79_Output_valueType Horn_rpt_79::Output_valueType_MAX;
constexpr int Horn_rpt_79::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_79_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[32];
}
bool Horn_rpt_79_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Horn_rpt_79_Commanded_valueType Horn_rpt_79::COMMANDED_VALUE_OFF;
constexpr Horn_rpt_79_Commanded_valueType Horn_rpt_79::COMMANDED_VALUE_ON;
constexpr Horn_rpt_79_Commanded_valueType Horn_rpt_79::Commanded_valueType_MIN;
constexpr Horn_rpt_79_Commanded_valueType Horn_rpt_79::Commanded_valueType_MAX;
constexpr int Horn_rpt_79::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_rpt_79_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[33];
}
bool Horn_rpt_79_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Horn_rpt_79_Manual_inputType Horn_rpt_79::MANUAL_INPUT_OFF;
constexpr Horn_rpt_79_Manual_inputType Horn_rpt_79::MANUAL_INPUT_ON;
constexpr Horn_rpt_79_Manual_inputType Horn_rpt_79::Manual_inputType_MIN;
constexpr Horn_rpt_79_Manual_inputType Horn_rpt_79::Manual_inputType_MAX;
constexpr int Horn_rpt_79::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Horn_cmd_78_Horn_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[34];
}
bool Horn_cmd_78_Horn_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Horn_cmd_78_Horn_cmdType Horn_cmd_78::HORN_CMD_OFF;
constexpr Horn_cmd_78_Horn_cmdType Horn_cmd_78::HORN_CMD_ON;
constexpr Horn_cmd_78_Horn_cmdType Horn_cmd_78::Horn_cmdType_MIN;
constexpr Horn_cmd_78_Horn_cmdType Horn_cmd_78::Horn_cmdType_MAX;
constexpr int Horn_cmd_78::Horn_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_91_Output_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[35];
}
bool Wiper_rpt_91_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_1;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_2;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_3;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_4;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_5;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_LOW;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_HIGH;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::Output_valueType_MIN;
constexpr Wiper_rpt_91_Output_valueType Wiper_rpt_91::Output_valueType_MAX;
constexpr int Wiper_rpt_91::Output_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_91_Commanded_valueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[36];
}
bool Wiper_rpt_91_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_WIPERS_OFF;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_1;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_2;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_3;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_4;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_5;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_LOW;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_HIGH;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::Commanded_valueType_MIN;
constexpr Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::Commanded_valueType_MAX;
constexpr int Wiper_rpt_91::Commanded_valueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_rpt_91_Manual_inputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[37];
}
bool Wiper_rpt_91_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_WIPERS_OFF;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_1;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_2;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_3;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_4;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_5;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_LOW;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_HIGH;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::Manual_inputType_MIN;
constexpr Wiper_rpt_91_Manual_inputType Wiper_rpt_91::Manual_inputType_MAX;
constexpr int Wiper_rpt_91::Manual_inputType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle_speed_rpt_6f_Vehicle_speed_validType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[38];
}
bool Vehicle_speed_rpt_6f_Vehicle_speed_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::VEHICLE_SPEED_VALID_INVALID;
constexpr Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::VEHICLE_SPEED_VALID_VALID;
constexpr Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::Vehicle_speed_validType_MIN;
constexpr Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::Vehicle_speed_validType_MAX;
constexpr int Vehicle_speed_rpt_6f::Vehicle_speed_validType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Headlight_cmd_76_Headlight_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[39];
}
bool Headlight_cmd_76_Headlight_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_HEADLIGHTS_OFF;
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_LOW_BEAMS;
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_HIGH_BEAMS;
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::Headlight_cmdType_MIN;
constexpr Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::Headlight_cmdType_MAX;
constexpr int Headlight_cmd_76::Headlight_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Wiper_cmd_90_Wiper_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto[40];
}
bool Wiper_cmd_90_Wiper_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_WIPERS_OFF;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_1;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_2;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_3;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_4;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_5;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_LOW;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_HIGH;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::Wiper_cmdType_MIN;
constexpr Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::Wiper_cmdType_MAX;
constexpr int Wiper_cmd_90::Wiper_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ChassisDetail::InitAsDefaultInstance() {
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->basic_ = const_cast< ::apollo::canbus::BasicInfo*>(
      ::apollo::canbus::BasicInfo::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->safety_ = const_cast< ::apollo::canbus::Safety*>(
      ::apollo::canbus::Safety::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->gear_ = const_cast< ::apollo::canbus::Gear*>(
      ::apollo::canbus::Gear::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->ems_ = const_cast< ::apollo::canbus::Ems*>(
      ::apollo::canbus::Ems::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->esp_ = const_cast< ::apollo::canbus::Esp*>(
      ::apollo::canbus::Esp::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->gas_ = const_cast< ::apollo::canbus::Gas*>(
      ::apollo::canbus::Gas::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->epb_ = const_cast< ::apollo::canbus::Epb*>(
      ::apollo::canbus::Epb::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->brake_ = const_cast< ::apollo::canbus::Brake*>(
      ::apollo::canbus::Brake::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->deceleration_ = const_cast< ::apollo::canbus::Deceleration*>(
      ::apollo::canbus::Deceleration::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->vehicle_spd_ = const_cast< ::apollo::canbus::VehicleSpd*>(
      ::apollo::canbus::VehicleSpd::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->eps_ = const_cast< ::apollo::canbus::Eps*>(
      ::apollo::canbus::Eps::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->light_ = const_cast< ::apollo::canbus::Light*>(
      ::apollo::canbus::Light::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->battery_ = const_cast< ::apollo::canbus::Battery*>(
      ::apollo::canbus::Battery::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->check_response_ = const_cast< ::apollo::canbus::CheckResponseSignal*>(
      ::apollo::canbus::CheckResponseSignal::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->license_ = const_cast< ::apollo::canbus::License*>(
      ::apollo::canbus::License::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->surround_ = const_cast< ::apollo::canbus::Surround*>(
      ::apollo::canbus::Surround::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->gem_ = const_cast< ::apollo::canbus::Gem*>(
      ::apollo::canbus::Gem::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->lexus_ = const_cast< ::apollo::canbus::Lexus*>(
      ::apollo::canbus::Lexus::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->transit_ = const_cast< ::apollo::canbus::Transit*>(
      ::apollo::canbus::Transit::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->ge3_ = const_cast< ::apollo::canbus::Ge3*>(
      ::apollo::canbus::Ge3::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->wey_ = const_cast< ::apollo::canbus::Wey*>(
      ::apollo::canbus::Wey::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->zhongyun_ = const_cast< ::apollo::canbus::Zhongyun*>(
      ::apollo::canbus::Zhongyun::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->ch_ = const_cast< ::apollo::canbus::Ch*>(
      ::apollo::canbus::Ch::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->vehicle_id_ = const_cast< ::apollo::common::VehicleID*>(
      ::apollo::common::VehicleID::internal_default_instance());
}
class ChassisDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisDetail>()._has_bits_);
  static void set_has_car_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::canbus::BasicInfo& basic(const ChassisDetail* msg);
  static void set_has_basic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Safety& safety(const ChassisDetail* msg);
  static void set_has_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Gear& gear(const ChassisDetail* msg);
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Ems& ems(const ChassisDetail* msg);
  static void set_has_ems(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Esp& esp(const ChassisDetail* msg);
  static void set_has_esp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Gas& gas(const ChassisDetail* msg);
  static void set_has_gas(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Epb& epb(const ChassisDetail* msg);
  static void set_has_epb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Brake& brake(const ChassisDetail* msg);
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Deceleration& deceleration(const ChassisDetail* msg);
  static void set_has_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::VehicleSpd& vehicle_spd(const ChassisDetail* msg);
  static void set_has_vehicle_spd(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Eps& eps(const ChassisDetail* msg);
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Light& light(const ChassisDetail* msg);
  static void set_has_light(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Battery& battery(const ChassisDetail* msg);
  static void set_has_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::CheckResponseSignal& check_response(const ChassisDetail* msg);
  static void set_has_check_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::canbus::License& license(const ChassisDetail* msg);
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::canbus::Surround& surround(const ChassisDetail* msg);
  static void set_has_surround(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::canbus::Gem& gem(const ChassisDetail* msg);
  static void set_has_gem(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::canbus::Lexus& lexus(const ChassisDetail* msg);
  static void set_has_lexus(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::canbus::Transit& transit(const ChassisDetail* msg);
  static void set_has_transit(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::canbus::Ge3& ge3(const ChassisDetail* msg);
  static void set_has_ge3(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::canbus::Wey& wey(const ChassisDetail* msg);
  static void set_has_wey(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::canbus::Zhongyun& zhongyun(const ChassisDetail* msg);
  static void set_has_zhongyun(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::canbus::Ch& ch(const ChassisDetail* msg);
  static void set_has_ch(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::common::VehicleID& vehicle_id(const ChassisDetail* msg);
  static void set_has_vehicle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::apollo::canbus::BasicInfo&
ChassisDetail::_Internal::basic(const ChassisDetail* msg) {
  return *msg->basic_;
}
const ::apollo::canbus::Safety&
ChassisDetail::_Internal::safety(const ChassisDetail* msg) {
  return *msg->safety_;
}
const ::apollo::canbus::Gear&
ChassisDetail::_Internal::gear(const ChassisDetail* msg) {
  return *msg->gear_;
}
const ::apollo::canbus::Ems&
ChassisDetail::_Internal::ems(const ChassisDetail* msg) {
  return *msg->ems_;
}
const ::apollo::canbus::Esp&
ChassisDetail::_Internal::esp(const ChassisDetail* msg) {
  return *msg->esp_;
}
const ::apollo::canbus::Gas&
ChassisDetail::_Internal::gas(const ChassisDetail* msg) {
  return *msg->gas_;
}
const ::apollo::canbus::Epb&
ChassisDetail::_Internal::epb(const ChassisDetail* msg) {
  return *msg->epb_;
}
const ::apollo::canbus::Brake&
ChassisDetail::_Internal::brake(const ChassisDetail* msg) {
  return *msg->brake_;
}
const ::apollo::canbus::Deceleration&
ChassisDetail::_Internal::deceleration(const ChassisDetail* msg) {
  return *msg->deceleration_;
}
const ::apollo::canbus::VehicleSpd&
ChassisDetail::_Internal::vehicle_spd(const ChassisDetail* msg) {
  return *msg->vehicle_spd_;
}
const ::apollo::canbus::Eps&
ChassisDetail::_Internal::eps(const ChassisDetail* msg) {
  return *msg->eps_;
}
const ::apollo::canbus::Light&
ChassisDetail::_Internal::light(const ChassisDetail* msg) {
  return *msg->light_;
}
const ::apollo::canbus::Battery&
ChassisDetail::_Internal::battery(const ChassisDetail* msg) {
  return *msg->battery_;
}
const ::apollo::canbus::CheckResponseSignal&
ChassisDetail::_Internal::check_response(const ChassisDetail* msg) {
  return *msg->check_response_;
}
const ::apollo::canbus::License&
ChassisDetail::_Internal::license(const ChassisDetail* msg) {
  return *msg->license_;
}
const ::apollo::canbus::Surround&
ChassisDetail::_Internal::surround(const ChassisDetail* msg) {
  return *msg->surround_;
}
const ::apollo::canbus::Gem&
ChassisDetail::_Internal::gem(const ChassisDetail* msg) {
  return *msg->gem_;
}
const ::apollo::canbus::Lexus&
ChassisDetail::_Internal::lexus(const ChassisDetail* msg) {
  return *msg->lexus_;
}
const ::apollo::canbus::Transit&
ChassisDetail::_Internal::transit(const ChassisDetail* msg) {
  return *msg->transit_;
}
const ::apollo::canbus::Ge3&
ChassisDetail::_Internal::ge3(const ChassisDetail* msg) {
  return *msg->ge3_;
}
const ::apollo::canbus::Wey&
ChassisDetail::_Internal::wey(const ChassisDetail* msg) {
  return *msg->wey_;
}
const ::apollo::canbus::Zhongyun&
ChassisDetail::_Internal::zhongyun(const ChassisDetail* msg) {
  return *msg->zhongyun_;
}
const ::apollo::canbus::Ch&
ChassisDetail::_Internal::ch(const ChassisDetail* msg) {
  return *msg->ch_;
}
const ::apollo::common::VehicleID&
ChassisDetail::_Internal::vehicle_id(const ChassisDetail* msg) {
  return *msg->vehicle_id_;
}
void ChassisDetail::clear_license() {
  if (license_ != nullptr) license_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void ChassisDetail::clear_surround() {
  if (surround_ != nullptr) surround_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void ChassisDetail::clear_lexus() {
  if (lexus_ != nullptr) lexus_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void ChassisDetail::clear_transit() {
  if (transit_ != nullptr) transit_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void ChassisDetail::clear_ge3() {
  if (ge3_ != nullptr) ge3_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void ChassisDetail::clear_wey() {
  if (wey_ != nullptr) wey_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void ChassisDetail::clear_zhongyun() {
  if (zhongyun_ != nullptr) zhongyun_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void ChassisDetail::clear_ch() {
  if (ch_ != nullptr) ch_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void ChassisDetail::clear_vehicle_id() {
  if (vehicle_id_ != nullptr) vehicle_id_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
ChassisDetail::ChassisDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.ChassisDetail)
}
ChassisDetail::ChassisDetail(const ChassisDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basic()) {
    basic_ = new ::apollo::canbus::BasicInfo(*from.basic_);
  } else {
    basic_ = nullptr;
  }
  if (from._internal_has_safety()) {
    safety_ = new ::apollo::canbus::Safety(*from.safety_);
  } else {
    safety_ = nullptr;
  }
  if (from._internal_has_gear()) {
    gear_ = new ::apollo::canbus::Gear(*from.gear_);
  } else {
    gear_ = nullptr;
  }
  if (from._internal_has_ems()) {
    ems_ = new ::apollo::canbus::Ems(*from.ems_);
  } else {
    ems_ = nullptr;
  }
  if (from._internal_has_esp()) {
    esp_ = new ::apollo::canbus::Esp(*from.esp_);
  } else {
    esp_ = nullptr;
  }
  if (from._internal_has_gas()) {
    gas_ = new ::apollo::canbus::Gas(*from.gas_);
  } else {
    gas_ = nullptr;
  }
  if (from._internal_has_epb()) {
    epb_ = new ::apollo::canbus::Epb(*from.epb_);
  } else {
    epb_ = nullptr;
  }
  if (from._internal_has_brake()) {
    brake_ = new ::apollo::canbus::Brake(*from.brake_);
  } else {
    brake_ = nullptr;
  }
  if (from._internal_has_deceleration()) {
    deceleration_ = new ::apollo::canbus::Deceleration(*from.deceleration_);
  } else {
    deceleration_ = nullptr;
  }
  if (from._internal_has_vehicle_spd()) {
    vehicle_spd_ = new ::apollo::canbus::VehicleSpd(*from.vehicle_spd_);
  } else {
    vehicle_spd_ = nullptr;
  }
  if (from._internal_has_eps()) {
    eps_ = new ::apollo::canbus::Eps(*from.eps_);
  } else {
    eps_ = nullptr;
  }
  if (from._internal_has_light()) {
    light_ = new ::apollo::canbus::Light(*from.light_);
  } else {
    light_ = nullptr;
  }
  if (from._internal_has_battery()) {
    battery_ = new ::apollo::canbus::Battery(*from.battery_);
  } else {
    battery_ = nullptr;
  }
  if (from._internal_has_check_response()) {
    check_response_ = new ::apollo::canbus::CheckResponseSignal(*from.check_response_);
  } else {
    check_response_ = nullptr;
  }
  if (from._internal_has_license()) {
    license_ = new ::apollo::canbus::License(*from.license_);
  } else {
    license_ = nullptr;
  }
  if (from._internal_has_surround()) {
    surround_ = new ::apollo::canbus::Surround(*from.surround_);
  } else {
    surround_ = nullptr;
  }
  if (from._internal_has_gem()) {
    gem_ = new ::apollo::canbus::Gem(*from.gem_);
  } else {
    gem_ = nullptr;
  }
  if (from._internal_has_lexus()) {
    lexus_ = new ::apollo::canbus::Lexus(*from.lexus_);
  } else {
    lexus_ = nullptr;
  }
  if (from._internal_has_transit()) {
    transit_ = new ::apollo::canbus::Transit(*from.transit_);
  } else {
    transit_ = nullptr;
  }
  if (from._internal_has_ge3()) {
    ge3_ = new ::apollo::canbus::Ge3(*from.ge3_);
  } else {
    ge3_ = nullptr;
  }
  if (from._internal_has_wey()) {
    wey_ = new ::apollo::canbus::Wey(*from.wey_);
  } else {
    wey_ = nullptr;
  }
  if (from._internal_has_zhongyun()) {
    zhongyun_ = new ::apollo::canbus::Zhongyun(*from.zhongyun_);
  } else {
    zhongyun_ = nullptr;
  }
  if (from._internal_has_ch()) {
    ch_ = new ::apollo::canbus::Ch(*from.ch_);
  } else {
    ch_ = nullptr;
  }
  if (from._internal_has_vehicle_id()) {
    vehicle_id_ = new ::apollo::common::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = nullptr;
  }
  car_type_ = from.car_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisDetail)
}

void ChassisDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChassisDetail_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  ::memset(&basic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_type_) -
      reinterpret_cast<char*>(&basic_)) + sizeof(car_type_));
}

ChassisDetail::~ChassisDetail() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisDetail)
  SharedDtor();
}

void ChassisDetail::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
  if (this != internal_default_instance()) delete safety_;
  if (this != internal_default_instance()) delete gear_;
  if (this != internal_default_instance()) delete ems_;
  if (this != internal_default_instance()) delete esp_;
  if (this != internal_default_instance()) delete gas_;
  if (this != internal_default_instance()) delete epb_;
  if (this != internal_default_instance()) delete brake_;
  if (this != internal_default_instance()) delete deceleration_;
  if (this != internal_default_instance()) delete vehicle_spd_;
  if (this != internal_default_instance()) delete eps_;
  if (this != internal_default_instance()) delete light_;
  if (this != internal_default_instance()) delete battery_;
  if (this != internal_default_instance()) delete check_response_;
  if (this != internal_default_instance()) delete license_;
  if (this != internal_default_instance()) delete surround_;
  if (this != internal_default_instance()) delete gem_;
  if (this != internal_default_instance()) delete lexus_;
  if (this != internal_default_instance()) delete transit_;
  if (this != internal_default_instance()) delete ge3_;
  if (this != internal_default_instance()) delete wey_;
  if (this != internal_default_instance()) delete zhongyun_;
  if (this != internal_default_instance()) delete ch_;
  if (this != internal_default_instance()) delete vehicle_id_;
}

void ChassisDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChassisDetail& ChassisDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChassisDetail_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void ChassisDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(basic_ != nullptr);
      basic_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(safety_ != nullptr);
      safety_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gear_ != nullptr);
      gear_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ems_ != nullptr);
      ems_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(esp_ != nullptr);
      esp_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gas_ != nullptr);
      gas_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(epb_ != nullptr);
      epb_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(brake_ != nullptr);
      brake_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(deceleration_ != nullptr);
      deceleration_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(vehicle_spd_ != nullptr);
      vehicle_spd_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(eps_ != nullptr);
      eps_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(light_ != nullptr);
      light_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(battery_ != nullptr);
      battery_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(check_response_ != nullptr);
      check_response_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(license_ != nullptr);
      license_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(surround_ != nullptr);
      surround_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(gem_ != nullptr);
      gem_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(lexus_ != nullptr);
      lexus_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(transit_ != nullptr);
      transit_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(ge3_ != nullptr);
      ge3_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(wey_ != nullptr);
      wey_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(zhongyun_ != nullptr);
      zhongyun_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(ch_ != nullptr);
      ch_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(vehicle_id_ != nullptr);
      vehicle_id_->Clear();
    }
  }
  car_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChassisDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::ChassisDetail_Type_IsValid(val))) {
            _internal_set_car_type(static_cast<::apollo::canbus::ChassisDetail_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.BasicInfo basic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Safety safety = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_safety(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gear gear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ems ems = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ems(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Esp esp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_esp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gas gas = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Epb epb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_epb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake brake = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Deceleration deceleration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_spd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Eps eps = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_eps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light light = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Battery battery = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.CheckResponseSignal check_response = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.License license = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Surround surround = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_surround(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gem gem = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_gem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Lexus lexus = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_lexus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Transit transit = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_transit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ge3 ge3 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ge3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wey wey = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_wey(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Zhongyun zhongyun = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_zhongyun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ch ch = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_ch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleID vehicle_id = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_car_type(), target);
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::basic(this), target, stream);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::safety(this), target, stream);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gear(this), target, stream);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ems(this), target, stream);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::esp(this), target, stream);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gas(this), target, stream);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::epb(this), target, stream);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::brake(this), target, stream);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::deceleration(this), target, stream);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::vehicle_spd(this), target, stream);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::eps(this), target, stream);
  }

  // optional .apollo.canbus.Light light = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::light(this), target, stream);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::battery(this), target, stream);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::check_response(this), target, stream);
  }

  // optional .apollo.canbus.License license = 16 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::license(this), target, stream);
  }

  // optional .apollo.canbus.Surround surround = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::surround(this), target, stream);
  }

  // optional .apollo.canbus.Gem gem = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::gem(this), target, stream);
  }

  // optional .apollo.canbus.Lexus lexus = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::lexus(this), target, stream);
  }

  // optional .apollo.canbus.Transit transit = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::transit(this), target, stream);
  }

  // optional .apollo.canbus.Ge3 ge3 = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::ge3(this), target, stream);
  }

  // optional .apollo.canbus.Wey wey = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::wey(this), target, stream);
  }

  // optional .apollo.canbus.Zhongyun zhongyun = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::zhongyun(this), target, stream);
  }

  // optional .apollo.canbus.Ch ch = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::ch(this), target, stream);
  }

  // optional .apollo.common.VehicleID vehicle_id = 101;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::vehicle_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisDetail)
  return target;
}

size_t ChassisDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.BasicInfo basic = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *basic_);
    }

    // optional .apollo.canbus.Safety safety = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *safety_);
    }

    // optional .apollo.canbus.Gear gear = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gear_);
    }

    // optional .apollo.canbus.Ems ems = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ems_);
    }

    // optional .apollo.canbus.Esp esp = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esp_);
    }

    // optional .apollo.canbus.Gas gas = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gas_);
    }

    // optional .apollo.canbus.Epb epb = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *epb_);
    }

    // optional .apollo.canbus.Brake brake = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Deceleration deceleration = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deceleration_);
    }

    // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_spd_);
    }

    // optional .apollo.canbus.Eps eps = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *eps_);
    }

    // optional .apollo.canbus.Light light = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_);
    }

    // optional .apollo.canbus.Battery battery = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *battery_);
    }

    // optional .apollo.canbus.CheckResponseSignal check_response = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *check_response_);
    }

    // optional .apollo.canbus.License license = 16 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *license_);
    }

    // optional .apollo.canbus.Surround surround = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *surround_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.canbus.Gem gem = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gem_);
    }

    // optional .apollo.canbus.Lexus lexus = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lexus_);
    }

    // optional .apollo.canbus.Transit transit = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transit_);
    }

    // optional .apollo.canbus.Ge3 ge3 = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ge3_);
    }

    // optional .apollo.canbus.Wey wey = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wey_);
    }

    // optional .apollo.canbus.Zhongyun zhongyun = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *zhongyun_);
    }

    // optional .apollo.canbus.Ch ch = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ch_);
    }

    // optional .apollo.common.VehicleID vehicle_id = 101;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_id_);
    }

  }
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (cached_has_bits & 0x01000000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_car_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChassisDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.ChassisDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.ChassisDetail)
    MergeFrom(*source);
  }
}

void ChassisDetail::MergeFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_basic()->::apollo::canbus::BasicInfo::MergeFrom(from._internal_basic());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_safety()->::apollo::canbus::Safety::MergeFrom(from._internal_safety());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_gear()->::apollo::canbus::Gear::MergeFrom(from._internal_gear());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ems()->::apollo::canbus::Ems::MergeFrom(from._internal_ems());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_esp()->::apollo::canbus::Esp::MergeFrom(from._internal_esp());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_gas()->::apollo::canbus::Gas::MergeFrom(from._internal_gas());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_epb()->::apollo::canbus::Epb::MergeFrom(from._internal_epb());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_brake()->::apollo::canbus::Brake::MergeFrom(from._internal_brake());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_deceleration()->::apollo::canbus::Deceleration::MergeFrom(from._internal_deceleration());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_vehicle_spd()->::apollo::canbus::VehicleSpd::MergeFrom(from._internal_vehicle_spd());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_eps()->::apollo::canbus::Eps::MergeFrom(from._internal_eps());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_light()->::apollo::canbus::Light::MergeFrom(from._internal_light());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_battery()->::apollo::canbus::Battery::MergeFrom(from._internal_battery());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_check_response()->::apollo::canbus::CheckResponseSignal::MergeFrom(from._internal_check_response());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_license()->::apollo::canbus::License::MergeFrom(from._internal_license());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_surround()->::apollo::canbus::Surround::MergeFrom(from._internal_surround());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_gem()->::apollo::canbus::Gem::MergeFrom(from._internal_gem());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_lexus()->::apollo::canbus::Lexus::MergeFrom(from._internal_lexus());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_transit()->::apollo::canbus::Transit::MergeFrom(from._internal_transit());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_ge3()->::apollo::canbus::Ge3::MergeFrom(from._internal_ge3());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_wey()->::apollo::canbus::Wey::MergeFrom(from._internal_wey());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_zhongyun()->::apollo::canbus::Zhongyun::MergeFrom(from._internal_zhongyun());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_ch()->::apollo::canbus::Ch::MergeFrom(from._internal_ch());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_vehicle_id()->::apollo::common::VehicleID::MergeFrom(from._internal_vehicle_id());
    }
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_car_type(from._internal_car_type());
  }
}

void ChassisDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisDetail::CopyFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisDetail::IsInitialized() const {
  return true;
}

void ChassisDetail::InternalSwap(ChassisDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(basic_, other->basic_);
  swap(safety_, other->safety_);
  swap(gear_, other->gear_);
  swap(ems_, other->ems_);
  swap(esp_, other->esp_);
  swap(gas_, other->gas_);
  swap(epb_, other->epb_);
  swap(brake_, other->brake_);
  swap(deceleration_, other->deceleration_);
  swap(vehicle_spd_, other->vehicle_spd_);
  swap(eps_, other->eps_);
  swap(light_, other->light_);
  swap(battery_, other->battery_);
  swap(check_response_, other->check_response_);
  swap(license_, other->license_);
  swap(surround_, other->surround_);
  swap(gem_, other->gem_);
  swap(lexus_, other->lexus_);
  swap(transit_, other->transit_);
  swap(ge3_, other->ge3_);
  swap(wey_, other->wey_);
  swap(zhongyun_, other->zhongyun_);
  swap(ch_, other->ch_);
  swap(vehicle_id_, other->vehicle_id_);
  swap(car_type_, other->car_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckResponseSignal::InitAsDefaultInstance() {
}
class CheckResponseSignal::_Internal {
 public:
  using HasBits = decltype(std::declval<CheckResponseSignal>()._has_bits_);
  static void set_has_is_eps_online(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_epb_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_esp_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_vtog_online(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_scu_online(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_switch_online(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_vcu_online(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CheckResponseSignal::CheckResponseSignal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.CheckResponseSignal)
}
CheckResponseSignal::CheckResponseSignal(const CheckResponseSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_eps_online_, &from.is_eps_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_vcu_online_) -
    reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.CheckResponseSignal)
}

void CheckResponseSignal::SharedCtor() {
  ::memset(&is_eps_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_vcu_online_) -
      reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
}

CheckResponseSignal::~CheckResponseSignal() {
  // @@protoc_insertion_point(destructor:apollo.canbus.CheckResponseSignal)
  SharedDtor();
}

void CheckResponseSignal::SharedDtor() {
}

void CheckResponseSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckResponseSignal& CheckResponseSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckResponseSignal_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void CheckResponseSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.CheckResponseSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&is_eps_online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_vcu_online_) -
        reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CheckResponseSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_eps_online = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_eps_online(&has_bits);
          is_eps_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_epb_online = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_epb_online(&has_bits);
          is_epb_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_esp_online = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_esp_online(&has_bits);
          is_esp_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_vtog_online = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_vtog_online(&has_bits);
          is_vtog_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_scu_online = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_scu_online(&has_bits);
          is_scu_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_switch_online = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_switch_online(&has_bits);
          is_switch_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_vcu_online = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_vcu_online(&has_bits);
          is_vcu_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckResponseSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.CheckResponseSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_online = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_eps_online(), target);
  }

  // optional bool is_epb_online = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_epb_online(), target);
  }

  // optional bool is_esp_online = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_esp_online(), target);
  }

  // optional bool is_vtog_online = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_vtog_online(), target);
  }

  // optional bool is_scu_online = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_scu_online(), target);
  }

  // optional bool is_switch_online = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_switch_online(), target);
  }

  // optional bool is_vcu_online = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_vcu_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.CheckResponseSignal)
  return target;
}

size_t CheckResponseSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.CheckResponseSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool is_eps_online = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_online = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_online = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_vtog_online = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_scu_online = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_switch_online = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_vcu_online = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResponseSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponseSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckResponseSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.CheckResponseSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.CheckResponseSignal)
    MergeFrom(*source);
  }
}

void CheckResponseSignal::MergeFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      is_eps_online_ = from.is_eps_online_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_epb_online_ = from.is_epb_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_esp_online_ = from.is_esp_online_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_vtog_online_ = from.is_vtog_online_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_scu_online_ = from.is_scu_online_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_switch_online_ = from.is_switch_online_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_vcu_online_ = from.is_vcu_online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckResponseSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponseSignal::CopyFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponseSignal::IsInitialized() const {
  return true;
}

void CheckResponseSignal::InternalSwap(CheckResponseSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_eps_online_, other->is_eps_online_);
  swap(is_epb_online_, other->is_epb_online_);
  swap(is_esp_online_, other->is_esp_online_);
  swap(is_vtog_online_, other->is_vtog_online_);
  swap(is_scu_online_, other->is_scu_online_);
  swap(is_switch_online_, other->is_switch_online_);
  swap(is_vcu_online_, other->is_vcu_online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponseSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Battery::InitAsDefaultInstance() {
}
class Battery::_Internal {
 public:
  using HasBits = decltype(std::declval<Battery>()._has_bits_);
  static void set_has_battery_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fuel_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Battery::Battery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Battery)
}
Battery::Battery(const Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_percent_, &from.battery_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&fuel_level_) -
    reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Battery)
}

void Battery::SharedCtor() {
  ::memset(&battery_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_level_) -
      reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Battery)
  SharedDtor();
}

void Battery::SharedDtor() {
}

void Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Battery& Battery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Battery_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&battery_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuel_level_) -
        reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Battery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double battery_percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_battery_percent(&has_bits);
          battery_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double fuel_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_fuel_level(&has_bits);
          fuel_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Battery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double battery_percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_battery_percent(), target);
  }

  // optional double fuel_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fuel_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Battery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double battery_percent = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double fuel_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Battery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Battery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Battery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      battery_percent_ = from.battery_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      fuel_level_ = from.fuel_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Battery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::InternalSwap(Battery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(battery_percent_, other->battery_percent_);
  swap(fuel_level_, other->fuel_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Battery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Light::InitAsDefaultInstance() {
}
class Light::_Internal {
 public:
  using HasBits = decltype(std::declval<Light>()._has_bits_);
  static void set_has_turn_light_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_beam_lamp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_brake_lamp_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_auto_light(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wiper_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lotion_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_horn_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lincoln_lamp_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lincoln_wiper(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lincoln_ambient(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Light::Light()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Light)
}
Light::Light(const Light& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turn_light_type_, &from.turn_light_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&lincoln_ambient_) -
    reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_ambient_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Light)
}

void Light::SharedCtor() {
  ::memset(&turn_light_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lincoln_ambient_) -
      reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_ambient_));
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Light)
  SharedDtor();
}

void Light::SharedDtor() {
}

void Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Light& Light::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Light_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&turn_light_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lincoln_lamp_type_) -
        reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_lamp_type_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&lincoln_wiper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lincoln_ambient_) -
        reinterpret_cast<char*>(&lincoln_wiper_)) + sizeof(lincoln_ambient_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Light::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_TurnLightType_IsValid(val))) {
            _internal_set_turn_light_type(static_cast<::apollo::canbus::Light_TurnLightType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_BeamLampType_IsValid(val))) {
            _internal_set_beam_lamp_type(static_cast<::apollo::canbus::Light_BeamLampType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_brake_lamp_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_brake_lamp_on(&has_bits);
          is_brake_lamp_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_auto_light = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_auto_light(&has_bits);
          is_auto_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wiper_gear = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_wiper_gear(&has_bits);
          wiper_gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lotion_gear = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lotion_gear(&has_bits);
          lotion_gear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_horn_on = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_horn_on(&has_bits);
          is_horn_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_LincolnLampType_IsValid(val))) {
            _internal_set_lincoln_lamp_type(static_cast<::apollo::canbus::Light_LincolnLampType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_LincolnWiperType_IsValid(val))) {
            _internal_set_lincoln_wiper(static_cast<::apollo::canbus::Light_LincolnWiperType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Light_LincolnAmbientType_IsValid(val))) {
            _internal_set_lincoln_ambient(static_cast<::apollo::canbus::Light_LincolnAmbientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Light::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Light)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_light_type(), target);
  }

  // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_beam_lamp_type(), target);
  }

  // optional bool is_brake_lamp_on = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_brake_lamp_on(), target);
  }

  // optional bool is_auto_light = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_auto_light(), target);
  }

  // optional int32 wiper_gear = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wiper_gear(), target);
  }

  // optional int32 lotion_gear = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_lotion_gear(), target);
  }

  // optional bool is_horn_on = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_horn_on(), target);
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_lincoln_lamp_type(), target);
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_lincoln_wiper(), target);
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_lincoln_ambient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Light)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_light_type());
    }

    // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_beam_lamp_type());
    }

    // optional bool is_brake_lamp_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_auto_light = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_horn_on = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 wiper_gear = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wiper_gear());
    }

    // optional int32 lotion_gear = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lotion_gear());
    }

    // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lincoln_lamp_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lincoln_wiper());
    }

    // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lincoln_ambient());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Light::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Light>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Light)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      turn_light_type_ = from.turn_light_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      beam_lamp_type_ = from.beam_lamp_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_brake_lamp_on_ = from.is_brake_lamp_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_auto_light_ = from.is_auto_light_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_horn_on_ = from.is_horn_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      wiper_gear_ = from.wiper_gear_;
    }
    if (cached_has_bits & 0x00000040u) {
      lotion_gear_ = from.lotion_gear_;
    }
    if (cached_has_bits & 0x00000080u) {
      lincoln_lamp_type_ = from.lincoln_lamp_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      lincoln_wiper_ = from.lincoln_wiper_;
    }
    if (cached_has_bits & 0x00000200u) {
      lincoln_ambient_ = from.lincoln_ambient_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Light::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::InternalSwap(Light* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(turn_light_type_, other->turn_light_type_);
  swap(beam_lamp_type_, other->beam_lamp_type_);
  swap(is_brake_lamp_on_, other->is_brake_lamp_on_);
  swap(is_auto_light_, other->is_auto_light_);
  swap(is_horn_on_, other->is_horn_on_);
  swap(wiper_gear_, other->wiper_gear_);
  swap(lotion_gear_, other->lotion_gear_);
  swap(lincoln_lamp_type_, other->lincoln_lamp_type_);
  swap(lincoln_wiper_, other->lincoln_wiper_);
  swap(lincoln_ambient_, other->lincoln_ambient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Light::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Eps::InitAsDefaultInstance() {
}
class Eps::_Internal {
 public:
  using HasBits = decltype(std::declval<Eps>()._has_bits_);
  static void set_has_is_eps_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps_control_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps_driver_hand_torq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_steering_angle_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steering_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steering_angle_spd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_trimming_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_calibration_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_failure_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_allow_enter_autonomous_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_current_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steering_angle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vehicle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_epas_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steering_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_driver_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_watchdog_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_channel_1_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_channel_2_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_calibration_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_connector_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_timestamp_65(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_build_number(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

Eps::Eps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Eps)
}
Eps::Eps(const Eps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eps_driver_hand_torq_, &from.eps_driver_hand_torq_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Eps)
}

void Eps::SharedCtor() {
  ::memset(&eps_driver_hand_torq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(build_number_));
}

Eps::~Eps() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Eps)
  SharedDtor();
}

void Eps::SharedDtor() {
}

void Eps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Eps& Eps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Eps_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Eps::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Eps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&eps_driver_hand_torq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_angle_spd_) -
        reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(steering_angle_spd_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&allow_enter_autonomous_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driver_override_) -
        reinterpret_cast<char*>(&allow_enter_autonomous_mode_)) + sizeof(driver_override_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&driver_activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&major_version_) -
        reinterpret_cast<char*>(&driver_activity_)) + sizeof(major_version_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&minor_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_number_) -
        reinterpret_cast<char*>(&minor_version_)) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Eps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_eps_fail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_eps_fail(&has_bits);
          is_eps_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Eps.Type eps_control_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Eps_Type_IsValid(val))) {
            _internal_set_eps_control_state(static_cast<::apollo::canbus::Eps_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double eps_driver_hand_torq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_eps_driver_hand_torq(&has_bits);
          eps_driver_hand_torq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_steering_angle_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_steering_angle_valid(&has_bits);
          is_steering_angle_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double steering_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_steering_angle(&has_bits);
          steering_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_angle_spd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_steering_angle_spd(&has_bits);
          steering_angle_spd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_trimming_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_trimming_status(&has_bits);
          is_trimming_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_calibration_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_calibration_status(&has_bits);
          is_calibration_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_failure_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_failure_status(&has_bits);
          is_failure_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 allow_enter_autonomous_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_allow_enter_autonomous_mode(&has_bits);
          allow_enter_autonomous_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 current_driving_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_current_driving_mode(&has_bits);
          current_driving_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double steering_angle_cmd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_steering_angle_cmd(&has_bits);
          steering_angle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vehicle_speed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_vehicle_speed(&has_bits);
          vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double epas_torque = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_epas_torque(&has_bits);
          epas_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool steering_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_steering_enabled(&has_bits);
          steering_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_override = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_driver_override(&has_bits);
          driver_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_activity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_driver_activity(&has_bits);
          driver_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool watchdog_fault = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_watchdog_fault(&has_bits);
          watchdog_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_1_fault = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_channel_1_fault(&has_bits);
          channel_1_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_2_fault = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_channel_2_fault(&has_bits);
          channel_2_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool calibration_fault = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_calibration_fault(&has_bits);
          calibration_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool connector_fault = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_connector_fault(&has_bits);
          connector_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double timestamp_65 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_timestamp_65(&has_bits);
          timestamp_65_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 major_version = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_major_version(&has_bits);
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minor_version = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_minor_version(&has_bits);
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 build_number = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_build_number(&has_bits);
          build_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Eps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Eps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_fail = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_eps_fail(), target);
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_eps_control_state(), target);
  }

  // optional double eps_driver_hand_torq = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_eps_driver_hand_torq(), target);
  }

  // optional bool is_steering_angle_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_steering_angle_valid(), target);
  }

  // optional double steering_angle = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_steering_angle(), target);
  }

  // optional double steering_angle_spd = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_steering_angle_spd(), target);
  }

  // optional bool is_trimming_status = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_trimming_status(), target);
  }

  // optional bool is_calibration_status = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_calibration_status(), target);
  }

  // optional bool is_failure_status = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_failure_status(), target);
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_allow_enter_autonomous_mode(), target);
  }

  // optional int32 current_driving_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_current_driving_mode(), target);
  }

  // optional double steering_angle_cmd = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steering_angle_cmd(), target);
  }

  // optional double vehicle_speed = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_vehicle_speed(), target);
  }

  // optional double epas_torque = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_epas_torque(), target);
  }

  // optional bool steering_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_steering_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_channel_2_fault(), target);
  }

  // optional bool calibration_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_calibration_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_connector_fault(), target);
  }

  // optional double timestamp_65 = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_timestamp_65(), target);
  }

  // optional int32 major_version = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_major_version(), target);
  }

  // optional int32 minor_version = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_minor_version(), target);
  }

  // optional int32 build_number = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_build_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Eps)
  return target;
}

size_t Eps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Eps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double eps_driver_hand_torq = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Eps.Type eps_control_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eps_control_state());
    }

    // optional bool is_eps_fail = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_steering_angle_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_trimming_status = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_calibration_status = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional double steering_angle = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double steering_angle_spd = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 allow_enter_autonomous_mode = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_allow_enter_autonomous_mode());
    }

    // optional int32 current_driving_mode = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_current_driving_mode());
    }

    // optional double steering_angle_cmd = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double vehicle_speed = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double epas_torque = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional bool is_failure_status = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool steering_enabled = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool driver_activity = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool watchdog_fault = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool channel_1_fault = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool channel_2_fault = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool calibration_fault = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional double timestamp_65 = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional bool connector_fault = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional int32 major_version = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_major_version());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional int32 minor_version = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minor_version());
    }

    // optional int32 build_number = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_build_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Eps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  const Eps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Eps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Eps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Eps)
    MergeFrom(*source);
  }
}

void Eps::MergeFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      eps_driver_hand_torq_ = from.eps_driver_hand_torq_;
    }
    if (cached_has_bits & 0x00000002u) {
      eps_control_state_ = from.eps_control_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_eps_fail_ = from.is_eps_fail_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_steering_angle_valid_ = from.is_steering_angle_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_trimming_status_ = from.is_trimming_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_calibration_status_ = from.is_calibration_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      steering_angle_ = from.steering_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      steering_angle_spd_ = from.steering_angle_spd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      allow_enter_autonomous_mode_ = from.allow_enter_autonomous_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_driving_mode_ = from.current_driving_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_angle_cmd_ = from.steering_angle_cmd_;
    }
    if (cached_has_bits & 0x00000800u) {
      vehicle_speed_ = from.vehicle_speed_;
    }
    if (cached_has_bits & 0x00001000u) {
      epas_torque_ = from.epas_torque_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_failure_status_ = from.is_failure_status_;
    }
    if (cached_has_bits & 0x00004000u) {
      steering_enabled_ = from.steering_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      driver_override_ = from.driver_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00020000u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00040000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00100000u) {
      calibration_fault_ = from.calibration_fault_;
    }
    if (cached_has_bits & 0x00200000u) {
      timestamp_65_ = from.timestamp_65_;
    }
    if (cached_has_bits & 0x00400000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00800000u) {
      major_version_ = from.major_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x02000000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Eps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eps::CopyFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eps::IsInitialized() const {
  return true;
}

void Eps::InternalSwap(Eps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eps_driver_hand_torq_, other->eps_driver_hand_torq_);
  swap(eps_control_state_, other->eps_control_state_);
  swap(is_eps_fail_, other->is_eps_fail_);
  swap(is_steering_angle_valid_, other->is_steering_angle_valid_);
  swap(is_trimming_status_, other->is_trimming_status_);
  swap(is_calibration_status_, other->is_calibration_status_);
  swap(steering_angle_, other->steering_angle_);
  swap(steering_angle_spd_, other->steering_angle_spd_);
  swap(allow_enter_autonomous_mode_, other->allow_enter_autonomous_mode_);
  swap(current_driving_mode_, other->current_driving_mode_);
  swap(steering_angle_cmd_, other->steering_angle_cmd_);
  swap(vehicle_speed_, other->vehicle_speed_);
  swap(epas_torque_, other->epas_torque_);
  swap(is_failure_status_, other->is_failure_status_);
  swap(steering_enabled_, other->steering_enabled_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(calibration_fault_, other->calibration_fault_);
  swap(timestamp_65_, other->timestamp_65_);
  swap(connector_fault_, other->connector_fault_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Eps::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleSpd::InitAsDefaultInstance() {
}
class VehicleSpd::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleSpd>()._has_bits_);
  static void set_has_is_vehicle_standstill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_vehicle_spd_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicle_spd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_wheel_spd_rr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wheel_direction_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wheel_spd_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_wheel_spd_rl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wheel_direction_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wheel_spd_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_wheel_spd_fr_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_wheel_direction_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wheel_spd_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_wheel_spd_fl_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_wheel_direction_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wheel_spd_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_yaw_rate_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_yaw_rate_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_is_ax_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ax(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ax_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_is_ay_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ay(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ay_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_lat_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_long_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_vert_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_roll_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_acc_est(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
};

VehicleSpd::VehicleSpd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.VehicleSpd)
}
VehicleSpd::VehicleSpd(const VehicleSpd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_spd_, &from.vehicle_spd_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ay_valid_) -
    reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(is_ay_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.VehicleSpd)
}

void VehicleSpd::SharedCtor() {
  ::memset(&vehicle_spd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ay_valid_) -
      reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(is_ay_valid_));
}

VehicleSpd::~VehicleSpd() {
  // @@protoc_insertion_point(destructor:apollo.canbus.VehicleSpd)
  SharedDtor();
}

void VehicleSpd::SharedDtor() {
}

void VehicleSpd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleSpd& VehicleSpd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleSpd_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void VehicleSpd::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.VehicleSpd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehicle_spd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_spd_rl_) -
        reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(wheel_spd_rl_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&wheel_direction_rl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_ax_valid_) -
        reinterpret_cast<char*>(&wheel_direction_rl_)) + sizeof(is_ax_valid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&wheel_spd_fl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lat_acc_) -
        reinterpret_cast<char*>(&wheel_spd_fl_)) + sizeof(lat_acc_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&long_acc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_ay_valid_) -
        reinterpret_cast<char*>(&long_acc_)) + sizeof(is_ay_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VehicleSpd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_vehicle_standstill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_vehicle_standstill(&has_bits);
          is_vehicle_standstill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_vehicle_spd_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_vehicle_spd_valid(&has_bits);
          is_vehicle_spd_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double vehicle_spd = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_vehicle_spd(&has_bits);
          vehicle_spd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_rr_valid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_wheel_spd_rr_valid(&has_bits);
          is_wheel_spd_rr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_rr(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_rr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_wheel_spd_rr(&has_bits);
          wheel_spd_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_rl_valid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_wheel_spd_rl_valid(&has_bits);
          is_wheel_spd_rl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_rl(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_rl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_wheel_spd_rl(&has_bits);
          wheel_spd_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_fr_valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_wheel_spd_fr_valid(&has_bits);
          is_wheel_spd_fr_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_fr(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_fr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_wheel_spd_fr(&has_bits);
          wheel_spd_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_wheel_spd_fl_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_wheel_spd_fl_valid(&has_bits);
          is_wheel_spd_fl_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(val))) {
            _internal_set_wheel_direction_fl(static_cast<::apollo::canbus::WheelSpeed_WheelSpeedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_spd_fl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_wheel_spd_fl(&has_bits);
          wheel_spd_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_yaw_rate_valid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_yaw_rate_valid(&has_bits);
          is_yaw_rate_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double yaw_rate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double yaw_rate_offset = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_yaw_rate_offset(&has_bits);
          yaw_rate_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_ax_valid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_ax_valid(&has_bits);
          is_ax_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ax = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_ax(&has_bits);
          ax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ax_offset = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_ax_offset(&has_bits);
          ax_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_ay_valid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_ay_valid(&has_bits);
          is_ay_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_ay(&has_bits);
          ay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ay_offset = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_ay_offset(&has_bits);
          ay_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lat_acc = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_lat_acc(&has_bits);
          lat_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double long_acc = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_long_acc(&has_bits);
          long_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vert_acc = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_vert_acc(&has_bits);
          vert_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double roll_rate = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_roll_rate(&has_bits);
          roll_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_est = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_acc_est(&has_bits);
          acc_est_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double timestamp_sec = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleSpd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.VehicleSpd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_vehicle_standstill = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_vehicle_standstill(), target);
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_vehicle_spd_valid(), target);
  }

  // optional double vehicle_spd = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_vehicle_spd(), target);
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_wheel_spd_rr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_wheel_spd_rl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_wheel_spd_fr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_wheel_spd_fl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_wheel_spd_fl(), target);
  }

  // optional bool is_yaw_rate_valid = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_yaw_rate_valid(), target);
  }

  // optional double yaw_rate = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_yaw_rate(), target);
  }

  // optional double yaw_rate_offset = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_yaw_rate_offset(), target);
  }

  // optional bool is_ax_valid = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_ax_valid(), target);
  }

  // optional double ax = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_ax(), target);
  }

  // optional double ax_offset = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_ax_offset(), target);
  }

  // optional bool is_ay_valid = 22;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_ay_valid(), target);
  }

  // optional double ay = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_ay(), target);
  }

  // optional double ay_offset = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_ay_offset(), target);
  }

  // optional double lat_acc = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_lat_acc(), target);
  }

  // optional double long_acc = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_long_acc(), target);
  }

  // optional double vert_acc = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_vert_acc(), target);
  }

  // optional double roll_rate = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_roll_rate(), target);
  }

  // optional double acc_est = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_acc_est(), target);
  }

  // optional double timestamp_sec = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_timestamp_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.VehicleSpd)
  return target;
}

size_t VehicleSpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.VehicleSpd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double vehicle_spd = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_vehicle_standstill = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_vehicle_spd_valid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rr_valid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rl_valid = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_rr());
    }

    // optional double wheel_spd_rr = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rl = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_rl());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_fr());
    }

    // optional double wheel_spd_fr = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wheel_direction_fl());
    }

    // optional bool is_wheel_spd_fr_valid = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fl_valid = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_yaw_rate_valid = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_ax_valid = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double wheel_spd_fl = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double yaw_rate = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double yaw_rate_offset = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double ax = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double ax_offset = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double ay = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double ay_offset = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double lat_acc = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional double long_acc = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double vert_acc = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double roll_rate = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double acc_est = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double timestamp_sec = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional bool is_ay_valid = 22;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleSpd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSpd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleSpd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.VehicleSpd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.VehicleSpd)
    MergeFrom(*source);
  }
}

void VehicleSpd::MergeFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_spd_ = from.vehicle_spd_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_vehicle_standstill_ = from.is_vehicle_standstill_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_vehicle_spd_valid_ = from.is_vehicle_spd_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_wheel_spd_rr_valid_ = from.is_wheel_spd_rr_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_wheel_spd_rl_valid_ = from.is_wheel_spd_rl_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      wheel_direction_rr_ = from.wheel_direction_rr_;
    }
    if (cached_has_bits & 0x00000040u) {
      wheel_spd_rr_ = from.wheel_spd_rr_;
    }
    if (cached_has_bits & 0x00000080u) {
      wheel_spd_rl_ = from.wheel_spd_rl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      wheel_direction_rl_ = from.wheel_direction_rl_;
    }
    if (cached_has_bits & 0x00000200u) {
      wheel_direction_fr_ = from.wheel_direction_fr_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheel_spd_fr_ = from.wheel_spd_fr_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheel_direction_fl_ = from.wheel_direction_fl_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_wheel_spd_fr_valid_ = from.is_wheel_spd_fr_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_wheel_spd_fl_valid_ = from.is_wheel_spd_fl_valid_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_yaw_rate_valid_ = from.is_yaw_rate_valid_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_ax_valid_ = from.is_ax_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      wheel_spd_fl_ = from.wheel_spd_fl_;
    }
    if (cached_has_bits & 0x00020000u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00040000u) {
      yaw_rate_offset_ = from.yaw_rate_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      ax_ = from.ax_;
    }
    if (cached_has_bits & 0x00100000u) {
      ax_offset_ = from.ax_offset_;
    }
    if (cached_has_bits & 0x00200000u) {
      ay_ = from.ay_;
    }
    if (cached_has_bits & 0x00400000u) {
      ay_offset_ = from.ay_offset_;
    }
    if (cached_has_bits & 0x00800000u) {
      lat_acc_ = from.lat_acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      long_acc_ = from.long_acc_;
    }
    if (cached_has_bits & 0x02000000u) {
      vert_acc_ = from.vert_acc_;
    }
    if (cached_has_bits & 0x04000000u) {
      roll_rate_ = from.roll_rate_;
    }
    if (cached_has_bits & 0x08000000u) {
      acc_est_ = from.acc_est_;
    }
    if (cached_has_bits & 0x10000000u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_ay_valid_ = from.is_ay_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleSpd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSpd::CopyFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSpd::IsInitialized() const {
  return true;
}

void VehicleSpd::InternalSwap(VehicleSpd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_spd_, other->vehicle_spd_);
  swap(is_vehicle_standstill_, other->is_vehicle_standstill_);
  swap(is_vehicle_spd_valid_, other->is_vehicle_spd_valid_);
  swap(is_wheel_spd_rr_valid_, other->is_wheel_spd_rr_valid_);
  swap(is_wheel_spd_rl_valid_, other->is_wheel_spd_rl_valid_);
  swap(wheel_direction_rr_, other->wheel_direction_rr_);
  swap(wheel_spd_rr_, other->wheel_spd_rr_);
  swap(wheel_spd_rl_, other->wheel_spd_rl_);
  swap(wheel_direction_rl_, other->wheel_direction_rl_);
  swap(wheel_direction_fr_, other->wheel_direction_fr_);
  swap(wheel_spd_fr_, other->wheel_spd_fr_);
  swap(wheel_direction_fl_, other->wheel_direction_fl_);
  swap(is_wheel_spd_fr_valid_, other->is_wheel_spd_fr_valid_);
  swap(is_wheel_spd_fl_valid_, other->is_wheel_spd_fl_valid_);
  swap(is_yaw_rate_valid_, other->is_yaw_rate_valid_);
  swap(is_ax_valid_, other->is_ax_valid_);
  swap(wheel_spd_fl_, other->wheel_spd_fl_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(yaw_rate_offset_, other->yaw_rate_offset_);
  swap(ax_, other->ax_);
  swap(ax_offset_, other->ax_offset_);
  swap(ay_, other->ay_);
  swap(ay_offset_, other->ay_offset_);
  swap(lat_acc_, other->lat_acc_);
  swap(long_acc_, other->long_acc_);
  swap(vert_acc_, other->vert_acc_);
  swap(roll_rate_, other->roll_rate_);
  swap(acc_est_, other->acc_est_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(is_ay_valid_, other->is_ay_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleSpd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Deceleration::InitAsDefaultInstance() {
}
class Deceleration::_Internal {
 public:
  using HasBits = decltype(std::declval<Deceleration>()._has_bits_);
  static void set_has_is_deceleration_available(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_deceleration_active(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_evb_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_evb_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_pressure(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brake_pressure_spd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Deceleration::Deceleration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Deceleration)
}
Deceleration::Deceleration(const Deceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deceleration_, &from.deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_deceleration_active_) -
    reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Deceleration)
}

void Deceleration::SharedCtor() {
  ::memset(&deceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_deceleration_active_) -
      reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
}

Deceleration::~Deceleration() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Deceleration)
  SharedDtor();
}

void Deceleration::SharedDtor() {
}

void Deceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deceleration& Deceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deceleration_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Deceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Deceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&deceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_deceleration_active_) -
        reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Deceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_deceleration_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_deceleration_available(&has_bits);
          is_deceleration_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_deceleration_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_deceleration_active(&has_bits);
          is_deceleration_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double deceleration = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_deceleration(&has_bits);
          deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double is_evb_fail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_is_evb_fail(&has_bits);
          is_evb_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double evb_pressure = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_evb_pressure(&has_bits);
          evb_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_pressure = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_brake_pressure(&has_bits);
          brake_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_pressure_spd = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_brake_pressure_spd(&has_bits);
          brake_pressure_spd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Deceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_deceleration_available = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_deceleration_available(), target);
  }

  // optional bool is_deceleration_active = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_deceleration_active(), target);
  }

  // optional double deceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_deceleration(), target);
  }

  // optional double is_evb_fail = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_is_evb_fail(), target);
  }

  // optional double evb_pressure = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_evb_pressure(), target);
  }

  // optional double brake_pressure = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_brake_pressure(), target);
  }

  // optional double brake_pressure_spd = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_brake_pressure_spd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Deceleration)
  return target;
}

size_t Deceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Deceleration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double deceleration = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double is_evb_fail = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double evb_pressure = 5 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure = 6 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure_spd = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool is_deceleration_available = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_deceleration_active = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Deceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Deceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Deceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Deceleration)
    MergeFrom(*source);
  }
}

void Deceleration::MergeFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      deceleration_ = from.deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_evb_fail_ = from.is_evb_fail_;
    }
    if (cached_has_bits & 0x00000004u) {
      evb_pressure_ = from.evb_pressure_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_pressure_ = from.brake_pressure_;
    }
    if (cached_has_bits & 0x00000010u) {
      brake_pressure_spd_ = from.brake_pressure_spd_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_deceleration_available_ = from.is_deceleration_available_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_deceleration_active_ = from.is_deceleration_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Deceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deceleration::CopyFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deceleration::IsInitialized() const {
  return true;
}

void Deceleration::InternalSwap(Deceleration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(deceleration_, other->deceleration_);
  swap(is_evb_fail_, other->is_evb_fail_);
  swap(evb_pressure_, other->evb_pressure_);
  swap(brake_pressure_, other->brake_pressure_);
  swap(brake_pressure_spd_, other->brake_pressure_spd_);
  swap(is_deceleration_available_, other->is_deceleration_available_);
  swap(is_deceleration_active_, other->is_deceleration_active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Deceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake::InitAsDefaultInstance() {
}
class Brake::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake>()._has_bits_);
  static void set_has_is_brake_pedal_pressed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_brake_force_exist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_brake_over_heat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_hand_brake_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brake_pedal_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_brake_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_brake_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_brake_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_boo_input(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_boo_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_boo_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_watchdog_applying_brakes(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_watchdog_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_brake_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_driver_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_watchdog_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_channel_1_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_channel_2_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_boo_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_connector_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_brake_torque_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_hsa_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_brake_torque_act(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_hsa_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_wheel_torque_act(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_build_number(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

Brake::Brake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake)
}
Brake::Brake(const Brake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_pedal_position_, &from.brake_pedal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake)
}

void Brake::SharedCtor() {
  ::memset(&brake_pedal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(build_number_));
}

Brake::~Brake() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake)
  SharedDtor();
}

void Brake::SharedDtor() {
}

void Brake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake& Brake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Brake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&brake_pedal_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boo_cmd_) -
        reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(boo_cmd_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&boo_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driver_override_) -
        reinterpret_cast<char*>(&boo_output_)) + sizeof(driver_override_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&driver_activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_torque_act_) -
        reinterpret_cast<char*>(&driver_activity_)) + sizeof(brake_torque_act_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&hsa_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_number_) -
        reinterpret_cast<char*>(&hsa_status_)) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_brake_pedal_pressed = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_brake_pedal_pressed(&has_bits);
          is_brake_pedal_pressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_brake_force_exist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_brake_force_exist(&has_bits);
          is_brake_force_exist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_brake_over_heat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_brake_over_heat(&has_bits);
          is_brake_over_heat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hand_brake_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_hand_brake_on(&has_bits);
          is_hand_brake_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double brake_pedal_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_brake_pedal_position(&has_bits);
          brake_pedal_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_brake_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_brake_valid(&has_bits);
          is_brake_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double brake_input = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_brake_input(&has_bits);
          brake_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_cmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_brake_cmd(&has_bits);
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_output = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_brake_output(&has_bits);
          brake_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool boo_input = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_boo_input(&has_bits);
          boo_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boo_cmd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_boo_cmd(&has_bits);
          boo_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boo_output = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_boo_output(&has_bits);
          boo_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool watchdog_applying_brakes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_watchdog_applying_brakes(&has_bits);
          watchdog_applying_brakes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 watchdog_source = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_watchdog_source(&has_bits);
          watchdog_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool brake_enabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_brake_enabled(&has_bits);
          brake_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_override = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_driver_override(&has_bits);
          driver_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_activity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_driver_activity(&has_bits);
          driver_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool watchdog_fault = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_watchdog_fault(&has_bits);
          watchdog_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_1_fault = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_channel_1_fault(&has_bits);
          channel_1_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_2_fault = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_channel_2_fault(&has_bits);
          channel_2_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boo_fault = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_boo_fault(&has_bits);
          boo_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool connector_fault = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_connector_fault(&has_bits);
          connector_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double brake_torque_req = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_brake_torque_req(&has_bits);
          brake_torque_req_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_HSAStatusType_IsValid(val))) {
            _internal_set_hsa_status(static_cast<::apollo::canbus::Brake_HSAStatusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double brake_torque_act = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_brake_torque_act(&has_bits);
          brake_torque_act_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_HSAModeType_IsValid(val))) {
            _internal_set_hsa_mode(static_cast<::apollo::canbus::Brake_HSAModeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double wheel_torque_act = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_wheel_torque_act(&has_bits);
          wheel_torque_act_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 major_version = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_major_version(&has_bits);
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minor_version = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_minor_version(&has_bits);
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 build_number = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_build_number(&has_bits);
          build_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_brake_pedal_pressed = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_brake_pedal_pressed(), target);
  }

  // optional bool is_brake_force_exist = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_brake_force_exist(), target);
  }

  // optional bool is_brake_over_heat = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_brake_over_heat(), target);
  }

  // optional bool is_hand_brake_on = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_hand_brake_on(), target);
  }

  // optional double brake_pedal_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_brake_pedal_position(), target);
  }

  // optional bool is_brake_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_brake_valid(), target);
  }

  // optional double brake_input = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_brake_input(), target);
  }

  // optional double brake_cmd = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_brake_cmd(), target);
  }

  // optional double brake_output = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_brake_output(), target);
  }

  // optional bool boo_input = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_boo_input(), target);
  }

  // optional bool boo_cmd = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_boo_cmd(), target);
  }

  // optional bool boo_output = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_boo_output(), target);
  }

  // optional bool watchdog_applying_brakes = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_watchdog_applying_brakes(), target);
  }

  // optional int32 watchdog_source = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_watchdog_source(), target);
  }

  // optional bool brake_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_brake_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_channel_2_fault(), target);
  }

  // optional bool boo_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_boo_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_connector_fault(), target);
  }

  // optional double brake_torque_req = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_brake_torque_req(), target);
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_hsa_status(), target);
  }

  // optional double brake_torque_act = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_brake_torque_act(), target);
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_hsa_mode(), target);
  }

  // optional double wheel_torque_act = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_wheel_torque_act(), target);
  }

  // optional int32 major_version = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_major_version(), target);
  }

  // optional int32 minor_version = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_minor_version(), target);
  }

  // optional int32 build_number = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_build_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake)
  return target;
}

size_t Brake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double brake_pedal_position = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_brake_pedal_pressed = 1 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_force_exist = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_over_heat = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_hand_brake_on = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_valid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool boo_input = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool boo_cmd = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool boo_output = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional double brake_input = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double brake_cmd = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double brake_output = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 watchdog_source = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_watchdog_source());
    }

    // optional bool watchdog_applying_brakes = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool brake_enabled = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool driver_activity = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool watchdog_fault = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool channel_1_fault = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool channel_2_fault = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool boo_fault = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool connector_fault = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional double brake_torque_req = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double brake_torque_act = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hsa_status());
    }

    // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hsa_mode());
    }

    // optional double wheel_torque_act = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional int32 major_version = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_major_version());
    }

    // optional int32 minor_version = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minor_version());
    }

    // optional int32 build_number = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_build_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake)
    MergeFrom(*source);
  }
}

void Brake::MergeFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      brake_pedal_position_ = from.brake_pedal_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_brake_pedal_pressed_ = from.is_brake_pedal_pressed_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_brake_force_exist_ = from.is_brake_force_exist_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_brake_over_heat_ = from.is_brake_over_heat_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_hand_brake_on_ = from.is_hand_brake_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_brake_valid_ = from.is_brake_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      boo_input_ = from.boo_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      boo_cmd_ = from.boo_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      boo_output_ = from.boo_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      brake_input_ = from.brake_input_;
    }
    if (cached_has_bits & 0x00000400u) {
      brake_cmd_ = from.brake_cmd_;
    }
    if (cached_has_bits & 0x00000800u) {
      brake_output_ = from.brake_output_;
    }
    if (cached_has_bits & 0x00001000u) {
      watchdog_source_ = from.watchdog_source_;
    }
    if (cached_has_bits & 0x00002000u) {
      watchdog_applying_brakes_ = from.watchdog_applying_brakes_;
    }
    if (cached_has_bits & 0x00004000u) {
      brake_enabled_ = from.brake_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      driver_override_ = from.driver_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00020000u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00040000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00100000u) {
      boo_fault_ = from.boo_fault_;
    }
    if (cached_has_bits & 0x00200000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00400000u) {
      brake_torque_req_ = from.brake_torque_req_;
    }
    if (cached_has_bits & 0x00800000u) {
      brake_torque_act_ = from.brake_torque_act_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      hsa_status_ = from.hsa_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      hsa_mode_ = from.hsa_mode_;
    }
    if (cached_has_bits & 0x04000000u) {
      wheel_torque_act_ = from.wheel_torque_act_;
    }
    if (cached_has_bits & 0x08000000u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x10000000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x20000000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake::CopyFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake::IsInitialized() const {
  return true;
}

void Brake::InternalSwap(Brake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_pedal_position_, other->brake_pedal_position_);
  swap(is_brake_pedal_pressed_, other->is_brake_pedal_pressed_);
  swap(is_brake_force_exist_, other->is_brake_force_exist_);
  swap(is_brake_over_heat_, other->is_brake_over_heat_);
  swap(is_hand_brake_on_, other->is_hand_brake_on_);
  swap(is_brake_valid_, other->is_brake_valid_);
  swap(boo_input_, other->boo_input_);
  swap(boo_cmd_, other->boo_cmd_);
  swap(boo_output_, other->boo_output_);
  swap(brake_input_, other->brake_input_);
  swap(brake_cmd_, other->brake_cmd_);
  swap(brake_output_, other->brake_output_);
  swap(watchdog_source_, other->watchdog_source_);
  swap(watchdog_applying_brakes_, other->watchdog_applying_brakes_);
  swap(brake_enabled_, other->brake_enabled_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(boo_fault_, other->boo_fault_);
  swap(connector_fault_, other->connector_fault_);
  swap(brake_torque_req_, other->brake_torque_req_);
  swap(brake_torque_act_, other->brake_torque_act_);
  swap(hsa_status_, other->hsa_status_);
  swap(hsa_mode_, other->hsa_mode_);
  swap(wheel_torque_act_, other->wheel_torque_act_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Epb::InitAsDefaultInstance() {
}
class Epb::_Internal {
 public:
  using HasBits = decltype(std::declval<Epb>()._has_bits_);
  static void set_has_is_epb_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_epb_released(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_epb_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_brake_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Epb::Epb()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Epb)
}
Epb::Epb(const Epb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_epb_error_, &from.is_epb_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&parking_brake_status_) -
    reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Epb)
}

void Epb::SharedCtor() {
  ::memset(&is_epb_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_brake_status_) -
      reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
}

Epb::~Epb() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Epb)
  SharedDtor();
}

void Epb::SharedDtor() {
}

void Epb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Epb& Epb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Epb_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Epb::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Epb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&is_epb_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parking_brake_status_) -
        reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Epb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_epb_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_epb_error(&has_bits);
          is_epb_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_epb_released = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_epb_released(&has_bits);
          is_epb_released_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 epb_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_epb_status(&has_bits);
          epb_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Epb_PBrakeType_IsValid(val))) {
            _internal_set_parking_brake_status(static_cast<::apollo::canbus::Epb_PBrakeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Epb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Epb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_epb_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_epb_error(), target);
  }

  // optional bool is_epb_released = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_epb_released(), target);
  }

  // optional int32 epb_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_epb_status(), target);
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_parking_brake_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Epb)
  return target;
}

size_t Epb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Epb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool is_epb_error = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_released = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 epb_status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_epb_status());
    }

    // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_brake_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Epb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  const Epb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Epb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Epb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Epb)
    MergeFrom(*source);
  }
}

void Epb::MergeFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      is_epb_error_ = from.is_epb_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_epb_released_ = from.is_epb_released_;
    }
    if (cached_has_bits & 0x00000004u) {
      epb_status_ = from.epb_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      parking_brake_status_ = from.parking_brake_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Epb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Epb::CopyFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epb::IsInitialized() const {
  return true;
}

void Epb::InternalSwap(Epb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_epb_error_, other->is_epb_error_);
  swap(is_epb_released_, other->is_epb_released_);
  swap(epb_status_, other->epb_status_);
  swap(parking_brake_status_, other->parking_brake_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Epb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gas::InitAsDefaultInstance() {
}
class Gas::_Internal {
 public:
  using HasBits = decltype(std::declval<Gas>()._has_bits_);
  static void set_has_is_gas_pedal_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_gas_pedal_pressed_more(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gas_pedal_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_gas_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_throttle_input(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_throttle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_throttle_output(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_watchdog_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_throttle_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_driver_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_watchdog_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_channel_1_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_channel_2_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_connector_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_accelerator_pedal(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_accelerator_pedal_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_build_number(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

Gas::Gas()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gas)
}
Gas::Gas(const Gas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gas_pedal_position_, &from.gas_pedal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gas)
}

void Gas::SharedCtor() {
  ::memset(&gas_pedal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(build_number_));
}

Gas::~Gas() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gas)
  SharedDtor();
}

void Gas::SharedDtor() {
}

void Gas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gas& Gas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gas_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Gas::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gas_pedal_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&throttle_cmd_) -
        reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(throttle_cmd_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&throttle_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accelerator_pedal_) -
        reinterpret_cast<char*>(&throttle_output_)) + sizeof(accelerator_pedal_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&accelerator_pedal_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_number_) -
        reinterpret_cast<char*>(&accelerator_pedal_rate_)) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Gas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_gas_pedal_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_gas_pedal_error(&has_bits);
          is_gas_pedal_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_gas_pedal_pressed_more = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_gas_pedal_pressed_more(&has_bits);
          is_gas_pedal_pressed_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gas_pedal_position = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_gas_pedal_position(&has_bits);
          gas_pedal_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_gas_valid = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_gas_valid(&has_bits);
          is_gas_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double throttle_input = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_throttle_input(&has_bits);
          throttle_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_throttle_cmd(&has_bits);
          throttle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_throttle_output(&has_bits);
          throttle_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 watchdog_source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_watchdog_source(&has_bits);
          watchdog_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool throttle_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_throttle_enabled(&has_bits);
          throttle_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_override = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_driver_override(&has_bits);
          driver_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool driver_activity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_driver_activity(&has_bits);
          driver_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool watchdog_fault = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_watchdog_fault(&has_bits);
          watchdog_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_1_fault = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_channel_1_fault(&has_bits);
          channel_1_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool channel_2_fault = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_channel_2_fault(&has_bits);
          channel_2_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool connector_fault = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_connector_fault(&has_bits);
          connector_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double accelerator_pedal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_accelerator_pedal(&has_bits);
          accelerator_pedal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double accelerator_pedal_rate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_accelerator_pedal_rate(&has_bits);
          accelerator_pedal_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 major_version = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_major_version(&has_bits);
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minor_version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_minor_version(&has_bits);
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 build_number = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_build_number(&has_bits);
          build_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_gas_pedal_error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_gas_pedal_error(), target);
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_gas_pedal_pressed_more(), target);
  }

  // optional double gas_pedal_position = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_gas_pedal_position(), target);
  }

  // optional bool is_gas_valid = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_gas_valid(), target);
  }

  // optional double throttle_input = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_throttle_input(), target);
  }

  // optional double throttle_cmd = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_throttle_cmd(), target);
  }

  // optional double throttle_output = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_throttle_output(), target);
  }

  // optional int32 watchdog_source = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_watchdog_source(), target);
  }

  // optional bool throttle_enabled = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_throttle_enabled(), target);
  }

  // optional bool driver_override = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_driver_override(), target);
  }

  // optional bool driver_activity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_driver_activity(), target);
  }

  // optional bool watchdog_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_channel_2_fault(), target);
  }

  // optional bool connector_fault = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_connector_fault(), target);
  }

  // optional double accelerator_pedal = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_accelerator_pedal(), target);
  }

  // optional double accelerator_pedal_rate = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_accelerator_pedal_rate(), target);
  }

  // optional int32 major_version = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_major_version(), target);
  }

  // optional int32 minor_version = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_minor_version(), target);
  }

  // optional int32 build_number = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_build_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gas)
  return target;
}

size_t Gas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double gas_pedal_position = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_gas_pedal_error = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_gas_pedal_pressed_more = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_gas_valid = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool throttle_enabled = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 watchdog_source = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_watchdog_source());
    }

    // optional double throttle_input = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double throttle_output = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional bool driver_override = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool driver_activity = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool watchdog_fault = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool channel_1_fault = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool channel_2_fault = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool connector_fault = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional double accelerator_pedal = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double accelerator_pedal_rate = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional int32 major_version = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_major_version());
    }

    // optional int32 minor_version = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minor_version());
    }

    // optional int32 build_number = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_build_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  const Gas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gas)
    MergeFrom(*source);
  }
}

void Gas::MergeFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gas_pedal_position_ = from.gas_pedal_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_gas_pedal_error_ = from.is_gas_pedal_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_gas_pedal_pressed_more_ = from.is_gas_pedal_pressed_more_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_gas_valid_ = from.is_gas_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_enabled_ = from.throttle_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      watchdog_source_ = from.watchdog_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      throttle_input_ = from.throttle_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      throttle_cmd_ = from.throttle_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      throttle_output_ = from.throttle_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      driver_override_ = from.driver_override_;
    }
    if (cached_has_bits & 0x00000400u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00000800u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00002000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00004000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00008000u) {
      accelerator_pedal_ = from.accelerator_pedal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      accelerator_pedal_rate_ = from.accelerator_pedal_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x00040000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gas::CopyFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gas::IsInitialized() const {
  return true;
}

void Gas::InternalSwap(Gas* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gas_pedal_position_, other->gas_pedal_position_);
  swap(is_gas_pedal_error_, other->is_gas_pedal_error_);
  swap(is_gas_pedal_pressed_more_, other->is_gas_pedal_pressed_more_);
  swap(is_gas_valid_, other->is_gas_valid_);
  swap(throttle_enabled_, other->throttle_enabled_);
  swap(watchdog_source_, other->watchdog_source_);
  swap(throttle_input_, other->throttle_input_);
  swap(throttle_cmd_, other->throttle_cmd_);
  swap(throttle_output_, other->throttle_output_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(connector_fault_, other->connector_fault_);
  swap(accelerator_pedal_, other->accelerator_pedal_);
  swap(accelerator_pedal_rate_, other->accelerator_pedal_rate_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esp::InitAsDefaultInstance() {
}
class Esp::_Internal {
 public:
  using HasBits = decltype(std::declval<Esp>()._has_bits_);
  static void set_has_is_esp_acc_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_esp_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_esp_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_abs_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_abs_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_tcsvdc_fail(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_abs_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_stab_active(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_stab_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_trac_active(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_trac_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Esp::Esp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Esp)
}
Esp::Esp(const Esp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_esp_acc_error_, &from.is_esp_acc_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_trac_enabled_) -
    reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_trac_enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Esp)
}

void Esp::SharedCtor() {
  ::memset(&is_esp_acc_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trac_enabled_) -
      reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_trac_enabled_));
}

Esp::~Esp() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Esp)
  SharedDtor();
}

void Esp::SharedDtor() {
}

void Esp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esp& Esp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esp_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Esp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Esp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&is_esp_acc_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_stab_active_) -
        reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_stab_active_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&is_stab_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_trac_enabled_) -
        reinterpret_cast<char*>(&is_stab_enabled_)) + sizeof(is_trac_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_esp_acc_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_esp_acc_error(&has_bits);
          is_esp_acc_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_esp_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_esp_on(&has_bits);
          is_esp_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_esp_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_esp_active(&has_bits);
          is_esp_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_abs_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_abs_error(&has_bits);
          is_abs_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_abs_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_abs_active(&has_bits);
          is_abs_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_tcsvdc_fail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_tcsvdc_fail(&has_bits);
          is_tcsvdc_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_abs_enabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_abs_enabled(&has_bits);
          is_abs_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stab_active = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_stab_active(&has_bits);
          is_stab_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stab_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_stab_enabled(&has_bits);
          is_stab_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_trac_active = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_trac_active(&has_bits);
          is_trac_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_trac_enabled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_trac_enabled(&has_bits);
          is_trac_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Esp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_esp_acc_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_esp_acc_error(), target);
  }

  // optional bool is_esp_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_esp_on(), target);
  }

  // optional bool is_esp_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_esp_active(), target);
  }

  // optional bool is_abs_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_abs_error(), target);
  }

  // optional bool is_abs_active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_abs_active(), target);
  }

  // optional bool is_tcsvdc_fail = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_tcsvdc_fail(), target);
  }

  // optional bool is_abs_enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_abs_enabled(), target);
  }

  // optional bool is_stab_active = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_stab_active(), target);
  }

  // optional bool is_stab_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_stab_enabled(), target);
  }

  // optional bool is_trac_active = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_trac_active(), target);
  }

  // optional bool is_trac_enabled = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_trac_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Esp)
  return target;
}

size_t Esp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Esp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool is_esp_acc_error = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_active = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_tcsvdc_fail = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_enabled = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_stab_active = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool is_stab_enabled = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_trac_active = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_trac_enabled = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Esp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Esp)
    MergeFrom(*source);
  }
}

void Esp::MergeFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      is_esp_acc_error_ = from.is_esp_acc_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_esp_on_ = from.is_esp_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_esp_active_ = from.is_esp_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_abs_error_ = from.is_abs_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_abs_active_ = from.is_abs_active_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_tcsvdc_fail_ = from.is_tcsvdc_fail_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_abs_enabled_ = from.is_abs_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_stab_active_ = from.is_stab_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      is_stab_enabled_ = from.is_stab_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_trac_active_ = from.is_trac_active_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_trac_enabled_ = from.is_trac_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp::CopyFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp::IsInitialized() const {
  return true;
}

void Esp::InternalSwap(Esp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_esp_acc_error_, other->is_esp_acc_error_);
  swap(is_esp_on_, other->is_esp_on_);
  swap(is_esp_active_, other->is_esp_active_);
  swap(is_abs_error_, other->is_abs_error_);
  swap(is_abs_active_, other->is_abs_active_);
  swap(is_tcsvdc_fail_, other->is_tcsvdc_fail_);
  swap(is_abs_enabled_, other->is_abs_enabled_);
  swap(is_stab_active_, other->is_stab_active_);
  swap(is_stab_enabled_, other->is_stab_enabled_);
  swap(is_trac_active_, other->is_trac_active_);
  swap(is_trac_enabled_, other->is_trac_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ems::InitAsDefaultInstance() {
}
class Ems::_Internal {
 public:
  using HasBits = decltype(std::declval<Ems>()._has_bits_);
  static void set_has_is_engine_acc_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_engine_acc_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_engine_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_engine_torq_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_engine_torq_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_base_engine_torq_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_engine_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_engine_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_engine_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_over_engine_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_engine_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Ems::Ems()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ems)
}
Ems::Ems(const Ems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_engine_torq_percent_, &from.max_engine_torq_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_rpm_) -
    reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(engine_rpm_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ems)
}

void Ems::SharedCtor() {
  ::memset(&max_engine_torq_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_rpm_) -
      reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(engine_rpm_));
}

Ems::~Ems() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ems)
  SharedDtor();
}

void Ems::SharedDtor() {
}

void Ems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ems& Ems::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ems_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Ems::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&max_engine_torq_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_engine_torq_constant_) -
        reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(base_engine_torq_constant_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&engine_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_rpm_) -
        reinterpret_cast<char*>(&engine_torque_)) + sizeof(engine_rpm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_engine_acc_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_engine_acc_available(&has_bits);
          is_engine_acc_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_engine_acc_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_engine_acc_error(&has_bits);
          is_engine_acc_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ems.Type engine_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Ems_Type_IsValid(val))) {
            _internal_set_engine_state(static_cast<::apollo::canbus::Ems_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double max_engine_torq_percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_engine_torq_percent(&has_bits);
          max_engine_torq_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_engine_torq_percent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_min_engine_torq_percent(&has_bits);
          min_engine_torq_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 base_engine_torq_constant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_base_engine_torq_constant(&has_bits);
          base_engine_torq_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_engine_speed_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_engine_speed_error(&has_bits);
          is_engine_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double engine_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_engine_speed(&has_bits);
          engine_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 engine_torque = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_engine_torque(&has_bits);
          engine_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_over_engine_torque = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_over_engine_torque(&has_bits);
          is_over_engine_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double engine_rpm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_engine_rpm(&has_bits);
          engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_engine_acc_available = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_engine_acc_available(), target);
  }

  // optional bool is_engine_acc_error = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_engine_acc_error(), target);
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_engine_state(), target);
  }

  // optional double max_engine_torq_percent = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_engine_torq_percent(), target);
  }

  // optional double min_engine_torq_percent = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_min_engine_torq_percent(), target);
  }

  // optional int32 base_engine_torq_constant = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_base_engine_torq_constant(), target);
  }

  // optional bool is_engine_speed_error = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_engine_speed_error(), target);
  }

  // optional double engine_speed = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_engine_speed(), target);
  }

  // optional int32 engine_torque = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_engine_torque(), target);
  }

  // optional bool is_over_engine_torque = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_over_engine_torque(), target);
  }

  // optional double engine_rpm = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_engine_rpm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ems)
  return target;
}

size_t Ems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double max_engine_torq_percent = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Ems.Type engine_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine_state());
    }

    // optional bool is_engine_acc_available = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_engine_acc_error = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_engine_speed_error = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_over_engine_torque = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional double min_engine_torq_percent = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 base_engine_torq_constant = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_base_engine_torq_constant());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 engine_torque = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_engine_torque());
    }

    // optional double engine_speed = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double engine_rpm = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  const Ems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ems)
    MergeFrom(*source);
  }
}

void Ems::MergeFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_engine_torq_percent_ = from.max_engine_torq_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_state_ = from.engine_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_engine_acc_available_ = from.is_engine_acc_available_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_engine_acc_error_ = from.is_engine_acc_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_engine_speed_error_ = from.is_engine_speed_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_over_engine_torque_ = from.is_over_engine_torque_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_engine_torq_percent_ = from.min_engine_torq_percent_;
    }
    if (cached_has_bits & 0x00000080u) {
      base_engine_torq_constant_ = from.base_engine_torq_constant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      engine_torque_ = from.engine_torque_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_speed_ = from.engine_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      engine_rpm_ = from.engine_rpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ems::CopyFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ems::IsInitialized() const {
  return true;
}

void Ems::InternalSwap(Ems* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_engine_torq_percent_, other->max_engine_torq_percent_);
  swap(engine_state_, other->engine_state_);
  swap(is_engine_acc_available_, other->is_engine_acc_available_);
  swap(is_engine_acc_error_, other->is_engine_acc_error_);
  swap(is_engine_speed_error_, other->is_engine_speed_error_);
  swap(is_over_engine_torque_, other->is_over_engine_torque_);
  swap(min_engine_torq_percent_, other->min_engine_torq_percent_);
  swap(base_engine_torq_constant_, other->base_engine_torq_constant_);
  swap(engine_torque_, other->engine_torque_);
  swap(engine_speed_, other->engine_speed_);
  swap(engine_rpm_, other->engine_rpm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gear::InitAsDefaultInstance() {
}
class Gear::_Internal {
 public:
  using HasBits = decltype(std::declval<Gear>()._has_bits_);
  static void set_has_is_shift_position_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driver_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gear_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_canbus_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Gear::Gear()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gear)
}
Gear::Gear(const Gear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gear_state_, &from.gear_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear)
}

void Gear::SharedCtor() {
  ::memset(&gear_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_cmd_) -
      reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
}

Gear::~Gear() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear)
  SharedDtor();
}

void Gear::SharedDtor() {
}

void Gear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gear& Gear::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gear_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Gear::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&gear_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_cmd_) -
        reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Gear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_shift_position_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_shift_position_valid(&has_bits);
          is_shift_position_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_state(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool driver_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_driver_override(&has_bits);
          driver_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_cmd(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool canbus_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_canbus_fault(&has_bits);
          canbus_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gear::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_shift_position_valid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_shift_position_valid(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gear_state(), target);
  }

  // optional bool driver_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_driver_override(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_gear_cmd(), target);
  }

  // optional bool canbus_fault = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_canbus_fault(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear)
  return target;
}

size_t Gear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_state());
    }

    // optional bool is_shift_position_valid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool canbus_fault = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gear)
    MergeFrom(*source);
  }
}

void Gear::MergeFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      gear_state_ = from.gear_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_shift_position_valid_ = from.is_shift_position_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      driver_override_ = from.driver_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      canbus_fault_ = from.canbus_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      gear_cmd_ = from.gear_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear::CopyFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear::IsInitialized() const {
  return true;
}

void Gear::InternalSwap(Gear* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gear_state_, other->gear_state_);
  swap(is_shift_position_valid_, other->is_shift_position_valid_);
  swap(driver_override_, other->driver_override_);
  swap(canbus_fault_, other->canbus_fault_);
  swap(gear_cmd_, other->gear_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Safety::InitAsDefaultInstance() {
}
class Safety::_Internal {
 public:
  using HasBits = decltype(std::declval<Safety>()._has_bits_);
  static void set_has_is_driver_car_door_close(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_driver_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_emergency_button(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_motor_invertor_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_system_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_power_battery_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_motor_invertor_over_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_small_battery_charge_discharge_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_passenger_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_rearleft_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_rearright_door_open(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_hood_open(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_trunk_open(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_passenger_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_passenger_airbag_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_passenger_buckled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_front_left_tire_press(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_front_right_tire_press(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_rear_left_tire_press(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_rear_right_tire_press(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_car_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

Safety::Safety()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Safety)
}
Safety::Safety(const Safety& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&emergency_button_, &from.emergency_button_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_driving_mode_) -
    reinterpret_cast<char*>(&emergency_button_)) + sizeof(car_driving_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Safety)
}

void Safety::SharedCtor() {
  ::memset(&emergency_button_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_driving_mode_) -
      reinterpret_cast<char*>(&emergency_button_)) + sizeof(car_driving_mode_));
}

Safety::~Safety() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Safety)
  SharedDtor();
}

void Safety::SharedDtor() {
}

void Safety::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Safety& Safety::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Safety_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Safety::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Safety)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&emergency_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_motor_invertor_over_temperature_) -
        reinterpret_cast<char*>(&emergency_button_)) + sizeof(is_motor_invertor_over_temperature_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&is_small_battery_charge_discharge_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_passenger_detected_) -
        reinterpret_cast<char*>(&is_small_battery_charge_discharge_fault_)) + sizeof(is_passenger_detected_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&is_passenger_airbag_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&car_driving_mode_) -
        reinterpret_cast<char*>(&is_passenger_airbag_enabled_)) + sizeof(car_driving_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Safety::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_driver_car_door_close = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_driver_car_door_close(&has_bits);
          is_driver_car_door_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_driver_buckled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_driver_buckled(&has_bits);
          is_driver_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 emergency_button = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_emergency_button(&has_bits);
          emergency_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_error = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_has_error(&has_bits);
          has_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_motor_invertor_fault = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_motor_invertor_fault(&has_bits);
          is_motor_invertor_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_system_fault = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_system_fault(&has_bits);
          is_system_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_power_battery_fault = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_power_battery_fault(&has_bits);
          is_power_battery_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_motor_invertor_over_temperature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_motor_invertor_over_temperature(&has_bits);
          is_motor_invertor_over_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_small_battery_charge_discharge_fault = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_small_battery_charge_discharge_fault(&has_bits);
          is_small_battery_charge_discharge_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 driving_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_driving_mode(&has_bits);
          driving_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_passenger_door_open = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_passenger_door_open(&has_bits);
          is_passenger_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_rearleft_door_open = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_rearleft_door_open(&has_bits);
          is_rearleft_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_rearright_door_open = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_rearright_door_open(&has_bits);
          is_rearright_door_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hood_open = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_hood_open(&has_bits);
          is_hood_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_trunk_open = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_trunk_open(&has_bits);
          is_trunk_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_passenger_detected = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_passenger_detected(&has_bits);
          is_passenger_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_passenger_airbag_enabled = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_passenger_airbag_enabled(&has_bits);
          is_passenger_airbag_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_passenger_buckled = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_passenger_buckled(&has_bits);
          is_passenger_buckled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 front_left_tire_press = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_front_left_tire_press(&has_bits);
          front_left_tire_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 front_right_tire_press = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_front_right_tire_press(&has_bits);
          front_right_tire_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rear_left_tire_press = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_rear_left_tire_press(&has_bits);
          rear_left_tire_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rear_right_tire_press = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_rear_right_tire_press(&has_bits);
          rear_right_tire_press_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_car_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Safety::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Safety)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_driver_car_door_close = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_driver_car_door_close(), target);
  }

  // optional bool is_driver_buckled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_driver_buckled(), target);
  }

  // optional int32 emergency_button = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_emergency_button(), target);
  }

  // optional bool has_error = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_error(), target);
  }

  // optional bool is_motor_invertor_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_motor_invertor_fault(), target);
  }

  // optional bool is_system_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_system_fault(), target);
  }

  // optional bool is_power_battery_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_power_battery_fault(), target);
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_motor_invertor_over_temperature(), target);
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_small_battery_charge_discharge_fault(), target);
  }

  // optional int32 driving_mode = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_driving_mode(), target);
  }

  // optional bool is_passenger_door_open = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_passenger_door_open(), target);
  }

  // optional bool is_rearleft_door_open = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_rearleft_door_open(), target);
  }

  // optional bool is_rearright_door_open = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_rearright_door_open(), target);
  }

  // optional bool is_hood_open = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_hood_open(), target);
  }

  // optional bool is_trunk_open = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_trunk_open(), target);
  }

  // optional bool is_passenger_detected = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_passenger_detected(), target);
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_passenger_airbag_enabled(), target);
  }

  // optional bool is_passenger_buckled = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_passenger_buckled(), target);
  }

  // optional int32 front_left_tire_press = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_front_left_tire_press(), target);
  }

  // optional int32 front_right_tire_press = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_front_right_tire_press(), target);
  }

  // optional int32 rear_left_tire_press = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_rear_left_tire_press(), target);
  }

  // optional int32 rear_right_tire_press = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_rear_right_tire_press(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_car_driving_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Safety)
  return target;
}

size_t Safety::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Safety)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 emergency_button = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_emergency_button());
    }

    // optional bool is_driver_car_door_close = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_driver_buckled = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool has_error = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_motor_invertor_fault = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_system_fault = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_power_battery_fault = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_motor_invertor_over_temperature = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_small_battery_charge_discharge_fault = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int32 driving_mode = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_driving_mode());
    }

    // optional bool is_passenger_door_open = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_rearleft_door_open = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_rearright_door_open = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_hood_open = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_trunk_open = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_passenger_detected = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool is_passenger_airbag_enabled = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_passenger_buckled = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional int32 front_left_tire_press = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_front_left_tire_press());
    }

    // optional int32 front_right_tire_press = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_front_right_tire_press());
    }

    // optional int32 rear_left_tire_press = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rear_left_tire_press());
    }

    // optional int32 rear_right_tire_press = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rear_right_tire_press());
    }

    // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_car_driving_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Safety::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  const Safety* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Safety>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Safety)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Safety)
    MergeFrom(*source);
  }
}

void Safety::MergeFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      emergency_button_ = from.emergency_button_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_driver_car_door_close_ = from.is_driver_car_door_close_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_driver_buckled_ = from.is_driver_buckled_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_error_ = from.has_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_motor_invertor_fault_ = from.is_motor_invertor_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_system_fault_ = from.is_system_fault_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_power_battery_fault_ = from.is_power_battery_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_motor_invertor_over_temperature_ = from.is_motor_invertor_over_temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      is_small_battery_charge_discharge_fault_ = from.is_small_battery_charge_discharge_fault_;
    }
    if (cached_has_bits & 0x00000200u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_passenger_door_open_ = from.is_passenger_door_open_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_rearleft_door_open_ = from.is_rearleft_door_open_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_rearright_door_open_ = from.is_rearright_door_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_hood_open_ = from.is_hood_open_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_trunk_open_ = from.is_trunk_open_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_passenger_detected_ = from.is_passenger_detected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_passenger_airbag_enabled_ = from.is_passenger_airbag_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_passenger_buckled_ = from.is_passenger_buckled_;
    }
    if (cached_has_bits & 0x00040000u) {
      front_left_tire_press_ = from.front_left_tire_press_;
    }
    if (cached_has_bits & 0x00080000u) {
      front_right_tire_press_ = from.front_right_tire_press_;
    }
    if (cached_has_bits & 0x00100000u) {
      rear_left_tire_press_ = from.rear_left_tire_press_;
    }
    if (cached_has_bits & 0x00200000u) {
      rear_right_tire_press_ = from.rear_right_tire_press_;
    }
    if (cached_has_bits & 0x00400000u) {
      car_driving_mode_ = from.car_driving_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Safety::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Safety::CopyFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Safety::IsInitialized() const {
  return true;
}

void Safety::InternalSwap(Safety* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(emergency_button_, other->emergency_button_);
  swap(is_driver_car_door_close_, other->is_driver_car_door_close_);
  swap(is_driver_buckled_, other->is_driver_buckled_);
  swap(has_error_, other->has_error_);
  swap(is_motor_invertor_fault_, other->is_motor_invertor_fault_);
  swap(is_system_fault_, other->is_system_fault_);
  swap(is_power_battery_fault_, other->is_power_battery_fault_);
  swap(is_motor_invertor_over_temperature_, other->is_motor_invertor_over_temperature_);
  swap(is_small_battery_charge_discharge_fault_, other->is_small_battery_charge_discharge_fault_);
  swap(driving_mode_, other->driving_mode_);
  swap(is_passenger_door_open_, other->is_passenger_door_open_);
  swap(is_rearleft_door_open_, other->is_rearleft_door_open_);
  swap(is_rearright_door_open_, other->is_rearright_door_open_);
  swap(is_hood_open_, other->is_hood_open_);
  swap(is_trunk_open_, other->is_trunk_open_);
  swap(is_passenger_detected_, other->is_passenger_detected_);
  swap(is_passenger_airbag_enabled_, other->is_passenger_airbag_enabled_);
  swap(is_passenger_buckled_, other->is_passenger_buckled_);
  swap(front_left_tire_press_, other->front_left_tire_press_);
  swap(front_right_tire_press_, other->front_right_tire_press_);
  swap(rear_left_tire_press_, other->rear_left_tire_press_);
  swap(rear_right_tire_press_, other->rear_right_tire_press_);
  swap(car_driving_mode_, other->car_driving_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Safety::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BasicInfo::InitAsDefaultInstance() {
}
class BasicInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BasicInfo>()._has_bits_);
  static void set_has_is_auto_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_power_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_air_bag_deployed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_odo_meter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_drive_range(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_system_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_human_interrupt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_acc_on_button(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_acc_off_button(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_acc_res_button(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_acc_cancel_button(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_acc_on_off_button(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_acc_res_cancel_button(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_acc_inc_spd_button(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_acc_dec_spd_button(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_acc_inc_gap_button(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_acc_dec_gap_button(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lka_button(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_canbus_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gps_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_compass_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_pdop(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_is_gps_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_is_inferred(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_hdop(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_vdop(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_num_satellites(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_gps_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
};

BasicInfo::BasicInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.BasicInfo)
}
BasicInfo::BasicInfo(const BasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&power_state_, &from.power_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_speed_) -
    reinterpret_cast<char*>(&power_state_)) + sizeof(gps_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.BasicInfo)
}

void BasicInfo::SharedCtor() {
  ::memset(&power_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_speed_) -
      reinterpret_cast<char*>(&power_state_)) + sizeof(gps_speed_));
}

BasicInfo::~BasicInfo() {
  // @@protoc_insertion_point(destructor:apollo.canbus.BasicInfo)
  SharedDtor();
}

void BasicInfo::SharedDtor() {
}

void BasicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicInfo& BasicInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicInfo_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void BasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.BasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&power_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_on_button_) -
        reinterpret_cast<char*>(&power_state_)) + sizeof(acc_on_button_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&acc_off_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_inc_gap_button_) -
        reinterpret_cast<char*>(&acc_off_button_)) + sizeof(acc_inc_gap_button_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&acc_dec_gap_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&day_) -
        reinterpret_cast<char*>(&acc_dec_gap_button_)) + sizeof(day_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdop_) -
        reinterpret_cast<char*>(&hours_)) + sizeof(pdop_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&altitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_speed_) -
        reinterpret_cast<char*>(&altitude_)) + sizeof(gps_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BasicInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_auto_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_auto_mode(&_has_bits_);
          is_auto_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.BasicInfo.Type power_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::BasicInfo_Type_IsValid(val))) {
            _internal_set_power_state(static_cast<::apollo::canbus::BasicInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_air_bag_deployed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_air_bag_deployed(&_has_bits_);
          is_air_bag_deployed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double odo_meter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_odo_meter(&_has_bits_);
          odo_meter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double drive_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_drive_range(&_has_bits_);
          drive_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_system_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_system_error(&_has_bits_);
          is_system_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_human_interrupt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_human_interrupt(&_has_bits_);
          is_human_interrupt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_on_button = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_acc_on_button(&_has_bits_);
          acc_on_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_off_button = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_acc_off_button(&_has_bits_);
          acc_off_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_res_button = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_acc_res_button(&_has_bits_);
          acc_res_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_cancel_button = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_acc_cancel_button(&_has_bits_);
          acc_cancel_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_on_off_button = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_acc_on_off_button(&_has_bits_);
          acc_on_off_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_res_cancel_button = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_acc_res_cancel_button(&_has_bits_);
          acc_res_cancel_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_inc_spd_button = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_acc_inc_spd_button(&_has_bits_);
          acc_inc_spd_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_dec_spd_button = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_acc_dec_spd_button(&_has_bits_);
          acc_dec_spd_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_inc_gap_button = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_acc_inc_gap_button(&_has_bits_);
          acc_inc_gap_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool acc_dec_gap_button = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_acc_dec_gap_button(&_has_bits_);
          acc_dec_gap_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lka_button = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_lka_button(&_has_bits_);
          lka_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool canbus_fault = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_canbus_fault(&_has_bits_);
          canbus_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double latitude = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_latitude(&_has_bits_);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_longitude(&_has_bits_);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool gps_valid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_gps_valid(&_has_bits_);
          gps_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 year = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_year(&_has_bits_);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 month = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_month(&_has_bits_);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 day = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_day(&_has_bits_);
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hours = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_hours(&_has_bits_);
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minutes = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_minutes(&_has_bits_);
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seconds = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_seconds(&_has_bits_);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double compass_direction = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_compass_direction(&_has_bits_);
          compass_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pdop = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_pdop(&_has_bits_);
          pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_gps_fault = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_is_gps_fault(&_has_bits_);
          is_gps_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_inferred = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_is_inferred(&_has_bits_);
          is_inferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double altitude = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_altitude(&_has_bits_);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_heading(&_has_bits_);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hdop = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_hdop(&_has_bits_);
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vdop = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_vdop(&_has_bits_);
          vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.GpsQuality quality = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::GpsQuality_IsValid(val))) {
            _internal_set_quality(static_cast<::apollo::canbus::GpsQuality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_satellites = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_num_satellites(&_has_bits_);
          num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gps_speed = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_gps_speed(&_has_bits_);
          gps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.BasicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_auto_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_auto_mode(), target);
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_power_state(), target);
  }

  // optional bool is_air_bag_deployed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_air_bag_deployed(), target);
  }

  // optional double odo_meter = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_odo_meter(), target);
  }

  // optional double drive_range = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_drive_range(), target);
  }

  // optional bool is_system_error = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_system_error(), target);
  }

  // optional bool is_human_interrupt = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_human_interrupt(), target);
  }

  // optional bool acc_on_button = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_acc_on_button(), target);
  }

  // optional bool acc_off_button = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_acc_off_button(), target);
  }

  // optional bool acc_res_button = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_acc_res_button(), target);
  }

  // optional bool acc_cancel_button = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_acc_cancel_button(), target);
  }

  // optional bool acc_on_off_button = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_acc_on_off_button(), target);
  }

  // optional bool acc_res_cancel_button = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_acc_res_cancel_button(), target);
  }

  // optional bool acc_inc_spd_button = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_acc_inc_spd_button(), target);
  }

  // optional bool acc_dec_spd_button = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_acc_dec_spd_button(), target);
  }

  // optional bool acc_inc_gap_button = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_acc_inc_gap_button(), target);
  }

  // optional bool acc_dec_gap_button = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_acc_dec_gap_button(), target);
  }

  // optional bool lka_button = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_lka_button(), target);
  }

  // optional bool canbus_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_canbus_fault(), target);
  }

  // optional double latitude = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_latitude(), target);
  }

  // optional double longitude = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_longitude(), target);
  }

  // optional bool gps_valid = 22;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_gps_valid(), target);
  }

  // optional int32 year = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_year(), target);
  }

  // optional int32 month = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_month(), target);
  }

  // optional int32 day = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_day(), target);
  }

  // optional int32 hours = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_hours(), target);
  }

  // optional int32 minutes = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_minutes(), target);
  }

  // optional int32 seconds = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_seconds(), target);
  }

  // optional double compass_direction = 29;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_compass_direction(), target);
  }

  // optional double pdop = 30;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_pdop(), target);
  }

  // optional bool is_gps_fault = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_is_gps_fault(), target);
  }

  // optional bool is_inferred = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_is_inferred(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double altitude = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_altitude(), target);
  }

  // optional double heading = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_heading(), target);
  }

  // optional double hdop = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_hdop(), target);
  }

  // optional double vdop = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_vdop(), target);
  }

  // optional .apollo.canbus.GpsQuality quality = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      37, this->_internal_quality(), target);
  }

  // optional int32 num_satellites = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_num_satellites(), target);
  }

  // optional double gps_speed = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_gps_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.BasicInfo)
  return target;
}

size_t BasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.BasicInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.BasicInfo.Type power_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_power_state());
    }

    // optional bool is_auto_mode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_air_bag_deployed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_system_error = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_human_interrupt = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double odo_meter = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double drive_range = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool acc_on_button = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool acc_off_button = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool acc_res_button = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool acc_cancel_button = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool acc_on_off_button = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool acc_res_cancel_button = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool acc_inc_spd_button = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool acc_dec_spd_button = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool acc_inc_gap_button = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool acc_dec_gap_button = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool lka_button = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool canbus_fault = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 year = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_year());
    }

    // optional double latitude = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double longitude = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional int32 month = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_month());
    }

    // optional int32 day = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_day());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 hours = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hours());
    }

    // optional int32 minutes = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minutes());
    }

    // optional int32 seconds = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seconds());
    }

    // optional bool gps_valid = 22;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_gps_fault = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_inferred = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional double compass_direction = 29;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double pdop = 30;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    // optional double altitude = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double heading = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double hdop = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double vdop = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.GpsQuality quality = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
    }

    // optional int32 num_satellites = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_satellites());
    }

    // optional double gps_speed = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.BasicInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.BasicInfo)
    MergeFrom(*source);
  }
}

void BasicInfo::MergeFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      power_state_ = from.power_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_auto_mode_ = from.is_auto_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_air_bag_deployed_ = from.is_air_bag_deployed_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_system_error_ = from.is_system_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_human_interrupt_ = from.is_human_interrupt_;
    }
    if (cached_has_bits & 0x00000020u) {
      odo_meter_ = from.odo_meter_;
    }
    if (cached_has_bits & 0x00000040u) {
      drive_range_ = from.drive_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_on_button_ = from.acc_on_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      acc_off_button_ = from.acc_off_button_;
    }
    if (cached_has_bits & 0x00000200u) {
      acc_res_button_ = from.acc_res_button_;
    }
    if (cached_has_bits & 0x00000400u) {
      acc_cancel_button_ = from.acc_cancel_button_;
    }
    if (cached_has_bits & 0x00000800u) {
      acc_on_off_button_ = from.acc_on_off_button_;
    }
    if (cached_has_bits & 0x00001000u) {
      acc_res_cancel_button_ = from.acc_res_cancel_button_;
    }
    if (cached_has_bits & 0x00002000u) {
      acc_inc_spd_button_ = from.acc_inc_spd_button_;
    }
    if (cached_has_bits & 0x00004000u) {
      acc_dec_spd_button_ = from.acc_dec_spd_button_;
    }
    if (cached_has_bits & 0x00008000u) {
      acc_inc_gap_button_ = from.acc_inc_gap_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      acc_dec_gap_button_ = from.acc_dec_gap_button_;
    }
    if (cached_has_bits & 0x00020000u) {
      lka_button_ = from.lka_button_;
    }
    if (cached_has_bits & 0x00040000u) {
      canbus_fault_ = from.canbus_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00100000u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00200000u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00400000u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00800000u) {
      day_ = from.day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x02000000u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x04000000u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x08000000u) {
      gps_valid_ = from.gps_valid_;
    }
    if (cached_has_bits & 0x10000000u) {
      is_gps_fault_ = from.is_gps_fault_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_inferred_ = from.is_inferred_;
    }
    if (cached_has_bits & 0x40000000u) {
      compass_direction_ = from.compass_direction_;
    }
    if (cached_has_bits & 0x80000000u) {
      pdop_ = from.pdop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00000008u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00000010u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_satellites_ = from.num_satellites_;
    }
    if (cached_has_bits & 0x00000040u) {
      gps_speed_ = from.gps_speed_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void BasicInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicInfo::CopyFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicInfo::IsInitialized() const {
  return true;
}

void BasicInfo::InternalSwap(BasicInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(power_state_, other->power_state_);
  swap(is_auto_mode_, other->is_auto_mode_);
  swap(is_air_bag_deployed_, other->is_air_bag_deployed_);
  swap(is_system_error_, other->is_system_error_);
  swap(is_human_interrupt_, other->is_human_interrupt_);
  swap(odo_meter_, other->odo_meter_);
  swap(drive_range_, other->drive_range_);
  swap(acc_on_button_, other->acc_on_button_);
  swap(acc_off_button_, other->acc_off_button_);
  swap(acc_res_button_, other->acc_res_button_);
  swap(acc_cancel_button_, other->acc_cancel_button_);
  swap(acc_on_off_button_, other->acc_on_off_button_);
  swap(acc_res_cancel_button_, other->acc_res_cancel_button_);
  swap(acc_inc_spd_button_, other->acc_inc_spd_button_);
  swap(acc_dec_spd_button_, other->acc_dec_spd_button_);
  swap(acc_inc_gap_button_, other->acc_inc_gap_button_);
  swap(acc_dec_gap_button_, other->acc_dec_gap_button_);
  swap(lka_button_, other->lka_button_);
  swap(canbus_fault_, other->canbus_fault_);
  swap(year_, other->year_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hours_, other->hours_);
  swap(minutes_, other->minutes_);
  swap(seconds_, other->seconds_);
  swap(gps_valid_, other->gps_valid_);
  swap(is_gps_fault_, other->is_gps_fault_);
  swap(is_inferred_, other->is_inferred_);
  swap(compass_direction_, other->compass_direction_);
  swap(pdop_, other->pdop_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(quality_, other->quality_);
  swap(num_satellites_, other->num_satellites_);
  swap(gps_speed_, other->gps_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Global_rpt_6a::InitAsDefaultInstance() {
}
class Global_rpt_6a::_Internal {
 public:
  using HasBits = decltype(std::declval<Global_rpt_6a>()._has_bits_);
  static void set_has_pacmod_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_veh_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_str_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_brk_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_usr_can_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_usr_can_read_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Global_rpt_6a::Global_rpt_6a()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Global_rpt_6a)
}
Global_rpt_6a::Global_rpt_6a(const Global_rpt_6a& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pacmod_status_, &from.pacmod_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&usr_can_read_errors_) -
    reinterpret_cast<char*>(&pacmod_status_)) + sizeof(usr_can_read_errors_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Global_rpt_6a)
}

void Global_rpt_6a::SharedCtor() {
  ::memset(&pacmod_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usr_can_read_errors_) -
      reinterpret_cast<char*>(&pacmod_status_)) + sizeof(usr_can_read_errors_));
}

Global_rpt_6a::~Global_rpt_6a() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Global_rpt_6a)
  SharedDtor();
}

void Global_rpt_6a::SharedDtor() {
}

void Global_rpt_6a::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Global_rpt_6a& Global_rpt_6a::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Global_rpt_6a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Global_rpt_6a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Global_rpt_6a)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&pacmod_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usr_can_read_errors_) -
        reinterpret_cast<char*>(&pacmod_status_)) + sizeof(usr_can_read_errors_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Global_rpt_6a::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_6a_Pacmod_statusType_IsValid(val))) {
            _internal_set_pacmod_status(static_cast<::apollo::canbus::Global_rpt_6a_Pacmod_statusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_6a_Override_statusType_IsValid(val))) {
            _internal_set_override_status(static_cast<::apollo::canbus::Global_rpt_6a_Override_statusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool veh_can_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_veh_can_timeout(&has_bits);
          veh_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool str_can_timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_str_can_timeout(&has_bits);
          str_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_rpt_6a_Brk_can_timeoutType_IsValid(val))) {
            _internal_set_brk_can_timeout(static_cast<::apollo::canbus::Global_rpt_6a_Brk_can_timeoutType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool usr_can_timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_usr_can_timeout(&has_bits);
          usr_can_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 usr_can_read_errors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_usr_can_read_errors(&has_bits);
          usr_can_read_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Global_rpt_6a::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Global_rpt_6a)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pacmod_status(), target);
  }

  // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_override_status(), target);
  }

  // optional bool veh_can_timeout = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_veh_can_timeout(), target);
  }

  // optional bool str_can_timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_str_can_timeout(), target);
  }

  // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_brk_can_timeout(), target);
  }

  // optional bool usr_can_timeout = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_usr_can_timeout(), target);
  }

  // optional int32 usr_can_read_errors = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_usr_can_read_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Global_rpt_6a)
  return target;
}

size_t Global_rpt_6a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Global_rpt_6a)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pacmod_status());
    }

    // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_override_status());
    }

    // optional bool veh_can_timeout = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool str_can_timeout = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool usr_can_timeout = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brk_can_timeout());
    }

    // optional int32 usr_can_read_errors = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_usr_can_read_errors());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Global_rpt_6a::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Global_rpt_6a)
  GOOGLE_DCHECK_NE(&from, this);
  const Global_rpt_6a* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Global_rpt_6a>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Global_rpt_6a)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Global_rpt_6a)
    MergeFrom(*source);
  }
}

void Global_rpt_6a::MergeFrom(const Global_rpt_6a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Global_rpt_6a)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      pacmod_status_ = from.pacmod_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      override_status_ = from.override_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      veh_can_timeout_ = from.veh_can_timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      str_can_timeout_ = from.str_can_timeout_;
    }
    if (cached_has_bits & 0x00000010u) {
      usr_can_timeout_ = from.usr_can_timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      brk_can_timeout_ = from.brk_can_timeout_;
    }
    if (cached_has_bits & 0x00000040u) {
      usr_can_read_errors_ = from.usr_can_read_errors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Global_rpt_6a::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Global_rpt_6a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global_rpt_6a::CopyFrom(const Global_rpt_6a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Global_rpt_6a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_rpt_6a::IsInitialized() const {
  return true;
}

void Global_rpt_6a::InternalSwap(Global_rpt_6a* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pacmod_status_, other->pacmod_status_);
  swap(override_status_, other->override_status_);
  swap(veh_can_timeout_, other->veh_can_timeout_);
  swap(str_can_timeout_, other->str_can_timeout_);
  swap(usr_can_timeout_, other->usr_can_timeout_);
  swap(brk_can_timeout_, other->brk_can_timeout_);
  swap(usr_can_read_errors_, other->usr_can_read_errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Global_rpt_6a::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_cmd_6b::InitAsDefaultInstance() {
}
class Brake_cmd_6b::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_cmd_6b>()._has_bits_);
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Brake_cmd_6b::Brake_cmd_6b()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_cmd_6b)
}
Brake_cmd_6b::Brake_cmd_6b(const Brake_cmd_6b& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brake_cmd_ = from.brake_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_cmd_6b)
}

void Brake_cmd_6b::SharedCtor() {
  brake_cmd_ = 0;
}

Brake_cmd_6b::~Brake_cmd_6b() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_cmd_6b)
  SharedDtor();
}

void Brake_cmd_6b::SharedDtor() {
}

void Brake_cmd_6b::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_cmd_6b& Brake_cmd_6b::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_cmd_6b_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Brake_cmd_6b::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_cmd_6b)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brake_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_cmd_6b::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double brake_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_brake_cmd(&has_bits);
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_cmd_6b::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_cmd_6b)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_brake_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_cmd_6b)
  return target;
}

size_t Brake_cmd_6b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_cmd_6b)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double brake_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_cmd_6b::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_cmd_6b)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_cmd_6b* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_cmd_6b>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_cmd_6b)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_cmd_6b)
    MergeFrom(*source);
  }
}

void Brake_cmd_6b::MergeFrom(const Brake_cmd_6b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_cmd_6b)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_brake_cmd()) {
    _internal_set_brake_cmd(from._internal_brake_cmd());
  }
}

void Brake_cmd_6b::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_cmd_6b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_cmd_6b::CopyFrom(const Brake_cmd_6b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_cmd_6b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_cmd_6b::IsInitialized() const {
  return true;
}

void Brake_cmd_6b::InternalSwap(Brake_cmd_6b* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_cmd_, other->brake_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_cmd_6b::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_rpt_6c::InitAsDefaultInstance() {
}
class Brake_rpt_6c::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_rpt_6c>()._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_on_off(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Brake_rpt_6c::Brake_rpt_6c()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_rpt_6c)
}
Brake_rpt_6c::Brake_rpt_6c(const Brake_rpt_6c& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_on_off_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(brake_on_off_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_rpt_6c)
}

void Brake_rpt_6c::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_on_off_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(brake_on_off_));
}

Brake_rpt_6c::~Brake_rpt_6c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_rpt_6c)
  SharedDtor();
}

void Brake_rpt_6c::SharedDtor() {
}

void Brake_rpt_6c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_rpt_6c& Brake_rpt_6c::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_rpt_6c_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Brake_rpt_6c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_rpt_6c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_on_off_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(brake_on_off_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_rpt_6c::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_manual_input(&has_bits);
          manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_commanded_value(&has_bits);
          commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_output_value(&has_bits);
          output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_rpt_6c_Brake_on_offType_IsValid(val))) {
            _internal_set_brake_on_off(static_cast<::apollo::canbus::Brake_rpt_6c_Brake_on_offType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_rpt_6c::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_rpt_6c)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_brake_on_off(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_rpt_6c)
  return target;
}

size_t Brake_rpt_6c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_rpt_6c)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brake_on_off());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_rpt_6c::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_rpt_6c)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_rpt_6c* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_rpt_6c>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_rpt_6c)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_rpt_6c)
    MergeFrom(*source);
  }
}

void Brake_rpt_6c::MergeFrom(const Brake_rpt_6c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_rpt_6c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_on_off_ = from.brake_on_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_rpt_6c::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_rpt_6c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_rpt_6c::CopyFrom(const Brake_rpt_6c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_rpt_6c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_rpt_6c::IsInitialized() const {
  return true;
}

void Brake_rpt_6c::InternalSwap(Brake_rpt_6c* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
  swap(brake_on_off_, other->brake_on_off_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_rpt_6c::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_cmd_6d::InitAsDefaultInstance() {
}
class Steering_cmd_6d::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_cmd_6d>()._has_bits_);
  static void set_has_position_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_cmd_6d::Steering_cmd_6d()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_cmd_6d)
}
Steering_cmd_6d::Steering_cmd_6d(const Steering_cmd_6d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_value_, &from.position_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&position_value_)) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_cmd_6d)
}

void Steering_cmd_6d::SharedCtor() {
  ::memset(&position_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&position_value_)) + sizeof(speed_limit_));
}

Steering_cmd_6d::~Steering_cmd_6d() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_cmd_6d)
  SharedDtor();
}

void Steering_cmd_6d::SharedDtor() {
}

void Steering_cmd_6d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_cmd_6d& Steering_cmd_6d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_cmd_6d_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Steering_cmd_6d::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_cmd_6d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&position_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&position_value_)) + sizeof(speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_cmd_6d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double position_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_position_value(&has_bits);
          position_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_speed_limit(&has_bits);
          speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_cmd_6d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_cmd_6d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double position_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_position_value(), target);
  }

  // optional double speed_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_cmd_6d)
  return target;
}

size_t Steering_cmd_6d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_cmd_6d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double position_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_cmd_6d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_cmd_6d)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_cmd_6d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_cmd_6d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_cmd_6d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_cmd_6d)
    MergeFrom(*source);
  }
}

void Steering_cmd_6d::MergeFrom(const Steering_cmd_6d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_cmd_6d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      position_value_ = from.position_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_cmd_6d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_cmd_6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_cmd_6d::CopyFrom(const Steering_cmd_6d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_cmd_6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_cmd_6d::IsInitialized() const {
  return true;
}

void Steering_cmd_6d::InternalSwap(Steering_cmd_6d* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_value_, other->position_value_);
  swap(speed_limit_, other->speed_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_cmd_6d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_rpt_1_6e::InitAsDefaultInstance() {
}
class Steering_rpt_1_6e::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_rpt_1_6e>()._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Steering_rpt_1_6e::Steering_rpt_1_6e()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_rpt_1_6e)
}
Steering_rpt_1_6e::Steering_rpt_1_6e(const Steering_rpt_1_6e& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_rpt_1_6e)
}

void Steering_rpt_1_6e::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
}

Steering_rpt_1_6e::~Steering_rpt_1_6e() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_rpt_1_6e)
  SharedDtor();
}

void Steering_rpt_1_6e::SharedDtor() {
}

void Steering_rpt_1_6e::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_rpt_1_6e& Steering_rpt_1_6e::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_rpt_1_6e_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Steering_rpt_1_6e::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_rpt_1_6e)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_rpt_1_6e::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_manual_input(&has_bits);
          manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_commanded_value(&has_bits);
          commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_output_value(&has_bits);
          output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_rpt_1_6e::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_rpt_1_6e)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_rpt_1_6e)
  return target;
}

size_t Steering_rpt_1_6e::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_rpt_1_6e)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_rpt_1_6e::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_rpt_1_6e)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_rpt_1_6e* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_rpt_1_6e>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_rpt_1_6e)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_rpt_1_6e)
    MergeFrom(*source);
  }
}

void Steering_rpt_1_6e::MergeFrom(const Steering_rpt_1_6e& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_rpt_1_6e)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_rpt_1_6e::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_rpt_1_6e)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_rpt_1_6e::CopyFrom(const Steering_rpt_1_6e& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_rpt_1_6e)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_rpt_1_6e::IsInitialized() const {
  return true;
}

void Steering_rpt_1_6e::InternalSwap(Steering_rpt_1_6e* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_rpt_1_6e::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wheel_speed_rpt_7a::InitAsDefaultInstance() {
}
class Wheel_speed_rpt_7a::_Internal {
 public:
  using HasBits = decltype(std::declval<Wheel_speed_rpt_7a>()._has_bits_);
  static void set_has_wheel_spd_rear_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wheel_spd_rear_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wheel_spd_front_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheel_spd_front_left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Wheel_speed_rpt_7a::Wheel_speed_rpt_7a()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wheel_speed_rpt_7a)
}
Wheel_speed_rpt_7a::Wheel_speed_rpt_7a(const Wheel_speed_rpt_7a& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheel_spd_rear_right_, &from.wheel_spd_rear_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_spd_front_left_) -
    reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wheel_speed_rpt_7a)
}

void Wheel_speed_rpt_7a::SharedCtor() {
  ::memset(&wheel_spd_rear_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_spd_front_left_) -
      reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
}

Wheel_speed_rpt_7a::~Wheel_speed_rpt_7a() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wheel_speed_rpt_7a)
  SharedDtor();
}

void Wheel_speed_rpt_7a::SharedDtor() {
}

void Wheel_speed_rpt_7a::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wheel_speed_rpt_7a& Wheel_speed_rpt_7a::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wheel_speed_rpt_7a_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Wheel_speed_rpt_7a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wheel_speed_rpt_7a)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&wheel_spd_rear_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_spd_front_left_) -
        reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Wheel_speed_rpt_7a::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 wheel_spd_rear_right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wheel_spd_rear_right(&has_bits);
          wheel_spd_rear_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wheel_spd_rear_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wheel_spd_rear_left(&has_bits);
          wheel_spd_rear_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wheel_spd_front_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wheel_spd_front_right(&has_bits);
          wheel_spd_front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wheel_spd_front_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wheel_spd_front_left(&has_bits);
          wheel_spd_front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wheel_speed_rpt_7a::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wheel_speed_rpt_7a)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 wheel_spd_rear_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wheel_spd_rear_right(), target);
  }

  // optional int32 wheel_spd_rear_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wheel_spd_rear_left(), target);
  }

  // optional int32 wheel_spd_front_right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wheel_spd_front_right(), target);
  }

  // optional int32 wheel_spd_front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wheel_spd_front_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wheel_speed_rpt_7a)
  return target;
}

size_t Wheel_speed_rpt_7a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wheel_speed_rpt_7a)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 wheel_spd_rear_right = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wheel_spd_rear_right());
    }

    // optional int32 wheel_spd_rear_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wheel_spd_rear_left());
    }

    // optional int32 wheel_spd_front_right = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wheel_spd_front_right());
    }

    // optional int32 wheel_spd_front_left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wheel_spd_front_left());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wheel_speed_rpt_7a::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  GOOGLE_DCHECK_NE(&from, this);
  const Wheel_speed_rpt_7a* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wheel_speed_rpt_7a>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wheel_speed_rpt_7a)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wheel_speed_rpt_7a)
    MergeFrom(*source);
  }
}

void Wheel_speed_rpt_7a::MergeFrom(const Wheel_speed_rpt_7a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      wheel_spd_rear_right_ = from.wheel_spd_rear_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_spd_rear_left_ = from.wheel_spd_rear_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheel_spd_front_right_ = from.wheel_spd_front_right_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheel_spd_front_left_ = from.wheel_spd_front_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wheel_speed_rpt_7a::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wheel_speed_rpt_7a::CopyFrom(const Wheel_speed_rpt_7a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wheel_speed_rpt_7a::IsInitialized() const {
  return true;
}

void Wheel_speed_rpt_7a::InternalSwap(Wheel_speed_rpt_7a* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wheel_spd_rear_right_, other->wheel_spd_rear_right_);
  swap(wheel_spd_rear_left_, other->wheel_spd_rear_left_);
  swap(wheel_spd_front_right_, other->wheel_spd_front_right_);
  swap(wheel_spd_front_left_, other->wheel_spd_front_left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wheel_speed_rpt_7a::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Date_time_rpt_83::InitAsDefaultInstance() {
}
class Date_time_rpt_83::_Internal {
 public:
  using HasBits = decltype(std::declval<Date_time_rpt_83>()._has_bits_);
  static void set_has_time_second(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_date_month(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_date_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Date_time_rpt_83::Date_time_rpt_83()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Date_time_rpt_83)
}
Date_time_rpt_83::Date_time_rpt_83(const Date_time_rpt_83& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_second_, &from.time_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_year_) -
    reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Date_time_rpt_83)
}

void Date_time_rpt_83::SharedCtor() {
  ::memset(&time_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_year_) -
      reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
}

Date_time_rpt_83::~Date_time_rpt_83() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Date_time_rpt_83)
  SharedDtor();
}

void Date_time_rpt_83::SharedDtor() {
}

void Date_time_rpt_83::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Date_time_rpt_83& Date_time_rpt_83::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Date_time_rpt_83_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Date_time_rpt_83::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Date_time_rpt_83)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&time_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_year_) -
        reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Date_time_rpt_83::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 time_second = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_second(&has_bits);
          time_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_minute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_minute(&has_bits);
          time_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time_hour = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_hour(&has_bits);
          time_hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 date_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_date_day(&has_bits);
          date_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 date_month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_date_month(&has_bits);
          date_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 date_year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_date_year(&has_bits);
          date_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Date_time_rpt_83::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Date_time_rpt_83)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time_second = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_second(), target);
  }

  // optional int32 time_minute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_minute(), target);
  }

  // optional int32 time_hour = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_hour(), target);
  }

  // optional int32 date_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_date_day(), target);
  }

  // optional int32 date_month = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_date_month(), target);
  }

  // optional int32 date_year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_date_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Date_time_rpt_83)
  return target;
}

size_t Date_time_rpt_83::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Date_time_rpt_83)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 time_second = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_second());
    }

    // optional int32 time_minute = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_minute());
    }

    // optional int32 time_hour = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time_hour());
    }

    // optional int32 date_day = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_date_day());
    }

    // optional int32 date_month = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_date_month());
    }

    // optional int32 date_year = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_date_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date_time_rpt_83::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Date_time_rpt_83)
  GOOGLE_DCHECK_NE(&from, this);
  const Date_time_rpt_83* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Date_time_rpt_83>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Date_time_rpt_83)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Date_time_rpt_83)
    MergeFrom(*source);
  }
}

void Date_time_rpt_83::MergeFrom(const Date_time_rpt_83& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Date_time_rpt_83)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      time_second_ = from.time_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_minute_ = from.time_minute_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_hour_ = from.time_hour_;
    }
    if (cached_has_bits & 0x00000008u) {
      date_day_ = from.date_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      date_month_ = from.date_month_;
    }
    if (cached_has_bits & 0x00000020u) {
      date_year_ = from.date_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Date_time_rpt_83::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Date_time_rpt_83)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date_time_rpt_83::CopyFrom(const Date_time_rpt_83& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Date_time_rpt_83)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date_time_rpt_83::IsInitialized() const {
  return true;
}

void Date_time_rpt_83::InternalSwap(Date_time_rpt_83* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_second_, other->time_second_);
  swap(time_minute_, other->time_minute_);
  swap(time_hour_, other->time_hour_);
  swap(date_day_, other->date_day_);
  swap(date_month_, other->date_month_);
  swap(date_year_, other->date_year_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Date_time_rpt_83::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_motor_rpt_1_70::InitAsDefaultInstance() {
}
class Brake_motor_rpt_1_70::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_1_70>()._has_bits_);
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shaft_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_motor_rpt_1_70::Brake_motor_rpt_1_70()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_1_70)
}
Brake_motor_rpt_1_70::Brake_motor_rpt_1_70(const Brake_motor_rpt_1_70& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&motor_current_, &from.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&shaft_position_) -
    reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_1_70)
}

void Brake_motor_rpt_1_70::SharedCtor() {
  ::memset(&motor_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shaft_position_) -
      reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
}

Brake_motor_rpt_1_70::~Brake_motor_rpt_1_70() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_1_70)
  SharedDtor();
}

void Brake_motor_rpt_1_70::SharedDtor() {
}

void Brake_motor_rpt_1_70::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_motor_rpt_1_70& Brake_motor_rpt_1_70::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_motor_rpt_1_70_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_1_70::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_1_70)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shaft_position_) -
        reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_motor_rpt_1_70::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double motor_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_motor_current(&has_bits);
          motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double shaft_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_shaft_position(&has_bits);
          shaft_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_motor_rpt_1_70::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_1_70)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_shaft_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_1_70)
  return target;
}

size_t Brake_motor_rpt_1_70::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_1_70)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double motor_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_1_70::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_1_70* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_motor_rpt_1_70>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_1_70)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_1_70)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_1_70::MergeFrom(const Brake_motor_rpt_1_70& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      motor_current_ = from.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      shaft_position_ = from.shaft_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_1_70::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_1_70::CopyFrom(const Brake_motor_rpt_1_70& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_1_70::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_1_70::InternalSwap(Brake_motor_rpt_1_70* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(motor_current_, other->motor_current_);
  swap(shaft_position_, other->shaft_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_1_70::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Headlight_rpt_77::InitAsDefaultInstance() {
}
class Headlight_rpt_77::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_rpt_77>()._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Headlight_rpt_77::Headlight_rpt_77()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Headlight_rpt_77)
}
Headlight_rpt_77::Headlight_rpt_77(const Headlight_rpt_77& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&commanded_value_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(commanded_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_rpt_77)
}

void Headlight_rpt_77::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commanded_value_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(commanded_value_));
}

Headlight_rpt_77::~Headlight_rpt_77() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_rpt_77)
  SharedDtor();
}

void Headlight_rpt_77::SharedDtor() {
}

void Headlight_rpt_77::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Headlight_rpt_77& Headlight_rpt_77::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Headlight_rpt_77_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Headlight_rpt_77::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_rpt_77)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commanded_value_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(commanded_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Headlight_rpt_77::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_77_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Headlight_rpt_77_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_77_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Headlight_rpt_77_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_rpt_77_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Headlight_rpt_77_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Headlight_rpt_77::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_rpt_77)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_commanded_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_rpt_77)
  return target;
}

size_t Headlight_rpt_77::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_rpt_77)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Headlight_rpt_77::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Headlight_rpt_77)
  GOOGLE_DCHECK_NE(&from, this);
  const Headlight_rpt_77* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Headlight_rpt_77>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Headlight_rpt_77)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Headlight_rpt_77)
    MergeFrom(*source);
  }
}

void Headlight_rpt_77::MergeFrom(const Headlight_rpt_77& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_rpt_77)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000004u) {
      commanded_value_ = from.commanded_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Headlight_rpt_77::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Headlight_rpt_77)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headlight_rpt_77::CopyFrom(const Headlight_rpt_77& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_rpt_77)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_rpt_77::IsInitialized() const {
  return true;
}

void Headlight_rpt_77::InternalSwap(Headlight_rpt_77* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_value_, other->output_value_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_rpt_77::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Accel_rpt_68::InitAsDefaultInstance() {
}
class Accel_rpt_68::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_rpt_68>()._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Accel_rpt_68::Accel_rpt_68()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Accel_rpt_68)
}
Accel_rpt_68::Accel_rpt_68(const Accel_rpt_68& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_rpt_68)
}

void Accel_rpt_68::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
}

Accel_rpt_68::~Accel_rpt_68() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_rpt_68)
  SharedDtor();
}

void Accel_rpt_68::SharedDtor() {
}

void Accel_rpt_68::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accel_rpt_68& Accel_rpt_68::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accel_rpt_68_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Accel_rpt_68::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_rpt_68)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Accel_rpt_68::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_manual_input(&has_bits);
          manual_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_commanded_value(&has_bits);
          commanded_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_output_value(&has_bits);
          output_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accel_rpt_68::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_rpt_68)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_rpt_68)
  return target;
}

size_t Accel_rpt_68::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_rpt_68)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel_rpt_68::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Accel_rpt_68)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel_rpt_68* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accel_rpt_68>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Accel_rpt_68)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Accel_rpt_68)
    MergeFrom(*source);
  }
}

void Accel_rpt_68::MergeFrom(const Accel_rpt_68& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_rpt_68)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Accel_rpt_68::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Accel_rpt_68)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel_rpt_68::CopyFrom(const Accel_rpt_68& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_rpt_68)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_rpt_68::IsInitialized() const {
  return true;
}

void Accel_rpt_68::InternalSwap(Accel_rpt_68* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_rpt_68::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_motor_rpt_3_75::InitAsDefaultInstance() {
}
class Steering_motor_rpt_3_75::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_3_75>()._has_bits_);
  static void set_has_torque_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_motor_rpt_3_75::Steering_motor_rpt_3_75()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_3_75)
}
Steering_motor_rpt_3_75::Steering_motor_rpt_3_75(const Steering_motor_rpt_3_75& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&torque_output_, &from.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_input_) -
    reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_3_75)
}

void Steering_motor_rpt_3_75::SharedCtor() {
  ::memset(&torque_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_input_) -
      reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
}

Steering_motor_rpt_3_75::~Steering_motor_rpt_3_75() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_3_75)
  SharedDtor();
}

void Steering_motor_rpt_3_75::SharedDtor() {
}

void Steering_motor_rpt_3_75::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_motor_rpt_3_75& Steering_motor_rpt_3_75::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_motor_rpt_3_75_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_3_75::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_3_75)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&torque_input_) -
        reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_motor_rpt_3_75::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double torque_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_torque_output(&has_bits);
          torque_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double torque_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_torque_input(&has_bits);
          torque_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_motor_rpt_3_75::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_3_75)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_3_75)
  return target;
}

size_t Steering_motor_rpt_3_75::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_3_75)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double torque_output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_3_75::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_3_75* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_motor_rpt_3_75>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_3_75)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_3_75)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_3_75::MergeFrom(const Steering_motor_rpt_3_75& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      torque_output_ = from.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      torque_input_ = from.torque_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_3_75::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_3_75::CopyFrom(const Steering_motor_rpt_3_75& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_3_75::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_3_75::InternalSwap(Steering_motor_rpt_3_75* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(torque_output_, other->torque_output_);
  swap(torque_input_, other->torque_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_3_75::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Turn_cmd_63::InitAsDefaultInstance() {
}
class Turn_cmd_63::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_cmd_63>()._has_bits_);
  static void set_has_turn_signal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Turn_cmd_63::Turn_cmd_63()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turn_cmd_63)
}
Turn_cmd_63::Turn_cmd_63(const Turn_cmd_63& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_signal_cmd_ = from.turn_signal_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_cmd_63)
}

void Turn_cmd_63::SharedCtor() {
  turn_signal_cmd_ = 0;
}

Turn_cmd_63::~Turn_cmd_63() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_cmd_63)
  SharedDtor();
}

void Turn_cmd_63::SharedDtor() {
}

void Turn_cmd_63::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Turn_cmd_63& Turn_cmd_63::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Turn_cmd_63_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Turn_cmd_63::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_cmd_63)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  turn_signal_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Turn_cmd_63::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_cmd_63_Turn_signal_cmdType_IsValid(val))) {
            _internal_set_turn_signal_cmd(static_cast<::apollo::canbus::Turn_cmd_63_Turn_signal_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Turn_cmd_63::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_cmd_63)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_signal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_cmd_63)
  return target;
}

size_t Turn_cmd_63::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_cmd_63)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_signal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turn_cmd_63::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turn_cmd_63)
  GOOGLE_DCHECK_NE(&from, this);
  const Turn_cmd_63* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Turn_cmd_63>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turn_cmd_63)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turn_cmd_63)
    MergeFrom(*source);
  }
}

void Turn_cmd_63::MergeFrom(const Turn_cmd_63& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_cmd_63)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turn_signal_cmd()) {
    _internal_set_turn_signal_cmd(from._internal_turn_signal_cmd());
  }
}

void Turn_cmd_63::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turn_cmd_63)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn_cmd_63::CopyFrom(const Turn_cmd_63& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_cmd_63)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_cmd_63::IsInitialized() const {
  return true;
}

void Turn_cmd_63::InternalSwap(Turn_cmd_63* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(turn_signal_cmd_, other->turn_signal_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_cmd_63::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Turn_rpt_64::InitAsDefaultInstance() {
}
class Turn_rpt_64::_Internal {
 public:
  using HasBits = decltype(std::declval<Turn_rpt_64>()._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Turn_rpt_64::Turn_rpt_64()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turn_rpt_64)
}
Turn_rpt_64::Turn_rpt_64(const Turn_rpt_64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_rpt_64)
}

void Turn_rpt_64::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
}

Turn_rpt_64::~Turn_rpt_64() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_rpt_64)
  SharedDtor();
}

void Turn_rpt_64::SharedDtor() {
}

void Turn_rpt_64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Turn_rpt_64& Turn_rpt_64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Turn_rpt_64_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Turn_rpt_64::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_rpt_64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Turn_rpt_64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_64_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Turn_rpt_64_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_64_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Turn_rpt_64_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turn_rpt_64_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Turn_rpt_64_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Turn_rpt_64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_rpt_64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_rpt_64)
  return target;
}

size_t Turn_rpt_64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_rpt_64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turn_rpt_64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turn_rpt_64)
  GOOGLE_DCHECK_NE(&from, this);
  const Turn_rpt_64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Turn_rpt_64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turn_rpt_64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turn_rpt_64)
    MergeFrom(*source);
  }
}

void Turn_rpt_64::MergeFrom(const Turn_rpt_64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_rpt_64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Turn_rpt_64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turn_rpt_64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn_rpt_64::CopyFrom(const Turn_rpt_64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_rpt_64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_rpt_64::IsInitialized() const {
  return true;
}

void Turn_rpt_64::InternalSwap(Turn_rpt_64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turn_rpt_64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shift_cmd_65::InitAsDefaultInstance() {
}
class Shift_cmd_65::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_cmd_65>()._has_bits_);
  static void set_has_shift_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Shift_cmd_65::Shift_cmd_65()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Shift_cmd_65)
}
Shift_cmd_65::Shift_cmd_65(const Shift_cmd_65& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shift_cmd_ = from.shift_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_cmd_65)
}

void Shift_cmd_65::SharedCtor() {
  shift_cmd_ = 0;
}

Shift_cmd_65::~Shift_cmd_65() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_cmd_65)
  SharedDtor();
}

void Shift_cmd_65::SharedDtor() {
}

void Shift_cmd_65::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shift_cmd_65& Shift_cmd_65::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shift_cmd_65_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Shift_cmd_65::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_cmd_65)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shift_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Shift_cmd_65::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_cmd_65_Shift_cmdType_IsValid(val))) {
            _internal_set_shift_cmd(static_cast<::apollo::canbus::Shift_cmd_65_Shift_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shift_cmd_65::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_cmd_65)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_shift_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_cmd_65)
  return target;
}

size_t Shift_cmd_65::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_cmd_65)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shift_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shift_cmd_65::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Shift_cmd_65)
  GOOGLE_DCHECK_NE(&from, this);
  const Shift_cmd_65* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shift_cmd_65>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Shift_cmd_65)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Shift_cmd_65)
    MergeFrom(*source);
  }
}

void Shift_cmd_65::MergeFrom(const Shift_cmd_65& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_cmd_65)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shift_cmd()) {
    _internal_set_shift_cmd(from._internal_shift_cmd());
  }
}

void Shift_cmd_65::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Shift_cmd_65)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shift_cmd_65::CopyFrom(const Shift_cmd_65& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_cmd_65)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_cmd_65::IsInitialized() const {
  return true;
}

void Shift_cmd_65::InternalSwap(Shift_cmd_65* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shift_cmd_, other->shift_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_cmd_65::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Shift_rpt_66::InitAsDefaultInstance() {
}
class Shift_rpt_66::_Internal {
 public:
  using HasBits = decltype(std::declval<Shift_rpt_66>()._has_bits_);
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Shift_rpt_66::Shift_rpt_66()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Shift_rpt_66)
}
Shift_rpt_66::Shift_rpt_66(const Shift_rpt_66& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_rpt_66)
}

void Shift_rpt_66::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
}

Shift_rpt_66::~Shift_rpt_66() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_rpt_66)
  SharedDtor();
}

void Shift_rpt_66::SharedDtor() {
}

void Shift_rpt_66::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Shift_rpt_66& Shift_rpt_66::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Shift_rpt_66_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Shift_rpt_66::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_rpt_66)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Shift_rpt_66::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_66_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Shift_rpt_66_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_66_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Shift_rpt_66_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Shift_rpt_66_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Shift_rpt_66_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Shift_rpt_66::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_rpt_66)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_manual_input(), target);
  }

  // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_output_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_rpt_66)
  return target;
}

size_t Shift_rpt_66::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_rpt_66)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

    // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shift_rpt_66::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Shift_rpt_66)
  GOOGLE_DCHECK_NE(&from, this);
  const Shift_rpt_66* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Shift_rpt_66>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Shift_rpt_66)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Shift_rpt_66)
    MergeFrom(*source);
  }
}

void Shift_rpt_66::MergeFrom(const Shift_rpt_66& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_rpt_66)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Shift_rpt_66::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Shift_rpt_66)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shift_rpt_66::CopyFrom(const Shift_rpt_66& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_rpt_66)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_rpt_66::IsInitialized() const {
  return true;
}

void Shift_rpt_66::InternalSwap(Shift_rpt_66* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Shift_rpt_66::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Accel_cmd_67::InitAsDefaultInstance() {
}
class Accel_cmd_67::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel_cmd_67>()._has_bits_);
  static void set_has_accel_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Accel_cmd_67::Accel_cmd_67()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Accel_cmd_67)
}
Accel_cmd_67::Accel_cmd_67(const Accel_cmd_67& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accel_cmd_ = from.accel_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_cmd_67)
}

void Accel_cmd_67::SharedCtor() {
  accel_cmd_ = 0;
}

Accel_cmd_67::~Accel_cmd_67() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_cmd_67)
  SharedDtor();
}

void Accel_cmd_67::SharedDtor() {
}

void Accel_cmd_67::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accel_cmd_67& Accel_cmd_67::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accel_cmd_67_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Accel_cmd_67::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_cmd_67)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accel_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Accel_cmd_67::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double accel_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_accel_cmd(&has_bits);
          accel_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accel_cmd_67::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_cmd_67)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double accel_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_accel_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_cmd_67)
  return target;
}

size_t Accel_cmd_67::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_cmd_67)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double accel_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel_cmd_67::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Accel_cmd_67)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel_cmd_67* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accel_cmd_67>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Accel_cmd_67)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Accel_cmd_67)
    MergeFrom(*source);
  }
}

void Accel_cmd_67::MergeFrom(const Accel_cmd_67& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_cmd_67)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accel_cmd()) {
    _internal_set_accel_cmd(from._internal_accel_cmd());
  }
}

void Accel_cmd_67::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Accel_cmd_67)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel_cmd_67::CopyFrom(const Accel_cmd_67& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_cmd_67)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_cmd_67::IsInitialized() const {
  return true;
}

void Accel_cmd_67::InternalSwap(Accel_cmd_67* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accel_cmd_, other->accel_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel_cmd_67::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lat_lon_heading_rpt_82::InitAsDefaultInstance() {
}
class Lat_lon_heading_rpt_82::_Internal {
 public:
  using HasBits = decltype(std::declval<Lat_lon_heading_rpt_82>()._has_bits_);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_longitude_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_latitude_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_latitude_degrees(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Lat_lon_heading_rpt_82::Lat_lon_heading_rpt_82()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Lat_lon_heading_rpt_82)
}
Lat_lon_heading_rpt_82::Lat_lon_heading_rpt_82(const Lat_lon_heading_rpt_82& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_degrees_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Lat_lon_heading_rpt_82)
}

void Lat_lon_heading_rpt_82::SharedCtor() {
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_degrees_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
}

Lat_lon_heading_rpt_82::~Lat_lon_heading_rpt_82() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Lat_lon_heading_rpt_82)
  SharedDtor();
}

void Lat_lon_heading_rpt_82::SharedDtor() {
}

void Lat_lon_heading_rpt_82::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lat_lon_heading_rpt_82& Lat_lon_heading_rpt_82::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lat_lon_heading_rpt_82_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Lat_lon_heading_rpt_82::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Lat_lon_heading_rpt_82)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_degrees_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Lat_lon_heading_rpt_82::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 longitude_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_longitude_seconds(&has_bits);
          longitude_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 longitude_minutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_longitude_minutes(&has_bits);
          longitude_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 longitude_degrees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_longitude_degrees(&has_bits);
          longitude_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latitude_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_latitude_seconds(&has_bits);
          latitude_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latitude_minutes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_latitude_minutes(&has_bits);
          latitude_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latitude_degrees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_latitude_degrees(&has_bits);
          latitude_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lat_lon_heading_rpt_82::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Lat_lon_heading_rpt_82)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading(), target);
  }

  // optional int32 longitude_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude_seconds(), target);
  }

  // optional int32 longitude_minutes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_longitude_minutes(), target);
  }

  // optional int32 longitude_degrees = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_longitude_degrees(), target);
  }

  // optional int32 latitude_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_latitude_seconds(), target);
  }

  // optional int32 latitude_minutes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_latitude_minutes(), target);
  }

  // optional int32 latitude_degrees = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_latitude_degrees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Lat_lon_heading_rpt_82)
  return target;
}

size_t Lat_lon_heading_rpt_82::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Lat_lon_heading_rpt_82)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double heading = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 longitude_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_longitude_seconds());
    }

    // optional int32 longitude_minutes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_longitude_minutes());
    }

    // optional int32 longitude_degrees = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_longitude_degrees());
    }

    // optional int32 latitude_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_latitude_seconds());
    }

    // optional int32 latitude_minutes = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_latitude_minutes());
    }

    // optional int32 latitude_degrees = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_latitude_degrees());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lat_lon_heading_rpt_82::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  GOOGLE_DCHECK_NE(&from, this);
  const Lat_lon_heading_rpt_82* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lat_lon_heading_rpt_82>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Lat_lon_heading_rpt_82)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Lat_lon_heading_rpt_82)
    MergeFrom(*source);
  }
}

void Lat_lon_heading_rpt_82::MergeFrom(const Lat_lon_heading_rpt_82& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_seconds_ = from.longitude_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_minutes_ = from.longitude_minutes_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_degrees_ = from.longitude_degrees_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_seconds_ = from.latitude_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_minutes_ = from.latitude_minutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      latitude_degrees_ = from.latitude_degrees_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lat_lon_heading_rpt_82::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lat_lon_heading_rpt_82::CopyFrom(const Lat_lon_heading_rpt_82& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lat_lon_heading_rpt_82::IsInitialized() const {
  return true;
}

void Lat_lon_heading_rpt_82::InternalSwap(Lat_lon_heading_rpt_82* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(heading_, other->heading_);
  swap(longitude_seconds_, other->longitude_seconds_);
  swap(longitude_minutes_, other->longitude_minutes_);
  swap(longitude_degrees_, other->longitude_degrees_);
  swap(latitude_seconds_, other->latitude_seconds_);
  swap(latitude_minutes_, other->latitude_minutes_);
  swap(latitude_degrees_, other->latitude_degrees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lat_lon_heading_rpt_82::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Global_cmd_69::InitAsDefaultInstance() {
}
class Global_cmd_69::_Internal {
 public:
  using HasBits = decltype(std::declval<Global_cmd_69>()._has_bits_);
  static void set_has_pacmod_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clear_override(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ignore_override(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Global_cmd_69::Global_cmd_69()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Global_cmd_69)
}
Global_cmd_69::Global_cmd_69(const Global_cmd_69& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pacmod_enable_, &from.pacmod_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_override_) -
    reinterpret_cast<char*>(&pacmod_enable_)) + sizeof(ignore_override_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Global_cmd_69)
}

void Global_cmd_69::SharedCtor() {
  ::memset(&pacmod_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_override_) -
      reinterpret_cast<char*>(&pacmod_enable_)) + sizeof(ignore_override_));
}

Global_cmd_69::~Global_cmd_69() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Global_cmd_69)
  SharedDtor();
}

void Global_cmd_69::SharedDtor() {
}

void Global_cmd_69::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Global_cmd_69& Global_cmd_69::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Global_cmd_69_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Global_cmd_69::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Global_cmd_69)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pacmod_enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_override_) -
        reinterpret_cast<char*>(&pacmod_enable_)) + sizeof(ignore_override_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Global_cmd_69::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_cmd_69_Pacmod_enableType_IsValid(val))) {
            _internal_set_pacmod_enable(static_cast<::apollo::canbus::Global_cmd_69_Pacmod_enableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_cmd_69_Clear_overrideType_IsValid(val))) {
            _internal_set_clear_override(static_cast<::apollo::canbus::Global_cmd_69_Clear_overrideType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Global_cmd_69_Ignore_overrideType_IsValid(val))) {
            _internal_set_ignore_override(static_cast<::apollo::canbus::Global_cmd_69_Ignore_overrideType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Global_cmd_69::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Global_cmd_69)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pacmod_enable(), target);
  }

  // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_clear_override(), target);
  }

  // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ignore_override(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Global_cmd_69)
  return target;
}

size_t Global_cmd_69::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Global_cmd_69)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pacmod_enable());
    }

    // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clear_override());
    }

    // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ignore_override());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Global_cmd_69::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Global_cmd_69)
  GOOGLE_DCHECK_NE(&from, this);
  const Global_cmd_69* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Global_cmd_69>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Global_cmd_69)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Global_cmd_69)
    MergeFrom(*source);
  }
}

void Global_cmd_69::MergeFrom(const Global_cmd_69& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Global_cmd_69)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pacmod_enable_ = from.pacmod_enable_;
    }
    if (cached_has_bits & 0x00000002u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000004u) {
      ignore_override_ = from.ignore_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Global_cmd_69::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Global_cmd_69)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global_cmd_69::CopyFrom(const Global_cmd_69& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Global_cmd_69)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_cmd_69::IsInitialized() const {
  return true;
}

void Global_cmd_69::InternalSwap(Global_cmd_69* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pacmod_enable_, other->pacmod_enable_);
  swap(clear_override_, other->clear_override_);
  swap(ignore_override_, other->ignore_override_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Global_cmd_69::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Parking_brake_status_rpt_80::InitAsDefaultInstance() {
}
class Parking_brake_status_rpt_80::_Internal {
 public:
  using HasBits = decltype(std::declval<Parking_brake_status_rpt_80>()._has_bits_);
  static void set_has_parking_brake_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Parking_brake_status_rpt_80::Parking_brake_status_rpt_80()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Parking_brake_status_rpt_80)
}
Parking_brake_status_rpt_80::Parking_brake_status_rpt_80(const Parking_brake_status_rpt_80& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parking_brake_enabled_ = from.parking_brake_enabled_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_brake_status_rpt_80)
}

void Parking_brake_status_rpt_80::SharedCtor() {
  parking_brake_enabled_ = 0;
}

Parking_brake_status_rpt_80::~Parking_brake_status_rpt_80() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_brake_status_rpt_80)
  SharedDtor();
}

void Parking_brake_status_rpt_80::SharedDtor() {
}

void Parking_brake_status_rpt_80::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Parking_brake_status_rpt_80& Parking_brake_status_rpt_80::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Parking_brake_status_rpt_80_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Parking_brake_status_rpt_80::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_brake_status_rpt_80)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parking_brake_enabled_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Parking_brake_status_rpt_80::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Parking_brake_status_rpt_80_Parking_brake_enabledType_IsValid(val))) {
            _internal_set_parking_brake_enabled(static_cast<::apollo::canbus::Parking_brake_status_rpt_80_Parking_brake_enabledType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parking_brake_status_rpt_80::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_brake_status_rpt_80)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_parking_brake_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_brake_status_rpt_80)
  return target;
}

size_t Parking_brake_status_rpt_80::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_brake_status_rpt_80)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parking_brake_enabled());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parking_brake_status_rpt_80::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  GOOGLE_DCHECK_NE(&from, this);
  const Parking_brake_status_rpt_80* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parking_brake_status_rpt_80>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Parking_brake_status_rpt_80)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Parking_brake_status_rpt_80)
    MergeFrom(*source);
  }
}

void Parking_brake_status_rpt_80::MergeFrom(const Parking_brake_status_rpt_80& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_parking_brake_enabled()) {
    _internal_set_parking_brake_enabled(from._internal_parking_brake_enabled());
  }
}

void Parking_brake_status_rpt_80::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parking_brake_status_rpt_80::CopyFrom(const Parking_brake_status_rpt_80& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_brake_status_rpt_80::IsInitialized() const {
  return true;
}

void Parking_brake_status_rpt_80::InternalSwap(Parking_brake_status_rpt_80* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parking_brake_enabled_, other->parking_brake_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parking_brake_status_rpt_80::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Yaw_rate_rpt_81::InitAsDefaultInstance() {
}
class Yaw_rate_rpt_81::_Internal {
 public:
  using HasBits = decltype(std::declval<Yaw_rate_rpt_81>()._has_bits_);
  static void set_has_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Yaw_rate_rpt_81::Yaw_rate_rpt_81()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Yaw_rate_rpt_81)
}
Yaw_rate_rpt_81::Yaw_rate_rpt_81(const Yaw_rate_rpt_81& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yaw_rate_ = from.yaw_rate_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Yaw_rate_rpt_81)
}

void Yaw_rate_rpt_81::SharedCtor() {
  yaw_rate_ = 0;
}

Yaw_rate_rpt_81::~Yaw_rate_rpt_81() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Yaw_rate_rpt_81)
  SharedDtor();
}

void Yaw_rate_rpt_81::SharedDtor() {
}

void Yaw_rate_rpt_81::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Yaw_rate_rpt_81& Yaw_rate_rpt_81::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Yaw_rate_rpt_81_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Yaw_rate_rpt_81::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Yaw_rate_rpt_81)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yaw_rate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Yaw_rate_rpt_81::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double yaw_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_yaw_rate(&has_bits);
          yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Yaw_rate_rpt_81::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Yaw_rate_rpt_81)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double yaw_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_yaw_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Yaw_rate_rpt_81)
  return target;
}

size_t Yaw_rate_rpt_81::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Yaw_rate_rpt_81)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double yaw_rate = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Yaw_rate_rpt_81::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Yaw_rate_rpt_81)
  GOOGLE_DCHECK_NE(&from, this);
  const Yaw_rate_rpt_81* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Yaw_rate_rpt_81>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Yaw_rate_rpt_81)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Yaw_rate_rpt_81)
    MergeFrom(*source);
  }
}

void Yaw_rate_rpt_81::MergeFrom(const Yaw_rate_rpt_81& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Yaw_rate_rpt_81)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_yaw_rate()) {
    _internal_set_yaw_rate(from._internal_yaw_rate());
  }
}

void Yaw_rate_rpt_81::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Yaw_rate_rpt_81)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Yaw_rate_rpt_81::CopyFrom(const Yaw_rate_rpt_81& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Yaw_rate_rpt_81)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Yaw_rate_rpt_81::IsInitialized() const {
  return true;
}

void Yaw_rate_rpt_81::InternalSwap(Yaw_rate_rpt_81* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(yaw_rate_, other->yaw_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Yaw_rate_rpt_81::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Horn_rpt_79::InitAsDefaultInstance() {
}
class Horn_rpt_79::_Internal {
 public:
  using HasBits = decltype(std::declval<Horn_rpt_79>()._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Horn_rpt_79::Horn_rpt_79()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Horn_rpt_79)
}
Horn_rpt_79::Horn_rpt_79(const Horn_rpt_79& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_input_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_rpt_79)
}

void Horn_rpt_79::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_input_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
}

Horn_rpt_79::~Horn_rpt_79() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_rpt_79)
  SharedDtor();
}

void Horn_rpt_79::SharedDtor() {
}

void Horn_rpt_79::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Horn_rpt_79& Horn_rpt_79::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Horn_rpt_79_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Horn_rpt_79::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_rpt_79)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Horn_rpt_79::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_79_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Horn_rpt_79_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_79_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Horn_rpt_79_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_rpt_79_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Horn_rpt_79_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Horn_rpt_79::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_rpt_79)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_rpt_79)
  return target;
}

size_t Horn_rpt_79::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_rpt_79)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Horn_rpt_79::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Horn_rpt_79)
  GOOGLE_DCHECK_NE(&from, this);
  const Horn_rpt_79* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Horn_rpt_79>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Horn_rpt_79)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Horn_rpt_79)
    MergeFrom(*source);
  }
}

void Horn_rpt_79::MergeFrom(const Horn_rpt_79& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_rpt_79)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Horn_rpt_79::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Horn_rpt_79)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Horn_rpt_79::CopyFrom(const Horn_rpt_79& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_rpt_79)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_rpt_79::IsInitialized() const {
  return true;
}

void Horn_rpt_79::InternalSwap(Horn_rpt_79* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Horn_rpt_79::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Horn_cmd_78::InitAsDefaultInstance() {
}
class Horn_cmd_78::_Internal {
 public:
  using HasBits = decltype(std::declval<Horn_cmd_78>()._has_bits_);
  static void set_has_horn_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Horn_cmd_78::Horn_cmd_78()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Horn_cmd_78)
}
Horn_cmd_78::Horn_cmd_78(const Horn_cmd_78& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  horn_cmd_ = from.horn_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_cmd_78)
}

void Horn_cmd_78::SharedCtor() {
  horn_cmd_ = 0;
}

Horn_cmd_78::~Horn_cmd_78() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_cmd_78)
  SharedDtor();
}

void Horn_cmd_78::SharedDtor() {
}

void Horn_cmd_78::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Horn_cmd_78& Horn_cmd_78::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Horn_cmd_78_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Horn_cmd_78::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_cmd_78)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  horn_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Horn_cmd_78::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Horn_cmd_78_Horn_cmdType_IsValid(val))) {
            _internal_set_horn_cmd(static_cast<::apollo::canbus::Horn_cmd_78_Horn_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Horn_cmd_78::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_cmd_78)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_horn_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_cmd_78)
  return target;
}

size_t Horn_cmd_78::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_cmd_78)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horn_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Horn_cmd_78::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Horn_cmd_78)
  GOOGLE_DCHECK_NE(&from, this);
  const Horn_cmd_78* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Horn_cmd_78>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Horn_cmd_78)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Horn_cmd_78)
    MergeFrom(*source);
  }
}

void Horn_cmd_78::MergeFrom(const Horn_cmd_78& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_cmd_78)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_horn_cmd()) {
    _internal_set_horn_cmd(from._internal_horn_cmd());
  }
}

void Horn_cmd_78::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Horn_cmd_78)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Horn_cmd_78::CopyFrom(const Horn_cmd_78& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_cmd_78)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_cmd_78::IsInitialized() const {
  return true;
}

void Horn_cmd_78::InternalSwap(Horn_cmd_78* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(horn_cmd_, other->horn_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Horn_cmd_78::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wiper_rpt_91::InitAsDefaultInstance() {
}
class Wiper_rpt_91::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_rpt_91>()._has_bits_);
  static void set_has_output_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commanded_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manual_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Wiper_rpt_91::Wiper_rpt_91()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wiper_rpt_91)
}
Wiper_rpt_91::Wiper_rpt_91(const Wiper_rpt_91& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_input_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_rpt_91)
}

void Wiper_rpt_91::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_input_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
}

Wiper_rpt_91::~Wiper_rpt_91() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_rpt_91)
  SharedDtor();
}

void Wiper_rpt_91::SharedDtor() {
}

void Wiper_rpt_91::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wiper_rpt_91& Wiper_rpt_91::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wiper_rpt_91_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Wiper_rpt_91::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_rpt_91)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Wiper_rpt_91::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_91_Output_valueType_IsValid(val))) {
            _internal_set_output_value(static_cast<::apollo::canbus::Wiper_rpt_91_Output_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_91_Commanded_valueType_IsValid(val))) {
            _internal_set_commanded_value(static_cast<::apollo::canbus::Wiper_rpt_91_Commanded_valueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_rpt_91_Manual_inputType_IsValid(val))) {
            _internal_set_manual_input(static_cast<::apollo::canbus::Wiper_rpt_91_Manual_inputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wiper_rpt_91::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_rpt_91)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_output_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commanded_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_manual_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_rpt_91)
  return target;
}

size_t Wiper_rpt_91::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_rpt_91)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_value());
    }

    // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commanded_value());
    }

    // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_manual_input());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wiper_rpt_91::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wiper_rpt_91)
  GOOGLE_DCHECK_NE(&from, this);
  const Wiper_rpt_91* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wiper_rpt_91>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wiper_rpt_91)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wiper_rpt_91)
    MergeFrom(*source);
  }
}

void Wiper_rpt_91::MergeFrom(const Wiper_rpt_91& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_rpt_91)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wiper_rpt_91::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wiper_rpt_91)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wiper_rpt_91::CopyFrom(const Wiper_rpt_91& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_rpt_91)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_rpt_91::IsInitialized() const {
  return true;
}

void Wiper_rpt_91::InternalSwap(Wiper_rpt_91* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_rpt_91::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle_speed_rpt_6f::InitAsDefaultInstance() {
}
class Vehicle_speed_rpt_6f::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle_speed_rpt_6f>()._has_bits_);
  static void set_has_vehicle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicle_speed_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Vehicle_speed_rpt_6f::Vehicle_speed_rpt_6f()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Vehicle_speed_rpt_6f)
}
Vehicle_speed_rpt_6f::Vehicle_speed_rpt_6f(const Vehicle_speed_rpt_6f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_speed_, &from.vehicle_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_speed_valid_) -
    reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_speed_rpt_6f)
}

void Vehicle_speed_rpt_6f::SharedCtor() {
  ::memset(&vehicle_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_speed_valid_) -
      reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
}

Vehicle_speed_rpt_6f::~Vehicle_speed_rpt_6f() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_speed_rpt_6f)
  SharedDtor();
}

void Vehicle_speed_rpt_6f::SharedDtor() {
}

void Vehicle_speed_rpt_6f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle_speed_rpt_6f& Vehicle_speed_rpt_6f::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_speed_rpt_6f_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Vehicle_speed_rpt_6f::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_speed_rpt_6f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&vehicle_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicle_speed_valid_) -
        reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle_speed_rpt_6f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double vehicle_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_vehicle_speed(&has_bits);
          vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Vehicle_speed_rpt_6f_Vehicle_speed_validType_IsValid(val))) {
            _internal_set_vehicle_speed_valid(static_cast<::apollo::canbus::Vehicle_speed_rpt_6f_Vehicle_speed_validType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle_speed_rpt_6f::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_speed_rpt_6f)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double vehicle_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_vehicle_speed(), target);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vehicle_speed_valid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_speed_rpt_6f)
  return target;
}

size_t Vehicle_speed_rpt_6f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_speed_rpt_6f)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double vehicle_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vehicle_speed_valid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_speed_rpt_6f::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_speed_rpt_6f* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle_speed_rpt_6f>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Vehicle_speed_rpt_6f)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Vehicle_speed_rpt_6f)
    MergeFrom(*source);
  }
}

void Vehicle_speed_rpt_6f::MergeFrom(const Vehicle_speed_rpt_6f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_speed_ = from.vehicle_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_speed_valid_ = from.vehicle_speed_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle_speed_rpt_6f::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_speed_rpt_6f::CopyFrom(const Vehicle_speed_rpt_6f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_speed_rpt_6f::IsInitialized() const {
  return true;
}

void Vehicle_speed_rpt_6f::InternalSwap(Vehicle_speed_rpt_6f* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicle_speed_, other->vehicle_speed_);
  swap(vehicle_speed_valid_, other->vehicle_speed_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle_speed_rpt_6f::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Headlight_cmd_76::InitAsDefaultInstance() {
}
class Headlight_cmd_76::_Internal {
 public:
  using HasBits = decltype(std::declval<Headlight_cmd_76>()._has_bits_);
  static void set_has_headlight_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Headlight_cmd_76::Headlight_cmd_76()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Headlight_cmd_76)
}
Headlight_cmd_76::Headlight_cmd_76(const Headlight_cmd_76& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headlight_cmd_ = from.headlight_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_cmd_76)
}

void Headlight_cmd_76::SharedCtor() {
  headlight_cmd_ = 0;
}

Headlight_cmd_76::~Headlight_cmd_76() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_cmd_76)
  SharedDtor();
}

void Headlight_cmd_76::SharedDtor() {
}

void Headlight_cmd_76::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Headlight_cmd_76& Headlight_cmd_76::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Headlight_cmd_76_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Headlight_cmd_76::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_cmd_76)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headlight_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Headlight_cmd_76::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Headlight_cmd_76_Headlight_cmdType_IsValid(val))) {
            _internal_set_headlight_cmd(static_cast<::apollo::canbus::Headlight_cmd_76_Headlight_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Headlight_cmd_76::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_cmd_76)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_headlight_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_cmd_76)
  return target;
}

size_t Headlight_cmd_76::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_cmd_76)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_headlight_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Headlight_cmd_76::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Headlight_cmd_76)
  GOOGLE_DCHECK_NE(&from, this);
  const Headlight_cmd_76* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Headlight_cmd_76>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Headlight_cmd_76)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Headlight_cmd_76)
    MergeFrom(*source);
  }
}

void Headlight_cmd_76::MergeFrom(const Headlight_cmd_76& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_cmd_76)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_headlight_cmd()) {
    _internal_set_headlight_cmd(from._internal_headlight_cmd());
  }
}

void Headlight_cmd_76::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Headlight_cmd_76)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headlight_cmd_76::CopyFrom(const Headlight_cmd_76& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_cmd_76)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_cmd_76::IsInitialized() const {
  return true;
}

void Headlight_cmd_76::InternalSwap(Headlight_cmd_76* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(headlight_cmd_, other->headlight_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Headlight_cmd_76::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_motor_rpt_2_74::InitAsDefaultInstance() {
}
class Steering_motor_rpt_2_74::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_2_74>()._has_bits_);
  static void set_has_encoder_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motor_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Steering_motor_rpt_2_74::Steering_motor_rpt_2_74()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_2_74)
}
Steering_motor_rpt_2_74::Steering_motor_rpt_2_74(const Steering_motor_rpt_2_74& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoder_temperature_, &from.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_speed_) -
    reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_2_74)
}

void Steering_motor_rpt_2_74::SharedCtor() {
  ::memset(&encoder_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_speed_) -
      reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
}

Steering_motor_rpt_2_74::~Steering_motor_rpt_2_74() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_2_74)
  SharedDtor();
}

void Steering_motor_rpt_2_74::SharedDtor() {
}

void Steering_motor_rpt_2_74::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_motor_rpt_2_74& Steering_motor_rpt_2_74::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_motor_rpt_2_74_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_2_74::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_2_74)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_speed_) -
        reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_motor_rpt_2_74::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 encoder_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_encoder_temperature(&has_bits);
          encoder_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 motor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_motor_temperature(&has_bits);
          motor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double angular_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_angular_speed(&has_bits);
          angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_motor_rpt_2_74::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_2_74)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angular_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_2_74)
  return target;
}

size_t Steering_motor_rpt_2_74::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_2_74)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 encoder_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_motor_temperature());
    }

    // optional double angular_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_2_74::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_2_74* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_motor_rpt_2_74>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_2_74)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_2_74)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_2_74::MergeFrom(const Steering_motor_rpt_2_74& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encoder_temperature_ = from.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      motor_temperature_ = from.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_speed_ = from.angular_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_2_74::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_2_74::CopyFrom(const Steering_motor_rpt_2_74& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_2_74::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_2_74::InternalSwap(Steering_motor_rpt_2_74* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encoder_temperature_, other->encoder_temperature_);
  swap(motor_temperature_, other->motor_temperature_);
  swap(angular_speed_, other->angular_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_2_74::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_motor_rpt_2_71::InitAsDefaultInstance() {
}
class Brake_motor_rpt_2_71::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_2_71>()._has_bits_);
  static void set_has_encoder_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_motor_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Brake_motor_rpt_2_71::Brake_motor_rpt_2_71()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_2_71)
}
Brake_motor_rpt_2_71::Brake_motor_rpt_2_71(const Brake_motor_rpt_2_71& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoder_temperature_, &from.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_speed_) -
    reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_2_71)
}

void Brake_motor_rpt_2_71::SharedCtor() {
  ::memset(&encoder_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_speed_) -
      reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
}

Brake_motor_rpt_2_71::~Brake_motor_rpt_2_71() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_2_71)
  SharedDtor();
}

void Brake_motor_rpt_2_71::SharedDtor() {
}

void Brake_motor_rpt_2_71::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_motor_rpt_2_71& Brake_motor_rpt_2_71::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_motor_rpt_2_71_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_2_71::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_2_71)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_speed_) -
        reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_motor_rpt_2_71::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 encoder_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_encoder_temperature(&has_bits);
          encoder_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 motor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_motor_temperature(&has_bits);
          motor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double angular_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_angular_speed(&has_bits);
          angular_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_motor_rpt_2_71::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_2_71)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_angular_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_2_71)
  return target;
}

size_t Brake_motor_rpt_2_71::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_2_71)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 encoder_temperature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_motor_temperature());
    }

    // optional double angular_speed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_2_71::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_2_71* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_motor_rpt_2_71>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_2_71)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_2_71)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_2_71::MergeFrom(const Brake_motor_rpt_2_71& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encoder_temperature_ = from.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      motor_temperature_ = from.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_speed_ = from.angular_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_2_71::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_2_71::CopyFrom(const Brake_motor_rpt_2_71& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_2_71::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_2_71::InternalSwap(Brake_motor_rpt_2_71* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(encoder_temperature_, other->encoder_temperature_);
  swap(motor_temperature_, other->motor_temperature_);
  swap(angular_speed_, other->angular_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_2_71::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steering_motor_rpt_1_73::InitAsDefaultInstance() {
}
class Steering_motor_rpt_1_73::_Internal {
 public:
  using HasBits = decltype(std::declval<Steering_motor_rpt_1_73>()._has_bits_);
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shaft_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Steering_motor_rpt_1_73::Steering_motor_rpt_1_73()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_1_73)
}
Steering_motor_rpt_1_73::Steering_motor_rpt_1_73(const Steering_motor_rpt_1_73& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&motor_current_, &from.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&shaft_position_) -
    reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_1_73)
}

void Steering_motor_rpt_1_73::SharedCtor() {
  ::memset(&motor_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shaft_position_) -
      reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
}

Steering_motor_rpt_1_73::~Steering_motor_rpt_1_73() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_1_73)
  SharedDtor();
}

void Steering_motor_rpt_1_73::SharedDtor() {
}

void Steering_motor_rpt_1_73::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steering_motor_rpt_1_73& Steering_motor_rpt_1_73::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steering_motor_rpt_1_73_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_1_73::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_1_73)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shaft_position_) -
        reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steering_motor_rpt_1_73::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double motor_current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_motor_current(&has_bits);
          motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double shaft_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_shaft_position(&has_bits);
          shaft_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steering_motor_rpt_1_73::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_1_73)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_shaft_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_1_73)
  return target;
}

size_t Steering_motor_rpt_1_73::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_1_73)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double motor_current = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_1_73::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_1_73* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steering_motor_rpt_1_73>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_1_73)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_1_73)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_1_73::MergeFrom(const Steering_motor_rpt_1_73& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      motor_current_ = from.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      shaft_position_ = from.shaft_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_1_73::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_1_73::CopyFrom(const Steering_motor_rpt_1_73& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_1_73::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_1_73::InternalSwap(Steering_motor_rpt_1_73* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(motor_current_, other->motor_current_);
  swap(shaft_position_, other->shaft_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steering_motor_rpt_1_73::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wiper_cmd_90::InitAsDefaultInstance() {
}
class Wiper_cmd_90::_Internal {
 public:
  using HasBits = decltype(std::declval<Wiper_cmd_90>()._has_bits_);
  static void set_has_wiper_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Wiper_cmd_90::Wiper_cmd_90()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wiper_cmd_90)
}
Wiper_cmd_90::Wiper_cmd_90(const Wiper_cmd_90& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wiper_cmd_ = from.wiper_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_cmd_90)
}

void Wiper_cmd_90::SharedCtor() {
  wiper_cmd_ = 0;
}

Wiper_cmd_90::~Wiper_cmd_90() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_cmd_90)
  SharedDtor();
}

void Wiper_cmd_90::SharedDtor() {
}

void Wiper_cmd_90::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wiper_cmd_90& Wiper_cmd_90::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wiper_cmd_90_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Wiper_cmd_90::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_cmd_90)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wiper_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Wiper_cmd_90::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Wiper_cmd_90_Wiper_cmdType_IsValid(val))) {
            _internal_set_wiper_cmd(static_cast<::apollo::canbus::Wiper_cmd_90_Wiper_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wiper_cmd_90::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_cmd_90)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_wiper_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_cmd_90)
  return target;
}

size_t Wiper_cmd_90::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_cmd_90)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wiper_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wiper_cmd_90::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wiper_cmd_90)
  GOOGLE_DCHECK_NE(&from, this);
  const Wiper_cmd_90* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wiper_cmd_90>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wiper_cmd_90)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wiper_cmd_90)
    MergeFrom(*source);
  }
}

void Wiper_cmd_90::MergeFrom(const Wiper_cmd_90& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_cmd_90)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wiper_cmd()) {
    _internal_set_wiper_cmd(from._internal_wiper_cmd());
  }
}

void Wiper_cmd_90::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wiper_cmd_90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wiper_cmd_90::CopyFrom(const Wiper_cmd_90& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_cmd_90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_cmd_90::IsInitialized() const {
  return true;
}

void Wiper_cmd_90::InternalSwap(Wiper_cmd_90* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wiper_cmd_, other->wiper_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wiper_cmd_90::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_motor_rpt_3_72::InitAsDefaultInstance() {
}
class Brake_motor_rpt_3_72::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_motor_rpt_3_72>()._has_bits_);
  static void set_has_torque_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_motor_rpt_3_72::Brake_motor_rpt_3_72()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_3_72)
}
Brake_motor_rpt_3_72::Brake_motor_rpt_3_72(const Brake_motor_rpt_3_72& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&torque_output_, &from.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_input_) -
    reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_3_72)
}

void Brake_motor_rpt_3_72::SharedCtor() {
  ::memset(&torque_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_input_) -
      reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
}

Brake_motor_rpt_3_72::~Brake_motor_rpt_3_72() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_3_72)
  SharedDtor();
}

void Brake_motor_rpt_3_72::SharedDtor() {
}

void Brake_motor_rpt_3_72::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_motor_rpt_3_72& Brake_motor_rpt_3_72::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_motor_rpt_3_72_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_3_72::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_3_72)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&torque_input_) -
        reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_motor_rpt_3_72::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double torque_output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_torque_output(&has_bits);
          torque_output_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double torque_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_torque_input(&has_bits);
          torque_input_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_motor_rpt_3_72::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_3_72)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_3_72)
  return target;
}

size_t Brake_motor_rpt_3_72::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_3_72)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double torque_output = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_3_72::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_3_72* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_motor_rpt_3_72>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_3_72)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_3_72)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_3_72::MergeFrom(const Brake_motor_rpt_3_72& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      torque_output_ = from.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      torque_input_ = from.torque_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_3_72::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_3_72::CopyFrom(const Brake_motor_rpt_3_72& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_3_72::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_3_72::InternalSwap(Brake_motor_rpt_3_72* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(torque_output_, other->torque_output_);
  swap(torque_input_, other->torque_input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_motor_rpt_3_72::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gem::InitAsDefaultInstance() {
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->global_rpt_6a_ = const_cast< ::apollo::canbus::Global_rpt_6a*>(
      ::apollo::canbus::Global_rpt_6a::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_cmd_6b_ = const_cast< ::apollo::canbus::Brake_cmd_6b*>(
      ::apollo::canbus::Brake_cmd_6b::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_rpt_6c_ = const_cast< ::apollo::canbus::Brake_rpt_6c*>(
      ::apollo::canbus::Brake_rpt_6c::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_cmd_6d_ = const_cast< ::apollo::canbus::Steering_cmd_6d*>(
      ::apollo::canbus::Steering_cmd_6d::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_rpt_1_6e_ = const_cast< ::apollo::canbus::Steering_rpt_1_6e*>(
      ::apollo::canbus::Steering_rpt_1_6e::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->wheel_speed_rpt_7a_ = const_cast< ::apollo::canbus::Wheel_speed_rpt_7a*>(
      ::apollo::canbus::Wheel_speed_rpt_7a::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->date_time_rpt_83_ = const_cast< ::apollo::canbus::Date_time_rpt_83*>(
      ::apollo::canbus::Date_time_rpt_83::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_motor_rpt_1_70_ = const_cast< ::apollo::canbus::Brake_motor_rpt_1_70*>(
      ::apollo::canbus::Brake_motor_rpt_1_70::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->headlight_rpt_77_ = const_cast< ::apollo::canbus::Headlight_rpt_77*>(
      ::apollo::canbus::Headlight_rpt_77::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->accel_rpt_68_ = const_cast< ::apollo::canbus::Accel_rpt_68*>(
      ::apollo::canbus::Accel_rpt_68::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_motor_rpt_3_75_ = const_cast< ::apollo::canbus::Steering_motor_rpt_3_75*>(
      ::apollo::canbus::Steering_motor_rpt_3_75::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->turn_cmd_63_ = const_cast< ::apollo::canbus::Turn_cmd_63*>(
      ::apollo::canbus::Turn_cmd_63::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->turn_rpt_64_ = const_cast< ::apollo::canbus::Turn_rpt_64*>(
      ::apollo::canbus::Turn_rpt_64::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->shift_cmd_65_ = const_cast< ::apollo::canbus::Shift_cmd_65*>(
      ::apollo::canbus::Shift_cmd_65::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->shift_rpt_66_ = const_cast< ::apollo::canbus::Shift_rpt_66*>(
      ::apollo::canbus::Shift_rpt_66::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->accel_cmd_67_ = const_cast< ::apollo::canbus::Accel_cmd_67*>(
      ::apollo::canbus::Accel_cmd_67::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->lat_lon_heading_rpt_82_ = const_cast< ::apollo::canbus::Lat_lon_heading_rpt_82*>(
      ::apollo::canbus::Lat_lon_heading_rpt_82::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->global_cmd_69_ = const_cast< ::apollo::canbus::Global_cmd_69*>(
      ::apollo::canbus::Global_cmd_69::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->parking_brake_status_rpt_80_ = const_cast< ::apollo::canbus::Parking_brake_status_rpt_80*>(
      ::apollo::canbus::Parking_brake_status_rpt_80::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->yaw_rate_rpt_81_ = const_cast< ::apollo::canbus::Yaw_rate_rpt_81*>(
      ::apollo::canbus::Yaw_rate_rpt_81::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->horn_rpt_79_ = const_cast< ::apollo::canbus::Horn_rpt_79*>(
      ::apollo::canbus::Horn_rpt_79::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->horn_cmd_78_ = const_cast< ::apollo::canbus::Horn_cmd_78*>(
      ::apollo::canbus::Horn_cmd_78::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->wiper_rpt_91_ = const_cast< ::apollo::canbus::Wiper_rpt_91*>(
      ::apollo::canbus::Wiper_rpt_91::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->vehicle_speed_rpt_6f_ = const_cast< ::apollo::canbus::Vehicle_speed_rpt_6f*>(
      ::apollo::canbus::Vehicle_speed_rpt_6f::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->headlight_cmd_76_ = const_cast< ::apollo::canbus::Headlight_cmd_76*>(
      ::apollo::canbus::Headlight_cmd_76::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_motor_rpt_2_74_ = const_cast< ::apollo::canbus::Steering_motor_rpt_2_74*>(
      ::apollo::canbus::Steering_motor_rpt_2_74::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_motor_rpt_2_71_ = const_cast< ::apollo::canbus::Brake_motor_rpt_2_71*>(
      ::apollo::canbus::Brake_motor_rpt_2_71::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_motor_rpt_1_73_ = const_cast< ::apollo::canbus::Steering_motor_rpt_1_73*>(
      ::apollo::canbus::Steering_motor_rpt_1_73::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->wiper_cmd_90_ = const_cast< ::apollo::canbus::Wiper_cmd_90*>(
      ::apollo::canbus::Wiper_cmd_90::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_motor_rpt_3_72_ = const_cast< ::apollo::canbus::Brake_motor_rpt_3_72*>(
      ::apollo::canbus::Brake_motor_rpt_3_72::internal_default_instance());
}
class Gem::_Internal {
 public:
  using HasBits = decltype(std::declval<Gem>()._has_bits_);
  static const ::apollo::canbus::Global_rpt_6a& global_rpt_6a(const Gem* msg);
  static void set_has_global_rpt_6a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Brake_cmd_6b& brake_cmd_6b(const Gem* msg);
  static void set_has_brake_cmd_6b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Brake_rpt_6c& brake_rpt_6c(const Gem* msg);
  static void set_has_brake_rpt_6c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Steering_cmd_6d& steering_cmd_6d(const Gem* msg);
  static void set_has_steering_cmd_6d(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Steering_rpt_1_6e& steering_rpt_1_6e(const Gem* msg);
  static void set_has_steering_rpt_1_6e(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Wheel_speed_rpt_7a& wheel_speed_rpt_7a(const Gem* msg);
  static void set_has_wheel_speed_rpt_7a(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Date_time_rpt_83& date_time_rpt_83(const Gem* msg);
  static void set_has_date_time_rpt_83(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_1_70& brake_motor_rpt_1_70(const Gem* msg);
  static void set_has_brake_motor_rpt_1_70(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Headlight_rpt_77& headlight_rpt_77(const Gem* msg);
  static void set_has_headlight_rpt_77(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Accel_rpt_68& accel_rpt_68(const Gem* msg);
  static void set_has_accel_rpt_68(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_3_75& steering_motor_rpt_3_75(const Gem* msg);
  static void set_has_steering_motor_rpt_3_75(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Turn_cmd_63& turn_cmd_63(const Gem* msg);
  static void set_has_turn_cmd_63(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Turn_rpt_64& turn_rpt_64(const Gem* msg);
  static void set_has_turn_rpt_64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::Shift_cmd_65& shift_cmd_65(const Gem* msg);
  static void set_has_shift_cmd_65(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::canbus::Shift_rpt_66& shift_rpt_66(const Gem* msg);
  static void set_has_shift_rpt_66(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::canbus::Accel_cmd_67& accel_cmd_67(const Gem* msg);
  static void set_has_accel_cmd_67(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::canbus::Lat_lon_heading_rpt_82& lat_lon_heading_rpt_82(const Gem* msg);
  static void set_has_lat_lon_heading_rpt_82(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::canbus::Global_cmd_69& global_cmd_69(const Gem* msg);
  static void set_has_global_cmd_69(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::canbus::Parking_brake_status_rpt_80& parking_brake_status_rpt_80(const Gem* msg);
  static void set_has_parking_brake_status_rpt_80(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::canbus::Yaw_rate_rpt_81& yaw_rate_rpt_81(const Gem* msg);
  static void set_has_yaw_rate_rpt_81(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::canbus::Horn_rpt_79& horn_rpt_79(const Gem* msg);
  static void set_has_horn_rpt_79(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::apollo::canbus::Horn_cmd_78& horn_cmd_78(const Gem* msg);
  static void set_has_horn_cmd_78(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::apollo::canbus::Wiper_rpt_91& wiper_rpt_91(const Gem* msg);
  static void set_has_wiper_rpt_91(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::canbus::Vehicle_speed_rpt_6f& vehicle_speed_rpt_6f(const Gem* msg);
  static void set_has_vehicle_speed_rpt_6f(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::canbus::Headlight_cmd_76& headlight_cmd_76(const Gem* msg);
  static void set_has_headlight_cmd_76(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_2_74& steering_motor_rpt_2_74(const Gem* msg);
  static void set_has_steering_motor_rpt_2_74(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_2_71& brake_motor_rpt_2_71(const Gem* msg);
  static void set_has_brake_motor_rpt_2_71(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::apollo::canbus::Steering_motor_rpt_1_73& steering_motor_rpt_1_73(const Gem* msg);
  static void set_has_steering_motor_rpt_1_73(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::apollo::canbus::Wiper_cmd_90& wiper_cmd_90(const Gem* msg);
  static void set_has_wiper_cmd_90(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::apollo::canbus::Brake_motor_rpt_3_72& brake_motor_rpt_3_72(const Gem* msg);
  static void set_has_brake_motor_rpt_3_72(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::apollo::canbus::Global_rpt_6a&
Gem::_Internal::global_rpt_6a(const Gem* msg) {
  return *msg->global_rpt_6a_;
}
const ::apollo::canbus::Brake_cmd_6b&
Gem::_Internal::brake_cmd_6b(const Gem* msg) {
  return *msg->brake_cmd_6b_;
}
const ::apollo::canbus::Brake_rpt_6c&
Gem::_Internal::brake_rpt_6c(const Gem* msg) {
  return *msg->brake_rpt_6c_;
}
const ::apollo::canbus::Steering_cmd_6d&
Gem::_Internal::steering_cmd_6d(const Gem* msg) {
  return *msg->steering_cmd_6d_;
}
const ::apollo::canbus::Steering_rpt_1_6e&
Gem::_Internal::steering_rpt_1_6e(const Gem* msg) {
  return *msg->steering_rpt_1_6e_;
}
const ::apollo::canbus::Wheel_speed_rpt_7a&
Gem::_Internal::wheel_speed_rpt_7a(const Gem* msg) {
  return *msg->wheel_speed_rpt_7a_;
}
const ::apollo::canbus::Date_time_rpt_83&
Gem::_Internal::date_time_rpt_83(const Gem* msg) {
  return *msg->date_time_rpt_83_;
}
const ::apollo::canbus::Brake_motor_rpt_1_70&
Gem::_Internal::brake_motor_rpt_1_70(const Gem* msg) {
  return *msg->brake_motor_rpt_1_70_;
}
const ::apollo::canbus::Headlight_rpt_77&
Gem::_Internal::headlight_rpt_77(const Gem* msg) {
  return *msg->headlight_rpt_77_;
}
const ::apollo::canbus::Accel_rpt_68&
Gem::_Internal::accel_rpt_68(const Gem* msg) {
  return *msg->accel_rpt_68_;
}
const ::apollo::canbus::Steering_motor_rpt_3_75&
Gem::_Internal::steering_motor_rpt_3_75(const Gem* msg) {
  return *msg->steering_motor_rpt_3_75_;
}
const ::apollo::canbus::Turn_cmd_63&
Gem::_Internal::turn_cmd_63(const Gem* msg) {
  return *msg->turn_cmd_63_;
}
const ::apollo::canbus::Turn_rpt_64&
Gem::_Internal::turn_rpt_64(const Gem* msg) {
  return *msg->turn_rpt_64_;
}
const ::apollo::canbus::Shift_cmd_65&
Gem::_Internal::shift_cmd_65(const Gem* msg) {
  return *msg->shift_cmd_65_;
}
const ::apollo::canbus::Shift_rpt_66&
Gem::_Internal::shift_rpt_66(const Gem* msg) {
  return *msg->shift_rpt_66_;
}
const ::apollo::canbus::Accel_cmd_67&
Gem::_Internal::accel_cmd_67(const Gem* msg) {
  return *msg->accel_cmd_67_;
}
const ::apollo::canbus::Lat_lon_heading_rpt_82&
Gem::_Internal::lat_lon_heading_rpt_82(const Gem* msg) {
  return *msg->lat_lon_heading_rpt_82_;
}
const ::apollo::canbus::Global_cmd_69&
Gem::_Internal::global_cmd_69(const Gem* msg) {
  return *msg->global_cmd_69_;
}
const ::apollo::canbus::Parking_brake_status_rpt_80&
Gem::_Internal::parking_brake_status_rpt_80(const Gem* msg) {
  return *msg->parking_brake_status_rpt_80_;
}
const ::apollo::canbus::Yaw_rate_rpt_81&
Gem::_Internal::yaw_rate_rpt_81(const Gem* msg) {
  return *msg->yaw_rate_rpt_81_;
}
const ::apollo::canbus::Horn_rpt_79&
Gem::_Internal::horn_rpt_79(const Gem* msg) {
  return *msg->horn_rpt_79_;
}
const ::apollo::canbus::Horn_cmd_78&
Gem::_Internal::horn_cmd_78(const Gem* msg) {
  return *msg->horn_cmd_78_;
}
const ::apollo::canbus::Wiper_rpt_91&
Gem::_Internal::wiper_rpt_91(const Gem* msg) {
  return *msg->wiper_rpt_91_;
}
const ::apollo::canbus::Vehicle_speed_rpt_6f&
Gem::_Internal::vehicle_speed_rpt_6f(const Gem* msg) {
  return *msg->vehicle_speed_rpt_6f_;
}
const ::apollo::canbus::Headlight_cmd_76&
Gem::_Internal::headlight_cmd_76(const Gem* msg) {
  return *msg->headlight_cmd_76_;
}
const ::apollo::canbus::Steering_motor_rpt_2_74&
Gem::_Internal::steering_motor_rpt_2_74(const Gem* msg) {
  return *msg->steering_motor_rpt_2_74_;
}
const ::apollo::canbus::Brake_motor_rpt_2_71&
Gem::_Internal::brake_motor_rpt_2_71(const Gem* msg) {
  return *msg->brake_motor_rpt_2_71_;
}
const ::apollo::canbus::Steering_motor_rpt_1_73&
Gem::_Internal::steering_motor_rpt_1_73(const Gem* msg) {
  return *msg->steering_motor_rpt_1_73_;
}
const ::apollo::canbus::Wiper_cmd_90&
Gem::_Internal::wiper_cmd_90(const Gem* msg) {
  return *msg->wiper_cmd_90_;
}
const ::apollo::canbus::Brake_motor_rpt_3_72&
Gem::_Internal::brake_motor_rpt_3_72(const Gem* msg) {
  return *msg->brake_motor_rpt_3_72_;
}
Gem::Gem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gem)
}
Gem::Gem(const Gem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_global_rpt_6a()) {
    global_rpt_6a_ = new ::apollo::canbus::Global_rpt_6a(*from.global_rpt_6a_);
  } else {
    global_rpt_6a_ = nullptr;
  }
  if (from._internal_has_brake_cmd_6b()) {
    brake_cmd_6b_ = new ::apollo::canbus::Brake_cmd_6b(*from.brake_cmd_6b_);
  } else {
    brake_cmd_6b_ = nullptr;
  }
  if (from._internal_has_brake_rpt_6c()) {
    brake_rpt_6c_ = new ::apollo::canbus::Brake_rpt_6c(*from.brake_rpt_6c_);
  } else {
    brake_rpt_6c_ = nullptr;
  }
  if (from._internal_has_steering_cmd_6d()) {
    steering_cmd_6d_ = new ::apollo::canbus::Steering_cmd_6d(*from.steering_cmd_6d_);
  } else {
    steering_cmd_6d_ = nullptr;
  }
  if (from._internal_has_steering_rpt_1_6e()) {
    steering_rpt_1_6e_ = new ::apollo::canbus::Steering_rpt_1_6e(*from.steering_rpt_1_6e_);
  } else {
    steering_rpt_1_6e_ = nullptr;
  }
  if (from._internal_has_wheel_speed_rpt_7a()) {
    wheel_speed_rpt_7a_ = new ::apollo::canbus::Wheel_speed_rpt_7a(*from.wheel_speed_rpt_7a_);
  } else {
    wheel_speed_rpt_7a_ = nullptr;
  }
  if (from._internal_has_date_time_rpt_83()) {
    date_time_rpt_83_ = new ::apollo::canbus::Date_time_rpt_83(*from.date_time_rpt_83_);
  } else {
    date_time_rpt_83_ = nullptr;
  }
  if (from._internal_has_brake_motor_rpt_1_70()) {
    brake_motor_rpt_1_70_ = new ::apollo::canbus::Brake_motor_rpt_1_70(*from.brake_motor_rpt_1_70_);
  } else {
    brake_motor_rpt_1_70_ = nullptr;
  }
  if (from._internal_has_headlight_rpt_77()) {
    headlight_rpt_77_ = new ::apollo::canbus::Headlight_rpt_77(*from.headlight_rpt_77_);
  } else {
    headlight_rpt_77_ = nullptr;
  }
  if (from._internal_has_accel_rpt_68()) {
    accel_rpt_68_ = new ::apollo::canbus::Accel_rpt_68(*from.accel_rpt_68_);
  } else {
    accel_rpt_68_ = nullptr;
  }
  if (from._internal_has_steering_motor_rpt_3_75()) {
    steering_motor_rpt_3_75_ = new ::apollo::canbus::Steering_motor_rpt_3_75(*from.steering_motor_rpt_3_75_);
  } else {
    steering_motor_rpt_3_75_ = nullptr;
  }
  if (from._internal_has_turn_cmd_63()) {
    turn_cmd_63_ = new ::apollo::canbus::Turn_cmd_63(*from.turn_cmd_63_);
  } else {
    turn_cmd_63_ = nullptr;
  }
  if (from._internal_has_turn_rpt_64()) {
    turn_rpt_64_ = new ::apollo::canbus::Turn_rpt_64(*from.turn_rpt_64_);
  } else {
    turn_rpt_64_ = nullptr;
  }
  if (from._internal_has_shift_cmd_65()) {
    shift_cmd_65_ = new ::apollo::canbus::Shift_cmd_65(*from.shift_cmd_65_);
  } else {
    shift_cmd_65_ = nullptr;
  }
  if (from._internal_has_shift_rpt_66()) {
    shift_rpt_66_ = new ::apollo::canbus::Shift_rpt_66(*from.shift_rpt_66_);
  } else {
    shift_rpt_66_ = nullptr;
  }
  if (from._internal_has_accel_cmd_67()) {
    accel_cmd_67_ = new ::apollo::canbus::Accel_cmd_67(*from.accel_cmd_67_);
  } else {
    accel_cmd_67_ = nullptr;
  }
  if (from._internal_has_lat_lon_heading_rpt_82()) {
    lat_lon_heading_rpt_82_ = new ::apollo::canbus::Lat_lon_heading_rpt_82(*from.lat_lon_heading_rpt_82_);
  } else {
    lat_lon_heading_rpt_82_ = nullptr;
  }
  if (from._internal_has_global_cmd_69()) {
    global_cmd_69_ = new ::apollo::canbus::Global_cmd_69(*from.global_cmd_69_);
  } else {
    global_cmd_69_ = nullptr;
  }
  if (from._internal_has_parking_brake_status_rpt_80()) {
    parking_brake_status_rpt_80_ = new ::apollo::canbus::Parking_brake_status_rpt_80(*from.parking_brake_status_rpt_80_);
  } else {
    parking_brake_status_rpt_80_ = nullptr;
  }
  if (from._internal_has_yaw_rate_rpt_81()) {
    yaw_rate_rpt_81_ = new ::apollo::canbus::Yaw_rate_rpt_81(*from.yaw_rate_rpt_81_);
  } else {
    yaw_rate_rpt_81_ = nullptr;
  }
  if (from._internal_has_horn_rpt_79()) {
    horn_rpt_79_ = new ::apollo::canbus::Horn_rpt_79(*from.horn_rpt_79_);
  } else {
    horn_rpt_79_ = nullptr;
  }
  if (from._internal_has_horn_cmd_78()) {
    horn_cmd_78_ = new ::apollo::canbus::Horn_cmd_78(*from.horn_cmd_78_);
  } else {
    horn_cmd_78_ = nullptr;
  }
  if (from._internal_has_wiper_rpt_91()) {
    wiper_rpt_91_ = new ::apollo::canbus::Wiper_rpt_91(*from.wiper_rpt_91_);
  } else {
    wiper_rpt_91_ = nullptr;
  }
  if (from._internal_has_vehicle_speed_rpt_6f()) {
    vehicle_speed_rpt_6f_ = new ::apollo::canbus::Vehicle_speed_rpt_6f(*from.vehicle_speed_rpt_6f_);
  } else {
    vehicle_speed_rpt_6f_ = nullptr;
  }
  if (from._internal_has_headlight_cmd_76()) {
    headlight_cmd_76_ = new ::apollo::canbus::Headlight_cmd_76(*from.headlight_cmd_76_);
  } else {
    headlight_cmd_76_ = nullptr;
  }
  if (from._internal_has_steering_motor_rpt_2_74()) {
    steering_motor_rpt_2_74_ = new ::apollo::canbus::Steering_motor_rpt_2_74(*from.steering_motor_rpt_2_74_);
  } else {
    steering_motor_rpt_2_74_ = nullptr;
  }
  if (from._internal_has_brake_motor_rpt_2_71()) {
    brake_motor_rpt_2_71_ = new ::apollo::canbus::Brake_motor_rpt_2_71(*from.brake_motor_rpt_2_71_);
  } else {
    brake_motor_rpt_2_71_ = nullptr;
  }
  if (from._internal_has_steering_motor_rpt_1_73()) {
    steering_motor_rpt_1_73_ = new ::apollo::canbus::Steering_motor_rpt_1_73(*from.steering_motor_rpt_1_73_);
  } else {
    steering_motor_rpt_1_73_ = nullptr;
  }
  if (from._internal_has_wiper_cmd_90()) {
    wiper_cmd_90_ = new ::apollo::canbus::Wiper_cmd_90(*from.wiper_cmd_90_);
  } else {
    wiper_cmd_90_ = nullptr;
  }
  if (from._internal_has_brake_motor_rpt_3_72()) {
    brake_motor_rpt_3_72_ = new ::apollo::canbus::Brake_motor_rpt_3_72(*from.brake_motor_rpt_3_72_);
  } else {
    brake_motor_rpt_3_72_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gem)
}

void Gem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Gem_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  ::memset(&global_rpt_6a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_motor_rpt_3_72_) -
      reinterpret_cast<char*>(&global_rpt_6a_)) + sizeof(brake_motor_rpt_3_72_));
}

Gem::~Gem() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gem)
  SharedDtor();
}

void Gem::SharedDtor() {
  if (this != internal_default_instance()) delete global_rpt_6a_;
  if (this != internal_default_instance()) delete brake_cmd_6b_;
  if (this != internal_default_instance()) delete brake_rpt_6c_;
  if (this != internal_default_instance()) delete steering_cmd_6d_;
  if (this != internal_default_instance()) delete steering_rpt_1_6e_;
  if (this != internal_default_instance()) delete wheel_speed_rpt_7a_;
  if (this != internal_default_instance()) delete date_time_rpt_83_;
  if (this != internal_default_instance()) delete brake_motor_rpt_1_70_;
  if (this != internal_default_instance()) delete headlight_rpt_77_;
  if (this != internal_default_instance()) delete accel_rpt_68_;
  if (this != internal_default_instance()) delete steering_motor_rpt_3_75_;
  if (this != internal_default_instance()) delete turn_cmd_63_;
  if (this != internal_default_instance()) delete turn_rpt_64_;
  if (this != internal_default_instance()) delete shift_cmd_65_;
  if (this != internal_default_instance()) delete shift_rpt_66_;
  if (this != internal_default_instance()) delete accel_cmd_67_;
  if (this != internal_default_instance()) delete lat_lon_heading_rpt_82_;
  if (this != internal_default_instance()) delete global_cmd_69_;
  if (this != internal_default_instance()) delete parking_brake_status_rpt_80_;
  if (this != internal_default_instance()) delete yaw_rate_rpt_81_;
  if (this != internal_default_instance()) delete horn_rpt_79_;
  if (this != internal_default_instance()) delete horn_cmd_78_;
  if (this != internal_default_instance()) delete wiper_rpt_91_;
  if (this != internal_default_instance()) delete vehicle_speed_rpt_6f_;
  if (this != internal_default_instance()) delete headlight_cmd_76_;
  if (this != internal_default_instance()) delete steering_motor_rpt_2_74_;
  if (this != internal_default_instance()) delete brake_motor_rpt_2_71_;
  if (this != internal_default_instance()) delete steering_motor_rpt_1_73_;
  if (this != internal_default_instance()) delete wiper_cmd_90_;
  if (this != internal_default_instance()) delete brake_motor_rpt_3_72_;
}

void Gem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gem& Gem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gem_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto.base);
  return *internal_default_instance();
}


void Gem::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(global_rpt_6a_ != nullptr);
      global_rpt_6a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(brake_cmd_6b_ != nullptr);
      brake_cmd_6b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brake_rpt_6c_ != nullptr);
      brake_rpt_6c_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(steering_cmd_6d_ != nullptr);
      steering_cmd_6d_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(steering_rpt_1_6e_ != nullptr);
      steering_rpt_1_6e_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(wheel_speed_rpt_7a_ != nullptr);
      wheel_speed_rpt_7a_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(date_time_rpt_83_ != nullptr);
      date_time_rpt_83_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(brake_motor_rpt_1_70_ != nullptr);
      brake_motor_rpt_1_70_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(headlight_rpt_77_ != nullptr);
      headlight_rpt_77_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(accel_rpt_68_ != nullptr);
      accel_rpt_68_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(steering_motor_rpt_3_75_ != nullptr);
      steering_motor_rpt_3_75_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(turn_cmd_63_ != nullptr);
      turn_cmd_63_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(turn_rpt_64_ != nullptr);
      turn_rpt_64_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(shift_cmd_65_ != nullptr);
      shift_cmd_65_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(shift_rpt_66_ != nullptr);
      shift_rpt_66_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(accel_cmd_67_ != nullptr);
      accel_cmd_67_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(lat_lon_heading_rpt_82_ != nullptr);
      lat_lon_heading_rpt_82_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(global_cmd_69_ != nullptr);
      global_cmd_69_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(parking_brake_status_rpt_80_ != nullptr);
      parking_brake_status_rpt_80_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(yaw_rate_rpt_81_ != nullptr);
      yaw_rate_rpt_81_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(horn_rpt_79_ != nullptr);
      horn_rpt_79_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(horn_cmd_78_ != nullptr);
      horn_cmd_78_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(wiper_rpt_91_ != nullptr);
      wiper_rpt_91_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(vehicle_speed_rpt_6f_ != nullptr);
      vehicle_speed_rpt_6f_->Clear();
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(headlight_cmd_76_ != nullptr);
      headlight_cmd_76_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(steering_motor_rpt_2_74_ != nullptr);
      steering_motor_rpt_2_74_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(brake_motor_rpt_2_71_ != nullptr);
      brake_motor_rpt_2_71_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(steering_motor_rpt_1_73_ != nullptr);
      steering_motor_rpt_1_73_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(wiper_cmd_90_ != nullptr);
      wiper_cmd_90_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(brake_motor_rpt_3_72_ != nullptr);
      brake_motor_rpt_3_72_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Gem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_rpt_6a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_cmd_6b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_rpt_6c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_cmd_6d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_rpt_1_6e(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_wheel_speed_rpt_7a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_time_rpt_83(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_1_70(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_rpt_77(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_rpt_68(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_3_75(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_cmd_63(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_turn_rpt_64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_cmd_65(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift_rpt_66(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_cmd_67(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_lon_heading_rpt_82(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_cmd_69(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_brake_status_rpt_80(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_yaw_rate_rpt_81(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_horn_rpt_79(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_horn_cmd_78(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_rpt_91(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_speed_rpt_6f(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_headlight_cmd_76(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_2_74(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_2_71(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_motor_rpt_1_73(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_wiper_cmd_90(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_motor_rpt_3_72(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::global_rpt_6a(this), target, stream);
  }

  // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::brake_cmd_6b(this), target, stream);
  }

  // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::brake_rpt_6c(this), target, stream);
  }

  // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::steering_cmd_6d(this), target, stream);
  }

  // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::steering_rpt_1_6e(this), target, stream);
  }

  // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::wheel_speed_rpt_7a(this), target, stream);
  }

  // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::date_time_rpt_83(this), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::brake_motor_rpt_1_70(this), target, stream);
  }

  // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::headlight_rpt_77(this), target, stream);
  }

  // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::accel_rpt_68(this), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::steering_motor_rpt_3_75(this), target, stream);
  }

  // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::turn_cmd_63(this), target, stream);
  }

  // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::turn_rpt_64(this), target, stream);
  }

  // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::shift_cmd_65(this), target, stream);
  }

  // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::shift_rpt_66(this), target, stream);
  }

  // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::accel_cmd_67(this), target, stream);
  }

  // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::lat_lon_heading_rpt_82(this), target, stream);
  }

  // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::global_cmd_69(this), target, stream);
  }

  // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::parking_brake_status_rpt_80(this), target, stream);
  }

  // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::yaw_rate_rpt_81(this), target, stream);
  }

  // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::horn_rpt_79(this), target, stream);
  }

  // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::horn_cmd_78(this), target, stream);
  }

  // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::wiper_rpt_91(this), target, stream);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::vehicle_speed_rpt_6f(this), target, stream);
  }

  // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::headlight_cmd_76(this), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::steering_motor_rpt_2_74(this), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::brake_motor_rpt_2_71(this), target, stream);
  }

  // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::steering_motor_rpt_1_73(this), target, stream);
  }

  // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::wiper_cmd_90(this), target, stream);
  }

  // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::brake_motor_rpt_3_72(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gem)
  return target;
}

size_t Gem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_rpt_6a_);
    }

    // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_cmd_6b_);
    }

    // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_rpt_6c_);
    }

    // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_cmd_6d_);
    }

    // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_rpt_1_6e_);
    }

    // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wheel_speed_rpt_7a_);
    }

    // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_time_rpt_83_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_1_70_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *headlight_rpt_77_);
    }

    // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accel_rpt_68_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_3_75_);
    }

    // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *turn_cmd_63_);
    }

    // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *turn_rpt_64_);
    }

    // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shift_cmd_65_);
    }

    // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shift_rpt_66_);
    }

    // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accel_cmd_67_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_lon_heading_rpt_82_);
    }

    // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_cmd_69_);
    }

    // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parking_brake_status_rpt_80_);
    }

    // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *yaw_rate_rpt_81_);
    }

    // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *horn_rpt_79_);
    }

    // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *horn_cmd_78_);
    }

    // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wiper_rpt_91_);
    }

    // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle_speed_rpt_6f_);
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *headlight_cmd_76_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_2_74_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_2_71_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_1_73_);
    }

    // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wiper_cmd_90_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_3_72_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gem)
  GOOGLE_DCHECK_NE(&from, this);
  const Gem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gem)
    MergeFrom(*source);
  }
}

void Gem::MergeFrom(const Gem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_global_rpt_6a()->::apollo::canbus::Global_rpt_6a::MergeFrom(from._internal_global_rpt_6a());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_brake_cmd_6b()->::apollo::canbus::Brake_cmd_6b::MergeFrom(from._internal_brake_cmd_6b());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_brake_rpt_6c()->::apollo::canbus::Brake_rpt_6c::MergeFrom(from._internal_brake_rpt_6c());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_steering_cmd_6d()->::apollo::canbus::Steering_cmd_6d::MergeFrom(from._internal_steering_cmd_6d());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_steering_rpt_1_6e()->::apollo::canbus::Steering_rpt_1_6e::MergeFrom(from._internal_steering_rpt_1_6e());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_wheel_speed_rpt_7a()->::apollo::canbus::Wheel_speed_rpt_7a::MergeFrom(from._internal_wheel_speed_rpt_7a());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_date_time_rpt_83()->::apollo::canbus::Date_time_rpt_83::MergeFrom(from._internal_date_time_rpt_83());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_brake_motor_rpt_1_70()->::apollo::canbus::Brake_motor_rpt_1_70::MergeFrom(from._internal_brake_motor_rpt_1_70());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_headlight_rpt_77()->::apollo::canbus::Headlight_rpt_77::MergeFrom(from._internal_headlight_rpt_77());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_accel_rpt_68()->::apollo::canbus::Accel_rpt_68::MergeFrom(from._internal_accel_rpt_68());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_steering_motor_rpt_3_75()->::apollo::canbus::Steering_motor_rpt_3_75::MergeFrom(from._internal_steering_motor_rpt_3_75());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_turn_cmd_63()->::apollo::canbus::Turn_cmd_63::MergeFrom(from._internal_turn_cmd_63());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_turn_rpt_64()->::apollo::canbus::Turn_rpt_64::MergeFrom(from._internal_turn_rpt_64());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_shift_cmd_65()->::apollo::canbus::Shift_cmd_65::MergeFrom(from._internal_shift_cmd_65());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_shift_rpt_66()->::apollo::canbus::Shift_rpt_66::MergeFrom(from._internal_shift_rpt_66());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_accel_cmd_67()->::apollo::canbus::Accel_cmd_67::MergeFrom(from._internal_accel_cmd_67());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_lat_lon_heading_rpt_82()->::apollo::canbus::Lat_lon_heading_rpt_82::MergeFrom(from._internal_lat_lon_heading_rpt_82());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_global_cmd_69()->::apollo::canbus::Global_cmd_69::MergeFrom(from._internal_global_cmd_69());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_parking_brake_status_rpt_80()->::apollo::canbus::Parking_brake_status_rpt_80::MergeFrom(from._internal_parking_brake_status_rpt_80());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_yaw_rate_rpt_81()->::apollo::canbus::Yaw_rate_rpt_81::MergeFrom(from._internal_yaw_rate_rpt_81());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_horn_rpt_79()->::apollo::canbus::Horn_rpt_79::MergeFrom(from._internal_horn_rpt_79());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_horn_cmd_78()->::apollo::canbus::Horn_cmd_78::MergeFrom(from._internal_horn_cmd_78());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_wiper_rpt_91()->::apollo::canbus::Wiper_rpt_91::MergeFrom(from._internal_wiper_rpt_91());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_vehicle_speed_rpt_6f()->::apollo::canbus::Vehicle_speed_rpt_6f::MergeFrom(from._internal_vehicle_speed_rpt_6f());
    }
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_mutable_headlight_cmd_76()->::apollo::canbus::Headlight_cmd_76::MergeFrom(from._internal_headlight_cmd_76());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_mutable_steering_motor_rpt_2_74()->::apollo::canbus::Steering_motor_rpt_2_74::MergeFrom(from._internal_steering_motor_rpt_2_74());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_brake_motor_rpt_2_71()->::apollo::canbus::Brake_motor_rpt_2_71::MergeFrom(from._internal_brake_motor_rpt_2_71());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_steering_motor_rpt_1_73()->::apollo::canbus::Steering_motor_rpt_1_73::MergeFrom(from._internal_steering_motor_rpt_1_73());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_mutable_wiper_cmd_90()->::apollo::canbus::Wiper_cmd_90::MergeFrom(from._internal_wiper_cmd_90());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_mutable_brake_motor_rpt_3_72()->::apollo::canbus::Brake_motor_rpt_3_72::MergeFrom(from._internal_brake_motor_rpt_3_72());
    }
  }
}

void Gem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gem::CopyFrom(const Gem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gem::IsInitialized() const {
  return true;
}

void Gem::InternalSwap(Gem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(global_rpt_6a_, other->global_rpt_6a_);
  swap(brake_cmd_6b_, other->brake_cmd_6b_);
  swap(brake_rpt_6c_, other->brake_rpt_6c_);
  swap(steering_cmd_6d_, other->steering_cmd_6d_);
  swap(steering_rpt_1_6e_, other->steering_rpt_1_6e_);
  swap(wheel_speed_rpt_7a_, other->wheel_speed_rpt_7a_);
  swap(date_time_rpt_83_, other->date_time_rpt_83_);
  swap(brake_motor_rpt_1_70_, other->brake_motor_rpt_1_70_);
  swap(headlight_rpt_77_, other->headlight_rpt_77_);
  swap(accel_rpt_68_, other->accel_rpt_68_);
  swap(steering_motor_rpt_3_75_, other->steering_motor_rpt_3_75_);
  swap(turn_cmd_63_, other->turn_cmd_63_);
  swap(turn_rpt_64_, other->turn_rpt_64_);
  swap(shift_cmd_65_, other->shift_cmd_65_);
  swap(shift_rpt_66_, other->shift_rpt_66_);
  swap(accel_cmd_67_, other->accel_cmd_67_);
  swap(lat_lon_heading_rpt_82_, other->lat_lon_heading_rpt_82_);
  swap(global_cmd_69_, other->global_cmd_69_);
  swap(parking_brake_status_rpt_80_, other->parking_brake_status_rpt_80_);
  swap(yaw_rate_rpt_81_, other->yaw_rate_rpt_81_);
  swap(horn_rpt_79_, other->horn_rpt_79_);
  swap(horn_cmd_78_, other->horn_cmd_78_);
  swap(wiper_rpt_91_, other->wiper_rpt_91_);
  swap(vehicle_speed_rpt_6f_, other->vehicle_speed_rpt_6f_);
  swap(headlight_cmd_76_, other->headlight_cmd_76_);
  swap(steering_motor_rpt_2_74_, other->steering_motor_rpt_2_74_);
  swap(brake_motor_rpt_2_71_, other->brake_motor_rpt_2_71_);
  swap(steering_motor_rpt_1_73_, other->steering_motor_rpt_1_73_);
  swap(wiper_cmd_90_, other->wiper_cmd_90_);
  swap(brake_motor_rpt_3_72_, other->brake_motor_rpt_3_72_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::ChassisDetail* Arena::CreateMaybeMessage< ::apollo::canbus::ChassisDetail >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::ChassisDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::CheckResponseSignal* Arena::CreateMaybeMessage< ::apollo::canbus::CheckResponseSignal >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::CheckResponseSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Battery* Arena::CreateMaybeMessage< ::apollo::canbus::Battery >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Light* Arena::CreateMaybeMessage< ::apollo::canbus::Light >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Light >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Eps* Arena::CreateMaybeMessage< ::apollo::canbus::Eps >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Eps >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::VehicleSpd* Arena::CreateMaybeMessage< ::apollo::canbus::VehicleSpd >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::VehicleSpd >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Deceleration* Arena::CreateMaybeMessage< ::apollo::canbus::Deceleration >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Deceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake* Arena::CreateMaybeMessage< ::apollo::canbus::Brake >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Epb* Arena::CreateMaybeMessage< ::apollo::canbus::Epb >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Epb >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gas* Arena::CreateMaybeMessage< ::apollo::canbus::Gas >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gas >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Esp* Arena::CreateMaybeMessage< ::apollo::canbus::Esp >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Esp >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ems* Arena::CreateMaybeMessage< ::apollo::canbus::Ems >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Ems >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gear* Arena::CreateMaybeMessage< ::apollo::canbus::Gear >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gear >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Safety* Arena::CreateMaybeMessage< ::apollo::canbus::Safety >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Safety >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::BasicInfo* Arena::CreateMaybeMessage< ::apollo::canbus::BasicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::BasicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Global_rpt_6a* Arena::CreateMaybeMessage< ::apollo::canbus::Global_rpt_6a >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Global_rpt_6a >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_cmd_6b* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_cmd_6b >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_cmd_6b >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_rpt_6c* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_rpt_6c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_rpt_6c >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_cmd_6d* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_cmd_6d >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_cmd_6d >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_rpt_1_6e* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_rpt_1_6e >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_rpt_1_6e >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wheel_speed_rpt_7a* Arena::CreateMaybeMessage< ::apollo::canbus::Wheel_speed_rpt_7a >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wheel_speed_rpt_7a >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Date_time_rpt_83* Arena::CreateMaybeMessage< ::apollo::canbus::Date_time_rpt_83 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Date_time_rpt_83 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_1_70* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_1_70 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_1_70 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_rpt_77* Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_rpt_77 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Headlight_rpt_77 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_rpt_68* Arena::CreateMaybeMessage< ::apollo::canbus::Accel_rpt_68 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Accel_rpt_68 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_3_75* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_3_75 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_3_75 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_cmd_63* Arena::CreateMaybeMessage< ::apollo::canbus::Turn_cmd_63 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turn_cmd_63 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turn_rpt_64* Arena::CreateMaybeMessage< ::apollo::canbus::Turn_rpt_64 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turn_rpt_64 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_cmd_65* Arena::CreateMaybeMessage< ::apollo::canbus::Shift_cmd_65 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Shift_cmd_65 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Shift_rpt_66* Arena::CreateMaybeMessage< ::apollo::canbus::Shift_rpt_66 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Shift_rpt_66 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Accel_cmd_67* Arena::CreateMaybeMessage< ::apollo::canbus::Accel_cmd_67 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Accel_cmd_67 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Lat_lon_heading_rpt_82* Arena::CreateMaybeMessage< ::apollo::canbus::Lat_lon_heading_rpt_82 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Lat_lon_heading_rpt_82 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Global_cmd_69* Arena::CreateMaybeMessage< ::apollo::canbus::Global_cmd_69 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Global_cmd_69 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Parking_brake_status_rpt_80* Arena::CreateMaybeMessage< ::apollo::canbus::Parking_brake_status_rpt_80 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Parking_brake_status_rpt_80 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Yaw_rate_rpt_81* Arena::CreateMaybeMessage< ::apollo::canbus::Yaw_rate_rpt_81 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Yaw_rate_rpt_81 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Horn_rpt_79* Arena::CreateMaybeMessage< ::apollo::canbus::Horn_rpt_79 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Horn_rpt_79 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Horn_cmd_78* Arena::CreateMaybeMessage< ::apollo::canbus::Horn_cmd_78 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Horn_cmd_78 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_rpt_91* Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_rpt_91 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wiper_rpt_91 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Vehicle_speed_rpt_6f* Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_speed_rpt_6f >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Vehicle_speed_rpt_6f >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Headlight_cmd_76* Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_cmd_76 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Headlight_cmd_76 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_2_74* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_2_74 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_2_74 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_2_71* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_2_71 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_2_71 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steering_motor_rpt_1_73* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_1_73 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_1_73 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Wiper_cmd_90* Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_cmd_90 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wiper_cmd_90 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_motor_rpt_3_72* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_3_72 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_3_72 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gem* Arena::CreateMaybeMessage< ::apollo::canbus::Gem >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
