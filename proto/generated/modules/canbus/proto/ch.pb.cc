// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/ch.proto

#include "modules/canbus/proto/ch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_command_111_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_status__511_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Control_command_115_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ecu_status_1_515_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ecu_status_2_516_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ecu_status_3_517_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gear_command_114_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gear_status_514_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steer_command_112_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steer_status__512_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Throttle_command_110_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Throttle_status__510_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turnsignal_command_113_modules_2fcanbus_2fproto_2fch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turnsignal_status__513_modules_2fcanbus_2fproto_2fch_2eproto;
namespace apollo {
namespace canbus {
class Control_command_115DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Control_command_115> _instance;
} _Control_command_115_default_instance_;
class Gear_command_114DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gear_command_114> _instance;
} _Gear_command_114_default_instance_;
class Brake_command_111DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_command_111> _instance;
} _Brake_command_111_default_instance_;
class Throttle_command_110DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Throttle_command_110> _instance;
} _Throttle_command_110_default_instance_;
class Turnsignal_command_113DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Turnsignal_command_113> _instance;
} _Turnsignal_command_113_default_instance_;
class Steer_command_112DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steer_command_112> _instance;
} _Steer_command_112_default_instance_;
class Brake_status__511DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Brake_status__511> _instance;
} _Brake_status__511_default_instance_;
class Throttle_status__510DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Throttle_status__510> _instance;
} _Throttle_status__510_default_instance_;
class Turnsignal_status__513DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Turnsignal_status__513> _instance;
} _Turnsignal_status__513_default_instance_;
class Steer_status__512DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steer_status__512> _instance;
} _Steer_status__512_default_instance_;
class Ecu_status_1_515DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ecu_status_1_515> _instance;
} _Ecu_status_1_515_default_instance_;
class Gear_status_514DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gear_status_514> _instance;
} _Gear_status_514_default_instance_;
class Ecu_status_3_517DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ecu_status_3_517> _instance;
} _Ecu_status_3_517_default_instance_;
class Ecu_status_2_516DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ecu_status_2_516> _instance;
} _Ecu_status_2_516_default_instance_;
class ChDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ch> _instance;
} _Ch_default_instance_;
}  // namespace canbus
}  // namespace apollo
static void InitDefaultsscc_info_Brake_command_111_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_command_111_default_instance_;
    new (ptr) ::apollo::canbus::Brake_command_111();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_command_111::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_command_111_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_command_111_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Brake_status__511_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_status__511_default_instance_;
    new (ptr) ::apollo::canbus::Brake_status__511();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_status__511::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Brake_status__511_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Brake_status__511_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Ch_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Ch_default_instance_;
    new (ptr) ::apollo::canbus::Ch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Ch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Ch_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_Ch_modules_2fcanbus_2fproto_2fch_2eproto}, {
      &scc_info_Control_command_115_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Gear_command_114_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Brake_command_111_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Throttle_command_110_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Turnsignal_command_113_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Steer_command_112_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Brake_status__511_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Throttle_status__510_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Turnsignal_status__513_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Steer_status__512_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Ecu_status_1_515_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Gear_status_514_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Ecu_status_3_517_modules_2fcanbus_2fproto_2fch_2eproto.base,
      &scc_info_Ecu_status_2_516_modules_2fcanbus_2fproto_2fch_2eproto.base,}};

static void InitDefaultsscc_info_Control_command_115_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Control_command_115_default_instance_;
    new (ptr) ::apollo::canbus::Control_command_115();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Control_command_115::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Control_command_115_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Control_command_115_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Ecu_status_1_515_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Ecu_status_1_515_default_instance_;
    new (ptr) ::apollo::canbus::Ecu_status_1_515();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Ecu_status_1_515::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ecu_status_1_515_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ecu_status_1_515_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Ecu_status_2_516_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Ecu_status_2_516_default_instance_;
    new (ptr) ::apollo::canbus::Ecu_status_2_516();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Ecu_status_2_516::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ecu_status_2_516_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ecu_status_2_516_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Ecu_status_3_517_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Ecu_status_3_517_default_instance_;
    new (ptr) ::apollo::canbus::Ecu_status_3_517();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Ecu_status_3_517::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ecu_status_3_517_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ecu_status_3_517_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Gear_command_114_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gear_command_114_default_instance_;
    new (ptr) ::apollo::canbus::Gear_command_114();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gear_command_114::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gear_command_114_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gear_command_114_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Gear_status_514_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gear_status_514_default_instance_;
    new (ptr) ::apollo::canbus::Gear_status_514();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gear_status_514::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gear_status_514_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gear_status_514_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Steer_command_112_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steer_command_112_default_instance_;
    new (ptr) ::apollo::canbus::Steer_command_112();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steer_command_112::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steer_command_112_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steer_command_112_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Steer_status__512_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steer_status__512_default_instance_;
    new (ptr) ::apollo::canbus::Steer_status__512();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steer_status__512::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Steer_status__512_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Steer_status__512_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Throttle_command_110_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Throttle_command_110_default_instance_;
    new (ptr) ::apollo::canbus::Throttle_command_110();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Throttle_command_110::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Throttle_command_110_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Throttle_command_110_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Throttle_status__510_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Throttle_status__510_default_instance_;
    new (ptr) ::apollo::canbus::Throttle_status__510();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Throttle_status__510::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Throttle_status__510_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Throttle_status__510_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Turnsignal_command_113_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turnsignal_command_113_default_instance_;
    new (ptr) ::apollo::canbus::Turnsignal_command_113();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turnsignal_command_113::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turnsignal_command_113_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Turnsignal_command_113_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static void InitDefaultsscc_info_Turnsignal_status__513_modules_2fcanbus_2fproto_2fch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turnsignal_status__513_default_instance_;
    new (ptr) ::apollo::canbus::Turnsignal_status__513();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turnsignal_status__513::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Turnsignal_status__513_modules_2fcanbus_2fproto_2fch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Turnsignal_status__513_modules_2fcanbus_2fproto_2fch_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2fch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Control_command_115, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Control_command_115, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Control_command_115, ctrl_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_command_114, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_command_114, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_command_114, gear_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_command_111, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_command_111, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_command_111, brake_pedal_en_ctrl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_command_111, brake_pedal_cmd_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_command_110, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_command_110, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_command_110, throttle_pedal_en_ctrl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_command_110, throttle_pedal_cmd_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_command_113, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_command_113, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_command_113, turn_signal_cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_command_112, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_command_112, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_command_112, steer_angle_en_ctrl_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_command_112, steer_angle_cmd_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, brake_pedal_en_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Brake_status__511, brake_pedal_sts_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, throttle_pedal_en_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Throttle_status__510, throttle_pedal_sts_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_status__513, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_status__513, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Turnsignal_status__513, turn_signal_sts_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, steer_angle_en_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Steer_status__512, steer_angle_sts_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, acc_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, ctrl_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, chassis_sts_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_1_515, chassis_err_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_status_514, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_status_514, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Gear_status_514, gear_sts_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, ultrasound_dist_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, ultrasound_dist_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, ultrasound_dist_3_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, ultrasound_dist_4_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, ultrasound_dist_5_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, ultrasound_dist_6_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, ultrasound_dist_7_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_3_517, ultrasound_dist_8_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, battery_remaining_capacity_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, battery_voltage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, battery_current_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ecu_status_2_516, battery_temperature_),
  1,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, control_command_115_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, gear_command_114_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, brake_command_111_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, throttle_command_110_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, turnsignal_command_113_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, steer_command_112_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, brake_status__511_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, throttle_status__510_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, turnsignal_status__513_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, steer_status__512_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, ecu_status_1_515_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, gear_status_514_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, ecu_status_3_517_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ch, ecu_status_2_516_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::canbus::Control_command_115)},
  { 7, 13, sizeof(::apollo::canbus::Gear_command_114)},
  { 14, 21, sizeof(::apollo::canbus::Brake_command_111)},
  { 23, 30, sizeof(::apollo::canbus::Throttle_command_110)},
  { 32, 38, sizeof(::apollo::canbus::Turnsignal_command_113)},
  { 39, 46, sizeof(::apollo::canbus::Steer_command_112)},
  { 48, 55, sizeof(::apollo::canbus::Brake_status__511)},
  { 57, 64, sizeof(::apollo::canbus::Throttle_status__510)},
  { 66, 72, sizeof(::apollo::canbus::Turnsignal_status__513)},
  { 73, 80, sizeof(::apollo::canbus::Steer_status__512)},
  { 82, 92, sizeof(::apollo::canbus::Ecu_status_1_515)},
  { 97, 103, sizeof(::apollo::canbus::Gear_status_514)},
  { 104, 117, sizeof(::apollo::canbus::Ecu_status_3_517)},
  { 125, 134, sizeof(::apollo::canbus::Ecu_status_2_516)},
  { 138, 157, sizeof(::apollo::canbus::Ch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Control_command_115_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Gear_command_114_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_command_111_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Throttle_command_110_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Turnsignal_command_113_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steer_command_112_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Brake_status__511_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Throttle_status__510_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Turnsignal_status__513_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Steer_status__512_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ecu_status_1_515_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Gear_status_514_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ecu_status_3_517_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ecu_status_2_516_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ch_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035modules/canbus/proto/ch.proto\022\rapollo."
  "canbus\"\241\001\n\023Control_command_115\022A\n\010ctrl_c"
  "md\030\001 \001(\0162/.apollo.canbus.Control_command"
  "_115.Ctrl_cmdType\"G\n\014Ctrl_cmdType\022\033\n\027CTR"
  "L_CMD_OUT_OF_CONTROL\020\000\022\032\n\026CTRL_CMD_UNDER"
  "_CONTROL\020\001\"\265\001\n\020Gear_command_114\022>\n\010gear_"
  "cmd\030\001 \001(\0162,.apollo.canbus.Gear_command_1"
  "14.Gear_cmdType\"a\n\014Gear_cmdType\022\021\n\rGEAR_"
  "CMD_PARK\020\001\022\024\n\020GEAR_CMD_REVERSE\020\002\022\024\n\020GEAR"
  "_CMD_NEUTRAL\020\003\022\022\n\016GEAR_CMD_DRIVE\020\004\"\337\001\n\021B"
  "rake_command_111\022U\n\023brake_pedal_en_ctrl\030"
  "\001 \001(\01628.apollo.canbus.Brake_command_111."
  "Brake_pedal_en_ctrlType\022\027\n\017brake_pedal_c"
  "md\030\002 \001(\005\"Z\n\027Brake_pedal_en_ctrlType\022\037\n\033B"
  "RAKE_PEDAL_EN_CTRL_DISABLE\020\000\022\036\n\032BRAKE_PE"
  "DAL_EN_CTRL_ENABLE\020\001\"\367\001\n\024Throttle_comman"
  "d_110\022^\n\026throttle_pedal_en_ctrl\030\001 \001(\0162>."
  "apollo.canbus.Throttle_command_110.Throt"
  "tle_pedal_en_ctrlType\022\032\n\022throttle_pedal_"
  "cmd\030\002 \001(\005\"c\n\032Throttle_pedal_en_ctrlType\022"
  "\"\n\036THROTTLE_PEDAL_EN_CTRL_DISABLE\020\000\022!\n\035T"
  "HROTTLE_PEDAL_EN_CTRL_ENABLE\020\001\"\322\001\n\026Turns"
  "ignal_command_113\022R\n\017turn_signal_cmd\030\001 \001"
  "(\01629.apollo.canbus.Turnsignal_command_11"
  "3.Turn_signal_cmdType\"d\n\023Turn_signal_cmd"
  "Type\022\030\n\024TURN_SIGNAL_CMD_NONE\020\000\022\030\n\024TURN_S"
  "IGNAL_CMD_LEFT\020\001\022\031\n\025TURN_SIGNAL_CMD_RIGH"
  "T\020\002\"\337\001\n\021Steer_command_112\022U\n\023steer_angle"
  "_en_ctrl\030\001 \001(\01628.apollo.canbus.Steer_com"
  "mand_112.Steer_angle_en_ctrlType\022\027\n\017stee"
  "r_angle_cmd\030\002 \001(\001\"Z\n\027Steer_angle_en_ctrl"
  "Type\022\037\n\033STEER_ANGLE_EN_CTRL_DISABLE\020\000\022\036\n"
  "\032STEER_ANGLE_EN_CTRL_ENABLE\020\001\"\332\001\n\021Brake_"
  "status__511\022S\n\022brake_pedal_en_sts\030\001 \001(\0162"
  "7.apollo.canbus.Brake_status__511.Brake_"
  "pedal_en_stsType\022\027\n\017brake_pedal_sts\030\002 \001("
  "\005\"W\n\026Brake_pedal_en_stsType\022\036\n\032BRAKE_PED"
  "AL_EN_STS_DISABLE\020\000\022\035\n\031BRAKE_PEDAL_EN_ST"
  "S_ENABLE\020\001\"\362\001\n\024Throttle_status__510\022\\\n\025t"
  "hrottle_pedal_en_sts\030\001 \001(\0162=.apollo.canb"
  "us.Throttle_status__510.Throttle_pedal_e"
  "n_stsType\022\032\n\022throttle_pedal_sts\030\002 \001(\005\"`\n"
  "\031Throttle_pedal_en_stsType\022!\n\035THROTTLE_P"
  "EDAL_EN_STS_DISABLE\020\000\022 \n\034THROTTLE_PEDAL_"
  "EN_STS_ENABLE\020\001\"\322\001\n\026Turnsignal_status__5"
  "13\022R\n\017turn_signal_sts\030\001 \001(\01629.apollo.can"
  "bus.Turnsignal_status__513.Turn_signal_s"
  "tsType\"d\n\023Turn_signal_stsType\022\030\n\024TURN_SI"
  "GNAL_STS_NONE\020\000\022\030\n\024TURN_SIGNAL_STS_LEFT\020"
  "\001\022\031\n\025TURN_SIGNAL_STS_RIGHT\020\002\"\332\001\n\021Steer_s"
  "tatus__512\022S\n\022steer_angle_en_sts\030\001 \001(\01627"
  ".apollo.canbus.Steer_status__512.Steer_a"
  "ngle_en_stsType\022\027\n\017steer_angle_sts\030\002 \001(\001"
  "\"W\n\026Steer_angle_en_stsType\022\036\n\032STEER_ANGL"
  "E_EN_STS_DISABLE\020\000\022\035\n\031STEER_ANGLE_EN_STS"
  "_ENABLE\020\001\"\347\001\n\020Ecu_status_1_515\022\r\n\005speed\030"
  "\001 \001(\001\022\021\n\tacc_speed\030\002 \001(\001\022>\n\010ctrl_sts\030\003 \001"
  "(\0162,.apollo.canbus.Ecu_status_1_515.Ctrl"
  "_stsType\022\023\n\013chassis_sts\030\004 \001(\005\022\023\n\013chassis"
  "_err\030\005 \001(\005\"G\n\014Ctrl_stsType\022\033\n\027CTRL_STS_O"
  "UT_OF_CONTROL\020\000\022\032\n\026CTRL_STS_UNDER_CONTRO"
  "L\020\001\"\263\001\n\017Gear_status_514\022=\n\010gear_sts\030\001 \001("
  "\0162+.apollo.canbus.Gear_status_514.Gear_s"
  "tsType\"a\n\014Gear_stsType\022\021\n\rGEAR_STS_PARK\020"
  "\001\022\024\n\020GEAR_STS_REVERSE\020\002\022\024\n\020GEAR_STS_NEUT"
  "RAL\020\003\022\022\n\016GEAR_STS_DRIVE\020\004\"\352\001\n\020Ecu_status"
  "_3_517\022\031\n\021ultrasound_dist_1\030\001 \001(\005\022\031\n\021ult"
  "rasound_dist_2\030\002 \001(\005\022\031\n\021ultrasound_dist_"
  "3\030\003 \001(\005\022\031\n\021ultrasound_dist_4\030\004 \001(\005\022\031\n\021ul"
  "trasound_dist_5\030\005 \001(\005\022\031\n\021ultrasound_dist"
  "_6\030\006 \001(\005\022\031\n\021ultrasound_dist_7\030\007 \001(\005\022\031\n\021u"
  "ltrasound_dist_8\030\010 \001(\005\"\205\001\n\020Ecu_status_2_"
  "516\022\"\n\032battery_remaining_capacity\030\001 \001(\005\022"
  "\027\n\017battery_voltage\030\002 \001(\001\022\027\n\017battery_curr"
  "ent\030\003 \001(\001\022\033\n\023battery_temperature\030\004 \001(\005\"\362"
  "\006\n\002Ch\022\?\n\023control_command_115\030\001 \001(\0132\".apo"
  "llo.canbus.Control_command_115\0229\n\020gear_c"
  "ommand_114\030\002 \001(\0132\037.apollo.canbus.Gear_co"
  "mmand_114\022;\n\021brake_command_111\030\003 \001(\0132 .a"
  "pollo.canbus.Brake_command_111\022A\n\024thrott"
  "le_command_110\030\004 \001(\0132#.apollo.canbus.Thr"
  "ottle_command_110\022E\n\026turnsignal_command_"
  "113\030\005 \001(\0132%.apollo.canbus.Turnsignal_com"
  "mand_113\022;\n\021steer_command_112\030\006 \001(\0132 .ap"
  "ollo.canbus.Steer_command_112\022;\n\021brake_s"
  "tatus__511\030\007 \001(\0132 .apollo.canbus.Brake_s"
  "tatus__511\022A\n\024throttle_status__510\030\010 \001(\013"
  "2#.apollo.canbus.Throttle_status__510\022E\n"
  "\026turnsignal_status__513\030\t \001(\0132%.apollo.c"
  "anbus.Turnsignal_status__513\022;\n\021steer_st"
  "atus__512\030\n \001(\0132 .apollo.canbus.Steer_st"
  "atus__512\0229\n\020ecu_status_1_515\030\013 \001(\0132\037.ap"
  "ollo.canbus.Ecu_status_1_515\0227\n\017gear_sta"
  "tus_514\030\014 \001(\0132\036.apollo.canbus.Gear_statu"
  "s_514\0229\n\020ecu_status_3_517\030\r \001(\0132\037.apollo"
  ".canbus.Ecu_status_3_517\0229\n\020ecu_status_2"
  "_516\030\016 \001(\0132\037.apollo.canbus.Ecu_status_2_"
  "516"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_sccs[15] = {
  &scc_info_Brake_command_111_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Brake_status__511_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Ch_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Control_command_115_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Ecu_status_1_515_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Ecu_status_2_516_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Ecu_status_3_517_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Gear_command_114_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Gear_status_514_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Steer_command_112_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Steer_status__512_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Throttle_command_110_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Throttle_status__510_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Turnsignal_command_113_modules_2fcanbus_2fproto_2fch_2eproto.base,
  &scc_info_Turnsignal_status__513_modules_2fcanbus_2fproto_2fch_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once;
static bool descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto = {
  &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_initialized, descriptor_table_protodef_modules_2fcanbus_2fproto_2fch_2eproto, "modules/canbus/proto/ch.proto", 3883,
  &descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_sccs, descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fch_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2fch_2eproto, 15, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2fch_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcanbus_2fproto_2fch_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto), true);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_command_115_Ctrl_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[0];
}
bool Control_command_115_Ctrl_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Control_command_115_Ctrl_cmdType Control_command_115::CTRL_CMD_OUT_OF_CONTROL;
constexpr Control_command_115_Ctrl_cmdType Control_command_115::CTRL_CMD_UNDER_CONTROL;
constexpr Control_command_115_Ctrl_cmdType Control_command_115::Ctrl_cmdType_MIN;
constexpr Control_command_115_Ctrl_cmdType Control_command_115::Ctrl_cmdType_MAX;
constexpr int Control_command_115::Ctrl_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_command_114_Gear_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[1];
}
bool Gear_command_114_Gear_cmdType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_PARK;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_REVERSE;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_NEUTRAL;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::GEAR_CMD_DRIVE;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::Gear_cmdType_MIN;
constexpr Gear_command_114_Gear_cmdType Gear_command_114::Gear_cmdType_MAX;
constexpr int Gear_command_114::Gear_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_command_111_Brake_pedal_en_ctrlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[2];
}
bool Brake_command_111_Brake_pedal_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::BRAKE_PEDAL_EN_CTRL_DISABLE;
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::BRAKE_PEDAL_EN_CTRL_ENABLE;
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::Brake_pedal_en_ctrlType_MIN;
constexpr Brake_command_111_Brake_pedal_en_ctrlType Brake_command_111::Brake_pedal_en_ctrlType_MAX;
constexpr int Brake_command_111::Brake_pedal_en_ctrlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_command_110_Throttle_pedal_en_ctrlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[3];
}
bool Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::THROTTLE_PEDAL_EN_CTRL_DISABLE;
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::THROTTLE_PEDAL_EN_CTRL_ENABLE;
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::Throttle_pedal_en_ctrlType_MIN;
constexpr Throttle_command_110_Throttle_pedal_en_ctrlType Throttle_command_110::Throttle_pedal_en_ctrlType_MAX;
constexpr int Throttle_command_110::Throttle_pedal_en_ctrlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turnsignal_command_113_Turn_signal_cmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[4];
}
bool Turnsignal_command_113_Turn_signal_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_NONE;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_LEFT;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::TURN_SIGNAL_CMD_RIGHT;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::Turn_signal_cmdType_MIN;
constexpr Turnsignal_command_113_Turn_signal_cmdType Turnsignal_command_113::Turn_signal_cmdType_MAX;
constexpr int Turnsignal_command_113::Turn_signal_cmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_command_112_Steer_angle_en_ctrlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[5];
}
bool Steer_command_112_Steer_angle_en_ctrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::STEER_ANGLE_EN_CTRL_DISABLE;
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::STEER_ANGLE_EN_CTRL_ENABLE;
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::Steer_angle_en_ctrlType_MIN;
constexpr Steer_command_112_Steer_angle_en_ctrlType Steer_command_112::Steer_angle_en_ctrlType_MAX;
constexpr int Steer_command_112::Steer_angle_en_ctrlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brake_status__511_Brake_pedal_en_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[6];
}
bool Brake_status__511_Brake_pedal_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::BRAKE_PEDAL_EN_STS_DISABLE;
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::BRAKE_PEDAL_EN_STS_ENABLE;
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::Brake_pedal_en_stsType_MIN;
constexpr Brake_status__511_Brake_pedal_en_stsType Brake_status__511::Brake_pedal_en_stsType_MAX;
constexpr int Brake_status__511::Brake_pedal_en_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Throttle_status__510_Throttle_pedal_en_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[7];
}
bool Throttle_status__510_Throttle_pedal_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::THROTTLE_PEDAL_EN_STS_DISABLE;
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::THROTTLE_PEDAL_EN_STS_ENABLE;
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::Throttle_pedal_en_stsType_MIN;
constexpr Throttle_status__510_Throttle_pedal_en_stsType Throttle_status__510::Throttle_pedal_en_stsType_MAX;
constexpr int Throttle_status__510::Throttle_pedal_en_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Turnsignal_status__513_Turn_signal_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[8];
}
bool Turnsignal_status__513_Turn_signal_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_NONE;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_LEFT;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::TURN_SIGNAL_STS_RIGHT;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::Turn_signal_stsType_MIN;
constexpr Turnsignal_status__513_Turn_signal_stsType Turnsignal_status__513::Turn_signal_stsType_MAX;
constexpr int Turnsignal_status__513::Turn_signal_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Steer_status__512_Steer_angle_en_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[9];
}
bool Steer_status__512_Steer_angle_en_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::STEER_ANGLE_EN_STS_DISABLE;
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::STEER_ANGLE_EN_STS_ENABLE;
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::Steer_angle_en_stsType_MIN;
constexpr Steer_status__512_Steer_angle_en_stsType Steer_status__512::Steer_angle_en_stsType_MAX;
constexpr int Steer_status__512::Steer_angle_en_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ecu_status_1_515_Ctrl_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[10];
}
bool Ecu_status_1_515_Ctrl_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::CTRL_STS_OUT_OF_CONTROL;
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::CTRL_STS_UNDER_CONTROL;
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::Ctrl_stsType_MIN;
constexpr Ecu_status_1_515_Ctrl_stsType Ecu_status_1_515::Ctrl_stsType_MAX;
constexpr int Ecu_status_1_515::Ctrl_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gear_status_514_Gear_stsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fch_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fch_2eproto[11];
}
bool Gear_status_514_Gear_stsType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_PARK;
constexpr Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_REVERSE;
constexpr Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_NEUTRAL;
constexpr Gear_status_514_Gear_stsType Gear_status_514::GEAR_STS_DRIVE;
constexpr Gear_status_514_Gear_stsType Gear_status_514::Gear_stsType_MIN;
constexpr Gear_status_514_Gear_stsType Gear_status_514::Gear_stsType_MAX;
constexpr int Gear_status_514::Gear_stsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Control_command_115::InitAsDefaultInstance() {
}
class Control_command_115::_Internal {
 public:
  using HasBits = decltype(std::declval<Control_command_115>()._has_bits_);
  static void set_has_ctrl_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Control_command_115::Control_command_115()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Control_command_115)
}
Control_command_115::Control_command_115(const Control_command_115& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ctrl_cmd_ = from.ctrl_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Control_command_115)
}

void Control_command_115::SharedCtor() {
  ctrl_cmd_ = 0;
}

Control_command_115::~Control_command_115() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Control_command_115)
  SharedDtor();
}

void Control_command_115::SharedDtor() {
}

void Control_command_115::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Control_command_115& Control_command_115::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Control_command_115_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Control_command_115::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Control_command_115)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctrl_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Control_command_115::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Control_command_115_Ctrl_cmdType_IsValid(val))) {
            _internal_set_ctrl_cmd(static_cast<::apollo::canbus::Control_command_115_Ctrl_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control_command_115::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Control_command_115)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ctrl_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Control_command_115)
  return target;
}

size_t Control_command_115::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Control_command_115)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Control_command_115.Ctrl_cmdType ctrl_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ctrl_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Control_command_115::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Control_command_115)
  GOOGLE_DCHECK_NE(&from, this);
  const Control_command_115* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Control_command_115>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Control_command_115)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Control_command_115)
    MergeFrom(*source);
  }
}

void Control_command_115::MergeFrom(const Control_command_115& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Control_command_115)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ctrl_cmd()) {
    _internal_set_ctrl_cmd(from._internal_ctrl_cmd());
  }
}

void Control_command_115::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Control_command_115)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_command_115::CopyFrom(const Control_command_115& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Control_command_115)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_command_115::IsInitialized() const {
  return true;
}

void Control_command_115::InternalSwap(Control_command_115* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ctrl_cmd_, other->ctrl_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_command_115::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gear_command_114::InitAsDefaultInstance() {
}
class Gear_command_114::_Internal {
 public:
  using HasBits = decltype(std::declval<Gear_command_114>()._has_bits_);
  static void set_has_gear_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Gear_command_114::Gear_command_114()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gear_command_114)
}
Gear_command_114::Gear_command_114(const Gear_command_114& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gear_cmd_ = from.gear_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear_command_114)
}

void Gear_command_114::SharedCtor() {
  gear_cmd_ = 1;
}

Gear_command_114::~Gear_command_114() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear_command_114)
  SharedDtor();
}

void Gear_command_114::SharedDtor() {
}

void Gear_command_114::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gear_command_114& Gear_command_114::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gear_command_114_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Gear_command_114::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear_command_114)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gear_cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Gear_command_114::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Gear_command_114_Gear_cmdType_IsValid(val))) {
            _internal_set_gear_cmd(static_cast<::apollo::canbus::Gear_command_114_Gear_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gear_command_114::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear_command_114)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gear_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear_command_114)
  return target;
}

size_t Gear_command_114::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear_command_114)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Gear_command_114.Gear_cmdType gear_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gear_command_114::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gear_command_114)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear_command_114* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gear_command_114>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gear_command_114)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gear_command_114)
    MergeFrom(*source);
  }
}

void Gear_command_114::MergeFrom(const Gear_command_114& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear_command_114)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gear_cmd()) {
    _internal_set_gear_cmd(from._internal_gear_cmd());
  }
}

void Gear_command_114::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gear_command_114)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear_command_114::CopyFrom(const Gear_command_114& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear_command_114)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_command_114::IsInitialized() const {
  return true;
}

void Gear_command_114::InternalSwap(Gear_command_114* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gear_cmd_, other->gear_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gear_command_114::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_command_111::InitAsDefaultInstance() {
}
class Brake_command_111::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_command_111>()._has_bits_);
  static void set_has_brake_pedal_en_ctrl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_pedal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_command_111::Brake_command_111()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_command_111)
}
Brake_command_111::Brake_command_111(const Brake_command_111& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_pedal_en_ctrl_, &from.brake_pedal_en_ctrl_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_pedal_cmd_) -
    reinterpret_cast<char*>(&brake_pedal_en_ctrl_)) + sizeof(brake_pedal_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_command_111)
}

void Brake_command_111::SharedCtor() {
  ::memset(&brake_pedal_en_ctrl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_pedal_cmd_) -
      reinterpret_cast<char*>(&brake_pedal_en_ctrl_)) + sizeof(brake_pedal_cmd_));
}

Brake_command_111::~Brake_command_111() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_command_111)
  SharedDtor();
}

void Brake_command_111::SharedDtor() {
}

void Brake_command_111::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_command_111& Brake_command_111::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_command_111_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Brake_command_111::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_command_111)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&brake_pedal_en_ctrl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_pedal_cmd_) -
        reinterpret_cast<char*>(&brake_pedal_en_ctrl_)) + sizeof(brake_pedal_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_command_111::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType_IsValid(val))) {
            _internal_set_brake_pedal_en_ctrl(static_cast<::apollo::canbus::Brake_command_111_Brake_pedal_en_ctrlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 brake_pedal_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_brake_pedal_cmd(&has_bits);
          brake_pedal_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_command_111::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_command_111)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brake_pedal_en_ctrl(), target);
  }

  // optional int32 brake_pedal_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_brake_pedal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_command_111)
  return target;
}

size_t Brake_command_111::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_command_111)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Brake_command_111.Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brake_pedal_en_ctrl());
    }

    // optional int32 brake_pedal_cmd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_brake_pedal_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_command_111::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_command_111)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_command_111* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_command_111>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_command_111)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_command_111)
    MergeFrom(*source);
  }
}

void Brake_command_111::MergeFrom(const Brake_command_111& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_command_111)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      brake_pedal_en_ctrl_ = from.brake_pedal_en_ctrl_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_pedal_cmd_ = from.brake_pedal_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_command_111::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_command_111)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_command_111::CopyFrom(const Brake_command_111& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_command_111)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_command_111::IsInitialized() const {
  return true;
}

void Brake_command_111::InternalSwap(Brake_command_111* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_pedal_en_ctrl_, other->brake_pedal_en_ctrl_);
  swap(brake_pedal_cmd_, other->brake_pedal_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_command_111::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Throttle_command_110::InitAsDefaultInstance() {
}
class Throttle_command_110::_Internal {
 public:
  using HasBits = decltype(std::declval<Throttle_command_110>()._has_bits_);
  static void set_has_throttle_pedal_en_ctrl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle_pedal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Throttle_command_110::Throttle_command_110()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Throttle_command_110)
}
Throttle_command_110::Throttle_command_110(const Throttle_command_110& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&throttle_pedal_en_ctrl_, &from.throttle_pedal_en_ctrl_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttle_pedal_cmd_) -
    reinterpret_cast<char*>(&throttle_pedal_en_ctrl_)) + sizeof(throttle_pedal_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Throttle_command_110)
}

void Throttle_command_110::SharedCtor() {
  ::memset(&throttle_pedal_en_ctrl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throttle_pedal_cmd_) -
      reinterpret_cast<char*>(&throttle_pedal_en_ctrl_)) + sizeof(throttle_pedal_cmd_));
}

Throttle_command_110::~Throttle_command_110() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Throttle_command_110)
  SharedDtor();
}

void Throttle_command_110::SharedDtor() {
}

void Throttle_command_110::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Throttle_command_110& Throttle_command_110::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Throttle_command_110_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Throttle_command_110::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Throttle_command_110)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&throttle_pedal_en_ctrl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&throttle_pedal_cmd_) -
        reinterpret_cast<char*>(&throttle_pedal_en_ctrl_)) + sizeof(throttle_pedal_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Throttle_command_110::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType_IsValid(val))) {
            _internal_set_throttle_pedal_en_ctrl(static_cast<::apollo::canbus::Throttle_command_110_Throttle_pedal_en_ctrlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 throttle_pedal_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_throttle_pedal_cmd(&has_bits);
          throttle_pedal_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Throttle_command_110::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Throttle_command_110)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_throttle_pedal_en_ctrl(), target);
  }

  // optional int32 throttle_pedal_cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_throttle_pedal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Throttle_command_110)
  return target;
}

size_t Throttle_command_110::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Throttle_command_110)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Throttle_command_110.Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_throttle_pedal_en_ctrl());
    }

    // optional int32 throttle_pedal_cmd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_throttle_pedal_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Throttle_command_110::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Throttle_command_110)
  GOOGLE_DCHECK_NE(&from, this);
  const Throttle_command_110* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Throttle_command_110>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Throttle_command_110)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Throttle_command_110)
    MergeFrom(*source);
  }
}

void Throttle_command_110::MergeFrom(const Throttle_command_110& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Throttle_command_110)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      throttle_pedal_en_ctrl_ = from.throttle_pedal_en_ctrl_;
    }
    if (cached_has_bits & 0x00000002u) {
      throttle_pedal_cmd_ = from.throttle_pedal_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Throttle_command_110::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Throttle_command_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Throttle_command_110::CopyFrom(const Throttle_command_110& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Throttle_command_110)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Throttle_command_110::IsInitialized() const {
  return true;
}

void Throttle_command_110::InternalSwap(Throttle_command_110* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(throttle_pedal_en_ctrl_, other->throttle_pedal_en_ctrl_);
  swap(throttle_pedal_cmd_, other->throttle_pedal_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Throttle_command_110::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Turnsignal_command_113::InitAsDefaultInstance() {
}
class Turnsignal_command_113::_Internal {
 public:
  using HasBits = decltype(std::declval<Turnsignal_command_113>()._has_bits_);
  static void set_has_turn_signal_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Turnsignal_command_113::Turnsignal_command_113()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turnsignal_command_113)
}
Turnsignal_command_113::Turnsignal_command_113(const Turnsignal_command_113& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_signal_cmd_ = from.turn_signal_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turnsignal_command_113)
}

void Turnsignal_command_113::SharedCtor() {
  turn_signal_cmd_ = 0;
}

Turnsignal_command_113::~Turnsignal_command_113() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turnsignal_command_113)
  SharedDtor();
}

void Turnsignal_command_113::SharedDtor() {
}

void Turnsignal_command_113::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Turnsignal_command_113& Turnsignal_command_113::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Turnsignal_command_113_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Turnsignal_command_113::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turnsignal_command_113)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  turn_signal_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Turnsignal_command_113::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType_IsValid(val))) {
            _internal_set_turn_signal_cmd(static_cast<::apollo::canbus::Turnsignal_command_113_Turn_signal_cmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Turnsignal_command_113::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turnsignal_command_113)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_signal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turnsignal_command_113)
  return target;
}

size_t Turnsignal_command_113::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turnsignal_command_113)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Turnsignal_command_113.Turn_signal_cmdType turn_signal_cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_signal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turnsignal_command_113::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turnsignal_command_113)
  GOOGLE_DCHECK_NE(&from, this);
  const Turnsignal_command_113* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Turnsignal_command_113>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turnsignal_command_113)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turnsignal_command_113)
    MergeFrom(*source);
  }
}

void Turnsignal_command_113::MergeFrom(const Turnsignal_command_113& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turnsignal_command_113)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turn_signal_cmd()) {
    _internal_set_turn_signal_cmd(from._internal_turn_signal_cmd());
  }
}

void Turnsignal_command_113::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turnsignal_command_113)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turnsignal_command_113::CopyFrom(const Turnsignal_command_113& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turnsignal_command_113)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turnsignal_command_113::IsInitialized() const {
  return true;
}

void Turnsignal_command_113::InternalSwap(Turnsignal_command_113* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(turn_signal_cmd_, other->turn_signal_cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turnsignal_command_113::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steer_command_112::InitAsDefaultInstance() {
}
class Steer_command_112::_Internal {
 public:
  using HasBits = decltype(std::declval<Steer_command_112>()._has_bits_);
  static void set_has_steer_angle_en_ctrl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steer_angle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Steer_command_112::Steer_command_112()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steer_command_112)
}
Steer_command_112::Steer_command_112(const Steer_command_112& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steer_angle_cmd_, &from.steer_angle_cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_angle_en_ctrl_) -
    reinterpret_cast<char*>(&steer_angle_cmd_)) + sizeof(steer_angle_en_ctrl_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steer_command_112)
}

void Steer_command_112::SharedCtor() {
  ::memset(&steer_angle_cmd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_en_ctrl_) -
      reinterpret_cast<char*>(&steer_angle_cmd_)) + sizeof(steer_angle_en_ctrl_));
}

Steer_command_112::~Steer_command_112() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steer_command_112)
  SharedDtor();
}

void Steer_command_112::SharedDtor() {
}

void Steer_command_112::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steer_command_112& Steer_command_112::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steer_command_112_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Steer_command_112::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steer_command_112)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steer_angle_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_en_ctrl_) -
        reinterpret_cast<char*>(&steer_angle_cmd_)) + sizeof(steer_angle_en_ctrl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steer_command_112::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType_IsValid(val))) {
            _internal_set_steer_angle_en_ctrl(static_cast<::apollo::canbus::Steer_command_112_Steer_angle_en_ctrlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steer_angle_cmd(&has_bits);
          steer_angle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steer_command_112::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steer_command_112)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_steer_angle_en_ctrl(), target);
  }

  // optional double steer_angle_cmd = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_steer_angle_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steer_command_112)
  return target;
}

size_t Steer_command_112::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steer_command_112)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double steer_angle_cmd = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Steer_command_112.Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_steer_angle_en_ctrl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steer_command_112::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steer_command_112)
  GOOGLE_DCHECK_NE(&from, this);
  const Steer_command_112* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steer_command_112>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steer_command_112)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steer_command_112)
    MergeFrom(*source);
  }
}

void Steer_command_112::MergeFrom(const Steer_command_112& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steer_command_112)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steer_angle_cmd_ = from.steer_angle_cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      steer_angle_en_ctrl_ = from.steer_angle_en_ctrl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steer_command_112::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steer_command_112)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steer_command_112::CopyFrom(const Steer_command_112& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steer_command_112)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steer_command_112::IsInitialized() const {
  return true;
}

void Steer_command_112::InternalSwap(Steer_command_112* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steer_angle_cmd_, other->steer_angle_cmd_);
  swap(steer_angle_en_ctrl_, other->steer_angle_en_ctrl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steer_command_112::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Brake_status__511::InitAsDefaultInstance() {
}
class Brake_status__511::_Internal {
 public:
  using HasBits = decltype(std::declval<Brake_status__511>()._has_bits_);
  static void set_has_brake_pedal_en_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brake_pedal_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Brake_status__511::Brake_status__511()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_status__511)
}
Brake_status__511::Brake_status__511(const Brake_status__511& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_pedal_en_sts_, &from.brake_pedal_en_sts_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_pedal_sts_) -
    reinterpret_cast<char*>(&brake_pedal_en_sts_)) + sizeof(brake_pedal_sts_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_status__511)
}

void Brake_status__511::SharedCtor() {
  ::memset(&brake_pedal_en_sts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_pedal_sts_) -
      reinterpret_cast<char*>(&brake_pedal_en_sts_)) + sizeof(brake_pedal_sts_));
}

Brake_status__511::~Brake_status__511() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_status__511)
  SharedDtor();
}

void Brake_status__511::SharedDtor() {
}

void Brake_status__511::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Brake_status__511& Brake_status__511::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Brake_status__511_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Brake_status__511::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_status__511)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&brake_pedal_en_sts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_pedal_sts_) -
        reinterpret_cast<char*>(&brake_pedal_en_sts_)) + sizeof(brake_pedal_sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Brake_status__511::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType_IsValid(val))) {
            _internal_set_brake_pedal_en_sts(static_cast<::apollo::canbus::Brake_status__511_Brake_pedal_en_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 brake_pedal_sts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_brake_pedal_sts(&has_bits);
          brake_pedal_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Brake_status__511::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_status__511)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brake_pedal_en_sts(), target);
  }

  // optional int32 brake_pedal_sts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_brake_pedal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_status__511)
  return target;
}

size_t Brake_status__511::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_status__511)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Brake_status__511.Brake_pedal_en_stsType brake_pedal_en_sts = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brake_pedal_en_sts());
    }

    // optional int32 brake_pedal_sts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_brake_pedal_sts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_status__511::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_status__511)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_status__511* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Brake_status__511>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_status__511)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_status__511)
    MergeFrom(*source);
  }
}

void Brake_status__511::MergeFrom(const Brake_status__511& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_status__511)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      brake_pedal_en_sts_ = from.brake_pedal_en_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      brake_pedal_sts_ = from.brake_pedal_sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_status__511::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_status__511)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_status__511::CopyFrom(const Brake_status__511& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_status__511)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_status__511::IsInitialized() const {
  return true;
}

void Brake_status__511::InternalSwap(Brake_status__511* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brake_pedal_en_sts_, other->brake_pedal_en_sts_);
  swap(brake_pedal_sts_, other->brake_pedal_sts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Brake_status__511::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Throttle_status__510::InitAsDefaultInstance() {
}
class Throttle_status__510::_Internal {
 public:
  using HasBits = decltype(std::declval<Throttle_status__510>()._has_bits_);
  static void set_has_throttle_pedal_en_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle_pedal_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Throttle_status__510::Throttle_status__510()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Throttle_status__510)
}
Throttle_status__510::Throttle_status__510(const Throttle_status__510& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&throttle_pedal_en_sts_, &from.throttle_pedal_en_sts_,
    static_cast<size_t>(reinterpret_cast<char*>(&throttle_pedal_sts_) -
    reinterpret_cast<char*>(&throttle_pedal_en_sts_)) + sizeof(throttle_pedal_sts_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Throttle_status__510)
}

void Throttle_status__510::SharedCtor() {
  ::memset(&throttle_pedal_en_sts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&throttle_pedal_sts_) -
      reinterpret_cast<char*>(&throttle_pedal_en_sts_)) + sizeof(throttle_pedal_sts_));
}

Throttle_status__510::~Throttle_status__510() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Throttle_status__510)
  SharedDtor();
}

void Throttle_status__510::SharedDtor() {
}

void Throttle_status__510::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Throttle_status__510& Throttle_status__510::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Throttle_status__510_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Throttle_status__510::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Throttle_status__510)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&throttle_pedal_en_sts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&throttle_pedal_sts_) -
        reinterpret_cast<char*>(&throttle_pedal_en_sts_)) + sizeof(throttle_pedal_sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Throttle_status__510::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType_IsValid(val))) {
            _internal_set_throttle_pedal_en_sts(static_cast<::apollo::canbus::Throttle_status__510_Throttle_pedal_en_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 throttle_pedal_sts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_throttle_pedal_sts(&has_bits);
          throttle_pedal_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Throttle_status__510::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Throttle_status__510)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_throttle_pedal_en_sts(), target);
  }

  // optional int32 throttle_pedal_sts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_throttle_pedal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Throttle_status__510)
  return target;
}

size_t Throttle_status__510::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Throttle_status__510)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Throttle_status__510.Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_throttle_pedal_en_sts());
    }

    // optional int32 throttle_pedal_sts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_throttle_pedal_sts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Throttle_status__510::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Throttle_status__510)
  GOOGLE_DCHECK_NE(&from, this);
  const Throttle_status__510* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Throttle_status__510>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Throttle_status__510)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Throttle_status__510)
    MergeFrom(*source);
  }
}

void Throttle_status__510::MergeFrom(const Throttle_status__510& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Throttle_status__510)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      throttle_pedal_en_sts_ = from.throttle_pedal_en_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      throttle_pedal_sts_ = from.throttle_pedal_sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Throttle_status__510::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Throttle_status__510)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Throttle_status__510::CopyFrom(const Throttle_status__510& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Throttle_status__510)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Throttle_status__510::IsInitialized() const {
  return true;
}

void Throttle_status__510::InternalSwap(Throttle_status__510* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(throttle_pedal_en_sts_, other->throttle_pedal_en_sts_);
  swap(throttle_pedal_sts_, other->throttle_pedal_sts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Throttle_status__510::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Turnsignal_status__513::InitAsDefaultInstance() {
}
class Turnsignal_status__513::_Internal {
 public:
  using HasBits = decltype(std::declval<Turnsignal_status__513>()._has_bits_);
  static void set_has_turn_signal_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Turnsignal_status__513::Turnsignal_status__513()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turnsignal_status__513)
}
Turnsignal_status__513::Turnsignal_status__513(const Turnsignal_status__513& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_signal_sts_ = from.turn_signal_sts_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turnsignal_status__513)
}

void Turnsignal_status__513::SharedCtor() {
  turn_signal_sts_ = 0;
}

Turnsignal_status__513::~Turnsignal_status__513() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turnsignal_status__513)
  SharedDtor();
}

void Turnsignal_status__513::SharedDtor() {
}

void Turnsignal_status__513::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Turnsignal_status__513& Turnsignal_status__513::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Turnsignal_status__513_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Turnsignal_status__513::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turnsignal_status__513)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  turn_signal_sts_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Turnsignal_status__513::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType_IsValid(val))) {
            _internal_set_turn_signal_sts(static_cast<::apollo::canbus::Turnsignal_status__513_Turn_signal_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Turnsignal_status__513::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turnsignal_status__513)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_turn_signal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turnsignal_status__513)
  return target;
}

size_t Turnsignal_status__513::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turnsignal_status__513)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Turnsignal_status__513.Turn_signal_stsType turn_signal_sts = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_signal_sts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turnsignal_status__513::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turnsignal_status__513)
  GOOGLE_DCHECK_NE(&from, this);
  const Turnsignal_status__513* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Turnsignal_status__513>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turnsignal_status__513)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turnsignal_status__513)
    MergeFrom(*source);
  }
}

void Turnsignal_status__513::MergeFrom(const Turnsignal_status__513& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turnsignal_status__513)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_turn_signal_sts()) {
    _internal_set_turn_signal_sts(from._internal_turn_signal_sts());
  }
}

void Turnsignal_status__513::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turnsignal_status__513)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turnsignal_status__513::CopyFrom(const Turnsignal_status__513& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turnsignal_status__513)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turnsignal_status__513::IsInitialized() const {
  return true;
}

void Turnsignal_status__513::InternalSwap(Turnsignal_status__513* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(turn_signal_sts_, other->turn_signal_sts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Turnsignal_status__513::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steer_status__512::InitAsDefaultInstance() {
}
class Steer_status__512::_Internal {
 public:
  using HasBits = decltype(std::declval<Steer_status__512>()._has_bits_);
  static void set_has_steer_angle_en_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steer_angle_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Steer_status__512::Steer_status__512()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steer_status__512)
}
Steer_status__512::Steer_status__512(const Steer_status__512& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steer_angle_sts_, &from.steer_angle_sts_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_angle_en_sts_) -
    reinterpret_cast<char*>(&steer_angle_sts_)) + sizeof(steer_angle_en_sts_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steer_status__512)
}

void Steer_status__512::SharedCtor() {
  ::memset(&steer_angle_sts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_en_sts_) -
      reinterpret_cast<char*>(&steer_angle_sts_)) + sizeof(steer_angle_en_sts_));
}

Steer_status__512::~Steer_status__512() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steer_status__512)
  SharedDtor();
}

void Steer_status__512::SharedDtor() {
}

void Steer_status__512::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steer_status__512& Steer_status__512::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steer_status__512_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Steer_status__512::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steer_status__512)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steer_angle_sts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_en_sts_) -
        reinterpret_cast<char*>(&steer_angle_sts_)) + sizeof(steer_angle_en_sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Steer_status__512::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Steer_status__512_Steer_angle_en_stsType_IsValid(val))) {
            _internal_set_steer_angle_en_sts(static_cast<::apollo::canbus::Steer_status__512_Steer_angle_en_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_sts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steer_angle_sts(&has_bits);
          steer_angle_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steer_status__512::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steer_status__512)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_steer_angle_en_sts(), target);
  }

  // optional double steer_angle_sts = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_steer_angle_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steer_status__512)
  return target;
}

size_t Steer_status__512::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steer_status__512)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double steer_angle_sts = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Steer_status__512.Steer_angle_en_stsType steer_angle_en_sts = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_steer_angle_en_sts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steer_status__512::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steer_status__512)
  GOOGLE_DCHECK_NE(&from, this);
  const Steer_status__512* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steer_status__512>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steer_status__512)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steer_status__512)
    MergeFrom(*source);
  }
}

void Steer_status__512::MergeFrom(const Steer_status__512& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steer_status__512)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steer_angle_sts_ = from.steer_angle_sts_;
    }
    if (cached_has_bits & 0x00000002u) {
      steer_angle_en_sts_ = from.steer_angle_en_sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steer_status__512::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steer_status__512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steer_status__512::CopyFrom(const Steer_status__512& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steer_status__512)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steer_status__512::IsInitialized() const {
  return true;
}

void Steer_status__512::InternalSwap(Steer_status__512* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steer_angle_sts_, other->steer_angle_sts_);
  swap(steer_angle_en_sts_, other->steer_angle_en_sts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steer_status__512::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ecu_status_1_515::InitAsDefaultInstance() {
}
class Ecu_status_1_515::_Internal {
 public:
  using HasBits = decltype(std::declval<Ecu_status_1_515>()._has_bits_);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acc_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ctrl_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chassis_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chassis_err(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Ecu_status_1_515::Ecu_status_1_515()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ecu_status_1_515)
}
Ecu_status_1_515::Ecu_status_1_515(const Ecu_status_1_515& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&chassis_err_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(chassis_err_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ecu_status_1_515)
}

void Ecu_status_1_515::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chassis_err_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(chassis_err_));
}

Ecu_status_1_515::~Ecu_status_1_515() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ecu_status_1_515)
  SharedDtor();
}

void Ecu_status_1_515::SharedDtor() {
}

void Ecu_status_1_515::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ecu_status_1_515& Ecu_status_1_515::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ecu_status_1_515_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Ecu_status_1_515::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ecu_status_1_515)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chassis_err_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(chassis_err_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ecu_status_1_515::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acc_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_acc_speed(&has_bits);
          acc_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Ecu_status_1_515_Ctrl_stsType_IsValid(val))) {
            _internal_set_ctrl_sts(static_cast<::apollo::canbus::Ecu_status_1_515_Ctrl_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 chassis_sts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_chassis_sts(&has_bits);
          chassis_sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 chassis_err = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_chassis_err(&has_bits);
          chassis_err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ecu_status_1_515::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ecu_status_1_515)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // optional double acc_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_acc_speed(), target);
  }

  // optional .apollo.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ctrl_sts(), target);
  }

  // optional int32 chassis_sts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_chassis_sts(), target);
  }

  // optional int32 chassis_err = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_chassis_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ecu_status_1_515)
  return target;
}

size_t Ecu_status_1_515::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ecu_status_1_515)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double acc_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Ecu_status_1_515.Ctrl_stsType ctrl_sts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ctrl_sts());
    }

    // optional int32 chassis_sts = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chassis_sts());
    }

    // optional int32 chassis_err = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_chassis_err());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ecu_status_1_515::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ecu_status_1_515)
  GOOGLE_DCHECK_NE(&from, this);
  const Ecu_status_1_515* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ecu_status_1_515>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ecu_status_1_515)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ecu_status_1_515)
    MergeFrom(*source);
  }
}

void Ecu_status_1_515::MergeFrom(const Ecu_status_1_515& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ecu_status_1_515)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_speed_ = from.acc_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      ctrl_sts_ = from.ctrl_sts_;
    }
    if (cached_has_bits & 0x00000008u) {
      chassis_sts_ = from.chassis_sts_;
    }
    if (cached_has_bits & 0x00000010u) {
      chassis_err_ = from.chassis_err_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ecu_status_1_515::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ecu_status_1_515)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ecu_status_1_515::CopyFrom(const Ecu_status_1_515& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ecu_status_1_515)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_1_515::IsInitialized() const {
  return true;
}

void Ecu_status_1_515::InternalSwap(Ecu_status_1_515* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(speed_, other->speed_);
  swap(acc_speed_, other->acc_speed_);
  swap(ctrl_sts_, other->ctrl_sts_);
  swap(chassis_sts_, other->chassis_sts_);
  swap(chassis_err_, other->chassis_err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ecu_status_1_515::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gear_status_514::InitAsDefaultInstance() {
}
class Gear_status_514::_Internal {
 public:
  using HasBits = decltype(std::declval<Gear_status_514>()._has_bits_);
  static void set_has_gear_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Gear_status_514::Gear_status_514()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gear_status_514)
}
Gear_status_514::Gear_status_514(const Gear_status_514& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gear_sts_ = from.gear_sts_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear_status_514)
}

void Gear_status_514::SharedCtor() {
  gear_sts_ = 1;
}

Gear_status_514::~Gear_status_514() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear_status_514)
  SharedDtor();
}

void Gear_status_514::SharedDtor() {
}

void Gear_status_514::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gear_status_514& Gear_status_514::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gear_status_514_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Gear_status_514::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear_status_514)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gear_sts_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Gear_status_514::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Gear_status_514_Gear_stsType_IsValid(val))) {
            _internal_set_gear_sts(static_cast<::apollo::canbus::Gear_status_514_Gear_stsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gear_status_514::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear_status_514)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_gear_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear_status_514)
  return target;
}

size_t Gear_status_514::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear_status_514)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.canbus.Gear_status_514.Gear_stsType gear_sts = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_sts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gear_status_514::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gear_status_514)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear_status_514* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gear_status_514>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gear_status_514)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gear_status_514)
    MergeFrom(*source);
  }
}

void Gear_status_514::MergeFrom(const Gear_status_514& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear_status_514)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gear_sts()) {
    _internal_set_gear_sts(from._internal_gear_sts());
  }
}

void Gear_status_514::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gear_status_514)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear_status_514::CopyFrom(const Gear_status_514& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear_status_514)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear_status_514::IsInitialized() const {
  return true;
}

void Gear_status_514::InternalSwap(Gear_status_514* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gear_sts_, other->gear_sts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gear_status_514::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ecu_status_3_517::InitAsDefaultInstance() {
}
class Ecu_status_3_517::_Internal {
 public:
  using HasBits = decltype(std::declval<Ecu_status_3_517>()._has_bits_);
  static void set_has_ultrasound_dist_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ultrasound_dist_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ultrasound_dist_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ultrasound_dist_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ultrasound_dist_5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ultrasound_dist_6(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ultrasound_dist_7(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ultrasound_dist_8(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Ecu_status_3_517::Ecu_status_3_517()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ecu_status_3_517)
}
Ecu_status_3_517::Ecu_status_3_517(const Ecu_status_3_517& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ultrasound_dist_1_, &from.ultrasound_dist_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ultrasound_dist_8_) -
    reinterpret_cast<char*>(&ultrasound_dist_1_)) + sizeof(ultrasound_dist_8_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ecu_status_3_517)
}

void Ecu_status_3_517::SharedCtor() {
  ::memset(&ultrasound_dist_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ultrasound_dist_8_) -
      reinterpret_cast<char*>(&ultrasound_dist_1_)) + sizeof(ultrasound_dist_8_));
}

Ecu_status_3_517::~Ecu_status_3_517() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ecu_status_3_517)
  SharedDtor();
}

void Ecu_status_3_517::SharedDtor() {
}

void Ecu_status_3_517::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ecu_status_3_517& Ecu_status_3_517::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ecu_status_3_517_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Ecu_status_3_517::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ecu_status_3_517)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ultrasound_dist_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ultrasound_dist_8_) -
        reinterpret_cast<char*>(&ultrasound_dist_1_)) + sizeof(ultrasound_dist_8_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ecu_status_3_517::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 ultrasound_dist_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ultrasound_dist_1(&has_bits);
          ultrasound_dist_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ultrasound_dist_2(&has_bits);
          ultrasound_dist_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ultrasound_dist_3(&has_bits);
          ultrasound_dist_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ultrasound_dist_4(&has_bits);
          ultrasound_dist_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ultrasound_dist_5(&has_bits);
          ultrasound_dist_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ultrasound_dist_6(&has_bits);
          ultrasound_dist_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ultrasound_dist_7(&has_bits);
          ultrasound_dist_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultrasound_dist_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ultrasound_dist_8(&has_bits);
          ultrasound_dist_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ecu_status_3_517::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ecu_status_3_517)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ultrasound_dist_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ultrasound_dist_1(), target);
  }

  // optional int32 ultrasound_dist_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ultrasound_dist_2(), target);
  }

  // optional int32 ultrasound_dist_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ultrasound_dist_3(), target);
  }

  // optional int32 ultrasound_dist_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ultrasound_dist_4(), target);
  }

  // optional int32 ultrasound_dist_5 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ultrasound_dist_5(), target);
  }

  // optional int32 ultrasound_dist_6 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ultrasound_dist_6(), target);
  }

  // optional int32 ultrasound_dist_7 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ultrasound_dist_7(), target);
  }

  // optional int32 ultrasound_dist_8 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_ultrasound_dist_8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ecu_status_3_517)
  return target;
}

size_t Ecu_status_3_517::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ecu_status_3_517)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 ultrasound_dist_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultrasound_dist_1());
    }

    // optional int32 ultrasound_dist_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultrasound_dist_2());
    }

    // optional int32 ultrasound_dist_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultrasound_dist_3());
    }

    // optional int32 ultrasound_dist_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultrasound_dist_4());
    }

    // optional int32 ultrasound_dist_5 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultrasound_dist_5());
    }

    // optional int32 ultrasound_dist_6 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultrasound_dist_6());
    }

    // optional int32 ultrasound_dist_7 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultrasound_dist_7());
    }

    // optional int32 ultrasound_dist_8 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultrasound_dist_8());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ecu_status_3_517::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ecu_status_3_517)
  GOOGLE_DCHECK_NE(&from, this);
  const Ecu_status_3_517* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ecu_status_3_517>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ecu_status_3_517)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ecu_status_3_517)
    MergeFrom(*source);
  }
}

void Ecu_status_3_517::MergeFrom(const Ecu_status_3_517& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ecu_status_3_517)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ultrasound_dist_1_ = from.ultrasound_dist_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      ultrasound_dist_2_ = from.ultrasound_dist_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      ultrasound_dist_3_ = from.ultrasound_dist_3_;
    }
    if (cached_has_bits & 0x00000008u) {
      ultrasound_dist_4_ = from.ultrasound_dist_4_;
    }
    if (cached_has_bits & 0x00000010u) {
      ultrasound_dist_5_ = from.ultrasound_dist_5_;
    }
    if (cached_has_bits & 0x00000020u) {
      ultrasound_dist_6_ = from.ultrasound_dist_6_;
    }
    if (cached_has_bits & 0x00000040u) {
      ultrasound_dist_7_ = from.ultrasound_dist_7_;
    }
    if (cached_has_bits & 0x00000080u) {
      ultrasound_dist_8_ = from.ultrasound_dist_8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ecu_status_3_517::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ecu_status_3_517)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ecu_status_3_517::CopyFrom(const Ecu_status_3_517& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ecu_status_3_517)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_3_517::IsInitialized() const {
  return true;
}

void Ecu_status_3_517::InternalSwap(Ecu_status_3_517* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ultrasound_dist_1_, other->ultrasound_dist_1_);
  swap(ultrasound_dist_2_, other->ultrasound_dist_2_);
  swap(ultrasound_dist_3_, other->ultrasound_dist_3_);
  swap(ultrasound_dist_4_, other->ultrasound_dist_4_);
  swap(ultrasound_dist_5_, other->ultrasound_dist_5_);
  swap(ultrasound_dist_6_, other->ultrasound_dist_6_);
  swap(ultrasound_dist_7_, other->ultrasound_dist_7_);
  swap(ultrasound_dist_8_, other->ultrasound_dist_8_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ecu_status_3_517::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ecu_status_2_516::InitAsDefaultInstance() {
}
class Ecu_status_2_516::_Internal {
 public:
  using HasBits = decltype(std::declval<Ecu_status_2_516>()._has_bits_);
  static void set_has_battery_remaining_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battery_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_battery_current(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_battery_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Ecu_status_2_516::Ecu_status_2_516()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ecu_status_2_516)
}
Ecu_status_2_516::Ecu_status_2_516(const Ecu_status_2_516& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_voltage_, &from.battery_voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_current_) -
    reinterpret_cast<char*>(&battery_voltage_)) + sizeof(battery_current_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ecu_status_2_516)
}

void Ecu_status_2_516::SharedCtor() {
  ::memset(&battery_voltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_current_) -
      reinterpret_cast<char*>(&battery_voltage_)) + sizeof(battery_current_));
}

Ecu_status_2_516::~Ecu_status_2_516() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ecu_status_2_516)
  SharedDtor();
}

void Ecu_status_2_516::SharedDtor() {
}

void Ecu_status_2_516::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ecu_status_2_516& Ecu_status_2_516::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ecu_status_2_516_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Ecu_status_2_516::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ecu_status_2_516)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&battery_voltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&battery_current_) -
        reinterpret_cast<char*>(&battery_voltage_)) + sizeof(battery_current_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ecu_status_2_516::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 battery_remaining_capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_battery_remaining_capacity(&has_bits);
          battery_remaining_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double battery_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_battery_voltage(&has_bits);
          battery_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double battery_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_battery_current(&has_bits);
          battery_current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 battery_temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_battery_temperature(&has_bits);
          battery_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ecu_status_2_516::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ecu_status_2_516)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 battery_remaining_capacity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_battery_remaining_capacity(), target);
  }

  // optional double battery_voltage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_battery_voltage(), target);
  }

  // optional double battery_current = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_battery_current(), target);
  }

  // optional int32 battery_temperature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_battery_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ecu_status_2_516)
  return target;
}

size_t Ecu_status_2_516::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ecu_status_2_516)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double battery_voltage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 battery_remaining_capacity = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_battery_remaining_capacity());
    }

    // optional int32 battery_temperature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_battery_temperature());
    }

    // optional double battery_current = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ecu_status_2_516::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ecu_status_2_516)
  GOOGLE_DCHECK_NE(&from, this);
  const Ecu_status_2_516* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ecu_status_2_516>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ecu_status_2_516)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ecu_status_2_516)
    MergeFrom(*source);
  }
}

void Ecu_status_2_516::MergeFrom(const Ecu_status_2_516& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ecu_status_2_516)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      battery_voltage_ = from.battery_voltage_;
    }
    if (cached_has_bits & 0x00000002u) {
      battery_remaining_capacity_ = from.battery_remaining_capacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      battery_temperature_ = from.battery_temperature_;
    }
    if (cached_has_bits & 0x00000008u) {
      battery_current_ = from.battery_current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ecu_status_2_516::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ecu_status_2_516)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ecu_status_2_516::CopyFrom(const Ecu_status_2_516& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ecu_status_2_516)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ecu_status_2_516::IsInitialized() const {
  return true;
}

void Ecu_status_2_516::InternalSwap(Ecu_status_2_516* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(battery_voltage_, other->battery_voltage_);
  swap(battery_remaining_capacity_, other->battery_remaining_capacity_);
  swap(battery_temperature_, other->battery_temperature_);
  swap(battery_current_, other->battery_current_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ecu_status_2_516::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ch::InitAsDefaultInstance() {
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->control_command_115_ = const_cast< ::apollo::canbus::Control_command_115*>(
      ::apollo::canbus::Control_command_115::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->gear_command_114_ = const_cast< ::apollo::canbus::Gear_command_114*>(
      ::apollo::canbus::Gear_command_114::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->brake_command_111_ = const_cast< ::apollo::canbus::Brake_command_111*>(
      ::apollo::canbus::Brake_command_111::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->throttle_command_110_ = const_cast< ::apollo::canbus::Throttle_command_110*>(
      ::apollo::canbus::Throttle_command_110::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->turnsignal_command_113_ = const_cast< ::apollo::canbus::Turnsignal_command_113*>(
      ::apollo::canbus::Turnsignal_command_113::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->steer_command_112_ = const_cast< ::apollo::canbus::Steer_command_112*>(
      ::apollo::canbus::Steer_command_112::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->brake_status__511_ = const_cast< ::apollo::canbus::Brake_status__511*>(
      ::apollo::canbus::Brake_status__511::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->throttle_status__510_ = const_cast< ::apollo::canbus::Throttle_status__510*>(
      ::apollo::canbus::Throttle_status__510::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->turnsignal_status__513_ = const_cast< ::apollo::canbus::Turnsignal_status__513*>(
      ::apollo::canbus::Turnsignal_status__513::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->steer_status__512_ = const_cast< ::apollo::canbus::Steer_status__512*>(
      ::apollo::canbus::Steer_status__512::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->ecu_status_1_515_ = const_cast< ::apollo::canbus::Ecu_status_1_515*>(
      ::apollo::canbus::Ecu_status_1_515::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->gear_status_514_ = const_cast< ::apollo::canbus::Gear_status_514*>(
      ::apollo::canbus::Gear_status_514::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->ecu_status_3_517_ = const_cast< ::apollo::canbus::Ecu_status_3_517*>(
      ::apollo::canbus::Ecu_status_3_517::internal_default_instance());
  ::apollo::canbus::_Ch_default_instance_._instance.get_mutable()->ecu_status_2_516_ = const_cast< ::apollo::canbus::Ecu_status_2_516*>(
      ::apollo::canbus::Ecu_status_2_516::internal_default_instance());
}
class Ch::_Internal {
 public:
  using HasBits = decltype(std::declval<Ch>()._has_bits_);
  static const ::apollo::canbus::Control_command_115& control_command_115(const Ch* msg);
  static void set_has_control_command_115(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Gear_command_114& gear_command_114(const Ch* msg);
  static void set_has_gear_command_114(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Brake_command_111& brake_command_111(const Ch* msg);
  static void set_has_brake_command_111(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Throttle_command_110& throttle_command_110(const Ch* msg);
  static void set_has_throttle_command_110(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Turnsignal_command_113& turnsignal_command_113(const Ch* msg);
  static void set_has_turnsignal_command_113(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Steer_command_112& steer_command_112(const Ch* msg);
  static void set_has_steer_command_112(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Brake_status__511& brake_status__511(const Ch* msg);
  static void set_has_brake_status__511(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Throttle_status__510& throttle_status__510(const Ch* msg);
  static void set_has_throttle_status__510(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Turnsignal_status__513& turnsignal_status__513(const Ch* msg);
  static void set_has_turnsignal_status__513(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Steer_status__512& steer_status__512(const Ch* msg);
  static void set_has_steer_status__512(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Ecu_status_1_515& ecu_status_1_515(const Ch* msg);
  static void set_has_ecu_status_1_515(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Gear_status_514& gear_status_514(const Ch* msg);
  static void set_has_gear_status_514(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Ecu_status_3_517& ecu_status_3_517(const Ch* msg);
  static void set_has_ecu_status_3_517(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::Ecu_status_2_516& ecu_status_2_516(const Ch* msg);
  static void set_has_ecu_status_2_516(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::apollo::canbus::Control_command_115&
Ch::_Internal::control_command_115(const Ch* msg) {
  return *msg->control_command_115_;
}
const ::apollo::canbus::Gear_command_114&
Ch::_Internal::gear_command_114(const Ch* msg) {
  return *msg->gear_command_114_;
}
const ::apollo::canbus::Brake_command_111&
Ch::_Internal::brake_command_111(const Ch* msg) {
  return *msg->brake_command_111_;
}
const ::apollo::canbus::Throttle_command_110&
Ch::_Internal::throttle_command_110(const Ch* msg) {
  return *msg->throttle_command_110_;
}
const ::apollo::canbus::Turnsignal_command_113&
Ch::_Internal::turnsignal_command_113(const Ch* msg) {
  return *msg->turnsignal_command_113_;
}
const ::apollo::canbus::Steer_command_112&
Ch::_Internal::steer_command_112(const Ch* msg) {
  return *msg->steer_command_112_;
}
const ::apollo::canbus::Brake_status__511&
Ch::_Internal::brake_status__511(const Ch* msg) {
  return *msg->brake_status__511_;
}
const ::apollo::canbus::Throttle_status__510&
Ch::_Internal::throttle_status__510(const Ch* msg) {
  return *msg->throttle_status__510_;
}
const ::apollo::canbus::Turnsignal_status__513&
Ch::_Internal::turnsignal_status__513(const Ch* msg) {
  return *msg->turnsignal_status__513_;
}
const ::apollo::canbus::Steer_status__512&
Ch::_Internal::steer_status__512(const Ch* msg) {
  return *msg->steer_status__512_;
}
const ::apollo::canbus::Ecu_status_1_515&
Ch::_Internal::ecu_status_1_515(const Ch* msg) {
  return *msg->ecu_status_1_515_;
}
const ::apollo::canbus::Gear_status_514&
Ch::_Internal::gear_status_514(const Ch* msg) {
  return *msg->gear_status_514_;
}
const ::apollo::canbus::Ecu_status_3_517&
Ch::_Internal::ecu_status_3_517(const Ch* msg) {
  return *msg->ecu_status_3_517_;
}
const ::apollo::canbus::Ecu_status_2_516&
Ch::_Internal::ecu_status_2_516(const Ch* msg) {
  return *msg->ecu_status_2_516_;
}
Ch::Ch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ch)
}
Ch::Ch(const Ch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_control_command_115()) {
    control_command_115_ = new ::apollo::canbus::Control_command_115(*from.control_command_115_);
  } else {
    control_command_115_ = nullptr;
  }
  if (from._internal_has_gear_command_114()) {
    gear_command_114_ = new ::apollo::canbus::Gear_command_114(*from.gear_command_114_);
  } else {
    gear_command_114_ = nullptr;
  }
  if (from._internal_has_brake_command_111()) {
    brake_command_111_ = new ::apollo::canbus::Brake_command_111(*from.brake_command_111_);
  } else {
    brake_command_111_ = nullptr;
  }
  if (from._internal_has_throttle_command_110()) {
    throttle_command_110_ = new ::apollo::canbus::Throttle_command_110(*from.throttle_command_110_);
  } else {
    throttle_command_110_ = nullptr;
  }
  if (from._internal_has_turnsignal_command_113()) {
    turnsignal_command_113_ = new ::apollo::canbus::Turnsignal_command_113(*from.turnsignal_command_113_);
  } else {
    turnsignal_command_113_ = nullptr;
  }
  if (from._internal_has_steer_command_112()) {
    steer_command_112_ = new ::apollo::canbus::Steer_command_112(*from.steer_command_112_);
  } else {
    steer_command_112_ = nullptr;
  }
  if (from._internal_has_brake_status__511()) {
    brake_status__511_ = new ::apollo::canbus::Brake_status__511(*from.brake_status__511_);
  } else {
    brake_status__511_ = nullptr;
  }
  if (from._internal_has_throttle_status__510()) {
    throttle_status__510_ = new ::apollo::canbus::Throttle_status__510(*from.throttle_status__510_);
  } else {
    throttle_status__510_ = nullptr;
  }
  if (from._internal_has_turnsignal_status__513()) {
    turnsignal_status__513_ = new ::apollo::canbus::Turnsignal_status__513(*from.turnsignal_status__513_);
  } else {
    turnsignal_status__513_ = nullptr;
  }
  if (from._internal_has_steer_status__512()) {
    steer_status__512_ = new ::apollo::canbus::Steer_status__512(*from.steer_status__512_);
  } else {
    steer_status__512_ = nullptr;
  }
  if (from._internal_has_ecu_status_1_515()) {
    ecu_status_1_515_ = new ::apollo::canbus::Ecu_status_1_515(*from.ecu_status_1_515_);
  } else {
    ecu_status_1_515_ = nullptr;
  }
  if (from._internal_has_gear_status_514()) {
    gear_status_514_ = new ::apollo::canbus::Gear_status_514(*from.gear_status_514_);
  } else {
    gear_status_514_ = nullptr;
  }
  if (from._internal_has_ecu_status_3_517()) {
    ecu_status_3_517_ = new ::apollo::canbus::Ecu_status_3_517(*from.ecu_status_3_517_);
  } else {
    ecu_status_3_517_ = nullptr;
  }
  if (from._internal_has_ecu_status_2_516()) {
    ecu_status_2_516_ = new ::apollo::canbus::Ecu_status_2_516(*from.ecu_status_2_516_);
  } else {
    ecu_status_2_516_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ch)
}

void Ch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ch_modules_2fcanbus_2fproto_2fch_2eproto.base);
  ::memset(&control_command_115_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ecu_status_2_516_) -
      reinterpret_cast<char*>(&control_command_115_)) + sizeof(ecu_status_2_516_));
}

Ch::~Ch() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ch)
  SharedDtor();
}

void Ch::SharedDtor() {
  if (this != internal_default_instance()) delete control_command_115_;
  if (this != internal_default_instance()) delete gear_command_114_;
  if (this != internal_default_instance()) delete brake_command_111_;
  if (this != internal_default_instance()) delete throttle_command_110_;
  if (this != internal_default_instance()) delete turnsignal_command_113_;
  if (this != internal_default_instance()) delete steer_command_112_;
  if (this != internal_default_instance()) delete brake_status__511_;
  if (this != internal_default_instance()) delete throttle_status__510_;
  if (this != internal_default_instance()) delete turnsignal_status__513_;
  if (this != internal_default_instance()) delete steer_status__512_;
  if (this != internal_default_instance()) delete ecu_status_1_515_;
  if (this != internal_default_instance()) delete gear_status_514_;
  if (this != internal_default_instance()) delete ecu_status_3_517_;
  if (this != internal_default_instance()) delete ecu_status_2_516_;
}

void Ch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ch& Ch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ch_modules_2fcanbus_2fproto_2fch_2eproto.base);
  return *internal_default_instance();
}


void Ch::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_command_115_ != nullptr);
      control_command_115_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gear_command_114_ != nullptr);
      gear_command_114_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brake_command_111_ != nullptr);
      brake_command_111_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(throttle_command_110_ != nullptr);
      throttle_command_110_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(turnsignal_command_113_ != nullptr);
      turnsignal_command_113_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(steer_command_112_ != nullptr);
      steer_command_112_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(brake_status__511_ != nullptr);
      brake_status__511_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(throttle_status__510_ != nullptr);
      throttle_status__510_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(turnsignal_status__513_ != nullptr);
      turnsignal_status__513_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(steer_status__512_ != nullptr);
      steer_status__512_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(ecu_status_1_515_ != nullptr);
      ecu_status_1_515_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(gear_status_514_ != nullptr);
      gear_status_514_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(ecu_status_3_517_ != nullptr);
      ecu_status_3_517_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(ecu_status_2_516_ != nullptr);
      ecu_status_2_516_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Control_command_115 control_command_115 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_command_115(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gear_command_114 gear_command_114 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear_command_114(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_command_111 brake_command_111 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_command_111(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Throttle_command_110 throttle_command_110 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_command_110(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_turnsignal_command_113(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steer_command_112 steer_command_112 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_command_112(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Brake_status__511 brake_status__511 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_status__511(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Throttle_status__510 throttle_status__510 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_status__510(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_turnsignal_status__513(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Steer_status__512 steer_status__512 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_status__512(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecu_status_1_515(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Gear_status_514 gear_status_514 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gear_status_514(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecu_status_3_517(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecu_status_2_516(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Control_command_115 control_command_115 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::control_command_115(this), target, stream);
  }

  // optional .apollo.canbus.Gear_command_114 gear_command_114 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gear_command_114(this), target, stream);
  }

  // optional .apollo.canbus.Brake_command_111 brake_command_111 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::brake_command_111(this), target, stream);
  }

  // optional .apollo.canbus.Throttle_command_110 throttle_command_110 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::throttle_command_110(this), target, stream);
  }

  // optional .apollo.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::turnsignal_command_113(this), target, stream);
  }

  // optional .apollo.canbus.Steer_command_112 steer_command_112 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::steer_command_112(this), target, stream);
  }

  // optional .apollo.canbus.Brake_status__511 brake_status__511 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::brake_status__511(this), target, stream);
  }

  // optional .apollo.canbus.Throttle_status__510 throttle_status__510 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::throttle_status__510(this), target, stream);
  }

  // optional .apollo.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::turnsignal_status__513(this), target, stream);
  }

  // optional .apollo.canbus.Steer_status__512 steer_status__512 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::steer_status__512(this), target, stream);
  }

  // optional .apollo.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ecu_status_1_515(this), target, stream);
  }

  // optional .apollo.canbus.Gear_status_514 gear_status_514 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::gear_status_514(this), target, stream);
  }

  // optional .apollo.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::ecu_status_3_517(this), target, stream);
  }

  // optional .apollo.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::ecu_status_2_516(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ch)
  return target;
}

size_t Ch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Control_command_115 control_command_115 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_command_115_);
    }

    // optional .apollo.canbus.Gear_command_114 gear_command_114 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gear_command_114_);
    }

    // optional .apollo.canbus.Brake_command_111 brake_command_111 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_command_111_);
    }

    // optional .apollo.canbus.Throttle_command_110 throttle_command_110 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *throttle_command_110_);
    }

    // optional .apollo.canbus.Turnsignal_command_113 turnsignal_command_113 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *turnsignal_command_113_);
    }

    // optional .apollo.canbus.Steer_command_112 steer_command_112 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steer_command_112_);
    }

    // optional .apollo.canbus.Brake_status__511 brake_status__511 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *brake_status__511_);
    }

    // optional .apollo.canbus.Throttle_status__510 throttle_status__510 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *throttle_status__510_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .apollo.canbus.Turnsignal_status__513 turnsignal_status__513 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *turnsignal_status__513_);
    }

    // optional .apollo.canbus.Steer_status__512 steer_status__512 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *steer_status__512_);
    }

    // optional .apollo.canbus.Ecu_status_1_515 ecu_status_1_515 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ecu_status_1_515_);
    }

    // optional .apollo.canbus.Gear_status_514 gear_status_514 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gear_status_514_);
    }

    // optional .apollo.canbus.Ecu_status_3_517 ecu_status_3_517 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ecu_status_3_517_);
    }

    // optional .apollo.canbus.Ecu_status_2_516 ecu_status_2_516 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ecu_status_2_516_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ch)
  GOOGLE_DCHECK_NE(&from, this);
  const Ch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ch)
    MergeFrom(*source);
  }
}

void Ch::MergeFrom(const Ch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_control_command_115()->::apollo::canbus::Control_command_115::MergeFrom(from._internal_control_command_115());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gear_command_114()->::apollo::canbus::Gear_command_114::MergeFrom(from._internal_gear_command_114());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_brake_command_111()->::apollo::canbus::Brake_command_111::MergeFrom(from._internal_brake_command_111());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_throttle_command_110()->::apollo::canbus::Throttle_command_110::MergeFrom(from._internal_throttle_command_110());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_turnsignal_command_113()->::apollo::canbus::Turnsignal_command_113::MergeFrom(from._internal_turnsignal_command_113());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_steer_command_112()->::apollo::canbus::Steer_command_112::MergeFrom(from._internal_steer_command_112());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_brake_status__511()->::apollo::canbus::Brake_status__511::MergeFrom(from._internal_brake_status__511());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_throttle_status__510()->::apollo::canbus::Throttle_status__510::MergeFrom(from._internal_throttle_status__510());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_turnsignal_status__513()->::apollo::canbus::Turnsignal_status__513::MergeFrom(from._internal_turnsignal_status__513());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_steer_status__512()->::apollo::canbus::Steer_status__512::MergeFrom(from._internal_steer_status__512());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_ecu_status_1_515()->::apollo::canbus::Ecu_status_1_515::MergeFrom(from._internal_ecu_status_1_515());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_gear_status_514()->::apollo::canbus::Gear_status_514::MergeFrom(from._internal_gear_status_514());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_ecu_status_3_517()->::apollo::canbus::Ecu_status_3_517::MergeFrom(from._internal_ecu_status_3_517());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_ecu_status_2_516()->::apollo::canbus::Ecu_status_2_516::MergeFrom(from._internal_ecu_status_2_516());
    }
  }
}

void Ch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ch::CopyFrom(const Ch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ch::IsInitialized() const {
  return true;
}

void Ch::InternalSwap(Ch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_command_115_, other->control_command_115_);
  swap(gear_command_114_, other->gear_command_114_);
  swap(brake_command_111_, other->brake_command_111_);
  swap(throttle_command_110_, other->throttle_command_110_);
  swap(turnsignal_command_113_, other->turnsignal_command_113_);
  swap(steer_command_112_, other->steer_command_112_);
  swap(brake_status__511_, other->brake_status__511_);
  swap(throttle_status__510_, other->throttle_status__510_);
  swap(turnsignal_status__513_, other->turnsignal_status__513_);
  swap(steer_status__512_, other->steer_status__512_);
  swap(ecu_status_1_515_, other->ecu_status_1_515_);
  swap(gear_status_514_, other->gear_status_514_);
  swap(ecu_status_3_517_, other->ecu_status_3_517_);
  swap(ecu_status_2_516_, other->ecu_status_2_516_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Control_command_115* Arena::CreateMaybeMessage< ::apollo::canbus::Control_command_115 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Control_command_115 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gear_command_114* Arena::CreateMaybeMessage< ::apollo::canbus::Gear_command_114 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gear_command_114 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_command_111* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_command_111 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_command_111 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Throttle_command_110* Arena::CreateMaybeMessage< ::apollo::canbus::Throttle_command_110 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Throttle_command_110 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turnsignal_command_113* Arena::CreateMaybeMessage< ::apollo::canbus::Turnsignal_command_113 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turnsignal_command_113 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steer_command_112* Arena::CreateMaybeMessage< ::apollo::canbus::Steer_command_112 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steer_command_112 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Brake_status__511* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_status__511 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_status__511 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Throttle_status__510* Arena::CreateMaybeMessage< ::apollo::canbus::Throttle_status__510 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Throttle_status__510 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Turnsignal_status__513* Arena::CreateMaybeMessage< ::apollo::canbus::Turnsignal_status__513 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turnsignal_status__513 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Steer_status__512* Arena::CreateMaybeMessage< ::apollo::canbus::Steer_status__512 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steer_status__512 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ecu_status_1_515* Arena::CreateMaybeMessage< ::apollo::canbus::Ecu_status_1_515 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Ecu_status_1_515 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Gear_status_514* Arena::CreateMaybeMessage< ::apollo::canbus::Gear_status_514 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gear_status_514 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ecu_status_3_517* Arena::CreateMaybeMessage< ::apollo::canbus::Ecu_status_3_517 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Ecu_status_3_517 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ecu_status_2_516* Arena::CreateMaybeMessage< ::apollo::canbus::Ecu_status_2_516 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Ecu_status_2_516 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ch* Arena::CreateMaybeMessage< ::apollo::canbus::Ch >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Ch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
