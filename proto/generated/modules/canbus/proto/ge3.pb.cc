// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/ge3.proto

#include "modules/canbus/proto/ge3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_bcm_201_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_bcs_202_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_epb_203_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_eps_204_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_vcu_205_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_1_301_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_2_302_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_3_303_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_bcm_304_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_bcs_1_306_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_bcs_2_307_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_bcs_3_308_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_epb_310_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_eps_311_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_vcu_1_312_modules_2fcanbus_2fproto_2fge3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fge3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_vcu_2_313_modules_2fcanbus_2fproto_2fge3_2eproto;
namespace apollo {
namespace canbus {
class Pc_bcm_201DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pc_bcm_201> _instance;
} _Pc_bcm_201_default_instance_;
class Scu_bcs_3_308DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_bcs_3_308> _instance;
} _Scu_bcs_3_308_default_instance_;
class Pc_epb_203DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pc_epb_203> _instance;
} _Pc_epb_203_default_instance_;
class Pc_bcs_202DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pc_bcs_202> _instance;
} _Pc_bcs_202_default_instance_;
class Pc_vcu_205DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pc_vcu_205> _instance;
} _Pc_vcu_205_default_instance_;
class Pc_eps_204DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pc_eps_204> _instance;
} _Pc_eps_204_default_instance_;
class Scu_vcu_2_313DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_vcu_2_313> _instance;
} _Scu_vcu_2_313_default_instance_;
class Scu_1_301DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_1_301> _instance;
} _Scu_1_301_default_instance_;
class Scu_2_302DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_2_302> _instance;
} _Scu_2_302_default_instance_;
class Scu_3_303DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_3_303> _instance;
} _Scu_3_303_default_instance_;
class Scu_bcm_304DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_bcm_304> _instance;
} _Scu_bcm_304_default_instance_;
class Scu_bcs_1_306DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_bcs_1_306> _instance;
} _Scu_bcs_1_306_default_instance_;
class Scu_bcs_2_307DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_bcs_2_307> _instance;
} _Scu_bcs_2_307_default_instance_;
class Scu_epb_310DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_epb_310> _instance;
} _Scu_epb_310_default_instance_;
class Scu_vcu_1_312DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_vcu_1_312> _instance;
} _Scu_vcu_1_312_default_instance_;
class Scu_eps_311DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scu_eps_311> _instance;
} _Scu_eps_311_default_instance_;
class Ge3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ge3> _instance;
} _Ge3_default_instance_;
}  // namespace canbus
}  // namespace apollo
static void InitDefaultsscc_info_Ge3_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Ge3_default_instance_;
    new (ptr) ::apollo::canbus::Ge3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Ge3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_Ge3_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 16, 0, InitDefaultsscc_info_Ge3_modules_2fcanbus_2fproto_2fge3_2eproto}, {
      &scc_info_Pc_bcm_201_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_bcs_3_308_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Pc_epb_203_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Pc_bcs_202_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Pc_vcu_205_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Pc_eps_204_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_vcu_2_313_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_1_301_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_2_302_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_3_303_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_bcm_304_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_bcs_1_306_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_bcs_2_307_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_epb_310_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_vcu_1_312_modules_2fcanbus_2fproto_2fge3_2eproto.base,
      &scc_info_Scu_eps_311_modules_2fcanbus_2fproto_2fge3_2eproto.base,}};

static void InitDefaultsscc_info_Pc_bcm_201_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Pc_bcm_201_default_instance_;
    new (ptr) ::apollo::canbus::Pc_bcm_201();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Pc_bcm_201::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_bcm_201_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pc_bcm_201_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Pc_bcs_202_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Pc_bcs_202_default_instance_;
    new (ptr) ::apollo::canbus::Pc_bcs_202();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Pc_bcs_202::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_bcs_202_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pc_bcs_202_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Pc_epb_203_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Pc_epb_203_default_instance_;
    new (ptr) ::apollo::canbus::Pc_epb_203();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Pc_epb_203::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_epb_203_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pc_epb_203_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Pc_eps_204_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Pc_eps_204_default_instance_;
    new (ptr) ::apollo::canbus::Pc_eps_204();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Pc_eps_204::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_eps_204_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pc_eps_204_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Pc_vcu_205_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Pc_vcu_205_default_instance_;
    new (ptr) ::apollo::canbus::Pc_vcu_205();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Pc_vcu_205::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pc_vcu_205_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pc_vcu_205_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_1_301_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_1_301_default_instance_;
    new (ptr) ::apollo::canbus::Scu_1_301();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_1_301::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_1_301_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_1_301_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_2_302_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_2_302_default_instance_;
    new (ptr) ::apollo::canbus::Scu_2_302();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_2_302::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_2_302_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_2_302_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_3_303_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_3_303_default_instance_;
    new (ptr) ::apollo::canbus::Scu_3_303();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_3_303::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_3_303_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_3_303_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_bcm_304_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_bcm_304_default_instance_;
    new (ptr) ::apollo::canbus::Scu_bcm_304();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_bcm_304::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_bcm_304_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_bcm_304_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_bcs_1_306_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_bcs_1_306_default_instance_;
    new (ptr) ::apollo::canbus::Scu_bcs_1_306();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_bcs_1_306::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_bcs_1_306_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_bcs_1_306_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_bcs_2_307_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_bcs_2_307_default_instance_;
    new (ptr) ::apollo::canbus::Scu_bcs_2_307();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_bcs_2_307::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_bcs_2_307_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_bcs_2_307_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_bcs_3_308_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_bcs_3_308_default_instance_;
    new (ptr) ::apollo::canbus::Scu_bcs_3_308();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_bcs_3_308::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_bcs_3_308_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_bcs_3_308_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_epb_310_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_epb_310_default_instance_;
    new (ptr) ::apollo::canbus::Scu_epb_310();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_epb_310::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_epb_310_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_epb_310_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_eps_311_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_eps_311_default_instance_;
    new (ptr) ::apollo::canbus::Scu_eps_311();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_eps_311::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_eps_311_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_eps_311_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_vcu_1_312_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_vcu_1_312_default_instance_;
    new (ptr) ::apollo::canbus::Scu_vcu_1_312();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_vcu_1_312::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_vcu_1_312_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_vcu_1_312_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static void InitDefaultsscc_info_Scu_vcu_2_313_modules_2fcanbus_2fproto_2fge3_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Scu_vcu_2_313_default_instance_;
    new (ptr) ::apollo::canbus::Scu_vcu_2_313();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Scu_vcu_2_313::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scu_vcu_2_313_modules_2fcanbus_2fproto_2fge3_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scu_vcu_2_313_modules_2fcanbus_2fproto_2fge3_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fge3_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[70];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2fge3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, pc_reverselampreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, pc_lowbeamreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, pc_highbeamreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, pc_rightturnlampreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, pc_leftturnlampreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, pc_hornreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcm_201, pc_hazardlampreq_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_rrwheelspdvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_rrwheeldirectionvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_rlwheelspdvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_rlwheeldirectionvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_frwheelspdvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_frwheeldirectionvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_flwheelspdvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_flwheeldirectionvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_rrwheelspd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_rrwheeldirection_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_rlwheelspd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_rlwheeldirection_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_frwheelspd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_frwheeldirection_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_flwheelspd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_3_308, bcs_flwheeldirection_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  12,
  14,
  13,
  15,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_epb_203, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_epb_203, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_epb_203, pc_epbreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_epb_203, pc_epbenable_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcs_202, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcs_202, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcs_202, pc_brkpedreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_bcs_202, pc_brkpedenable_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_vcu_205, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_vcu_205, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_vcu_205, pc_accpedreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_vcu_205, pc_accpedenable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_vcu_205, pc_torqreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_vcu_205, pc_torqenable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_vcu_205, pc_gearreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_vcu_205, pc_gearenable_),
  0,
  2,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_eps_204, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_eps_204, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_eps_204, pc_steerspdreq_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_eps_204, pc_steerenable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Pc_eps_204, pc_steerangreq_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_2_313, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_2_313, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_2_313, vcu_torqposmax_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_2_313, vcu_torqnegmax_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_2_313, vcu_torqact_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_2_313, vcu_engspd_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_1_301, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_1_301, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_1_301, vin16_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_1_301, scu_stopbutst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_1_301, scu_drvmode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_1_301, scu_faultst_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, vin07_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, vin06_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, vin05_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, vin04_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, vin03_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, vin02_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, vin01_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_2_302, vin00_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, vin15_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, vin14_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, vin13_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, vin12_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, vin11_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, vin10_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, vin09_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_3_303, vin08_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_vehreversest_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_rightturnlampst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_rearfoglampst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_parkinglampst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_lowbeamst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_leftturnlampst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_keyst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_hornst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_highbeamst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_hazardlampst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_frontfoglampst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcm_304, bcm_brakelightswitchst_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_aebavailable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_cddavailable_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_brkpedact_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_intidx_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_vdcfaultst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_vdcactivest_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_absfaultst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_absactivest_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_faultst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_1_306, bcs_drvmode_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_2_307, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_2_307, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_2_307, bcs_vehspdvd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_2_307, bcs_yawrate_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_2_307, bcs_vehspd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_2_307, bcs_vehlongaccel_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_bcs_2_307, bcs_vehlataccel_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_epb_310, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_epb_310, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_epb_310, epb_intidx_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_epb_310, epb_drvmode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_epb_310, epb_sysst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_epb_310, epb_faultst_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_elcsysfault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_brkpedst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_intidx_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_gearintidx_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_geardrvmode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_accpedact_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_brkpedpst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_vehrng_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_accpedpst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_vehrdyst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_faultst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_drvmode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_gearpst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_gearfaultst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_vcu_1_312, vcu_gearact_),
  0,
  1,
  2,
  3,
  5,
  4,
  7,
  6,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_eps_311, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_eps_311, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_eps_311, eps_intidx_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_eps_311, eps_steeranglespd_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_eps_311, eps_steerangle_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_eps_311, eps_faultst_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Scu_eps_311, eps_drvmode_),
  1,
  0,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, pc_bcm_201_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_bcs_3_308_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, pc_epb_203_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, pc_bcs_202_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, pc_vcu_205_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, pc_eps_204_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_vcu_2_313_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_1_301_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_2_302_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_3_303_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_bcm_304_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_bcs_1_306_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_bcs_2_307_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_epb_310_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_vcu_1_312_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Ge3, scu_eps_311_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::apollo::canbus::Pc_bcm_201)},
  { 19, 40, sizeof(::apollo::canbus::Scu_bcs_3_308)},
  { 56, 63, sizeof(::apollo::canbus::Pc_epb_203)},
  { 65, 72, sizeof(::apollo::canbus::Pc_bcs_202)},
  { 74, 85, sizeof(::apollo::canbus::Pc_vcu_205)},
  { 91, 99, sizeof(::apollo::canbus::Pc_eps_204)},
  { 102, 111, sizeof(::apollo::canbus::Scu_vcu_2_313)},
  { 115, 124, sizeof(::apollo::canbus::Scu_1_301)},
  { 128, 141, sizeof(::apollo::canbus::Scu_2_302)},
  { 149, 162, sizeof(::apollo::canbus::Scu_3_303)},
  { 170, 187, sizeof(::apollo::canbus::Scu_bcm_304)},
  { 199, 214, sizeof(::apollo::canbus::Scu_bcs_1_306)},
  { 224, 234, sizeof(::apollo::canbus::Scu_bcs_2_307)},
  { 239, 248, sizeof(::apollo::canbus::Scu_epb_310)},
  { 252, 272, sizeof(::apollo::canbus::Scu_vcu_1_312)},
  { 287, 297, sizeof(::apollo::canbus::Scu_eps_311)},
  { 302, 323, sizeof(::apollo::canbus::Ge3)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Pc_bcm_201_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_bcs_3_308_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Pc_epb_203_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Pc_bcs_202_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Pc_vcu_205_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Pc_eps_204_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_vcu_2_313_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_1_301_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_2_302_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_3_303_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_bcm_304_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_bcs_1_306_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_bcs_2_307_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_epb_310_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_vcu_1_312_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Scu_eps_311_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Ge3_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fge3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036modules/canbus/proto/ge3.proto\022\rapollo"
  ".canbus\"\233\010\n\nPc_bcm_201\022J\n\021pc_reverselamp"
  "req\030\001 \001(\0162/.apollo.canbus.Pc_bcm_201.Pc_"
  "reverselampreqType\022B\n\rpc_lowbeamreq\030\002 \001("
  "\0162+.apollo.canbus.Pc_bcm_201.Pc_lowbeamr"
  "eqType\022D\n\016pc_highbeamreq\030\003 \001(\0162,.apollo."
  "canbus.Pc_bcm_201.Pc_highbeamreqType\022N\n\023"
  "pc_rightturnlampreq\030\004 \001(\01621.apollo.canbu"
  "s.Pc_bcm_201.Pc_rightturnlampreqType\022L\n\022"
  "pc_leftturnlampreq\030\005 \001(\01620.apollo.canbus"
  ".Pc_bcm_201.Pc_leftturnlampreqType\022<\n\npc"
  "_hornreq\030\006 \001(\0162(.apollo.canbus.Pc_bcm_20"
  "1.Pc_hornreqType\022H\n\020pc_hazardlampreq\030\007 \001"
  "(\0162..apollo.canbus.Pc_bcm_201.Pc_hazardl"
  "ampreqType\"O\n\025Pc_reverselampreqType\022\033\n\027P"
  "C_REVERSELAMPREQ_NOREQ\020\000\022\031\n\025PC_REVERSELA"
  "MPREQ_REQ\020\001\"C\n\021Pc_lowbeamreqType\022\027\n\023PC_L"
  "OWBEAMREQ_NOREQ\020\000\022\025\n\021PC_LOWBEAMREQ_REQ\020\001"
  "\"F\n\022Pc_highbeamreqType\022\030\n\024PC_HIGHBEAMREQ"
  "_NOREQ\020\000\022\026\n\022PC_HIGHBEAMREQ_REQ\020\001\"U\n\027Pc_r"
  "ightturnlampreqType\022\035\n\031PC_RIGHTTURNLAMPR"
  "EQ_NOREQ\020\000\022\033\n\027PC_RIGHTTURNLAMPREQ_REQ\020\001\""
  "R\n\026Pc_leftturnlampreqType\022\034\n\030PC_LEFTTURN"
  "LAMPREQ_NOREQ\020\000\022\032\n\026PC_LEFTTURNLAMPREQ_RE"
  "Q\020\001\":\n\016Pc_hornreqType\022\024\n\020PC_HORNREQ_NORE"
  "Q\020\000\022\022\n\016PC_HORNREQ_REQ\020\001\"L\n\024Pc_hazardlamp"
  "reqType\022\032\n\026PC_HAZARDLAMPREQ_NOREQ\020\000\022\030\n\024P"
  "C_HAZARDLAMPREQ_REQ\020\001\"\267\021\n\rScu_bcs_3_308\022"
  "K\n\020bcs_rrwheelspdvd\030\001 \001(\01621.apollo.canbu"
  "s.Scu_bcs_3_308.Bcs_rrwheelspdvdType\022W\n\026"
  "bcs_rrwheeldirectionvd\030\002 \001(\01627.apollo.ca"
  "nbus.Scu_bcs_3_308.Bcs_rrwheeldirectionv"
  "dType\022K\n\020bcs_rlwheelspdvd\030\003 \001(\01621.apollo"
  ".canbus.Scu_bcs_3_308.Bcs_rlwheelspdvdTy"
  "pe\022W\n\026bcs_rlwheeldirectionvd\030\004 \001(\01627.apo"
  "llo.canbus.Scu_bcs_3_308.Bcs_rlwheeldire"
  "ctionvdType\022K\n\020bcs_frwheelspdvd\030\005 \001(\01621."
  "apollo.canbus.Scu_bcs_3_308.Bcs_frwheels"
  "pdvdType\022W\n\026bcs_frwheeldirectionvd\030\006 \001(\016"
  "27.apollo.canbus.Scu_bcs_3_308.Bcs_frwhe"
  "eldirectionvdType\022K\n\020bcs_flwheelspdvd\030\007 "
  "\001(\01621.apollo.canbus.Scu_bcs_3_308.Bcs_fl"
  "wheelspdvdType\022W\n\026bcs_flwheeldirectionvd"
  "\030\010 \001(\01627.apollo.canbus.Scu_bcs_3_308.Bcs"
  "_flwheeldirectionvdType\022\026\n\016bcs_rrwheelsp"
  "d\030\t \001(\001\022S\n\024bcs_rrwheeldirection\030\n \001(\01625."
  "apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeld"
  "irectionType\022\026\n\016bcs_rlwheelspd\030\013 \001(\001\022S\n\024"
  "bcs_rlwheeldirection\030\014 \001(\01625.apollo.canb"
  "us.Scu_bcs_3_308.Bcs_rlwheeldirectionTyp"
  "e\022\026\n\016bcs_frwheelspd\030\r \001(\001\022S\n\024bcs_frwheel"
  "direction\030\016 \001(\01625.apollo.canbus.Scu_bcs_"
  "3_308.Bcs_frwheeldirectionType\022\026\n\016bcs_fl"
  "wheelspd\030\017 \001(\001\022S\n\024bcs_flwheeldirection\030\020"
  " \001(\01625.apollo.canbus.Scu_bcs_3_308.Bcs_f"
  "lwheeldirectionType\"P\n\024Bcs_rrwheelspdvdT"
  "ype\022\034\n\030BCS_RRWHEELSPDVD_INVALID\020\000\022\032\n\026BCS"
  "_RRWHEELSPDVD_VALID\020\001\"b\n\032Bcs_rrwheeldire"
  "ctionvdType\022\"\n\036BCS_RRWHEELDIRECTIONVD_IN"
  "VALID\020\000\022 \n\034BCS_RRWHEELDIRECTIONVD_VALID\020"
  "\001\"P\n\024Bcs_rlwheelspdvdType\022\034\n\030BCS_RLWHEEL"
  "SPDVD_INVALID\020\000\022\032\n\026BCS_RLWHEELSPDVD_VALI"
  "D\020\001\"b\n\032Bcs_rlwheeldirectionvdType\022\"\n\036BCS"
  "_RLWHEELDIRECTIONVD_INVALID\020\000\022 \n\034BCS_RLW"
  "HEELDIRECTIONVD_VALID\020\001\"P\n\024Bcs_frwheelsp"
  "dvdType\022\034\n\030BCS_FRWHEELSPDVD_INVALID\020\000\022\032\n"
  "\026BCS_FRWHEELSPDVD_VALID\020\001\"b\n\032Bcs_frwheel"
  "directionvdType\022\"\n\036BCS_FRWHEELDIRECTIONV"
  "D_INVALID\020\000\022 \n\034BCS_FRWHEELDIRECTIONVD_VA"
  "LID\020\001\"P\n\024Bcs_flwheelspdvdType\022\034\n\030BCS_FLW"
  "HEELSPDVD_INVALID\020\000\022\032\n\026BCS_FLWHEELSPDVD_"
  "VALID\020\001\"b\n\032Bcs_flwheeldirectionvdType\022\"\n"
  "\036BCS_FLWHEELDIRECTIONVD_INVALID\020\000\022 \n\034BCS"
  "_FLWHEELDIRECTIONVD_VALID\020\001\"_\n\030Bcs_rrwhe"
  "eldirectionType\022 \n\034BCS_RRWHEELDIRECTION_"
  "FORWARD\020\000\022!\n\035BCS_RRWHEELDIRECTION_BACKWA"
  "RD\020\001\"_\n\030Bcs_rlwheeldirectionType\022 \n\034BCS_"
  "RLWHEELDIRECTION_FORWARD\020\000\022!\n\035BCS_RLWHEE"
  "LDIRECTION_BACKWARD\020\001\"_\n\030Bcs_frwheeldire"
  "ctionType\022 \n\034BCS_FRWHEELDIRECTION_FORWAR"
  "D\020\000\022!\n\035BCS_FRWHEELDIRECTION_BACKWARD\020\001\"_"
  "\n\030Bcs_flwheeldirectionType\022 \n\034BCS_FLWHEE"
  "LDIRECTION_FORWARD\020\000\022!\n\035BCS_FLWHEELDIREC"
  "TION_BACKWARD\020\001\"\245\002\n\nPc_epb_203\022:\n\tpc_epb"
  "req\030\001 \001(\0162\'.apollo.canbus.Pc_epb_203.Pc_"
  "epbreqType\022@\n\014pc_epbenable\030\002 \001(\0162*.apoll"
  "o.canbus.Pc_epb_203.Pc_epbenableType\"R\n\r"
  "Pc_epbreqType\022\025\n\021PC_EPBREQ_INVALID\020\000\022\025\n\021"
  "PC_EPBREQ_RELEASE\020\001\022\023\n\017PC_EPBREQ_APPLY\020\002"
  "\"E\n\020Pc_epbenableType\022\030\n\024PC_EPBENABLE_DIS"
  "ABLE\020\000\022\027\n\023PC_EPBENABLE_ENABLE\020\001\"\272\001\n\nPc_b"
  "cs_202\022\024\n\014pc_brkpedreq\030\001 \001(\001\022F\n\017pc_brkpe"
  "denable\030\002 \001(\0162-.apollo.canbus.Pc_bcs_202"
  ".Pc_brkpedenableType\"N\n\023Pc_brkpedenableT"
  "ype\022\033\n\027PC_BRKPEDENABLE_DISABLE\020\000\022\032\n\026PC_B"
  "RKPEDENABLE_ENABLE\020\001\"\256\005\n\nPc_vcu_205\022\024\n\014p"
  "c_accpedreq\030\001 \001(\001\022F\n\017pc_accpedenable\030\002 \001"
  "(\0162-.apollo.canbus.Pc_vcu_205.Pc_accpede"
  "nableType\022\022\n\npc_torqreq\030\003 \001(\001\022B\n\rpc_torq"
  "enable\030\004 \001(\0162+.apollo.canbus.Pc_vcu_205."
  "Pc_torqenableType\022<\n\npc_gearreq\030\005 \001(\0162(."
  "apollo.canbus.Pc_vcu_205.Pc_gearreqType\022"
  "B\n\rpc_gearenable\030\006 \001(\0162+.apollo.canbus.P"
  "c_vcu_205.Pc_gearenableType\"N\n\023Pc_accped"
  "enableType\022\033\n\027PC_ACCPEDENABLE_DISABLE\020\000\022"
  "\032\n\026PC_ACCPEDENABLE_ENABLE\020\001\"H\n\021Pc_torqen"
  "ableType\022\031\n\025PC_TORQENABLE_DISABLE\020\000\022\030\n\024P"
  "C_TORQENABLE_ENABLE\020\001\"\203\001\n\016Pc_gearreqType"
  "\022\026\n\022PC_GEARREQ_INVALID\020\000\022\024\n\020PC_GEARREQ_D"
  "RIVE\020\001\022\026\n\022PC_GEARREQ_NEUTRAL\020\002\022\026\n\022PC_GEA"
  "RREQ_REVERSE\020\003\022\023\n\017PC_GEARREQ_PARK\020\004\"H\n\021P"
  "c_gearenableType\022\031\n\025PC_GEARENABLE_DISABL"
  "E\020\000\022\030\n\024PC_GEARENABLE_ENABLE\020\001\"\317\001\n\nPc_eps"
  "_204\022\026\n\016pc_steerspdreq\030\001 \001(\005\022D\n\016pc_steer"
  "enable\030\002 \001(\0162,.apollo.canbus.Pc_eps_204."
  "Pc_steerenableType\022\026\n\016pc_steerangreq\030\003 \001"
  "(\001\"K\n\022Pc_steerenableType\022\032\n\026PC_STEERENAB"
  "LE_DISABLE\020\000\022\031\n\025PC_STEERENABLE_ENABLE\020\001\""
  "h\n\rScu_vcu_2_313\022\026\n\016vcu_torqposmax\030\001 \001(\001"
  "\022\026\n\016vcu_torqnegmax\030\002 \001(\001\022\023\n\013vcu_torqact\030"
  "\003 \001(\001\022\022\n\nvcu_engspd\030\004 \001(\005\"\337\003\n\tScu_1_301\022"
  "\r\n\005vin16\030\001 \001(\005\022A\n\rscu_stopbutst\030\002 \001(\0162*."
  "apollo.canbus.Scu_1_301.Scu_stopbutstTyp"
  "e\022=\n\013scu_drvmode\030\003 \001(\0162(.apollo.canbus.S"
  "cu_1_301.Scu_drvmodeType\022=\n\013scu_faultst\030"
  "\004 \001(\0162(.apollo.canbus.Scu_1_301.Scu_faul"
  "tstType\"K\n\021Scu_stopbutstType\022\033\n\027SCU_STOP"
  "BUTST_UNPRESSED\020\000\022\031\n\025SCU_STOPBUTST_PRESS"
  "ED\020\001\"s\n\017Scu_drvmodeType\022\027\n\023SCU_DRVMODE_I"
  "NVALID\020\000\022\026\n\022SCU_DRVMODE_MANUAL\020\001\022\031\n\025SCU_"
  "DRVMODE_INTERRUPT\020\002\022\024\n\020SCU_DRVMODE_AUTO\020"
  "\003\"@\n\017Scu_faultstType\022\026\n\022SCU_FAULTST_NORM"
  "AL\020\000\022\025\n\021SCU_FAULTST_FAULT\020\001\"\203\001\n\tScu_2_30"
  "2\022\r\n\005vin07\030\001 \001(\005\022\r\n\005vin06\030\002 \001(\005\022\r\n\005vin05"
  "\030\003 \001(\005\022\r\n\005vin04\030\004 \001(\005\022\r\n\005vin03\030\005 \001(\005\022\r\n\005"
  "vin02\030\006 \001(\005\022\r\n\005vin01\030\007 \001(\005\022\r\n\005vin00\030\010 \001("
  "\005\"\203\001\n\tScu_3_303\022\r\n\005vin15\030\001 \001(\005\022\r\n\005vin14\030"
  "\002 \001(\005\022\r\n\005vin13\030\003 \001(\005\022\r\n\005vin12\030\004 \001(\005\022\r\n\005v"
  "in11\030\005 \001(\005\022\r\n\005vin10\030\006 \001(\005\022\r\n\005vin09\030\007 \001(\005"
  "\022\r\n\005vin08\030\010 \001(\005\"\220\017\n\013Scu_bcm_304\022I\n\020bcm_v"
  "ehreversest\030\001 \001(\0162/.apollo.canbus.Scu_bc"
  "m_304.Bcm_vehreversestType\022O\n\023bcm_rightt"
  "urnlampst\030\002 \001(\01622.apollo.canbus.Scu_bcm_"
  "304.Bcm_rightturnlampstType\022K\n\021bcm_rearf"
  "oglampst\030\003 \001(\01620.apollo.canbus.Scu_bcm_3"
  "04.Bcm_rearfoglampstType\022K\n\021bcm_parkingl"
  "ampst\030\004 \001(\01620.apollo.canbus.Scu_bcm_304."
  "Bcm_parkinglampstType\022C\n\rbcm_lowbeamst\030\005"
  " \001(\0162,.apollo.canbus.Scu_bcm_304.Bcm_low"
  "beamstType\022M\n\022bcm_leftturnlampst\030\006 \001(\01621"
  ".apollo.canbus.Scu_bcm_304.Bcm_leftturnl"
  "ampstType\022;\n\tbcm_keyst\030\007 \001(\0162(.apollo.ca"
  "nbus.Scu_bcm_304.Bcm_keystType\022=\n\nbcm_ho"
  "rnst\030\010 \001(\0162).apollo.canbus.Scu_bcm_304.B"
  "cm_hornstType\022E\n\016bcm_highbeamst\030\t \001(\0162-."
  "apollo.canbus.Scu_bcm_304.Bcm_highbeamst"
  "Type\022I\n\020bcm_hazardlampst\030\n \001(\0162/.apollo."
  "canbus.Scu_bcm_304.Bcm_hazardlampstType\022"
  "M\n\022bcm_frontfoglampst\030\013 \001(\01621.apollo.can"
  "bus.Scu_bcm_304.Bcm_frontfoglampstType\022U"
  "\n\026bcm_brakelightswitchst\030\014 \001(\01625.apollo."
  "canbus.Scu_bcm_304.Bcm_brakelightswitchs"
  "tType\"Q\n\024Bcm_vehreversestType\022\033\n\027BCM_VEH"
  "REVERSEST_NORMAL\020\000\022\034\n\030BCM_VEHREVERSEST_R"
  "EVERSE\020\001\"[\n\027Bcm_rightturnlampstType\022 \n\034B"
  "CM_RIGHTTURNLAMPST_INACTIVE\020\000\022\036\n\032BCM_RIG"
  "HTTURNLAMPST_ACTIVE\020\001\"U\n\025Bcm_rearfoglamp"
  "stType\022\036\n\032BCM_REARFOGLAMPST_INACTIVE\020\000\022\034"
  "\n\030BCM_REARFOGLAMPST_ACTIVE\020\001\"U\n\025Bcm_park"
  "inglampstType\022\036\n\032BCM_PARKINGLAMPST_INACT"
  "IVE\020\000\022\034\n\030BCM_PARKINGLAMPST_ACTIVE\020\001\"I\n\021B"
  "cm_lowbeamstType\022\032\n\026BCM_LOWBEAMST_INACTI"
  "VE\020\000\022\030\n\024BCM_LOWBEAMST_ACTIVE\020\001\"X\n\026Bcm_le"
  "ftturnlampstType\022\037\n\033BCM_LEFTTURNLAMPST_I"
  "NACTIVE\020\000\022\035\n\031BCM_LEFTTURNLAMPST_ACTIVE\020\001"
  "\"\\\n\rBcm_keystType\022\021\n\rBCM_KEYST_OFF\020\000\022\021\n\r"
  "BCM_KEYST_ACC\020\001\022\020\n\014BCM_KEYST_ON\020\002\022\023\n\017BCM"
  "_KEYST_CRANK\020\003\"@\n\016Bcm_hornstType\022\027\n\023BCM_"
  "HORNST_INACTIVE\020\000\022\025\n\021BCM_HORNST_ACTIVE\020\001"
  "\"L\n\022Bcm_highbeamstType\022\033\n\027BCM_HIGHBEAMST"
  "_INACTIVE\020\000\022\031\n\025BCM_HIGHBEAMST_ACTIVE\020\001\"R"
  "\n\024Bcm_hazardlampstType\022\035\n\031BCM_HAZARDLAMP"
  "ST_INACTIVE\020\000\022\033\n\027BCM_HAZARDLAMPST_ACTIVE"
  "\020\001\"X\n\026Bcm_frontfoglampstType\022\037\n\033BCM_FRON"
  "TFOGLAMPST_INACTIVE\020\000\022\035\n\031BCM_FRONTFOGLAM"
  "PST_ACTIVE\020\001\"d\n\032Bcm_brakelightswitchstTy"
  "pe\022#\n\037BCM_BRAKELIGHTSWITCHST_INACTIVE\020\000\022"
  "!\n\035BCM_BRAKELIGHTSWITCHST_ACTIVE\020\001\"\370\013\n\rS"
  "cu_bcs_1_306\022K\n\020bcs_aebavailable\030\001 \001(\01621"
  ".apollo.canbus.Scu_bcs_1_306.Bcs_aebavai"
  "lableType\022K\n\020bcs_cddavailable\030\002 \001(\01621.ap"
  "ollo.canbus.Scu_bcs_1_306.Bcs_cddavailab"
  "leType\022\025\n\rbcs_brkpedact\030\003 \001(\001\022\?\n\nbcs_int"
  "idx\030\004 \001(\0162+.apollo.canbus.Scu_bcs_1_306."
  "Bcs_intidxType\022G\n\016bcs_vdcfaultst\030\005 \001(\0162/"
  ".apollo.canbus.Scu_bcs_1_306.Bcs_vdcfaul"
  "tstType\022I\n\017bcs_vdcactivest\030\006 \001(\01620.apoll"
  "o.canbus.Scu_bcs_1_306.Bcs_vdcactivestTy"
  "pe\022G\n\016bcs_absfaultst\030\007 \001(\0162/.apollo.canb"
  "us.Scu_bcs_1_306.Bcs_absfaultstType\022I\n\017b"
  "cs_absactivest\030\010 \001(\01620.apollo.canbus.Scu"
  "_bcs_1_306.Bcs_absactivestType\022A\n\013bcs_fa"
  "ultst\030\t \001(\0162,.apollo.canbus.Scu_bcs_1_30"
  "6.Bcs_faultstType\022A\n\013bcs_drvmode\030\n \001(\0162,"
  ".apollo.canbus.Scu_bcs_1_306.Bcs_drvmode"
  "Type\"X\n\024Bcs_aebavailableType\022 \n\034BCS_AEBA"
  "VAILABLE_UNAVAILABLE\020\000\022\036\n\032BCS_AEBAVAILAB"
  "LE_AVAILABLE\020\001\"X\n\024Bcs_cddavailableType\022 "
  "\n\034BCS_CDDAVAILABLE_UNAVAILABLE\020\000\022\036\n\032BCS_"
  "CDDAVAILABLE_AVAILABLE\020\001\"\243\001\n\016Bcs_intidxT"
  "ype\022\024\n\020BCS_INTIDX_NOINT\020\000\022\027\n\023BCS_INTIDX_"
  "OVERFLOW\020\001\022\026\n\022BCS_INTIDX_TIMEOUT\020\002\022\030\n\024BC"
  "S_INTIDX_ACCPEDINT\020\003\022\030\n\024BCS_INTIDX_BRKPE"
  "DINT\020\004\022\026\n\022BCS_INTIDX_GEARINT\020\005\"I\n\022Bcs_vd"
  "cfaultstType\022\031\n\025BCS_VDCFAULTST_NORMAL\020\000\022"
  "\030\n\024BCS_VDCFAULTST_FAULT\020\001\"O\n\023Bcs_vdcacti"
  "vestType\022\034\n\030BCS_VDCACTIVEST_INACTIVE\020\000\022\032"
  "\n\026BCS_VDCACTIVEST_ACTIVE\020\001\"I\n\022Bcs_absfau"
  "ltstType\022\031\n\025BCS_ABSFAULTST_NORMAL\020\000\022\030\n\024B"
  "CS_ABSFAULTST_FAULT\020\001\"O\n\023Bcs_absactivest"
  "Type\022\034\n\030BCS_ABSACTIVEST_INACTIVE\020\000\022\032\n\026BC"
  "S_ABSACTIVEST_ACTIVE\020\001\"@\n\017Bcs_faultstTyp"
  "e\022\026\n\022BCS_FAULTST_NORMAL\020\000\022\025\n\021BCS_FAULTST"
  "_FAULT\020\001\"s\n\017Bcs_drvmodeType\022\027\n\023BCS_DRVMO"
  "DE_INVALID\020\000\022\026\n\022BCS_DRVMODE_MANUAL\020\001\022\031\n\025"
  "BCS_DRVMODE_INTERRUPT\020\002\022\024\n\020BCS_DRVMODE_A"
  "UTO\020\003\"\366\001\n\rScu_bcs_2_307\022C\n\014bcs_vehspdvd\030"
  "\001 \001(\0162-.apollo.canbus.Scu_bcs_2_307.Bcs_"
  "vehspdvdType\022\023\n\013bcs_yawrate\030\002 \001(\001\022\022\n\nbcs"
  "_vehspd\030\003 \001(\001\022\030\n\020bcs_vehlongaccel\030\004 \001(\001\022"
  "\027\n\017bcs_vehlataccel\030\005 \001(\001\"D\n\020Bcs_vehspdvd"
  "Type\022\030\n\024BCS_VEHSPDVD_INVALID\020\000\022\026\n\022BCS_VE"
  "HSPDVD_VALID\020\001\"\274\005\n\013Scu_epb_310\022=\n\nepb_in"
  "tidx\030\001 \001(\0162).apollo.canbus.Scu_epb_310.E"
  "pb_intidxType\022\?\n\013epb_drvmode\030\002 \001(\0162*.apo"
  "llo.canbus.Scu_epb_310.Epb_drvmodeType\022;"
  "\n\tepb_sysst\030\003 \001(\0162(.apollo.canbus.Scu_ep"
  "b_310.Epb_sysstType\022\?\n\013epb_faultst\030\004 \001(\016"
  "2*.apollo.canbus.Scu_epb_310.Epb_faultst"
  "Type\"W\n\016Epb_intidxType\022\024\n\020EPB_INTIDX_NOI"
  "NT\020\000\022\027\n\023EPB_INTIDX_OVERFLOW\020\001\022\026\n\022EPB_INT"
  "IDX_TIMEOUT\020\002\"s\n\017Epb_drvmodeType\022\027\n\023EPB_"
  "DRVMODE_INVALID\020\000\022\026\n\022EPB_DRVMODE_MANUAL\020"
  "\001\022\031\n\025EPB_DRVMODE_INTERRUPT\020\002\022\024\n\020EPB_DRVM"
  "ODE_AUTO\020\003\"\236\001\n\rEpb_sysstType\022\026\n\022EPB_SYSS"
  "T_RELEASED\020\000\022\025\n\021EPB_SYSST_APPLIED\020\001\022\027\n\023E"
  "PB_SYSST_RELEASING\020\002\022\023\n\017EPB_SYSST_FAULT\020"
  "\003\022\026\n\022EPB_SYSST_APPLYING\020\004\022\030\n\024EPB_SYSST_D"
  "ISENGAGED\020\005\"@\n\017Epb_faultstType\022\026\n\022EPB_FA"
  "ULTST_NORMAL\020\000\022\025\n\021EPB_FAULTST_FAULT\020\001\"\331\020"
  "\n\rScu_vcu_1_312\022I\n\017vcu_elcsysfault\030\001 \001(\016"
  "20.apollo.canbus.Scu_vcu_1_312.Vcu_elcsy"
  "sfaultType\022C\n\014vcu_brkpedst\030\002 \001(\0162-.apoll"
  "o.canbus.Scu_vcu_1_312.Vcu_brkpedstType\022"
  "\?\n\nvcu_intidx\030\003 \001(\0162+.apollo.canbus.Scu_"
  "vcu_1_312.Vcu_intidxType\022G\n\016vcu_gearinti"
  "dx\030\004 \001(\0162/.apollo.canbus.Scu_vcu_1_312.V"
  "cu_gearintidxType\022I\n\017vcu_geardrvmode\030\005 \001"
  "(\01620.apollo.canbus.Scu_vcu_1_312.Vcu_gea"
  "rdrvmodeType\022\025\n\rvcu_accpedact\030\006 \001(\001\022\025\n\rv"
  "cu_brkpedpst\030\007 \001(\001\022\022\n\nvcu_vehrng\030\010 \001(\005\022\025"
  "\n\rvcu_accpedpst\030\t \001(\001\022C\n\014vcu_vehrdyst\030\n "
  "\001(\0162-.apollo.canbus.Scu_vcu_1_312.Vcu_ve"
  "hrdystType\022A\n\013vcu_faultst\030\013 \001(\0162,.apollo"
  ".canbus.Scu_vcu_1_312.Vcu_faultstType\022A\n"
  "\013vcu_drvmode\030\014 \001(\0162,.apollo.canbus.Scu_v"
  "cu_1_312.Vcu_drvmodeType\022A\n\013vcu_gearpst\030"
  "\r \001(\0162,.apollo.canbus.Scu_vcu_1_312.Vcu_"
  "gearpstType\022I\n\017vcu_gearfaultst\030\016 \001(\01620.a"
  "pollo.canbus.Scu_vcu_1_312.Vcu_gearfault"
  "stType\022A\n\013vcu_gearact\030\017 \001(\0162,.apollo.can"
  "bus.Scu_vcu_1_312.Vcu_gearactType\"L\n\023Vcu"
  "_elcsysfaultType\022\032\n\026VCU_ELCSYSFAULT_NORM"
  "AL\020\000\022\031\n\025VCU_ELCSYSFAULT_FAULT\020\001\"H\n\020Vcu_b"
  "rkpedstType\022\032\n\026VCU_BRKPEDST_UNPRESSED\020\000\022"
  "\030\n\024VCU_BRKPEDST_PRESSED\020\001\"\243\001\n\016Vcu_intidx"
  "Type\022\024\n\020VCU_INTIDX_NOINT\020\000\022\027\n\023VCU_INTIDX"
  "_OVERFLOW\020\001\022\026\n\022VCU_INTIDX_TIMEOUT\020\002\022\030\n\024V"
  "CU_INTIDX_ACCPEDINT\020\003\022\030\n\024VCU_INTIDX_BRKP"
  "EDINT\020\004\022\026\n\022VCU_INTIDX_GEARINT\020\005\"g\n\022Vcu_g"
  "earintidxType\022\030\n\024VCU_GEARINTIDX_NOINT\020\000\022"
  "\033\n\027VCU_GEARINTIDX_OVERFLOW\020\001\022\032\n\026VCU_GEAR"
  "INTIDX_TIMEOUT\020\002\"\207\001\n\023Vcu_geardrvmodeType"
  "\022\033\n\027VCU_GEARDRVMODE_INVALID\020\000\022\032\n\026VCU_GEA"
  "RDRVMODE_MANUAL\020\001\022\035\n\031VCU_GEARDRVMODE_INT"
  "ERRUPT\020\002\022\030\n\024VCU_GEARDRVMODE_AUTO\020\003\"E\n\020Vc"
  "u_vehrdystType\022\031\n\025VCU_VEHRDYST_NOTREADY\020"
  "\000\022\026\n\022VCU_VEHRDYST_READY\020\001\"\232\001\n\017Vcu_faults"
  "tType\022\026\n\022VCU_FAULTST_NORMAL\020\000\022\026\n\022VCU_FAU"
  "LTST_DERATE\020\001\022\024\n\020VCU_FAULTST_RSV1\020\002\022\024\n\020V"
  "CU_FAULTST_RSV2\020\003\022\024\n\020VCU_FAULTST_RSV3\020\004\022"
  "\025\n\021VCU_FAULTST_FAULT\020\005\"s\n\017Vcu_drvmodeTyp"
  "e\022\027\n\023VCU_DRVMODE_INVALID\020\000\022\026\n\022VCU_DRVMOD"
  "E_MANUAL\020\001\022\031\n\025VCU_DRVMODE_INTERRUPT\020\002\022\024\n"
  "\020VCU_DRVMODE_AUTO\020\003\"\211\001\n\017Vcu_gearpstType\022"
  "\027\n\023VCU_GEARPST_INVALID\020\000\022\025\n\021VCU_GEARPST_"
  "DRIVE\020\001\022\027\n\023VCU_GEARPST_NEUTRAL\020\002\022\027\n\023VCU_"
  "GEARPST_REVERSE\020\003\022\024\n\020VCU_GEARPST_PARK\020\004\""
  "L\n\023Vcu_gearfaultstType\022\032\n\026VCU_GEARFAULTS"
  "T_NORMAL\020\000\022\031\n\025VCU_GEARFAULTST_FAULT\020\001\"\211\001"
  "\n\017Vcu_gearactType\022\027\n\023VCU_GEARACT_INVALID"
  "\020\000\022\025\n\021VCU_GEARACT_DRIVE\020\001\022\027\n\023VCU_GEARACT"
  "_NEUTRAL\020\002\022\027\n\023VCU_GEARACT_REVERSE\020\003\022\024\n\020V"
  "CU_GEARACT_PARK\020\004\"\252\004\n\013Scu_eps_311\022=\n\neps"
  "_intidx\030\001 \001(\0162).apollo.canbus.Scu_eps_31"
  "1.Eps_intidxType\022\031\n\021eps_steeranglespd\030\002 "
  "\001(\001\022\026\n\016eps_steerangle\030\003 \001(\001\022\?\n\013eps_fault"
  "st\030\004 \001(\0162*.apollo.canbus.Scu_eps_311.Eps"
  "_faultstType\022\?\n\013eps_drvmode\030\005 \001(\0162*.apol"
  "lo.canbus.Scu_eps_311.Eps_drvmodeType\"p\n"
  "\016Eps_intidxType\022\024\n\020EPS_INTIDX_NOINT\020\000\022\027\n"
  "\023EPS_INTIDX_OVERFLOW\020\001\022\026\n\022EPS_INTIDX_TIM"
  "EOUT\020\002\022\027\n\023EPS_INTIDX_STEERINT\020\003\"@\n\017Eps_f"
  "aultstType\022\026\n\022EPS_FAULTST_NORMAL\020\000\022\025\n\021EP"
  "S_FAULTST_FAULT\020\001\"s\n\017Eps_drvmodeType\022\027\n\023"
  "EPS_DRVMODE_INVALID\020\000\022\026\n\022EPS_DRVMODE_MAN"
  "UAL\020\001\022\031\n\025EPS_DRVMODE_INTERRUPT\020\002\022\024\n\020EPS_"
  "DRVMODE_AUTO\020\003\"\223\006\n\003Ge3\022-\n\npc_bcm_201\030\001 \001"
  "(\0132\031.apollo.canbus.Pc_bcm_201\0223\n\rscu_bcs"
  "_3_308\030\002 \001(\0132\034.apollo.canbus.Scu_bcs_3_3"
  "08\022-\n\npc_epb_203\030\003 \001(\0132\031.apollo.canbus.P"
  "c_epb_203\022-\n\npc_bcs_202\030\004 \001(\0132\031.apollo.c"
  "anbus.Pc_bcs_202\022-\n\npc_vcu_205\030\005 \001(\0132\031.a"
  "pollo.canbus.Pc_vcu_205\022-\n\npc_eps_204\030\006 "
  "\001(\0132\031.apollo.canbus.Pc_eps_204\0223\n\rscu_vc"
  "u_2_313\030\007 \001(\0132\034.apollo.canbus.Scu_vcu_2_"
  "313\022+\n\tscu_1_301\030\010 \001(\0132\030.apollo.canbus.S"
  "cu_1_301\022+\n\tscu_2_302\030\t \001(\0132\030.apollo.can"
  "bus.Scu_2_302\022+\n\tscu_3_303\030\n \001(\0132\030.apoll"
  "o.canbus.Scu_3_303\022/\n\013scu_bcm_304\030\013 \001(\0132"
  "\032.apollo.canbus.Scu_bcm_304\0223\n\rscu_bcs_1"
  "_306\030\014 \001(\0132\034.apollo.canbus.Scu_bcs_1_306"
  "\0223\n\rscu_bcs_2_307\030\r \001(\0132\034.apollo.canbus."
  "Scu_bcs_2_307\022/\n\013scu_epb_310\030\016 \001(\0132\032.apo"
  "llo.canbus.Scu_epb_310\0223\n\rscu_vcu_1_312\030"
  "\017 \001(\0132\034.apollo.canbus.Scu_vcu_1_312\022/\n\013s"
  "cu_eps_311\030\020 \001(\0132\032.apollo.canbus.Scu_eps"
  "_311"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto_sccs[17] = {
  &scc_info_Ge3_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Pc_bcm_201_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Pc_bcs_202_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Pc_epb_203_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Pc_eps_204_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Pc_vcu_205_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_1_301_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_2_302_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_3_303_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_bcm_304_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_bcs_1_306_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_bcs_2_307_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_bcs_3_308_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_epb_310_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_eps_311_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_vcu_1_312_modules_2fcanbus_2fproto_2fge3_2eproto.base,
  &scc_info_Scu_vcu_2_313_modules_2fcanbus_2fproto_2fge3_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto_once;
static bool descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto = {
  &descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto_initialized, descriptor_table_protodef_modules_2fcanbus_2fproto_2fge3_2eproto, "modules/canbus/proto/ge3.proto", 13484,
  &descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto_sccs, descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fge3_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2fge3_2eproto, 17, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcanbus_2fproto_2fge3_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto), true);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_bcm_201_Pc_reverselampreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[0];
}
bool Pc_bcm_201_Pc_reverselampreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_bcm_201_Pc_reverselampreqType Pc_bcm_201::PC_REVERSELAMPREQ_NOREQ;
constexpr Pc_bcm_201_Pc_reverselampreqType Pc_bcm_201::PC_REVERSELAMPREQ_REQ;
constexpr Pc_bcm_201_Pc_reverselampreqType Pc_bcm_201::Pc_reverselampreqType_MIN;
constexpr Pc_bcm_201_Pc_reverselampreqType Pc_bcm_201::Pc_reverselampreqType_MAX;
constexpr int Pc_bcm_201::Pc_reverselampreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_bcm_201_Pc_lowbeamreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[1];
}
bool Pc_bcm_201_Pc_lowbeamreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_bcm_201_Pc_lowbeamreqType Pc_bcm_201::PC_LOWBEAMREQ_NOREQ;
constexpr Pc_bcm_201_Pc_lowbeamreqType Pc_bcm_201::PC_LOWBEAMREQ_REQ;
constexpr Pc_bcm_201_Pc_lowbeamreqType Pc_bcm_201::Pc_lowbeamreqType_MIN;
constexpr Pc_bcm_201_Pc_lowbeamreqType Pc_bcm_201::Pc_lowbeamreqType_MAX;
constexpr int Pc_bcm_201::Pc_lowbeamreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_bcm_201_Pc_highbeamreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[2];
}
bool Pc_bcm_201_Pc_highbeamreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_bcm_201_Pc_highbeamreqType Pc_bcm_201::PC_HIGHBEAMREQ_NOREQ;
constexpr Pc_bcm_201_Pc_highbeamreqType Pc_bcm_201::PC_HIGHBEAMREQ_REQ;
constexpr Pc_bcm_201_Pc_highbeamreqType Pc_bcm_201::Pc_highbeamreqType_MIN;
constexpr Pc_bcm_201_Pc_highbeamreqType Pc_bcm_201::Pc_highbeamreqType_MAX;
constexpr int Pc_bcm_201::Pc_highbeamreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_bcm_201_Pc_rightturnlampreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[3];
}
bool Pc_bcm_201_Pc_rightturnlampreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_bcm_201_Pc_rightturnlampreqType Pc_bcm_201::PC_RIGHTTURNLAMPREQ_NOREQ;
constexpr Pc_bcm_201_Pc_rightturnlampreqType Pc_bcm_201::PC_RIGHTTURNLAMPREQ_REQ;
constexpr Pc_bcm_201_Pc_rightturnlampreqType Pc_bcm_201::Pc_rightturnlampreqType_MIN;
constexpr Pc_bcm_201_Pc_rightturnlampreqType Pc_bcm_201::Pc_rightturnlampreqType_MAX;
constexpr int Pc_bcm_201::Pc_rightturnlampreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_bcm_201_Pc_leftturnlampreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[4];
}
bool Pc_bcm_201_Pc_leftturnlampreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_bcm_201_Pc_leftturnlampreqType Pc_bcm_201::PC_LEFTTURNLAMPREQ_NOREQ;
constexpr Pc_bcm_201_Pc_leftturnlampreqType Pc_bcm_201::PC_LEFTTURNLAMPREQ_REQ;
constexpr Pc_bcm_201_Pc_leftturnlampreqType Pc_bcm_201::Pc_leftturnlampreqType_MIN;
constexpr Pc_bcm_201_Pc_leftturnlampreqType Pc_bcm_201::Pc_leftturnlampreqType_MAX;
constexpr int Pc_bcm_201::Pc_leftturnlampreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_bcm_201_Pc_hornreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[5];
}
bool Pc_bcm_201_Pc_hornreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_bcm_201_Pc_hornreqType Pc_bcm_201::PC_HORNREQ_NOREQ;
constexpr Pc_bcm_201_Pc_hornreqType Pc_bcm_201::PC_HORNREQ_REQ;
constexpr Pc_bcm_201_Pc_hornreqType Pc_bcm_201::Pc_hornreqType_MIN;
constexpr Pc_bcm_201_Pc_hornreqType Pc_bcm_201::Pc_hornreqType_MAX;
constexpr int Pc_bcm_201::Pc_hornreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_bcm_201_Pc_hazardlampreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[6];
}
bool Pc_bcm_201_Pc_hazardlampreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_bcm_201_Pc_hazardlampreqType Pc_bcm_201::PC_HAZARDLAMPREQ_NOREQ;
constexpr Pc_bcm_201_Pc_hazardlampreqType Pc_bcm_201::PC_HAZARDLAMPREQ_REQ;
constexpr Pc_bcm_201_Pc_hazardlampreqType Pc_bcm_201::Pc_hazardlampreqType_MIN;
constexpr Pc_bcm_201_Pc_hazardlampreqType Pc_bcm_201::Pc_hazardlampreqType_MAX;
constexpr int Pc_bcm_201::Pc_hazardlampreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_rrwheelspdvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[7];
}
bool Scu_bcs_3_308_Bcs_rrwheelspdvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_rrwheelspdvdType Scu_bcs_3_308::BCS_RRWHEELSPDVD_INVALID;
constexpr Scu_bcs_3_308_Bcs_rrwheelspdvdType Scu_bcs_3_308::BCS_RRWHEELSPDVD_VALID;
constexpr Scu_bcs_3_308_Bcs_rrwheelspdvdType Scu_bcs_3_308::Bcs_rrwheelspdvdType_MIN;
constexpr Scu_bcs_3_308_Bcs_rrwheelspdvdType Scu_bcs_3_308::Bcs_rrwheelspdvdType_MAX;
constexpr int Scu_bcs_3_308::Bcs_rrwheelspdvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[8];
}
bool Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_rrwheeldirectionvdType Scu_bcs_3_308::BCS_RRWHEELDIRECTIONVD_INVALID;
constexpr Scu_bcs_3_308_Bcs_rrwheeldirectionvdType Scu_bcs_3_308::BCS_RRWHEELDIRECTIONVD_VALID;
constexpr Scu_bcs_3_308_Bcs_rrwheeldirectionvdType Scu_bcs_3_308::Bcs_rrwheeldirectionvdType_MIN;
constexpr Scu_bcs_3_308_Bcs_rrwheeldirectionvdType Scu_bcs_3_308::Bcs_rrwheeldirectionvdType_MAX;
constexpr int Scu_bcs_3_308::Bcs_rrwheeldirectionvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_rlwheelspdvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[9];
}
bool Scu_bcs_3_308_Bcs_rlwheelspdvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_rlwheelspdvdType Scu_bcs_3_308::BCS_RLWHEELSPDVD_INVALID;
constexpr Scu_bcs_3_308_Bcs_rlwheelspdvdType Scu_bcs_3_308::BCS_RLWHEELSPDVD_VALID;
constexpr Scu_bcs_3_308_Bcs_rlwheelspdvdType Scu_bcs_3_308::Bcs_rlwheelspdvdType_MIN;
constexpr Scu_bcs_3_308_Bcs_rlwheelspdvdType Scu_bcs_3_308::Bcs_rlwheelspdvdType_MAX;
constexpr int Scu_bcs_3_308::Bcs_rlwheelspdvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[10];
}
bool Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_rlwheeldirectionvdType Scu_bcs_3_308::BCS_RLWHEELDIRECTIONVD_INVALID;
constexpr Scu_bcs_3_308_Bcs_rlwheeldirectionvdType Scu_bcs_3_308::BCS_RLWHEELDIRECTIONVD_VALID;
constexpr Scu_bcs_3_308_Bcs_rlwheeldirectionvdType Scu_bcs_3_308::Bcs_rlwheeldirectionvdType_MIN;
constexpr Scu_bcs_3_308_Bcs_rlwheeldirectionvdType Scu_bcs_3_308::Bcs_rlwheeldirectionvdType_MAX;
constexpr int Scu_bcs_3_308::Bcs_rlwheeldirectionvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_frwheelspdvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[11];
}
bool Scu_bcs_3_308_Bcs_frwheelspdvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_frwheelspdvdType Scu_bcs_3_308::BCS_FRWHEELSPDVD_INVALID;
constexpr Scu_bcs_3_308_Bcs_frwheelspdvdType Scu_bcs_3_308::BCS_FRWHEELSPDVD_VALID;
constexpr Scu_bcs_3_308_Bcs_frwheelspdvdType Scu_bcs_3_308::Bcs_frwheelspdvdType_MIN;
constexpr Scu_bcs_3_308_Bcs_frwheelspdvdType Scu_bcs_3_308::Bcs_frwheelspdvdType_MAX;
constexpr int Scu_bcs_3_308::Bcs_frwheelspdvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_frwheeldirectionvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[12];
}
bool Scu_bcs_3_308_Bcs_frwheeldirectionvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_frwheeldirectionvdType Scu_bcs_3_308::BCS_FRWHEELDIRECTIONVD_INVALID;
constexpr Scu_bcs_3_308_Bcs_frwheeldirectionvdType Scu_bcs_3_308::BCS_FRWHEELDIRECTIONVD_VALID;
constexpr Scu_bcs_3_308_Bcs_frwheeldirectionvdType Scu_bcs_3_308::Bcs_frwheeldirectionvdType_MIN;
constexpr Scu_bcs_3_308_Bcs_frwheeldirectionvdType Scu_bcs_3_308::Bcs_frwheeldirectionvdType_MAX;
constexpr int Scu_bcs_3_308::Bcs_frwheeldirectionvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_flwheelspdvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[13];
}
bool Scu_bcs_3_308_Bcs_flwheelspdvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_flwheelspdvdType Scu_bcs_3_308::BCS_FLWHEELSPDVD_INVALID;
constexpr Scu_bcs_3_308_Bcs_flwheelspdvdType Scu_bcs_3_308::BCS_FLWHEELSPDVD_VALID;
constexpr Scu_bcs_3_308_Bcs_flwheelspdvdType Scu_bcs_3_308::Bcs_flwheelspdvdType_MIN;
constexpr Scu_bcs_3_308_Bcs_flwheelspdvdType Scu_bcs_3_308::Bcs_flwheelspdvdType_MAX;
constexpr int Scu_bcs_3_308::Bcs_flwheelspdvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_flwheeldirectionvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[14];
}
bool Scu_bcs_3_308_Bcs_flwheeldirectionvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_flwheeldirectionvdType Scu_bcs_3_308::BCS_FLWHEELDIRECTIONVD_INVALID;
constexpr Scu_bcs_3_308_Bcs_flwheeldirectionvdType Scu_bcs_3_308::BCS_FLWHEELDIRECTIONVD_VALID;
constexpr Scu_bcs_3_308_Bcs_flwheeldirectionvdType Scu_bcs_3_308::Bcs_flwheeldirectionvdType_MIN;
constexpr Scu_bcs_3_308_Bcs_flwheeldirectionvdType Scu_bcs_3_308::Bcs_flwheeldirectionvdType_MAX;
constexpr int Scu_bcs_3_308::Bcs_flwheeldirectionvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_rrwheeldirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[15];
}
bool Scu_bcs_3_308_Bcs_rrwheeldirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_rrwheeldirectionType Scu_bcs_3_308::BCS_RRWHEELDIRECTION_FORWARD;
constexpr Scu_bcs_3_308_Bcs_rrwheeldirectionType Scu_bcs_3_308::BCS_RRWHEELDIRECTION_BACKWARD;
constexpr Scu_bcs_3_308_Bcs_rrwheeldirectionType Scu_bcs_3_308::Bcs_rrwheeldirectionType_MIN;
constexpr Scu_bcs_3_308_Bcs_rrwheeldirectionType Scu_bcs_3_308::Bcs_rrwheeldirectionType_MAX;
constexpr int Scu_bcs_3_308::Bcs_rrwheeldirectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_rlwheeldirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[16];
}
bool Scu_bcs_3_308_Bcs_rlwheeldirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_rlwheeldirectionType Scu_bcs_3_308::BCS_RLWHEELDIRECTION_FORWARD;
constexpr Scu_bcs_3_308_Bcs_rlwheeldirectionType Scu_bcs_3_308::BCS_RLWHEELDIRECTION_BACKWARD;
constexpr Scu_bcs_3_308_Bcs_rlwheeldirectionType Scu_bcs_3_308::Bcs_rlwheeldirectionType_MIN;
constexpr Scu_bcs_3_308_Bcs_rlwheeldirectionType Scu_bcs_3_308::Bcs_rlwheeldirectionType_MAX;
constexpr int Scu_bcs_3_308::Bcs_rlwheeldirectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_frwheeldirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[17];
}
bool Scu_bcs_3_308_Bcs_frwheeldirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_frwheeldirectionType Scu_bcs_3_308::BCS_FRWHEELDIRECTION_FORWARD;
constexpr Scu_bcs_3_308_Bcs_frwheeldirectionType Scu_bcs_3_308::BCS_FRWHEELDIRECTION_BACKWARD;
constexpr Scu_bcs_3_308_Bcs_frwheeldirectionType Scu_bcs_3_308::Bcs_frwheeldirectionType_MIN;
constexpr Scu_bcs_3_308_Bcs_frwheeldirectionType Scu_bcs_3_308::Bcs_frwheeldirectionType_MAX;
constexpr int Scu_bcs_3_308::Bcs_frwheeldirectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_3_308_Bcs_flwheeldirectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[18];
}
bool Scu_bcs_3_308_Bcs_flwheeldirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_3_308_Bcs_flwheeldirectionType Scu_bcs_3_308::BCS_FLWHEELDIRECTION_FORWARD;
constexpr Scu_bcs_3_308_Bcs_flwheeldirectionType Scu_bcs_3_308::BCS_FLWHEELDIRECTION_BACKWARD;
constexpr Scu_bcs_3_308_Bcs_flwheeldirectionType Scu_bcs_3_308::Bcs_flwheeldirectionType_MIN;
constexpr Scu_bcs_3_308_Bcs_flwheeldirectionType Scu_bcs_3_308::Bcs_flwheeldirectionType_MAX;
constexpr int Scu_bcs_3_308::Bcs_flwheeldirectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_epb_203_Pc_epbreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[19];
}
bool Pc_epb_203_Pc_epbreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_epb_203_Pc_epbreqType Pc_epb_203::PC_EPBREQ_INVALID;
constexpr Pc_epb_203_Pc_epbreqType Pc_epb_203::PC_EPBREQ_RELEASE;
constexpr Pc_epb_203_Pc_epbreqType Pc_epb_203::PC_EPBREQ_APPLY;
constexpr Pc_epb_203_Pc_epbreqType Pc_epb_203::Pc_epbreqType_MIN;
constexpr Pc_epb_203_Pc_epbreqType Pc_epb_203::Pc_epbreqType_MAX;
constexpr int Pc_epb_203::Pc_epbreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_epb_203_Pc_epbenableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[20];
}
bool Pc_epb_203_Pc_epbenableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_epb_203_Pc_epbenableType Pc_epb_203::PC_EPBENABLE_DISABLE;
constexpr Pc_epb_203_Pc_epbenableType Pc_epb_203::PC_EPBENABLE_ENABLE;
constexpr Pc_epb_203_Pc_epbenableType Pc_epb_203::Pc_epbenableType_MIN;
constexpr Pc_epb_203_Pc_epbenableType Pc_epb_203::Pc_epbenableType_MAX;
constexpr int Pc_epb_203::Pc_epbenableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_bcs_202_Pc_brkpedenableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[21];
}
bool Pc_bcs_202_Pc_brkpedenableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_bcs_202_Pc_brkpedenableType Pc_bcs_202::PC_BRKPEDENABLE_DISABLE;
constexpr Pc_bcs_202_Pc_brkpedenableType Pc_bcs_202::PC_BRKPEDENABLE_ENABLE;
constexpr Pc_bcs_202_Pc_brkpedenableType Pc_bcs_202::Pc_brkpedenableType_MIN;
constexpr Pc_bcs_202_Pc_brkpedenableType Pc_bcs_202::Pc_brkpedenableType_MAX;
constexpr int Pc_bcs_202::Pc_brkpedenableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_vcu_205_Pc_accpedenableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[22];
}
bool Pc_vcu_205_Pc_accpedenableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_vcu_205_Pc_accpedenableType Pc_vcu_205::PC_ACCPEDENABLE_DISABLE;
constexpr Pc_vcu_205_Pc_accpedenableType Pc_vcu_205::PC_ACCPEDENABLE_ENABLE;
constexpr Pc_vcu_205_Pc_accpedenableType Pc_vcu_205::Pc_accpedenableType_MIN;
constexpr Pc_vcu_205_Pc_accpedenableType Pc_vcu_205::Pc_accpedenableType_MAX;
constexpr int Pc_vcu_205::Pc_accpedenableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_vcu_205_Pc_torqenableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[23];
}
bool Pc_vcu_205_Pc_torqenableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_vcu_205_Pc_torqenableType Pc_vcu_205::PC_TORQENABLE_DISABLE;
constexpr Pc_vcu_205_Pc_torqenableType Pc_vcu_205::PC_TORQENABLE_ENABLE;
constexpr Pc_vcu_205_Pc_torqenableType Pc_vcu_205::Pc_torqenableType_MIN;
constexpr Pc_vcu_205_Pc_torqenableType Pc_vcu_205::Pc_torqenableType_MAX;
constexpr int Pc_vcu_205::Pc_torqenableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_vcu_205_Pc_gearreqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[24];
}
bool Pc_vcu_205_Pc_gearreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_vcu_205_Pc_gearreqType Pc_vcu_205::PC_GEARREQ_INVALID;
constexpr Pc_vcu_205_Pc_gearreqType Pc_vcu_205::PC_GEARREQ_DRIVE;
constexpr Pc_vcu_205_Pc_gearreqType Pc_vcu_205::PC_GEARREQ_NEUTRAL;
constexpr Pc_vcu_205_Pc_gearreqType Pc_vcu_205::PC_GEARREQ_REVERSE;
constexpr Pc_vcu_205_Pc_gearreqType Pc_vcu_205::PC_GEARREQ_PARK;
constexpr Pc_vcu_205_Pc_gearreqType Pc_vcu_205::Pc_gearreqType_MIN;
constexpr Pc_vcu_205_Pc_gearreqType Pc_vcu_205::Pc_gearreqType_MAX;
constexpr int Pc_vcu_205::Pc_gearreqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_vcu_205_Pc_gearenableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[25];
}
bool Pc_vcu_205_Pc_gearenableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_vcu_205_Pc_gearenableType Pc_vcu_205::PC_GEARENABLE_DISABLE;
constexpr Pc_vcu_205_Pc_gearenableType Pc_vcu_205::PC_GEARENABLE_ENABLE;
constexpr Pc_vcu_205_Pc_gearenableType Pc_vcu_205::Pc_gearenableType_MIN;
constexpr Pc_vcu_205_Pc_gearenableType Pc_vcu_205::Pc_gearenableType_MAX;
constexpr int Pc_vcu_205::Pc_gearenableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pc_eps_204_Pc_steerenableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[26];
}
bool Pc_eps_204_Pc_steerenableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pc_eps_204_Pc_steerenableType Pc_eps_204::PC_STEERENABLE_DISABLE;
constexpr Pc_eps_204_Pc_steerenableType Pc_eps_204::PC_STEERENABLE_ENABLE;
constexpr Pc_eps_204_Pc_steerenableType Pc_eps_204::Pc_steerenableType_MIN;
constexpr Pc_eps_204_Pc_steerenableType Pc_eps_204::Pc_steerenableType_MAX;
constexpr int Pc_eps_204::Pc_steerenableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_1_301_Scu_stopbutstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[27];
}
bool Scu_1_301_Scu_stopbutstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_1_301_Scu_stopbutstType Scu_1_301::SCU_STOPBUTST_UNPRESSED;
constexpr Scu_1_301_Scu_stopbutstType Scu_1_301::SCU_STOPBUTST_PRESSED;
constexpr Scu_1_301_Scu_stopbutstType Scu_1_301::Scu_stopbutstType_MIN;
constexpr Scu_1_301_Scu_stopbutstType Scu_1_301::Scu_stopbutstType_MAX;
constexpr int Scu_1_301::Scu_stopbutstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_1_301_Scu_drvmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[28];
}
bool Scu_1_301_Scu_drvmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_1_301_Scu_drvmodeType Scu_1_301::SCU_DRVMODE_INVALID;
constexpr Scu_1_301_Scu_drvmodeType Scu_1_301::SCU_DRVMODE_MANUAL;
constexpr Scu_1_301_Scu_drvmodeType Scu_1_301::SCU_DRVMODE_INTERRUPT;
constexpr Scu_1_301_Scu_drvmodeType Scu_1_301::SCU_DRVMODE_AUTO;
constexpr Scu_1_301_Scu_drvmodeType Scu_1_301::Scu_drvmodeType_MIN;
constexpr Scu_1_301_Scu_drvmodeType Scu_1_301::Scu_drvmodeType_MAX;
constexpr int Scu_1_301::Scu_drvmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_1_301_Scu_faultstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[29];
}
bool Scu_1_301_Scu_faultstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_1_301_Scu_faultstType Scu_1_301::SCU_FAULTST_NORMAL;
constexpr Scu_1_301_Scu_faultstType Scu_1_301::SCU_FAULTST_FAULT;
constexpr Scu_1_301_Scu_faultstType Scu_1_301::Scu_faultstType_MIN;
constexpr Scu_1_301_Scu_faultstType Scu_1_301::Scu_faultstType_MAX;
constexpr int Scu_1_301::Scu_faultstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_vehreversestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[30];
}
bool Scu_bcm_304_Bcm_vehreversestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_vehreversestType Scu_bcm_304::BCM_VEHREVERSEST_NORMAL;
constexpr Scu_bcm_304_Bcm_vehreversestType Scu_bcm_304::BCM_VEHREVERSEST_REVERSE;
constexpr Scu_bcm_304_Bcm_vehreversestType Scu_bcm_304::Bcm_vehreversestType_MIN;
constexpr Scu_bcm_304_Bcm_vehreversestType Scu_bcm_304::Bcm_vehreversestType_MAX;
constexpr int Scu_bcm_304::Bcm_vehreversestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_rightturnlampstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[31];
}
bool Scu_bcm_304_Bcm_rightturnlampstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_rightturnlampstType Scu_bcm_304::BCM_RIGHTTURNLAMPST_INACTIVE;
constexpr Scu_bcm_304_Bcm_rightturnlampstType Scu_bcm_304::BCM_RIGHTTURNLAMPST_ACTIVE;
constexpr Scu_bcm_304_Bcm_rightturnlampstType Scu_bcm_304::Bcm_rightturnlampstType_MIN;
constexpr Scu_bcm_304_Bcm_rightturnlampstType Scu_bcm_304::Bcm_rightturnlampstType_MAX;
constexpr int Scu_bcm_304::Bcm_rightturnlampstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_rearfoglampstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[32];
}
bool Scu_bcm_304_Bcm_rearfoglampstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_rearfoglampstType Scu_bcm_304::BCM_REARFOGLAMPST_INACTIVE;
constexpr Scu_bcm_304_Bcm_rearfoglampstType Scu_bcm_304::BCM_REARFOGLAMPST_ACTIVE;
constexpr Scu_bcm_304_Bcm_rearfoglampstType Scu_bcm_304::Bcm_rearfoglampstType_MIN;
constexpr Scu_bcm_304_Bcm_rearfoglampstType Scu_bcm_304::Bcm_rearfoglampstType_MAX;
constexpr int Scu_bcm_304::Bcm_rearfoglampstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_parkinglampstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[33];
}
bool Scu_bcm_304_Bcm_parkinglampstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_parkinglampstType Scu_bcm_304::BCM_PARKINGLAMPST_INACTIVE;
constexpr Scu_bcm_304_Bcm_parkinglampstType Scu_bcm_304::BCM_PARKINGLAMPST_ACTIVE;
constexpr Scu_bcm_304_Bcm_parkinglampstType Scu_bcm_304::Bcm_parkinglampstType_MIN;
constexpr Scu_bcm_304_Bcm_parkinglampstType Scu_bcm_304::Bcm_parkinglampstType_MAX;
constexpr int Scu_bcm_304::Bcm_parkinglampstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_lowbeamstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[34];
}
bool Scu_bcm_304_Bcm_lowbeamstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_lowbeamstType Scu_bcm_304::BCM_LOWBEAMST_INACTIVE;
constexpr Scu_bcm_304_Bcm_lowbeamstType Scu_bcm_304::BCM_LOWBEAMST_ACTIVE;
constexpr Scu_bcm_304_Bcm_lowbeamstType Scu_bcm_304::Bcm_lowbeamstType_MIN;
constexpr Scu_bcm_304_Bcm_lowbeamstType Scu_bcm_304::Bcm_lowbeamstType_MAX;
constexpr int Scu_bcm_304::Bcm_lowbeamstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_leftturnlampstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[35];
}
bool Scu_bcm_304_Bcm_leftturnlampstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_leftturnlampstType Scu_bcm_304::BCM_LEFTTURNLAMPST_INACTIVE;
constexpr Scu_bcm_304_Bcm_leftturnlampstType Scu_bcm_304::BCM_LEFTTURNLAMPST_ACTIVE;
constexpr Scu_bcm_304_Bcm_leftturnlampstType Scu_bcm_304::Bcm_leftturnlampstType_MIN;
constexpr Scu_bcm_304_Bcm_leftturnlampstType Scu_bcm_304::Bcm_leftturnlampstType_MAX;
constexpr int Scu_bcm_304::Bcm_leftturnlampstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_keystType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[36];
}
bool Scu_bcm_304_Bcm_keystType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_keystType Scu_bcm_304::BCM_KEYST_OFF;
constexpr Scu_bcm_304_Bcm_keystType Scu_bcm_304::BCM_KEYST_ACC;
constexpr Scu_bcm_304_Bcm_keystType Scu_bcm_304::BCM_KEYST_ON;
constexpr Scu_bcm_304_Bcm_keystType Scu_bcm_304::BCM_KEYST_CRANK;
constexpr Scu_bcm_304_Bcm_keystType Scu_bcm_304::Bcm_keystType_MIN;
constexpr Scu_bcm_304_Bcm_keystType Scu_bcm_304::Bcm_keystType_MAX;
constexpr int Scu_bcm_304::Bcm_keystType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_hornstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[37];
}
bool Scu_bcm_304_Bcm_hornstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_hornstType Scu_bcm_304::BCM_HORNST_INACTIVE;
constexpr Scu_bcm_304_Bcm_hornstType Scu_bcm_304::BCM_HORNST_ACTIVE;
constexpr Scu_bcm_304_Bcm_hornstType Scu_bcm_304::Bcm_hornstType_MIN;
constexpr Scu_bcm_304_Bcm_hornstType Scu_bcm_304::Bcm_hornstType_MAX;
constexpr int Scu_bcm_304::Bcm_hornstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_highbeamstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[38];
}
bool Scu_bcm_304_Bcm_highbeamstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_highbeamstType Scu_bcm_304::BCM_HIGHBEAMST_INACTIVE;
constexpr Scu_bcm_304_Bcm_highbeamstType Scu_bcm_304::BCM_HIGHBEAMST_ACTIVE;
constexpr Scu_bcm_304_Bcm_highbeamstType Scu_bcm_304::Bcm_highbeamstType_MIN;
constexpr Scu_bcm_304_Bcm_highbeamstType Scu_bcm_304::Bcm_highbeamstType_MAX;
constexpr int Scu_bcm_304::Bcm_highbeamstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_hazardlampstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[39];
}
bool Scu_bcm_304_Bcm_hazardlampstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_hazardlampstType Scu_bcm_304::BCM_HAZARDLAMPST_INACTIVE;
constexpr Scu_bcm_304_Bcm_hazardlampstType Scu_bcm_304::BCM_HAZARDLAMPST_ACTIVE;
constexpr Scu_bcm_304_Bcm_hazardlampstType Scu_bcm_304::Bcm_hazardlampstType_MIN;
constexpr Scu_bcm_304_Bcm_hazardlampstType Scu_bcm_304::Bcm_hazardlampstType_MAX;
constexpr int Scu_bcm_304::Bcm_hazardlampstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_frontfoglampstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[40];
}
bool Scu_bcm_304_Bcm_frontfoglampstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_frontfoglampstType Scu_bcm_304::BCM_FRONTFOGLAMPST_INACTIVE;
constexpr Scu_bcm_304_Bcm_frontfoglampstType Scu_bcm_304::BCM_FRONTFOGLAMPST_ACTIVE;
constexpr Scu_bcm_304_Bcm_frontfoglampstType Scu_bcm_304::Bcm_frontfoglampstType_MIN;
constexpr Scu_bcm_304_Bcm_frontfoglampstType Scu_bcm_304::Bcm_frontfoglampstType_MAX;
constexpr int Scu_bcm_304::Bcm_frontfoglampstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcm_304_Bcm_brakelightswitchstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[41];
}
bool Scu_bcm_304_Bcm_brakelightswitchstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcm_304_Bcm_brakelightswitchstType Scu_bcm_304::BCM_BRAKELIGHTSWITCHST_INACTIVE;
constexpr Scu_bcm_304_Bcm_brakelightswitchstType Scu_bcm_304::BCM_BRAKELIGHTSWITCHST_ACTIVE;
constexpr Scu_bcm_304_Bcm_brakelightswitchstType Scu_bcm_304::Bcm_brakelightswitchstType_MIN;
constexpr Scu_bcm_304_Bcm_brakelightswitchstType Scu_bcm_304::Bcm_brakelightswitchstType_MAX;
constexpr int Scu_bcm_304::Bcm_brakelightswitchstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_aebavailableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[42];
}
bool Scu_bcs_1_306_Bcs_aebavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_aebavailableType Scu_bcs_1_306::BCS_AEBAVAILABLE_UNAVAILABLE;
constexpr Scu_bcs_1_306_Bcs_aebavailableType Scu_bcs_1_306::BCS_AEBAVAILABLE_AVAILABLE;
constexpr Scu_bcs_1_306_Bcs_aebavailableType Scu_bcs_1_306::Bcs_aebavailableType_MIN;
constexpr Scu_bcs_1_306_Bcs_aebavailableType Scu_bcs_1_306::Bcs_aebavailableType_MAX;
constexpr int Scu_bcs_1_306::Bcs_aebavailableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_cddavailableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[43];
}
bool Scu_bcs_1_306_Bcs_cddavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_cddavailableType Scu_bcs_1_306::BCS_CDDAVAILABLE_UNAVAILABLE;
constexpr Scu_bcs_1_306_Bcs_cddavailableType Scu_bcs_1_306::BCS_CDDAVAILABLE_AVAILABLE;
constexpr Scu_bcs_1_306_Bcs_cddavailableType Scu_bcs_1_306::Bcs_cddavailableType_MIN;
constexpr Scu_bcs_1_306_Bcs_cddavailableType Scu_bcs_1_306::Bcs_cddavailableType_MAX;
constexpr int Scu_bcs_1_306::Bcs_cddavailableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_intidxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[44];
}
bool Scu_bcs_1_306_Bcs_intidxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::BCS_INTIDX_NOINT;
constexpr Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::BCS_INTIDX_OVERFLOW;
constexpr Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::BCS_INTIDX_TIMEOUT;
constexpr Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::BCS_INTIDX_ACCPEDINT;
constexpr Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::BCS_INTIDX_BRKPEDINT;
constexpr Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::BCS_INTIDX_GEARINT;
constexpr Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::Bcs_intidxType_MIN;
constexpr Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::Bcs_intidxType_MAX;
constexpr int Scu_bcs_1_306::Bcs_intidxType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_vdcfaultstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[45];
}
bool Scu_bcs_1_306_Bcs_vdcfaultstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_vdcfaultstType Scu_bcs_1_306::BCS_VDCFAULTST_NORMAL;
constexpr Scu_bcs_1_306_Bcs_vdcfaultstType Scu_bcs_1_306::BCS_VDCFAULTST_FAULT;
constexpr Scu_bcs_1_306_Bcs_vdcfaultstType Scu_bcs_1_306::Bcs_vdcfaultstType_MIN;
constexpr Scu_bcs_1_306_Bcs_vdcfaultstType Scu_bcs_1_306::Bcs_vdcfaultstType_MAX;
constexpr int Scu_bcs_1_306::Bcs_vdcfaultstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_vdcactivestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[46];
}
bool Scu_bcs_1_306_Bcs_vdcactivestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_vdcactivestType Scu_bcs_1_306::BCS_VDCACTIVEST_INACTIVE;
constexpr Scu_bcs_1_306_Bcs_vdcactivestType Scu_bcs_1_306::BCS_VDCACTIVEST_ACTIVE;
constexpr Scu_bcs_1_306_Bcs_vdcactivestType Scu_bcs_1_306::Bcs_vdcactivestType_MIN;
constexpr Scu_bcs_1_306_Bcs_vdcactivestType Scu_bcs_1_306::Bcs_vdcactivestType_MAX;
constexpr int Scu_bcs_1_306::Bcs_vdcactivestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_absfaultstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[47];
}
bool Scu_bcs_1_306_Bcs_absfaultstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_absfaultstType Scu_bcs_1_306::BCS_ABSFAULTST_NORMAL;
constexpr Scu_bcs_1_306_Bcs_absfaultstType Scu_bcs_1_306::BCS_ABSFAULTST_FAULT;
constexpr Scu_bcs_1_306_Bcs_absfaultstType Scu_bcs_1_306::Bcs_absfaultstType_MIN;
constexpr Scu_bcs_1_306_Bcs_absfaultstType Scu_bcs_1_306::Bcs_absfaultstType_MAX;
constexpr int Scu_bcs_1_306::Bcs_absfaultstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_absactivestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[48];
}
bool Scu_bcs_1_306_Bcs_absactivestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_absactivestType Scu_bcs_1_306::BCS_ABSACTIVEST_INACTIVE;
constexpr Scu_bcs_1_306_Bcs_absactivestType Scu_bcs_1_306::BCS_ABSACTIVEST_ACTIVE;
constexpr Scu_bcs_1_306_Bcs_absactivestType Scu_bcs_1_306::Bcs_absactivestType_MIN;
constexpr Scu_bcs_1_306_Bcs_absactivestType Scu_bcs_1_306::Bcs_absactivestType_MAX;
constexpr int Scu_bcs_1_306::Bcs_absactivestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_faultstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[49];
}
bool Scu_bcs_1_306_Bcs_faultstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_faultstType Scu_bcs_1_306::BCS_FAULTST_NORMAL;
constexpr Scu_bcs_1_306_Bcs_faultstType Scu_bcs_1_306::BCS_FAULTST_FAULT;
constexpr Scu_bcs_1_306_Bcs_faultstType Scu_bcs_1_306::Bcs_faultstType_MIN;
constexpr Scu_bcs_1_306_Bcs_faultstType Scu_bcs_1_306::Bcs_faultstType_MAX;
constexpr int Scu_bcs_1_306::Bcs_faultstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_1_306_Bcs_drvmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[50];
}
bool Scu_bcs_1_306_Bcs_drvmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306::BCS_DRVMODE_INVALID;
constexpr Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306::BCS_DRVMODE_MANUAL;
constexpr Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306::BCS_DRVMODE_INTERRUPT;
constexpr Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306::BCS_DRVMODE_AUTO;
constexpr Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306::Bcs_drvmodeType_MIN;
constexpr Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306::Bcs_drvmodeType_MAX;
constexpr int Scu_bcs_1_306::Bcs_drvmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_bcs_2_307_Bcs_vehspdvdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[51];
}
bool Scu_bcs_2_307_Bcs_vehspdvdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_bcs_2_307_Bcs_vehspdvdType Scu_bcs_2_307::BCS_VEHSPDVD_INVALID;
constexpr Scu_bcs_2_307_Bcs_vehspdvdType Scu_bcs_2_307::BCS_VEHSPDVD_VALID;
constexpr Scu_bcs_2_307_Bcs_vehspdvdType Scu_bcs_2_307::Bcs_vehspdvdType_MIN;
constexpr Scu_bcs_2_307_Bcs_vehspdvdType Scu_bcs_2_307::Bcs_vehspdvdType_MAX;
constexpr int Scu_bcs_2_307::Bcs_vehspdvdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_epb_310_Epb_intidxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[52];
}
bool Scu_epb_310_Epb_intidxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_epb_310_Epb_intidxType Scu_epb_310::EPB_INTIDX_NOINT;
constexpr Scu_epb_310_Epb_intidxType Scu_epb_310::EPB_INTIDX_OVERFLOW;
constexpr Scu_epb_310_Epb_intidxType Scu_epb_310::EPB_INTIDX_TIMEOUT;
constexpr Scu_epb_310_Epb_intidxType Scu_epb_310::Epb_intidxType_MIN;
constexpr Scu_epb_310_Epb_intidxType Scu_epb_310::Epb_intidxType_MAX;
constexpr int Scu_epb_310::Epb_intidxType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_epb_310_Epb_drvmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[53];
}
bool Scu_epb_310_Epb_drvmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_epb_310_Epb_drvmodeType Scu_epb_310::EPB_DRVMODE_INVALID;
constexpr Scu_epb_310_Epb_drvmodeType Scu_epb_310::EPB_DRVMODE_MANUAL;
constexpr Scu_epb_310_Epb_drvmodeType Scu_epb_310::EPB_DRVMODE_INTERRUPT;
constexpr Scu_epb_310_Epb_drvmodeType Scu_epb_310::EPB_DRVMODE_AUTO;
constexpr Scu_epb_310_Epb_drvmodeType Scu_epb_310::Epb_drvmodeType_MIN;
constexpr Scu_epb_310_Epb_drvmodeType Scu_epb_310::Epb_drvmodeType_MAX;
constexpr int Scu_epb_310::Epb_drvmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_epb_310_Epb_sysstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[54];
}
bool Scu_epb_310_Epb_sysstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_epb_310_Epb_sysstType Scu_epb_310::EPB_SYSST_RELEASED;
constexpr Scu_epb_310_Epb_sysstType Scu_epb_310::EPB_SYSST_APPLIED;
constexpr Scu_epb_310_Epb_sysstType Scu_epb_310::EPB_SYSST_RELEASING;
constexpr Scu_epb_310_Epb_sysstType Scu_epb_310::EPB_SYSST_FAULT;
constexpr Scu_epb_310_Epb_sysstType Scu_epb_310::EPB_SYSST_APPLYING;
constexpr Scu_epb_310_Epb_sysstType Scu_epb_310::EPB_SYSST_DISENGAGED;
constexpr Scu_epb_310_Epb_sysstType Scu_epb_310::Epb_sysstType_MIN;
constexpr Scu_epb_310_Epb_sysstType Scu_epb_310::Epb_sysstType_MAX;
constexpr int Scu_epb_310::Epb_sysstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_epb_310_Epb_faultstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[55];
}
bool Scu_epb_310_Epb_faultstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_epb_310_Epb_faultstType Scu_epb_310::EPB_FAULTST_NORMAL;
constexpr Scu_epb_310_Epb_faultstType Scu_epb_310::EPB_FAULTST_FAULT;
constexpr Scu_epb_310_Epb_faultstType Scu_epb_310::Epb_faultstType_MIN;
constexpr Scu_epb_310_Epb_faultstType Scu_epb_310::Epb_faultstType_MAX;
constexpr int Scu_epb_310::Epb_faultstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_elcsysfaultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[56];
}
bool Scu_vcu_1_312_Vcu_elcsysfaultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_elcsysfaultType Scu_vcu_1_312::VCU_ELCSYSFAULT_NORMAL;
constexpr Scu_vcu_1_312_Vcu_elcsysfaultType Scu_vcu_1_312::VCU_ELCSYSFAULT_FAULT;
constexpr Scu_vcu_1_312_Vcu_elcsysfaultType Scu_vcu_1_312::Vcu_elcsysfaultType_MIN;
constexpr Scu_vcu_1_312_Vcu_elcsysfaultType Scu_vcu_1_312::Vcu_elcsysfaultType_MAX;
constexpr int Scu_vcu_1_312::Vcu_elcsysfaultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_brkpedstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[57];
}
bool Scu_vcu_1_312_Vcu_brkpedstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_brkpedstType Scu_vcu_1_312::VCU_BRKPEDST_UNPRESSED;
constexpr Scu_vcu_1_312_Vcu_brkpedstType Scu_vcu_1_312::VCU_BRKPEDST_PRESSED;
constexpr Scu_vcu_1_312_Vcu_brkpedstType Scu_vcu_1_312::Vcu_brkpedstType_MIN;
constexpr Scu_vcu_1_312_Vcu_brkpedstType Scu_vcu_1_312::Vcu_brkpedstType_MAX;
constexpr int Scu_vcu_1_312::Vcu_brkpedstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_intidxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[58];
}
bool Scu_vcu_1_312_Vcu_intidxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::VCU_INTIDX_NOINT;
constexpr Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::VCU_INTIDX_OVERFLOW;
constexpr Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::VCU_INTIDX_TIMEOUT;
constexpr Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::VCU_INTIDX_ACCPEDINT;
constexpr Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::VCU_INTIDX_BRKPEDINT;
constexpr Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::VCU_INTIDX_GEARINT;
constexpr Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::Vcu_intidxType_MIN;
constexpr Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::Vcu_intidxType_MAX;
constexpr int Scu_vcu_1_312::Vcu_intidxType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_gearintidxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[59];
}
bool Scu_vcu_1_312_Vcu_gearintidxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_gearintidxType Scu_vcu_1_312::VCU_GEARINTIDX_NOINT;
constexpr Scu_vcu_1_312_Vcu_gearintidxType Scu_vcu_1_312::VCU_GEARINTIDX_OVERFLOW;
constexpr Scu_vcu_1_312_Vcu_gearintidxType Scu_vcu_1_312::VCU_GEARINTIDX_TIMEOUT;
constexpr Scu_vcu_1_312_Vcu_gearintidxType Scu_vcu_1_312::Vcu_gearintidxType_MIN;
constexpr Scu_vcu_1_312_Vcu_gearintidxType Scu_vcu_1_312::Vcu_gearintidxType_MAX;
constexpr int Scu_vcu_1_312::Vcu_gearintidxType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_geardrvmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[60];
}
bool Scu_vcu_1_312_Vcu_geardrvmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312::VCU_GEARDRVMODE_INVALID;
constexpr Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312::VCU_GEARDRVMODE_MANUAL;
constexpr Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312::VCU_GEARDRVMODE_INTERRUPT;
constexpr Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312::VCU_GEARDRVMODE_AUTO;
constexpr Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312::Vcu_geardrvmodeType_MIN;
constexpr Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312::Vcu_geardrvmodeType_MAX;
constexpr int Scu_vcu_1_312::Vcu_geardrvmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_vehrdystType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[61];
}
bool Scu_vcu_1_312_Vcu_vehrdystType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_vehrdystType Scu_vcu_1_312::VCU_VEHRDYST_NOTREADY;
constexpr Scu_vcu_1_312_Vcu_vehrdystType Scu_vcu_1_312::VCU_VEHRDYST_READY;
constexpr Scu_vcu_1_312_Vcu_vehrdystType Scu_vcu_1_312::Vcu_vehrdystType_MIN;
constexpr Scu_vcu_1_312_Vcu_vehrdystType Scu_vcu_1_312::Vcu_vehrdystType_MAX;
constexpr int Scu_vcu_1_312::Vcu_vehrdystType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_faultstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[62];
}
bool Scu_vcu_1_312_Vcu_faultstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::VCU_FAULTST_NORMAL;
constexpr Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::VCU_FAULTST_DERATE;
constexpr Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::VCU_FAULTST_RSV1;
constexpr Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::VCU_FAULTST_RSV2;
constexpr Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::VCU_FAULTST_RSV3;
constexpr Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::VCU_FAULTST_FAULT;
constexpr Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::Vcu_faultstType_MIN;
constexpr Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::Vcu_faultstType_MAX;
constexpr int Scu_vcu_1_312::Vcu_faultstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_drvmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[63];
}
bool Scu_vcu_1_312_Vcu_drvmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312::VCU_DRVMODE_INVALID;
constexpr Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312::VCU_DRVMODE_MANUAL;
constexpr Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312::VCU_DRVMODE_INTERRUPT;
constexpr Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312::VCU_DRVMODE_AUTO;
constexpr Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312::Vcu_drvmodeType_MIN;
constexpr Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312::Vcu_drvmodeType_MAX;
constexpr int Scu_vcu_1_312::Vcu_drvmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_gearpstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[64];
}
bool Scu_vcu_1_312_Vcu_gearpstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312::VCU_GEARPST_INVALID;
constexpr Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312::VCU_GEARPST_DRIVE;
constexpr Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312::VCU_GEARPST_NEUTRAL;
constexpr Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312::VCU_GEARPST_REVERSE;
constexpr Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312::VCU_GEARPST_PARK;
constexpr Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312::Vcu_gearpstType_MIN;
constexpr Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312::Vcu_gearpstType_MAX;
constexpr int Scu_vcu_1_312::Vcu_gearpstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_gearfaultstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[65];
}
bool Scu_vcu_1_312_Vcu_gearfaultstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_gearfaultstType Scu_vcu_1_312::VCU_GEARFAULTST_NORMAL;
constexpr Scu_vcu_1_312_Vcu_gearfaultstType Scu_vcu_1_312::VCU_GEARFAULTST_FAULT;
constexpr Scu_vcu_1_312_Vcu_gearfaultstType Scu_vcu_1_312::Vcu_gearfaultstType_MIN;
constexpr Scu_vcu_1_312_Vcu_gearfaultstType Scu_vcu_1_312::Vcu_gearfaultstType_MAX;
constexpr int Scu_vcu_1_312::Vcu_gearfaultstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_vcu_1_312_Vcu_gearactType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[66];
}
bool Scu_vcu_1_312_Vcu_gearactType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312::VCU_GEARACT_INVALID;
constexpr Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312::VCU_GEARACT_DRIVE;
constexpr Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312::VCU_GEARACT_NEUTRAL;
constexpr Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312::VCU_GEARACT_REVERSE;
constexpr Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312::VCU_GEARACT_PARK;
constexpr Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312::Vcu_gearactType_MIN;
constexpr Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312::Vcu_gearactType_MAX;
constexpr int Scu_vcu_1_312::Vcu_gearactType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_eps_311_Eps_intidxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[67];
}
bool Scu_eps_311_Eps_intidxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_eps_311_Eps_intidxType Scu_eps_311::EPS_INTIDX_NOINT;
constexpr Scu_eps_311_Eps_intidxType Scu_eps_311::EPS_INTIDX_OVERFLOW;
constexpr Scu_eps_311_Eps_intidxType Scu_eps_311::EPS_INTIDX_TIMEOUT;
constexpr Scu_eps_311_Eps_intidxType Scu_eps_311::EPS_INTIDX_STEERINT;
constexpr Scu_eps_311_Eps_intidxType Scu_eps_311::Eps_intidxType_MIN;
constexpr Scu_eps_311_Eps_intidxType Scu_eps_311::Eps_intidxType_MAX;
constexpr int Scu_eps_311::Eps_intidxType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_eps_311_Eps_faultstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[68];
}
bool Scu_eps_311_Eps_faultstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_eps_311_Eps_faultstType Scu_eps_311::EPS_FAULTST_NORMAL;
constexpr Scu_eps_311_Eps_faultstType Scu_eps_311::EPS_FAULTST_FAULT;
constexpr Scu_eps_311_Eps_faultstType Scu_eps_311::Eps_faultstType_MIN;
constexpr Scu_eps_311_Eps_faultstType Scu_eps_311::Eps_faultstType_MAX;
constexpr int Scu_eps_311::Eps_faultstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scu_eps_311_Eps_drvmodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fge3_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fge3_2eproto[69];
}
bool Scu_eps_311_Eps_drvmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Scu_eps_311_Eps_drvmodeType Scu_eps_311::EPS_DRVMODE_INVALID;
constexpr Scu_eps_311_Eps_drvmodeType Scu_eps_311::EPS_DRVMODE_MANUAL;
constexpr Scu_eps_311_Eps_drvmodeType Scu_eps_311::EPS_DRVMODE_INTERRUPT;
constexpr Scu_eps_311_Eps_drvmodeType Scu_eps_311::EPS_DRVMODE_AUTO;
constexpr Scu_eps_311_Eps_drvmodeType Scu_eps_311::Eps_drvmodeType_MIN;
constexpr Scu_eps_311_Eps_drvmodeType Scu_eps_311::Eps_drvmodeType_MAX;
constexpr int Scu_eps_311::Eps_drvmodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Pc_bcm_201::InitAsDefaultInstance() {
}
class Pc_bcm_201::_Internal {
 public:
  using HasBits = decltype(std::declval<Pc_bcm_201>()._has_bits_);
  static void set_has_pc_reverselampreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pc_lowbeamreq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pc_highbeamreq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pc_rightturnlampreq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pc_leftturnlampreq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pc_hornreq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pc_hazardlampreq(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Pc_bcm_201::Pc_bcm_201()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Pc_bcm_201)
}
Pc_bcm_201::Pc_bcm_201(const Pc_bcm_201& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pc_reverselampreq_, &from.pc_reverselampreq_,
    static_cast<size_t>(reinterpret_cast<char*>(&pc_hazardlampreq_) -
    reinterpret_cast<char*>(&pc_reverselampreq_)) + sizeof(pc_hazardlampreq_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Pc_bcm_201)
}

void Pc_bcm_201::SharedCtor() {
  ::memset(&pc_reverselampreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pc_hazardlampreq_) -
      reinterpret_cast<char*>(&pc_reverselampreq_)) + sizeof(pc_hazardlampreq_));
}

Pc_bcm_201::~Pc_bcm_201() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Pc_bcm_201)
  SharedDtor();
}

void Pc_bcm_201::SharedDtor() {
}

void Pc_bcm_201::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pc_bcm_201& Pc_bcm_201::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pc_bcm_201_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Pc_bcm_201::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Pc_bcm_201)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&pc_reverselampreq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pc_hazardlampreq_) -
        reinterpret_cast<char*>(&pc_reverselampreq_)) + sizeof(pc_hazardlampreq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Pc_bcm_201::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Pc_bcm_201.Pc_reverselampreqType pc_reverselampreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType_IsValid(val))) {
            _internal_set_pc_reverselampreq(static_cast<::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_bcm_201.Pc_lowbeamreqType pc_lowbeamreq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType_IsValid(val))) {
            _internal_set_pc_lowbeamreq(static_cast<::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_bcm_201.Pc_highbeamreqType pc_highbeamreq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType_IsValid(val))) {
            _internal_set_pc_highbeamreq(static_cast<::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_bcm_201.Pc_rightturnlampreqType pc_rightturnlampreq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType_IsValid(val))) {
            _internal_set_pc_rightturnlampreq(static_cast<::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_bcm_201.Pc_leftturnlampreqType pc_leftturnlampreq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType_IsValid(val))) {
            _internal_set_pc_leftturnlampreq(static_cast<::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_bcm_201.Pc_hornreqType pc_hornreq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_bcm_201_Pc_hornreqType_IsValid(val))) {
            _internal_set_pc_hornreq(static_cast<::apollo::canbus::Pc_bcm_201_Pc_hornreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_bcm_201.Pc_hazardlampreqType pc_hazardlampreq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType_IsValid(val))) {
            _internal_set_pc_hazardlampreq(static_cast<::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pc_bcm_201::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Pc_bcm_201)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Pc_bcm_201.Pc_reverselampreqType pc_reverselampreq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pc_reverselampreq(), target);
  }

  // optional .apollo.canbus.Pc_bcm_201.Pc_lowbeamreqType pc_lowbeamreq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pc_lowbeamreq(), target);
  }

  // optional .apollo.canbus.Pc_bcm_201.Pc_highbeamreqType pc_highbeamreq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pc_highbeamreq(), target);
  }

  // optional .apollo.canbus.Pc_bcm_201.Pc_rightturnlampreqType pc_rightturnlampreq = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pc_rightturnlampreq(), target);
  }

  // optional .apollo.canbus.Pc_bcm_201.Pc_leftturnlampreqType pc_leftturnlampreq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_pc_leftturnlampreq(), target);
  }

  // optional .apollo.canbus.Pc_bcm_201.Pc_hornreqType pc_hornreq = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_pc_hornreq(), target);
  }

  // optional .apollo.canbus.Pc_bcm_201.Pc_hazardlampreqType pc_hazardlampreq = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_pc_hazardlampreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Pc_bcm_201)
  return target;
}

size_t Pc_bcm_201::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Pc_bcm_201)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.canbus.Pc_bcm_201.Pc_reverselampreqType pc_reverselampreq = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_reverselampreq());
    }

    // optional .apollo.canbus.Pc_bcm_201.Pc_lowbeamreqType pc_lowbeamreq = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_lowbeamreq());
    }

    // optional .apollo.canbus.Pc_bcm_201.Pc_highbeamreqType pc_highbeamreq = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_highbeamreq());
    }

    // optional .apollo.canbus.Pc_bcm_201.Pc_rightturnlampreqType pc_rightturnlampreq = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_rightturnlampreq());
    }

    // optional .apollo.canbus.Pc_bcm_201.Pc_leftturnlampreqType pc_leftturnlampreq = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_leftturnlampreq());
    }

    // optional .apollo.canbus.Pc_bcm_201.Pc_hornreqType pc_hornreq = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_hornreq());
    }

    // optional .apollo.canbus.Pc_bcm_201.Pc_hazardlampreqType pc_hazardlampreq = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_hazardlampreq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pc_bcm_201::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Pc_bcm_201)
  GOOGLE_DCHECK_NE(&from, this);
  const Pc_bcm_201* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pc_bcm_201>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Pc_bcm_201)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Pc_bcm_201)
    MergeFrom(*source);
  }
}

void Pc_bcm_201::MergeFrom(const Pc_bcm_201& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Pc_bcm_201)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      pc_reverselampreq_ = from.pc_reverselampreq_;
    }
    if (cached_has_bits & 0x00000002u) {
      pc_lowbeamreq_ = from.pc_lowbeamreq_;
    }
    if (cached_has_bits & 0x00000004u) {
      pc_highbeamreq_ = from.pc_highbeamreq_;
    }
    if (cached_has_bits & 0x00000008u) {
      pc_rightturnlampreq_ = from.pc_rightturnlampreq_;
    }
    if (cached_has_bits & 0x00000010u) {
      pc_leftturnlampreq_ = from.pc_leftturnlampreq_;
    }
    if (cached_has_bits & 0x00000020u) {
      pc_hornreq_ = from.pc_hornreq_;
    }
    if (cached_has_bits & 0x00000040u) {
      pc_hazardlampreq_ = from.pc_hazardlampreq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pc_bcm_201::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Pc_bcm_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pc_bcm_201::CopyFrom(const Pc_bcm_201& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Pc_bcm_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pc_bcm_201::IsInitialized() const {
  return true;
}

void Pc_bcm_201::InternalSwap(Pc_bcm_201* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pc_reverselampreq_, other->pc_reverselampreq_);
  swap(pc_lowbeamreq_, other->pc_lowbeamreq_);
  swap(pc_highbeamreq_, other->pc_highbeamreq_);
  swap(pc_rightturnlampreq_, other->pc_rightturnlampreq_);
  swap(pc_leftturnlampreq_, other->pc_leftturnlampreq_);
  swap(pc_hornreq_, other->pc_hornreq_);
  swap(pc_hazardlampreq_, other->pc_hazardlampreq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pc_bcm_201::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_bcs_3_308::InitAsDefaultInstance() {
}
class Scu_bcs_3_308::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_bcs_3_308>()._has_bits_);
  static void set_has_bcs_rrwheelspdvd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bcs_rrwheeldirectionvd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bcs_rlwheelspdvd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bcs_rlwheeldirectionvd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bcs_frwheelspdvd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bcs_frwheeldirectionvd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bcs_flwheelspdvd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bcs_flwheeldirectionvd(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bcs_rrwheelspd(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bcs_rrwheeldirection(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bcs_rlwheelspd(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bcs_rlwheeldirection(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bcs_frwheelspd(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bcs_frwheeldirection(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bcs_flwheelspd(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bcs_flwheeldirection(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

Scu_bcs_3_308::Scu_bcs_3_308()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_bcs_3_308)
}
Scu_bcs_3_308::Scu_bcs_3_308(const Scu_bcs_3_308& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bcs_rrwheelspdvd_, &from.bcs_rrwheelspdvd_,
    static_cast<size_t>(reinterpret_cast<char*>(&bcs_flwheeldirection_) -
    reinterpret_cast<char*>(&bcs_rrwheelspdvd_)) + sizeof(bcs_flwheeldirection_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_bcs_3_308)
}

void Scu_bcs_3_308::SharedCtor() {
  ::memset(&bcs_rrwheelspdvd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bcs_flwheeldirection_) -
      reinterpret_cast<char*>(&bcs_rrwheelspdvd_)) + sizeof(bcs_flwheeldirection_));
}

Scu_bcs_3_308::~Scu_bcs_3_308() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_bcs_3_308)
  SharedDtor();
}

void Scu_bcs_3_308::SharedDtor() {
}

void Scu_bcs_3_308::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_bcs_3_308& Scu_bcs_3_308::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_bcs_3_308_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_bcs_3_308::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_bcs_3_308)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bcs_rrwheelspdvd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bcs_flwheeldirectionvd_) -
        reinterpret_cast<char*>(&bcs_rrwheelspdvd_)) + sizeof(bcs_flwheeldirectionvd_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bcs_rrwheelspd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bcs_flwheeldirection_) -
        reinterpret_cast<char*>(&bcs_rrwheelspd_)) + sizeof(bcs_flwheeldirection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_bcs_3_308::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheelspdvdType bcs_rrwheelspdvd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType_IsValid(val))) {
            _internal_set_bcs_rrwheelspdvd(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionvdType bcs_rrwheeldirectionvd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_IsValid(val))) {
            _internal_set_bcs_rrwheeldirectionvd(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheelspdvdType bcs_rlwheelspdvd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType_IsValid(val))) {
            _internal_set_bcs_rlwheelspdvd(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionvdType bcs_rlwheeldirectionvd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_IsValid(val))) {
            _internal_set_bcs_rlwheeldirectionvd(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheelspdvdType bcs_frwheelspdvd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType_IsValid(val))) {
            _internal_set_bcs_frwheelspdvd(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionvdType bcs_frwheeldirectionvd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType_IsValid(val))) {
            _internal_set_bcs_frwheeldirectionvd(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheelspdvdType bcs_flwheelspdvd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType_IsValid(val))) {
            _internal_set_bcs_flwheelspdvd(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionvdType bcs_flwheeldirectionvd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType_IsValid(val))) {
            _internal_set_bcs_flwheeldirectionvd(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double bcs_rrwheelspd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_bcs_rrwheelspd(&has_bits);
          bcs_rrwheelspd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionType bcs_rrwheeldirection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType_IsValid(val))) {
            _internal_set_bcs_rrwheeldirection(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double bcs_rlwheelspd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_bcs_rlwheelspd(&has_bits);
          bcs_rlwheelspd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionType bcs_rlwheeldirection = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType_IsValid(val))) {
            _internal_set_bcs_rlwheeldirection(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double bcs_frwheelspd = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_bcs_frwheelspd(&has_bits);
          bcs_frwheelspd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionType bcs_frwheeldirection = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType_IsValid(val))) {
            _internal_set_bcs_frwheeldirection(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double bcs_flwheelspd = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_bcs_flwheelspd(&has_bits);
          bcs_flwheelspd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionType bcs_flwheeldirection = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType_IsValid(val))) {
            _internal_set_bcs_flwheeldirection(static_cast<::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_bcs_3_308::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_bcs_3_308)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheelspdvdType bcs_rrwheelspdvd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bcs_rrwheelspdvd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionvdType bcs_rrwheeldirectionvd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bcs_rrwheeldirectionvd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheelspdvdType bcs_rlwheelspdvd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_bcs_rlwheelspdvd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionvdType bcs_rlwheeldirectionvd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_bcs_rlwheeldirectionvd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheelspdvdType bcs_frwheelspdvd = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_bcs_frwheelspdvd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionvdType bcs_frwheeldirectionvd = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_bcs_frwheeldirectionvd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheelspdvdType bcs_flwheelspdvd = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_bcs_flwheelspdvd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionvdType bcs_flwheeldirectionvd = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_bcs_flwheeldirectionvd(), target);
  }

  // optional double bcs_rrwheelspd = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_bcs_rrwheelspd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionType bcs_rrwheeldirection = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_bcs_rrwheeldirection(), target);
  }

  // optional double bcs_rlwheelspd = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_bcs_rlwheelspd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionType bcs_rlwheeldirection = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_bcs_rlwheeldirection(), target);
  }

  // optional double bcs_frwheelspd = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_bcs_frwheelspd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionType bcs_frwheeldirection = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_bcs_frwheeldirection(), target);
  }

  // optional double bcs_flwheelspd = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_bcs_flwheelspd(), target);
  }

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionType bcs_flwheeldirection = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_bcs_flwheeldirection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_bcs_3_308)
  return target;
}

size_t Scu_bcs_3_308::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_bcs_3_308)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheelspdvdType bcs_rrwheelspdvd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_rrwheelspdvd());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionvdType bcs_rrwheeldirectionvd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_rrwheeldirectionvd());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheelspdvdType bcs_rlwheelspdvd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_rlwheelspdvd());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionvdType bcs_rlwheeldirectionvd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_rlwheeldirectionvd());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheelspdvdType bcs_frwheelspdvd = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_frwheelspdvd());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionvdType bcs_frwheeldirectionvd = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_frwheeldirectionvd());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheelspdvdType bcs_flwheelspdvd = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_flwheelspdvd());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionvdType bcs_flwheeldirectionvd = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_flwheeldirectionvd());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double bcs_rrwheelspd = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double bcs_rlwheelspd = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionType bcs_rrwheeldirection = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_rrwheeldirection());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionType bcs_rlwheeldirection = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_rlwheeldirection());
    }

    // optional double bcs_frwheelspd = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double bcs_flwheelspd = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionType bcs_frwheeldirection = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_frwheeldirection());
    }

    // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionType bcs_flwheeldirection = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_flwheeldirection());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_bcs_3_308::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_bcs_3_308)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_bcs_3_308* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_bcs_3_308>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_bcs_3_308)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_bcs_3_308)
    MergeFrom(*source);
  }
}

void Scu_bcs_3_308::MergeFrom(const Scu_bcs_3_308& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_bcs_3_308)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bcs_rrwheelspdvd_ = from.bcs_rrwheelspdvd_;
    }
    if (cached_has_bits & 0x00000002u) {
      bcs_rrwheeldirectionvd_ = from.bcs_rrwheeldirectionvd_;
    }
    if (cached_has_bits & 0x00000004u) {
      bcs_rlwheelspdvd_ = from.bcs_rlwheelspdvd_;
    }
    if (cached_has_bits & 0x00000008u) {
      bcs_rlwheeldirectionvd_ = from.bcs_rlwheeldirectionvd_;
    }
    if (cached_has_bits & 0x00000010u) {
      bcs_frwheelspdvd_ = from.bcs_frwheelspdvd_;
    }
    if (cached_has_bits & 0x00000020u) {
      bcs_frwheeldirectionvd_ = from.bcs_frwheeldirectionvd_;
    }
    if (cached_has_bits & 0x00000040u) {
      bcs_flwheelspdvd_ = from.bcs_flwheelspdvd_;
    }
    if (cached_has_bits & 0x00000080u) {
      bcs_flwheeldirectionvd_ = from.bcs_flwheeldirectionvd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bcs_rrwheelspd_ = from.bcs_rrwheelspd_;
    }
    if (cached_has_bits & 0x00000200u) {
      bcs_rlwheelspd_ = from.bcs_rlwheelspd_;
    }
    if (cached_has_bits & 0x00000400u) {
      bcs_rrwheeldirection_ = from.bcs_rrwheeldirection_;
    }
    if (cached_has_bits & 0x00000800u) {
      bcs_rlwheeldirection_ = from.bcs_rlwheeldirection_;
    }
    if (cached_has_bits & 0x00001000u) {
      bcs_frwheelspd_ = from.bcs_frwheelspd_;
    }
    if (cached_has_bits & 0x00002000u) {
      bcs_flwheelspd_ = from.bcs_flwheelspd_;
    }
    if (cached_has_bits & 0x00004000u) {
      bcs_frwheeldirection_ = from.bcs_frwheeldirection_;
    }
    if (cached_has_bits & 0x00008000u) {
      bcs_flwheeldirection_ = from.bcs_flwheeldirection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_bcs_3_308::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_bcs_3_308)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_bcs_3_308::CopyFrom(const Scu_bcs_3_308& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_bcs_3_308)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_bcs_3_308::IsInitialized() const {
  return true;
}

void Scu_bcs_3_308::InternalSwap(Scu_bcs_3_308* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bcs_rrwheelspdvd_, other->bcs_rrwheelspdvd_);
  swap(bcs_rrwheeldirectionvd_, other->bcs_rrwheeldirectionvd_);
  swap(bcs_rlwheelspdvd_, other->bcs_rlwheelspdvd_);
  swap(bcs_rlwheeldirectionvd_, other->bcs_rlwheeldirectionvd_);
  swap(bcs_frwheelspdvd_, other->bcs_frwheelspdvd_);
  swap(bcs_frwheeldirectionvd_, other->bcs_frwheeldirectionvd_);
  swap(bcs_flwheelspdvd_, other->bcs_flwheelspdvd_);
  swap(bcs_flwheeldirectionvd_, other->bcs_flwheeldirectionvd_);
  swap(bcs_rrwheelspd_, other->bcs_rrwheelspd_);
  swap(bcs_rlwheelspd_, other->bcs_rlwheelspd_);
  swap(bcs_rrwheeldirection_, other->bcs_rrwheeldirection_);
  swap(bcs_rlwheeldirection_, other->bcs_rlwheeldirection_);
  swap(bcs_frwheelspd_, other->bcs_frwheelspd_);
  swap(bcs_flwheelspd_, other->bcs_flwheelspd_);
  swap(bcs_frwheeldirection_, other->bcs_frwheeldirection_);
  swap(bcs_flwheeldirection_, other->bcs_flwheeldirection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_bcs_3_308::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pc_epb_203::InitAsDefaultInstance() {
}
class Pc_epb_203::_Internal {
 public:
  using HasBits = decltype(std::declval<Pc_epb_203>()._has_bits_);
  static void set_has_pc_epbreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pc_epbenable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Pc_epb_203::Pc_epb_203()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Pc_epb_203)
}
Pc_epb_203::Pc_epb_203(const Pc_epb_203& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pc_epbreq_, &from.pc_epbreq_,
    static_cast<size_t>(reinterpret_cast<char*>(&pc_epbenable_) -
    reinterpret_cast<char*>(&pc_epbreq_)) + sizeof(pc_epbenable_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Pc_epb_203)
}

void Pc_epb_203::SharedCtor() {
  ::memset(&pc_epbreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pc_epbenable_) -
      reinterpret_cast<char*>(&pc_epbreq_)) + sizeof(pc_epbenable_));
}

Pc_epb_203::~Pc_epb_203() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Pc_epb_203)
  SharedDtor();
}

void Pc_epb_203::SharedDtor() {
}

void Pc_epb_203::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pc_epb_203& Pc_epb_203::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pc_epb_203_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Pc_epb_203::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Pc_epb_203)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pc_epbreq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pc_epbenable_) -
        reinterpret_cast<char*>(&pc_epbreq_)) + sizeof(pc_epbenable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Pc_epb_203::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Pc_epb_203.Pc_epbreqType pc_epbreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_epb_203_Pc_epbreqType_IsValid(val))) {
            _internal_set_pc_epbreq(static_cast<::apollo::canbus::Pc_epb_203_Pc_epbreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_epb_203.Pc_epbenableType pc_epbenable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_epb_203_Pc_epbenableType_IsValid(val))) {
            _internal_set_pc_epbenable(static_cast<::apollo::canbus::Pc_epb_203_Pc_epbenableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pc_epb_203::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Pc_epb_203)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Pc_epb_203.Pc_epbreqType pc_epbreq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pc_epbreq(), target);
  }

  // optional .apollo.canbus.Pc_epb_203.Pc_epbenableType pc_epbenable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pc_epbenable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Pc_epb_203)
  return target;
}

size_t Pc_epb_203::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Pc_epb_203)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.canbus.Pc_epb_203.Pc_epbreqType pc_epbreq = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_epbreq());
    }

    // optional .apollo.canbus.Pc_epb_203.Pc_epbenableType pc_epbenable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_epbenable());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pc_epb_203::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Pc_epb_203)
  GOOGLE_DCHECK_NE(&from, this);
  const Pc_epb_203* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pc_epb_203>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Pc_epb_203)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Pc_epb_203)
    MergeFrom(*source);
  }
}

void Pc_epb_203::MergeFrom(const Pc_epb_203& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Pc_epb_203)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pc_epbreq_ = from.pc_epbreq_;
    }
    if (cached_has_bits & 0x00000002u) {
      pc_epbenable_ = from.pc_epbenable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pc_epb_203::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Pc_epb_203)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pc_epb_203::CopyFrom(const Pc_epb_203& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Pc_epb_203)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pc_epb_203::IsInitialized() const {
  return true;
}

void Pc_epb_203::InternalSwap(Pc_epb_203* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pc_epbreq_, other->pc_epbreq_);
  swap(pc_epbenable_, other->pc_epbenable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pc_epb_203::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pc_bcs_202::InitAsDefaultInstance() {
}
class Pc_bcs_202::_Internal {
 public:
  using HasBits = decltype(std::declval<Pc_bcs_202>()._has_bits_);
  static void set_has_pc_brkpedreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pc_brkpedenable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Pc_bcs_202::Pc_bcs_202()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Pc_bcs_202)
}
Pc_bcs_202::Pc_bcs_202(const Pc_bcs_202& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pc_brkpedreq_, &from.pc_brkpedreq_,
    static_cast<size_t>(reinterpret_cast<char*>(&pc_brkpedenable_) -
    reinterpret_cast<char*>(&pc_brkpedreq_)) + sizeof(pc_brkpedenable_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Pc_bcs_202)
}

void Pc_bcs_202::SharedCtor() {
  ::memset(&pc_brkpedreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pc_brkpedenable_) -
      reinterpret_cast<char*>(&pc_brkpedreq_)) + sizeof(pc_brkpedenable_));
}

Pc_bcs_202::~Pc_bcs_202() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Pc_bcs_202)
  SharedDtor();
}

void Pc_bcs_202::SharedDtor() {
}

void Pc_bcs_202::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pc_bcs_202& Pc_bcs_202::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pc_bcs_202_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Pc_bcs_202::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Pc_bcs_202)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pc_brkpedreq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pc_brkpedenable_) -
        reinterpret_cast<char*>(&pc_brkpedreq_)) + sizeof(pc_brkpedenable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Pc_bcs_202::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double pc_brkpedreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_pc_brkpedreq(&has_bits);
          pc_brkpedreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_bcs_202.Pc_brkpedenableType pc_brkpedenable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType_IsValid(val))) {
            _internal_set_pc_brkpedenable(static_cast<::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pc_bcs_202::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Pc_bcs_202)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double pc_brkpedreq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pc_brkpedreq(), target);
  }

  // optional .apollo.canbus.Pc_bcs_202.Pc_brkpedenableType pc_brkpedenable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pc_brkpedenable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Pc_bcs_202)
  return target;
}

size_t Pc_bcs_202::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Pc_bcs_202)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double pc_brkpedreq = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Pc_bcs_202.Pc_brkpedenableType pc_brkpedenable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_brkpedenable());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pc_bcs_202::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Pc_bcs_202)
  GOOGLE_DCHECK_NE(&from, this);
  const Pc_bcs_202* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pc_bcs_202>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Pc_bcs_202)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Pc_bcs_202)
    MergeFrom(*source);
  }
}

void Pc_bcs_202::MergeFrom(const Pc_bcs_202& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Pc_bcs_202)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pc_brkpedreq_ = from.pc_brkpedreq_;
    }
    if (cached_has_bits & 0x00000002u) {
      pc_brkpedenable_ = from.pc_brkpedenable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pc_bcs_202::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Pc_bcs_202)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pc_bcs_202::CopyFrom(const Pc_bcs_202& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Pc_bcs_202)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pc_bcs_202::IsInitialized() const {
  return true;
}

void Pc_bcs_202::InternalSwap(Pc_bcs_202* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pc_brkpedreq_, other->pc_brkpedreq_);
  swap(pc_brkpedenable_, other->pc_brkpedenable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pc_bcs_202::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pc_vcu_205::InitAsDefaultInstance() {
}
class Pc_vcu_205::_Internal {
 public:
  using HasBits = decltype(std::declval<Pc_vcu_205>()._has_bits_);
  static void set_has_pc_accpedreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pc_accpedenable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pc_torqreq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pc_torqenable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pc_gearreq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pc_gearenable(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Pc_vcu_205::Pc_vcu_205()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Pc_vcu_205)
}
Pc_vcu_205::Pc_vcu_205(const Pc_vcu_205& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pc_accpedreq_, &from.pc_accpedreq_,
    static_cast<size_t>(reinterpret_cast<char*>(&pc_gearenable_) -
    reinterpret_cast<char*>(&pc_accpedreq_)) + sizeof(pc_gearenable_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Pc_vcu_205)
}

void Pc_vcu_205::SharedCtor() {
  ::memset(&pc_accpedreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pc_gearenable_) -
      reinterpret_cast<char*>(&pc_accpedreq_)) + sizeof(pc_gearenable_));
}

Pc_vcu_205::~Pc_vcu_205() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Pc_vcu_205)
  SharedDtor();
}

void Pc_vcu_205::SharedDtor() {
}

void Pc_vcu_205::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pc_vcu_205& Pc_vcu_205::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pc_vcu_205_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Pc_vcu_205::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Pc_vcu_205)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&pc_accpedreq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pc_gearenable_) -
        reinterpret_cast<char*>(&pc_accpedreq_)) + sizeof(pc_gearenable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Pc_vcu_205::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double pc_accpedreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_pc_accpedreq(&has_bits);
          pc_accpedreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_vcu_205.Pc_accpedenableType pc_accpedenable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_vcu_205_Pc_accpedenableType_IsValid(val))) {
            _internal_set_pc_accpedenable(static_cast<::apollo::canbus::Pc_vcu_205_Pc_accpedenableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double pc_torqreq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_pc_torqreq(&has_bits);
          pc_torqreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_vcu_205.Pc_torqenableType pc_torqenable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_vcu_205_Pc_torqenableType_IsValid(val))) {
            _internal_set_pc_torqenable(static_cast<::apollo::canbus::Pc_vcu_205_Pc_torqenableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_vcu_205.Pc_gearreqType pc_gearreq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_vcu_205_Pc_gearreqType_IsValid(val))) {
            _internal_set_pc_gearreq(static_cast<::apollo::canbus::Pc_vcu_205_Pc_gearreqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_vcu_205.Pc_gearenableType pc_gearenable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_vcu_205_Pc_gearenableType_IsValid(val))) {
            _internal_set_pc_gearenable(static_cast<::apollo::canbus::Pc_vcu_205_Pc_gearenableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pc_vcu_205::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Pc_vcu_205)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double pc_accpedreq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_pc_accpedreq(), target);
  }

  // optional .apollo.canbus.Pc_vcu_205.Pc_accpedenableType pc_accpedenable = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pc_accpedenable(), target);
  }

  // optional double pc_torqreq = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pc_torqreq(), target);
  }

  // optional .apollo.canbus.Pc_vcu_205.Pc_torqenableType pc_torqenable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pc_torqenable(), target);
  }

  // optional .apollo.canbus.Pc_vcu_205.Pc_gearreqType pc_gearreq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_pc_gearreq(), target);
  }

  // optional .apollo.canbus.Pc_vcu_205.Pc_gearenableType pc_gearenable = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_pc_gearenable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Pc_vcu_205)
  return target;
}

size_t Pc_vcu_205::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Pc_vcu_205)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double pc_accpedreq = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pc_torqreq = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Pc_vcu_205.Pc_accpedenableType pc_accpedenable = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_accpedenable());
    }

    // optional .apollo.canbus.Pc_vcu_205.Pc_torqenableType pc_torqenable = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_torqenable());
    }

    // optional .apollo.canbus.Pc_vcu_205.Pc_gearreqType pc_gearreq = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_gearreq());
    }

    // optional .apollo.canbus.Pc_vcu_205.Pc_gearenableType pc_gearenable = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_gearenable());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pc_vcu_205::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Pc_vcu_205)
  GOOGLE_DCHECK_NE(&from, this);
  const Pc_vcu_205* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pc_vcu_205>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Pc_vcu_205)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Pc_vcu_205)
    MergeFrom(*source);
  }
}

void Pc_vcu_205::MergeFrom(const Pc_vcu_205& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Pc_vcu_205)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      pc_accpedreq_ = from.pc_accpedreq_;
    }
    if (cached_has_bits & 0x00000002u) {
      pc_torqreq_ = from.pc_torqreq_;
    }
    if (cached_has_bits & 0x00000004u) {
      pc_accpedenable_ = from.pc_accpedenable_;
    }
    if (cached_has_bits & 0x00000008u) {
      pc_torqenable_ = from.pc_torqenable_;
    }
    if (cached_has_bits & 0x00000010u) {
      pc_gearreq_ = from.pc_gearreq_;
    }
    if (cached_has_bits & 0x00000020u) {
      pc_gearenable_ = from.pc_gearenable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pc_vcu_205::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Pc_vcu_205)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pc_vcu_205::CopyFrom(const Pc_vcu_205& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Pc_vcu_205)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pc_vcu_205::IsInitialized() const {
  return true;
}

void Pc_vcu_205::InternalSwap(Pc_vcu_205* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pc_accpedreq_, other->pc_accpedreq_);
  swap(pc_torqreq_, other->pc_torqreq_);
  swap(pc_accpedenable_, other->pc_accpedenable_);
  swap(pc_torqenable_, other->pc_torqenable_);
  swap(pc_gearreq_, other->pc_gearreq_);
  swap(pc_gearenable_, other->pc_gearenable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pc_vcu_205::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pc_eps_204::InitAsDefaultInstance() {
}
class Pc_eps_204::_Internal {
 public:
  using HasBits = decltype(std::declval<Pc_eps_204>()._has_bits_);
  static void set_has_pc_steerspdreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pc_steerenable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pc_steerangreq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Pc_eps_204::Pc_eps_204()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Pc_eps_204)
}
Pc_eps_204::Pc_eps_204(const Pc_eps_204& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pc_steerspdreq_, &from.pc_steerspdreq_,
    static_cast<size_t>(reinterpret_cast<char*>(&pc_steerangreq_) -
    reinterpret_cast<char*>(&pc_steerspdreq_)) + sizeof(pc_steerangreq_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Pc_eps_204)
}

void Pc_eps_204::SharedCtor() {
  ::memset(&pc_steerspdreq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pc_steerangreq_) -
      reinterpret_cast<char*>(&pc_steerspdreq_)) + sizeof(pc_steerangreq_));
}

Pc_eps_204::~Pc_eps_204() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Pc_eps_204)
  SharedDtor();
}

void Pc_eps_204::SharedDtor() {
}

void Pc_eps_204::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pc_eps_204& Pc_eps_204::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pc_eps_204_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Pc_eps_204::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Pc_eps_204)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pc_steerspdreq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pc_steerangreq_) -
        reinterpret_cast<char*>(&pc_steerspdreq_)) + sizeof(pc_steerangreq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Pc_eps_204::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pc_steerspdreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pc_steerspdreq(&has_bits);
          pc_steerspdreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_eps_204.Pc_steerenableType pc_steerenable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Pc_eps_204_Pc_steerenableType_IsValid(val))) {
            _internal_set_pc_steerenable(static_cast<::apollo::canbus::Pc_eps_204_Pc_steerenableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double pc_steerangreq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_pc_steerangreq(&has_bits);
          pc_steerangreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pc_eps_204::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Pc_eps_204)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pc_steerspdreq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pc_steerspdreq(), target);
  }

  // optional .apollo.canbus.Pc_eps_204.Pc_steerenableType pc_steerenable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pc_steerenable(), target);
  }

  // optional double pc_steerangreq = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pc_steerangreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Pc_eps_204)
  return target;
}

size_t Pc_eps_204::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Pc_eps_204)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 pc_steerspdreq = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pc_steerspdreq());
    }

    // optional .apollo.canbus.Pc_eps_204.Pc_steerenableType pc_steerenable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pc_steerenable());
    }

    // optional double pc_steerangreq = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pc_eps_204::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Pc_eps_204)
  GOOGLE_DCHECK_NE(&from, this);
  const Pc_eps_204* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pc_eps_204>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Pc_eps_204)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Pc_eps_204)
    MergeFrom(*source);
  }
}

void Pc_eps_204::MergeFrom(const Pc_eps_204& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Pc_eps_204)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pc_steerspdreq_ = from.pc_steerspdreq_;
    }
    if (cached_has_bits & 0x00000002u) {
      pc_steerenable_ = from.pc_steerenable_;
    }
    if (cached_has_bits & 0x00000004u) {
      pc_steerangreq_ = from.pc_steerangreq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pc_eps_204::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Pc_eps_204)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pc_eps_204::CopyFrom(const Pc_eps_204& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Pc_eps_204)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pc_eps_204::IsInitialized() const {
  return true;
}

void Pc_eps_204::InternalSwap(Pc_eps_204* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pc_steerspdreq_, other->pc_steerspdreq_);
  swap(pc_steerenable_, other->pc_steerenable_);
  swap(pc_steerangreq_, other->pc_steerangreq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pc_eps_204::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_vcu_2_313::InitAsDefaultInstance() {
}
class Scu_vcu_2_313::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_vcu_2_313>()._has_bits_);
  static void set_has_vcu_torqposmax(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcu_torqnegmax(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vcu_torqact(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vcu_engspd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Scu_vcu_2_313::Scu_vcu_2_313()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_vcu_2_313)
}
Scu_vcu_2_313::Scu_vcu_2_313(const Scu_vcu_2_313& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vcu_torqposmax_, &from.vcu_torqposmax_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_engspd_) -
    reinterpret_cast<char*>(&vcu_torqposmax_)) + sizeof(vcu_engspd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_vcu_2_313)
}

void Scu_vcu_2_313::SharedCtor() {
  ::memset(&vcu_torqposmax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vcu_engspd_) -
      reinterpret_cast<char*>(&vcu_torqposmax_)) + sizeof(vcu_engspd_));
}

Scu_vcu_2_313::~Scu_vcu_2_313() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_vcu_2_313)
  SharedDtor();
}

void Scu_vcu_2_313::SharedDtor() {
}

void Scu_vcu_2_313::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_vcu_2_313& Scu_vcu_2_313::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_vcu_2_313_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_vcu_2_313::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_vcu_2_313)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&vcu_torqposmax_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_engspd_) -
        reinterpret_cast<char*>(&vcu_torqposmax_)) + sizeof(vcu_engspd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_vcu_2_313::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double vcu_torqposmax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_vcu_torqposmax(&has_bits);
          vcu_torqposmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vcu_torqnegmax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_vcu_torqnegmax(&has_bits);
          vcu_torqnegmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vcu_torqact = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_vcu_torqact(&has_bits);
          vcu_torqact_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 vcu_engspd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vcu_engspd(&has_bits);
          vcu_engspd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_vcu_2_313::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_vcu_2_313)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double vcu_torqposmax = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_vcu_torqposmax(), target);
  }

  // optional double vcu_torqnegmax = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_vcu_torqnegmax(), target);
  }

  // optional double vcu_torqact = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_vcu_torqact(), target);
  }

  // optional int32 vcu_engspd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vcu_engspd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_vcu_2_313)
  return target;
}

size_t Scu_vcu_2_313::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_vcu_2_313)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double vcu_torqposmax = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double vcu_torqnegmax = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double vcu_torqact = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 vcu_engspd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vcu_engspd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_vcu_2_313::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_vcu_2_313)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_vcu_2_313* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_vcu_2_313>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_vcu_2_313)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_vcu_2_313)
    MergeFrom(*source);
  }
}

void Scu_vcu_2_313::MergeFrom(const Scu_vcu_2_313& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_vcu_2_313)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      vcu_torqposmax_ = from.vcu_torqposmax_;
    }
    if (cached_has_bits & 0x00000002u) {
      vcu_torqnegmax_ = from.vcu_torqnegmax_;
    }
    if (cached_has_bits & 0x00000004u) {
      vcu_torqact_ = from.vcu_torqact_;
    }
    if (cached_has_bits & 0x00000008u) {
      vcu_engspd_ = from.vcu_engspd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_vcu_2_313::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_vcu_2_313)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_vcu_2_313::CopyFrom(const Scu_vcu_2_313& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_vcu_2_313)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_vcu_2_313::IsInitialized() const {
  return true;
}

void Scu_vcu_2_313::InternalSwap(Scu_vcu_2_313* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vcu_torqposmax_, other->vcu_torqposmax_);
  swap(vcu_torqnegmax_, other->vcu_torqnegmax_);
  swap(vcu_torqact_, other->vcu_torqact_);
  swap(vcu_engspd_, other->vcu_engspd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_vcu_2_313::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_1_301::InitAsDefaultInstance() {
}
class Scu_1_301::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_1_301>()._has_bits_);
  static void set_has_vin16(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scu_stopbutst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scu_drvmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scu_faultst(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Scu_1_301::Scu_1_301()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_1_301)
}
Scu_1_301::Scu_1_301(const Scu_1_301& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vin16_, &from.vin16_,
    static_cast<size_t>(reinterpret_cast<char*>(&scu_faultst_) -
    reinterpret_cast<char*>(&vin16_)) + sizeof(scu_faultst_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_1_301)
}

void Scu_1_301::SharedCtor() {
  ::memset(&vin16_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scu_faultst_) -
      reinterpret_cast<char*>(&vin16_)) + sizeof(scu_faultst_));
}

Scu_1_301::~Scu_1_301() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_1_301)
  SharedDtor();
}

void Scu_1_301::SharedDtor() {
}

void Scu_1_301::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_1_301& Scu_1_301::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_1_301_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_1_301::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_1_301)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&vin16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scu_faultst_) -
        reinterpret_cast<char*>(&vin16_)) + sizeof(scu_faultst_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_1_301::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 vin16 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vin16(&has_bits);
          vin16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_1_301.Scu_stopbutstType scu_stopbutst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_1_301_Scu_stopbutstType_IsValid(val))) {
            _internal_set_scu_stopbutst(static_cast<::apollo::canbus::Scu_1_301_Scu_stopbutstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_1_301.Scu_drvmodeType scu_drvmode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_1_301_Scu_drvmodeType_IsValid(val))) {
            _internal_set_scu_drvmode(static_cast<::apollo::canbus::Scu_1_301_Scu_drvmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_1_301.Scu_faultstType scu_faultst = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_1_301_Scu_faultstType_IsValid(val))) {
            _internal_set_scu_faultst(static_cast<::apollo::canbus::Scu_1_301_Scu_faultstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_1_301::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_1_301)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 vin16 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vin16(), target);
  }

  // optional .apollo.canbus.Scu_1_301.Scu_stopbutstType scu_stopbutst = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_scu_stopbutst(), target);
  }

  // optional .apollo.canbus.Scu_1_301.Scu_drvmodeType scu_drvmode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_scu_drvmode(), target);
  }

  // optional .apollo.canbus.Scu_1_301.Scu_faultstType scu_faultst = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_scu_faultst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_1_301)
  return target;
}

size_t Scu_1_301::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_1_301)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 vin16 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin16());
    }

    // optional .apollo.canbus.Scu_1_301.Scu_stopbutstType scu_stopbutst = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scu_stopbutst());
    }

    // optional .apollo.canbus.Scu_1_301.Scu_drvmodeType scu_drvmode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scu_drvmode());
    }

    // optional .apollo.canbus.Scu_1_301.Scu_faultstType scu_faultst = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scu_faultst());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_1_301::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_1_301)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_1_301* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_1_301>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_1_301)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_1_301)
    MergeFrom(*source);
  }
}

void Scu_1_301::MergeFrom(const Scu_1_301& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_1_301)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      vin16_ = from.vin16_;
    }
    if (cached_has_bits & 0x00000002u) {
      scu_stopbutst_ = from.scu_stopbutst_;
    }
    if (cached_has_bits & 0x00000004u) {
      scu_drvmode_ = from.scu_drvmode_;
    }
    if (cached_has_bits & 0x00000008u) {
      scu_faultst_ = from.scu_faultst_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_1_301::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_1_301)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_1_301::CopyFrom(const Scu_1_301& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_1_301)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_1_301::IsInitialized() const {
  return true;
}

void Scu_1_301::InternalSwap(Scu_1_301* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vin16_, other->vin16_);
  swap(scu_stopbutst_, other->scu_stopbutst_);
  swap(scu_drvmode_, other->scu_drvmode_);
  swap(scu_faultst_, other->scu_faultst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_1_301::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_2_302::InitAsDefaultInstance() {
}
class Scu_2_302::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_2_302>()._has_bits_);
  static void set_has_vin07(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vin06(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vin05(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vin04(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vin03(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vin02(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vin01(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vin00(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Scu_2_302::Scu_2_302()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_2_302)
}
Scu_2_302::Scu_2_302(const Scu_2_302& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vin07_, &from.vin07_,
    static_cast<size_t>(reinterpret_cast<char*>(&vin00_) -
    reinterpret_cast<char*>(&vin07_)) + sizeof(vin00_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_2_302)
}

void Scu_2_302::SharedCtor() {
  ::memset(&vin07_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vin00_) -
      reinterpret_cast<char*>(&vin07_)) + sizeof(vin00_));
}

Scu_2_302::~Scu_2_302() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_2_302)
  SharedDtor();
}

void Scu_2_302::SharedDtor() {
}

void Scu_2_302::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_2_302& Scu_2_302::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_2_302_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_2_302::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_2_302)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vin07_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vin00_) -
        reinterpret_cast<char*>(&vin07_)) + sizeof(vin00_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_2_302::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 vin07 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vin07(&has_bits);
          vin07_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin06 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vin06(&has_bits);
          vin06_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin05 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vin05(&has_bits);
          vin05_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin04 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vin04(&has_bits);
          vin04_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin03 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_vin03(&has_bits);
          vin03_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin02 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_vin02(&has_bits);
          vin02_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin01 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_vin01(&has_bits);
          vin01_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin00 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vin00(&has_bits);
          vin00_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_2_302::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_2_302)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 vin07 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vin07(), target);
  }

  // optional int32 vin06 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vin06(), target);
  }

  // optional int32 vin05 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vin05(), target);
  }

  // optional int32 vin04 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vin04(), target);
  }

  // optional int32 vin03 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vin03(), target);
  }

  // optional int32 vin02 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vin02(), target);
  }

  // optional int32 vin01 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vin01(), target);
  }

  // optional int32 vin00 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_vin00(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_2_302)
  return target;
}

size_t Scu_2_302::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_2_302)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 vin07 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin07());
    }

    // optional int32 vin06 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin06());
    }

    // optional int32 vin05 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin05());
    }

    // optional int32 vin04 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin04());
    }

    // optional int32 vin03 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin03());
    }

    // optional int32 vin02 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin02());
    }

    // optional int32 vin01 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin01());
    }

    // optional int32 vin00 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin00());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_2_302::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_2_302)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_2_302* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_2_302>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_2_302)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_2_302)
    MergeFrom(*source);
  }
}

void Scu_2_302::MergeFrom(const Scu_2_302& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_2_302)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vin07_ = from.vin07_;
    }
    if (cached_has_bits & 0x00000002u) {
      vin06_ = from.vin06_;
    }
    if (cached_has_bits & 0x00000004u) {
      vin05_ = from.vin05_;
    }
    if (cached_has_bits & 0x00000008u) {
      vin04_ = from.vin04_;
    }
    if (cached_has_bits & 0x00000010u) {
      vin03_ = from.vin03_;
    }
    if (cached_has_bits & 0x00000020u) {
      vin02_ = from.vin02_;
    }
    if (cached_has_bits & 0x00000040u) {
      vin01_ = from.vin01_;
    }
    if (cached_has_bits & 0x00000080u) {
      vin00_ = from.vin00_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_2_302::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_2_302)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_2_302::CopyFrom(const Scu_2_302& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_2_302)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_2_302::IsInitialized() const {
  return true;
}

void Scu_2_302::InternalSwap(Scu_2_302* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vin07_, other->vin07_);
  swap(vin06_, other->vin06_);
  swap(vin05_, other->vin05_);
  swap(vin04_, other->vin04_);
  swap(vin03_, other->vin03_);
  swap(vin02_, other->vin02_);
  swap(vin01_, other->vin01_);
  swap(vin00_, other->vin00_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_2_302::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_3_303::InitAsDefaultInstance() {
}
class Scu_3_303::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_3_303>()._has_bits_);
  static void set_has_vin15(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vin14(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vin13(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vin12(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vin11(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vin10(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vin09(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vin08(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Scu_3_303::Scu_3_303()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_3_303)
}
Scu_3_303::Scu_3_303(const Scu_3_303& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vin15_, &from.vin15_,
    static_cast<size_t>(reinterpret_cast<char*>(&vin08_) -
    reinterpret_cast<char*>(&vin15_)) + sizeof(vin08_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_3_303)
}

void Scu_3_303::SharedCtor() {
  ::memset(&vin15_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vin08_) -
      reinterpret_cast<char*>(&vin15_)) + sizeof(vin08_));
}

Scu_3_303::~Scu_3_303() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_3_303)
  SharedDtor();
}

void Scu_3_303::SharedDtor() {
}

void Scu_3_303::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_3_303& Scu_3_303::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_3_303_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_3_303::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_3_303)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vin15_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vin08_) -
        reinterpret_cast<char*>(&vin15_)) + sizeof(vin08_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_3_303::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 vin15 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vin15(&has_bits);
          vin15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin14 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vin14(&has_bits);
          vin14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vin13(&has_bits);
          vin13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin12 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_vin12(&has_bits);
          vin12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin11 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_vin11(&has_bits);
          vin11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin10 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_vin10(&has_bits);
          vin10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin09 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_vin09(&has_bits);
          vin09_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 vin08 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vin08(&has_bits);
          vin08_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_3_303::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_3_303)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 vin15 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vin15(), target);
  }

  // optional int32 vin14 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vin14(), target);
  }

  // optional int32 vin13 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vin13(), target);
  }

  // optional int32 vin12 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vin12(), target);
  }

  // optional int32 vin11 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vin11(), target);
  }

  // optional int32 vin10 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_vin10(), target);
  }

  // optional int32 vin09 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_vin09(), target);
  }

  // optional int32 vin08 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_vin08(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_3_303)
  return target;
}

size_t Scu_3_303::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_3_303)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 vin15 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin15());
    }

    // optional int32 vin14 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin14());
    }

    // optional int32 vin13 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin13());
    }

    // optional int32 vin12 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin12());
    }

    // optional int32 vin11 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin11());
    }

    // optional int32 vin10 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin10());
    }

    // optional int32 vin09 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin09());
    }

    // optional int32 vin08 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vin08());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_3_303::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_3_303)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_3_303* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_3_303>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_3_303)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_3_303)
    MergeFrom(*source);
  }
}

void Scu_3_303::MergeFrom(const Scu_3_303& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_3_303)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vin15_ = from.vin15_;
    }
    if (cached_has_bits & 0x00000002u) {
      vin14_ = from.vin14_;
    }
    if (cached_has_bits & 0x00000004u) {
      vin13_ = from.vin13_;
    }
    if (cached_has_bits & 0x00000008u) {
      vin12_ = from.vin12_;
    }
    if (cached_has_bits & 0x00000010u) {
      vin11_ = from.vin11_;
    }
    if (cached_has_bits & 0x00000020u) {
      vin10_ = from.vin10_;
    }
    if (cached_has_bits & 0x00000040u) {
      vin09_ = from.vin09_;
    }
    if (cached_has_bits & 0x00000080u) {
      vin08_ = from.vin08_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_3_303::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_3_303)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_3_303::CopyFrom(const Scu_3_303& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_3_303)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_3_303::IsInitialized() const {
  return true;
}

void Scu_3_303::InternalSwap(Scu_3_303* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vin15_, other->vin15_);
  swap(vin14_, other->vin14_);
  swap(vin13_, other->vin13_);
  swap(vin12_, other->vin12_);
  swap(vin11_, other->vin11_);
  swap(vin10_, other->vin10_);
  swap(vin09_, other->vin09_);
  swap(vin08_, other->vin08_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_3_303::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_bcm_304::InitAsDefaultInstance() {
}
class Scu_bcm_304::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_bcm_304>()._has_bits_);
  static void set_has_bcm_vehreversest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bcm_rightturnlampst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bcm_rearfoglampst(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bcm_parkinglampst(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bcm_lowbeamst(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bcm_leftturnlampst(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bcm_keyst(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bcm_hornst(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bcm_highbeamst(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bcm_hazardlampst(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bcm_frontfoglampst(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bcm_brakelightswitchst(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Scu_bcm_304::Scu_bcm_304()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_bcm_304)
}
Scu_bcm_304::Scu_bcm_304(const Scu_bcm_304& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bcm_vehreversest_, &from.bcm_vehreversest_,
    static_cast<size_t>(reinterpret_cast<char*>(&bcm_brakelightswitchst_) -
    reinterpret_cast<char*>(&bcm_vehreversest_)) + sizeof(bcm_brakelightswitchst_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_bcm_304)
}

void Scu_bcm_304::SharedCtor() {
  ::memset(&bcm_vehreversest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bcm_brakelightswitchst_) -
      reinterpret_cast<char*>(&bcm_vehreversest_)) + sizeof(bcm_brakelightswitchst_));
}

Scu_bcm_304::~Scu_bcm_304() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_bcm_304)
  SharedDtor();
}

void Scu_bcm_304::SharedDtor() {
}

void Scu_bcm_304::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_bcm_304& Scu_bcm_304::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_bcm_304_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_bcm_304::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_bcm_304)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bcm_vehreversest_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bcm_hornst_) -
        reinterpret_cast<char*>(&bcm_vehreversest_)) + sizeof(bcm_hornst_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&bcm_highbeamst_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bcm_brakelightswitchst_) -
        reinterpret_cast<char*>(&bcm_highbeamst_)) + sizeof(bcm_brakelightswitchst_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_bcm_304::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Scu_bcm_304.Bcm_vehreversestType bcm_vehreversest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType_IsValid(val))) {
            _internal_set_bcm_vehreversest(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_rightturnlampstType bcm_rightturnlampst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType_IsValid(val))) {
            _internal_set_bcm_rightturnlampst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_rearfoglampstType bcm_rearfoglampst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType_IsValid(val))) {
            _internal_set_bcm_rearfoglampst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_parkinglampstType bcm_parkinglampst = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType_IsValid(val))) {
            _internal_set_bcm_parkinglampst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_lowbeamstType bcm_lowbeamst = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType_IsValid(val))) {
            _internal_set_bcm_lowbeamst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_leftturnlampstType bcm_leftturnlampst = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType_IsValid(val))) {
            _internal_set_bcm_leftturnlampst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_keystType bcm_keyst = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_keystType_IsValid(val))) {
            _internal_set_bcm_keyst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_keystType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_hornstType bcm_hornst = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_hornstType_IsValid(val))) {
            _internal_set_bcm_hornst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_hornstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_highbeamstType bcm_highbeamst = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType_IsValid(val))) {
            _internal_set_bcm_highbeamst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_hazardlampstType bcm_hazardlampst = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType_IsValid(val))) {
            _internal_set_bcm_hazardlampst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_frontfoglampstType bcm_frontfoglampst = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType_IsValid(val))) {
            _internal_set_bcm_frontfoglampst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304.Bcm_brakelightswitchstType bcm_brakelightswitchst = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType_IsValid(val))) {
            _internal_set_bcm_brakelightswitchst(static_cast<::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_bcm_304::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_bcm_304)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Scu_bcm_304.Bcm_vehreversestType bcm_vehreversest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bcm_vehreversest(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_rightturnlampstType bcm_rightturnlampst = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bcm_rightturnlampst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_rearfoglampstType bcm_rearfoglampst = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_bcm_rearfoglampst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_parkinglampstType bcm_parkinglampst = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_bcm_parkinglampst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_lowbeamstType bcm_lowbeamst = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_bcm_lowbeamst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_leftturnlampstType bcm_leftturnlampst = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_bcm_leftturnlampst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_keystType bcm_keyst = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_bcm_keyst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_hornstType bcm_hornst = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_bcm_hornst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_highbeamstType bcm_highbeamst = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_bcm_highbeamst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_hazardlampstType bcm_hazardlampst = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_bcm_hazardlampst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_frontfoglampstType bcm_frontfoglampst = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_bcm_frontfoglampst(), target);
  }

  // optional .apollo.canbus.Scu_bcm_304.Bcm_brakelightswitchstType bcm_brakelightswitchst = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_bcm_brakelightswitchst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_bcm_304)
  return target;
}

size_t Scu_bcm_304::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_bcm_304)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Scu_bcm_304.Bcm_vehreversestType bcm_vehreversest = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_vehreversest());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_rightturnlampstType bcm_rightturnlampst = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_rightturnlampst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_rearfoglampstType bcm_rearfoglampst = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_rearfoglampst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_parkinglampstType bcm_parkinglampst = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_parkinglampst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_lowbeamstType bcm_lowbeamst = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_lowbeamst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_leftturnlampstType bcm_leftturnlampst = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_leftturnlampst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_keystType bcm_keyst = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_keyst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_hornstType bcm_hornst = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_hornst());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .apollo.canbus.Scu_bcm_304.Bcm_highbeamstType bcm_highbeamst = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_highbeamst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_hazardlampstType bcm_hazardlampst = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_hazardlampst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_frontfoglampstType bcm_frontfoglampst = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_frontfoglampst());
    }

    // optional .apollo.canbus.Scu_bcm_304.Bcm_brakelightswitchstType bcm_brakelightswitchst = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcm_brakelightswitchst());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_bcm_304::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_bcm_304)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_bcm_304* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_bcm_304>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_bcm_304)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_bcm_304)
    MergeFrom(*source);
  }
}

void Scu_bcm_304::MergeFrom(const Scu_bcm_304& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_bcm_304)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bcm_vehreversest_ = from.bcm_vehreversest_;
    }
    if (cached_has_bits & 0x00000002u) {
      bcm_rightturnlampst_ = from.bcm_rightturnlampst_;
    }
    if (cached_has_bits & 0x00000004u) {
      bcm_rearfoglampst_ = from.bcm_rearfoglampst_;
    }
    if (cached_has_bits & 0x00000008u) {
      bcm_parkinglampst_ = from.bcm_parkinglampst_;
    }
    if (cached_has_bits & 0x00000010u) {
      bcm_lowbeamst_ = from.bcm_lowbeamst_;
    }
    if (cached_has_bits & 0x00000020u) {
      bcm_leftturnlampst_ = from.bcm_leftturnlampst_;
    }
    if (cached_has_bits & 0x00000040u) {
      bcm_keyst_ = from.bcm_keyst_;
    }
    if (cached_has_bits & 0x00000080u) {
      bcm_hornst_ = from.bcm_hornst_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      bcm_highbeamst_ = from.bcm_highbeamst_;
    }
    if (cached_has_bits & 0x00000200u) {
      bcm_hazardlampst_ = from.bcm_hazardlampst_;
    }
    if (cached_has_bits & 0x00000400u) {
      bcm_frontfoglampst_ = from.bcm_frontfoglampst_;
    }
    if (cached_has_bits & 0x00000800u) {
      bcm_brakelightswitchst_ = from.bcm_brakelightswitchst_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_bcm_304::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_bcm_304)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_bcm_304::CopyFrom(const Scu_bcm_304& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_bcm_304)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_bcm_304::IsInitialized() const {
  return true;
}

void Scu_bcm_304::InternalSwap(Scu_bcm_304* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bcm_vehreversest_, other->bcm_vehreversest_);
  swap(bcm_rightturnlampst_, other->bcm_rightturnlampst_);
  swap(bcm_rearfoglampst_, other->bcm_rearfoglampst_);
  swap(bcm_parkinglampst_, other->bcm_parkinglampst_);
  swap(bcm_lowbeamst_, other->bcm_lowbeamst_);
  swap(bcm_leftturnlampst_, other->bcm_leftturnlampst_);
  swap(bcm_keyst_, other->bcm_keyst_);
  swap(bcm_hornst_, other->bcm_hornst_);
  swap(bcm_highbeamst_, other->bcm_highbeamst_);
  swap(bcm_hazardlampst_, other->bcm_hazardlampst_);
  swap(bcm_frontfoglampst_, other->bcm_frontfoglampst_);
  swap(bcm_brakelightswitchst_, other->bcm_brakelightswitchst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_bcm_304::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_bcs_1_306::InitAsDefaultInstance() {
}
class Scu_bcs_1_306::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_bcs_1_306>()._has_bits_);
  static void set_has_bcs_aebavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bcs_cddavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bcs_brkpedact(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bcs_intidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bcs_vdcfaultst(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bcs_vdcactivest(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bcs_absfaultst(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bcs_absactivest(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bcs_faultst(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bcs_drvmode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Scu_bcs_1_306::Scu_bcs_1_306()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_bcs_1_306)
}
Scu_bcs_1_306::Scu_bcs_1_306(const Scu_bcs_1_306& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bcs_aebavailable_, &from.bcs_aebavailable_,
    static_cast<size_t>(reinterpret_cast<char*>(&bcs_drvmode_) -
    reinterpret_cast<char*>(&bcs_aebavailable_)) + sizeof(bcs_drvmode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_bcs_1_306)
}

void Scu_bcs_1_306::SharedCtor() {
  ::memset(&bcs_aebavailable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bcs_drvmode_) -
      reinterpret_cast<char*>(&bcs_aebavailable_)) + sizeof(bcs_drvmode_));
}

Scu_bcs_1_306::~Scu_bcs_1_306() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_bcs_1_306)
  SharedDtor();
}

void Scu_bcs_1_306::SharedDtor() {
}

void Scu_bcs_1_306::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_bcs_1_306& Scu_bcs_1_306::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_bcs_1_306_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_bcs_1_306::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_bcs_1_306)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bcs_aebavailable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bcs_absactivest_) -
        reinterpret_cast<char*>(&bcs_aebavailable_)) + sizeof(bcs_absactivest_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&bcs_faultst_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bcs_drvmode_) -
        reinterpret_cast<char*>(&bcs_faultst_)) + sizeof(bcs_drvmode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_bcs_1_306::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_aebavailableType bcs_aebavailable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType_IsValid(val))) {
            _internal_set_bcs_aebavailable(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_cddavailableType bcs_cddavailable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType_IsValid(val))) {
            _internal_set_bcs_cddavailable(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double bcs_brkpedact = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_bcs_brkpedact(&has_bits);
          bcs_brkpedact_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_intidxType bcs_intidx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType_IsValid(val))) {
            _internal_set_bcs_intidx(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcfaultstType bcs_vdcfaultst = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType_IsValid(val))) {
            _internal_set_bcs_vdcfaultst(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcactivestType bcs_vdcactivest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType_IsValid(val))) {
            _internal_set_bcs_vdcactivest(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_absfaultstType bcs_absfaultst = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType_IsValid(val))) {
            _internal_set_bcs_absfaultst(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_absactivestType bcs_absactivest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType_IsValid(val))) {
            _internal_set_bcs_absactivest(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_faultstType bcs_faultst = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType_IsValid(val))) {
            _internal_set_bcs_faultst(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306.Bcs_drvmodeType bcs_drvmode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType_IsValid(val))) {
            _internal_set_bcs_drvmode(static_cast<::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_bcs_1_306::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_bcs_1_306)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_aebavailableType bcs_aebavailable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bcs_aebavailable(), target);
  }

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_cddavailableType bcs_cddavailable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bcs_cddavailable(), target);
  }

  // optional double bcs_brkpedact = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bcs_brkpedact(), target);
  }

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_intidxType bcs_intidx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_bcs_intidx(), target);
  }

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcfaultstType bcs_vdcfaultst = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_bcs_vdcfaultst(), target);
  }

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcactivestType bcs_vdcactivest = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_bcs_vdcactivest(), target);
  }

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_absfaultstType bcs_absfaultst = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_bcs_absfaultst(), target);
  }

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_absactivestType bcs_absactivest = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_bcs_absactivest(), target);
  }

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_faultstType bcs_faultst = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_bcs_faultst(), target);
  }

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_drvmodeType bcs_drvmode = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_bcs_drvmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_bcs_1_306)
  return target;
}

size_t Scu_bcs_1_306::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_bcs_1_306)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_aebavailableType bcs_aebavailable = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_aebavailable());
    }

    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_cddavailableType bcs_cddavailable = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_cddavailable());
    }

    // optional double bcs_brkpedact = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_intidxType bcs_intidx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_intidx());
    }

    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcfaultstType bcs_vdcfaultst = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_vdcfaultst());
    }

    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcactivestType bcs_vdcactivest = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_vdcactivest());
    }

    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_absfaultstType bcs_absfaultst = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_absfaultst());
    }

    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_absactivestType bcs_absactivest = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_absactivest());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_faultstType bcs_faultst = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_faultst());
    }

    // optional .apollo.canbus.Scu_bcs_1_306.Bcs_drvmodeType bcs_drvmode = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_drvmode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_bcs_1_306::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_bcs_1_306)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_bcs_1_306* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_bcs_1_306>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_bcs_1_306)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_bcs_1_306)
    MergeFrom(*source);
  }
}

void Scu_bcs_1_306::MergeFrom(const Scu_bcs_1_306& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_bcs_1_306)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bcs_aebavailable_ = from.bcs_aebavailable_;
    }
    if (cached_has_bits & 0x00000002u) {
      bcs_cddavailable_ = from.bcs_cddavailable_;
    }
    if (cached_has_bits & 0x00000004u) {
      bcs_brkpedact_ = from.bcs_brkpedact_;
    }
    if (cached_has_bits & 0x00000008u) {
      bcs_intidx_ = from.bcs_intidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      bcs_vdcfaultst_ = from.bcs_vdcfaultst_;
    }
    if (cached_has_bits & 0x00000020u) {
      bcs_vdcactivest_ = from.bcs_vdcactivest_;
    }
    if (cached_has_bits & 0x00000040u) {
      bcs_absfaultst_ = from.bcs_absfaultst_;
    }
    if (cached_has_bits & 0x00000080u) {
      bcs_absactivest_ = from.bcs_absactivest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      bcs_faultst_ = from.bcs_faultst_;
    }
    if (cached_has_bits & 0x00000200u) {
      bcs_drvmode_ = from.bcs_drvmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_bcs_1_306::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_bcs_1_306)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_bcs_1_306::CopyFrom(const Scu_bcs_1_306& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_bcs_1_306)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_bcs_1_306::IsInitialized() const {
  return true;
}

void Scu_bcs_1_306::InternalSwap(Scu_bcs_1_306* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bcs_aebavailable_, other->bcs_aebavailable_);
  swap(bcs_cddavailable_, other->bcs_cddavailable_);
  swap(bcs_brkpedact_, other->bcs_brkpedact_);
  swap(bcs_intidx_, other->bcs_intidx_);
  swap(bcs_vdcfaultst_, other->bcs_vdcfaultst_);
  swap(bcs_vdcactivest_, other->bcs_vdcactivest_);
  swap(bcs_absfaultst_, other->bcs_absfaultst_);
  swap(bcs_absactivest_, other->bcs_absactivest_);
  swap(bcs_faultst_, other->bcs_faultst_);
  swap(bcs_drvmode_, other->bcs_drvmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_bcs_1_306::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_bcs_2_307::InitAsDefaultInstance() {
}
class Scu_bcs_2_307::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_bcs_2_307>()._has_bits_);
  static void set_has_bcs_vehspdvd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bcs_yawrate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bcs_vehspd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bcs_vehlongaccel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bcs_vehlataccel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Scu_bcs_2_307::Scu_bcs_2_307()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_bcs_2_307)
}
Scu_bcs_2_307::Scu_bcs_2_307(const Scu_bcs_2_307& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bcs_yawrate_, &from.bcs_yawrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&bcs_vehspdvd_) -
    reinterpret_cast<char*>(&bcs_yawrate_)) + sizeof(bcs_vehspdvd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_bcs_2_307)
}

void Scu_bcs_2_307::SharedCtor() {
  ::memset(&bcs_yawrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bcs_vehspdvd_) -
      reinterpret_cast<char*>(&bcs_yawrate_)) + sizeof(bcs_vehspdvd_));
}

Scu_bcs_2_307::~Scu_bcs_2_307() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_bcs_2_307)
  SharedDtor();
}

void Scu_bcs_2_307::SharedDtor() {
}

void Scu_bcs_2_307::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_bcs_2_307& Scu_bcs_2_307::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_bcs_2_307_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_bcs_2_307::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_bcs_2_307)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&bcs_yawrate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bcs_vehspdvd_) -
        reinterpret_cast<char*>(&bcs_yawrate_)) + sizeof(bcs_vehspdvd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_bcs_2_307::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Scu_bcs_2_307.Bcs_vehspdvdType bcs_vehspdvd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType_IsValid(val))) {
            _internal_set_bcs_vehspdvd(static_cast<::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double bcs_yawrate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_bcs_yawrate(&has_bits);
          bcs_yawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bcs_vehspd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_bcs_vehspd(&has_bits);
          bcs_vehspd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bcs_vehlongaccel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_bcs_vehlongaccel(&has_bits);
          bcs_vehlongaccel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bcs_vehlataccel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_bcs_vehlataccel(&has_bits);
          bcs_vehlataccel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_bcs_2_307::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_bcs_2_307)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Scu_bcs_2_307.Bcs_vehspdvdType bcs_vehspdvd = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bcs_vehspdvd(), target);
  }

  // optional double bcs_yawrate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_bcs_yawrate(), target);
  }

  // optional double bcs_vehspd = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bcs_vehspd(), target);
  }

  // optional double bcs_vehlongaccel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_bcs_vehlongaccel(), target);
  }

  // optional double bcs_vehlataccel = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_bcs_vehlataccel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_bcs_2_307)
  return target;
}

size_t Scu_bcs_2_307::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_bcs_2_307)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double bcs_yawrate = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double bcs_vehspd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double bcs_vehlongaccel = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double bcs_vehlataccel = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Scu_bcs_2_307.Bcs_vehspdvdType bcs_vehspdvd = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bcs_vehspdvd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_bcs_2_307::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_bcs_2_307)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_bcs_2_307* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_bcs_2_307>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_bcs_2_307)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_bcs_2_307)
    MergeFrom(*source);
  }
}

void Scu_bcs_2_307::MergeFrom(const Scu_bcs_2_307& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_bcs_2_307)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      bcs_yawrate_ = from.bcs_yawrate_;
    }
    if (cached_has_bits & 0x00000002u) {
      bcs_vehspd_ = from.bcs_vehspd_;
    }
    if (cached_has_bits & 0x00000004u) {
      bcs_vehlongaccel_ = from.bcs_vehlongaccel_;
    }
    if (cached_has_bits & 0x00000008u) {
      bcs_vehlataccel_ = from.bcs_vehlataccel_;
    }
    if (cached_has_bits & 0x00000010u) {
      bcs_vehspdvd_ = from.bcs_vehspdvd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_bcs_2_307::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_bcs_2_307)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_bcs_2_307::CopyFrom(const Scu_bcs_2_307& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_bcs_2_307)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_bcs_2_307::IsInitialized() const {
  return true;
}

void Scu_bcs_2_307::InternalSwap(Scu_bcs_2_307* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bcs_yawrate_, other->bcs_yawrate_);
  swap(bcs_vehspd_, other->bcs_vehspd_);
  swap(bcs_vehlongaccel_, other->bcs_vehlongaccel_);
  swap(bcs_vehlataccel_, other->bcs_vehlataccel_);
  swap(bcs_vehspdvd_, other->bcs_vehspdvd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_bcs_2_307::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_epb_310::InitAsDefaultInstance() {
}
class Scu_epb_310::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_epb_310>()._has_bits_);
  static void set_has_epb_intidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_epb_drvmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_epb_sysst(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_epb_faultst(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Scu_epb_310::Scu_epb_310()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_epb_310)
}
Scu_epb_310::Scu_epb_310(const Scu_epb_310& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&epb_intidx_, &from.epb_intidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&epb_faultst_) -
    reinterpret_cast<char*>(&epb_intidx_)) + sizeof(epb_faultst_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_epb_310)
}

void Scu_epb_310::SharedCtor() {
  ::memset(&epb_intidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epb_faultst_) -
      reinterpret_cast<char*>(&epb_intidx_)) + sizeof(epb_faultst_));
}

Scu_epb_310::~Scu_epb_310() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_epb_310)
  SharedDtor();
}

void Scu_epb_310::SharedDtor() {
}

void Scu_epb_310::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_epb_310& Scu_epb_310::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_epb_310_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_epb_310::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_epb_310)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&epb_intidx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&epb_faultst_) -
        reinterpret_cast<char*>(&epb_intidx_)) + sizeof(epb_faultst_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_epb_310::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Scu_epb_310.Epb_intidxType epb_intidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_epb_310_Epb_intidxType_IsValid(val))) {
            _internal_set_epb_intidx(static_cast<::apollo::canbus::Scu_epb_310_Epb_intidxType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_epb_310.Epb_drvmodeType epb_drvmode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_epb_310_Epb_drvmodeType_IsValid(val))) {
            _internal_set_epb_drvmode(static_cast<::apollo::canbus::Scu_epb_310_Epb_drvmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_epb_310.Epb_sysstType epb_sysst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_epb_310_Epb_sysstType_IsValid(val))) {
            _internal_set_epb_sysst(static_cast<::apollo::canbus::Scu_epb_310_Epb_sysstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_epb_310.Epb_faultstType epb_faultst = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_epb_310_Epb_faultstType_IsValid(val))) {
            _internal_set_epb_faultst(static_cast<::apollo::canbus::Scu_epb_310_Epb_faultstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_epb_310::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_epb_310)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Scu_epb_310.Epb_intidxType epb_intidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_epb_intidx(), target);
  }

  // optional .apollo.canbus.Scu_epb_310.Epb_drvmodeType epb_drvmode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_epb_drvmode(), target);
  }

  // optional .apollo.canbus.Scu_epb_310.Epb_sysstType epb_sysst = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_epb_sysst(), target);
  }

  // optional .apollo.canbus.Scu_epb_310.Epb_faultstType epb_faultst = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_epb_faultst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_epb_310)
  return target;
}

size_t Scu_epb_310::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_epb_310)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.canbus.Scu_epb_310.Epb_intidxType epb_intidx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_epb_intidx());
    }

    // optional .apollo.canbus.Scu_epb_310.Epb_drvmodeType epb_drvmode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_epb_drvmode());
    }

    // optional .apollo.canbus.Scu_epb_310.Epb_sysstType epb_sysst = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_epb_sysst());
    }

    // optional .apollo.canbus.Scu_epb_310.Epb_faultstType epb_faultst = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_epb_faultst());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_epb_310::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_epb_310)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_epb_310* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_epb_310>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_epb_310)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_epb_310)
    MergeFrom(*source);
  }
}

void Scu_epb_310::MergeFrom(const Scu_epb_310& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_epb_310)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      epb_intidx_ = from.epb_intidx_;
    }
    if (cached_has_bits & 0x00000002u) {
      epb_drvmode_ = from.epb_drvmode_;
    }
    if (cached_has_bits & 0x00000004u) {
      epb_sysst_ = from.epb_sysst_;
    }
    if (cached_has_bits & 0x00000008u) {
      epb_faultst_ = from.epb_faultst_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_epb_310::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_epb_310)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_epb_310::CopyFrom(const Scu_epb_310& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_epb_310)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_epb_310::IsInitialized() const {
  return true;
}

void Scu_epb_310::InternalSwap(Scu_epb_310* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(epb_intidx_, other->epb_intidx_);
  swap(epb_drvmode_, other->epb_drvmode_);
  swap(epb_sysst_, other->epb_sysst_);
  swap(epb_faultst_, other->epb_faultst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_epb_310::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_vcu_1_312::InitAsDefaultInstance() {
}
class Scu_vcu_1_312::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_vcu_1_312>()._has_bits_);
  static void set_has_vcu_elcsysfault(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vcu_brkpedst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vcu_intidx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vcu_gearintidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vcu_geardrvmode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vcu_accpedact(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vcu_brkpedpst(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vcu_vehrng(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vcu_accpedpst(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vcu_vehrdyst(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vcu_faultst(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vcu_drvmode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vcu_gearpst(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_vcu_gearfaultst(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_vcu_gearact(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

Scu_vcu_1_312::Scu_vcu_1_312()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_vcu_1_312)
}
Scu_vcu_1_312::Scu_vcu_1_312(const Scu_vcu_1_312& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vcu_elcsysfault_, &from.vcu_elcsysfault_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_gearact_) -
    reinterpret_cast<char*>(&vcu_elcsysfault_)) + sizeof(vcu_gearact_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_vcu_1_312)
}

void Scu_vcu_1_312::SharedCtor() {
  ::memset(&vcu_elcsysfault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vcu_gearact_) -
      reinterpret_cast<char*>(&vcu_elcsysfault_)) + sizeof(vcu_gearact_));
}

Scu_vcu_1_312::~Scu_vcu_1_312() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_vcu_1_312)
  SharedDtor();
}

void Scu_vcu_1_312::SharedDtor() {
}

void Scu_vcu_1_312::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_vcu_1_312& Scu_vcu_1_312::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_vcu_1_312_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_vcu_1_312::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_vcu_1_312)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vcu_elcsysfault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_brkpedpst_) -
        reinterpret_cast<char*>(&vcu_elcsysfault_)) + sizeof(vcu_brkpedpst_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&vcu_accpedpst_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vcu_gearact_) -
        reinterpret_cast<char*>(&vcu_accpedpst_)) + sizeof(vcu_gearact_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_vcu_1_312::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_elcsysfaultType vcu_elcsysfault = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType_IsValid(val))) {
            _internal_set_vcu_elcsysfault(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_brkpedstType vcu_brkpedst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType_IsValid(val))) {
            _internal_set_vcu_brkpedst(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_intidxType vcu_intidx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType_IsValid(val))) {
            _internal_set_vcu_intidx(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearintidxType vcu_gearintidx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType_IsValid(val))) {
            _internal_set_vcu_gearintidx(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_geardrvmodeType vcu_geardrvmode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType_IsValid(val))) {
            _internal_set_vcu_geardrvmode(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double vcu_accpedact = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_vcu_accpedact(&has_bits);
          vcu_accpedact_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vcu_brkpedpst = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_vcu_brkpedpst(&has_bits);
          vcu_brkpedpst_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 vcu_vehrng = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vcu_vehrng(&has_bits);
          vcu_vehrng_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double vcu_accpedpst = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_vcu_accpedpst(&has_bits);
          vcu_accpedpst_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_vehrdystType vcu_vehrdyst = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType_IsValid(val))) {
            _internal_set_vcu_vehrdyst(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_faultstType vcu_faultst = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType_IsValid(val))) {
            _internal_set_vcu_faultst(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_drvmodeType vcu_drvmode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType_IsValid(val))) {
            _internal_set_vcu_drvmode(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearpstType vcu_gearpst = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType_IsValid(val))) {
            _internal_set_vcu_gearpst(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearfaultstType vcu_gearfaultst = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType_IsValid(val))) {
            _internal_set_vcu_gearfaultst(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearactType vcu_gearact = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType_IsValid(val))) {
            _internal_set_vcu_gearact(static_cast<::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_vcu_1_312::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_vcu_1_312)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_elcsysfaultType vcu_elcsysfault = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_vcu_elcsysfault(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_brkpedstType vcu_brkpedst = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vcu_brkpedst(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_intidxType vcu_intidx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_vcu_intidx(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearintidxType vcu_gearintidx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_vcu_gearintidx(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_geardrvmodeType vcu_geardrvmode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_vcu_geardrvmode(), target);
  }

  // optional double vcu_accpedact = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_vcu_accpedact(), target);
  }

  // optional double vcu_brkpedpst = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_vcu_brkpedpst(), target);
  }

  // optional int32 vcu_vehrng = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_vcu_vehrng(), target);
  }

  // optional double vcu_accpedpst = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_vcu_accpedpst(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_vehrdystType vcu_vehrdyst = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_vcu_vehrdyst(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_faultstType vcu_faultst = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_vcu_faultst(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_drvmodeType vcu_drvmode = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_vcu_drvmode(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearpstType vcu_gearpst = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_vcu_gearpst(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearfaultstType vcu_gearfaultst = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_vcu_gearfaultst(), target);
  }

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearactType vcu_gearact = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_vcu_gearact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_vcu_1_312)
  return target;
}

size_t Scu_vcu_1_312::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_vcu_1_312)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_elcsysfaultType vcu_elcsysfault = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_elcsysfault());
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_brkpedstType vcu_brkpedst = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_brkpedst());
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_intidxType vcu_intidx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_intidx());
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearintidxType vcu_gearintidx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_gearintidx());
    }

    // optional double vcu_accpedact = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_geardrvmodeType vcu_geardrvmode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_geardrvmode());
    }

    // optional int32 vcu_vehrng = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vcu_vehrng());
    }

    // optional double vcu_brkpedpst = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional double vcu_accpedpst = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_vehrdystType vcu_vehrdyst = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_vehrdyst());
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_faultstType vcu_faultst = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_faultst());
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_drvmodeType vcu_drvmode = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_drvmode());
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearpstType vcu_gearpst = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_gearpst());
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearfaultstType vcu_gearfaultst = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_gearfaultst());
    }

    // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearactType vcu_gearact = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcu_gearact());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_vcu_1_312::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_vcu_1_312)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_vcu_1_312* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_vcu_1_312>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_vcu_1_312)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_vcu_1_312)
    MergeFrom(*source);
  }
}

void Scu_vcu_1_312::MergeFrom(const Scu_vcu_1_312& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_vcu_1_312)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vcu_elcsysfault_ = from.vcu_elcsysfault_;
    }
    if (cached_has_bits & 0x00000002u) {
      vcu_brkpedst_ = from.vcu_brkpedst_;
    }
    if (cached_has_bits & 0x00000004u) {
      vcu_intidx_ = from.vcu_intidx_;
    }
    if (cached_has_bits & 0x00000008u) {
      vcu_gearintidx_ = from.vcu_gearintidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      vcu_accpedact_ = from.vcu_accpedact_;
    }
    if (cached_has_bits & 0x00000020u) {
      vcu_geardrvmode_ = from.vcu_geardrvmode_;
    }
    if (cached_has_bits & 0x00000040u) {
      vcu_vehrng_ = from.vcu_vehrng_;
    }
    if (cached_has_bits & 0x00000080u) {
      vcu_brkpedpst_ = from.vcu_brkpedpst_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      vcu_accpedpst_ = from.vcu_accpedpst_;
    }
    if (cached_has_bits & 0x00000200u) {
      vcu_vehrdyst_ = from.vcu_vehrdyst_;
    }
    if (cached_has_bits & 0x00000400u) {
      vcu_faultst_ = from.vcu_faultst_;
    }
    if (cached_has_bits & 0x00000800u) {
      vcu_drvmode_ = from.vcu_drvmode_;
    }
    if (cached_has_bits & 0x00001000u) {
      vcu_gearpst_ = from.vcu_gearpst_;
    }
    if (cached_has_bits & 0x00002000u) {
      vcu_gearfaultst_ = from.vcu_gearfaultst_;
    }
    if (cached_has_bits & 0x00004000u) {
      vcu_gearact_ = from.vcu_gearact_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_vcu_1_312::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_vcu_1_312)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_vcu_1_312::CopyFrom(const Scu_vcu_1_312& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_vcu_1_312)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_vcu_1_312::IsInitialized() const {
  return true;
}

void Scu_vcu_1_312::InternalSwap(Scu_vcu_1_312* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vcu_elcsysfault_, other->vcu_elcsysfault_);
  swap(vcu_brkpedst_, other->vcu_brkpedst_);
  swap(vcu_intidx_, other->vcu_intidx_);
  swap(vcu_gearintidx_, other->vcu_gearintidx_);
  swap(vcu_accpedact_, other->vcu_accpedact_);
  swap(vcu_geardrvmode_, other->vcu_geardrvmode_);
  swap(vcu_vehrng_, other->vcu_vehrng_);
  swap(vcu_brkpedpst_, other->vcu_brkpedpst_);
  swap(vcu_accpedpst_, other->vcu_accpedpst_);
  swap(vcu_vehrdyst_, other->vcu_vehrdyst_);
  swap(vcu_faultst_, other->vcu_faultst_);
  swap(vcu_drvmode_, other->vcu_drvmode_);
  swap(vcu_gearpst_, other->vcu_gearpst_);
  swap(vcu_gearfaultst_, other->vcu_gearfaultst_);
  swap(vcu_gearact_, other->vcu_gearact_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_vcu_1_312::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scu_eps_311::InitAsDefaultInstance() {
}
class Scu_eps_311::_Internal {
 public:
  using HasBits = decltype(std::declval<Scu_eps_311>()._has_bits_);
  static void set_has_eps_intidx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps_steeranglespd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eps_steerangle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eps_faultst(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps_drvmode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Scu_eps_311::Scu_eps_311()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Scu_eps_311)
}
Scu_eps_311::Scu_eps_311(const Scu_eps_311& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eps_steeranglespd_, &from.eps_steeranglespd_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_drvmode_) -
    reinterpret_cast<char*>(&eps_steeranglespd_)) + sizeof(eps_drvmode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Scu_eps_311)
}

void Scu_eps_311::SharedCtor() {
  ::memset(&eps_steeranglespd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eps_drvmode_) -
      reinterpret_cast<char*>(&eps_steeranglespd_)) + sizeof(eps_drvmode_));
}

Scu_eps_311::~Scu_eps_311() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Scu_eps_311)
  SharedDtor();
}

void Scu_eps_311::SharedDtor() {
}

void Scu_eps_311::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scu_eps_311& Scu_eps_311::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scu_eps_311_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Scu_eps_311::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Scu_eps_311)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&eps_steeranglespd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eps_drvmode_) -
        reinterpret_cast<char*>(&eps_steeranglespd_)) + sizeof(eps_drvmode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Scu_eps_311::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Scu_eps_311.Eps_intidxType eps_intidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_eps_311_Eps_intidxType_IsValid(val))) {
            _internal_set_eps_intidx(static_cast<::apollo::canbus::Scu_eps_311_Eps_intidxType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double eps_steeranglespd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_eps_steeranglespd(&has_bits);
          eps_steeranglespd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double eps_steerangle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_eps_steerangle(&has_bits);
          eps_steerangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_eps_311.Eps_faultstType eps_faultst = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_eps_311_Eps_faultstType_IsValid(val))) {
            _internal_set_eps_faultst(static_cast<::apollo::canbus::Scu_eps_311_Eps_faultstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_eps_311.Eps_drvmodeType eps_drvmode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Scu_eps_311_Eps_drvmodeType_IsValid(val))) {
            _internal_set_eps_drvmode(static_cast<::apollo::canbus::Scu_eps_311_Eps_drvmodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scu_eps_311::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Scu_eps_311)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Scu_eps_311.Eps_intidxType eps_intidx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_eps_intidx(), target);
  }

  // optional double eps_steeranglespd = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_eps_steeranglespd(), target);
  }

  // optional double eps_steerangle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_eps_steerangle(), target);
  }

  // optional .apollo.canbus.Scu_eps_311.Eps_faultstType eps_faultst = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_eps_faultst(), target);
  }

  // optional .apollo.canbus.Scu_eps_311.Eps_drvmodeType eps_drvmode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_eps_drvmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Scu_eps_311)
  return target;
}

size_t Scu_eps_311::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Scu_eps_311)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double eps_steeranglespd = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Scu_eps_311.Eps_intidxType eps_intidx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eps_intidx());
    }

    // optional .apollo.canbus.Scu_eps_311.Eps_faultstType eps_faultst = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eps_faultst());
    }

    // optional double eps_steerangle = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Scu_eps_311.Eps_drvmodeType eps_drvmode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eps_drvmode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scu_eps_311::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Scu_eps_311)
  GOOGLE_DCHECK_NE(&from, this);
  const Scu_eps_311* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scu_eps_311>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Scu_eps_311)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Scu_eps_311)
    MergeFrom(*source);
  }
}

void Scu_eps_311::MergeFrom(const Scu_eps_311& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Scu_eps_311)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      eps_steeranglespd_ = from.eps_steeranglespd_;
    }
    if (cached_has_bits & 0x00000002u) {
      eps_intidx_ = from.eps_intidx_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_faultst_ = from.eps_faultst_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_steerangle_ = from.eps_steerangle_;
    }
    if (cached_has_bits & 0x00000010u) {
      eps_drvmode_ = from.eps_drvmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Scu_eps_311::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Scu_eps_311)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scu_eps_311::CopyFrom(const Scu_eps_311& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Scu_eps_311)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scu_eps_311::IsInitialized() const {
  return true;
}

void Scu_eps_311::InternalSwap(Scu_eps_311* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eps_steeranglespd_, other->eps_steeranglespd_);
  swap(eps_intidx_, other->eps_intidx_);
  swap(eps_faultst_, other->eps_faultst_);
  swap(eps_steerangle_, other->eps_steerangle_);
  swap(eps_drvmode_, other->eps_drvmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scu_eps_311::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ge3::InitAsDefaultInstance() {
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->pc_bcm_201_ = const_cast< ::apollo::canbus::Pc_bcm_201*>(
      ::apollo::canbus::Pc_bcm_201::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_bcs_3_308_ = const_cast< ::apollo::canbus::Scu_bcs_3_308*>(
      ::apollo::canbus::Scu_bcs_3_308::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->pc_epb_203_ = const_cast< ::apollo::canbus::Pc_epb_203*>(
      ::apollo::canbus::Pc_epb_203::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->pc_bcs_202_ = const_cast< ::apollo::canbus::Pc_bcs_202*>(
      ::apollo::canbus::Pc_bcs_202::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->pc_vcu_205_ = const_cast< ::apollo::canbus::Pc_vcu_205*>(
      ::apollo::canbus::Pc_vcu_205::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->pc_eps_204_ = const_cast< ::apollo::canbus::Pc_eps_204*>(
      ::apollo::canbus::Pc_eps_204::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_vcu_2_313_ = const_cast< ::apollo::canbus::Scu_vcu_2_313*>(
      ::apollo::canbus::Scu_vcu_2_313::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_1_301_ = const_cast< ::apollo::canbus::Scu_1_301*>(
      ::apollo::canbus::Scu_1_301::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_2_302_ = const_cast< ::apollo::canbus::Scu_2_302*>(
      ::apollo::canbus::Scu_2_302::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_3_303_ = const_cast< ::apollo::canbus::Scu_3_303*>(
      ::apollo::canbus::Scu_3_303::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_bcm_304_ = const_cast< ::apollo::canbus::Scu_bcm_304*>(
      ::apollo::canbus::Scu_bcm_304::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_bcs_1_306_ = const_cast< ::apollo::canbus::Scu_bcs_1_306*>(
      ::apollo::canbus::Scu_bcs_1_306::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_bcs_2_307_ = const_cast< ::apollo::canbus::Scu_bcs_2_307*>(
      ::apollo::canbus::Scu_bcs_2_307::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_epb_310_ = const_cast< ::apollo::canbus::Scu_epb_310*>(
      ::apollo::canbus::Scu_epb_310::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_vcu_1_312_ = const_cast< ::apollo::canbus::Scu_vcu_1_312*>(
      ::apollo::canbus::Scu_vcu_1_312::internal_default_instance());
  ::apollo::canbus::_Ge3_default_instance_._instance.get_mutable()->scu_eps_311_ = const_cast< ::apollo::canbus::Scu_eps_311*>(
      ::apollo::canbus::Scu_eps_311::internal_default_instance());
}
class Ge3::_Internal {
 public:
  using HasBits = decltype(std::declval<Ge3>()._has_bits_);
  static const ::apollo::canbus::Pc_bcm_201& pc_bcm_201(const Ge3* msg);
  static void set_has_pc_bcm_201(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Scu_bcs_3_308& scu_bcs_3_308(const Ge3* msg);
  static void set_has_scu_bcs_3_308(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::Pc_epb_203& pc_epb_203(const Ge3* msg);
  static void set_has_pc_epb_203(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::Pc_bcs_202& pc_bcs_202(const Ge3* msg);
  static void set_has_pc_bcs_202(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::canbus::Pc_vcu_205& pc_vcu_205(const Ge3* msg);
  static void set_has_pc_vcu_205(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::canbus::Pc_eps_204& pc_eps_204(const Ge3* msg);
  static void set_has_pc_eps_204(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::canbus::Scu_vcu_2_313& scu_vcu_2_313(const Ge3* msg);
  static void set_has_scu_vcu_2_313(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::Scu_1_301& scu_1_301(const Ge3* msg);
  static void set_has_scu_1_301(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::canbus::Scu_2_302& scu_2_302(const Ge3* msg);
  static void set_has_scu_2_302(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::canbus::Scu_3_303& scu_3_303(const Ge3* msg);
  static void set_has_scu_3_303(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::canbus::Scu_bcm_304& scu_bcm_304(const Ge3* msg);
  static void set_has_scu_bcm_304(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::canbus::Scu_bcs_1_306& scu_bcs_1_306(const Ge3* msg);
  static void set_has_scu_bcs_1_306(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::canbus::Scu_bcs_2_307& scu_bcs_2_307(const Ge3* msg);
  static void set_has_scu_bcs_2_307(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::canbus::Scu_epb_310& scu_epb_310(const Ge3* msg);
  static void set_has_scu_epb_310(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::canbus::Scu_vcu_1_312& scu_vcu_1_312(const Ge3* msg);
  static void set_has_scu_vcu_1_312(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::canbus::Scu_eps_311& scu_eps_311(const Ge3* msg);
  static void set_has_scu_eps_311(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::apollo::canbus::Pc_bcm_201&
Ge3::_Internal::pc_bcm_201(const Ge3* msg) {
  return *msg->pc_bcm_201_;
}
const ::apollo::canbus::Scu_bcs_3_308&
Ge3::_Internal::scu_bcs_3_308(const Ge3* msg) {
  return *msg->scu_bcs_3_308_;
}
const ::apollo::canbus::Pc_epb_203&
Ge3::_Internal::pc_epb_203(const Ge3* msg) {
  return *msg->pc_epb_203_;
}
const ::apollo::canbus::Pc_bcs_202&
Ge3::_Internal::pc_bcs_202(const Ge3* msg) {
  return *msg->pc_bcs_202_;
}
const ::apollo::canbus::Pc_vcu_205&
Ge3::_Internal::pc_vcu_205(const Ge3* msg) {
  return *msg->pc_vcu_205_;
}
const ::apollo::canbus::Pc_eps_204&
Ge3::_Internal::pc_eps_204(const Ge3* msg) {
  return *msg->pc_eps_204_;
}
const ::apollo::canbus::Scu_vcu_2_313&
Ge3::_Internal::scu_vcu_2_313(const Ge3* msg) {
  return *msg->scu_vcu_2_313_;
}
const ::apollo::canbus::Scu_1_301&
Ge3::_Internal::scu_1_301(const Ge3* msg) {
  return *msg->scu_1_301_;
}
const ::apollo::canbus::Scu_2_302&
Ge3::_Internal::scu_2_302(const Ge3* msg) {
  return *msg->scu_2_302_;
}
const ::apollo::canbus::Scu_3_303&
Ge3::_Internal::scu_3_303(const Ge3* msg) {
  return *msg->scu_3_303_;
}
const ::apollo::canbus::Scu_bcm_304&
Ge3::_Internal::scu_bcm_304(const Ge3* msg) {
  return *msg->scu_bcm_304_;
}
const ::apollo::canbus::Scu_bcs_1_306&
Ge3::_Internal::scu_bcs_1_306(const Ge3* msg) {
  return *msg->scu_bcs_1_306_;
}
const ::apollo::canbus::Scu_bcs_2_307&
Ge3::_Internal::scu_bcs_2_307(const Ge3* msg) {
  return *msg->scu_bcs_2_307_;
}
const ::apollo::canbus::Scu_epb_310&
Ge3::_Internal::scu_epb_310(const Ge3* msg) {
  return *msg->scu_epb_310_;
}
const ::apollo::canbus::Scu_vcu_1_312&
Ge3::_Internal::scu_vcu_1_312(const Ge3* msg) {
  return *msg->scu_vcu_1_312_;
}
const ::apollo::canbus::Scu_eps_311&
Ge3::_Internal::scu_eps_311(const Ge3* msg) {
  return *msg->scu_eps_311_;
}
Ge3::Ge3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ge3)
}
Ge3::Ge3(const Ge3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pc_bcm_201()) {
    pc_bcm_201_ = new ::apollo::canbus::Pc_bcm_201(*from.pc_bcm_201_);
  } else {
    pc_bcm_201_ = nullptr;
  }
  if (from._internal_has_scu_bcs_3_308()) {
    scu_bcs_3_308_ = new ::apollo::canbus::Scu_bcs_3_308(*from.scu_bcs_3_308_);
  } else {
    scu_bcs_3_308_ = nullptr;
  }
  if (from._internal_has_pc_epb_203()) {
    pc_epb_203_ = new ::apollo::canbus::Pc_epb_203(*from.pc_epb_203_);
  } else {
    pc_epb_203_ = nullptr;
  }
  if (from._internal_has_pc_bcs_202()) {
    pc_bcs_202_ = new ::apollo::canbus::Pc_bcs_202(*from.pc_bcs_202_);
  } else {
    pc_bcs_202_ = nullptr;
  }
  if (from._internal_has_pc_vcu_205()) {
    pc_vcu_205_ = new ::apollo::canbus::Pc_vcu_205(*from.pc_vcu_205_);
  } else {
    pc_vcu_205_ = nullptr;
  }
  if (from._internal_has_pc_eps_204()) {
    pc_eps_204_ = new ::apollo::canbus::Pc_eps_204(*from.pc_eps_204_);
  } else {
    pc_eps_204_ = nullptr;
  }
  if (from._internal_has_scu_vcu_2_313()) {
    scu_vcu_2_313_ = new ::apollo::canbus::Scu_vcu_2_313(*from.scu_vcu_2_313_);
  } else {
    scu_vcu_2_313_ = nullptr;
  }
  if (from._internal_has_scu_1_301()) {
    scu_1_301_ = new ::apollo::canbus::Scu_1_301(*from.scu_1_301_);
  } else {
    scu_1_301_ = nullptr;
  }
  if (from._internal_has_scu_2_302()) {
    scu_2_302_ = new ::apollo::canbus::Scu_2_302(*from.scu_2_302_);
  } else {
    scu_2_302_ = nullptr;
  }
  if (from._internal_has_scu_3_303()) {
    scu_3_303_ = new ::apollo::canbus::Scu_3_303(*from.scu_3_303_);
  } else {
    scu_3_303_ = nullptr;
  }
  if (from._internal_has_scu_bcm_304()) {
    scu_bcm_304_ = new ::apollo::canbus::Scu_bcm_304(*from.scu_bcm_304_);
  } else {
    scu_bcm_304_ = nullptr;
  }
  if (from._internal_has_scu_bcs_1_306()) {
    scu_bcs_1_306_ = new ::apollo::canbus::Scu_bcs_1_306(*from.scu_bcs_1_306_);
  } else {
    scu_bcs_1_306_ = nullptr;
  }
  if (from._internal_has_scu_bcs_2_307()) {
    scu_bcs_2_307_ = new ::apollo::canbus::Scu_bcs_2_307(*from.scu_bcs_2_307_);
  } else {
    scu_bcs_2_307_ = nullptr;
  }
  if (from._internal_has_scu_epb_310()) {
    scu_epb_310_ = new ::apollo::canbus::Scu_epb_310(*from.scu_epb_310_);
  } else {
    scu_epb_310_ = nullptr;
  }
  if (from._internal_has_scu_vcu_1_312()) {
    scu_vcu_1_312_ = new ::apollo::canbus::Scu_vcu_1_312(*from.scu_vcu_1_312_);
  } else {
    scu_vcu_1_312_ = nullptr;
  }
  if (from._internal_has_scu_eps_311()) {
    scu_eps_311_ = new ::apollo::canbus::Scu_eps_311(*from.scu_eps_311_);
  } else {
    scu_eps_311_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ge3)
}

void Ge3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ge3_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  ::memset(&pc_bcm_201_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scu_eps_311_) -
      reinterpret_cast<char*>(&pc_bcm_201_)) + sizeof(scu_eps_311_));
}

Ge3::~Ge3() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ge3)
  SharedDtor();
}

void Ge3::SharedDtor() {
  if (this != internal_default_instance()) delete pc_bcm_201_;
  if (this != internal_default_instance()) delete scu_bcs_3_308_;
  if (this != internal_default_instance()) delete pc_epb_203_;
  if (this != internal_default_instance()) delete pc_bcs_202_;
  if (this != internal_default_instance()) delete pc_vcu_205_;
  if (this != internal_default_instance()) delete pc_eps_204_;
  if (this != internal_default_instance()) delete scu_vcu_2_313_;
  if (this != internal_default_instance()) delete scu_1_301_;
  if (this != internal_default_instance()) delete scu_2_302_;
  if (this != internal_default_instance()) delete scu_3_303_;
  if (this != internal_default_instance()) delete scu_bcm_304_;
  if (this != internal_default_instance()) delete scu_bcs_1_306_;
  if (this != internal_default_instance()) delete scu_bcs_2_307_;
  if (this != internal_default_instance()) delete scu_epb_310_;
  if (this != internal_default_instance()) delete scu_vcu_1_312_;
  if (this != internal_default_instance()) delete scu_eps_311_;
}

void Ge3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ge3& Ge3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ge3_modules_2fcanbus_2fproto_2fge3_2eproto.base);
  return *internal_default_instance();
}


void Ge3::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ge3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pc_bcm_201_ != nullptr);
      pc_bcm_201_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(scu_bcs_3_308_ != nullptr);
      scu_bcs_3_308_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pc_epb_203_ != nullptr);
      pc_epb_203_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pc_bcs_202_ != nullptr);
      pc_bcs_202_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pc_vcu_205_ != nullptr);
      pc_vcu_205_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(pc_eps_204_ != nullptr);
      pc_eps_204_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(scu_vcu_2_313_ != nullptr);
      scu_vcu_2_313_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(scu_1_301_ != nullptr);
      scu_1_301_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(scu_2_302_ != nullptr);
      scu_2_302_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(scu_3_303_ != nullptr);
      scu_3_303_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(scu_bcm_304_ != nullptr);
      scu_bcm_304_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(scu_bcs_1_306_ != nullptr);
      scu_bcs_1_306_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(scu_bcs_2_307_ != nullptr);
      scu_bcs_2_307_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(scu_epb_310_ != nullptr);
      scu_epb_310_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(scu_vcu_1_312_ != nullptr);
      scu_vcu_1_312_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(scu_eps_311_ != nullptr);
      scu_eps_311_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Ge3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.canbus.Pc_bcm_201 pc_bcm_201 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pc_bcm_201(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_3_308 scu_bcs_3_308 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_bcs_3_308(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_epb_203 pc_epb_203 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pc_epb_203(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_bcs_202 pc_bcs_202 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pc_bcs_202(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_vcu_205 pc_vcu_205 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pc_vcu_205(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Pc_eps_204 pc_eps_204 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pc_eps_204(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_2_313 scu_vcu_2_313 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_vcu_2_313(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_1_301 scu_1_301 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_1_301(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_2_302 scu_2_302 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_2_302(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_3_303 scu_3_303 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_3_303(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcm_304 scu_bcm_304 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_bcm_304(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_1_306 scu_bcs_1_306 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_bcs_1_306(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_bcs_2_307 scu_bcs_2_307 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_bcs_2_307(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_epb_310 scu_epb_310 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_epb_310(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_vcu_1_312 scu_vcu_1_312 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_vcu_1_312(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Scu_eps_311 scu_eps_311 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_scu_eps_311(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ge3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ge3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Pc_bcm_201 pc_bcm_201 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pc_bcm_201(this), target, stream);
  }

  // optional .apollo.canbus.Scu_bcs_3_308 scu_bcs_3_308 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scu_bcs_3_308(this), target, stream);
  }

  // optional .apollo.canbus.Pc_epb_203 pc_epb_203 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pc_epb_203(this), target, stream);
  }

  // optional .apollo.canbus.Pc_bcs_202 pc_bcs_202 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pc_bcs_202(this), target, stream);
  }

  // optional .apollo.canbus.Pc_vcu_205 pc_vcu_205 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pc_vcu_205(this), target, stream);
  }

  // optional .apollo.canbus.Pc_eps_204 pc_eps_204 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pc_eps_204(this), target, stream);
  }

  // optional .apollo.canbus.Scu_vcu_2_313 scu_vcu_2_313 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scu_vcu_2_313(this), target, stream);
  }

  // optional .apollo.canbus.Scu_1_301 scu_1_301 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::scu_1_301(this), target, stream);
  }

  // optional .apollo.canbus.Scu_2_302 scu_2_302 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::scu_2_302(this), target, stream);
  }

  // optional .apollo.canbus.Scu_3_303 scu_3_303 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::scu_3_303(this), target, stream);
  }

  // optional .apollo.canbus.Scu_bcm_304 scu_bcm_304 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::scu_bcm_304(this), target, stream);
  }

  // optional .apollo.canbus.Scu_bcs_1_306 scu_bcs_1_306 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::scu_bcs_1_306(this), target, stream);
  }

  // optional .apollo.canbus.Scu_bcs_2_307 scu_bcs_2_307 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::scu_bcs_2_307(this), target, stream);
  }

  // optional .apollo.canbus.Scu_epb_310 scu_epb_310 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::scu_epb_310(this), target, stream);
  }

  // optional .apollo.canbus.Scu_vcu_1_312 scu_vcu_1_312 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::scu_vcu_1_312(this), target, stream);
  }

  // optional .apollo.canbus.Scu_eps_311 scu_eps_311 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::scu_eps_311(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ge3)
  return target;
}

size_t Ge3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ge3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.canbus.Pc_bcm_201 pc_bcm_201 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pc_bcm_201_);
    }

    // optional .apollo.canbus.Scu_bcs_3_308 scu_bcs_3_308 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_bcs_3_308_);
    }

    // optional .apollo.canbus.Pc_epb_203 pc_epb_203 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pc_epb_203_);
    }

    // optional .apollo.canbus.Pc_bcs_202 pc_bcs_202 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pc_bcs_202_);
    }

    // optional .apollo.canbus.Pc_vcu_205 pc_vcu_205 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pc_vcu_205_);
    }

    // optional .apollo.canbus.Pc_eps_204 pc_eps_204 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pc_eps_204_);
    }

    // optional .apollo.canbus.Scu_vcu_2_313 scu_vcu_2_313 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_vcu_2_313_);
    }

    // optional .apollo.canbus.Scu_1_301 scu_1_301 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_1_301_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.canbus.Scu_2_302 scu_2_302 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_2_302_);
    }

    // optional .apollo.canbus.Scu_3_303 scu_3_303 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_3_303_);
    }

    // optional .apollo.canbus.Scu_bcm_304 scu_bcm_304 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_bcm_304_);
    }

    // optional .apollo.canbus.Scu_bcs_1_306 scu_bcs_1_306 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_bcs_1_306_);
    }

    // optional .apollo.canbus.Scu_bcs_2_307 scu_bcs_2_307 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_bcs_2_307_);
    }

    // optional .apollo.canbus.Scu_epb_310 scu_epb_310 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_epb_310_);
    }

    // optional .apollo.canbus.Scu_vcu_1_312 scu_vcu_1_312 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_vcu_1_312_);
    }

    // optional .apollo.canbus.Scu_eps_311 scu_eps_311 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scu_eps_311_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ge3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ge3)
  GOOGLE_DCHECK_NE(&from, this);
  const Ge3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ge3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ge3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ge3)
    MergeFrom(*source);
  }
}

void Ge3::MergeFrom(const Ge3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ge3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pc_bcm_201()->::apollo::canbus::Pc_bcm_201::MergeFrom(from._internal_pc_bcm_201());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_scu_bcs_3_308()->::apollo::canbus::Scu_bcs_3_308::MergeFrom(from._internal_scu_bcs_3_308());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pc_epb_203()->::apollo::canbus::Pc_epb_203::MergeFrom(from._internal_pc_epb_203());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_pc_bcs_202()->::apollo::canbus::Pc_bcs_202::MergeFrom(from._internal_pc_bcs_202());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pc_vcu_205()->::apollo::canbus::Pc_vcu_205::MergeFrom(from._internal_pc_vcu_205());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_pc_eps_204()->::apollo::canbus::Pc_eps_204::MergeFrom(from._internal_pc_eps_204());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_scu_vcu_2_313()->::apollo::canbus::Scu_vcu_2_313::MergeFrom(from._internal_scu_vcu_2_313());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_scu_1_301()->::apollo::canbus::Scu_1_301::MergeFrom(from._internal_scu_1_301());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_scu_2_302()->::apollo::canbus::Scu_2_302::MergeFrom(from._internal_scu_2_302());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_scu_3_303()->::apollo::canbus::Scu_3_303::MergeFrom(from._internal_scu_3_303());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_scu_bcm_304()->::apollo::canbus::Scu_bcm_304::MergeFrom(from._internal_scu_bcm_304());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_scu_bcs_1_306()->::apollo::canbus::Scu_bcs_1_306::MergeFrom(from._internal_scu_bcs_1_306());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_scu_bcs_2_307()->::apollo::canbus::Scu_bcs_2_307::MergeFrom(from._internal_scu_bcs_2_307());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_scu_epb_310()->::apollo::canbus::Scu_epb_310::MergeFrom(from._internal_scu_epb_310());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_scu_vcu_1_312()->::apollo::canbus::Scu_vcu_1_312::MergeFrom(from._internal_scu_vcu_1_312());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_scu_eps_311()->::apollo::canbus::Scu_eps_311::MergeFrom(from._internal_scu_eps_311());
    }
  }
}

void Ge3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ge3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ge3::CopyFrom(const Ge3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ge3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ge3::IsInitialized() const {
  return true;
}

void Ge3::InternalSwap(Ge3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pc_bcm_201_, other->pc_bcm_201_);
  swap(scu_bcs_3_308_, other->scu_bcs_3_308_);
  swap(pc_epb_203_, other->pc_epb_203_);
  swap(pc_bcs_202_, other->pc_bcs_202_);
  swap(pc_vcu_205_, other->pc_vcu_205_);
  swap(pc_eps_204_, other->pc_eps_204_);
  swap(scu_vcu_2_313_, other->scu_vcu_2_313_);
  swap(scu_1_301_, other->scu_1_301_);
  swap(scu_2_302_, other->scu_2_302_);
  swap(scu_3_303_, other->scu_3_303_);
  swap(scu_bcm_304_, other->scu_bcm_304_);
  swap(scu_bcs_1_306_, other->scu_bcs_1_306_);
  swap(scu_bcs_2_307_, other->scu_bcs_2_307_);
  swap(scu_epb_310_, other->scu_epb_310_);
  swap(scu_vcu_1_312_, other->scu_vcu_1_312_);
  swap(scu_eps_311_, other->scu_eps_311_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ge3::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Pc_bcm_201* Arena::CreateMaybeMessage< ::apollo::canbus::Pc_bcm_201 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Pc_bcm_201 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_bcs_3_308* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_bcs_3_308 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_bcs_3_308 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Pc_epb_203* Arena::CreateMaybeMessage< ::apollo::canbus::Pc_epb_203 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Pc_epb_203 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Pc_bcs_202* Arena::CreateMaybeMessage< ::apollo::canbus::Pc_bcs_202 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Pc_bcs_202 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Pc_vcu_205* Arena::CreateMaybeMessage< ::apollo::canbus::Pc_vcu_205 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Pc_vcu_205 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Pc_eps_204* Arena::CreateMaybeMessage< ::apollo::canbus::Pc_eps_204 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Pc_eps_204 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_vcu_2_313* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_vcu_2_313 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_vcu_2_313 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_1_301* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_1_301 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_1_301 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_2_302* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_2_302 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_2_302 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_3_303* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_3_303 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_3_303 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_bcm_304* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_bcm_304 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_bcm_304 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_bcs_1_306* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_bcs_1_306 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_bcs_1_306 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_bcs_2_307* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_bcs_2_307 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_bcs_2_307 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_epb_310* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_epb_310 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_epb_310 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_vcu_1_312* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_vcu_1_312 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_vcu_1_312 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Scu_eps_311* Arena::CreateMaybeMessage< ::apollo::canbus::Scu_eps_311 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Scu_eps_311 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::Ge3* Arena::CreateMaybeMessage< ::apollo::canbus::Ge3 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Ge3 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
