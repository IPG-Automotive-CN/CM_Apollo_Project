// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/sensor_calibration/proto/extractor_config.proto

#include "modules/tools/sensor_calibration/proto/extractor_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Channels_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IoConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Records_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto;
class IoConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IoConfig> _instance;
} _IoConfig_default_instance_;
class ChannelConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelConfig> _instance;
} _ChannelConfig_default_instance_;
class ChannelsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Channels> _instance;
} _Channels_default_instance_;
class RecordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Records> _instance;
} _Records_default_instance_;
class DataExtractionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataExtractionConfig> _instance;
} _DataExtractionConfig_default_instance_;
static void InitDefaultsscc_info_ChannelConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChannelConfig_default_instance_;
    new (ptr) ::ChannelConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChannelConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Channels_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Channels_default_instance_;
    new (ptr) ::Channels();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Channels::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Channels_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Channels_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto}, {
      &scc_info_ChannelConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_DataExtractionConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataExtractionConfig_default_instance_;
    new (ptr) ::DataExtractionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataExtractionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DataExtractionConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DataExtractionConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto}, {
      &scc_info_IoConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,
      &scc_info_Channels_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,
      &scc_info_Records_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_IoConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.DefaultConstruct();
  *::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get_mutable() = std::string("tmp", 3);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get_mutable());
  ::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.DefaultConstruct();
  *::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get_mutable() = std::string("extracted_data", 14);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get_mutable());
  ::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.DefaultConstruct();
  *::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get_mutable() = std::string("FLOAT_MIN", 9);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get_mutable());
  ::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.DefaultConstruct();
  *::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get_mutable() = std::string("FLOAT_MAX", 9);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get_mutable());
  {
    void* ptr = &::_IoConfig_default_instance_;
    new (ptr) ::IoConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IoConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IoConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IoConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Records_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Records_default_instance_;
    new (ptr) ::Records();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Records::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Records_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Records_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::IoConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IoConfig, task_name_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, output_path_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::IoConfig, end_timestamp_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, descriptor_),
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, name_),
  PROTOBUF_FIELD_OFFSET(::ChannelConfig, extraction_rate_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Channels, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Channels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Channels, channel_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Records, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Records, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Records, record_path_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, io_config_),
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, channels_),
  PROTOBUF_FIELD_OFFSET(::DataExtractionConfig, records_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::IoConfig)},
  { 13, 21, sizeof(::ChannelConfig)},
  { 24, 30, sizeof(::Channels)},
  { 31, 37, sizeof(::Records)},
  { 38, 46, sizeof(::DataExtractionConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IoConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChannelConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Channels_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Records_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataExtractionConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n=modules/tools/sensor_calibration/proto"
  "/extractor_config.proto\"\215\001\n\010IoConfig\022\026\n\t"
  "task_name\030\001 \002(\t:\003tmp\022#\n\013output_path\030\002 \002("
  "\t:\016extracted_data\022\"\n\017start_timestamp\030\003 \001"
  "(\t:\tFLOAT_MIN\022 \n\rend_timestamp\030\004 \001(\t:\tFL"
  "OAT_MAX\"O\n\rChannelConfig\022\024\n\ndescriptor\030\001"
  " \001(\t:\000\022\014\n\004name\030\002 \002(\t\022\032\n\017extraction_rate\030"
  "\003 \002(\r:\0011\"+\n\010Channels\022\037\n\007channel\030\001 \003(\0132\016."
  "ChannelConfig\"\036\n\007Records\022\023\n\013record_path\030"
  "\001 \003(\t\"l\n\024DataExtractionConfig\022\034\n\tio_conf"
  "ig\030\001 \002(\0132\t.IoConfig\022\033\n\010channels\030\002 \002(\0132\t."
  "Channels\022\031\n\007records\030\003 \002(\0132\010.Records"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_sccs[5] = {
  &scc_info_ChannelConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,
  &scc_info_Channels_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,
  &scc_info_DataExtractionConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,
  &scc_info_IoConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,
  &scc_info_Records_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once;
static bool descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto = {
  &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_initialized, descriptor_table_protodef_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto, "modules/tools/sensor_calibration/proto/extractor_config.proto", 475,
  &descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_once, descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_sccs, descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto, 5, file_level_enum_descriptors_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto, file_level_service_descriptors_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto), true);

// ===================================================================

void IoConfig::InitAsDefaultInstance() {
}
class IoConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IoConfig>()._has_bits_);
  static void set_has_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_output_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IoConfig::_i_give_permission_to_break_this_code_default_task_name_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IoConfig::_i_give_permission_to_break_this_code_default_output_path_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_;
IoConfig::IoConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IoConfig)
}
IoConfig::IoConfig(const IoConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_name_.UnsafeSetDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get());
  if (from._internal_has_task_name()) {
    task_name_.AssignWithDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get(), from.task_name_);
  }
  output_path_.UnsafeSetDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get());
  if (from._internal_has_output_path()) {
    output_path_.AssignWithDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get(), from.output_path_);
  }
  start_timestamp_.UnsafeSetDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get());
  if (from._internal_has_start_timestamp()) {
    start_timestamp_.AssignWithDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get(), from.start_timestamp_);
  }
  end_timestamp_.UnsafeSetDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get());
  if (from._internal_has_end_timestamp()) {
    end_timestamp_.AssignWithDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get(), from.end_timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:IoConfig)
}

void IoConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IoConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
  task_name_.UnsafeSetDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get());
  output_path_.UnsafeSetDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get());
  start_timestamp_.UnsafeSetDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get());
  end_timestamp_.UnsafeSetDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get());
}

IoConfig::~IoConfig() {
  // @@protoc_insertion_point(destructor:IoConfig)
  SharedDtor();
}

void IoConfig::SharedDtor() {
  task_name_.DestroyNoArena(&::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get());
  output_path_.DestroyNoArena(&::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get());
  start_timestamp_.DestroyNoArena(&::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get());
  end_timestamp_.DestroyNoArena(&::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get());
}

void IoConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IoConfig& IoConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IoConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void IoConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:IoConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      task_name_.UnsafeMutablePointer()->assign(*&::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      output_path_.UnsafeMutablePointer()->assign(*&::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      start_timestamp_.UnsafeMutablePointer()->assign(*&::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      end_timestamp_.UnsafeMutablePointer()->assign(*&::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* IoConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string task_name = 1 [default = "tmp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.task_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string output_path = 2 [default = "extracted_data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.output_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_timestamp = 3 [default = "FLOAT_MIN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_start_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.start_timestamp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string end_timestamp = 4 [default = "FLOAT_MAX"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_end_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IoConfig.end_timestamp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IoConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IoConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string task_name = 1 [default = "tmp"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_name().data(), static_cast<int>(this->_internal_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.task_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_name(), target);
  }

  // required string output_path = 2 [default = "extracted_data"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_path().data(), static_cast<int>(this->_internal_output_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.output_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_path(), target);
  }

  // optional string start_timestamp = 3 [default = "FLOAT_MIN"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_timestamp().data(), static_cast<int>(this->_internal_start_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.start_timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_start_timestamp(), target);
  }

  // optional string end_timestamp = 4 [default = "FLOAT_MAX"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_end_timestamp().data(), static_cast<int>(this->_internal_end_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "IoConfig.end_timestamp");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_end_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IoConfig)
  return target;
}

size_t IoConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IoConfig)
  size_t total_size = 0;

  if (_internal_has_task_name()) {
    // required string task_name = 1 [default = "tmp"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_name());
  }

  if (_internal_has_output_path()) {
    // required string output_path = 2 [default = "extracted_data"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_path());
  }

  return total_size;
}
size_t IoConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IoConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string task_name = 1 [default = "tmp"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_name());

    // required string output_path = 2 [default = "extracted_data"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional string start_timestamp = 3 [default = "FLOAT_MIN"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_timestamp());
    }

    // optional string end_timestamp = 4 [default = "FLOAT_MAX"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IoConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IoConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IoConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IoConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IoConfig)
    MergeFrom(*source);
  }
}

void IoConfig::MergeFrom(const IoConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      task_name_.AssignWithDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get(), from.task_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      output_path_.AssignWithDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get(), from.output_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      start_timestamp_.AssignWithDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get(), from.start_timestamp_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      end_timestamp_.AssignWithDefault(&::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get(), from.end_timestamp_);
    }
  }
}

void IoConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IoConfig::CopyFrom(const IoConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void IoConfig::InternalSwap(IoConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  task_name_.Swap(&other->task_name_, &::IoConfig::_i_give_permission_to_break_this_code_default_task_name_.get(),
    GetArenaNoVirtual());
  output_path_.Swap(&other->output_path_, &::IoConfig::_i_give_permission_to_break_this_code_default_output_path_.get(),
    GetArenaNoVirtual());
  start_timestamp_.Swap(&other->start_timestamp_, &::IoConfig::_i_give_permission_to_break_this_code_default_start_timestamp_.get(),
    GetArenaNoVirtual());
  end_timestamp_.Swap(&other->end_timestamp_, &::IoConfig::_i_give_permission_to_break_this_code_default_end_timestamp_.get(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IoConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelConfig::InitAsDefaultInstance() {
}
class ChannelConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelConfig>()._has_bits_);
  static void set_has_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extraction_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChannelConfig::ChannelConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChannelConfig)
}
ChannelConfig::ChannelConfig(const ChannelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_descriptor()) {
    descriptor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.descriptor_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  extraction_rate_ = from.extraction_rate_;
  // @@protoc_insertion_point(copy_constructor:ChannelConfig)
}

void ChannelConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
  descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extraction_rate_ = 1u;
}

ChannelConfig::~ChannelConfig() {
  // @@protoc_insertion_point(destructor:ChannelConfig)
  SharedDtor();
}

void ChannelConfig::SharedDtor() {
  descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelConfig& ChannelConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ChannelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      descriptor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    extraction_rate_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string descriptor = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_descriptor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChannelConfig.descriptor");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ChannelConfig.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 extraction_rate = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_extraction_rate(&has_bits);
          extraction_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChannelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string descriptor = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_descriptor().data(), static_cast<int>(this->_internal_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChannelConfig.descriptor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_descriptor(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ChannelConfig.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required uint32 extraction_rate = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_extraction_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChannelConfig)
  return target;
}

size_t ChannelConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ChannelConfig)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_extraction_rate()) {
    // required uint32 extraction_rate = 3 [default = 1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extraction_rate());
  }

  return total_size;
}
size_t ChannelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 extraction_rate = 3 [default = 1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extraction_rate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string descriptor = 1 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descriptor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChannelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChannelConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChannelConfig)
    MergeFrom(*source);
  }
}

void ChannelConfig::MergeFrom(const ChannelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      descriptor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.descriptor_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      extraction_rate_ = from.extraction_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChannelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelConfig::CopyFrom(const ChannelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void ChannelConfig::InternalSwap(ChannelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  descriptor_.Swap(&other->descriptor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(extraction_rate_, other->extraction_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Channels::InitAsDefaultInstance() {
}
class Channels::_Internal {
 public:
  using HasBits = decltype(std::declval<Channels>()._has_bits_);
};

Channels::Channels()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Channels)
}
Channels::Channels(const Channels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      channel_(from.channel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Channels)
}

void Channels::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Channels_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
}

Channels::~Channels() {
  // @@protoc_insertion_point(destructor:Channels)
  SharedDtor();
}

void Channels::SharedDtor() {
}

void Channels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Channels& Channels::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Channels_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Channels::Clear() {
// @@protoc_insertion_point(message_clear_start:Channels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Channels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChannelConfig channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Channels::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Channels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChannelConfig channel = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Channels)
  return target;
}

size_t Channels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Channels)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChannelConfig channel = 1;
  total_size += 1UL * this->_internal_channel_size();
  for (const auto& msg : this->channel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channels::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Channels)
  GOOGLE_DCHECK_NE(&from, this);
  const Channels* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Channels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Channels)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Channels)
    MergeFrom(*source);
  }
}

void Channels::MergeFrom(const Channels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Channels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_.MergeFrom(from.channel_);
}

void Channels::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channels::CopyFrom(const Channels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Channels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channels::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(channel_)) return false;
  return true;
}

void Channels::InternalSwap(Channels* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_.InternalSwap(&other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Channels::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Records::InitAsDefaultInstance() {
}
class Records::_Internal {
 public:
  using HasBits = decltype(std::declval<Records>()._has_bits_);
};

Records::Records()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Records)
}
Records::Records(const Records& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      record_path_(from.record_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Records)
}

void Records::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Records_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
}

Records::~Records() {
  // @@protoc_insertion_point(destructor:Records)
  SharedDtor();
}

void Records::SharedDtor() {
}

void Records::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Records& Records::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Records_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Records::Clear() {
// @@protoc_insertion_point(message_clear_start:Records)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_path_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Records::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string record_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_record_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Records.record_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Records::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Records)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string record_path = 1;
  for (int i = 0, n = this->_internal_record_path_size(); i < n; i++) {
    const auto& s = this->_internal_record_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Records.record_path");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Records)
  return target;
}

size_t Records::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Records)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string record_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(record_path_.size());
  for (int i = 0, n = record_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      record_path_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Records::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Records)
  GOOGLE_DCHECK_NE(&from, this);
  const Records* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Records>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Records)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Records)
    MergeFrom(*source);
  }
}

void Records::MergeFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Records)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_path_.MergeFrom(from.record_path_);
}

void Records::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Records::CopyFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Records::IsInitialized() const {
  return true;
}

void Records::InternalSwap(Records* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  record_path_.InternalSwap(&other->record_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Records::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataExtractionConfig::InitAsDefaultInstance() {
  ::_DataExtractionConfig_default_instance_._instance.get_mutable()->io_config_ = const_cast< ::IoConfig*>(
      ::IoConfig::internal_default_instance());
  ::_DataExtractionConfig_default_instance_._instance.get_mutable()->channels_ = const_cast< ::Channels*>(
      ::Channels::internal_default_instance());
  ::_DataExtractionConfig_default_instance_._instance.get_mutable()->records_ = const_cast< ::Records*>(
      ::Records::internal_default_instance());
}
class DataExtractionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DataExtractionConfig>()._has_bits_);
  static const ::IoConfig& io_config(const DataExtractionConfig* msg);
  static void set_has_io_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Channels& channels(const DataExtractionConfig* msg);
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Records& records(const DataExtractionConfig* msg);
  static void set_has_records(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::IoConfig&
DataExtractionConfig::_Internal::io_config(const DataExtractionConfig* msg) {
  return *msg->io_config_;
}
const ::Channels&
DataExtractionConfig::_Internal::channels(const DataExtractionConfig* msg) {
  return *msg->channels_;
}
const ::Records&
DataExtractionConfig::_Internal::records(const DataExtractionConfig* msg) {
  return *msg->records_;
}
DataExtractionConfig::DataExtractionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataExtractionConfig)
}
DataExtractionConfig::DataExtractionConfig(const DataExtractionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_io_config()) {
    io_config_ = new ::IoConfig(*from.io_config_);
  } else {
    io_config_ = nullptr;
  }
  if (from._internal_has_channels()) {
    channels_ = new ::Channels(*from.channels_);
  } else {
    channels_ = nullptr;
  }
  if (from._internal_has_records()) {
    records_ = new ::Records(*from.records_);
  } else {
    records_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DataExtractionConfig)
}

void DataExtractionConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataExtractionConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
  ::memset(&io_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&records_) -
      reinterpret_cast<char*>(&io_config_)) + sizeof(records_));
}

DataExtractionConfig::~DataExtractionConfig() {
  // @@protoc_insertion_point(destructor:DataExtractionConfig)
  SharedDtor();
}

void DataExtractionConfig::SharedDtor() {
  if (this != internal_default_instance()) delete io_config_;
  if (this != internal_default_instance()) delete channels_;
  if (this != internal_default_instance()) delete records_;
}

void DataExtractionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataExtractionConfig& DataExtractionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataExtractionConfig_modules_2ftools_2fsensor_5fcalibration_2fproto_2fextractor_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DataExtractionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:DataExtractionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(io_config_ != nullptr);
      io_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(channels_ != nullptr);
      channels_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(records_ != nullptr);
      records_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DataExtractionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .IoConfig io_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_io_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Channels channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Records records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_records(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataExtractionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataExtractionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .IoConfig io_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::io_config(this), target, stream);
  }

  // required .Channels channels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channels(this), target, stream);
  }

  // required .Records records = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::records(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataExtractionConfig)
  return target;
}

size_t DataExtractionConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DataExtractionConfig)
  size_t total_size = 0;

  if (_internal_has_io_config()) {
    // required .IoConfig io_config = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *io_config_);
  }

  if (_internal_has_channels()) {
    // required .Channels channels = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channels_);
  }

  if (_internal_has_records()) {
    // required .Records records = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);
  }

  return total_size;
}
size_t DataExtractionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataExtractionConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .IoConfig io_config = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *io_config_);

    // required .Channels channels = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channels_);

    // required .Records records = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *records_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataExtractionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataExtractionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DataExtractionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataExtractionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataExtractionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataExtractionConfig)
    MergeFrom(*source);
  }
}

void DataExtractionConfig::MergeFrom(const DataExtractionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataExtractionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_io_config()->::IoConfig::MergeFrom(from._internal_io_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_channels()->::Channels::MergeFrom(from._internal_channels());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_records()->::Records::MergeFrom(from._internal_records());
    }
  }
}

void DataExtractionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataExtractionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataExtractionConfig::CopyFrom(const DataExtractionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataExtractionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataExtractionConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_io_config()) {
    if (!io_config_->IsInitialized()) return false;
  }
  if (_internal_has_channels()) {
    if (!channels_->IsInitialized()) return false;
  }
  return true;
}

void DataExtractionConfig::InternalSwap(DataExtractionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(io_config_, other->io_config_);
  swap(channels_, other->channels_);
  swap(records_, other->records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataExtractionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IoConfig* Arena::CreateMaybeMessage< ::IoConfig >(Arena* arena) {
  return Arena::CreateInternal< ::IoConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ChannelConfig* Arena::CreateMaybeMessage< ::ChannelConfig >(Arena* arena) {
  return Arena::CreateInternal< ::ChannelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Channels* Arena::CreateMaybeMessage< ::Channels >(Arena* arena) {
  return Arena::CreateInternal< ::Channels >(arena);
}
template<> PROTOBUF_NOINLINE ::Records* Arena::CreateMaybeMessage< ::Records >(Arena* arena) {
  return Arena::CreateInternal< ::Records >(arena);
}
template<> PROTOBUF_NOINLINE ::DataExtractionConfig* Arena::CreateMaybeMessage< ::DataExtractionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::DataExtractionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
