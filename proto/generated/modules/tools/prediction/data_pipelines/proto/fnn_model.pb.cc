// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/prediction/data_pipelines/proto/fnn_model.proto

#include "modules/tools/prediction/data_pipelines/proto/fnn_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Layer_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Matrix_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto;
class VectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector> _instance;
} _Vector_default_instance_;
class MatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Matrix> _instance;
} _Matrix_default_instance_;
class LayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Layer> _instance;
} _Layer_default_instance_;
class FnnModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FnnModel> _instance;
} _FnnModel_default_instance_;
static void InitDefaultsscc_info_FnnModel_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FnnModel_default_instance_;
    new (ptr) ::FnnModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FnnModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FnnModel_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FnnModel_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto}, {
      &scc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,
      &scc_info_Layer_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Layer_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Layer_default_instance_;
    new (ptr) ::Layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Layer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Layer_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Layer_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto}, {
      &scc_info_Matrix_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,
      &scc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Matrix_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Matrix_default_instance_;
    new (ptr) ::Matrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Matrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Matrix_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Matrix_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto}, {
      &scc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vector_default_instance_;
    new (ptr) ::Vector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Vector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vector, columns_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Matrix, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Matrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Matrix, rows_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Layer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Layer, layer_input_dim_),
  PROTOBUF_FIELD_OFFSET(::Layer, layer_output_dim_),
  PROTOBUF_FIELD_OFFSET(::Layer, layer_input_weight_),
  PROTOBUF_FIELD_OFFSET(::Layer, layer_bias_),
  PROTOBUF_FIELD_OFFSET(::Layer, layer_activation_func_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::FnnModel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FnnModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FnnModel, dim_input_),
  PROTOBUF_FIELD_OFFSET(::FnnModel, samples_mean_),
  PROTOBUF_FIELD_OFFSET(::FnnModel, samples_std_),
  PROTOBUF_FIELD_OFFSET(::FnnModel, num_layer_),
  PROTOBUF_FIELD_OFFSET(::FnnModel, layer_),
  PROTOBUF_FIELD_OFFSET(::FnnModel, dim_output_),
  2,
  0,
  1,
  3,
  ~0u,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::Vector)},
  { 7, 13, sizeof(::Matrix)},
  { 14, 24, sizeof(::Layer)},
  { 29, 40, sizeof(::FnnModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Matrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FnnModel_default_instance_),
};

const char descriptor_table_protodef_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n=modules/tools/prediction/data_pipeline"
  "s/proto/fnn_model.proto\"\031\n\006Vector\022\017\n\007col"
  "umns\030\001 \003(\001\"\037\n\006Matrix\022\025\n\004rows\030\001 \003(\0132\007.Vec"
  "tor\"\362\001\n\005Layer\022\027\n\017layer_input_dim\030\001 \001(\005\022\030"
  "\n\020layer_output_dim\030\002 \001(\005\022#\n\022layer_input_"
  "weight\030\003 \001(\0132\007.Matrix\022\033\n\nlayer_bias\030\004 \001("
  "\0132\007.Vector\0224\n\025layer_activation_func\030\005 \001("
  "\0162\025.Layer.ActivationFunc\">\n\016ActivationFu"
  "nc\022\010\n\004RELU\020\000\022\010\n\004TANH\020\001\022\013\n\007SIGMOID\020\002\022\013\n\007S"
  "OFTMAX\020\003\"\230\001\n\010FnnModel\022\021\n\tdim_input\030\001 \001(\005"
  "\022\035\n\014samples_mean\030\002 \001(\0132\007.Vector\022\034\n\013sampl"
  "es_std\030\003 \001(\0132\007.Vector\022\021\n\tnum_layer\030\004 \001(\005"
  "\022\025\n\005layer\030\005 \003(\0132\006.Layer\022\022\n\ndim_output\030\006 "
  "\001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto_sccs[4] = {
  &scc_info_FnnModel_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,
  &scc_info_Layer_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,
  &scc_info_Matrix_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,
  &scc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto_once;
static bool descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto = {
  &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto_initialized, descriptor_table_protodef_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto, "modules/tools/prediction/data_pipelines/proto/fnn_model.proto", 523,
  &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto_once, descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto_sccs, descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto::offsets,
  file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto, 4, file_level_enum_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto, file_level_service_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Layer_ActivationFunc_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto);
  return file_level_enum_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto[0];
}
bool Layer_ActivationFunc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Layer_ActivationFunc Layer::RELU;
constexpr Layer_ActivationFunc Layer::TANH;
constexpr Layer_ActivationFunc Layer::SIGMOID;
constexpr Layer_ActivationFunc Layer::SOFTMAX;
constexpr Layer_ActivationFunc Layer::ActivationFunc_MIN;
constexpr Layer_ActivationFunc Layer::ActivationFunc_MAX;
constexpr int Layer::ActivationFunc_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Vector::InitAsDefaultInstance() {
}
class Vector::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector>()._has_bits_);
};

Vector::Vector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Vector)
}

void Vector::SharedCtor() {
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
}

void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector& Vector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_columns(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_columns(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double columns = 1;
  for (int i = 0, n = this->_internal_columns_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_columns(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_columns_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_columns_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
}

void Vector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  columns_.InternalSwap(&other->columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Matrix::InitAsDefaultInstance() {
}
class Matrix::_Internal {
 public:
  using HasBits = decltype(std::declval<Matrix>()._has_bits_);
};

Matrix::Matrix()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Matrix)
}
Matrix::Matrix(const Matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Matrix)
}

void Matrix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Matrix_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base);
}

Matrix::~Matrix() {
  // @@protoc_insertion_point(destructor:Matrix)
  SharedDtor();
}

void Matrix::SharedDtor() {
}

void Matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Matrix& Matrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Matrix_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Vector rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Vector rows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Matrix)
  return target;
}

size_t Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Matrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Vector rows = 1;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Matrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Matrix)
    MergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
}

void Matrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {
  return true;
}

void Matrix::InternalSwap(Matrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rows_.InternalSwap(&other->rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Layer::InitAsDefaultInstance() {
  ::_Layer_default_instance_._instance.get_mutable()->layer_input_weight_ = const_cast< ::Matrix*>(
      ::Matrix::internal_default_instance());
  ::_Layer_default_instance_._instance.get_mutable()->layer_bias_ = const_cast< ::Vector*>(
      ::Vector::internal_default_instance());
}
class Layer::_Internal {
 public:
  using HasBits = decltype(std::declval<Layer>()._has_bits_);
  static void set_has_layer_input_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_layer_output_dim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Matrix& layer_input_weight(const Layer* msg);
  static void set_has_layer_input_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector& layer_bias(const Layer* msg);
  static void set_has_layer_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_layer_activation_func(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::Matrix&
Layer::_Internal::layer_input_weight(const Layer* msg) {
  return *msg->layer_input_weight_;
}
const ::Vector&
Layer::_Internal::layer_bias(const Layer* msg) {
  return *msg->layer_bias_;
}
Layer::Layer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Layer)
}
Layer::Layer(const Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_layer_input_weight()) {
    layer_input_weight_ = new ::Matrix(*from.layer_input_weight_);
  } else {
    layer_input_weight_ = nullptr;
  }
  if (from._internal_has_layer_bias()) {
    layer_bias_ = new ::Vector(*from.layer_bias_);
  } else {
    layer_bias_ = nullptr;
  }
  ::memcpy(&layer_input_dim_, &from.layer_input_dim_,
    static_cast<size_t>(reinterpret_cast<char*>(&layer_activation_func_) -
    reinterpret_cast<char*>(&layer_input_dim_)) + sizeof(layer_activation_func_));
  // @@protoc_insertion_point(copy_constructor:Layer)
}

void Layer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Layer_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base);
  ::memset(&layer_input_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&layer_activation_func_) -
      reinterpret_cast<char*>(&layer_input_weight_)) + sizeof(layer_activation_func_));
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (this != internal_default_instance()) delete layer_input_weight_;
  if (this != internal_default_instance()) delete layer_bias_;
}

void Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Layer& Layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Layer_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(layer_input_weight_ != nullptr);
      layer_input_weight_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(layer_bias_ != nullptr);
      layer_bias_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&layer_input_dim_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&layer_activation_func_) -
        reinterpret_cast<char*>(&layer_input_dim_)) + sizeof(layer_activation_func_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 layer_input_dim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layer_input_dim(&has_bits);
          layer_input_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 layer_output_dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_layer_output_dim(&has_bits);
          layer_output_dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Matrix layer_input_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_input_weight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector layer_bias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_layer_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Layer.ActivationFunc layer_activation_func = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Layer_ActivationFunc_IsValid(val))) {
            _internal_set_layer_activation_func(static_cast<::Layer_ActivationFunc>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Layer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 layer_input_dim = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_layer_input_dim(), target);
  }

  // optional int32 layer_output_dim = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_layer_output_dim(), target);
  }

  // optional .Matrix layer_input_weight = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::layer_input_weight(this), target, stream);
  }

  // optional .Vector layer_bias = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::layer_bias(this), target, stream);
  }

  // optional .Layer.ActivationFunc layer_activation_func = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_layer_activation_func(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Layer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .Matrix layer_input_weight = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_input_weight_);
    }

    // optional .Vector layer_bias = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layer_bias_);
    }

    // optional int32 layer_input_dim = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_input_dim());
    }

    // optional int32 layer_output_dim = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_layer_output_dim());
    }

    // optional .Layer.ActivationFunc layer_activation_func = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_layer_activation_func());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Layer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Layer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Layer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_layer_input_weight()->::Matrix::MergeFrom(from._internal_layer_input_weight());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_layer_bias()->::Vector::MergeFrom(from._internal_layer_bias());
    }
    if (cached_has_bits & 0x00000004u) {
      layer_input_dim_ = from.layer_input_dim_;
    }
    if (cached_has_bits & 0x00000008u) {
      layer_output_dim_ = from.layer_output_dim_;
    }
    if (cached_has_bits & 0x00000010u) {
      layer_activation_func_ = from.layer_activation_func_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Layer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::InternalSwap(Layer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(layer_input_weight_, other->layer_input_weight_);
  swap(layer_bias_, other->layer_bias_);
  swap(layer_input_dim_, other->layer_input_dim_);
  swap(layer_output_dim_, other->layer_output_dim_);
  swap(layer_activation_func_, other->layer_activation_func_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Layer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FnnModel::InitAsDefaultInstance() {
  ::_FnnModel_default_instance_._instance.get_mutable()->samples_mean_ = const_cast< ::Vector*>(
      ::Vector::internal_default_instance());
  ::_FnnModel_default_instance_._instance.get_mutable()->samples_std_ = const_cast< ::Vector*>(
      ::Vector::internal_default_instance());
}
class FnnModel::_Internal {
 public:
  using HasBits = decltype(std::declval<FnnModel>()._has_bits_);
  static void set_has_dim_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector& samples_mean(const FnnModel* msg);
  static void set_has_samples_mean(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector& samples_std(const FnnModel* msg);
  static void set_has_samples_std(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dim_output(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::Vector&
FnnModel::_Internal::samples_mean(const FnnModel* msg) {
  return *msg->samples_mean_;
}
const ::Vector&
FnnModel::_Internal::samples_std(const FnnModel* msg) {
  return *msg->samples_std_;
}
FnnModel::FnnModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FnnModel)
}
FnnModel::FnnModel(const FnnModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_samples_mean()) {
    samples_mean_ = new ::Vector(*from.samples_mean_);
  } else {
    samples_mean_ = nullptr;
  }
  if (from._internal_has_samples_std()) {
    samples_std_ = new ::Vector(*from.samples_std_);
  } else {
    samples_std_ = nullptr;
  }
  ::memcpy(&dim_input_, &from.dim_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&dim_output_) -
    reinterpret_cast<char*>(&dim_input_)) + sizeof(dim_output_));
  // @@protoc_insertion_point(copy_constructor:FnnModel)
}

void FnnModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FnnModel_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base);
  ::memset(&samples_mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dim_output_) -
      reinterpret_cast<char*>(&samples_mean_)) + sizeof(dim_output_));
}

FnnModel::~FnnModel() {
  // @@protoc_insertion_point(destructor:FnnModel)
  SharedDtor();
}

void FnnModel::SharedDtor() {
  if (this != internal_default_instance()) delete samples_mean_;
  if (this != internal_default_instance()) delete samples_std_;
}

void FnnModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FnnModel& FnnModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FnnModel_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void FnnModel::Clear() {
// @@protoc_insertion_point(message_clear_start:FnnModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(samples_mean_ != nullptr);
      samples_mean_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(samples_std_ != nullptr);
      samples_std_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&dim_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dim_output_) -
        reinterpret_cast<char*>(&dim_input_)) + sizeof(dim_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FnnModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dim_input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dim_input(&has_bits);
          dim_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector samples_mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_samples_mean(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Vector samples_std = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_samples_std(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_layer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_layer(&has_bits);
          num_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Layer layer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 dim_output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dim_output(&has_bits);
          dim_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FnnModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FnnModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dim_input = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dim_input(), target);
  }

  // optional .Vector samples_mean = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::samples_mean(this), target, stream);
  }

  // optional .Vector samples_std = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::samples_std(this), target, stream);
  }

  // optional int32 num_layer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_layer(), target);
  }

  // repeated .Layer layer = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_layer(i), target, stream);
  }

  // optional int32 dim_output = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dim_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FnnModel)
  return target;
}

size_t FnnModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FnnModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Layer layer = 5;
  total_size += 1UL * this->_internal_layer_size();
  for (const auto& msg : this->layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .Vector samples_mean = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *samples_mean_);
    }

    // optional .Vector samples_std = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *samples_std_);
    }

    // optional int32 dim_input = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dim_input());
    }

    // optional int32 num_layer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_layer());
    }

    // optional int32 dim_output = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dim_output());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FnnModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FnnModel)
  GOOGLE_DCHECK_NE(&from, this);
  const FnnModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FnnModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FnnModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FnnModel)
    MergeFrom(*source);
  }
}

void FnnModel::MergeFrom(const FnnModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FnnModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_.MergeFrom(from.layer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_samples_mean()->::Vector::MergeFrom(from._internal_samples_mean());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_samples_std()->::Vector::MergeFrom(from._internal_samples_std());
    }
    if (cached_has_bits & 0x00000004u) {
      dim_input_ = from.dim_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_layer_ = from.num_layer_;
    }
    if (cached_has_bits & 0x00000010u) {
      dim_output_ = from.dim_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FnnModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FnnModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FnnModel::CopyFrom(const FnnModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FnnModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FnnModel::IsInitialized() const {
  return true;
}

void FnnModel::InternalSwap(FnnModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_.InternalSwap(&other->layer_);
  swap(samples_mean_, other->samples_mean_);
  swap(samples_std_, other->samples_std_);
  swap(dim_input_, other->dim_input_);
  swap(num_layer_, other->num_layer_);
  swap(dim_output_, other->dim_output_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FnnModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vector* Arena::CreateMaybeMessage< ::Vector >(Arena* arena) {
  return Arena::CreateInternal< ::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::Matrix* Arena::CreateMaybeMessage< ::Matrix >(Arena* arena) {
  return Arena::CreateInternal< ::Matrix >(arena);
}
template<> PROTOBUF_NOINLINE ::Layer* Arena::CreateMaybeMessage< ::Layer >(Arena* arena) {
  return Arena::CreateInternal< ::Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::FnnModel* Arena::CreateMaybeMessage< ::FnnModel >(Arena* arena) {
  return Arena::CreateInternal< ::FnnModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
