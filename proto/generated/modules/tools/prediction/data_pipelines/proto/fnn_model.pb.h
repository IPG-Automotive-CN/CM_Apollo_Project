// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/prediction/data_pipelines/proto/fnn_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto;
class FnnModel;
class FnnModelDefaultTypeInternal;
extern FnnModelDefaultTypeInternal _FnnModel_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class Matrix;
class MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
class Vector;
class VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FnnModel* Arena::CreateMaybeMessage<::FnnModel>(Arena*);
template<> ::Layer* Arena::CreateMaybeMessage<::Layer>(Arena*);
template<> ::Matrix* Arena::CreateMaybeMessage<::Matrix>(Arena*);
template<> ::Vector* Arena::CreateMaybeMessage<::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Layer_ActivationFunc : int {
  Layer_ActivationFunc_RELU = 0,
  Layer_ActivationFunc_TANH = 1,
  Layer_ActivationFunc_SIGMOID = 2,
  Layer_ActivationFunc_SOFTMAX = 3
};
bool Layer_ActivationFunc_IsValid(int value);
constexpr Layer_ActivationFunc Layer_ActivationFunc_ActivationFunc_MIN = Layer_ActivationFunc_RELU;
constexpr Layer_ActivationFunc Layer_ActivationFunc_ActivationFunc_MAX = Layer_ActivationFunc_SOFTMAX;
constexpr int Layer_ActivationFunc_ActivationFunc_ARRAYSIZE = Layer_ActivationFunc_ActivationFunc_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Layer_ActivationFunc_descriptor();
template<typename T>
inline const std::string& Layer_ActivationFunc_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Layer_ActivationFunc>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Layer_ActivationFunc_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Layer_ActivationFunc_descriptor(), enum_t_value);
}
inline bool Layer_ActivationFunc_Parse(
    const std::string& name, Layer_ActivationFunc* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Layer_ActivationFunc>(
    Layer_ActivationFunc_descriptor(), name, value);
}
// ===================================================================

class Vector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector) */ {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return CreateMaybeMessage<Vector>(nullptr);
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 1,
  };
  // repeated double columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  private:
  double _internal_columns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_columns() const;
  void _internal_add_columns(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_columns();
  public:
  double columns(int index) const;
  void set_columns(int index, double value);
  void add_columns(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_columns();

  // @@protoc_insertion_point(class_scope:Vector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > columns_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Matrix :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Matrix) */ {
 public:
  Matrix();
  virtual ~Matrix();

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix* New() const final {
    return CreateMaybeMessage<Matrix>(nullptr);
  }

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Matrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .Vector rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::Vector* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector >*
      mutable_rows();
  private:
  const ::Vector& _internal_rows(int index) const;
  ::Vector* _internal_add_rows();
  public:
  const ::Vector& rows(int index) const;
  ::Vector* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector >&
      rows() const;

  // @@protoc_insertion_point(class_scope:Matrix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector > rows_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Layer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Layer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(nullptr);
  }

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Layer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Layer_ActivationFunc ActivationFunc;
  static constexpr ActivationFunc RELU =
    Layer_ActivationFunc_RELU;
  static constexpr ActivationFunc TANH =
    Layer_ActivationFunc_TANH;
  static constexpr ActivationFunc SIGMOID =
    Layer_ActivationFunc_SIGMOID;
  static constexpr ActivationFunc SOFTMAX =
    Layer_ActivationFunc_SOFTMAX;
  static inline bool ActivationFunc_IsValid(int value) {
    return Layer_ActivationFunc_IsValid(value);
  }
  static constexpr ActivationFunc ActivationFunc_MIN =
    Layer_ActivationFunc_ActivationFunc_MIN;
  static constexpr ActivationFunc ActivationFunc_MAX =
    Layer_ActivationFunc_ActivationFunc_MAX;
  static constexpr int ActivationFunc_ARRAYSIZE =
    Layer_ActivationFunc_ActivationFunc_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActivationFunc_descriptor() {
    return Layer_ActivationFunc_descriptor();
  }
  template<typename T>
  static inline const std::string& ActivationFunc_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActivationFunc>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActivationFunc_Name.");
    return Layer_ActivationFunc_Name(enum_t_value);
  }
  static inline bool ActivationFunc_Parse(const std::string& name,
      ActivationFunc* value) {
    return Layer_ActivationFunc_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLayerInputWeightFieldNumber = 3,
    kLayerBiasFieldNumber = 4,
    kLayerInputDimFieldNumber = 1,
    kLayerOutputDimFieldNumber = 2,
    kLayerActivationFuncFieldNumber = 5,
  };
  // optional .Matrix layer_input_weight = 3;
  bool has_layer_input_weight() const;
  private:
  bool _internal_has_layer_input_weight() const;
  public:
  void clear_layer_input_weight();
  const ::Matrix& layer_input_weight() const;
  ::Matrix* release_layer_input_weight();
  ::Matrix* mutable_layer_input_weight();
  void set_allocated_layer_input_weight(::Matrix* layer_input_weight);
  private:
  const ::Matrix& _internal_layer_input_weight() const;
  ::Matrix* _internal_mutable_layer_input_weight();
  public:

  // optional .Vector layer_bias = 4;
  bool has_layer_bias() const;
  private:
  bool _internal_has_layer_bias() const;
  public:
  void clear_layer_bias();
  const ::Vector& layer_bias() const;
  ::Vector* release_layer_bias();
  ::Vector* mutable_layer_bias();
  void set_allocated_layer_bias(::Vector* layer_bias);
  private:
  const ::Vector& _internal_layer_bias() const;
  ::Vector* _internal_mutable_layer_bias();
  public:

  // optional int32 layer_input_dim = 1;
  bool has_layer_input_dim() const;
  private:
  bool _internal_has_layer_input_dim() const;
  public:
  void clear_layer_input_dim();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_input_dim() const;
  void set_layer_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_input_dim() const;
  void _internal_set_layer_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 layer_output_dim = 2;
  bool has_layer_output_dim() const;
  private:
  bool _internal_has_layer_output_dim() const;
  public:
  void clear_layer_output_dim();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_output_dim() const;
  void set_layer_output_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_output_dim() const;
  void _internal_set_layer_output_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .Layer.ActivationFunc layer_activation_func = 5;
  bool has_layer_activation_func() const;
  private:
  bool _internal_has_layer_activation_func() const;
  public:
  void clear_layer_activation_func();
  ::Layer_ActivationFunc layer_activation_func() const;
  void set_layer_activation_func(::Layer_ActivationFunc value);
  private:
  ::Layer_ActivationFunc _internal_layer_activation_func() const;
  void _internal_set_layer_activation_func(::Layer_ActivationFunc value);
  public:

  // @@protoc_insertion_point(class_scope:Layer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Matrix* layer_input_weight_;
  ::Vector* layer_bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_input_dim_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_output_dim_;
  int layer_activation_func_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class FnnModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FnnModel) */ {
 public:
  FnnModel();
  virtual ~FnnModel();

  FnnModel(const FnnModel& from);
  FnnModel(FnnModel&& from) noexcept
    : FnnModel() {
    *this = ::std::move(from);
  }

  inline FnnModel& operator=(const FnnModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FnnModel& operator=(FnnModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FnnModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FnnModel* internal_default_instance() {
    return reinterpret_cast<const FnnModel*>(
               &_FnnModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FnnModel& a, FnnModel& b) {
    a.Swap(&b);
  }
  inline void Swap(FnnModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FnnModel* New() const final {
    return CreateMaybeMessage<FnnModel>(nullptr);
  }

  FnnModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FnnModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FnnModel& from);
  void MergeFrom(const FnnModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FnnModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FnnModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 5,
    kSamplesMeanFieldNumber = 2,
    kSamplesStdFieldNumber = 3,
    kDimInputFieldNumber = 1,
    kNumLayerFieldNumber = 4,
    kDimOutputFieldNumber = 6,
  };
  // repeated .Layer layer = 5;
  int layer_size() const;
  private:
  int _internal_layer_size() const;
  public:
  void clear_layer();
  ::Layer* mutable_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Layer >*
      mutable_layer();
  private:
  const ::Layer& _internal_layer(int index) const;
  ::Layer* _internal_add_layer();
  public:
  const ::Layer& layer(int index) const;
  ::Layer* add_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Layer >&
      layer() const;

  // optional .Vector samples_mean = 2;
  bool has_samples_mean() const;
  private:
  bool _internal_has_samples_mean() const;
  public:
  void clear_samples_mean();
  const ::Vector& samples_mean() const;
  ::Vector* release_samples_mean();
  ::Vector* mutable_samples_mean();
  void set_allocated_samples_mean(::Vector* samples_mean);
  private:
  const ::Vector& _internal_samples_mean() const;
  ::Vector* _internal_mutable_samples_mean();
  public:

  // optional .Vector samples_std = 3;
  bool has_samples_std() const;
  private:
  bool _internal_has_samples_std() const;
  public:
  void clear_samples_std();
  const ::Vector& samples_std() const;
  ::Vector* release_samples_std();
  ::Vector* mutable_samples_std();
  void set_allocated_samples_std(::Vector* samples_std);
  private:
  const ::Vector& _internal_samples_std() const;
  ::Vector* _internal_mutable_samples_std();
  public:

  // optional int32 dim_input = 1;
  bool has_dim_input() const;
  private:
  bool _internal_has_dim_input() const;
  public:
  void clear_dim_input();
  ::PROTOBUF_NAMESPACE_ID::int32 dim_input() const;
  void set_dim_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dim_input() const;
  void _internal_set_dim_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_layer = 4;
  bool has_num_layer() const;
  private:
  bool _internal_has_num_layer() const;
  public:
  void clear_num_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 num_layer() const;
  void set_num_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_layer() const;
  void _internal_set_num_layer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dim_output = 6;
  bool has_dim_output() const;
  private:
  bool _internal_has_dim_output() const;
  public:
  void clear_dim_output();
  ::PROTOBUF_NAMESPACE_ID::int32 dim_output() const;
  void set_dim_output(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dim_output() const;
  void _internal_set_dim_output(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FnnModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Layer > layer_;
  ::Vector* samples_mean_;
  ::Vector* samples_std_;
  ::PROTOBUF_NAMESPACE_ID::int32 dim_input_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_layer_;
  ::PROTOBUF_NAMESPACE_ID::int32 dim_output_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector

// repeated double columns = 1;
inline int Vector::_internal_columns_size() const {
  return columns_.size();
}
inline int Vector::columns_size() const {
  return _internal_columns_size();
}
inline void Vector::clear_columns() {
  columns_.Clear();
}
inline double Vector::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline double Vector::columns(int index) const {
  // @@protoc_insertion_point(field_get:Vector.columns)
  return _internal_columns(index);
}
inline void Vector::set_columns(int index, double value) {
  columns_.Set(index, value);
  // @@protoc_insertion_point(field_set:Vector.columns)
}
inline void Vector::_internal_add_columns(double value) {
  columns_.Add(value);
}
inline void Vector::add_columns(double value) {
  _internal_add_columns(value);
  // @@protoc_insertion_point(field_add:Vector.columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vector::_internal_columns() const {
  return columns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vector::columns() const {
  // @@protoc_insertion_point(field_list:Vector.columns)
  return _internal_columns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vector::_internal_mutable_columns() {
  return &columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vector::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:Vector.columns)
  return _internal_mutable_columns();
}

// -------------------------------------------------------------------

// Matrix

// repeated .Vector rows = 1;
inline int Matrix::_internal_rows_size() const {
  return rows_.size();
}
inline int Matrix::rows_size() const {
  return _internal_rows_size();
}
inline void Matrix::clear_rows() {
  rows_.Clear();
}
inline ::Vector* Matrix::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:Matrix.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector >*
Matrix::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:Matrix.rows)
  return &rows_;
}
inline const ::Vector& Matrix::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::Vector& Matrix::rows(int index) const {
  // @@protoc_insertion_point(field_get:Matrix.rows)
  return _internal_rows(index);
}
inline ::Vector* Matrix::_internal_add_rows() {
  return rows_.Add();
}
inline ::Vector* Matrix::add_rows() {
  // @@protoc_insertion_point(field_add:Matrix.rows)
  return _internal_add_rows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector >&
Matrix::rows() const {
  // @@protoc_insertion_point(field_list:Matrix.rows)
  return rows_;
}

// -------------------------------------------------------------------

// Layer

// optional int32 layer_input_dim = 1;
inline bool Layer::_internal_has_layer_input_dim() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Layer::has_layer_input_dim() const {
  return _internal_has_layer_input_dim();
}
inline void Layer::clear_layer_input_dim() {
  layer_input_dim_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::_internal_layer_input_dim() const {
  return layer_input_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::layer_input_dim() const {
  // @@protoc_insertion_point(field_get:Layer.layer_input_dim)
  return _internal_layer_input_dim();
}
inline void Layer::_internal_set_layer_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  layer_input_dim_ = value;
}
inline void Layer::set_layer_input_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_input_dim(value);
  // @@protoc_insertion_point(field_set:Layer.layer_input_dim)
}

// optional int32 layer_output_dim = 2;
inline bool Layer::_internal_has_layer_output_dim() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Layer::has_layer_output_dim() const {
  return _internal_has_layer_output_dim();
}
inline void Layer::clear_layer_output_dim() {
  layer_output_dim_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::_internal_layer_output_dim() const {
  return layer_output_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::layer_output_dim() const {
  // @@protoc_insertion_point(field_get:Layer.layer_output_dim)
  return _internal_layer_output_dim();
}
inline void Layer::_internal_set_layer_output_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  layer_output_dim_ = value;
}
inline void Layer::set_layer_output_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_output_dim(value);
  // @@protoc_insertion_point(field_set:Layer.layer_output_dim)
}

// optional .Matrix layer_input_weight = 3;
inline bool Layer::_internal_has_layer_input_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || layer_input_weight_ != nullptr);
  return value;
}
inline bool Layer::has_layer_input_weight() const {
  return _internal_has_layer_input_weight();
}
inline void Layer::clear_layer_input_weight() {
  if (layer_input_weight_ != nullptr) layer_input_weight_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Matrix& Layer::_internal_layer_input_weight() const {
  const ::Matrix* p = layer_input_weight_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Matrix*>(
      &::_Matrix_default_instance_);
}
inline const ::Matrix& Layer::layer_input_weight() const {
  // @@protoc_insertion_point(field_get:Layer.layer_input_weight)
  return _internal_layer_input_weight();
}
inline ::Matrix* Layer::release_layer_input_weight() {
  // @@protoc_insertion_point(field_release:Layer.layer_input_weight)
  _has_bits_[0] &= ~0x00000001u;
  ::Matrix* temp = layer_input_weight_;
  layer_input_weight_ = nullptr;
  return temp;
}
inline ::Matrix* Layer::_internal_mutable_layer_input_weight() {
  _has_bits_[0] |= 0x00000001u;
  if (layer_input_weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::Matrix>(GetArenaNoVirtual());
    layer_input_weight_ = p;
  }
  return layer_input_weight_;
}
inline ::Matrix* Layer::mutable_layer_input_weight() {
  // @@protoc_insertion_point(field_mutable:Layer.layer_input_weight)
  return _internal_mutable_layer_input_weight();
}
inline void Layer::set_allocated_layer_input_weight(::Matrix* layer_input_weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete layer_input_weight_;
  }
  if (layer_input_weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layer_input_weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_input_weight, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  layer_input_weight_ = layer_input_weight;
  // @@protoc_insertion_point(field_set_allocated:Layer.layer_input_weight)
}

// optional .Vector layer_bias = 4;
inline bool Layer::_internal_has_layer_bias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || layer_bias_ != nullptr);
  return value;
}
inline bool Layer::has_layer_bias() const {
  return _internal_has_layer_bias();
}
inline void Layer::clear_layer_bias() {
  if (layer_bias_ != nullptr) layer_bias_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector& Layer::_internal_layer_bias() const {
  const ::Vector* p = layer_bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector*>(
      &::_Vector_default_instance_);
}
inline const ::Vector& Layer::layer_bias() const {
  // @@protoc_insertion_point(field_get:Layer.layer_bias)
  return _internal_layer_bias();
}
inline ::Vector* Layer::release_layer_bias() {
  // @@protoc_insertion_point(field_release:Layer.layer_bias)
  _has_bits_[0] &= ~0x00000002u;
  ::Vector* temp = layer_bias_;
  layer_bias_ = nullptr;
  return temp;
}
inline ::Vector* Layer::_internal_mutable_layer_bias() {
  _has_bits_[0] |= 0x00000002u;
  if (layer_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector>(GetArenaNoVirtual());
    layer_bias_ = p;
  }
  return layer_bias_;
}
inline ::Vector* Layer::mutable_layer_bias() {
  // @@protoc_insertion_point(field_mutable:Layer.layer_bias)
  return _internal_mutable_layer_bias();
}
inline void Layer::set_allocated_layer_bias(::Vector* layer_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete layer_bias_;
  }
  if (layer_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layer_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layer_bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layer_bias_ = layer_bias;
  // @@protoc_insertion_point(field_set_allocated:Layer.layer_bias)
}

// optional .Layer.ActivationFunc layer_activation_func = 5;
inline bool Layer::_internal_has_layer_activation_func() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Layer::has_layer_activation_func() const {
  return _internal_has_layer_activation_func();
}
inline void Layer::clear_layer_activation_func() {
  layer_activation_func_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Layer_ActivationFunc Layer::_internal_layer_activation_func() const {
  return static_cast< ::Layer_ActivationFunc >(layer_activation_func_);
}
inline ::Layer_ActivationFunc Layer::layer_activation_func() const {
  // @@protoc_insertion_point(field_get:Layer.layer_activation_func)
  return _internal_layer_activation_func();
}
inline void Layer::_internal_set_layer_activation_func(::Layer_ActivationFunc value) {
  assert(::Layer_ActivationFunc_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  layer_activation_func_ = value;
}
inline void Layer::set_layer_activation_func(::Layer_ActivationFunc value) {
  _internal_set_layer_activation_func(value);
  // @@protoc_insertion_point(field_set:Layer.layer_activation_func)
}

// -------------------------------------------------------------------

// FnnModel

// optional int32 dim_input = 1;
inline bool FnnModel::_internal_has_dim_input() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FnnModel::has_dim_input() const {
  return _internal_has_dim_input();
}
inline void FnnModel::clear_dim_input() {
  dim_input_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FnnModel::_internal_dim_input() const {
  return dim_input_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FnnModel::dim_input() const {
  // @@protoc_insertion_point(field_get:FnnModel.dim_input)
  return _internal_dim_input();
}
inline void FnnModel::_internal_set_dim_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  dim_input_ = value;
}
inline void FnnModel::set_dim_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dim_input(value);
  // @@protoc_insertion_point(field_set:FnnModel.dim_input)
}

// optional .Vector samples_mean = 2;
inline bool FnnModel::_internal_has_samples_mean() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || samples_mean_ != nullptr);
  return value;
}
inline bool FnnModel::has_samples_mean() const {
  return _internal_has_samples_mean();
}
inline void FnnModel::clear_samples_mean() {
  if (samples_mean_ != nullptr) samples_mean_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Vector& FnnModel::_internal_samples_mean() const {
  const ::Vector* p = samples_mean_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector*>(
      &::_Vector_default_instance_);
}
inline const ::Vector& FnnModel::samples_mean() const {
  // @@protoc_insertion_point(field_get:FnnModel.samples_mean)
  return _internal_samples_mean();
}
inline ::Vector* FnnModel::release_samples_mean() {
  // @@protoc_insertion_point(field_release:FnnModel.samples_mean)
  _has_bits_[0] &= ~0x00000001u;
  ::Vector* temp = samples_mean_;
  samples_mean_ = nullptr;
  return temp;
}
inline ::Vector* FnnModel::_internal_mutable_samples_mean() {
  _has_bits_[0] |= 0x00000001u;
  if (samples_mean_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector>(GetArenaNoVirtual());
    samples_mean_ = p;
  }
  return samples_mean_;
}
inline ::Vector* FnnModel::mutable_samples_mean() {
  // @@protoc_insertion_point(field_mutable:FnnModel.samples_mean)
  return _internal_mutable_samples_mean();
}
inline void FnnModel::set_allocated_samples_mean(::Vector* samples_mean) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete samples_mean_;
  }
  if (samples_mean) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      samples_mean = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, samples_mean, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  samples_mean_ = samples_mean;
  // @@protoc_insertion_point(field_set_allocated:FnnModel.samples_mean)
}

// optional .Vector samples_std = 3;
inline bool FnnModel::_internal_has_samples_std() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || samples_std_ != nullptr);
  return value;
}
inline bool FnnModel::has_samples_std() const {
  return _internal_has_samples_std();
}
inline void FnnModel::clear_samples_std() {
  if (samples_std_ != nullptr) samples_std_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector& FnnModel::_internal_samples_std() const {
  const ::Vector* p = samples_std_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector*>(
      &::_Vector_default_instance_);
}
inline const ::Vector& FnnModel::samples_std() const {
  // @@protoc_insertion_point(field_get:FnnModel.samples_std)
  return _internal_samples_std();
}
inline ::Vector* FnnModel::release_samples_std() {
  // @@protoc_insertion_point(field_release:FnnModel.samples_std)
  _has_bits_[0] &= ~0x00000002u;
  ::Vector* temp = samples_std_;
  samples_std_ = nullptr;
  return temp;
}
inline ::Vector* FnnModel::_internal_mutable_samples_std() {
  _has_bits_[0] |= 0x00000002u;
  if (samples_std_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector>(GetArenaNoVirtual());
    samples_std_ = p;
  }
  return samples_std_;
}
inline ::Vector* FnnModel::mutable_samples_std() {
  // @@protoc_insertion_point(field_mutable:FnnModel.samples_std)
  return _internal_mutable_samples_std();
}
inline void FnnModel::set_allocated_samples_std(::Vector* samples_std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete samples_std_;
  }
  if (samples_std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      samples_std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, samples_std, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  samples_std_ = samples_std;
  // @@protoc_insertion_point(field_set_allocated:FnnModel.samples_std)
}

// optional int32 num_layer = 4;
inline bool FnnModel::_internal_has_num_layer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FnnModel::has_num_layer() const {
  return _internal_has_num_layer();
}
inline void FnnModel::clear_num_layer() {
  num_layer_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FnnModel::_internal_num_layer() const {
  return num_layer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FnnModel::num_layer() const {
  // @@protoc_insertion_point(field_get:FnnModel.num_layer)
  return _internal_num_layer();
}
inline void FnnModel::_internal_set_num_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_layer_ = value;
}
inline void FnnModel::set_num_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_layer(value);
  // @@protoc_insertion_point(field_set:FnnModel.num_layer)
}

// repeated .Layer layer = 5;
inline int FnnModel::_internal_layer_size() const {
  return layer_.size();
}
inline int FnnModel::layer_size() const {
  return _internal_layer_size();
}
inline void FnnModel::clear_layer() {
  layer_.Clear();
}
inline ::Layer* FnnModel::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:FnnModel.layer)
  return layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Layer >*
FnnModel::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:FnnModel.layer)
  return &layer_;
}
inline const ::Layer& FnnModel::_internal_layer(int index) const {
  return layer_.Get(index);
}
inline const ::Layer& FnnModel::layer(int index) const {
  // @@protoc_insertion_point(field_get:FnnModel.layer)
  return _internal_layer(index);
}
inline ::Layer* FnnModel::_internal_add_layer() {
  return layer_.Add();
}
inline ::Layer* FnnModel::add_layer() {
  // @@protoc_insertion_point(field_add:FnnModel.layer)
  return _internal_add_layer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Layer >&
FnnModel::layer() const {
  // @@protoc_insertion_point(field_list:FnnModel.layer)
  return layer_;
}

// optional int32 dim_output = 6;
inline bool FnnModel::_internal_has_dim_output() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FnnModel::has_dim_output() const {
  return _internal_has_dim_output();
}
inline void FnnModel::clear_dim_output() {
  dim_output_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FnnModel::_internal_dim_output() const {
  return dim_output_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FnnModel::dim_output() const {
  // @@protoc_insertion_point(field_get:FnnModel.dim_output)
  return _internal_dim_output();
}
inline void FnnModel::_internal_set_dim_output(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  dim_output_ = value;
}
inline void FnnModel::set_dim_output(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dim_output(value);
  // @@protoc_insertion_point(field_set:FnnModel.dim_output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Layer_ActivationFunc> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Layer_ActivationFunc>() {
  return ::Layer_ActivationFunc_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2ffnn_5fmodel_2eproto
