// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/prediction/data_pipelines/proto/cruise_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
class ActivationParameter;
class ActivationParameterDefaultTypeInternal;
extern ActivationParameterDefaultTypeInternal _ActivationParameter_default_instance_;
class AvgPool1dParameter;
class AvgPool1dParameterDefaultTypeInternal;
extern AvgPool1dParameterDefaultTypeInternal _AvgPool1dParameter_default_instance_;
class ClassifyParameter;
class ClassifyParameterDefaultTypeInternal;
extern ClassifyParameterDefaultTypeInternal _ClassifyParameter_default_instance_;
class Conv1dParameter;
class Conv1dParameterDefaultTypeInternal;
extern Conv1dParameterDefaultTypeInternal _Conv1dParameter_default_instance_;
class CruiseModelParameter;
class CruiseModelParameterDefaultTypeInternal;
extern CruiseModelParameterDefaultTypeInternal _CruiseModelParameter_default_instance_;
class DenseParameter;
class DenseParameterDefaultTypeInternal;
extern DenseParameterDefaultTypeInternal _DenseParameter_default_instance_;
class InputParameter;
class InputParameterDefaultTypeInternal;
extern InputParameterDefaultTypeInternal _InputParameter_default_instance_;
class LaneFeatureConvParameter;
class LaneFeatureConvParameterDefaultTypeInternal;
extern LaneFeatureConvParameterDefaultTypeInternal _LaneFeatureConvParameter_default_instance_;
class MaxPool1dParameter;
class MaxPool1dParameterDefaultTypeInternal;
extern MaxPool1dParameterDefaultTypeInternal _MaxPool1dParameter_default_instance_;
class ObsFeatureFCParameter;
class ObsFeatureFCParameterDefaultTypeInternal;
extern ObsFeatureFCParameterDefaultTypeInternal _ObsFeatureFCParameter_default_instance_;
class RegressParameter;
class RegressParameterDefaultTypeInternal;
extern RegressParameterDefaultTypeInternal _RegressParameter_default_instance_;
class TensorParameter;
class TensorParameterDefaultTypeInternal;
extern TensorParameterDefaultTypeInternal _TensorParameter_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ActivationParameter* Arena::CreateMaybeMessage<::ActivationParameter>(Arena*);
template<> ::AvgPool1dParameter* Arena::CreateMaybeMessage<::AvgPool1dParameter>(Arena*);
template<> ::ClassifyParameter* Arena::CreateMaybeMessage<::ClassifyParameter>(Arena*);
template<> ::Conv1dParameter* Arena::CreateMaybeMessage<::Conv1dParameter>(Arena*);
template<> ::CruiseModelParameter* Arena::CreateMaybeMessage<::CruiseModelParameter>(Arena*);
template<> ::DenseParameter* Arena::CreateMaybeMessage<::DenseParameter>(Arena*);
template<> ::InputParameter* Arena::CreateMaybeMessage<::InputParameter>(Arena*);
template<> ::LaneFeatureConvParameter* Arena::CreateMaybeMessage<::LaneFeatureConvParameter>(Arena*);
template<> ::MaxPool1dParameter* Arena::CreateMaybeMessage<::MaxPool1dParameter>(Arena*);
template<> ::ObsFeatureFCParameter* Arena::CreateMaybeMessage<::ObsFeatureFCParameter>(Arena*);
template<> ::RegressParameter* Arena::CreateMaybeMessage<::RegressParameter>(Arena*);
template<> ::TensorParameter* Arena::CreateMaybeMessage<::TensorParameter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TensorParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TensorParameter) */ {
 public:
  TensorParameter();
  virtual ~TensorParameter();

  TensorParameter(const TensorParameter& from);
  TensorParameter(TensorParameter&& from) noexcept
    : TensorParameter() {
    *this = ::std::move(from);
  }

  inline TensorParameter& operator=(const TensorParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorParameter& operator=(TensorParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorParameter* internal_default_instance() {
    return reinterpret_cast<const TensorParameter*>(
               &_TensorParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorParameter& a, TensorParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorParameter* New() const final {
    return CreateMaybeMessage<TensorParameter>(nullptr);
  }

  TensorParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorParameter& from);
  void MergeFrom(const TensorParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TensorParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kShapeFieldNumber = 2,
  };
  // repeated float data = 1 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // repeated int32 shape = 2;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // @@protoc_insertion_point(class_scope:TensorParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class InputParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InputParameter) */ {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);
  InputParameter(InputParameter&& from) noexcept
    : InputParameter() {
    *this = ::std::move(from);
  }

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputParameter& operator=(InputParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputParameter* internal_default_instance() {
    return reinterpret_cast<const InputParameter*>(
               &_InputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InputParameter& a, InputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InputParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputParameter* New() const final {
    return CreateMaybeMessage<InputParameter>(nullptr);
  }

  InputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InputParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputShapeFieldNumber = 1,
    kDtypeFieldNumber = 2,
    kSparseFieldNumber = 3,
  };
  // repeated int32 input_shape = 1;
  int input_shape_size() const;
  private:
  int _internal_input_shape_size() const;
  public:
  void clear_input_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_input_shape() const;
  void _internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_input_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 input_shape(int index) const;
  void set_input_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_input_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      input_shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_input_shape();

  // optional string dtype = 2;
  bool has_dtype() const;
  private:
  bool _internal_has_dtype() const;
  public:
  void clear_dtype();
  const std::string& dtype() const;
  void set_dtype(const std::string& value);
  void set_dtype(std::string&& value);
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  std::string* mutable_dtype();
  std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);
  private:
  const std::string& _internal_dtype() const;
  void _internal_set_dtype(const std::string& value);
  std::string* _internal_mutable_dtype();
  public:

  // optional bool sparse = 3;
  bool has_sparse() const;
  private:
  bool _internal_has_sparse() const;
  public:
  void clear_sparse();
  bool sparse() const;
  void set_sparse(bool value);
  private:
  bool _internal_sparse() const;
  void _internal_set_sparse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InputParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > input_shape_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  bool sparse_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Conv1dParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Conv1dParameter) */ {
 public:
  Conv1dParameter();
  virtual ~Conv1dParameter();

  Conv1dParameter(const Conv1dParameter& from);
  Conv1dParameter(Conv1dParameter&& from) noexcept
    : Conv1dParameter() {
    *this = ::std::move(from);
  }

  inline Conv1dParameter& operator=(const Conv1dParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conv1dParameter& operator=(Conv1dParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conv1dParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conv1dParameter* internal_default_instance() {
    return reinterpret_cast<const Conv1dParameter*>(
               &_Conv1dParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Conv1dParameter& a, Conv1dParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Conv1dParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conv1dParameter* New() const final {
    return CreateMaybeMessage<Conv1dParameter>(nullptr);
  }

  Conv1dParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conv1dParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conv1dParameter& from);
  void MergeFrom(const Conv1dParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conv1dParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Conv1dParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kKernelFieldNumber = 3,
    kBiasFieldNumber = 4,
    kUseBiasFieldNumber = 2,
    kStrideFieldNumber = 5,
  };
  // repeated int32 shape = 1;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // optional .TensorParameter kernel = 3;
  bool has_kernel() const;
  private:
  bool _internal_has_kernel() const;
  public:
  void clear_kernel();
  const ::TensorParameter& kernel() const;
  ::TensorParameter* release_kernel();
  ::TensorParameter* mutable_kernel();
  void set_allocated_kernel(::TensorParameter* kernel);
  private:
  const ::TensorParameter& _internal_kernel() const;
  ::TensorParameter* _internal_mutable_kernel();
  public:

  // optional .TensorParameter bias = 4;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::TensorParameter& bias() const;
  ::TensorParameter* release_bias();
  ::TensorParameter* mutable_bias();
  void set_allocated_bias(::TensorParameter* bias);
  private:
  const ::TensorParameter& _internal_bias() const;
  ::TensorParameter* _internal_mutable_bias();
  public:

  // optional bool use_bias = 2;
  bool has_use_bias() const;
  private:
  bool _internal_has_use_bias() const;
  public:
  void clear_use_bias();
  bool use_bias() const;
  void set_use_bias(bool value);
  private:
  bool _internal_use_bias() const;
  void _internal_set_use_bias(bool value);
  public:

  // optional int32 stride = 5;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Conv1dParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  ::TensorParameter* kernel_;
  ::TensorParameter* bias_;
  bool use_bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class DenseParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DenseParameter) */ {
 public:
  DenseParameter();
  virtual ~DenseParameter();

  DenseParameter(const DenseParameter& from);
  DenseParameter(DenseParameter&& from) noexcept
    : DenseParameter() {
    *this = ::std::move(from);
  }

  inline DenseParameter& operator=(const DenseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseParameter& operator=(DenseParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseParameter* internal_default_instance() {
    return reinterpret_cast<const DenseParameter*>(
               &_DenseParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DenseParameter& a, DenseParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseParameter* New() const final {
    return CreateMaybeMessage<DenseParameter>(nullptr);
  }

  DenseParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseParameter& from);
  void MergeFrom(const DenseParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DenseParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivationFieldNumber = 2,
    kWeightsFieldNumber = 4,
    kBiasFieldNumber = 5,
    kUnitsFieldNumber = 1,
    kUseBiasFieldNumber = 3,
  };
  // optional string activation = 2;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const std::string& activation() const;
  void set_activation(const std::string& value);
  void set_activation(std::string&& value);
  void set_activation(const char* value);
  void set_activation(const char* value, size_t size);
  std::string* mutable_activation();
  std::string* release_activation();
  void set_allocated_activation(std::string* activation);
  private:
  const std::string& _internal_activation() const;
  void _internal_set_activation(const std::string& value);
  std::string* _internal_mutable_activation();
  public:

  // optional .TensorParameter weights = 4;
  bool has_weights() const;
  private:
  bool _internal_has_weights() const;
  public:
  void clear_weights();
  const ::TensorParameter& weights() const;
  ::TensorParameter* release_weights();
  ::TensorParameter* mutable_weights();
  void set_allocated_weights(::TensorParameter* weights);
  private:
  const ::TensorParameter& _internal_weights() const;
  ::TensorParameter* _internal_mutable_weights();
  public:

  // optional .TensorParameter bias = 5;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::TensorParameter& bias() const;
  ::TensorParameter* release_bias();
  ::TensorParameter* mutable_bias();
  void set_allocated_bias(::TensorParameter* bias);
  private:
  const ::TensorParameter& _internal_bias() const;
  ::TensorParameter* _internal_mutable_bias();
  public:

  // optional int32 units = 1;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  ::PROTOBUF_NAMESPACE_ID::int32 units() const;
  void set_units(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_units() const;
  void _internal_set_units(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool use_bias = 3;
  bool has_use_bias() const;
  private:
  bool _internal_has_use_bias() const;
  public:
  void clear_use_bias();
  bool use_bias() const;
  void set_use_bias(bool value);
  private:
  bool _internal_use_bias() const;
  void _internal_set_use_bias(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DenseParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_;
  ::TensorParameter* weights_;
  ::TensorParameter* bias_;
  ::PROTOBUF_NAMESPACE_ID::int32 units_;
  bool use_bias_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ActivationParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ActivationParameter) */ {
 public:
  ActivationParameter();
  virtual ~ActivationParameter();

  ActivationParameter(const ActivationParameter& from);
  ActivationParameter(ActivationParameter&& from) noexcept
    : ActivationParameter() {
    *this = ::std::move(from);
  }

  inline ActivationParameter& operator=(const ActivationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivationParameter& operator=(ActivationParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivationParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivationParameter* internal_default_instance() {
    return reinterpret_cast<const ActivationParameter*>(
               &_ActivationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActivationParameter& a, ActivationParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivationParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivationParameter* New() const final {
    return CreateMaybeMessage<ActivationParameter>(nullptr);
  }

  ActivationParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivationParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivationParameter& from);
  void MergeFrom(const ActivationParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivationParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ActivationParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivationFieldNumber = 1,
  };
  // optional string activation = 1;
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const std::string& activation() const;
  void set_activation(const std::string& value);
  void set_activation(std::string&& value);
  void set_activation(const char* value);
  void set_activation(const char* value, size_t size);
  std::string* mutable_activation();
  std::string* release_activation();
  void set_allocated_activation(std::string* activation);
  private:
  const std::string& _internal_activation() const;
  void _internal_set_activation(const std::string& value);
  std::string* _internal_mutable_activation();
  public:

  // @@protoc_insertion_point(class_scope:ActivationParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class MaxPool1dParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MaxPool1dParameter) */ {
 public:
  MaxPool1dParameter();
  virtual ~MaxPool1dParameter();

  MaxPool1dParameter(const MaxPool1dParameter& from);
  MaxPool1dParameter(MaxPool1dParameter&& from) noexcept
    : MaxPool1dParameter() {
    *this = ::std::move(from);
  }

  inline MaxPool1dParameter& operator=(const MaxPool1dParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaxPool1dParameter& operator=(MaxPool1dParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaxPool1dParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxPool1dParameter* internal_default_instance() {
    return reinterpret_cast<const MaxPool1dParameter*>(
               &_MaxPool1dParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MaxPool1dParameter& a, MaxPool1dParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MaxPool1dParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaxPool1dParameter* New() const final {
    return CreateMaybeMessage<MaxPool1dParameter>(nullptr);
  }

  MaxPool1dParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaxPool1dParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaxPool1dParameter& from);
  void MergeFrom(const MaxPool1dParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxPool1dParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MaxPool1dParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // optional int32 kernel_size = 1;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 stride = 2;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MaxPool1dParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class AvgPool1dParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AvgPool1dParameter) */ {
 public:
  AvgPool1dParameter();
  virtual ~AvgPool1dParameter();

  AvgPool1dParameter(const AvgPool1dParameter& from);
  AvgPool1dParameter(AvgPool1dParameter&& from) noexcept
    : AvgPool1dParameter() {
    *this = ::std::move(from);
  }

  inline AvgPool1dParameter& operator=(const AvgPool1dParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvgPool1dParameter& operator=(AvgPool1dParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AvgPool1dParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AvgPool1dParameter* internal_default_instance() {
    return reinterpret_cast<const AvgPool1dParameter*>(
               &_AvgPool1dParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AvgPool1dParameter& a, AvgPool1dParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(AvgPool1dParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AvgPool1dParameter* New() const final {
    return CreateMaybeMessage<AvgPool1dParameter>(nullptr);
  }

  AvgPool1dParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AvgPool1dParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AvgPool1dParameter& from);
  void MergeFrom(const AvgPool1dParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvgPool1dParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AvgPool1dParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // optional int32 kernel_size = 1;
  bool has_kernel_size() const;
  private:
  bool _internal_has_kernel_size() const;
  public:
  void clear_kernel_size();
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size() const;
  void set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kernel_size() const;
  void _internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 stride = 2;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AvgPool1dParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stride_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LaneFeatureConvParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LaneFeatureConvParameter) */ {
 public:
  LaneFeatureConvParameter();
  virtual ~LaneFeatureConvParameter();

  LaneFeatureConvParameter(const LaneFeatureConvParameter& from);
  LaneFeatureConvParameter(LaneFeatureConvParameter&& from) noexcept
    : LaneFeatureConvParameter() {
    *this = ::std::move(from);
  }

  inline LaneFeatureConvParameter& operator=(const LaneFeatureConvParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneFeatureConvParameter& operator=(LaneFeatureConvParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneFeatureConvParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneFeatureConvParameter* internal_default_instance() {
    return reinterpret_cast<const LaneFeatureConvParameter*>(
               &_LaneFeatureConvParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LaneFeatureConvParameter& a, LaneFeatureConvParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneFeatureConvParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneFeatureConvParameter* New() const final {
    return CreateMaybeMessage<LaneFeatureConvParameter>(nullptr);
  }

  LaneFeatureConvParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneFeatureConvParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneFeatureConvParameter& from);
  void MergeFrom(const LaneFeatureConvParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneFeatureConvParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LaneFeatureConvParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConv1D0FieldNumber = 1,
    kActivation1FieldNumber = 2,
    kConv1D2FieldNumber = 3,
    kActivation3FieldNumber = 4,
    kConv1D4FieldNumber = 5,
  };
  // optional .Conv1dParameter conv1d_0 = 1;
  bool has_conv1d_0() const;
  private:
  bool _internal_has_conv1d_0() const;
  public:
  void clear_conv1d_0();
  const ::Conv1dParameter& conv1d_0() const;
  ::Conv1dParameter* release_conv1d_0();
  ::Conv1dParameter* mutable_conv1d_0();
  void set_allocated_conv1d_0(::Conv1dParameter* conv1d_0);
  private:
  const ::Conv1dParameter& _internal_conv1d_0() const;
  ::Conv1dParameter* _internal_mutable_conv1d_0();
  public:

  // optional .ActivationParameter activation_1 = 2;
  bool has_activation_1() const;
  private:
  bool _internal_has_activation_1() const;
  public:
  void clear_activation_1();
  const ::ActivationParameter& activation_1() const;
  ::ActivationParameter* release_activation_1();
  ::ActivationParameter* mutable_activation_1();
  void set_allocated_activation_1(::ActivationParameter* activation_1);
  private:
  const ::ActivationParameter& _internal_activation_1() const;
  ::ActivationParameter* _internal_mutable_activation_1();
  public:

  // optional .Conv1dParameter conv1d_2 = 3;
  bool has_conv1d_2() const;
  private:
  bool _internal_has_conv1d_2() const;
  public:
  void clear_conv1d_2();
  const ::Conv1dParameter& conv1d_2() const;
  ::Conv1dParameter* release_conv1d_2();
  ::Conv1dParameter* mutable_conv1d_2();
  void set_allocated_conv1d_2(::Conv1dParameter* conv1d_2);
  private:
  const ::Conv1dParameter& _internal_conv1d_2() const;
  ::Conv1dParameter* _internal_mutable_conv1d_2();
  public:

  // optional .ActivationParameter activation_3 = 4;
  bool has_activation_3() const;
  private:
  bool _internal_has_activation_3() const;
  public:
  void clear_activation_3();
  const ::ActivationParameter& activation_3() const;
  ::ActivationParameter* release_activation_3();
  ::ActivationParameter* mutable_activation_3();
  void set_allocated_activation_3(::ActivationParameter* activation_3);
  private:
  const ::ActivationParameter& _internal_activation_3() const;
  ::ActivationParameter* _internal_mutable_activation_3();
  public:

  // optional .Conv1dParameter conv1d_4 = 5;
  bool has_conv1d_4() const;
  private:
  bool _internal_has_conv1d_4() const;
  public:
  void clear_conv1d_4();
  const ::Conv1dParameter& conv1d_4() const;
  ::Conv1dParameter* release_conv1d_4();
  ::Conv1dParameter* mutable_conv1d_4();
  void set_allocated_conv1d_4(::Conv1dParameter* conv1d_4);
  private:
  const ::Conv1dParameter& _internal_conv1d_4() const;
  ::Conv1dParameter* _internal_mutable_conv1d_4();
  public:

  // @@protoc_insertion_point(class_scope:LaneFeatureConvParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Conv1dParameter* conv1d_0_;
  ::ActivationParameter* activation_1_;
  ::Conv1dParameter* conv1d_2_;
  ::ActivationParameter* activation_3_;
  ::Conv1dParameter* conv1d_4_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ObsFeatureFCParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObsFeatureFCParameter) */ {
 public:
  ObsFeatureFCParameter();
  virtual ~ObsFeatureFCParameter();

  ObsFeatureFCParameter(const ObsFeatureFCParameter& from);
  ObsFeatureFCParameter(ObsFeatureFCParameter&& from) noexcept
    : ObsFeatureFCParameter() {
    *this = ::std::move(from);
  }

  inline ObsFeatureFCParameter& operator=(const ObsFeatureFCParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObsFeatureFCParameter& operator=(ObsFeatureFCParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObsFeatureFCParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObsFeatureFCParameter* internal_default_instance() {
    return reinterpret_cast<const ObsFeatureFCParameter*>(
               &_ObsFeatureFCParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ObsFeatureFCParameter& a, ObsFeatureFCParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ObsFeatureFCParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObsFeatureFCParameter* New() const final {
    return CreateMaybeMessage<ObsFeatureFCParameter>(nullptr);
  }

  ObsFeatureFCParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObsFeatureFCParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObsFeatureFCParameter& from);
  void MergeFrom(const ObsFeatureFCParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObsFeatureFCParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObsFeatureFCParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinear0FieldNumber = 1,
    kActivation1FieldNumber = 2,
    kLinear3FieldNumber = 3,
    kActivation4FieldNumber = 4,
  };
  // optional .DenseParameter linear_0 = 1;
  bool has_linear_0() const;
  private:
  bool _internal_has_linear_0() const;
  public:
  void clear_linear_0();
  const ::DenseParameter& linear_0() const;
  ::DenseParameter* release_linear_0();
  ::DenseParameter* mutable_linear_0();
  void set_allocated_linear_0(::DenseParameter* linear_0);
  private:
  const ::DenseParameter& _internal_linear_0() const;
  ::DenseParameter* _internal_mutable_linear_0();
  public:

  // optional .ActivationParameter activation_1 = 2;
  bool has_activation_1() const;
  private:
  bool _internal_has_activation_1() const;
  public:
  void clear_activation_1();
  const ::ActivationParameter& activation_1() const;
  ::ActivationParameter* release_activation_1();
  ::ActivationParameter* mutable_activation_1();
  void set_allocated_activation_1(::ActivationParameter* activation_1);
  private:
  const ::ActivationParameter& _internal_activation_1() const;
  ::ActivationParameter* _internal_mutable_activation_1();
  public:

  // optional .DenseParameter linear_3 = 3;
  bool has_linear_3() const;
  private:
  bool _internal_has_linear_3() const;
  public:
  void clear_linear_3();
  const ::DenseParameter& linear_3() const;
  ::DenseParameter* release_linear_3();
  ::DenseParameter* mutable_linear_3();
  void set_allocated_linear_3(::DenseParameter* linear_3);
  private:
  const ::DenseParameter& _internal_linear_3() const;
  ::DenseParameter* _internal_mutable_linear_3();
  public:

  // optional .ActivationParameter activation_4 = 4;
  bool has_activation_4() const;
  private:
  bool _internal_has_activation_4() const;
  public:
  void clear_activation_4();
  const ::ActivationParameter& activation_4() const;
  ::ActivationParameter* release_activation_4();
  ::ActivationParameter* mutable_activation_4();
  void set_allocated_activation_4(::ActivationParameter* activation_4);
  private:
  const ::ActivationParameter& _internal_activation_4() const;
  ::ActivationParameter* _internal_mutable_activation_4();
  public:

  // @@protoc_insertion_point(class_scope:ObsFeatureFCParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::DenseParameter* linear_0_;
  ::ActivationParameter* activation_1_;
  ::DenseParameter* linear_3_;
  ::ActivationParameter* activation_4_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ClassifyParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClassifyParameter) */ {
 public:
  ClassifyParameter();
  virtual ~ClassifyParameter();

  ClassifyParameter(const ClassifyParameter& from);
  ClassifyParameter(ClassifyParameter&& from) noexcept
    : ClassifyParameter() {
    *this = ::std::move(from);
  }

  inline ClassifyParameter& operator=(const ClassifyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassifyParameter& operator=(ClassifyParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassifyParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassifyParameter* internal_default_instance() {
    return reinterpret_cast<const ClassifyParameter*>(
               &_ClassifyParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClassifyParameter& a, ClassifyParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassifyParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassifyParameter* New() const final {
    return CreateMaybeMessage<ClassifyParameter>(nullptr);
  }

  ClassifyParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassifyParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassifyParameter& from);
  void MergeFrom(const ClassifyParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassifyParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClassifyParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinear0FieldNumber = 1,
    kActivation1FieldNumber = 2,
    kLinear3FieldNumber = 3,
    kActivation4FieldNumber = 4,
    kLinear6FieldNumber = 5,
    kActivation7FieldNumber = 6,
    kLinear9FieldNumber = 7,
    kActivation10FieldNumber = 8,
  };
  // optional .DenseParameter linear_0 = 1;
  bool has_linear_0() const;
  private:
  bool _internal_has_linear_0() const;
  public:
  void clear_linear_0();
  const ::DenseParameter& linear_0() const;
  ::DenseParameter* release_linear_0();
  ::DenseParameter* mutable_linear_0();
  void set_allocated_linear_0(::DenseParameter* linear_0);
  private:
  const ::DenseParameter& _internal_linear_0() const;
  ::DenseParameter* _internal_mutable_linear_0();
  public:

  // optional .ActivationParameter activation_1 = 2;
  bool has_activation_1() const;
  private:
  bool _internal_has_activation_1() const;
  public:
  void clear_activation_1();
  const ::ActivationParameter& activation_1() const;
  ::ActivationParameter* release_activation_1();
  ::ActivationParameter* mutable_activation_1();
  void set_allocated_activation_1(::ActivationParameter* activation_1);
  private:
  const ::ActivationParameter& _internal_activation_1() const;
  ::ActivationParameter* _internal_mutable_activation_1();
  public:

  // optional .DenseParameter linear_3 = 3;
  bool has_linear_3() const;
  private:
  bool _internal_has_linear_3() const;
  public:
  void clear_linear_3();
  const ::DenseParameter& linear_3() const;
  ::DenseParameter* release_linear_3();
  ::DenseParameter* mutable_linear_3();
  void set_allocated_linear_3(::DenseParameter* linear_3);
  private:
  const ::DenseParameter& _internal_linear_3() const;
  ::DenseParameter* _internal_mutable_linear_3();
  public:

  // optional .ActivationParameter activation_4 = 4;
  bool has_activation_4() const;
  private:
  bool _internal_has_activation_4() const;
  public:
  void clear_activation_4();
  const ::ActivationParameter& activation_4() const;
  ::ActivationParameter* release_activation_4();
  ::ActivationParameter* mutable_activation_4();
  void set_allocated_activation_4(::ActivationParameter* activation_4);
  private:
  const ::ActivationParameter& _internal_activation_4() const;
  ::ActivationParameter* _internal_mutable_activation_4();
  public:

  // optional .DenseParameter linear_6 = 5;
  bool has_linear_6() const;
  private:
  bool _internal_has_linear_6() const;
  public:
  void clear_linear_6();
  const ::DenseParameter& linear_6() const;
  ::DenseParameter* release_linear_6();
  ::DenseParameter* mutable_linear_6();
  void set_allocated_linear_6(::DenseParameter* linear_6);
  private:
  const ::DenseParameter& _internal_linear_6() const;
  ::DenseParameter* _internal_mutable_linear_6();
  public:

  // optional .ActivationParameter activation_7 = 6;
  bool has_activation_7() const;
  private:
  bool _internal_has_activation_7() const;
  public:
  void clear_activation_7();
  const ::ActivationParameter& activation_7() const;
  ::ActivationParameter* release_activation_7();
  ::ActivationParameter* mutable_activation_7();
  void set_allocated_activation_7(::ActivationParameter* activation_7);
  private:
  const ::ActivationParameter& _internal_activation_7() const;
  ::ActivationParameter* _internal_mutable_activation_7();
  public:

  // optional .DenseParameter linear_9 = 7;
  bool has_linear_9() const;
  private:
  bool _internal_has_linear_9() const;
  public:
  void clear_linear_9();
  const ::DenseParameter& linear_9() const;
  ::DenseParameter* release_linear_9();
  ::DenseParameter* mutable_linear_9();
  void set_allocated_linear_9(::DenseParameter* linear_9);
  private:
  const ::DenseParameter& _internal_linear_9() const;
  ::DenseParameter* _internal_mutable_linear_9();
  public:

  // optional .ActivationParameter activation_10 = 8;
  bool has_activation_10() const;
  private:
  bool _internal_has_activation_10() const;
  public:
  void clear_activation_10();
  const ::ActivationParameter& activation_10() const;
  ::ActivationParameter* release_activation_10();
  ::ActivationParameter* mutable_activation_10();
  void set_allocated_activation_10(::ActivationParameter* activation_10);
  private:
  const ::ActivationParameter& _internal_activation_10() const;
  ::ActivationParameter* _internal_mutable_activation_10();
  public:

  // @@protoc_insertion_point(class_scope:ClassifyParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::DenseParameter* linear_0_;
  ::ActivationParameter* activation_1_;
  ::DenseParameter* linear_3_;
  ::ActivationParameter* activation_4_;
  ::DenseParameter* linear_6_;
  ::ActivationParameter* activation_7_;
  ::DenseParameter* linear_9_;
  ::ActivationParameter* activation_10_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class RegressParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegressParameter) */ {
 public:
  RegressParameter();
  virtual ~RegressParameter();

  RegressParameter(const RegressParameter& from);
  RegressParameter(RegressParameter&& from) noexcept
    : RegressParameter() {
    *this = ::std::move(from);
  }

  inline RegressParameter& operator=(const RegressParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegressParameter& operator=(RegressParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegressParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegressParameter* internal_default_instance() {
    return reinterpret_cast<const RegressParameter*>(
               &_RegressParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RegressParameter& a, RegressParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RegressParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegressParameter* New() const final {
    return CreateMaybeMessage<RegressParameter>(nullptr);
  }

  RegressParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegressParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegressParameter& from);
  void MergeFrom(const RegressParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegressParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegressParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinear0FieldNumber = 1,
    kActivation1FieldNumber = 2,
    kLinear3FieldNumber = 3,
    kActivation4FieldNumber = 4,
    kLinear6FieldNumber = 5,
    kActivation7FieldNumber = 6,
    kLinear9FieldNumber = 7,
    kActivation10FieldNumber = 8,
  };
  // optional .DenseParameter linear_0 = 1;
  bool has_linear_0() const;
  private:
  bool _internal_has_linear_0() const;
  public:
  void clear_linear_0();
  const ::DenseParameter& linear_0() const;
  ::DenseParameter* release_linear_0();
  ::DenseParameter* mutable_linear_0();
  void set_allocated_linear_0(::DenseParameter* linear_0);
  private:
  const ::DenseParameter& _internal_linear_0() const;
  ::DenseParameter* _internal_mutable_linear_0();
  public:

  // optional .ActivationParameter activation_1 = 2;
  bool has_activation_1() const;
  private:
  bool _internal_has_activation_1() const;
  public:
  void clear_activation_1();
  const ::ActivationParameter& activation_1() const;
  ::ActivationParameter* release_activation_1();
  ::ActivationParameter* mutable_activation_1();
  void set_allocated_activation_1(::ActivationParameter* activation_1);
  private:
  const ::ActivationParameter& _internal_activation_1() const;
  ::ActivationParameter* _internal_mutable_activation_1();
  public:

  // optional .DenseParameter linear_3 = 3;
  bool has_linear_3() const;
  private:
  bool _internal_has_linear_3() const;
  public:
  void clear_linear_3();
  const ::DenseParameter& linear_3() const;
  ::DenseParameter* release_linear_3();
  ::DenseParameter* mutable_linear_3();
  void set_allocated_linear_3(::DenseParameter* linear_3);
  private:
  const ::DenseParameter& _internal_linear_3() const;
  ::DenseParameter* _internal_mutable_linear_3();
  public:

  // optional .ActivationParameter activation_4 = 4;
  bool has_activation_4() const;
  private:
  bool _internal_has_activation_4() const;
  public:
  void clear_activation_4();
  const ::ActivationParameter& activation_4() const;
  ::ActivationParameter* release_activation_4();
  ::ActivationParameter* mutable_activation_4();
  void set_allocated_activation_4(::ActivationParameter* activation_4);
  private:
  const ::ActivationParameter& _internal_activation_4() const;
  ::ActivationParameter* _internal_mutable_activation_4();
  public:

  // optional .DenseParameter linear_6 = 5;
  bool has_linear_6() const;
  private:
  bool _internal_has_linear_6() const;
  public:
  void clear_linear_6();
  const ::DenseParameter& linear_6() const;
  ::DenseParameter* release_linear_6();
  ::DenseParameter* mutable_linear_6();
  void set_allocated_linear_6(::DenseParameter* linear_6);
  private:
  const ::DenseParameter& _internal_linear_6() const;
  ::DenseParameter* _internal_mutable_linear_6();
  public:

  // optional .ActivationParameter activation_7 = 6;
  bool has_activation_7() const;
  private:
  bool _internal_has_activation_7() const;
  public:
  void clear_activation_7();
  const ::ActivationParameter& activation_7() const;
  ::ActivationParameter* release_activation_7();
  ::ActivationParameter* mutable_activation_7();
  void set_allocated_activation_7(::ActivationParameter* activation_7);
  private:
  const ::ActivationParameter& _internal_activation_7() const;
  ::ActivationParameter* _internal_mutable_activation_7();
  public:

  // optional .DenseParameter linear_9 = 7;
  bool has_linear_9() const;
  private:
  bool _internal_has_linear_9() const;
  public:
  void clear_linear_9();
  const ::DenseParameter& linear_9() const;
  ::DenseParameter* release_linear_9();
  ::DenseParameter* mutable_linear_9();
  void set_allocated_linear_9(::DenseParameter* linear_9);
  private:
  const ::DenseParameter& _internal_linear_9() const;
  ::DenseParameter* _internal_mutable_linear_9();
  public:

  // optional .ActivationParameter activation_10 = 8;
  bool has_activation_10() const;
  private:
  bool _internal_has_activation_10() const;
  public:
  void clear_activation_10();
  const ::ActivationParameter& activation_10() const;
  ::ActivationParameter* release_activation_10();
  ::ActivationParameter* mutable_activation_10();
  void set_allocated_activation_10(::ActivationParameter* activation_10);
  private:
  const ::ActivationParameter& _internal_activation_10() const;
  ::ActivationParameter* _internal_mutable_activation_10();
  public:

  // @@protoc_insertion_point(class_scope:RegressParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::DenseParameter* linear_0_;
  ::ActivationParameter* activation_1_;
  ::DenseParameter* linear_3_;
  ::ActivationParameter* activation_4_;
  ::DenseParameter* linear_6_;
  ::ActivationParameter* activation_7_;
  ::DenseParameter* linear_9_;
  ::ActivationParameter* activation_10_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class CruiseModelParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CruiseModelParameter) */ {
 public:
  CruiseModelParameter();
  virtual ~CruiseModelParameter();

  CruiseModelParameter(const CruiseModelParameter& from);
  CruiseModelParameter(CruiseModelParameter&& from) noexcept
    : CruiseModelParameter() {
    *this = ::std::move(from);
  }

  inline CruiseModelParameter& operator=(const CruiseModelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CruiseModelParameter& operator=(CruiseModelParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CruiseModelParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CruiseModelParameter* internal_default_instance() {
    return reinterpret_cast<const CruiseModelParameter*>(
               &_CruiseModelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CruiseModelParameter& a, CruiseModelParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(CruiseModelParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CruiseModelParameter* New() const final {
    return CreateMaybeMessage<CruiseModelParameter>(nullptr);
  }

  CruiseModelParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CruiseModelParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CruiseModelParameter& from);
  void MergeFrom(const CruiseModelParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CruiseModelParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CruiseModelParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto);
    return ::descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneFeatureConvFieldNumber = 1,
    kLaneFeatureMaxpoolFieldNumber = 2,
    kLaneFeatureAvgpoolFieldNumber = 3,
    kObsFeatureFcFieldNumber = 5,
    kClassifyFieldNumber = 6,
    kRegressFieldNumber = 7,
  };
  // optional .LaneFeatureConvParameter lane_feature_conv = 1;
  bool has_lane_feature_conv() const;
  private:
  bool _internal_has_lane_feature_conv() const;
  public:
  void clear_lane_feature_conv();
  const ::LaneFeatureConvParameter& lane_feature_conv() const;
  ::LaneFeatureConvParameter* release_lane_feature_conv();
  ::LaneFeatureConvParameter* mutable_lane_feature_conv();
  void set_allocated_lane_feature_conv(::LaneFeatureConvParameter* lane_feature_conv);
  private:
  const ::LaneFeatureConvParameter& _internal_lane_feature_conv() const;
  ::LaneFeatureConvParameter* _internal_mutable_lane_feature_conv();
  public:

  // optional .MaxPool1dParameter lane_feature_maxpool = 2;
  bool has_lane_feature_maxpool() const;
  private:
  bool _internal_has_lane_feature_maxpool() const;
  public:
  void clear_lane_feature_maxpool();
  const ::MaxPool1dParameter& lane_feature_maxpool() const;
  ::MaxPool1dParameter* release_lane_feature_maxpool();
  ::MaxPool1dParameter* mutable_lane_feature_maxpool();
  void set_allocated_lane_feature_maxpool(::MaxPool1dParameter* lane_feature_maxpool);
  private:
  const ::MaxPool1dParameter& _internal_lane_feature_maxpool() const;
  ::MaxPool1dParameter* _internal_mutable_lane_feature_maxpool();
  public:

  // optional .AvgPool1dParameter lane_feature_avgpool = 3;
  bool has_lane_feature_avgpool() const;
  private:
  bool _internal_has_lane_feature_avgpool() const;
  public:
  void clear_lane_feature_avgpool();
  const ::AvgPool1dParameter& lane_feature_avgpool() const;
  ::AvgPool1dParameter* release_lane_feature_avgpool();
  ::AvgPool1dParameter* mutable_lane_feature_avgpool();
  void set_allocated_lane_feature_avgpool(::AvgPool1dParameter* lane_feature_avgpool);
  private:
  const ::AvgPool1dParameter& _internal_lane_feature_avgpool() const;
  ::AvgPool1dParameter* _internal_mutable_lane_feature_avgpool();
  public:

  // optional .ObsFeatureFCParameter obs_feature_fc = 5;
  bool has_obs_feature_fc() const;
  private:
  bool _internal_has_obs_feature_fc() const;
  public:
  void clear_obs_feature_fc();
  const ::ObsFeatureFCParameter& obs_feature_fc() const;
  ::ObsFeatureFCParameter* release_obs_feature_fc();
  ::ObsFeatureFCParameter* mutable_obs_feature_fc();
  void set_allocated_obs_feature_fc(::ObsFeatureFCParameter* obs_feature_fc);
  private:
  const ::ObsFeatureFCParameter& _internal_obs_feature_fc() const;
  ::ObsFeatureFCParameter* _internal_mutable_obs_feature_fc();
  public:

  // optional .ClassifyParameter classify = 6;
  bool has_classify() const;
  private:
  bool _internal_has_classify() const;
  public:
  void clear_classify();
  const ::ClassifyParameter& classify() const;
  ::ClassifyParameter* release_classify();
  ::ClassifyParameter* mutable_classify();
  void set_allocated_classify(::ClassifyParameter* classify);
  private:
  const ::ClassifyParameter& _internal_classify() const;
  ::ClassifyParameter* _internal_mutable_classify();
  public:

  // optional .RegressParameter regress = 7;
  bool has_regress() const;
  private:
  bool _internal_has_regress() const;
  public:
  void clear_regress();
  const ::RegressParameter& regress() const;
  ::RegressParameter* release_regress();
  ::RegressParameter* mutable_regress();
  void set_allocated_regress(::RegressParameter* regress);
  private:
  const ::RegressParameter& _internal_regress() const;
  ::RegressParameter* _internal_mutable_regress();
  public:

  // @@protoc_insertion_point(class_scope:CruiseModelParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::LaneFeatureConvParameter* lane_feature_conv_;
  ::MaxPool1dParameter* lane_feature_maxpool_;
  ::AvgPool1dParameter* lane_feature_avgpool_;
  ::ObsFeatureFCParameter* obs_feature_fc_;
  ::ClassifyParameter* classify_;
  ::RegressParameter* regress_;
  friend struct ::TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorParameter

// repeated float data = 1 [packed = true];
inline int TensorParameter::_internal_data_size() const {
  return data_.size();
}
inline int TensorParameter::data_size() const {
  return _internal_data_size();
}
inline void TensorParameter::clear_data() {
  data_.Clear();
}
inline float TensorParameter::_internal_data(int index) const {
  return data_.Get(index);
}
inline float TensorParameter::data(int index) const {
  // @@protoc_insertion_point(field_get:TensorParameter.data)
  return _internal_data(index);
}
inline void TensorParameter::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:TensorParameter.data)
}
inline void TensorParameter::_internal_add_data(float value) {
  data_.Add(value);
}
inline void TensorParameter::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:TensorParameter.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorParameter::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorParameter::data() const {
  // @@protoc_insertion_point(field_list:TensorParameter.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorParameter::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorParameter::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:TensorParameter.data)
  return _internal_mutable_data();
}

// repeated int32 shape = 2;
inline int TensorParameter::_internal_shape_size() const {
  return shape_.size();
}
inline int TensorParameter::shape_size() const {
  return _internal_shape_size();
}
inline void TensorParameter::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorParameter::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:TensorParameter.shape)
  return _internal_shape(index);
}
inline void TensorParameter::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:TensorParameter.shape)
}
inline void TensorParameter::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void TensorParameter::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:TensorParameter.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorParameter::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorParameter::shape() const {
  // @@protoc_insertion_point(field_list:TensorParameter.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorParameter::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:TensorParameter.shape)
  return _internal_mutable_shape();
}

// -------------------------------------------------------------------

// InputParameter

// repeated int32 input_shape = 1;
inline int InputParameter::_internal_input_shape_size() const {
  return input_shape_.size();
}
inline int InputParameter::input_shape_size() const {
  return _internal_input_shape_size();
}
inline void InputParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputParameter::_internal_input_shape(int index) const {
  return input_shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:InputParameter.input_shape)
  return _internal_input_shape(index);
}
inline void InputParameter::set_input_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:InputParameter.input_shape)
}
inline void InputParameter::_internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  input_shape_.Add(value);
}
inline void InputParameter::add_input_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_input_shape(value);
  // @@protoc_insertion_point(field_add:InputParameter.input_shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InputParameter::_internal_input_shape() const {
  return input_shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InputParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:InputParameter.input_shape)
  return _internal_input_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InputParameter::_internal_mutable_input_shape() {
  return &input_shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InputParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:InputParameter.input_shape)
  return _internal_mutable_input_shape();
}

// optional string dtype = 2;
inline bool InputParameter::_internal_has_dtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InputParameter::has_dtype() const {
  return _internal_has_dtype();
}
inline void InputParameter::clear_dtype() {
  dtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputParameter::dtype() const {
  // @@protoc_insertion_point(field_get:InputParameter.dtype)
  return _internal_dtype();
}
inline void InputParameter::set_dtype(const std::string& value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:InputParameter.dtype)
}
inline std::string* InputParameter::mutable_dtype() {
  // @@protoc_insertion_point(field_mutable:InputParameter.dtype)
  return _internal_mutable_dtype();
}
inline const std::string& InputParameter::_internal_dtype() const {
  return dtype_.GetNoArena();
}
inline void InputParameter::_internal_set_dtype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InputParameter::set_dtype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InputParameter.dtype)
}
inline void InputParameter::set_dtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InputParameter.dtype)
}
inline void InputParameter::set_dtype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InputParameter.dtype)
}
inline std::string* InputParameter::_internal_mutable_dtype() {
  _has_bits_[0] |= 0x00000001u;
  return dtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputParameter::release_dtype() {
  // @@protoc_insertion_point(field_release:InputParameter.dtype)
  if (!_internal_has_dtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dtype_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputParameter::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype);
  // @@protoc_insertion_point(field_set_allocated:InputParameter.dtype)
}

// optional bool sparse = 3;
inline bool InputParameter::_internal_has_sparse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InputParameter::has_sparse() const {
  return _internal_has_sparse();
}
inline void InputParameter::clear_sparse() {
  sparse_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool InputParameter::_internal_sparse() const {
  return sparse_;
}
inline bool InputParameter::sparse() const {
  // @@protoc_insertion_point(field_get:InputParameter.sparse)
  return _internal_sparse();
}
inline void InputParameter::_internal_set_sparse(bool value) {
  _has_bits_[0] |= 0x00000002u;
  sparse_ = value;
}
inline void InputParameter::set_sparse(bool value) {
  _internal_set_sparse(value);
  // @@protoc_insertion_point(field_set:InputParameter.sparse)
}

// -------------------------------------------------------------------

// Conv1dParameter

// repeated int32 shape = 1;
inline int Conv1dParameter::_internal_shape_size() const {
  return shape_.size();
}
inline int Conv1dParameter::shape_size() const {
  return _internal_shape_size();
}
inline void Conv1dParameter::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conv1dParameter::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conv1dParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:Conv1dParameter.shape)
  return _internal_shape(index);
}
inline void Conv1dParameter::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:Conv1dParameter.shape)
}
inline void Conv1dParameter::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void Conv1dParameter::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:Conv1dParameter.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Conv1dParameter::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Conv1dParameter::shape() const {
  // @@protoc_insertion_point(field_list:Conv1dParameter.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Conv1dParameter::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Conv1dParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:Conv1dParameter.shape)
  return _internal_mutable_shape();
}

// optional bool use_bias = 2;
inline bool Conv1dParameter::_internal_has_use_bias() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Conv1dParameter::has_use_bias() const {
  return _internal_has_use_bias();
}
inline void Conv1dParameter::clear_use_bias() {
  use_bias_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Conv1dParameter::_internal_use_bias() const {
  return use_bias_;
}
inline bool Conv1dParameter::use_bias() const {
  // @@protoc_insertion_point(field_get:Conv1dParameter.use_bias)
  return _internal_use_bias();
}
inline void Conv1dParameter::_internal_set_use_bias(bool value) {
  _has_bits_[0] |= 0x00000004u;
  use_bias_ = value;
}
inline void Conv1dParameter::set_use_bias(bool value) {
  _internal_set_use_bias(value);
  // @@protoc_insertion_point(field_set:Conv1dParameter.use_bias)
}

// optional .TensorParameter kernel = 3;
inline bool Conv1dParameter::_internal_has_kernel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || kernel_ != nullptr);
  return value;
}
inline bool Conv1dParameter::has_kernel() const {
  return _internal_has_kernel();
}
inline void Conv1dParameter::clear_kernel() {
  if (kernel_ != nullptr) kernel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TensorParameter& Conv1dParameter::_internal_kernel() const {
  const ::TensorParameter* p = kernel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TensorParameter*>(
      &::_TensorParameter_default_instance_);
}
inline const ::TensorParameter& Conv1dParameter::kernel() const {
  // @@protoc_insertion_point(field_get:Conv1dParameter.kernel)
  return _internal_kernel();
}
inline ::TensorParameter* Conv1dParameter::release_kernel() {
  // @@protoc_insertion_point(field_release:Conv1dParameter.kernel)
  _has_bits_[0] &= ~0x00000001u;
  ::TensorParameter* temp = kernel_;
  kernel_ = nullptr;
  return temp;
}
inline ::TensorParameter* Conv1dParameter::_internal_mutable_kernel() {
  _has_bits_[0] |= 0x00000001u;
  if (kernel_ == nullptr) {
    auto* p = CreateMaybeMessage<::TensorParameter>(GetArenaNoVirtual());
    kernel_ = p;
  }
  return kernel_;
}
inline ::TensorParameter* Conv1dParameter::mutable_kernel() {
  // @@protoc_insertion_point(field_mutable:Conv1dParameter.kernel)
  return _internal_mutable_kernel();
}
inline void Conv1dParameter::set_allocated_kernel(::TensorParameter* kernel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kernel_;
  }
  if (kernel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kernel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kernel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kernel_ = kernel;
  // @@protoc_insertion_point(field_set_allocated:Conv1dParameter.kernel)
}

// optional .TensorParameter bias = 4;
inline bool Conv1dParameter::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_ != nullptr);
  return value;
}
inline bool Conv1dParameter::has_bias() const {
  return _internal_has_bias();
}
inline void Conv1dParameter::clear_bias() {
  if (bias_ != nullptr) bias_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TensorParameter& Conv1dParameter::_internal_bias() const {
  const ::TensorParameter* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TensorParameter*>(
      &::_TensorParameter_default_instance_);
}
inline const ::TensorParameter& Conv1dParameter::bias() const {
  // @@protoc_insertion_point(field_get:Conv1dParameter.bias)
  return _internal_bias();
}
inline ::TensorParameter* Conv1dParameter::release_bias() {
  // @@protoc_insertion_point(field_release:Conv1dParameter.bias)
  _has_bits_[0] &= ~0x00000002u;
  ::TensorParameter* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::TensorParameter* Conv1dParameter::_internal_mutable_bias() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::TensorParameter>(GetArenaNoVirtual());
    bias_ = p;
  }
  return bias_;
}
inline ::TensorParameter* Conv1dParameter::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:Conv1dParameter.bias)
  return _internal_mutable_bias();
}
inline void Conv1dParameter::set_allocated_bias(::TensorParameter* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:Conv1dParameter.bias)
}

// optional int32 stride = 5;
inline bool Conv1dParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Conv1dParameter::has_stride() const {
  return _internal_has_stride();
}
inline void Conv1dParameter::clear_stride() {
  stride_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conv1dParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conv1dParameter::stride() const {
  // @@protoc_insertion_point(field_get:Conv1dParameter.stride)
  return _internal_stride();
}
inline void Conv1dParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  stride_ = value;
}
inline void Conv1dParameter::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:Conv1dParameter.stride)
}

// -------------------------------------------------------------------

// DenseParameter

// optional int32 units = 1;
inline bool DenseParameter::_internal_has_units() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DenseParameter::has_units() const {
  return _internal_has_units();
}
inline void DenseParameter::clear_units() {
  units_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DenseParameter::_internal_units() const {
  return units_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DenseParameter::units() const {
  // @@protoc_insertion_point(field_get:DenseParameter.units)
  return _internal_units();
}
inline void DenseParameter::_internal_set_units(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  units_ = value;
}
inline void DenseParameter::set_units(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:DenseParameter.units)
}

// optional string activation = 2;
inline bool DenseParameter::_internal_has_activation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DenseParameter::has_activation() const {
  return _internal_has_activation();
}
inline void DenseParameter::clear_activation() {
  activation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DenseParameter::activation() const {
  // @@protoc_insertion_point(field_get:DenseParameter.activation)
  return _internal_activation();
}
inline void DenseParameter::set_activation(const std::string& value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:DenseParameter.activation)
}
inline std::string* DenseParameter::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:DenseParameter.activation)
  return _internal_mutable_activation();
}
inline const std::string& DenseParameter::_internal_activation() const {
  return activation_.GetNoArena();
}
inline void DenseParameter::_internal_set_activation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DenseParameter::set_activation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DenseParameter.activation)
}
inline void DenseParameter::set_activation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DenseParameter.activation)
}
inline void DenseParameter::set_activation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DenseParameter.activation)
}
inline std::string* DenseParameter::_internal_mutable_activation() {
  _has_bits_[0] |= 0x00000001u;
  return activation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DenseParameter::release_activation() {
  // @@protoc_insertion_point(field_release:DenseParameter.activation)
  if (!_internal_has_activation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return activation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DenseParameter::set_allocated_activation(std::string* activation) {
  if (activation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation);
  // @@protoc_insertion_point(field_set_allocated:DenseParameter.activation)
}

// optional bool use_bias = 3;
inline bool DenseParameter::_internal_has_use_bias() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DenseParameter::has_use_bias() const {
  return _internal_has_use_bias();
}
inline void DenseParameter::clear_use_bias() {
  use_bias_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DenseParameter::_internal_use_bias() const {
  return use_bias_;
}
inline bool DenseParameter::use_bias() const {
  // @@protoc_insertion_point(field_get:DenseParameter.use_bias)
  return _internal_use_bias();
}
inline void DenseParameter::_internal_set_use_bias(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_bias_ = value;
}
inline void DenseParameter::set_use_bias(bool value) {
  _internal_set_use_bias(value);
  // @@protoc_insertion_point(field_set:DenseParameter.use_bias)
}

// optional .TensorParameter weights = 4;
inline bool DenseParameter::_internal_has_weights() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || weights_ != nullptr);
  return value;
}
inline bool DenseParameter::has_weights() const {
  return _internal_has_weights();
}
inline void DenseParameter::clear_weights() {
  if (weights_ != nullptr) weights_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TensorParameter& DenseParameter::_internal_weights() const {
  const ::TensorParameter* p = weights_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TensorParameter*>(
      &::_TensorParameter_default_instance_);
}
inline const ::TensorParameter& DenseParameter::weights() const {
  // @@protoc_insertion_point(field_get:DenseParameter.weights)
  return _internal_weights();
}
inline ::TensorParameter* DenseParameter::release_weights() {
  // @@protoc_insertion_point(field_release:DenseParameter.weights)
  _has_bits_[0] &= ~0x00000002u;
  ::TensorParameter* temp = weights_;
  weights_ = nullptr;
  return temp;
}
inline ::TensorParameter* DenseParameter::_internal_mutable_weights() {
  _has_bits_[0] |= 0x00000002u;
  if (weights_ == nullptr) {
    auto* p = CreateMaybeMessage<::TensorParameter>(GetArenaNoVirtual());
    weights_ = p;
  }
  return weights_;
}
inline ::TensorParameter* DenseParameter::mutable_weights() {
  // @@protoc_insertion_point(field_mutable:DenseParameter.weights)
  return _internal_mutable_weights();
}
inline void DenseParameter::set_allocated_weights(::TensorParameter* weights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weights_;
  }
  if (weights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  weights_ = weights;
  // @@protoc_insertion_point(field_set_allocated:DenseParameter.weights)
}

// optional .TensorParameter bias = 5;
inline bool DenseParameter::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || bias_ != nullptr);
  return value;
}
inline bool DenseParameter::has_bias() const {
  return _internal_has_bias();
}
inline void DenseParameter::clear_bias() {
  if (bias_ != nullptr) bias_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::TensorParameter& DenseParameter::_internal_bias() const {
  const ::TensorParameter* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TensorParameter*>(
      &::_TensorParameter_default_instance_);
}
inline const ::TensorParameter& DenseParameter::bias() const {
  // @@protoc_insertion_point(field_get:DenseParameter.bias)
  return _internal_bias();
}
inline ::TensorParameter* DenseParameter::release_bias() {
  // @@protoc_insertion_point(field_release:DenseParameter.bias)
  _has_bits_[0] &= ~0x00000004u;
  ::TensorParameter* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::TensorParameter* DenseParameter::_internal_mutable_bias() {
  _has_bits_[0] |= 0x00000004u;
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::TensorParameter>(GetArenaNoVirtual());
    bias_ = p;
  }
  return bias_;
}
inline ::TensorParameter* DenseParameter::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:DenseParameter.bias)
  return _internal_mutable_bias();
}
inline void DenseParameter::set_allocated_bias(::TensorParameter* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:DenseParameter.bias)
}

// -------------------------------------------------------------------

// ActivationParameter

// optional string activation = 1;
inline bool ActivationParameter::_internal_has_activation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActivationParameter::has_activation() const {
  return _internal_has_activation();
}
inline void ActivationParameter::clear_activation() {
  activation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActivationParameter::activation() const {
  // @@protoc_insertion_point(field_get:ActivationParameter.activation)
  return _internal_activation();
}
inline void ActivationParameter::set_activation(const std::string& value) {
  _internal_set_activation(value);
  // @@protoc_insertion_point(field_set:ActivationParameter.activation)
}
inline std::string* ActivationParameter::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:ActivationParameter.activation)
  return _internal_mutable_activation();
}
inline const std::string& ActivationParameter::_internal_activation() const {
  return activation_.GetNoArena();
}
inline void ActivationParameter::_internal_set_activation(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivationParameter::set_activation(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ActivationParameter.activation)
}
inline void ActivationParameter::set_activation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ActivationParameter.activation)
}
inline void ActivationParameter::set_activation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  activation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ActivationParameter.activation)
}
inline std::string* ActivationParameter::_internal_mutable_activation() {
  _has_bits_[0] |= 0x00000001u;
  return activation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivationParameter::release_activation() {
  // @@protoc_insertion_point(field_release:ActivationParameter.activation)
  if (!_internal_has_activation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return activation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivationParameter::set_allocated_activation(std::string* activation) {
  if (activation != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation);
  // @@protoc_insertion_point(field_set_allocated:ActivationParameter.activation)
}

// -------------------------------------------------------------------

// MaxPool1dParameter

// optional int32 kernel_size = 1;
inline bool MaxPool1dParameter::_internal_has_kernel_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MaxPool1dParameter::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void MaxPool1dParameter::clear_kernel_size() {
  kernel_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaxPool1dParameter::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaxPool1dParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:MaxPool1dParameter.kernel_size)
  return _internal_kernel_size();
}
inline void MaxPool1dParameter::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  kernel_size_ = value;
}
inline void MaxPool1dParameter::set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:MaxPool1dParameter.kernel_size)
}

// optional int32 stride = 2;
inline bool MaxPool1dParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MaxPool1dParameter::has_stride() const {
  return _internal_has_stride();
}
inline void MaxPool1dParameter::clear_stride() {
  stride_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaxPool1dParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MaxPool1dParameter::stride() const {
  // @@protoc_insertion_point(field_get:MaxPool1dParameter.stride)
  return _internal_stride();
}
inline void MaxPool1dParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  stride_ = value;
}
inline void MaxPool1dParameter::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:MaxPool1dParameter.stride)
}

// -------------------------------------------------------------------

// AvgPool1dParameter

// optional int32 kernel_size = 1;
inline bool AvgPool1dParameter::_internal_has_kernel_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AvgPool1dParameter::has_kernel_size() const {
  return _internal_has_kernel_size();
}
inline void AvgPool1dParameter::clear_kernel_size() {
  kernel_size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvgPool1dParameter::_internal_kernel_size() const {
  return kernel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvgPool1dParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:AvgPool1dParameter.kernel_size)
  return _internal_kernel_size();
}
inline void AvgPool1dParameter::_internal_set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  kernel_size_ = value;
}
inline void AvgPool1dParameter::set_kernel_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:AvgPool1dParameter.kernel_size)
}

// optional int32 stride = 2;
inline bool AvgPool1dParameter::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AvgPool1dParameter::has_stride() const {
  return _internal_has_stride();
}
inline void AvgPool1dParameter::clear_stride() {
  stride_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvgPool1dParameter::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AvgPool1dParameter::stride() const {
  // @@protoc_insertion_point(field_get:AvgPool1dParameter.stride)
  return _internal_stride();
}
inline void AvgPool1dParameter::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  stride_ = value;
}
inline void AvgPool1dParameter::set_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:AvgPool1dParameter.stride)
}

// -------------------------------------------------------------------

// LaneFeatureConvParameter

// optional .Conv1dParameter conv1d_0 = 1;
inline bool LaneFeatureConvParameter::_internal_has_conv1d_0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || conv1d_0_ != nullptr);
  return value;
}
inline bool LaneFeatureConvParameter::has_conv1d_0() const {
  return _internal_has_conv1d_0();
}
inline void LaneFeatureConvParameter::clear_conv1d_0() {
  if (conv1d_0_ != nullptr) conv1d_0_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Conv1dParameter& LaneFeatureConvParameter::_internal_conv1d_0() const {
  const ::Conv1dParameter* p = conv1d_0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Conv1dParameter*>(
      &::_Conv1dParameter_default_instance_);
}
inline const ::Conv1dParameter& LaneFeatureConvParameter::conv1d_0() const {
  // @@protoc_insertion_point(field_get:LaneFeatureConvParameter.conv1d_0)
  return _internal_conv1d_0();
}
inline ::Conv1dParameter* LaneFeatureConvParameter::release_conv1d_0() {
  // @@protoc_insertion_point(field_release:LaneFeatureConvParameter.conv1d_0)
  _has_bits_[0] &= ~0x00000001u;
  ::Conv1dParameter* temp = conv1d_0_;
  conv1d_0_ = nullptr;
  return temp;
}
inline ::Conv1dParameter* LaneFeatureConvParameter::_internal_mutable_conv1d_0() {
  _has_bits_[0] |= 0x00000001u;
  if (conv1d_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::Conv1dParameter>(GetArenaNoVirtual());
    conv1d_0_ = p;
  }
  return conv1d_0_;
}
inline ::Conv1dParameter* LaneFeatureConvParameter::mutable_conv1d_0() {
  // @@protoc_insertion_point(field_mutable:LaneFeatureConvParameter.conv1d_0)
  return _internal_mutable_conv1d_0();
}
inline void LaneFeatureConvParameter::set_allocated_conv1d_0(::Conv1dParameter* conv1d_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conv1d_0_;
  }
  if (conv1d_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conv1d_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv1d_0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conv1d_0_ = conv1d_0;
  // @@protoc_insertion_point(field_set_allocated:LaneFeatureConvParameter.conv1d_0)
}

// optional .ActivationParameter activation_1 = 2;
inline bool LaneFeatureConvParameter::_internal_has_activation_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || activation_1_ != nullptr);
  return value;
}
inline bool LaneFeatureConvParameter::has_activation_1() const {
  return _internal_has_activation_1();
}
inline void LaneFeatureConvParameter::clear_activation_1() {
  if (activation_1_ != nullptr) activation_1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ActivationParameter& LaneFeatureConvParameter::_internal_activation_1() const {
  const ::ActivationParameter* p = activation_1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& LaneFeatureConvParameter::activation_1() const {
  // @@protoc_insertion_point(field_get:LaneFeatureConvParameter.activation_1)
  return _internal_activation_1();
}
inline ::ActivationParameter* LaneFeatureConvParameter::release_activation_1() {
  // @@protoc_insertion_point(field_release:LaneFeatureConvParameter.activation_1)
  _has_bits_[0] &= ~0x00000002u;
  ::ActivationParameter* temp = activation_1_;
  activation_1_ = nullptr;
  return temp;
}
inline ::ActivationParameter* LaneFeatureConvParameter::_internal_mutable_activation_1() {
  _has_bits_[0] |= 0x00000002u;
  if (activation_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_1_ = p;
  }
  return activation_1_;
}
inline ::ActivationParameter* LaneFeatureConvParameter::mutable_activation_1() {
  // @@protoc_insertion_point(field_mutable:LaneFeatureConvParameter.activation_1)
  return _internal_mutable_activation_1();
}
inline void LaneFeatureConvParameter::set_allocated_activation_1(::ActivationParameter* activation_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_1_;
  }
  if (activation_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activation_1_ = activation_1;
  // @@protoc_insertion_point(field_set_allocated:LaneFeatureConvParameter.activation_1)
}

// optional .Conv1dParameter conv1d_2 = 3;
inline bool LaneFeatureConvParameter::_internal_has_conv1d_2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || conv1d_2_ != nullptr);
  return value;
}
inline bool LaneFeatureConvParameter::has_conv1d_2() const {
  return _internal_has_conv1d_2();
}
inline void LaneFeatureConvParameter::clear_conv1d_2() {
  if (conv1d_2_ != nullptr) conv1d_2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Conv1dParameter& LaneFeatureConvParameter::_internal_conv1d_2() const {
  const ::Conv1dParameter* p = conv1d_2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Conv1dParameter*>(
      &::_Conv1dParameter_default_instance_);
}
inline const ::Conv1dParameter& LaneFeatureConvParameter::conv1d_2() const {
  // @@protoc_insertion_point(field_get:LaneFeatureConvParameter.conv1d_2)
  return _internal_conv1d_2();
}
inline ::Conv1dParameter* LaneFeatureConvParameter::release_conv1d_2() {
  // @@protoc_insertion_point(field_release:LaneFeatureConvParameter.conv1d_2)
  _has_bits_[0] &= ~0x00000004u;
  ::Conv1dParameter* temp = conv1d_2_;
  conv1d_2_ = nullptr;
  return temp;
}
inline ::Conv1dParameter* LaneFeatureConvParameter::_internal_mutable_conv1d_2() {
  _has_bits_[0] |= 0x00000004u;
  if (conv1d_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Conv1dParameter>(GetArenaNoVirtual());
    conv1d_2_ = p;
  }
  return conv1d_2_;
}
inline ::Conv1dParameter* LaneFeatureConvParameter::mutable_conv1d_2() {
  // @@protoc_insertion_point(field_mutable:LaneFeatureConvParameter.conv1d_2)
  return _internal_mutable_conv1d_2();
}
inline void LaneFeatureConvParameter::set_allocated_conv1d_2(::Conv1dParameter* conv1d_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conv1d_2_;
  }
  if (conv1d_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conv1d_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv1d_2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  conv1d_2_ = conv1d_2;
  // @@protoc_insertion_point(field_set_allocated:LaneFeatureConvParameter.conv1d_2)
}

// optional .ActivationParameter activation_3 = 4;
inline bool LaneFeatureConvParameter::_internal_has_activation_3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || activation_3_ != nullptr);
  return value;
}
inline bool LaneFeatureConvParameter::has_activation_3() const {
  return _internal_has_activation_3();
}
inline void LaneFeatureConvParameter::clear_activation_3() {
  if (activation_3_ != nullptr) activation_3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ActivationParameter& LaneFeatureConvParameter::_internal_activation_3() const {
  const ::ActivationParameter* p = activation_3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& LaneFeatureConvParameter::activation_3() const {
  // @@protoc_insertion_point(field_get:LaneFeatureConvParameter.activation_3)
  return _internal_activation_3();
}
inline ::ActivationParameter* LaneFeatureConvParameter::release_activation_3() {
  // @@protoc_insertion_point(field_release:LaneFeatureConvParameter.activation_3)
  _has_bits_[0] &= ~0x00000008u;
  ::ActivationParameter* temp = activation_3_;
  activation_3_ = nullptr;
  return temp;
}
inline ::ActivationParameter* LaneFeatureConvParameter::_internal_mutable_activation_3() {
  _has_bits_[0] |= 0x00000008u;
  if (activation_3_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_3_ = p;
  }
  return activation_3_;
}
inline ::ActivationParameter* LaneFeatureConvParameter::mutable_activation_3() {
  // @@protoc_insertion_point(field_mutable:LaneFeatureConvParameter.activation_3)
  return _internal_mutable_activation_3();
}
inline void LaneFeatureConvParameter::set_allocated_activation_3(::ActivationParameter* activation_3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_3_;
  }
  if (activation_3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  activation_3_ = activation_3;
  // @@protoc_insertion_point(field_set_allocated:LaneFeatureConvParameter.activation_3)
}

// optional .Conv1dParameter conv1d_4 = 5;
inline bool LaneFeatureConvParameter::_internal_has_conv1d_4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || conv1d_4_ != nullptr);
  return value;
}
inline bool LaneFeatureConvParameter::has_conv1d_4() const {
  return _internal_has_conv1d_4();
}
inline void LaneFeatureConvParameter::clear_conv1d_4() {
  if (conv1d_4_ != nullptr) conv1d_4_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Conv1dParameter& LaneFeatureConvParameter::_internal_conv1d_4() const {
  const ::Conv1dParameter* p = conv1d_4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Conv1dParameter*>(
      &::_Conv1dParameter_default_instance_);
}
inline const ::Conv1dParameter& LaneFeatureConvParameter::conv1d_4() const {
  // @@protoc_insertion_point(field_get:LaneFeatureConvParameter.conv1d_4)
  return _internal_conv1d_4();
}
inline ::Conv1dParameter* LaneFeatureConvParameter::release_conv1d_4() {
  // @@protoc_insertion_point(field_release:LaneFeatureConvParameter.conv1d_4)
  _has_bits_[0] &= ~0x00000010u;
  ::Conv1dParameter* temp = conv1d_4_;
  conv1d_4_ = nullptr;
  return temp;
}
inline ::Conv1dParameter* LaneFeatureConvParameter::_internal_mutable_conv1d_4() {
  _has_bits_[0] |= 0x00000010u;
  if (conv1d_4_ == nullptr) {
    auto* p = CreateMaybeMessage<::Conv1dParameter>(GetArenaNoVirtual());
    conv1d_4_ = p;
  }
  return conv1d_4_;
}
inline ::Conv1dParameter* LaneFeatureConvParameter::mutable_conv1d_4() {
  // @@protoc_insertion_point(field_mutable:LaneFeatureConvParameter.conv1d_4)
  return _internal_mutable_conv1d_4();
}
inline void LaneFeatureConvParameter::set_allocated_conv1d_4(::Conv1dParameter* conv1d_4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conv1d_4_;
  }
  if (conv1d_4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conv1d_4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv1d_4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  conv1d_4_ = conv1d_4;
  // @@protoc_insertion_point(field_set_allocated:LaneFeatureConvParameter.conv1d_4)
}

// -------------------------------------------------------------------

// ObsFeatureFCParameter

// optional .DenseParameter linear_0 = 1;
inline bool ObsFeatureFCParameter::_internal_has_linear_0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || linear_0_ != nullptr);
  return value;
}
inline bool ObsFeatureFCParameter::has_linear_0() const {
  return _internal_has_linear_0();
}
inline void ObsFeatureFCParameter::clear_linear_0() {
  if (linear_0_ != nullptr) linear_0_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::DenseParameter& ObsFeatureFCParameter::_internal_linear_0() const {
  const ::DenseParameter* p = linear_0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& ObsFeatureFCParameter::linear_0() const {
  // @@protoc_insertion_point(field_get:ObsFeatureFCParameter.linear_0)
  return _internal_linear_0();
}
inline ::DenseParameter* ObsFeatureFCParameter::release_linear_0() {
  // @@protoc_insertion_point(field_release:ObsFeatureFCParameter.linear_0)
  _has_bits_[0] &= ~0x00000001u;
  ::DenseParameter* temp = linear_0_;
  linear_0_ = nullptr;
  return temp;
}
inline ::DenseParameter* ObsFeatureFCParameter::_internal_mutable_linear_0() {
  _has_bits_[0] |= 0x00000001u;
  if (linear_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_0_ = p;
  }
  return linear_0_;
}
inline ::DenseParameter* ObsFeatureFCParameter::mutable_linear_0() {
  // @@protoc_insertion_point(field_mutable:ObsFeatureFCParameter.linear_0)
  return _internal_mutable_linear_0();
}
inline void ObsFeatureFCParameter::set_allocated_linear_0(::DenseParameter* linear_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_0_;
  }
  if (linear_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  linear_0_ = linear_0;
  // @@protoc_insertion_point(field_set_allocated:ObsFeatureFCParameter.linear_0)
}

// optional .ActivationParameter activation_1 = 2;
inline bool ObsFeatureFCParameter::_internal_has_activation_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || activation_1_ != nullptr);
  return value;
}
inline bool ObsFeatureFCParameter::has_activation_1() const {
  return _internal_has_activation_1();
}
inline void ObsFeatureFCParameter::clear_activation_1() {
  if (activation_1_ != nullptr) activation_1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ActivationParameter& ObsFeatureFCParameter::_internal_activation_1() const {
  const ::ActivationParameter* p = activation_1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& ObsFeatureFCParameter::activation_1() const {
  // @@protoc_insertion_point(field_get:ObsFeatureFCParameter.activation_1)
  return _internal_activation_1();
}
inline ::ActivationParameter* ObsFeatureFCParameter::release_activation_1() {
  // @@protoc_insertion_point(field_release:ObsFeatureFCParameter.activation_1)
  _has_bits_[0] &= ~0x00000002u;
  ::ActivationParameter* temp = activation_1_;
  activation_1_ = nullptr;
  return temp;
}
inline ::ActivationParameter* ObsFeatureFCParameter::_internal_mutable_activation_1() {
  _has_bits_[0] |= 0x00000002u;
  if (activation_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_1_ = p;
  }
  return activation_1_;
}
inline ::ActivationParameter* ObsFeatureFCParameter::mutable_activation_1() {
  // @@protoc_insertion_point(field_mutable:ObsFeatureFCParameter.activation_1)
  return _internal_mutable_activation_1();
}
inline void ObsFeatureFCParameter::set_allocated_activation_1(::ActivationParameter* activation_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_1_;
  }
  if (activation_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activation_1_ = activation_1;
  // @@protoc_insertion_point(field_set_allocated:ObsFeatureFCParameter.activation_1)
}

// optional .DenseParameter linear_3 = 3;
inline bool ObsFeatureFCParameter::_internal_has_linear_3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || linear_3_ != nullptr);
  return value;
}
inline bool ObsFeatureFCParameter::has_linear_3() const {
  return _internal_has_linear_3();
}
inline void ObsFeatureFCParameter::clear_linear_3() {
  if (linear_3_ != nullptr) linear_3_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::DenseParameter& ObsFeatureFCParameter::_internal_linear_3() const {
  const ::DenseParameter* p = linear_3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& ObsFeatureFCParameter::linear_3() const {
  // @@protoc_insertion_point(field_get:ObsFeatureFCParameter.linear_3)
  return _internal_linear_3();
}
inline ::DenseParameter* ObsFeatureFCParameter::release_linear_3() {
  // @@protoc_insertion_point(field_release:ObsFeatureFCParameter.linear_3)
  _has_bits_[0] &= ~0x00000004u;
  ::DenseParameter* temp = linear_3_;
  linear_3_ = nullptr;
  return temp;
}
inline ::DenseParameter* ObsFeatureFCParameter::_internal_mutable_linear_3() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_3_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_3_ = p;
  }
  return linear_3_;
}
inline ::DenseParameter* ObsFeatureFCParameter::mutable_linear_3() {
  // @@protoc_insertion_point(field_mutable:ObsFeatureFCParameter.linear_3)
  return _internal_mutable_linear_3();
}
inline void ObsFeatureFCParameter::set_allocated_linear_3(::DenseParameter* linear_3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_3_;
  }
  if (linear_3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_3_ = linear_3;
  // @@protoc_insertion_point(field_set_allocated:ObsFeatureFCParameter.linear_3)
}

// optional .ActivationParameter activation_4 = 4;
inline bool ObsFeatureFCParameter::_internal_has_activation_4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || activation_4_ != nullptr);
  return value;
}
inline bool ObsFeatureFCParameter::has_activation_4() const {
  return _internal_has_activation_4();
}
inline void ObsFeatureFCParameter::clear_activation_4() {
  if (activation_4_ != nullptr) activation_4_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ActivationParameter& ObsFeatureFCParameter::_internal_activation_4() const {
  const ::ActivationParameter* p = activation_4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& ObsFeatureFCParameter::activation_4() const {
  // @@protoc_insertion_point(field_get:ObsFeatureFCParameter.activation_4)
  return _internal_activation_4();
}
inline ::ActivationParameter* ObsFeatureFCParameter::release_activation_4() {
  // @@protoc_insertion_point(field_release:ObsFeatureFCParameter.activation_4)
  _has_bits_[0] &= ~0x00000008u;
  ::ActivationParameter* temp = activation_4_;
  activation_4_ = nullptr;
  return temp;
}
inline ::ActivationParameter* ObsFeatureFCParameter::_internal_mutable_activation_4() {
  _has_bits_[0] |= 0x00000008u;
  if (activation_4_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_4_ = p;
  }
  return activation_4_;
}
inline ::ActivationParameter* ObsFeatureFCParameter::mutable_activation_4() {
  // @@protoc_insertion_point(field_mutable:ObsFeatureFCParameter.activation_4)
  return _internal_mutable_activation_4();
}
inline void ObsFeatureFCParameter::set_allocated_activation_4(::ActivationParameter* activation_4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_4_;
  }
  if (activation_4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  activation_4_ = activation_4;
  // @@protoc_insertion_point(field_set_allocated:ObsFeatureFCParameter.activation_4)
}

// -------------------------------------------------------------------

// ClassifyParameter

// optional .DenseParameter linear_0 = 1;
inline bool ClassifyParameter::_internal_has_linear_0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || linear_0_ != nullptr);
  return value;
}
inline bool ClassifyParameter::has_linear_0() const {
  return _internal_has_linear_0();
}
inline void ClassifyParameter::clear_linear_0() {
  if (linear_0_ != nullptr) linear_0_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::DenseParameter& ClassifyParameter::_internal_linear_0() const {
  const ::DenseParameter* p = linear_0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& ClassifyParameter::linear_0() const {
  // @@protoc_insertion_point(field_get:ClassifyParameter.linear_0)
  return _internal_linear_0();
}
inline ::DenseParameter* ClassifyParameter::release_linear_0() {
  // @@protoc_insertion_point(field_release:ClassifyParameter.linear_0)
  _has_bits_[0] &= ~0x00000001u;
  ::DenseParameter* temp = linear_0_;
  linear_0_ = nullptr;
  return temp;
}
inline ::DenseParameter* ClassifyParameter::_internal_mutable_linear_0() {
  _has_bits_[0] |= 0x00000001u;
  if (linear_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_0_ = p;
  }
  return linear_0_;
}
inline ::DenseParameter* ClassifyParameter::mutable_linear_0() {
  // @@protoc_insertion_point(field_mutable:ClassifyParameter.linear_0)
  return _internal_mutable_linear_0();
}
inline void ClassifyParameter::set_allocated_linear_0(::DenseParameter* linear_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_0_;
  }
  if (linear_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  linear_0_ = linear_0;
  // @@protoc_insertion_point(field_set_allocated:ClassifyParameter.linear_0)
}

// optional .ActivationParameter activation_1 = 2;
inline bool ClassifyParameter::_internal_has_activation_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || activation_1_ != nullptr);
  return value;
}
inline bool ClassifyParameter::has_activation_1() const {
  return _internal_has_activation_1();
}
inline void ClassifyParameter::clear_activation_1() {
  if (activation_1_ != nullptr) activation_1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ActivationParameter& ClassifyParameter::_internal_activation_1() const {
  const ::ActivationParameter* p = activation_1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& ClassifyParameter::activation_1() const {
  // @@protoc_insertion_point(field_get:ClassifyParameter.activation_1)
  return _internal_activation_1();
}
inline ::ActivationParameter* ClassifyParameter::release_activation_1() {
  // @@protoc_insertion_point(field_release:ClassifyParameter.activation_1)
  _has_bits_[0] &= ~0x00000002u;
  ::ActivationParameter* temp = activation_1_;
  activation_1_ = nullptr;
  return temp;
}
inline ::ActivationParameter* ClassifyParameter::_internal_mutable_activation_1() {
  _has_bits_[0] |= 0x00000002u;
  if (activation_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_1_ = p;
  }
  return activation_1_;
}
inline ::ActivationParameter* ClassifyParameter::mutable_activation_1() {
  // @@protoc_insertion_point(field_mutable:ClassifyParameter.activation_1)
  return _internal_mutable_activation_1();
}
inline void ClassifyParameter::set_allocated_activation_1(::ActivationParameter* activation_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_1_;
  }
  if (activation_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activation_1_ = activation_1;
  // @@protoc_insertion_point(field_set_allocated:ClassifyParameter.activation_1)
}

// optional .DenseParameter linear_3 = 3;
inline bool ClassifyParameter::_internal_has_linear_3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || linear_3_ != nullptr);
  return value;
}
inline bool ClassifyParameter::has_linear_3() const {
  return _internal_has_linear_3();
}
inline void ClassifyParameter::clear_linear_3() {
  if (linear_3_ != nullptr) linear_3_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::DenseParameter& ClassifyParameter::_internal_linear_3() const {
  const ::DenseParameter* p = linear_3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& ClassifyParameter::linear_3() const {
  // @@protoc_insertion_point(field_get:ClassifyParameter.linear_3)
  return _internal_linear_3();
}
inline ::DenseParameter* ClassifyParameter::release_linear_3() {
  // @@protoc_insertion_point(field_release:ClassifyParameter.linear_3)
  _has_bits_[0] &= ~0x00000004u;
  ::DenseParameter* temp = linear_3_;
  linear_3_ = nullptr;
  return temp;
}
inline ::DenseParameter* ClassifyParameter::_internal_mutable_linear_3() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_3_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_3_ = p;
  }
  return linear_3_;
}
inline ::DenseParameter* ClassifyParameter::mutable_linear_3() {
  // @@protoc_insertion_point(field_mutable:ClassifyParameter.linear_3)
  return _internal_mutable_linear_3();
}
inline void ClassifyParameter::set_allocated_linear_3(::DenseParameter* linear_3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_3_;
  }
  if (linear_3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_3_ = linear_3;
  // @@protoc_insertion_point(field_set_allocated:ClassifyParameter.linear_3)
}

// optional .ActivationParameter activation_4 = 4;
inline bool ClassifyParameter::_internal_has_activation_4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || activation_4_ != nullptr);
  return value;
}
inline bool ClassifyParameter::has_activation_4() const {
  return _internal_has_activation_4();
}
inline void ClassifyParameter::clear_activation_4() {
  if (activation_4_ != nullptr) activation_4_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ActivationParameter& ClassifyParameter::_internal_activation_4() const {
  const ::ActivationParameter* p = activation_4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& ClassifyParameter::activation_4() const {
  // @@protoc_insertion_point(field_get:ClassifyParameter.activation_4)
  return _internal_activation_4();
}
inline ::ActivationParameter* ClassifyParameter::release_activation_4() {
  // @@protoc_insertion_point(field_release:ClassifyParameter.activation_4)
  _has_bits_[0] &= ~0x00000008u;
  ::ActivationParameter* temp = activation_4_;
  activation_4_ = nullptr;
  return temp;
}
inline ::ActivationParameter* ClassifyParameter::_internal_mutable_activation_4() {
  _has_bits_[0] |= 0x00000008u;
  if (activation_4_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_4_ = p;
  }
  return activation_4_;
}
inline ::ActivationParameter* ClassifyParameter::mutable_activation_4() {
  // @@protoc_insertion_point(field_mutable:ClassifyParameter.activation_4)
  return _internal_mutable_activation_4();
}
inline void ClassifyParameter::set_allocated_activation_4(::ActivationParameter* activation_4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_4_;
  }
  if (activation_4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  activation_4_ = activation_4;
  // @@protoc_insertion_point(field_set_allocated:ClassifyParameter.activation_4)
}

// optional .DenseParameter linear_6 = 5;
inline bool ClassifyParameter::_internal_has_linear_6() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || linear_6_ != nullptr);
  return value;
}
inline bool ClassifyParameter::has_linear_6() const {
  return _internal_has_linear_6();
}
inline void ClassifyParameter::clear_linear_6() {
  if (linear_6_ != nullptr) linear_6_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::DenseParameter& ClassifyParameter::_internal_linear_6() const {
  const ::DenseParameter* p = linear_6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& ClassifyParameter::linear_6() const {
  // @@protoc_insertion_point(field_get:ClassifyParameter.linear_6)
  return _internal_linear_6();
}
inline ::DenseParameter* ClassifyParameter::release_linear_6() {
  // @@protoc_insertion_point(field_release:ClassifyParameter.linear_6)
  _has_bits_[0] &= ~0x00000010u;
  ::DenseParameter* temp = linear_6_;
  linear_6_ = nullptr;
  return temp;
}
inline ::DenseParameter* ClassifyParameter::_internal_mutable_linear_6() {
  _has_bits_[0] |= 0x00000010u;
  if (linear_6_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_6_ = p;
  }
  return linear_6_;
}
inline ::DenseParameter* ClassifyParameter::mutable_linear_6() {
  // @@protoc_insertion_point(field_mutable:ClassifyParameter.linear_6)
  return _internal_mutable_linear_6();
}
inline void ClassifyParameter::set_allocated_linear_6(::DenseParameter* linear_6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_6_;
  }
  if (linear_6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  linear_6_ = linear_6;
  // @@protoc_insertion_point(field_set_allocated:ClassifyParameter.linear_6)
}

// optional .ActivationParameter activation_7 = 6;
inline bool ClassifyParameter::_internal_has_activation_7() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || activation_7_ != nullptr);
  return value;
}
inline bool ClassifyParameter::has_activation_7() const {
  return _internal_has_activation_7();
}
inline void ClassifyParameter::clear_activation_7() {
  if (activation_7_ != nullptr) activation_7_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ActivationParameter& ClassifyParameter::_internal_activation_7() const {
  const ::ActivationParameter* p = activation_7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& ClassifyParameter::activation_7() const {
  // @@protoc_insertion_point(field_get:ClassifyParameter.activation_7)
  return _internal_activation_7();
}
inline ::ActivationParameter* ClassifyParameter::release_activation_7() {
  // @@protoc_insertion_point(field_release:ClassifyParameter.activation_7)
  _has_bits_[0] &= ~0x00000020u;
  ::ActivationParameter* temp = activation_7_;
  activation_7_ = nullptr;
  return temp;
}
inline ::ActivationParameter* ClassifyParameter::_internal_mutable_activation_7() {
  _has_bits_[0] |= 0x00000020u;
  if (activation_7_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_7_ = p;
  }
  return activation_7_;
}
inline ::ActivationParameter* ClassifyParameter::mutable_activation_7() {
  // @@protoc_insertion_point(field_mutable:ClassifyParameter.activation_7)
  return _internal_mutable_activation_7();
}
inline void ClassifyParameter::set_allocated_activation_7(::ActivationParameter* activation_7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_7_;
  }
  if (activation_7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_7, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  activation_7_ = activation_7;
  // @@protoc_insertion_point(field_set_allocated:ClassifyParameter.activation_7)
}

// optional .DenseParameter linear_9 = 7;
inline bool ClassifyParameter::_internal_has_linear_9() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || linear_9_ != nullptr);
  return value;
}
inline bool ClassifyParameter::has_linear_9() const {
  return _internal_has_linear_9();
}
inline void ClassifyParameter::clear_linear_9() {
  if (linear_9_ != nullptr) linear_9_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::DenseParameter& ClassifyParameter::_internal_linear_9() const {
  const ::DenseParameter* p = linear_9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& ClassifyParameter::linear_9() const {
  // @@protoc_insertion_point(field_get:ClassifyParameter.linear_9)
  return _internal_linear_9();
}
inline ::DenseParameter* ClassifyParameter::release_linear_9() {
  // @@protoc_insertion_point(field_release:ClassifyParameter.linear_9)
  _has_bits_[0] &= ~0x00000040u;
  ::DenseParameter* temp = linear_9_;
  linear_9_ = nullptr;
  return temp;
}
inline ::DenseParameter* ClassifyParameter::_internal_mutable_linear_9() {
  _has_bits_[0] |= 0x00000040u;
  if (linear_9_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_9_ = p;
  }
  return linear_9_;
}
inline ::DenseParameter* ClassifyParameter::mutable_linear_9() {
  // @@protoc_insertion_point(field_mutable:ClassifyParameter.linear_9)
  return _internal_mutable_linear_9();
}
inline void ClassifyParameter::set_allocated_linear_9(::DenseParameter* linear_9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_9_;
  }
  if (linear_9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_9, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  linear_9_ = linear_9;
  // @@protoc_insertion_point(field_set_allocated:ClassifyParameter.linear_9)
}

// optional .ActivationParameter activation_10 = 8;
inline bool ClassifyParameter::_internal_has_activation_10() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || activation_10_ != nullptr);
  return value;
}
inline bool ClassifyParameter::has_activation_10() const {
  return _internal_has_activation_10();
}
inline void ClassifyParameter::clear_activation_10() {
  if (activation_10_ != nullptr) activation_10_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ActivationParameter& ClassifyParameter::_internal_activation_10() const {
  const ::ActivationParameter* p = activation_10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& ClassifyParameter::activation_10() const {
  // @@protoc_insertion_point(field_get:ClassifyParameter.activation_10)
  return _internal_activation_10();
}
inline ::ActivationParameter* ClassifyParameter::release_activation_10() {
  // @@protoc_insertion_point(field_release:ClassifyParameter.activation_10)
  _has_bits_[0] &= ~0x00000080u;
  ::ActivationParameter* temp = activation_10_;
  activation_10_ = nullptr;
  return temp;
}
inline ::ActivationParameter* ClassifyParameter::_internal_mutable_activation_10() {
  _has_bits_[0] |= 0x00000080u;
  if (activation_10_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_10_ = p;
  }
  return activation_10_;
}
inline ::ActivationParameter* ClassifyParameter::mutable_activation_10() {
  // @@protoc_insertion_point(field_mutable:ClassifyParameter.activation_10)
  return _internal_mutable_activation_10();
}
inline void ClassifyParameter::set_allocated_activation_10(::ActivationParameter* activation_10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_10_;
  }
  if (activation_10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_10, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  activation_10_ = activation_10;
  // @@protoc_insertion_point(field_set_allocated:ClassifyParameter.activation_10)
}

// -------------------------------------------------------------------

// RegressParameter

// optional .DenseParameter linear_0 = 1;
inline bool RegressParameter::_internal_has_linear_0() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || linear_0_ != nullptr);
  return value;
}
inline bool RegressParameter::has_linear_0() const {
  return _internal_has_linear_0();
}
inline void RegressParameter::clear_linear_0() {
  if (linear_0_ != nullptr) linear_0_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::DenseParameter& RegressParameter::_internal_linear_0() const {
  const ::DenseParameter* p = linear_0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& RegressParameter::linear_0() const {
  // @@protoc_insertion_point(field_get:RegressParameter.linear_0)
  return _internal_linear_0();
}
inline ::DenseParameter* RegressParameter::release_linear_0() {
  // @@protoc_insertion_point(field_release:RegressParameter.linear_0)
  _has_bits_[0] &= ~0x00000001u;
  ::DenseParameter* temp = linear_0_;
  linear_0_ = nullptr;
  return temp;
}
inline ::DenseParameter* RegressParameter::_internal_mutable_linear_0() {
  _has_bits_[0] |= 0x00000001u;
  if (linear_0_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_0_ = p;
  }
  return linear_0_;
}
inline ::DenseParameter* RegressParameter::mutable_linear_0() {
  // @@protoc_insertion_point(field_mutable:RegressParameter.linear_0)
  return _internal_mutable_linear_0();
}
inline void RegressParameter::set_allocated_linear_0(::DenseParameter* linear_0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_0_;
  }
  if (linear_0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  linear_0_ = linear_0;
  // @@protoc_insertion_point(field_set_allocated:RegressParameter.linear_0)
}

// optional .ActivationParameter activation_1 = 2;
inline bool RegressParameter::_internal_has_activation_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || activation_1_ != nullptr);
  return value;
}
inline bool RegressParameter::has_activation_1() const {
  return _internal_has_activation_1();
}
inline void RegressParameter::clear_activation_1() {
  if (activation_1_ != nullptr) activation_1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ActivationParameter& RegressParameter::_internal_activation_1() const {
  const ::ActivationParameter* p = activation_1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& RegressParameter::activation_1() const {
  // @@protoc_insertion_point(field_get:RegressParameter.activation_1)
  return _internal_activation_1();
}
inline ::ActivationParameter* RegressParameter::release_activation_1() {
  // @@protoc_insertion_point(field_release:RegressParameter.activation_1)
  _has_bits_[0] &= ~0x00000002u;
  ::ActivationParameter* temp = activation_1_;
  activation_1_ = nullptr;
  return temp;
}
inline ::ActivationParameter* RegressParameter::_internal_mutable_activation_1() {
  _has_bits_[0] |= 0x00000002u;
  if (activation_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_1_ = p;
  }
  return activation_1_;
}
inline ::ActivationParameter* RegressParameter::mutable_activation_1() {
  // @@protoc_insertion_point(field_mutable:RegressParameter.activation_1)
  return _internal_mutable_activation_1();
}
inline void RegressParameter::set_allocated_activation_1(::ActivationParameter* activation_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_1_;
  }
  if (activation_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  activation_1_ = activation_1;
  // @@protoc_insertion_point(field_set_allocated:RegressParameter.activation_1)
}

// optional .DenseParameter linear_3 = 3;
inline bool RegressParameter::_internal_has_linear_3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || linear_3_ != nullptr);
  return value;
}
inline bool RegressParameter::has_linear_3() const {
  return _internal_has_linear_3();
}
inline void RegressParameter::clear_linear_3() {
  if (linear_3_ != nullptr) linear_3_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::DenseParameter& RegressParameter::_internal_linear_3() const {
  const ::DenseParameter* p = linear_3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& RegressParameter::linear_3() const {
  // @@protoc_insertion_point(field_get:RegressParameter.linear_3)
  return _internal_linear_3();
}
inline ::DenseParameter* RegressParameter::release_linear_3() {
  // @@protoc_insertion_point(field_release:RegressParameter.linear_3)
  _has_bits_[0] &= ~0x00000004u;
  ::DenseParameter* temp = linear_3_;
  linear_3_ = nullptr;
  return temp;
}
inline ::DenseParameter* RegressParameter::_internal_mutable_linear_3() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_3_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_3_ = p;
  }
  return linear_3_;
}
inline ::DenseParameter* RegressParameter::mutable_linear_3() {
  // @@protoc_insertion_point(field_mutable:RegressParameter.linear_3)
  return _internal_mutable_linear_3();
}
inline void RegressParameter::set_allocated_linear_3(::DenseParameter* linear_3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_3_;
  }
  if (linear_3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_3_ = linear_3;
  // @@protoc_insertion_point(field_set_allocated:RegressParameter.linear_3)
}

// optional .ActivationParameter activation_4 = 4;
inline bool RegressParameter::_internal_has_activation_4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || activation_4_ != nullptr);
  return value;
}
inline bool RegressParameter::has_activation_4() const {
  return _internal_has_activation_4();
}
inline void RegressParameter::clear_activation_4() {
  if (activation_4_ != nullptr) activation_4_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ActivationParameter& RegressParameter::_internal_activation_4() const {
  const ::ActivationParameter* p = activation_4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& RegressParameter::activation_4() const {
  // @@protoc_insertion_point(field_get:RegressParameter.activation_4)
  return _internal_activation_4();
}
inline ::ActivationParameter* RegressParameter::release_activation_4() {
  // @@protoc_insertion_point(field_release:RegressParameter.activation_4)
  _has_bits_[0] &= ~0x00000008u;
  ::ActivationParameter* temp = activation_4_;
  activation_4_ = nullptr;
  return temp;
}
inline ::ActivationParameter* RegressParameter::_internal_mutable_activation_4() {
  _has_bits_[0] |= 0x00000008u;
  if (activation_4_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_4_ = p;
  }
  return activation_4_;
}
inline ::ActivationParameter* RegressParameter::mutable_activation_4() {
  // @@protoc_insertion_point(field_mutable:RegressParameter.activation_4)
  return _internal_mutable_activation_4();
}
inline void RegressParameter::set_allocated_activation_4(::ActivationParameter* activation_4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_4_;
  }
  if (activation_4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  activation_4_ = activation_4;
  // @@protoc_insertion_point(field_set_allocated:RegressParameter.activation_4)
}

// optional .DenseParameter linear_6 = 5;
inline bool RegressParameter::_internal_has_linear_6() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || linear_6_ != nullptr);
  return value;
}
inline bool RegressParameter::has_linear_6() const {
  return _internal_has_linear_6();
}
inline void RegressParameter::clear_linear_6() {
  if (linear_6_ != nullptr) linear_6_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::DenseParameter& RegressParameter::_internal_linear_6() const {
  const ::DenseParameter* p = linear_6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& RegressParameter::linear_6() const {
  // @@protoc_insertion_point(field_get:RegressParameter.linear_6)
  return _internal_linear_6();
}
inline ::DenseParameter* RegressParameter::release_linear_6() {
  // @@protoc_insertion_point(field_release:RegressParameter.linear_6)
  _has_bits_[0] &= ~0x00000010u;
  ::DenseParameter* temp = linear_6_;
  linear_6_ = nullptr;
  return temp;
}
inline ::DenseParameter* RegressParameter::_internal_mutable_linear_6() {
  _has_bits_[0] |= 0x00000010u;
  if (linear_6_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_6_ = p;
  }
  return linear_6_;
}
inline ::DenseParameter* RegressParameter::mutable_linear_6() {
  // @@protoc_insertion_point(field_mutable:RegressParameter.linear_6)
  return _internal_mutable_linear_6();
}
inline void RegressParameter::set_allocated_linear_6(::DenseParameter* linear_6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_6_;
  }
  if (linear_6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  linear_6_ = linear_6;
  // @@protoc_insertion_point(field_set_allocated:RegressParameter.linear_6)
}

// optional .ActivationParameter activation_7 = 6;
inline bool RegressParameter::_internal_has_activation_7() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || activation_7_ != nullptr);
  return value;
}
inline bool RegressParameter::has_activation_7() const {
  return _internal_has_activation_7();
}
inline void RegressParameter::clear_activation_7() {
  if (activation_7_ != nullptr) activation_7_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ActivationParameter& RegressParameter::_internal_activation_7() const {
  const ::ActivationParameter* p = activation_7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& RegressParameter::activation_7() const {
  // @@protoc_insertion_point(field_get:RegressParameter.activation_7)
  return _internal_activation_7();
}
inline ::ActivationParameter* RegressParameter::release_activation_7() {
  // @@protoc_insertion_point(field_release:RegressParameter.activation_7)
  _has_bits_[0] &= ~0x00000020u;
  ::ActivationParameter* temp = activation_7_;
  activation_7_ = nullptr;
  return temp;
}
inline ::ActivationParameter* RegressParameter::_internal_mutable_activation_7() {
  _has_bits_[0] |= 0x00000020u;
  if (activation_7_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_7_ = p;
  }
  return activation_7_;
}
inline ::ActivationParameter* RegressParameter::mutable_activation_7() {
  // @@protoc_insertion_point(field_mutable:RegressParameter.activation_7)
  return _internal_mutable_activation_7();
}
inline void RegressParameter::set_allocated_activation_7(::ActivationParameter* activation_7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_7_;
  }
  if (activation_7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_7, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  activation_7_ = activation_7;
  // @@protoc_insertion_point(field_set_allocated:RegressParameter.activation_7)
}

// optional .DenseParameter linear_9 = 7;
inline bool RegressParameter::_internal_has_linear_9() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || linear_9_ != nullptr);
  return value;
}
inline bool RegressParameter::has_linear_9() const {
  return _internal_has_linear_9();
}
inline void RegressParameter::clear_linear_9() {
  if (linear_9_ != nullptr) linear_9_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::DenseParameter& RegressParameter::_internal_linear_9() const {
  const ::DenseParameter* p = linear_9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DenseParameter*>(
      &::_DenseParameter_default_instance_);
}
inline const ::DenseParameter& RegressParameter::linear_9() const {
  // @@protoc_insertion_point(field_get:RegressParameter.linear_9)
  return _internal_linear_9();
}
inline ::DenseParameter* RegressParameter::release_linear_9() {
  // @@protoc_insertion_point(field_release:RegressParameter.linear_9)
  _has_bits_[0] &= ~0x00000040u;
  ::DenseParameter* temp = linear_9_;
  linear_9_ = nullptr;
  return temp;
}
inline ::DenseParameter* RegressParameter::_internal_mutable_linear_9() {
  _has_bits_[0] |= 0x00000040u;
  if (linear_9_ == nullptr) {
    auto* p = CreateMaybeMessage<::DenseParameter>(GetArenaNoVirtual());
    linear_9_ = p;
  }
  return linear_9_;
}
inline ::DenseParameter* RegressParameter::mutable_linear_9() {
  // @@protoc_insertion_point(field_mutable:RegressParameter.linear_9)
  return _internal_mutable_linear_9();
}
inline void RegressParameter::set_allocated_linear_9(::DenseParameter* linear_9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete linear_9_;
  }
  if (linear_9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_9, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  linear_9_ = linear_9;
  // @@protoc_insertion_point(field_set_allocated:RegressParameter.linear_9)
}

// optional .ActivationParameter activation_10 = 8;
inline bool RegressParameter::_internal_has_activation_10() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || activation_10_ != nullptr);
  return value;
}
inline bool RegressParameter::has_activation_10() const {
  return _internal_has_activation_10();
}
inline void RegressParameter::clear_activation_10() {
  if (activation_10_ != nullptr) activation_10_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ActivationParameter& RegressParameter::_internal_activation_10() const {
  const ::ActivationParameter* p = activation_10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ActivationParameter*>(
      &::_ActivationParameter_default_instance_);
}
inline const ::ActivationParameter& RegressParameter::activation_10() const {
  // @@protoc_insertion_point(field_get:RegressParameter.activation_10)
  return _internal_activation_10();
}
inline ::ActivationParameter* RegressParameter::release_activation_10() {
  // @@protoc_insertion_point(field_release:RegressParameter.activation_10)
  _has_bits_[0] &= ~0x00000080u;
  ::ActivationParameter* temp = activation_10_;
  activation_10_ = nullptr;
  return temp;
}
inline ::ActivationParameter* RegressParameter::_internal_mutable_activation_10() {
  _has_bits_[0] |= 0x00000080u;
  if (activation_10_ == nullptr) {
    auto* p = CreateMaybeMessage<::ActivationParameter>(GetArenaNoVirtual());
    activation_10_ = p;
  }
  return activation_10_;
}
inline ::ActivationParameter* RegressParameter::mutable_activation_10() {
  // @@protoc_insertion_point(field_mutable:RegressParameter.activation_10)
  return _internal_mutable_activation_10();
}
inline void RegressParameter::set_allocated_activation_10(::ActivationParameter* activation_10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete activation_10_;
  }
  if (activation_10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activation_10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_10, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  activation_10_ = activation_10;
  // @@protoc_insertion_point(field_set_allocated:RegressParameter.activation_10)
}

// -------------------------------------------------------------------

// CruiseModelParameter

// optional .LaneFeatureConvParameter lane_feature_conv = 1;
inline bool CruiseModelParameter::_internal_has_lane_feature_conv() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lane_feature_conv_ != nullptr);
  return value;
}
inline bool CruiseModelParameter::has_lane_feature_conv() const {
  return _internal_has_lane_feature_conv();
}
inline void CruiseModelParameter::clear_lane_feature_conv() {
  if (lane_feature_conv_ != nullptr) lane_feature_conv_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::LaneFeatureConvParameter& CruiseModelParameter::_internal_lane_feature_conv() const {
  const ::LaneFeatureConvParameter* p = lane_feature_conv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LaneFeatureConvParameter*>(
      &::_LaneFeatureConvParameter_default_instance_);
}
inline const ::LaneFeatureConvParameter& CruiseModelParameter::lane_feature_conv() const {
  // @@protoc_insertion_point(field_get:CruiseModelParameter.lane_feature_conv)
  return _internal_lane_feature_conv();
}
inline ::LaneFeatureConvParameter* CruiseModelParameter::release_lane_feature_conv() {
  // @@protoc_insertion_point(field_release:CruiseModelParameter.lane_feature_conv)
  _has_bits_[0] &= ~0x00000001u;
  ::LaneFeatureConvParameter* temp = lane_feature_conv_;
  lane_feature_conv_ = nullptr;
  return temp;
}
inline ::LaneFeatureConvParameter* CruiseModelParameter::_internal_mutable_lane_feature_conv() {
  _has_bits_[0] |= 0x00000001u;
  if (lane_feature_conv_ == nullptr) {
    auto* p = CreateMaybeMessage<::LaneFeatureConvParameter>(GetArenaNoVirtual());
    lane_feature_conv_ = p;
  }
  return lane_feature_conv_;
}
inline ::LaneFeatureConvParameter* CruiseModelParameter::mutable_lane_feature_conv() {
  // @@protoc_insertion_point(field_mutable:CruiseModelParameter.lane_feature_conv)
  return _internal_mutable_lane_feature_conv();
}
inline void CruiseModelParameter::set_allocated_lane_feature_conv(::LaneFeatureConvParameter* lane_feature_conv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_feature_conv_;
  }
  if (lane_feature_conv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_feature_conv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_feature_conv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lane_feature_conv_ = lane_feature_conv;
  // @@protoc_insertion_point(field_set_allocated:CruiseModelParameter.lane_feature_conv)
}

// optional .MaxPool1dParameter lane_feature_maxpool = 2;
inline bool CruiseModelParameter::_internal_has_lane_feature_maxpool() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lane_feature_maxpool_ != nullptr);
  return value;
}
inline bool CruiseModelParameter::has_lane_feature_maxpool() const {
  return _internal_has_lane_feature_maxpool();
}
inline void CruiseModelParameter::clear_lane_feature_maxpool() {
  if (lane_feature_maxpool_ != nullptr) lane_feature_maxpool_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::MaxPool1dParameter& CruiseModelParameter::_internal_lane_feature_maxpool() const {
  const ::MaxPool1dParameter* p = lane_feature_maxpool_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaxPool1dParameter*>(
      &::_MaxPool1dParameter_default_instance_);
}
inline const ::MaxPool1dParameter& CruiseModelParameter::lane_feature_maxpool() const {
  // @@protoc_insertion_point(field_get:CruiseModelParameter.lane_feature_maxpool)
  return _internal_lane_feature_maxpool();
}
inline ::MaxPool1dParameter* CruiseModelParameter::release_lane_feature_maxpool() {
  // @@protoc_insertion_point(field_release:CruiseModelParameter.lane_feature_maxpool)
  _has_bits_[0] &= ~0x00000002u;
  ::MaxPool1dParameter* temp = lane_feature_maxpool_;
  lane_feature_maxpool_ = nullptr;
  return temp;
}
inline ::MaxPool1dParameter* CruiseModelParameter::_internal_mutable_lane_feature_maxpool() {
  _has_bits_[0] |= 0x00000002u;
  if (lane_feature_maxpool_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaxPool1dParameter>(GetArenaNoVirtual());
    lane_feature_maxpool_ = p;
  }
  return lane_feature_maxpool_;
}
inline ::MaxPool1dParameter* CruiseModelParameter::mutable_lane_feature_maxpool() {
  // @@protoc_insertion_point(field_mutable:CruiseModelParameter.lane_feature_maxpool)
  return _internal_mutable_lane_feature_maxpool();
}
inline void CruiseModelParameter::set_allocated_lane_feature_maxpool(::MaxPool1dParameter* lane_feature_maxpool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_feature_maxpool_;
  }
  if (lane_feature_maxpool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_feature_maxpool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_feature_maxpool, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lane_feature_maxpool_ = lane_feature_maxpool;
  // @@protoc_insertion_point(field_set_allocated:CruiseModelParameter.lane_feature_maxpool)
}

// optional .AvgPool1dParameter lane_feature_avgpool = 3;
inline bool CruiseModelParameter::_internal_has_lane_feature_avgpool() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lane_feature_avgpool_ != nullptr);
  return value;
}
inline bool CruiseModelParameter::has_lane_feature_avgpool() const {
  return _internal_has_lane_feature_avgpool();
}
inline void CruiseModelParameter::clear_lane_feature_avgpool() {
  if (lane_feature_avgpool_ != nullptr) lane_feature_avgpool_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::AvgPool1dParameter& CruiseModelParameter::_internal_lane_feature_avgpool() const {
  const ::AvgPool1dParameter* p = lane_feature_avgpool_;
  return p != nullptr ? *p : *reinterpret_cast<const ::AvgPool1dParameter*>(
      &::_AvgPool1dParameter_default_instance_);
}
inline const ::AvgPool1dParameter& CruiseModelParameter::lane_feature_avgpool() const {
  // @@protoc_insertion_point(field_get:CruiseModelParameter.lane_feature_avgpool)
  return _internal_lane_feature_avgpool();
}
inline ::AvgPool1dParameter* CruiseModelParameter::release_lane_feature_avgpool() {
  // @@protoc_insertion_point(field_release:CruiseModelParameter.lane_feature_avgpool)
  _has_bits_[0] &= ~0x00000004u;
  ::AvgPool1dParameter* temp = lane_feature_avgpool_;
  lane_feature_avgpool_ = nullptr;
  return temp;
}
inline ::AvgPool1dParameter* CruiseModelParameter::_internal_mutable_lane_feature_avgpool() {
  _has_bits_[0] |= 0x00000004u;
  if (lane_feature_avgpool_ == nullptr) {
    auto* p = CreateMaybeMessage<::AvgPool1dParameter>(GetArenaNoVirtual());
    lane_feature_avgpool_ = p;
  }
  return lane_feature_avgpool_;
}
inline ::AvgPool1dParameter* CruiseModelParameter::mutable_lane_feature_avgpool() {
  // @@protoc_insertion_point(field_mutable:CruiseModelParameter.lane_feature_avgpool)
  return _internal_mutable_lane_feature_avgpool();
}
inline void CruiseModelParameter::set_allocated_lane_feature_avgpool(::AvgPool1dParameter* lane_feature_avgpool) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_feature_avgpool_;
  }
  if (lane_feature_avgpool) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_feature_avgpool = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_feature_avgpool, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lane_feature_avgpool_ = lane_feature_avgpool;
  // @@protoc_insertion_point(field_set_allocated:CruiseModelParameter.lane_feature_avgpool)
}

// optional .ObsFeatureFCParameter obs_feature_fc = 5;
inline bool CruiseModelParameter::_internal_has_obs_feature_fc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || obs_feature_fc_ != nullptr);
  return value;
}
inline bool CruiseModelParameter::has_obs_feature_fc() const {
  return _internal_has_obs_feature_fc();
}
inline void CruiseModelParameter::clear_obs_feature_fc() {
  if (obs_feature_fc_ != nullptr) obs_feature_fc_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ObsFeatureFCParameter& CruiseModelParameter::_internal_obs_feature_fc() const {
  const ::ObsFeatureFCParameter* p = obs_feature_fc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ObsFeatureFCParameter*>(
      &::_ObsFeatureFCParameter_default_instance_);
}
inline const ::ObsFeatureFCParameter& CruiseModelParameter::obs_feature_fc() const {
  // @@protoc_insertion_point(field_get:CruiseModelParameter.obs_feature_fc)
  return _internal_obs_feature_fc();
}
inline ::ObsFeatureFCParameter* CruiseModelParameter::release_obs_feature_fc() {
  // @@protoc_insertion_point(field_release:CruiseModelParameter.obs_feature_fc)
  _has_bits_[0] &= ~0x00000008u;
  ::ObsFeatureFCParameter* temp = obs_feature_fc_;
  obs_feature_fc_ = nullptr;
  return temp;
}
inline ::ObsFeatureFCParameter* CruiseModelParameter::_internal_mutable_obs_feature_fc() {
  _has_bits_[0] |= 0x00000008u;
  if (obs_feature_fc_ == nullptr) {
    auto* p = CreateMaybeMessage<::ObsFeatureFCParameter>(GetArenaNoVirtual());
    obs_feature_fc_ = p;
  }
  return obs_feature_fc_;
}
inline ::ObsFeatureFCParameter* CruiseModelParameter::mutable_obs_feature_fc() {
  // @@protoc_insertion_point(field_mutable:CruiseModelParameter.obs_feature_fc)
  return _internal_mutable_obs_feature_fc();
}
inline void CruiseModelParameter::set_allocated_obs_feature_fc(::ObsFeatureFCParameter* obs_feature_fc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete obs_feature_fc_;
  }
  if (obs_feature_fc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      obs_feature_fc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obs_feature_fc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  obs_feature_fc_ = obs_feature_fc;
  // @@protoc_insertion_point(field_set_allocated:CruiseModelParameter.obs_feature_fc)
}

// optional .ClassifyParameter classify = 6;
inline bool CruiseModelParameter::_internal_has_classify() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || classify_ != nullptr);
  return value;
}
inline bool CruiseModelParameter::has_classify() const {
  return _internal_has_classify();
}
inline void CruiseModelParameter::clear_classify() {
  if (classify_ != nullptr) classify_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ClassifyParameter& CruiseModelParameter::_internal_classify() const {
  const ::ClassifyParameter* p = classify_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ClassifyParameter*>(
      &::_ClassifyParameter_default_instance_);
}
inline const ::ClassifyParameter& CruiseModelParameter::classify() const {
  // @@protoc_insertion_point(field_get:CruiseModelParameter.classify)
  return _internal_classify();
}
inline ::ClassifyParameter* CruiseModelParameter::release_classify() {
  // @@protoc_insertion_point(field_release:CruiseModelParameter.classify)
  _has_bits_[0] &= ~0x00000010u;
  ::ClassifyParameter* temp = classify_;
  classify_ = nullptr;
  return temp;
}
inline ::ClassifyParameter* CruiseModelParameter::_internal_mutable_classify() {
  _has_bits_[0] |= 0x00000010u;
  if (classify_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClassifyParameter>(GetArenaNoVirtual());
    classify_ = p;
  }
  return classify_;
}
inline ::ClassifyParameter* CruiseModelParameter::mutable_classify() {
  // @@protoc_insertion_point(field_mutable:CruiseModelParameter.classify)
  return _internal_mutable_classify();
}
inline void CruiseModelParameter::set_allocated_classify(::ClassifyParameter* classify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete classify_;
  }
  if (classify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      classify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classify, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  classify_ = classify;
  // @@protoc_insertion_point(field_set_allocated:CruiseModelParameter.classify)
}

// optional .RegressParameter regress = 7;
inline bool CruiseModelParameter::_internal_has_regress() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || regress_ != nullptr);
  return value;
}
inline bool CruiseModelParameter::has_regress() const {
  return _internal_has_regress();
}
inline void CruiseModelParameter::clear_regress() {
  if (regress_ != nullptr) regress_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::RegressParameter& CruiseModelParameter::_internal_regress() const {
  const ::RegressParameter* p = regress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RegressParameter*>(
      &::_RegressParameter_default_instance_);
}
inline const ::RegressParameter& CruiseModelParameter::regress() const {
  // @@protoc_insertion_point(field_get:CruiseModelParameter.regress)
  return _internal_regress();
}
inline ::RegressParameter* CruiseModelParameter::release_regress() {
  // @@protoc_insertion_point(field_release:CruiseModelParameter.regress)
  _has_bits_[0] &= ~0x00000020u;
  ::RegressParameter* temp = regress_;
  regress_ = nullptr;
  return temp;
}
inline ::RegressParameter* CruiseModelParameter::_internal_mutable_regress() {
  _has_bits_[0] |= 0x00000020u;
  if (regress_ == nullptr) {
    auto* p = CreateMaybeMessage<::RegressParameter>(GetArenaNoVirtual());
    regress_ = p;
  }
  return regress_;
}
inline ::RegressParameter* CruiseModelParameter::mutable_regress() {
  // @@protoc_insertion_point(field_mutable:CruiseModelParameter.regress)
  return _internal_mutable_regress();
}
inline void CruiseModelParameter::set_allocated_regress(::RegressParameter* regress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete regress_;
  }
  if (regress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      regress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regress, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  regress_ = regress;
  // @@protoc_insertion_point(field_set_allocated:CruiseModelParameter.regress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto
