// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/prediction/data_pipelines/proto/cruise_model.proto

#include "modules/tools/prediction/data_pipelines/proto/cruise_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvgPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClassifyParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Conv1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneFeatureConvParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObsFeatureFCParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegressParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto;
class TensorParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TensorParameter> _instance;
} _TensorParameter_default_instance_;
class InputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputParameter> _instance;
} _InputParameter_default_instance_;
class Conv1dParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Conv1dParameter> _instance;
} _Conv1dParameter_default_instance_;
class DenseParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DenseParameter> _instance;
} _DenseParameter_default_instance_;
class ActivationParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivationParameter> _instance;
} _ActivationParameter_default_instance_;
class MaxPool1dParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaxPool1dParameter> _instance;
} _MaxPool1dParameter_default_instance_;
class AvgPool1dParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvgPool1dParameter> _instance;
} _AvgPool1dParameter_default_instance_;
class LaneFeatureConvParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneFeatureConvParameter> _instance;
} _LaneFeatureConvParameter_default_instance_;
class ObsFeatureFCParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObsFeatureFCParameter> _instance;
} _ObsFeatureFCParameter_default_instance_;
class ClassifyParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassifyParameter> _instance;
} _ClassifyParameter_default_instance_;
class RegressParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegressParameter> _instance;
} _RegressParameter_default_instance_;
class CruiseModelParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CruiseModelParameter> _instance;
} _CruiseModelParameter_default_instance_;
static void InitDefaultsscc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActivationParameter_default_instance_;
    new (ptr) ::ActivationParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ActivationParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_AvgPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AvgPool1dParameter_default_instance_;
    new (ptr) ::AvgPool1dParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AvgPool1dParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvgPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvgPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ClassifyParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClassifyParameter_default_instance_;
    new (ptr) ::ClassifyParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClassifyParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClassifyParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClassifyParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {
      &scc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Conv1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Conv1dParameter_default_instance_;
    new (ptr) ::Conv1dParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Conv1dParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Conv1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Conv1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {
      &scc_info_TensorParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CruiseModelParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CruiseModelParameter_default_instance_;
    new (ptr) ::CruiseModelParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CruiseModelParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CruiseModelParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_CruiseModelParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {
      &scc_info_LaneFeatureConvParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_MaxPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_AvgPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_ObsFeatureFCParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_ClassifyParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_RegressParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DenseParameter_default_instance_;
    new (ptr) ::DenseParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DenseParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {
      &scc_info_TensorParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_InputParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InputParameter_default_instance_;
    new (ptr) ::InputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InputParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InputParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_LaneFeatureConvParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LaneFeatureConvParameter_default_instance_;
    new (ptr) ::LaneFeatureConvParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LaneFeatureConvParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LaneFeatureConvParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LaneFeatureConvParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {
      &scc_info_Conv1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_MaxPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MaxPool1dParameter_default_instance_;
    new (ptr) ::MaxPool1dParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MaxPool1dParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaxPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ObsFeatureFCParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ObsFeatureFCParameter_default_instance_;
    new (ptr) ::ObsFeatureFCParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ObsFeatureFCParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObsFeatureFCParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ObsFeatureFCParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {
      &scc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_RegressParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegressParameter_default_instance_;
    new (ptr) ::RegressParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegressParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegressParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RegressParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {
      &scc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
      &scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_TensorParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TensorParameter_default_instance_;
    new (ptr) ::TensorParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TensorParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TensorParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TensorParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TensorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TensorParameter, data_),
  PROTOBUF_FIELD_OFFSET(::TensorParameter, shape_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::InputParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::InputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InputParameter, input_shape_),
  PROTOBUF_FIELD_OFFSET(::InputParameter, dtype_),
  PROTOBUF_FIELD_OFFSET(::InputParameter, sparse_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, shape_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, use_bias_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, kernel_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, bias_),
  PROTOBUF_FIELD_OFFSET(::Conv1dParameter, stride_),
  ~0u,
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DenseParameter, units_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, activation_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, use_bias_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, weights_),
  PROTOBUF_FIELD_OFFSET(::DenseParameter, bias_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ActivationParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ActivationParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActivationParameter, activation_),
  0,
  PROTOBUF_FIELD_OFFSET(::MaxPool1dParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MaxPool1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MaxPool1dParameter, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::MaxPool1dParameter, stride_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::AvgPool1dParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AvgPool1dParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AvgPool1dParameter, kernel_size_),
  PROTOBUF_FIELD_OFFSET(::AvgPool1dParameter, stride_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, conv1d_0_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, activation_1_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, conv1d_2_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, activation_3_),
  PROTOBUF_FIELD_OFFSET(::LaneFeatureConvParameter, conv1d_4_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, linear_0_),
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, activation_1_),
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, linear_3_),
  PROTOBUF_FIELD_OFFSET(::ObsFeatureFCParameter, activation_4_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, linear_0_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, activation_1_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, linear_3_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, activation_4_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, linear_6_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, activation_7_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, linear_9_),
  PROTOBUF_FIELD_OFFSET(::ClassifyParameter, activation_10_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RegressParameter, linear_0_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, activation_1_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, linear_3_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, activation_4_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, linear_6_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, activation_7_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, linear_9_),
  PROTOBUF_FIELD_OFFSET(::RegressParameter, activation_10_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, lane_feature_conv_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, lane_feature_maxpool_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, lane_feature_avgpool_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, obs_feature_fc_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, classify_),
  PROTOBUF_FIELD_OFFSET(::CruiseModelParameter, regress_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TensorParameter)},
  { 9, 17, sizeof(::InputParameter)},
  { 20, 30, sizeof(::Conv1dParameter)},
  { 35, 45, sizeof(::DenseParameter)},
  { 50, 56, sizeof(::ActivationParameter)},
  { 57, 64, sizeof(::MaxPool1dParameter)},
  { 66, 73, sizeof(::AvgPool1dParameter)},
  { 75, 85, sizeof(::LaneFeatureConvParameter)},
  { 90, 99, sizeof(::ObsFeatureFCParameter)},
  { 103, 116, sizeof(::ClassifyParameter)},
  { 124, 137, sizeof(::RegressParameter)},
  { 145, 156, sizeof(::CruiseModelParameter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TensorParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Conv1dParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DenseParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ActivationParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MaxPool1dParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AvgPool1dParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LaneFeatureConvParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ObsFeatureFCParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClassifyParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RegressParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CruiseModelParameter_default_instance_),
};

const char descriptor_table_protodef_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@modules/tools/prediction/data_pipeline"
  "s/proto/cruise_model.proto\"2\n\017TensorPara"
  "meter\022\020\n\004data\030\001 \003(\002B\002\020\001\022\r\n\005shape\030\002 \003(\005\"D"
  "\n\016InputParameter\022\023\n\013input_shape\030\001 \003(\005\022\r\n"
  "\005dtype\030\002 \001(\t\022\016\n\006sparse\030\003 \001(\010\"\204\001\n\017Conv1dP"
  "arameter\022\r\n\005shape\030\001 \003(\005\022\020\n\010use_bias\030\002 \001("
  "\010\022 \n\006kernel\030\003 \001(\0132\020.TensorParameter\022\036\n\004b"
  "ias\030\004 \001(\0132\020.TensorParameter\022\016\n\006stride\030\005 "
  "\001(\005\"\210\001\n\016DenseParameter\022\r\n\005units\030\001 \001(\005\022\022\n"
  "\nactivation\030\002 \001(\t\022\020\n\010use_bias\030\003 \001(\010\022!\n\007w"
  "eights\030\004 \001(\0132\020.TensorParameter\022\036\n\004bias\030\005"
  " \001(\0132\020.TensorParameter\")\n\023ActivationPara"
  "meter\022\022\n\nactivation\030\001 \001(\t\"9\n\022MaxPool1dPa"
  "rameter\022\023\n\013kernel_size\030\001 \001(\005\022\016\n\006stride\030\002"
  " \001(\005\"9\n\022AvgPool1dParameter\022\023\n\013kernel_siz"
  "e\030\001 \001(\005\022\016\n\006stride\030\002 \001(\005\"\336\001\n\030LaneFeatureC"
  "onvParameter\022\"\n\010conv1d_0\030\001 \001(\0132\020.Conv1dP"
  "arameter\022*\n\014activation_1\030\002 \001(\0132\024.Activat"
  "ionParameter\022\"\n\010conv1d_2\030\003 \001(\0132\020.Conv1dP"
  "arameter\022*\n\014activation_3\030\004 \001(\0132\024.Activat"
  "ionParameter\022\"\n\010conv1d_4\030\005 \001(\0132\020.Conv1dP"
  "arameter\"\265\001\n\025ObsFeatureFCParameter\022!\n\010li"
  "near_0\030\001 \001(\0132\017.DenseParameter\022*\n\014activat"
  "ion_1\030\002 \001(\0132\024.ActivationParameter\022!\n\010lin"
  "ear_3\030\003 \001(\0132\017.DenseParameter\022*\n\014activati"
  "on_4\030\004 \001(\0132\024.ActivationParameter\"\320\002\n\021Cla"
  "ssifyParameter\022!\n\010linear_0\030\001 \001(\0132\017.Dense"
  "Parameter\022*\n\014activation_1\030\002 \001(\0132\024.Activa"
  "tionParameter\022!\n\010linear_3\030\003 \001(\0132\017.DenseP"
  "arameter\022*\n\014activation_4\030\004 \001(\0132\024.Activat"
  "ionParameter\022!\n\010linear_6\030\005 \001(\0132\017.DensePa"
  "rameter\022*\n\014activation_7\030\006 \001(\0132\024.Activati"
  "onParameter\022!\n\010linear_9\030\007 \001(\0132\017.DensePar"
  "ameter\022+\n\ractivation_10\030\010 \001(\0132\024.Activati"
  "onParameter\"\317\002\n\020RegressParameter\022!\n\010line"
  "ar_0\030\001 \001(\0132\017.DenseParameter\022*\n\014activatio"
  "n_1\030\002 \001(\0132\024.ActivationParameter\022!\n\010linea"
  "r_3\030\003 \001(\0132\017.DenseParameter\022*\n\014activation"
  "_4\030\004 \001(\0132\024.ActivationParameter\022!\n\010linear"
  "_6\030\005 \001(\0132\017.DenseParameter\022*\n\014activation_"
  "7\030\006 \001(\0132\024.ActivationParameter\022!\n\010linear_"
  "9\030\007 \001(\0132\017.DenseParameter\022+\n\ractivation_1"
  "0\030\010 \001(\0132\024.ActivationParameter\"\254\002\n\024Cruise"
  "ModelParameter\0224\n\021lane_feature_conv\030\001 \001("
  "\0132\031.LaneFeatureConvParameter\0221\n\024lane_fea"
  "ture_maxpool\030\002 \001(\0132\023.MaxPool1dParameter\022"
  "1\n\024lane_feature_avgpool\030\003 \001(\0132\023.AvgPool1"
  "dParameter\022.\n\016obs_feature_fc\030\005 \001(\0132\026.Obs"
  "FeatureFCParameter\022$\n\010classify\030\006 \001(\0132\022.C"
  "lassifyParameter\022\"\n\007regress\030\007 \001(\0132\021.Regr"
  "essParameter"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_sccs[12] = {
  &scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_AvgPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_ClassifyParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_Conv1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_CruiseModelParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_InputParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_LaneFeatureConvParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_MaxPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_ObsFeatureFCParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_RegressParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
  &scc_info_TensorParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once;
static bool descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto = {
  &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_initialized, descriptor_table_protodef_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto, "modules/tools/prediction/data_pipelines/proto/cruise_model.proto", 2012,
  &descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_once, descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_sccs, descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto::offsets,
  file_level_metadata_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto, 12, file_level_enum_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto, file_level_service_descriptors_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto), true);

// ===================================================================

void TensorParameter::InitAsDefaultInstance() {
}
class TensorParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorParameter>()._has_bits_);
};

TensorParameter::TensorParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TensorParameter)
}
TensorParameter::TensorParameter(const TensorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TensorParameter)
}

void TensorParameter::SharedCtor() {
}

TensorParameter::~TensorParameter() {
  // @@protoc_insertion_point(destructor:TensorParameter)
  SharedDtor();
}

void TensorParameter::SharedDtor() {
}

void TensorParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TensorParameter& TensorParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TensorParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void TensorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:TensorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  shape_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TensorParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TensorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0, n = this->_internal_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_shape(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TensorParameter)
  return target;
}

size_t TensorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TensorParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 shape = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shape_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TensorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TensorParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TensorParameter)
    MergeFrom(*source);
  }
}

void TensorParameter::MergeFrom(const TensorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TensorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  shape_.MergeFrom(from.shape_);
}

void TensorParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TensorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorParameter::CopyFrom(const TensorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TensorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorParameter::IsInitialized() const {
  return true;
}

void TensorParameter::InternalSwap(TensorParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  shape_.InternalSwap(&other->shape_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputParameter::InitAsDefaultInstance() {
}
class InputParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<InputParameter>()._has_bits_);
  static void set_has_dtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sparse(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InputParameter::InputParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InputParameter)
}
InputParameter::InputParameter(const InputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_shape_(from.input_shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dtype()) {
    dtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dtype_);
  }
  sparse_ = from.sparse_;
  // @@protoc_insertion_point(copy_constructor:InputParameter)
}

void InputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  dtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sparse_ = false;
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
  dtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputParameter& InputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:InputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dtype_.ClearNonDefaultToEmptyNoArena();
  }
  sparse_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 input_shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_shape(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InputParameter.dtype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sparse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sparse(&has_bits);
          sparse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  for (int i = 0, n = this->_internal_input_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_input_shape(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string dtype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dtype().data(), static_cast<int>(this->_internal_dtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "InputParameter.dtype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dtype(), target);
  }

  // optional bool sparse = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sparse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InputParameter)
  return target;
}

size_t InputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->input_shape_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_shape_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string dtype = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dtype());
    }

    // optional bool sparse = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const InputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InputParameter)
    MergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_shape_.MergeFrom(from.input_shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      dtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dtype_);
    }
    if (cached_has_bits & 0x00000002u) {
      sparse_ = from.sparse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {
  return true;
}

void InputParameter::InternalSwap(InputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_shape_.InternalSwap(&other->input_shape_);
  dtype_.Swap(&other->dtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sparse_, other->sparse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Conv1dParameter::InitAsDefaultInstance() {
  ::_Conv1dParameter_default_instance_._instance.get_mutable()->kernel_ = const_cast< ::TensorParameter*>(
      ::TensorParameter::internal_default_instance());
  ::_Conv1dParameter_default_instance_._instance.get_mutable()->bias_ = const_cast< ::TensorParameter*>(
      ::TensorParameter::internal_default_instance());
}
class Conv1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<Conv1dParameter>()._has_bits_);
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TensorParameter& kernel(const Conv1dParameter* msg);
  static void set_has_kernel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TensorParameter& bias(const Conv1dParameter* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TensorParameter&
Conv1dParameter::_Internal::kernel(const Conv1dParameter* msg) {
  return *msg->kernel_;
}
const ::TensorParameter&
Conv1dParameter::_Internal::bias(const Conv1dParameter* msg) {
  return *msg->bias_;
}
Conv1dParameter::Conv1dParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Conv1dParameter)
}
Conv1dParameter::Conv1dParameter(const Conv1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_kernel()) {
    kernel_ = new ::TensorParameter(*from.kernel_);
  } else {
    kernel_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::TensorParameter(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&use_bias_, &from.use_bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&use_bias_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:Conv1dParameter)
}

void Conv1dParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Conv1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  ::memset(&kernel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&kernel_)) + sizeof(stride_));
}

Conv1dParameter::~Conv1dParameter() {
  // @@protoc_insertion_point(destructor:Conv1dParameter)
  SharedDtor();
}

void Conv1dParameter::SharedDtor() {
  if (this != internal_default_instance()) delete kernel_;
  if (this != internal_default_instance()) delete bias_;
}

void Conv1dParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Conv1dParameter& Conv1dParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Conv1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Conv1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:Conv1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(kernel_ != nullptr);
      kernel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_ != nullptr);
      bias_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&use_bias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_) -
        reinterpret_cast<char*>(&use_bias_)) + sizeof(stride_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Conv1dParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_bias(&has_bits);
          use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TensorParameter kernel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TensorParameter bias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stride = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Conv1dParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Conv1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  for (int i = 0, n = this->_internal_shape_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_shape(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_bias = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_bias(), target);
  }

  // optional .TensorParameter kernel = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kernel(this), target, stream);
  }

  // optional .TensorParameter bias = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bias(this), target, stream);
  }

  // optional int32 stride = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Conv1dParameter)
  return target;
}

size_t Conv1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Conv1dParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_shape_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TensorParameter kernel = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kernel_);
    }

    // optional .TensorParameter bias = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_);
    }

    // optional bool use_bias = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 stride = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stride());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Conv1dParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Conv1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Conv1dParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Conv1dParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Conv1dParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Conv1dParameter)
    MergeFrom(*source);
  }
}

void Conv1dParameter::MergeFrom(const Conv1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Conv1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_kernel()->::TensorParameter::MergeFrom(from._internal_kernel());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bias()->::TensorParameter::MergeFrom(from._internal_bias());
    }
    if (cached_has_bits & 0x00000004u) {
      use_bias_ = from.use_bias_;
    }
    if (cached_has_bits & 0x00000008u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Conv1dParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Conv1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conv1dParameter::CopyFrom(const Conv1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Conv1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conv1dParameter::IsInitialized() const {
  return true;
}

void Conv1dParameter::InternalSwap(Conv1dParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shape_.InternalSwap(&other->shape_);
  swap(kernel_, other->kernel_);
  swap(bias_, other->bias_);
  swap(use_bias_, other->use_bias_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Conv1dParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DenseParameter::InitAsDefaultInstance() {
  ::_DenseParameter_default_instance_._instance.get_mutable()->weights_ = const_cast< ::TensorParameter*>(
      ::TensorParameter::internal_default_instance());
  ::_DenseParameter_default_instance_._instance.get_mutable()->bias_ = const_cast< ::TensorParameter*>(
      ::TensorParameter::internal_default_instance());
}
class DenseParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseParameter>()._has_bits_);
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TensorParameter& weights(const DenseParameter* msg);
  static void set_has_weights(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TensorParameter& bias(const DenseParameter* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TensorParameter&
DenseParameter::_Internal::weights(const DenseParameter* msg) {
  return *msg->weights_;
}
const ::TensorParameter&
DenseParameter::_Internal::bias(const DenseParameter* msg) {
  return *msg->bias_;
}
DenseParameter::DenseParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DenseParameter)
}
DenseParameter::DenseParameter(const DenseParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activation()) {
    activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
  }
  if (from._internal_has_weights()) {
    weights_ = new ::TensorParameter(*from.weights_);
  } else {
    weights_ = nullptr;
  }
  if (from._internal_has_bias()) {
    bias_ = new ::TensorParameter(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  ::memcpy(&units_, &from.units_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_bias_) -
    reinterpret_cast<char*>(&units_)) + sizeof(use_bias_));
  // @@protoc_insertion_point(copy_constructor:DenseParameter)
}

void DenseParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&weights_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_bias_) -
      reinterpret_cast<char*>(&weights_)) + sizeof(use_bias_));
}

DenseParameter::~DenseParameter() {
  // @@protoc_insertion_point(destructor:DenseParameter)
  SharedDtor();
}

void DenseParameter::SharedDtor() {
  activation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete weights_;
  if (this != internal_default_instance()) delete bias_;
}

void DenseParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DenseParameter& DenseParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DenseParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void DenseParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:DenseParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      activation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(weights_ != nullptr);
      weights_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bias_ != nullptr);
      bias_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&units_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_bias_) -
        reinterpret_cast<char*>(&units_)) + sizeof(use_bias_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DenseParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_units(&has_bits);
          units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string activation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_activation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DenseParameter.activation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_bias(&has_bits);
          use_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TensorParameter weights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weights(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TensorParameter bias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DenseParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DenseParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 units = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(), target);
  }

  // optional string activation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DenseParameter.activation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_activation(), target);
  }

  // optional bool use_bias = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_bias(), target);
  }

  // optional .TensorParameter weights = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::weights(this), target, stream);
  }

  // optional .TensorParameter bias = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bias(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DenseParameter)
  return target;
}

size_t DenseParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DenseParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string activation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_activation());
    }

    // optional .TensorParameter weights = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *weights_);
    }

    // optional .TensorParameter bias = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bias_);
    }

    // optional int32 units = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_units());
    }

    // optional bool use_bias = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DenseParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DenseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DenseParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DenseParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DenseParameter)
    MergeFrom(*source);
  }
}

void DenseParameter::MergeFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DenseParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_weights()->::TensorParameter::MergeFrom(from._internal_weights());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bias()->::TensorParameter::MergeFrom(from._internal_bias());
    }
    if (cached_has_bits & 0x00000008u) {
      units_ = from.units_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_bias_ = from.use_bias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DenseParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DenseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseParameter::CopyFrom(const DenseParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DenseParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseParameter::IsInitialized() const {
  return true;
}

void DenseParameter::InternalSwap(DenseParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activation_.Swap(&other->activation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(weights_, other->weights_);
  swap(bias_, other->bias_);
  swap(units_, other->units_);
  swap(use_bias_, other->use_bias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivationParameter::InitAsDefaultInstance() {
}
class ActivationParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivationParameter>()._has_bits_);
  static void set_has_activation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActivationParameter::ActivationParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivationParameter)
}
ActivationParameter::ActivationParameter(const ActivationParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_activation()) {
    activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
  }
  // @@protoc_insertion_point(copy_constructor:ActivationParameter)
}

void ActivationParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  activation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActivationParameter::~ActivationParameter() {
  // @@protoc_insertion_point(destructor:ActivationParameter)
  SharedDtor();
}

void ActivationParameter::SharedDtor() {
  activation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivationParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivationParameter& ActivationParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivationParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ActivationParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ActivationParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    activation_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ActivationParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string activation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_activation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActivationParameter.activation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivationParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivationParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string activation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_activation().data(), static_cast<int>(this->_internal_activation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ActivationParameter.activation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivationParameter)
  return target;
}

size_t ActivationParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActivationParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string activation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivationParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActivationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivationParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivationParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActivationParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActivationParameter)
    MergeFrom(*source);
  }
}

void ActivationParameter::MergeFrom(const ActivationParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActivationParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activation()) {
    _has_bits_[0] |= 0x00000001u;
    activation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.activation_);
  }
}

void ActivationParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActivationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationParameter::CopyFrom(const ActivationParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActivationParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationParameter::IsInitialized() const {
  return true;
}

void ActivationParameter::InternalSwap(ActivationParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  activation_.Swap(&other->activation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaxPool1dParameter::InitAsDefaultInstance() {
}
class MaxPool1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<MaxPool1dParameter>()._has_bits_);
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MaxPool1dParameter::MaxPool1dParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaxPool1dParameter)
}
MaxPool1dParameter::MaxPool1dParameter(const MaxPool1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kernel_size_, &from.kernel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:MaxPool1dParameter)
}

void MaxPool1dParameter::SharedCtor() {
  ::memset(&kernel_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
}

MaxPool1dParameter::~MaxPool1dParameter() {
  // @@protoc_insertion_point(destructor:MaxPool1dParameter)
  SharedDtor();
}

void MaxPool1dParameter::SharedDtor() {
}

void MaxPool1dParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaxPool1dParameter& MaxPool1dParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaxPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void MaxPool1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:MaxPool1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&kernel_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_) -
        reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MaxPool1dParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 kernel_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kernel_size(&has_bits);
          kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaxPool1dParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaxPool1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kernel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kernel_size(), target);
  }

  // optional int32 stride = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaxPool1dParameter)
  return target;
}

size_t MaxPool1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MaxPool1dParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 kernel_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kernel_size());
    }

    // optional int32 stride = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stride());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaxPool1dParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MaxPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxPool1dParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaxPool1dParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MaxPool1dParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MaxPool1dParameter)
    MergeFrom(*source);
  }
}

void MaxPool1dParameter::MergeFrom(const MaxPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MaxPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaxPool1dParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MaxPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxPool1dParameter::CopyFrom(const MaxPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MaxPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxPool1dParameter::IsInitialized() const {
  return true;
}

void MaxPool1dParameter::InternalSwap(MaxPool1dParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kernel_size_, other->kernel_size_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxPool1dParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvgPool1dParameter::InitAsDefaultInstance() {
}
class AvgPool1dParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<AvgPool1dParameter>()._has_bits_);
  static void set_has_kernel_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AvgPool1dParameter::AvgPool1dParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AvgPool1dParameter)
}
AvgPool1dParameter::AvgPool1dParameter(const AvgPool1dParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kernel_size_, &from.kernel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&stride_) -
    reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
  // @@protoc_insertion_point(copy_constructor:AvgPool1dParameter)
}

void AvgPool1dParameter::SharedCtor() {
  ::memset(&kernel_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stride_) -
      reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
}

AvgPool1dParameter::~AvgPool1dParameter() {
  // @@protoc_insertion_point(destructor:AvgPool1dParameter)
  SharedDtor();
}

void AvgPool1dParameter::SharedDtor() {
}

void AvgPool1dParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvgPool1dParameter& AvgPool1dParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvgPool1dParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void AvgPool1dParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:AvgPool1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&kernel_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stride_) -
        reinterpret_cast<char*>(&kernel_size_)) + sizeof(stride_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AvgPool1dParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 kernel_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kernel_size(&has_bits);
          kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stride = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvgPool1dParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AvgPool1dParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kernel_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kernel_size(), target);
  }

  // optional int32 stride = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stride(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AvgPool1dParameter)
  return target;
}

size_t AvgPool1dParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AvgPool1dParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 kernel_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kernel_size());
    }

    // optional int32 stride = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stride());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvgPool1dParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AvgPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const AvgPool1dParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvgPool1dParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AvgPool1dParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AvgPool1dParameter)
    MergeFrom(*source);
  }
}

void AvgPool1dParameter::MergeFrom(const AvgPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AvgPool1dParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      stride_ = from.stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvgPool1dParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AvgPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvgPool1dParameter::CopyFrom(const AvgPool1dParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AvgPool1dParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvgPool1dParameter::IsInitialized() const {
  return true;
}

void AvgPool1dParameter::InternalSwap(AvgPool1dParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kernel_size_, other->kernel_size_);
  swap(stride_, other->stride_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvgPool1dParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneFeatureConvParameter::InitAsDefaultInstance() {
  ::_LaneFeatureConvParameter_default_instance_._instance.get_mutable()->conv1d_0_ = const_cast< ::Conv1dParameter*>(
      ::Conv1dParameter::internal_default_instance());
  ::_LaneFeatureConvParameter_default_instance_._instance.get_mutable()->activation_1_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_LaneFeatureConvParameter_default_instance_._instance.get_mutable()->conv1d_2_ = const_cast< ::Conv1dParameter*>(
      ::Conv1dParameter::internal_default_instance());
  ::_LaneFeatureConvParameter_default_instance_._instance.get_mutable()->activation_3_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_LaneFeatureConvParameter_default_instance_._instance.get_mutable()->conv1d_4_ = const_cast< ::Conv1dParameter*>(
      ::Conv1dParameter::internal_default_instance());
}
class LaneFeatureConvParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneFeatureConvParameter>()._has_bits_);
  static const ::Conv1dParameter& conv1d_0(const LaneFeatureConvParameter* msg);
  static void set_has_conv1d_0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ActivationParameter& activation_1(const LaneFeatureConvParameter* msg);
  static void set_has_activation_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Conv1dParameter& conv1d_2(const LaneFeatureConvParameter* msg);
  static void set_has_conv1d_2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ActivationParameter& activation_3(const LaneFeatureConvParameter* msg);
  static void set_has_activation_3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Conv1dParameter& conv1d_4(const LaneFeatureConvParameter* msg);
  static void set_has_conv1d_4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::Conv1dParameter&
LaneFeatureConvParameter::_Internal::conv1d_0(const LaneFeatureConvParameter* msg) {
  return *msg->conv1d_0_;
}
const ::ActivationParameter&
LaneFeatureConvParameter::_Internal::activation_1(const LaneFeatureConvParameter* msg) {
  return *msg->activation_1_;
}
const ::Conv1dParameter&
LaneFeatureConvParameter::_Internal::conv1d_2(const LaneFeatureConvParameter* msg) {
  return *msg->conv1d_2_;
}
const ::ActivationParameter&
LaneFeatureConvParameter::_Internal::activation_3(const LaneFeatureConvParameter* msg) {
  return *msg->activation_3_;
}
const ::Conv1dParameter&
LaneFeatureConvParameter::_Internal::conv1d_4(const LaneFeatureConvParameter* msg) {
  return *msg->conv1d_4_;
}
LaneFeatureConvParameter::LaneFeatureConvParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LaneFeatureConvParameter)
}
LaneFeatureConvParameter::LaneFeatureConvParameter(const LaneFeatureConvParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_conv1d_0()) {
    conv1d_0_ = new ::Conv1dParameter(*from.conv1d_0_);
  } else {
    conv1d_0_ = nullptr;
  }
  if (from._internal_has_activation_1()) {
    activation_1_ = new ::ActivationParameter(*from.activation_1_);
  } else {
    activation_1_ = nullptr;
  }
  if (from._internal_has_conv1d_2()) {
    conv1d_2_ = new ::Conv1dParameter(*from.conv1d_2_);
  } else {
    conv1d_2_ = nullptr;
  }
  if (from._internal_has_activation_3()) {
    activation_3_ = new ::ActivationParameter(*from.activation_3_);
  } else {
    activation_3_ = nullptr;
  }
  if (from._internal_has_conv1d_4()) {
    conv1d_4_ = new ::Conv1dParameter(*from.conv1d_4_);
  } else {
    conv1d_4_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LaneFeatureConvParameter)
}

void LaneFeatureConvParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneFeatureConvParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  ::memset(&conv1d_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conv1d_4_) -
      reinterpret_cast<char*>(&conv1d_0_)) + sizeof(conv1d_4_));
}

LaneFeatureConvParameter::~LaneFeatureConvParameter() {
  // @@protoc_insertion_point(destructor:LaneFeatureConvParameter)
  SharedDtor();
}

void LaneFeatureConvParameter::SharedDtor() {
  if (this != internal_default_instance()) delete conv1d_0_;
  if (this != internal_default_instance()) delete activation_1_;
  if (this != internal_default_instance()) delete conv1d_2_;
  if (this != internal_default_instance()) delete activation_3_;
  if (this != internal_default_instance()) delete conv1d_4_;
}

void LaneFeatureConvParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneFeatureConvParameter& LaneFeatureConvParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneFeatureConvParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LaneFeatureConvParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:LaneFeatureConvParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv1d_0_ != nullptr);
      conv1d_0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(activation_1_ != nullptr);
      activation_1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(conv1d_2_ != nullptr);
      conv1d_2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(activation_3_ != nullptr);
      activation_3_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(conv1d_4_ != nullptr);
      conv1d_4_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LaneFeatureConvParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Conv1dParameter conv1d_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv1d_0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Conv1dParameter conv1d_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv1d_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Conv1dParameter conv1d_4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv1d_4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneFeatureConvParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LaneFeatureConvParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Conv1dParameter conv1d_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::conv1d_0(this), target, stream);
  }

  // optional .ActivationParameter activation_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::activation_1(this), target, stream);
  }

  // optional .Conv1dParameter conv1d_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::conv1d_2(this), target, stream);
  }

  // optional .ActivationParameter activation_3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::activation_3(this), target, stream);
  }

  // optional .Conv1dParameter conv1d_4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::conv1d_4(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LaneFeatureConvParameter)
  return target;
}

size_t LaneFeatureConvParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LaneFeatureConvParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .Conv1dParameter conv1d_0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv1d_0_);
    }

    // optional .ActivationParameter activation_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_1_);
    }

    // optional .Conv1dParameter conv1d_2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv1d_2_);
    }

    // optional .ActivationParameter activation_3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_3_);
    }

    // optional .Conv1dParameter conv1d_4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *conv1d_4_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneFeatureConvParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LaneFeatureConvParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneFeatureConvParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneFeatureConvParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LaneFeatureConvParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LaneFeatureConvParameter)
    MergeFrom(*source);
  }
}

void LaneFeatureConvParameter::MergeFrom(const LaneFeatureConvParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LaneFeatureConvParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_conv1d_0()->::Conv1dParameter::MergeFrom(from._internal_conv1d_0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activation_1()->::ActivationParameter::MergeFrom(from._internal_activation_1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_conv1d_2()->::Conv1dParameter::MergeFrom(from._internal_conv1d_2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_activation_3()->::ActivationParameter::MergeFrom(from._internal_activation_3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_conv1d_4()->::Conv1dParameter::MergeFrom(from._internal_conv1d_4());
    }
  }
}

void LaneFeatureConvParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LaneFeatureConvParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneFeatureConvParameter::CopyFrom(const LaneFeatureConvParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LaneFeatureConvParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFeatureConvParameter::IsInitialized() const {
  return true;
}

void LaneFeatureConvParameter::InternalSwap(LaneFeatureConvParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(conv1d_0_, other->conv1d_0_);
  swap(activation_1_, other->activation_1_);
  swap(conv1d_2_, other->conv1d_2_);
  swap(activation_3_, other->activation_3_);
  swap(conv1d_4_, other->conv1d_4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneFeatureConvParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObsFeatureFCParameter::InitAsDefaultInstance() {
  ::_ObsFeatureFCParameter_default_instance_._instance.get_mutable()->linear_0_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_ObsFeatureFCParameter_default_instance_._instance.get_mutable()->activation_1_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_ObsFeatureFCParameter_default_instance_._instance.get_mutable()->linear_3_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_ObsFeatureFCParameter_default_instance_._instance.get_mutable()->activation_4_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
}
class ObsFeatureFCParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ObsFeatureFCParameter>()._has_bits_);
  static const ::DenseParameter& linear_0(const ObsFeatureFCParameter* msg);
  static void set_has_linear_0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ActivationParameter& activation_1(const ObsFeatureFCParameter* msg);
  static void set_has_activation_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DenseParameter& linear_3(const ObsFeatureFCParameter* msg);
  static void set_has_linear_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ActivationParameter& activation_4(const ObsFeatureFCParameter* msg);
  static void set_has_activation_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::DenseParameter&
ObsFeatureFCParameter::_Internal::linear_0(const ObsFeatureFCParameter* msg) {
  return *msg->linear_0_;
}
const ::ActivationParameter&
ObsFeatureFCParameter::_Internal::activation_1(const ObsFeatureFCParameter* msg) {
  return *msg->activation_1_;
}
const ::DenseParameter&
ObsFeatureFCParameter::_Internal::linear_3(const ObsFeatureFCParameter* msg) {
  return *msg->linear_3_;
}
const ::ActivationParameter&
ObsFeatureFCParameter::_Internal::activation_4(const ObsFeatureFCParameter* msg) {
  return *msg->activation_4_;
}
ObsFeatureFCParameter::ObsFeatureFCParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObsFeatureFCParameter)
}
ObsFeatureFCParameter::ObsFeatureFCParameter(const ObsFeatureFCParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_linear_0()) {
    linear_0_ = new ::DenseParameter(*from.linear_0_);
  } else {
    linear_0_ = nullptr;
  }
  if (from._internal_has_activation_1()) {
    activation_1_ = new ::ActivationParameter(*from.activation_1_);
  } else {
    activation_1_ = nullptr;
  }
  if (from._internal_has_linear_3()) {
    linear_3_ = new ::DenseParameter(*from.linear_3_);
  } else {
    linear_3_ = nullptr;
  }
  if (from._internal_has_activation_4()) {
    activation_4_ = new ::ActivationParameter(*from.activation_4_);
  } else {
    activation_4_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ObsFeatureFCParameter)
}

void ObsFeatureFCParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObsFeatureFCParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  ::memset(&linear_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activation_4_) -
      reinterpret_cast<char*>(&linear_0_)) + sizeof(activation_4_));
}

ObsFeatureFCParameter::~ObsFeatureFCParameter() {
  // @@protoc_insertion_point(destructor:ObsFeatureFCParameter)
  SharedDtor();
}

void ObsFeatureFCParameter::SharedDtor() {
  if (this != internal_default_instance()) delete linear_0_;
  if (this != internal_default_instance()) delete activation_1_;
  if (this != internal_default_instance()) delete linear_3_;
  if (this != internal_default_instance()) delete activation_4_;
}

void ObsFeatureFCParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObsFeatureFCParameter& ObsFeatureFCParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObsFeatureFCParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ObsFeatureFCParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ObsFeatureFCParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linear_0_ != nullptr);
      linear_0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(activation_1_ != nullptr);
      activation_1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_3_ != nullptr);
      linear_3_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(activation_4_ != nullptr);
      activation_4_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObsFeatureFCParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DenseParameter linear_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DenseParameter linear_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObsFeatureFCParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObsFeatureFCParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DenseParameter linear_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_0(this), target, stream);
  }

  // optional .ActivationParameter activation_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::activation_1(this), target, stream);
  }

  // optional .DenseParameter linear_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linear_3(this), target, stream);
  }

  // optional .ActivationParameter activation_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::activation_4(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObsFeatureFCParameter)
  return target;
}

size_t ObsFeatureFCParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObsFeatureFCParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .DenseParameter linear_0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_0_);
    }

    // optional .ActivationParameter activation_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_1_);
    }

    // optional .DenseParameter linear_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_3_);
    }

    // optional .ActivationParameter activation_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_4_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObsFeatureFCParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ObsFeatureFCParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ObsFeatureFCParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObsFeatureFCParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ObsFeatureFCParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ObsFeatureFCParameter)
    MergeFrom(*source);
  }
}

void ObsFeatureFCParameter::MergeFrom(const ObsFeatureFCParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObsFeatureFCParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_linear_0()->::DenseParameter::MergeFrom(from._internal_linear_0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activation_1()->::ActivationParameter::MergeFrom(from._internal_activation_1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_3()->::DenseParameter::MergeFrom(from._internal_linear_3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_activation_4()->::ActivationParameter::MergeFrom(from._internal_activation_4());
    }
  }
}

void ObsFeatureFCParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ObsFeatureFCParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObsFeatureFCParameter::CopyFrom(const ObsFeatureFCParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObsFeatureFCParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsFeatureFCParameter::IsInitialized() const {
  return true;
}

void ObsFeatureFCParameter::InternalSwap(ObsFeatureFCParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(linear_0_, other->linear_0_);
  swap(activation_1_, other->activation_1_);
  swap(linear_3_, other->linear_3_);
  swap(activation_4_, other->activation_4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObsFeatureFCParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassifyParameter::InitAsDefaultInstance() {
  ::_ClassifyParameter_default_instance_._instance.get_mutable()->linear_0_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_ClassifyParameter_default_instance_._instance.get_mutable()->activation_1_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_ClassifyParameter_default_instance_._instance.get_mutable()->linear_3_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_ClassifyParameter_default_instance_._instance.get_mutable()->activation_4_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_ClassifyParameter_default_instance_._instance.get_mutable()->linear_6_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_ClassifyParameter_default_instance_._instance.get_mutable()->activation_7_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_ClassifyParameter_default_instance_._instance.get_mutable()->linear_9_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_ClassifyParameter_default_instance_._instance.get_mutable()->activation_10_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
}
class ClassifyParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassifyParameter>()._has_bits_);
  static const ::DenseParameter& linear_0(const ClassifyParameter* msg);
  static void set_has_linear_0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ActivationParameter& activation_1(const ClassifyParameter* msg);
  static void set_has_activation_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DenseParameter& linear_3(const ClassifyParameter* msg);
  static void set_has_linear_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ActivationParameter& activation_4(const ClassifyParameter* msg);
  static void set_has_activation_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::DenseParameter& linear_6(const ClassifyParameter* msg);
  static void set_has_linear_6(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ActivationParameter& activation_7(const ClassifyParameter* msg);
  static void set_has_activation_7(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::DenseParameter& linear_9(const ClassifyParameter* msg);
  static void set_has_linear_9(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ActivationParameter& activation_10(const ClassifyParameter* msg);
  static void set_has_activation_10(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::DenseParameter&
ClassifyParameter::_Internal::linear_0(const ClassifyParameter* msg) {
  return *msg->linear_0_;
}
const ::ActivationParameter&
ClassifyParameter::_Internal::activation_1(const ClassifyParameter* msg) {
  return *msg->activation_1_;
}
const ::DenseParameter&
ClassifyParameter::_Internal::linear_3(const ClassifyParameter* msg) {
  return *msg->linear_3_;
}
const ::ActivationParameter&
ClassifyParameter::_Internal::activation_4(const ClassifyParameter* msg) {
  return *msg->activation_4_;
}
const ::DenseParameter&
ClassifyParameter::_Internal::linear_6(const ClassifyParameter* msg) {
  return *msg->linear_6_;
}
const ::ActivationParameter&
ClassifyParameter::_Internal::activation_7(const ClassifyParameter* msg) {
  return *msg->activation_7_;
}
const ::DenseParameter&
ClassifyParameter::_Internal::linear_9(const ClassifyParameter* msg) {
  return *msg->linear_9_;
}
const ::ActivationParameter&
ClassifyParameter::_Internal::activation_10(const ClassifyParameter* msg) {
  return *msg->activation_10_;
}
ClassifyParameter::ClassifyParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClassifyParameter)
}
ClassifyParameter::ClassifyParameter(const ClassifyParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_linear_0()) {
    linear_0_ = new ::DenseParameter(*from.linear_0_);
  } else {
    linear_0_ = nullptr;
  }
  if (from._internal_has_activation_1()) {
    activation_1_ = new ::ActivationParameter(*from.activation_1_);
  } else {
    activation_1_ = nullptr;
  }
  if (from._internal_has_linear_3()) {
    linear_3_ = new ::DenseParameter(*from.linear_3_);
  } else {
    linear_3_ = nullptr;
  }
  if (from._internal_has_activation_4()) {
    activation_4_ = new ::ActivationParameter(*from.activation_4_);
  } else {
    activation_4_ = nullptr;
  }
  if (from._internal_has_linear_6()) {
    linear_6_ = new ::DenseParameter(*from.linear_6_);
  } else {
    linear_6_ = nullptr;
  }
  if (from._internal_has_activation_7()) {
    activation_7_ = new ::ActivationParameter(*from.activation_7_);
  } else {
    activation_7_ = nullptr;
  }
  if (from._internal_has_linear_9()) {
    linear_9_ = new ::DenseParameter(*from.linear_9_);
  } else {
    linear_9_ = nullptr;
  }
  if (from._internal_has_activation_10()) {
    activation_10_ = new ::ActivationParameter(*from.activation_10_);
  } else {
    activation_10_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ClassifyParameter)
}

void ClassifyParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassifyParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  ::memset(&linear_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activation_10_) -
      reinterpret_cast<char*>(&linear_0_)) + sizeof(activation_10_));
}

ClassifyParameter::~ClassifyParameter() {
  // @@protoc_insertion_point(destructor:ClassifyParameter)
  SharedDtor();
}

void ClassifyParameter::SharedDtor() {
  if (this != internal_default_instance()) delete linear_0_;
  if (this != internal_default_instance()) delete activation_1_;
  if (this != internal_default_instance()) delete linear_3_;
  if (this != internal_default_instance()) delete activation_4_;
  if (this != internal_default_instance()) delete linear_6_;
  if (this != internal_default_instance()) delete activation_7_;
  if (this != internal_default_instance()) delete linear_9_;
  if (this != internal_default_instance()) delete activation_10_;
}

void ClassifyParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassifyParameter& ClassifyParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassifyParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ClassifyParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassifyParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linear_0_ != nullptr);
      linear_0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(activation_1_ != nullptr);
      activation_1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_3_ != nullptr);
      linear_3_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(activation_4_ != nullptr);
      activation_4_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(linear_6_ != nullptr);
      linear_6_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(activation_7_ != nullptr);
      activation_7_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(linear_9_ != nullptr);
      linear_9_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(activation_10_ != nullptr);
      activation_10_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClassifyParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DenseParameter linear_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DenseParameter linear_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DenseParameter linear_6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_7 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DenseParameter linear_9 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_10 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassifyParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassifyParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DenseParameter linear_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_0(this), target, stream);
  }

  // optional .ActivationParameter activation_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::activation_1(this), target, stream);
  }

  // optional .DenseParameter linear_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linear_3(this), target, stream);
  }

  // optional .ActivationParameter activation_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::activation_4(this), target, stream);
  }

  // optional .DenseParameter linear_6 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::linear_6(this), target, stream);
  }

  // optional .ActivationParameter activation_7 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::activation_7(this), target, stream);
  }

  // optional .DenseParameter linear_9 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::linear_9(this), target, stream);
  }

  // optional .ActivationParameter activation_10 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::activation_10(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassifyParameter)
  return target;
}

size_t ClassifyParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassifyParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .DenseParameter linear_0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_0_);
    }

    // optional .ActivationParameter activation_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_1_);
    }

    // optional .DenseParameter linear_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_3_);
    }

    // optional .ActivationParameter activation_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_4_);
    }

    // optional .DenseParameter linear_6 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_6_);
    }

    // optional .ActivationParameter activation_7 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_7_);
    }

    // optional .DenseParameter linear_9 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_9_);
    }

    // optional .ActivationParameter activation_10 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_10_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassifyParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClassifyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassifyParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassifyParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClassifyParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClassifyParameter)
    MergeFrom(*source);
  }
}

void ClassifyParameter::MergeFrom(const ClassifyParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClassifyParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_linear_0()->::DenseParameter::MergeFrom(from._internal_linear_0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activation_1()->::ActivationParameter::MergeFrom(from._internal_activation_1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_3()->::DenseParameter::MergeFrom(from._internal_linear_3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_activation_4()->::ActivationParameter::MergeFrom(from._internal_activation_4());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_linear_6()->::DenseParameter::MergeFrom(from._internal_linear_6());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_activation_7()->::ActivationParameter::MergeFrom(from._internal_activation_7());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_linear_9()->::DenseParameter::MergeFrom(from._internal_linear_9());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_activation_10()->::ActivationParameter::MergeFrom(from._internal_activation_10());
    }
  }
}

void ClassifyParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClassifyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassifyParameter::CopyFrom(const ClassifyParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassifyParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifyParameter::IsInitialized() const {
  return true;
}

void ClassifyParameter::InternalSwap(ClassifyParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(linear_0_, other->linear_0_);
  swap(activation_1_, other->activation_1_);
  swap(linear_3_, other->linear_3_);
  swap(activation_4_, other->activation_4_);
  swap(linear_6_, other->linear_6_);
  swap(activation_7_, other->activation_7_);
  swap(linear_9_, other->linear_9_);
  swap(activation_10_, other->activation_10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassifyParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegressParameter::InitAsDefaultInstance() {
  ::_RegressParameter_default_instance_._instance.get_mutable()->linear_0_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_RegressParameter_default_instance_._instance.get_mutable()->activation_1_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_RegressParameter_default_instance_._instance.get_mutable()->linear_3_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_RegressParameter_default_instance_._instance.get_mutable()->activation_4_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_RegressParameter_default_instance_._instance.get_mutable()->linear_6_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_RegressParameter_default_instance_._instance.get_mutable()->activation_7_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
  ::_RegressParameter_default_instance_._instance.get_mutable()->linear_9_ = const_cast< ::DenseParameter*>(
      ::DenseParameter::internal_default_instance());
  ::_RegressParameter_default_instance_._instance.get_mutable()->activation_10_ = const_cast< ::ActivationParameter*>(
      ::ActivationParameter::internal_default_instance());
}
class RegressParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<RegressParameter>()._has_bits_);
  static const ::DenseParameter& linear_0(const RegressParameter* msg);
  static void set_has_linear_0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ActivationParameter& activation_1(const RegressParameter* msg);
  static void set_has_activation_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DenseParameter& linear_3(const RegressParameter* msg);
  static void set_has_linear_3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ActivationParameter& activation_4(const RegressParameter* msg);
  static void set_has_activation_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::DenseParameter& linear_6(const RegressParameter* msg);
  static void set_has_linear_6(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ActivationParameter& activation_7(const RegressParameter* msg);
  static void set_has_activation_7(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::DenseParameter& linear_9(const RegressParameter* msg);
  static void set_has_linear_9(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ActivationParameter& activation_10(const RegressParameter* msg);
  static void set_has_activation_10(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::DenseParameter&
RegressParameter::_Internal::linear_0(const RegressParameter* msg) {
  return *msg->linear_0_;
}
const ::ActivationParameter&
RegressParameter::_Internal::activation_1(const RegressParameter* msg) {
  return *msg->activation_1_;
}
const ::DenseParameter&
RegressParameter::_Internal::linear_3(const RegressParameter* msg) {
  return *msg->linear_3_;
}
const ::ActivationParameter&
RegressParameter::_Internal::activation_4(const RegressParameter* msg) {
  return *msg->activation_4_;
}
const ::DenseParameter&
RegressParameter::_Internal::linear_6(const RegressParameter* msg) {
  return *msg->linear_6_;
}
const ::ActivationParameter&
RegressParameter::_Internal::activation_7(const RegressParameter* msg) {
  return *msg->activation_7_;
}
const ::DenseParameter&
RegressParameter::_Internal::linear_9(const RegressParameter* msg) {
  return *msg->linear_9_;
}
const ::ActivationParameter&
RegressParameter::_Internal::activation_10(const RegressParameter* msg) {
  return *msg->activation_10_;
}
RegressParameter::RegressParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegressParameter)
}
RegressParameter::RegressParameter(const RegressParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_linear_0()) {
    linear_0_ = new ::DenseParameter(*from.linear_0_);
  } else {
    linear_0_ = nullptr;
  }
  if (from._internal_has_activation_1()) {
    activation_1_ = new ::ActivationParameter(*from.activation_1_);
  } else {
    activation_1_ = nullptr;
  }
  if (from._internal_has_linear_3()) {
    linear_3_ = new ::DenseParameter(*from.linear_3_);
  } else {
    linear_3_ = nullptr;
  }
  if (from._internal_has_activation_4()) {
    activation_4_ = new ::ActivationParameter(*from.activation_4_);
  } else {
    activation_4_ = nullptr;
  }
  if (from._internal_has_linear_6()) {
    linear_6_ = new ::DenseParameter(*from.linear_6_);
  } else {
    linear_6_ = nullptr;
  }
  if (from._internal_has_activation_7()) {
    activation_7_ = new ::ActivationParameter(*from.activation_7_);
  } else {
    activation_7_ = nullptr;
  }
  if (from._internal_has_linear_9()) {
    linear_9_ = new ::DenseParameter(*from.linear_9_);
  } else {
    linear_9_ = nullptr;
  }
  if (from._internal_has_activation_10()) {
    activation_10_ = new ::ActivationParameter(*from.activation_10_);
  } else {
    activation_10_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RegressParameter)
}

void RegressParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegressParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  ::memset(&linear_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activation_10_) -
      reinterpret_cast<char*>(&linear_0_)) + sizeof(activation_10_));
}

RegressParameter::~RegressParameter() {
  // @@protoc_insertion_point(destructor:RegressParameter)
  SharedDtor();
}

void RegressParameter::SharedDtor() {
  if (this != internal_default_instance()) delete linear_0_;
  if (this != internal_default_instance()) delete activation_1_;
  if (this != internal_default_instance()) delete linear_3_;
  if (this != internal_default_instance()) delete activation_4_;
  if (this != internal_default_instance()) delete linear_6_;
  if (this != internal_default_instance()) delete activation_7_;
  if (this != internal_default_instance()) delete linear_9_;
  if (this != internal_default_instance()) delete activation_10_;
}

void RegressParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegressParameter& RegressParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegressParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void RegressParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:RegressParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linear_0_ != nullptr);
      linear_0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(activation_1_ != nullptr);
      activation_1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_3_ != nullptr);
      linear_3_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(activation_4_ != nullptr);
      activation_4_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(linear_6_ != nullptr);
      linear_6_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(activation_7_ != nullptr);
      activation_7_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(linear_9_ != nullptr);
      linear_9_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(activation_10_ != nullptr);
      activation_10_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegressParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .DenseParameter linear_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DenseParameter linear_3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DenseParameter linear_6 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_7 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DenseParameter linear_9 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ActivationParameter activation_10 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegressParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegressParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DenseParameter linear_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_0(this), target, stream);
  }

  // optional .ActivationParameter activation_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::activation_1(this), target, stream);
  }

  // optional .DenseParameter linear_3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linear_3(this), target, stream);
  }

  // optional .ActivationParameter activation_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::activation_4(this), target, stream);
  }

  // optional .DenseParameter linear_6 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::linear_6(this), target, stream);
  }

  // optional .ActivationParameter activation_7 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::activation_7(this), target, stream);
  }

  // optional .DenseParameter linear_9 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::linear_9(this), target, stream);
  }

  // optional .ActivationParameter activation_10 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::activation_10(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegressParameter)
  return target;
}

size_t RegressParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegressParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .DenseParameter linear_0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_0_);
    }

    // optional .ActivationParameter activation_1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_1_);
    }

    // optional .DenseParameter linear_3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_3_);
    }

    // optional .ActivationParameter activation_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_4_);
    }

    // optional .DenseParameter linear_6 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_6_);
    }

    // optional .ActivationParameter activation_7 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_7_);
    }

    // optional .DenseParameter linear_9 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_9_);
    }

    // optional .ActivationParameter activation_10 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activation_10_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegressParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegressParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const RegressParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegressParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegressParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegressParameter)
    MergeFrom(*source);
  }
}

void RegressParameter::MergeFrom(const RegressParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegressParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_linear_0()->::DenseParameter::MergeFrom(from._internal_linear_0());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_activation_1()->::ActivationParameter::MergeFrom(from._internal_activation_1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_3()->::DenseParameter::MergeFrom(from._internal_linear_3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_activation_4()->::ActivationParameter::MergeFrom(from._internal_activation_4());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_linear_6()->::DenseParameter::MergeFrom(from._internal_linear_6());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_activation_7()->::ActivationParameter::MergeFrom(from._internal_activation_7());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_linear_9()->::DenseParameter::MergeFrom(from._internal_linear_9());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_activation_10()->::ActivationParameter::MergeFrom(from._internal_activation_10());
    }
  }
}

void RegressParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegressParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegressParameter::CopyFrom(const RegressParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegressParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegressParameter::IsInitialized() const {
  return true;
}

void RegressParameter::InternalSwap(RegressParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(linear_0_, other->linear_0_);
  swap(activation_1_, other->activation_1_);
  swap(linear_3_, other->linear_3_);
  swap(activation_4_, other->activation_4_);
  swap(linear_6_, other->linear_6_);
  swap(activation_7_, other->activation_7_);
  swap(linear_9_, other->linear_9_);
  swap(activation_10_, other->activation_10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegressParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CruiseModelParameter::InitAsDefaultInstance() {
  ::_CruiseModelParameter_default_instance_._instance.get_mutable()->lane_feature_conv_ = const_cast< ::LaneFeatureConvParameter*>(
      ::LaneFeatureConvParameter::internal_default_instance());
  ::_CruiseModelParameter_default_instance_._instance.get_mutable()->lane_feature_maxpool_ = const_cast< ::MaxPool1dParameter*>(
      ::MaxPool1dParameter::internal_default_instance());
  ::_CruiseModelParameter_default_instance_._instance.get_mutable()->lane_feature_avgpool_ = const_cast< ::AvgPool1dParameter*>(
      ::AvgPool1dParameter::internal_default_instance());
  ::_CruiseModelParameter_default_instance_._instance.get_mutable()->obs_feature_fc_ = const_cast< ::ObsFeatureFCParameter*>(
      ::ObsFeatureFCParameter::internal_default_instance());
  ::_CruiseModelParameter_default_instance_._instance.get_mutable()->classify_ = const_cast< ::ClassifyParameter*>(
      ::ClassifyParameter::internal_default_instance());
  ::_CruiseModelParameter_default_instance_._instance.get_mutable()->regress_ = const_cast< ::RegressParameter*>(
      ::RegressParameter::internal_default_instance());
}
class CruiseModelParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CruiseModelParameter>()._has_bits_);
  static const ::LaneFeatureConvParameter& lane_feature_conv(const CruiseModelParameter* msg);
  static void set_has_lane_feature_conv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MaxPool1dParameter& lane_feature_maxpool(const CruiseModelParameter* msg);
  static void set_has_lane_feature_maxpool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::AvgPool1dParameter& lane_feature_avgpool(const CruiseModelParameter* msg);
  static void set_has_lane_feature_avgpool(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ObsFeatureFCParameter& obs_feature_fc(const CruiseModelParameter* msg);
  static void set_has_obs_feature_fc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ClassifyParameter& classify(const CruiseModelParameter* msg);
  static void set_has_classify(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RegressParameter& regress(const CruiseModelParameter* msg);
  static void set_has_regress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::LaneFeatureConvParameter&
CruiseModelParameter::_Internal::lane_feature_conv(const CruiseModelParameter* msg) {
  return *msg->lane_feature_conv_;
}
const ::MaxPool1dParameter&
CruiseModelParameter::_Internal::lane_feature_maxpool(const CruiseModelParameter* msg) {
  return *msg->lane_feature_maxpool_;
}
const ::AvgPool1dParameter&
CruiseModelParameter::_Internal::lane_feature_avgpool(const CruiseModelParameter* msg) {
  return *msg->lane_feature_avgpool_;
}
const ::ObsFeatureFCParameter&
CruiseModelParameter::_Internal::obs_feature_fc(const CruiseModelParameter* msg) {
  return *msg->obs_feature_fc_;
}
const ::ClassifyParameter&
CruiseModelParameter::_Internal::classify(const CruiseModelParameter* msg) {
  return *msg->classify_;
}
const ::RegressParameter&
CruiseModelParameter::_Internal::regress(const CruiseModelParameter* msg) {
  return *msg->regress_;
}
CruiseModelParameter::CruiseModelParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CruiseModelParameter)
}
CruiseModelParameter::CruiseModelParameter(const CruiseModelParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lane_feature_conv()) {
    lane_feature_conv_ = new ::LaneFeatureConvParameter(*from.lane_feature_conv_);
  } else {
    lane_feature_conv_ = nullptr;
  }
  if (from._internal_has_lane_feature_maxpool()) {
    lane_feature_maxpool_ = new ::MaxPool1dParameter(*from.lane_feature_maxpool_);
  } else {
    lane_feature_maxpool_ = nullptr;
  }
  if (from._internal_has_lane_feature_avgpool()) {
    lane_feature_avgpool_ = new ::AvgPool1dParameter(*from.lane_feature_avgpool_);
  } else {
    lane_feature_avgpool_ = nullptr;
  }
  if (from._internal_has_obs_feature_fc()) {
    obs_feature_fc_ = new ::ObsFeatureFCParameter(*from.obs_feature_fc_);
  } else {
    obs_feature_fc_ = nullptr;
  }
  if (from._internal_has_classify()) {
    classify_ = new ::ClassifyParameter(*from.classify_);
  } else {
    classify_ = nullptr;
  }
  if (from._internal_has_regress()) {
    regress_ = new ::RegressParameter(*from.regress_);
  } else {
    regress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CruiseModelParameter)
}

void CruiseModelParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CruiseModelParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  ::memset(&lane_feature_conv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&regress_) -
      reinterpret_cast<char*>(&lane_feature_conv_)) + sizeof(regress_));
}

CruiseModelParameter::~CruiseModelParameter() {
  // @@protoc_insertion_point(destructor:CruiseModelParameter)
  SharedDtor();
}

void CruiseModelParameter::SharedDtor() {
  if (this != internal_default_instance()) delete lane_feature_conv_;
  if (this != internal_default_instance()) delete lane_feature_maxpool_;
  if (this != internal_default_instance()) delete lane_feature_avgpool_;
  if (this != internal_default_instance()) delete obs_feature_fc_;
  if (this != internal_default_instance()) delete classify_;
  if (this != internal_default_instance()) delete regress_;
}

void CruiseModelParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CruiseModelParameter& CruiseModelParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CruiseModelParameter_modules_2ftools_2fprediction_2fdata_5fpipelines_2fproto_2fcruise_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CruiseModelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:CruiseModelParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lane_feature_conv_ != nullptr);
      lane_feature_conv_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_feature_maxpool_ != nullptr);
      lane_feature_maxpool_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lane_feature_avgpool_ != nullptr);
      lane_feature_avgpool_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(obs_feature_fc_ != nullptr);
      obs_feature_fc_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(classify_ != nullptr);
      classify_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(regress_ != nullptr);
      regress_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CruiseModelParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .LaneFeatureConvParameter lane_feature_conv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature_conv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MaxPool1dParameter lane_feature_maxpool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature_maxpool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .AvgPool1dParameter lane_feature_avgpool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_feature_avgpool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ObsFeatureFCParameter obs_feature_fc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_obs_feature_fc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ClassifyParameter classify = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_classify(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RegressParameter regress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_regress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CruiseModelParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CruiseModelParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .LaneFeatureConvParameter lane_feature_conv = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lane_feature_conv(this), target, stream);
  }

  // optional .MaxPool1dParameter lane_feature_maxpool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lane_feature_maxpool(this), target, stream);
  }

  // optional .AvgPool1dParameter lane_feature_avgpool = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lane_feature_avgpool(this), target, stream);
  }

  // optional .ObsFeatureFCParameter obs_feature_fc = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::obs_feature_fc(this), target, stream);
  }

  // optional .ClassifyParameter classify = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::classify(this), target, stream);
  }

  // optional .RegressParameter regress = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::regress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CruiseModelParameter)
  return target;
}

size_t CruiseModelParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CruiseModelParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .LaneFeatureConvParameter lane_feature_conv = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_feature_conv_);
    }

    // optional .MaxPool1dParameter lane_feature_maxpool = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_feature_maxpool_);
    }

    // optional .AvgPool1dParameter lane_feature_avgpool = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lane_feature_avgpool_);
    }

    // optional .ObsFeatureFCParameter obs_feature_fc = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obs_feature_fc_);
    }

    // optional .ClassifyParameter classify = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classify_);
    }

    // optional .RegressParameter regress = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *regress_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CruiseModelParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CruiseModelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CruiseModelParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CruiseModelParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CruiseModelParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CruiseModelParameter)
    MergeFrom(*source);
  }
}

void CruiseModelParameter::MergeFrom(const CruiseModelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CruiseModelParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lane_feature_conv()->::LaneFeatureConvParameter::MergeFrom(from._internal_lane_feature_conv());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lane_feature_maxpool()->::MaxPool1dParameter::MergeFrom(from._internal_lane_feature_maxpool());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lane_feature_avgpool()->::AvgPool1dParameter::MergeFrom(from._internal_lane_feature_avgpool());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_obs_feature_fc()->::ObsFeatureFCParameter::MergeFrom(from._internal_obs_feature_fc());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_classify()->::ClassifyParameter::MergeFrom(from._internal_classify());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_regress()->::RegressParameter::MergeFrom(from._internal_regress());
    }
  }
}

void CruiseModelParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CruiseModelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CruiseModelParameter::CopyFrom(const CruiseModelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CruiseModelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CruiseModelParameter::IsInitialized() const {
  return true;
}

void CruiseModelParameter::InternalSwap(CruiseModelParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lane_feature_conv_, other->lane_feature_conv_);
  swap(lane_feature_maxpool_, other->lane_feature_maxpool_);
  swap(lane_feature_avgpool_, other->lane_feature_avgpool_);
  swap(obs_feature_fc_, other->obs_feature_fc_);
  swap(classify_, other->classify_);
  swap(regress_, other->regress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CruiseModelParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TensorParameter* Arena::CreateMaybeMessage< ::TensorParameter >(Arena* arena) {
  return Arena::CreateInternal< ::TensorParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::InputParameter* Arena::CreateMaybeMessage< ::InputParameter >(Arena* arena) {
  return Arena::CreateInternal< ::InputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::Conv1dParameter* Arena::CreateMaybeMessage< ::Conv1dParameter >(Arena* arena) {
  return Arena::CreateInternal< ::Conv1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::DenseParameter* Arena::CreateMaybeMessage< ::DenseParameter >(Arena* arena) {
  return Arena::CreateInternal< ::DenseParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ActivationParameter* Arena::CreateMaybeMessage< ::ActivationParameter >(Arena* arena) {
  return Arena::CreateInternal< ::ActivationParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::MaxPool1dParameter* Arena::CreateMaybeMessage< ::MaxPool1dParameter >(Arena* arena) {
  return Arena::CreateInternal< ::MaxPool1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::AvgPool1dParameter* Arena::CreateMaybeMessage< ::AvgPool1dParameter >(Arena* arena) {
  return Arena::CreateInternal< ::AvgPool1dParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::LaneFeatureConvParameter* Arena::CreateMaybeMessage< ::LaneFeatureConvParameter >(Arena* arena) {
  return Arena::CreateInternal< ::LaneFeatureConvParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ObsFeatureFCParameter* Arena::CreateMaybeMessage< ::ObsFeatureFCParameter >(Arena* arena) {
  return Arena::CreateInternal< ::ObsFeatureFCParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ClassifyParameter* Arena::CreateMaybeMessage< ::ClassifyParameter >(Arena* arena) {
  return Arena::CreateInternal< ::ClassifyParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::RegressParameter* Arena::CreateMaybeMessage< ::RegressParameter >(Arena* arena) {
  return Arena::CreateInternal< ::RegressParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::CruiseModelParameter* Arena::CreateMaybeMessage< ::CruiseModelParameter >(Arena* arena) {
  return Arena::CreateInternal< ::CruiseModelParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
