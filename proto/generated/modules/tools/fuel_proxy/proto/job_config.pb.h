// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/fuel_proxy/proto/job_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto;
namespace apollo {
namespace tools {
class BosConfig;
class BosConfigDefaultTypeInternal;
extern BosConfigDefaultTypeInternal _BosConfig_default_instance_;
class JobConfig;
class JobConfigDefaultTypeInternal;
extern JobConfigDefaultTypeInternal _JobConfig_default_instance_;
class Storage;
class StorageDefaultTypeInternal;
extern StorageDefaultTypeInternal _Storage_default_instance_;
}  // namespace tools
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::tools::BosConfig* Arena::CreateMaybeMessage<::apollo::tools::BosConfig>(Arena*);
template<> ::apollo::tools::JobConfig* Arena::CreateMaybeMessage<::apollo::tools::JobConfig>(Arena*);
template<> ::apollo::tools::Storage* Arena::CreateMaybeMessage<::apollo::tools::Storage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace tools {

enum BosConfig_Region : int {
  BosConfig_Region_bj = 0,
  BosConfig_Region_gz = 1,
  BosConfig_Region_su = 2
};
bool BosConfig_Region_IsValid(int value);
constexpr BosConfig_Region BosConfig_Region_Region_MIN = BosConfig_Region_bj;
constexpr BosConfig_Region BosConfig_Region_Region_MAX = BosConfig_Region_su;
constexpr int BosConfig_Region_Region_ARRAYSIZE = BosConfig_Region_Region_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BosConfig_Region_descriptor();
template<typename T>
inline const std::string& BosConfig_Region_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BosConfig_Region>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BosConfig_Region_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BosConfig_Region_descriptor(), enum_t_value);
}
inline bool BosConfig_Region_Parse(
    const std::string& name, BosConfig_Region* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BosConfig_Region>(
    BosConfig_Region_descriptor(), name, value);
}
enum JobConfig_JobType : int {
  JobConfig_JobType_UNKNOWN = 0,
  JobConfig_JobType_VEHICLE_CALIBRATION = 1
};
bool JobConfig_JobType_IsValid(int value);
constexpr JobConfig_JobType JobConfig_JobType_JobType_MIN = JobConfig_JobType_UNKNOWN;
constexpr JobConfig_JobType JobConfig_JobType_JobType_MAX = JobConfig_JobType_VEHICLE_CALIBRATION;
constexpr int JobConfig_JobType_JobType_ARRAYSIZE = JobConfig_JobType_JobType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobConfig_JobType_descriptor();
template<typename T>
inline const std::string& JobConfig_JobType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JobConfig_JobType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JobConfig_JobType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JobConfig_JobType_descriptor(), enum_t_value);
}
inline bool JobConfig_JobType_Parse(
    const std::string& name, JobConfig_JobType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JobConfig_JobType>(
    JobConfig_JobType_descriptor(), name, value);
}
// ===================================================================

class BosConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.tools.BosConfig) */ {
 public:
  BosConfig();
  virtual ~BosConfig();

  BosConfig(const BosConfig& from);
  BosConfig(BosConfig&& from) noexcept
    : BosConfig() {
    *this = ::std::move(from);
  }

  inline BosConfig& operator=(const BosConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BosConfig& operator=(BosConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BosConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BosConfig* internal_default_instance() {
    return reinterpret_cast<const BosConfig*>(
               &_BosConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BosConfig& a, BosConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BosConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BosConfig* New() const final {
    return CreateMaybeMessage<BosConfig>(nullptr);
  }

  BosConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BosConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BosConfig& from);
  void MergeFrom(const BosConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BosConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.tools.BosConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto);
    return ::descriptor_table_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BosConfig_Region Region;
  static constexpr Region bj =
    BosConfig_Region_bj;
  static constexpr Region gz =
    BosConfig_Region_gz;
  static constexpr Region su =
    BosConfig_Region_su;
  static inline bool Region_IsValid(int value) {
    return BosConfig_Region_IsValid(value);
  }
  static constexpr Region Region_MIN =
    BosConfig_Region_Region_MIN;
  static constexpr Region Region_MAX =
    BosConfig_Region_Region_MAX;
  static constexpr int Region_ARRAYSIZE =
    BosConfig_Region_Region_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Region_descriptor() {
    return BosConfig_Region_descriptor();
  }
  template<typename T>
  static inline const std::string& Region_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Region>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Region_Name.");
    return BosConfig_Region_Name(enum_t_value);
  }
  static inline bool Region_Parse(const std::string& name,
      Region* value) {
    return BosConfig_Region_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kAccessKeyFieldNumber = 2,
    kSecretKeyFieldNumber = 3,
    kRegionFieldNumber = 4,
  };
  // optional string bucket = 1;
  bool has_bucket() const;
  private:
  bool _internal_has_bucket() const;
  public:
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // optional string access_key = 2;
  bool has_access_key() const;
  private:
  bool _internal_has_access_key() const;
  public:
  void clear_access_key();
  const std::string& access_key() const;
  void set_access_key(const std::string& value);
  void set_access_key(std::string&& value);
  void set_access_key(const char* value);
  void set_access_key(const char* value, size_t size);
  std::string* mutable_access_key();
  std::string* release_access_key();
  void set_allocated_access_key(std::string* access_key);
  private:
  const std::string& _internal_access_key() const;
  void _internal_set_access_key(const std::string& value);
  std::string* _internal_mutable_access_key();
  public:

  // optional string secret_key = 3;
  bool has_secret_key() const;
  private:
  bool _internal_has_secret_key() const;
  public:
  void clear_secret_key();
  const std::string& secret_key() const;
  void set_secret_key(const std::string& value);
  void set_secret_key(std::string&& value);
  void set_secret_key(const char* value);
  void set_secret_key(const char* value, size_t size);
  std::string* mutable_secret_key();
  std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // optional .apollo.tools.BosConfig.Region region = 4 [default = bj];
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::apollo::tools::BosConfig_Region region() const;
  void set_region(::apollo::tools::BosConfig_Region value);
  private:
  ::apollo::tools::BosConfig_Region _internal_region() const;
  void _internal_set_region(::apollo::tools::BosConfig_Region value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.tools.BosConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  int region_;
  friend struct ::TableStruct_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Storage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.tools.Storage) */ {
 public:
  Storage();
  virtual ~Storage();

  Storage(const Storage& from);
  Storage(Storage&& from) noexcept
    : Storage() {
    *this = ::std::move(from);
  }

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Storage& operator=(Storage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Storage& default_instance();

  enum StorageConfigCase {
    kBos = 1,
    STORAGE_CONFIG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Storage* internal_default_instance() {
    return reinterpret_cast<const Storage*>(
               &_Storage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Storage& a, Storage& b) {
    a.Swap(&b);
  }
  inline void Swap(Storage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Storage* New() const final {
    return CreateMaybeMessage<Storage>(nullptr);
  }

  Storage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Storage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Storage& from);
  void MergeFrom(const Storage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Storage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.tools.Storage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto);
    return ::descriptor_table_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBosFieldNumber = 1,
  };
  // optional .apollo.tools.BosConfig bos = 1;
  bool has_bos() const;
  private:
  bool _internal_has_bos() const;
  public:
  void clear_bos();
  const ::apollo::tools::BosConfig& bos() const;
  ::apollo::tools::BosConfig* release_bos();
  ::apollo::tools::BosConfig* mutable_bos();
  void set_allocated_bos(::apollo::tools::BosConfig* bos);
  private:
  const ::apollo::tools::BosConfig& _internal_bos() const;
  ::apollo::tools::BosConfig* _internal_mutable_bos();
  public:

  void clear_storage_config();
  StorageConfigCase storage_config_case() const;
  // @@protoc_insertion_point(class_scope:apollo.tools.Storage)
 private:
  class _Internal;
  void set_has_bos();

  inline bool has_storage_config() const;
  inline void clear_has_storage_config();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union StorageConfigUnion {
    StorageConfigUnion() {}
    ::apollo::tools::BosConfig* bos_;
  } storage_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class JobConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.tools.JobConfig) */ {
 public:
  JobConfig();
  virtual ~JobConfig();

  JobConfig(const JobConfig& from);
  JobConfig(JobConfig&& from) noexcept
    : JobConfig() {
    *this = ::std::move(from);
  }

  inline JobConfig& operator=(const JobConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobConfig& operator=(JobConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobConfig* internal_default_instance() {
    return reinterpret_cast<const JobConfig*>(
               &_JobConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JobConfig& a, JobConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(JobConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobConfig* New() const final {
    return CreateMaybeMessage<JobConfig>(nullptr);
  }

  JobConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobConfig& from);
  void MergeFrom(const JobConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.tools.JobConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto);
    return ::descriptor_table_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JobConfig_JobType JobType;
  static constexpr JobType UNKNOWN =
    JobConfig_JobType_UNKNOWN;
  static constexpr JobType VEHICLE_CALIBRATION =
    JobConfig_JobType_VEHICLE_CALIBRATION;
  static inline bool JobType_IsValid(int value) {
    return JobConfig_JobType_IsValid(value);
  }
  static constexpr JobType JobType_MIN =
    JobConfig_JobType_JobType_MIN;
  static constexpr JobType JobType_MAX =
    JobConfig_JobType_JobType_MAX;
  static constexpr int JobType_ARRAYSIZE =
    JobConfig_JobType_JobType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  JobType_descriptor() {
    return JobConfig_JobType_descriptor();
  }
  template<typename T>
  static inline const std::string& JobType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, JobType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function JobType_Name.");
    return JobConfig_JobType_Name(enum_t_value);
  }
  static inline bool JobType_Parse(const std::string& name,
      JobType* value) {
    return JobConfig_JobType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPartnerIdFieldNumber = 2,
    kInputDataPathFieldNumber = 4,
    kStorageFieldNumber = 3,
    kJobTypeFieldNumber = 1,
  };
  // optional string partner_id = 2;
  bool has_partner_id() const;
  private:
  bool _internal_has_partner_id() const;
  public:
  void clear_partner_id();
  const std::string& partner_id() const;
  void set_partner_id(const std::string& value);
  void set_partner_id(std::string&& value);
  void set_partner_id(const char* value);
  void set_partner_id(const char* value, size_t size);
  std::string* mutable_partner_id();
  std::string* release_partner_id();
  void set_allocated_partner_id(std::string* partner_id);
  private:
  const std::string& _internal_partner_id() const;
  void _internal_set_partner_id(const std::string& value);
  std::string* _internal_mutable_partner_id();
  public:

  // optional string input_data_path = 4;
  bool has_input_data_path() const;
  private:
  bool _internal_has_input_data_path() const;
  public:
  void clear_input_data_path();
  const std::string& input_data_path() const;
  void set_input_data_path(const std::string& value);
  void set_input_data_path(std::string&& value);
  void set_input_data_path(const char* value);
  void set_input_data_path(const char* value, size_t size);
  std::string* mutable_input_data_path();
  std::string* release_input_data_path();
  void set_allocated_input_data_path(std::string* input_data_path);
  private:
  const std::string& _internal_input_data_path() const;
  void _internal_set_input_data_path(const std::string& value);
  std::string* _internal_mutable_input_data_path();
  public:

  // optional .apollo.tools.Storage storage = 3;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::apollo::tools::Storage& storage() const;
  ::apollo::tools::Storage* release_storage();
  ::apollo::tools::Storage* mutable_storage();
  void set_allocated_storage(::apollo::tools::Storage* storage);
  private:
  const ::apollo::tools::Storage& _internal_storage() const;
  ::apollo::tools::Storage* _internal_mutable_storage();
  public:

  // optional .apollo.tools.JobConfig.JobType job_type = 1;
  bool has_job_type() const;
  private:
  bool _internal_has_job_type() const;
  public:
  void clear_job_type();
  ::apollo::tools::JobConfig_JobType job_type() const;
  void set_job_type(::apollo::tools::JobConfig_JobType value);
  private:
  ::apollo::tools::JobConfig_JobType _internal_job_type() const;
  void _internal_set_job_type(::apollo::tools::JobConfig_JobType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.tools.JobConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_data_path_;
  ::apollo::tools::Storage* storage_;
  int job_type_;
  friend struct ::TableStruct_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BosConfig

// optional string bucket = 1;
inline bool BosConfig::_internal_has_bucket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BosConfig::has_bucket() const {
  return _internal_has_bucket();
}
inline void BosConfig::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BosConfig::bucket() const {
  // @@protoc_insertion_point(field_get:apollo.tools.BosConfig.bucket)
  return _internal_bucket();
}
inline void BosConfig::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:apollo.tools.BosConfig.bucket)
}
inline std::string* BosConfig::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:apollo.tools.BosConfig.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& BosConfig::_internal_bucket() const {
  return bucket_.GetNoArena();
}
inline void BosConfig::_internal_set_bucket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bucket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BosConfig::set_bucket(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bucket_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.tools.BosConfig.bucket)
}
inline void BosConfig::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bucket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.tools.BosConfig.bucket)
}
inline void BosConfig::set_bucket(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bucket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.tools.BosConfig.bucket)
}
inline std::string* BosConfig::_internal_mutable_bucket() {
  _has_bits_[0] |= 0x00000001u;
  return bucket_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BosConfig::release_bucket() {
  // @@protoc_insertion_point(field_release:apollo.tools.BosConfig.bucket)
  if (!_internal_has_bucket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bucket_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BosConfig::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bucket_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:apollo.tools.BosConfig.bucket)
}

// optional string access_key = 2;
inline bool BosConfig::_internal_has_access_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BosConfig::has_access_key() const {
  return _internal_has_access_key();
}
inline void BosConfig::clear_access_key() {
  access_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BosConfig::access_key() const {
  // @@protoc_insertion_point(field_get:apollo.tools.BosConfig.access_key)
  return _internal_access_key();
}
inline void BosConfig::set_access_key(const std::string& value) {
  _internal_set_access_key(value);
  // @@protoc_insertion_point(field_set:apollo.tools.BosConfig.access_key)
}
inline std::string* BosConfig::mutable_access_key() {
  // @@protoc_insertion_point(field_mutable:apollo.tools.BosConfig.access_key)
  return _internal_mutable_access_key();
}
inline const std::string& BosConfig::_internal_access_key() const {
  return access_key_.GetNoArena();
}
inline void BosConfig::_internal_set_access_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  access_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BosConfig::set_access_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  access_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.tools.BosConfig.access_key)
}
inline void BosConfig::set_access_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  access_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.tools.BosConfig.access_key)
}
inline void BosConfig::set_access_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  access_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.tools.BosConfig.access_key)
}
inline std::string* BosConfig::_internal_mutable_access_key() {
  _has_bits_[0] |= 0x00000002u;
  return access_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BosConfig::release_access_key() {
  // @@protoc_insertion_point(field_release:apollo.tools.BosConfig.access_key)
  if (!_internal_has_access_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return access_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BosConfig::set_allocated_access_key(std::string* access_key) {
  if (access_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  access_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), access_key);
  // @@protoc_insertion_point(field_set_allocated:apollo.tools.BosConfig.access_key)
}

// optional string secret_key = 3;
inline bool BosConfig::_internal_has_secret_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BosConfig::has_secret_key() const {
  return _internal_has_secret_key();
}
inline void BosConfig::clear_secret_key() {
  secret_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BosConfig::secret_key() const {
  // @@protoc_insertion_point(field_get:apollo.tools.BosConfig.secret_key)
  return _internal_secret_key();
}
inline void BosConfig::set_secret_key(const std::string& value) {
  _internal_set_secret_key(value);
  // @@protoc_insertion_point(field_set:apollo.tools.BosConfig.secret_key)
}
inline std::string* BosConfig::mutable_secret_key() {
  // @@protoc_insertion_point(field_mutable:apollo.tools.BosConfig.secret_key)
  return _internal_mutable_secret_key();
}
inline const std::string& BosConfig::_internal_secret_key() const {
  return secret_key_.GetNoArena();
}
inline void BosConfig::_internal_set_secret_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  secret_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BosConfig::set_secret_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  secret_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.tools.BosConfig.secret_key)
}
inline void BosConfig::set_secret_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  secret_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.tools.BosConfig.secret_key)
}
inline void BosConfig::set_secret_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  secret_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.tools.BosConfig.secret_key)
}
inline std::string* BosConfig::_internal_mutable_secret_key() {
  _has_bits_[0] |= 0x00000004u;
  return secret_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BosConfig::release_secret_key() {
  // @@protoc_insertion_point(field_release:apollo.tools.BosConfig.secret_key)
  if (!_internal_has_secret_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return secret_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BosConfig::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  secret_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key);
  // @@protoc_insertion_point(field_set_allocated:apollo.tools.BosConfig.secret_key)
}

// optional .apollo.tools.BosConfig.Region region = 4 [default = bj];
inline bool BosConfig::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BosConfig::has_region() const {
  return _internal_has_region();
}
inline void BosConfig::clear_region() {
  region_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::tools::BosConfig_Region BosConfig::_internal_region() const {
  return static_cast< ::apollo::tools::BosConfig_Region >(region_);
}
inline ::apollo::tools::BosConfig_Region BosConfig::region() const {
  // @@protoc_insertion_point(field_get:apollo.tools.BosConfig.region)
  return _internal_region();
}
inline void BosConfig::_internal_set_region(::apollo::tools::BosConfig_Region value) {
  assert(::apollo::tools::BosConfig_Region_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  region_ = value;
}
inline void BosConfig::set_region(::apollo::tools::BosConfig_Region value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:apollo.tools.BosConfig.region)
}

// -------------------------------------------------------------------

// Storage

// optional .apollo.tools.BosConfig bos = 1;
inline bool Storage::_internal_has_bos() const {
  return storage_config_case() == kBos;
}
inline bool Storage::has_bos() const {
  return _internal_has_bos();
}
inline void Storage::set_has_bos() {
  _oneof_case_[0] = kBos;
}
inline void Storage::clear_bos() {
  if (_internal_has_bos()) {
    delete storage_config_.bos_;
    clear_has_storage_config();
  }
}
inline ::apollo::tools::BosConfig* Storage::release_bos() {
  // @@protoc_insertion_point(field_release:apollo.tools.Storage.bos)
  if (_internal_has_bos()) {
    clear_has_storage_config();
      ::apollo::tools::BosConfig* temp = storage_config_.bos_;
    storage_config_.bos_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::tools::BosConfig& Storage::_internal_bos() const {
  return _internal_has_bos()
      ? *storage_config_.bos_
      : *reinterpret_cast< ::apollo::tools::BosConfig*>(&::apollo::tools::_BosConfig_default_instance_);
}
inline const ::apollo::tools::BosConfig& Storage::bos() const {
  // @@protoc_insertion_point(field_get:apollo.tools.Storage.bos)
  return _internal_bos();
}
inline ::apollo::tools::BosConfig* Storage::_internal_mutable_bos() {
  if (!_internal_has_bos()) {
    clear_storage_config();
    set_has_bos();
    storage_config_.bos_ = CreateMaybeMessage< ::apollo::tools::BosConfig >(
        GetArenaNoVirtual());
  }
  return storage_config_.bos_;
}
inline ::apollo::tools::BosConfig* Storage::mutable_bos() {
  // @@protoc_insertion_point(field_mutable:apollo.tools.Storage.bos)
  return _internal_mutable_bos();
}

inline bool Storage::has_storage_config() const {
  return storage_config_case() != STORAGE_CONFIG_NOT_SET;
}
inline void Storage::clear_has_storage_config() {
  _oneof_case_[0] = STORAGE_CONFIG_NOT_SET;
}
inline Storage::StorageConfigCase Storage::storage_config_case() const {
  return Storage::StorageConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// JobConfig

// optional .apollo.tools.JobConfig.JobType job_type = 1;
inline bool JobConfig::_internal_has_job_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JobConfig::has_job_type() const {
  return _internal_has_job_type();
}
inline void JobConfig::clear_job_type() {
  job_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::tools::JobConfig_JobType JobConfig::_internal_job_type() const {
  return static_cast< ::apollo::tools::JobConfig_JobType >(job_type_);
}
inline ::apollo::tools::JobConfig_JobType JobConfig::job_type() const {
  // @@protoc_insertion_point(field_get:apollo.tools.JobConfig.job_type)
  return _internal_job_type();
}
inline void JobConfig::_internal_set_job_type(::apollo::tools::JobConfig_JobType value) {
  assert(::apollo::tools::JobConfig_JobType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  job_type_ = value;
}
inline void JobConfig::set_job_type(::apollo::tools::JobConfig_JobType value) {
  _internal_set_job_type(value);
  // @@protoc_insertion_point(field_set:apollo.tools.JobConfig.job_type)
}

// optional string partner_id = 2;
inline bool JobConfig::_internal_has_partner_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JobConfig::has_partner_id() const {
  return _internal_has_partner_id();
}
inline void JobConfig::clear_partner_id() {
  partner_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JobConfig::partner_id() const {
  // @@protoc_insertion_point(field_get:apollo.tools.JobConfig.partner_id)
  return _internal_partner_id();
}
inline void JobConfig::set_partner_id(const std::string& value) {
  _internal_set_partner_id(value);
  // @@protoc_insertion_point(field_set:apollo.tools.JobConfig.partner_id)
}
inline std::string* JobConfig::mutable_partner_id() {
  // @@protoc_insertion_point(field_mutable:apollo.tools.JobConfig.partner_id)
  return _internal_mutable_partner_id();
}
inline const std::string& JobConfig::_internal_partner_id() const {
  return partner_id_.GetNoArena();
}
inline void JobConfig::_internal_set_partner_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  partner_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JobConfig::set_partner_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  partner_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.tools.JobConfig.partner_id)
}
inline void JobConfig::set_partner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  partner_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.tools.JobConfig.partner_id)
}
inline void JobConfig::set_partner_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  partner_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.tools.JobConfig.partner_id)
}
inline std::string* JobConfig::_internal_mutable_partner_id() {
  _has_bits_[0] |= 0x00000001u;
  return partner_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JobConfig::release_partner_id() {
  // @@protoc_insertion_point(field_release:apollo.tools.JobConfig.partner_id)
  if (!_internal_has_partner_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return partner_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfig::set_allocated_partner_id(std::string* partner_id) {
  if (partner_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  partner_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partner_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.tools.JobConfig.partner_id)
}

// optional .apollo.tools.Storage storage = 3;
inline bool JobConfig::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool JobConfig::has_storage() const {
  return _internal_has_storage();
}
inline void JobConfig::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::tools::Storage& JobConfig::_internal_storage() const {
  const ::apollo::tools::Storage* p = storage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::tools::Storage*>(
      &::apollo::tools::_Storage_default_instance_);
}
inline const ::apollo::tools::Storage& JobConfig::storage() const {
  // @@protoc_insertion_point(field_get:apollo.tools.JobConfig.storage)
  return _internal_storage();
}
inline ::apollo::tools::Storage* JobConfig::release_storage() {
  // @@protoc_insertion_point(field_release:apollo.tools.JobConfig.storage)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::tools::Storage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::apollo::tools::Storage* JobConfig::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000004u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::tools::Storage>(GetArenaNoVirtual());
    storage_ = p;
  }
  return storage_;
}
inline ::apollo::tools::Storage* JobConfig::mutable_storage() {
  // @@protoc_insertion_point(field_mutable:apollo.tools.JobConfig.storage)
  return _internal_mutable_storage();
}
inline void JobConfig::set_allocated_storage(::apollo::tools::Storage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:apollo.tools.JobConfig.storage)
}

// optional string input_data_path = 4;
inline bool JobConfig::_internal_has_input_data_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JobConfig::has_input_data_path() const {
  return _internal_has_input_data_path();
}
inline void JobConfig::clear_input_data_path() {
  input_data_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& JobConfig::input_data_path() const {
  // @@protoc_insertion_point(field_get:apollo.tools.JobConfig.input_data_path)
  return _internal_input_data_path();
}
inline void JobConfig::set_input_data_path(const std::string& value) {
  _internal_set_input_data_path(value);
  // @@protoc_insertion_point(field_set:apollo.tools.JobConfig.input_data_path)
}
inline std::string* JobConfig::mutable_input_data_path() {
  // @@protoc_insertion_point(field_mutable:apollo.tools.JobConfig.input_data_path)
  return _internal_mutable_input_data_path();
}
inline const std::string& JobConfig::_internal_input_data_path() const {
  return input_data_path_.GetNoArena();
}
inline void JobConfig::_internal_set_input_data_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  input_data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JobConfig::set_input_data_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  input_data_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.tools.JobConfig.input_data_path)
}
inline void JobConfig::set_input_data_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  input_data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.tools.JobConfig.input_data_path)
}
inline void JobConfig::set_input_data_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  input_data_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.tools.JobConfig.input_data_path)
}
inline std::string* JobConfig::_internal_mutable_input_data_path() {
  _has_bits_[0] |= 0x00000002u;
  return input_data_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JobConfig::release_input_data_path() {
  // @@protoc_insertion_point(field_release:apollo.tools.JobConfig.input_data_path)
  if (!_internal_has_input_data_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return input_data_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfig::set_allocated_input_data_path(std::string* input_data_path) {
  if (input_data_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  input_data_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_data_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.tools.JobConfig.input_data_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tools
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::tools::BosConfig_Region> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::tools::BosConfig_Region>() {
  return ::apollo::tools::BosConfig_Region_descriptor();
}
template <> struct is_proto_enum< ::apollo::tools::JobConfig_JobType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::tools::JobConfig_JobType>() {
  return ::apollo::tools::JobConfig_JobType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2ftools_2ffuel_5fproxy_2fproto_2fjob_5fconfig_2eproto
