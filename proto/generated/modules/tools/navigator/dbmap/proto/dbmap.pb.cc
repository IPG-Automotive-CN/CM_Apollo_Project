// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/tools/navigator/dbmap/proto/dbmap.proto

#include "modules/tools/navigator/dbmap/proto/dbmap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBLine_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBNeighbourPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBNeighbourSegment_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DBPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBPoint_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto;
namespace apollo {
namespace dbmap {
class DBPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBPoint> _instance;
} _DBPoint_default_instance_;
class DBLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBLine> _instance;
} _DBLine_default_instance_;
class DBNeighbourSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBNeighbourSegment> _instance;
} _DBNeighbourSegment_default_instance_;
class DBNeighbourPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBNeighbourPath> _instance;
} _DBNeighbourPath_default_instance_;
class DBPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBPath> _instance;
} _DBPath_default_instance_;
class DBMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DBMap> _instance;
} _DBMap_default_instance_;
}  // namespace dbmap
}  // namespace apollo
static void InitDefaultsscc_info_DBLine_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dbmap::_DBLine_default_instance_;
    new (ptr) ::apollo::dbmap::DBLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dbmap::DBLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBLine_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBLine_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto}, {
      &scc_info_DBPoint_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,}};

static void InitDefaultsscc_info_DBMap_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dbmap::_DBMap_default_instance_;
    new (ptr) ::apollo::dbmap::DBMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dbmap::DBMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBMap_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBMap_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto}, {
      &scc_info_DBPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,}};

static void InitDefaultsscc_info_DBNeighbourPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dbmap::_DBNeighbourPath_default_instance_;
    new (ptr) ::apollo::dbmap::DBNeighbourPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dbmap::DBNeighbourPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DBNeighbourPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DBNeighbourPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto}, {
      &scc_info_DBNeighbourSegment_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,}};

static void InitDefaultsscc_info_DBNeighbourSegment_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dbmap::_DBNeighbourSegment_default_instance_;
    new (ptr) ::apollo::dbmap::DBNeighbourSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dbmap::DBNeighbourSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBNeighbourSegment_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBNeighbourSegment_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto}, {}};

static void InitDefaultsscc_info_DBPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dbmap::_DBPath_default_instance_;
    new (ptr) ::apollo::dbmap::DBPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dbmap::DBPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DBPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DBPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto}, {
      &scc_info_DBLine_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,
      &scc_info_DBNeighbourPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,}};

static void InitDefaultsscc_info_DBPoint_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dbmap::_DBPoint_default_instance_;
    new (ptr) ::apollo::dbmap::DBPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dbmap::DBPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DBPoint_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DBPoint_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, z_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPoint, heading_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBLine, point_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, end_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, path_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, path_start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourSegment, path_end_s_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourPath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBNeighbourPath, segment_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, id_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, left_bounday_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, right_bounday_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, left_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, right_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBPath, duplicate_path_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::dbmap::DBMap, paths_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::dbmap::DBPoint)},
  { 15, 21, sizeof(::apollo::dbmap::DBLine)},
  { 22, 32, sizeof(::apollo::dbmap::DBNeighbourSegment)},
  { 37, 43, sizeof(::apollo::dbmap::DBNeighbourPath)},
  { 44, 56, sizeof(::apollo::dbmap::DBPath)},
  { 63, 69, sizeof(::apollo::dbmap::DBMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBNeighbourSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBNeighbourPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::dbmap::_DBMap_default_instance_),
};

const char descriptor_table_protodef_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/tools/navigator/dbmap/proto/db"
  "map.proto\022\014apollo.dbmap\"F\n\007DBPoint\022\t\n\001x\030"
  "\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001s\030\004 \001(\001\022\017"
  "\n\007heading\030\005 \001(\001\".\n\006DBLine\022$\n\005point\030\001 \003(\013"
  "2\025.apollo.dbmap.DBPoint\"o\n\022DBNeighbourSe"
  "gment\022\017\n\007start_s\030\001 \001(\001\022\r\n\005end_s\030\002 \001(\001\022\017\n"
  "\007path_id\030\003 \001(\t\022\024\n\014path_start_s\030\004 \001(\001\022\022\n\n"
  "path_end_s\030\005 \001(\001\"D\n\017DBNeighbourPath\0221\n\007s"
  "egment\030\001 \003(\0132 .apollo.dbmap.DBNeighbourS"
  "egment\"\255\002\n\006DBPath\022\n\n\002id\030\001 \001(\t\022\"\n\004path\030\002 "
  "\003(\0132\024.apollo.dbmap.DBLine\022*\n\014left_bounda"
  "y\030\003 \003(\0132\024.apollo.dbmap.DBLine\022+\n\rright_b"
  "ounday\030\004 \003(\0132\024.apollo.dbmap.DBLine\0220\n\tle"
  "ft_path\030\005 \003(\0132\035.apollo.dbmap.DBNeighbour"
  "Path\0221\n\nright_path\030\006 \003(\0132\035.apollo.dbmap."
  "DBNeighbourPath\0225\n\016duplicate_path\030\007 \003(\0132"
  "\035.apollo.dbmap.DBNeighbourPath\",\n\005DBMap\022"
  "#\n\005paths\030\001 \003(\0132\024.apollo.dbmap.DBPath"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_sccs[6] = {
  &scc_info_DBLine_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,
  &scc_info_DBMap_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,
  &scc_info_DBNeighbourPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,
  &scc_info_DBNeighbourSegment_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,
  &scc_info_DBPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,
  &scc_info_DBPoint_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once;
static bool descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = {
  &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_initialized, descriptor_table_protodef_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto, "modules/tools/navigator/dbmap/proto/dbmap.proto", 716,
  &descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_once, descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_sccs, descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto::offsets,
  file_level_metadata_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto, 6, file_level_enum_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto, file_level_service_descriptors_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto), true);
namespace apollo {
namespace dbmap {

// ===================================================================

void DBPoint::InitAsDefaultInstance() {
}
class DBPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<DBPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DBPoint::DBPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dbmap.DBPoint)
}
DBPoint::DBPoint(const DBPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&x_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBPoint)
}

void DBPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&x_)) + sizeof(heading_));
}

DBPoint::~DBPoint() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBPoint)
  SharedDtor();
}

void DBPoint::SharedDtor() {
}

void DBPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBPoint& DBPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBPoint_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
  return *internal_default_instance();
}


void DBPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&x_)) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DBPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_s(), target);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBPoint)
  return target;
}

size_t DBPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dbmap.DBPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DBPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dbmap.DBPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dbmap.DBPoint)
    MergeFrom(*source);
  }
}

void DBPoint::MergeFrom(const DBPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DBPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dbmap.DBPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPoint::CopyFrom(const DBPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPoint::IsInitialized() const {
  return true;
}

void DBPoint::InternalSwap(DBPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(s_, other->s_);
  swap(heading_, other->heading_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBLine::InitAsDefaultInstance() {
}
class DBLine::_Internal {
 public:
  using HasBits = decltype(std::declval<DBLine>()._has_bits_);
};

DBLine::DBLine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dbmap.DBLine)
}
DBLine::DBLine(const DBLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBLine)
}

void DBLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBLine_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
}

DBLine::~DBLine() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBLine)
  SharedDtor();
}

void DBLine::SharedDtor() {
}

void DBLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBLine& DBLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBLine_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
  return *internal_default_instance();
}


void DBLine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DBLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPoint point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBLine)
  return target;
}

size_t DBLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPoint point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dbmap.DBLine)
  GOOGLE_DCHECK_NE(&from, this);
  const DBLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dbmap.DBLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dbmap.DBLine)
    MergeFrom(*source);
  }
}

void DBLine::MergeFrom(const DBLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void DBLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dbmap.DBLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBLine::CopyFrom(const DBLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBLine::IsInitialized() const {
  return true;
}

void DBLine::InternalSwap(DBLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_.InternalSwap(&other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBNeighbourSegment::InitAsDefaultInstance() {
}
class DBNeighbourSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<DBNeighbourSegment>()._has_bits_);
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_path_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DBNeighbourSegment::DBNeighbourSegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dbmap.DBNeighbourSegment)
}
DBNeighbourSegment::DBNeighbourSegment(const DBNeighbourSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path_id()) {
    path_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_end_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(path_end_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBNeighbourSegment)
}

void DBNeighbourSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBNeighbourSegment_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
  path_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_end_s_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(path_end_s_));
}

DBNeighbourSegment::~DBNeighbourSegment() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBNeighbourSegment)
  SharedDtor();
}

void DBNeighbourSegment::SharedDtor() {
  path_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBNeighbourSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBNeighbourSegment& DBNeighbourSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBNeighbourSegment_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
  return *internal_default_instance();
}


void DBNeighbourSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBNeighbourSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&path_end_s_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(path_end_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DBNeighbourSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_s(&has_bits);
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_s(&has_bits);
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string path_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dbmap.DBNeighbourSegment.path_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double path_start_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_path_start_s(&has_bits);
          path_start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double path_end_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_path_end_s(&has_bits);
          path_end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBNeighbourSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBNeighbourSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_s(), target);
  }

  // optional double end_s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_s(), target);
  }

  // optional string path_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_id().data(), static_cast<int>(this->_internal_path_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dbmap.DBNeighbourSegment.path_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path_id(), target);
  }

  // optional double path_start_s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_path_start_s(), target);
  }

  // optional double path_end_s = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_path_end_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBNeighbourSegment)
  return target;
}

size_t DBNeighbourSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBNeighbourSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string path_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_id());
    }

    // optional double start_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double path_start_s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double path_end_s = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBNeighbourSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dbmap.DBNeighbourSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const DBNeighbourSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBNeighbourSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dbmap.DBNeighbourSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dbmap.DBNeighbourSegment)
    MergeFrom(*source);
  }
}

void DBNeighbourSegment::MergeFrom(const DBNeighbourSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBNeighbourSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      path_start_s_ = from.path_start_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      path_end_s_ = from.path_end_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DBNeighbourSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dbmap.DBNeighbourSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBNeighbourSegment::CopyFrom(const DBNeighbourSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBNeighbourSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBNeighbourSegment::IsInitialized() const {
  return true;
}

void DBNeighbourSegment::InternalSwap(DBNeighbourSegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_id_.Swap(&other->path_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(path_start_s_, other->path_start_s_);
  swap(path_end_s_, other->path_end_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBNeighbourSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBNeighbourPath::InitAsDefaultInstance() {
}
class DBNeighbourPath::_Internal {
 public:
  using HasBits = decltype(std::declval<DBNeighbourPath>()._has_bits_);
};

DBNeighbourPath::DBNeighbourPath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dbmap.DBNeighbourPath)
}
DBNeighbourPath::DBNeighbourPath(const DBNeighbourPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBNeighbourPath)
}

void DBNeighbourPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBNeighbourPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
}

DBNeighbourPath::~DBNeighbourPath() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBNeighbourPath)
  SharedDtor();
}

void DBNeighbourPath::SharedDtor() {
}

void DBNeighbourPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBNeighbourPath& DBNeighbourPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBNeighbourPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
  return *internal_default_instance();
}


void DBNeighbourPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBNeighbourPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DBNeighbourPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBNeighbourPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBNeighbourPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segment(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBNeighbourPath)
  return target;
}

size_t DBNeighbourPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBNeighbourPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBNeighbourSegment segment = 1;
  total_size += 1UL * this->_internal_segment_size();
  for (const auto& msg : this->segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBNeighbourPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dbmap.DBNeighbourPath)
  GOOGLE_DCHECK_NE(&from, this);
  const DBNeighbourPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBNeighbourPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dbmap.DBNeighbourPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dbmap.DBNeighbourPath)
    MergeFrom(*source);
  }
}

void DBNeighbourPath::MergeFrom(const DBNeighbourPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBNeighbourPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
}

void DBNeighbourPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dbmap.DBNeighbourPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBNeighbourPath::CopyFrom(const DBNeighbourPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBNeighbourPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBNeighbourPath::IsInitialized() const {
  return true;
}

void DBNeighbourPath::InternalSwap(DBNeighbourPath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segment_.InternalSwap(&other->segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBNeighbourPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBPath::InitAsDefaultInstance() {
}
class DBPath::_Internal {
 public:
  using HasBits = decltype(std::declval<DBPath>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DBPath::DBPath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dbmap.DBPath)
}
DBPath::DBPath(const DBPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      path_(from.path_),
      left_bounday_(from.left_bounday_),
      right_bounday_(from.right_bounday_),
      left_path_(from.left_path_),
      right_path_(from.right_path_),
      duplicate_path_(from.duplicate_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBPath)
}

void DBPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DBPath::~DBPath() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBPath)
  SharedDtor();
}

void DBPath::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DBPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBPath& DBPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBPath_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
  return *internal_default_instance();
}


void DBPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  left_bounday_.Clear();
  right_bounday_.Clear();
  left_path_.Clear();
  right_path_.Clear();
  duplicate_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DBPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.dbmap.DBPath.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine left_bounday = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_bounday(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBLine right_bounday = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_bounday(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_duplicate_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.dbmap.DBPath.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .apollo.dbmap.DBLine path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path(i), target, stream);
  }

  // repeated .apollo.dbmap.DBLine left_bounday = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_bounday_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_left_bounday(i), target, stream);
  }

  // repeated .apollo.dbmap.DBLine right_bounday = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_bounday_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_right_bounday(i), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_left_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_left_path(i), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_right_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_right_path(i), target, stream);
  }

  // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_duplicate_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_duplicate_path(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBPath)
  return target;
}

size_t DBPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBLine path = 2;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBLine left_bounday = 3;
  total_size += 1UL * this->_internal_left_bounday_size();
  for (const auto& msg : this->left_bounday_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBLine right_bounday = 4;
  total_size += 1UL * this->_internal_right_bounday_size();
  for (const auto& msg : this->right_bounday_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath left_path = 5;
  total_size += 1UL * this->_internal_left_path_size();
  for (const auto& msg : this->left_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath right_path = 6;
  total_size += 1UL * this->_internal_right_path_size();
  for (const auto& msg : this->right_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.dbmap.DBNeighbourPath duplicate_path = 7;
  total_size += 1UL * this->_internal_duplicate_path_size();
  for (const auto& msg : this->duplicate_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dbmap.DBPath)
  GOOGLE_DCHECK_NE(&from, this);
  const DBPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dbmap.DBPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dbmap.DBPath)
    MergeFrom(*source);
  }
}

void DBPath::MergeFrom(const DBPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  left_bounday_.MergeFrom(from.left_bounday_);
  right_bounday_.MergeFrom(from.right_bounday_);
  left_path_.MergeFrom(from.left_path_);
  right_path_.MergeFrom(from.right_path_);
  duplicate_path_.MergeFrom(from.duplicate_path_);
  if (from._internal_has_id()) {
    _has_bits_[0] |= 0x00000001u;
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void DBPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dbmap.DBPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBPath::CopyFrom(const DBPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPath::IsInitialized() const {
  return true;
}

void DBPath::InternalSwap(DBPath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.InternalSwap(&other->path_);
  left_bounday_.InternalSwap(&other->left_bounday_);
  right_bounday_.InternalSwap(&other->right_bounday_);
  left_path_.InternalSwap(&other->left_path_);
  right_path_.InternalSwap(&other->right_path_);
  duplicate_path_.InternalSwap(&other->duplicate_path_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DBMap::InitAsDefaultInstance() {
}
class DBMap::_Internal {
 public:
  using HasBits = decltype(std::declval<DBMap>()._has_bits_);
};

DBMap::DBMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dbmap.DBMap)
}
DBMap::DBMap(const DBMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dbmap.DBMap)
}

void DBMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DBMap_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
}

DBMap::~DBMap() {
  // @@protoc_insertion_point(destructor:apollo.dbmap.DBMap)
  SharedDtor();
}

void DBMap::SharedDtor() {
}

void DBMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DBMap& DBMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DBMap_modules_2ftools_2fnavigator_2fdbmap_2fproto_2fdbmap_2eproto.base);
  return *internal_default_instance();
}


void DBMap::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dbmap.DBMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DBMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.dbmap.DBPath paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DBMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dbmap.DBMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPath paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dbmap.DBMap)
  return target;
}

size_t DBMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dbmap.DBMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.dbmap.DBPath paths = 1;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DBMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dbmap.DBMap)
  GOOGLE_DCHECK_NE(&from, this);
  const DBMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DBMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dbmap.DBMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dbmap.DBMap)
    MergeFrom(*source);
  }
}

void DBMap::MergeFrom(const DBMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dbmap.DBMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
}

void DBMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dbmap.DBMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBMap::CopyFrom(const DBMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dbmap.DBMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMap::IsInitialized() const {
  return true;
}

void DBMap::InternalSwap(DBMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMap::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dbmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBPoint* Arena::CreateMaybeMessage< ::apollo::dbmap::DBPoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dbmap::DBPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBLine* Arena::CreateMaybeMessage< ::apollo::dbmap::DBLine >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dbmap::DBLine >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBNeighbourSegment* Arena::CreateMaybeMessage< ::apollo::dbmap::DBNeighbourSegment >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dbmap::DBNeighbourSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBNeighbourPath* Arena::CreateMaybeMessage< ::apollo::dbmap::DBNeighbourPath >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dbmap::DBNeighbourPath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBPath* Arena::CreateMaybeMessage< ::apollo::dbmap::DBPath >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dbmap::DBPath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::dbmap::DBMap* Arena::CreateMaybeMessage< ::apollo::dbmap::DBMap >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dbmap::DBMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
