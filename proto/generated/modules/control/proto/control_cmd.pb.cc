// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/control_cmd.proto

#include "modules/control/proto/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngageAdvice_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Debug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyStats_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PadMessage_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleLateralDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleLongitudinalDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleMPCDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto;
namespace apollo {
namespace control {
class LatencyStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatencyStats> _instance;
} _LatencyStats_default_instance_;
class ControlCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlCommand> _instance;
} _ControlCommand_default_instance_;
class SimpleLongitudinalDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleLongitudinalDebug> _instance;
} _SimpleLongitudinalDebug_default_instance_;
class SimpleLateralDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleLateralDebug> _instance;
} _SimpleLateralDebug_default_instance_;
class SimpleMPCDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleMPCDebug> _instance;
} _SimpleMPCDebug_default_instance_;
class InputDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputDebug> _instance;
} _InputDebug_default_instance_;
class DebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Debug> _instance;
} _Debug_default_instance_;
}  // namespace control
}  // namespace apollo
static void InitDefaultsscc_info_ControlCommand_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_ControlCommand_default_instance_;
    new (ptr) ::apollo::control::ControlCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::ControlCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ControlCommand_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ControlCommand_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_Debug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
      &scc_info_VehicleSignal_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto.base,
      &scc_info_LatencyStats_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
      &scc_info_PadMessage_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto.base,
      &scc_info_EngageAdvice_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_Debug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_Debug_default_instance_;
    new (ptr) ::apollo::control::Debug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::Debug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Debug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Debug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto}, {
      &scc_info_SimpleLongitudinalDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
      &scc_info_SimpleLateralDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
      &scc_info_InputDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
      &scc_info_SimpleMPCDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,}};

static void InitDefaultsscc_info_InputDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_InputDebug_default_instance_;
    new (ptr) ::apollo::control::InputDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::InputDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_LatencyStats_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_LatencyStats_default_instance_;
    new (ptr) ::apollo::control::LatencyStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::LatencyStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyStats_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LatencyStats_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_SimpleLateralDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_SimpleLateralDebug_default_instance_;
    new (ptr) ::apollo::control::SimpleLateralDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::SimpleLateralDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleLateralDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleLateralDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto}, {
      &scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static void InitDefaultsscc_info_SimpleLongitudinalDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_SimpleLongitudinalDebug_default_instance_;
    new (ptr) ::apollo::control::SimpleLongitudinalDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::SimpleLongitudinalDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleLongitudinalDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleLongitudinalDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_SimpleMPCDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_SimpleMPCDebug_default_instance_;
    new (ptr) ::apollo::control::SimpleMPCDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::SimpleMPCDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimpleMPCDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SimpleMPCDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, total_time_ms_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, controller_time_ms_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatencyStats, total_time_exceeded_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, throttle_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, steering_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, steering_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, reset_model_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, engine_on_off_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, trajectory_fraction_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, gear_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, latency_stats_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, pad_msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, is_in_safe_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, left_turn_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, right_turn_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, high_beam_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, low_beam_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, horn_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::ControlCommand, turnsignal_),
  0,
  6,
  7,
  8,
  9,
  17,
  10,
  11,
  18,
  19,
  22,
  21,
  23,
  1,
  2,
  3,
  4,
  5,
  20,
  12,
  13,
  14,
  15,
  16,
  24,
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, station_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, station_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, station_error_limited_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, preview_station_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_controller_input_limited_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, preview_speed_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, preview_speed_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, preview_acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, calibration_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, throttle_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, slope_offset_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, current_station_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, path_remain_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, pid_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, leadlag_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, speed_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, current_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, current_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, acceleration_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, jerk_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, current_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLongitudinalDebug, jerk_error_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  19,
  17,
  18,
  21,
  20,
  30,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, ref_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steering_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, ref_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, lateral_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, ref_heading_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, ref_heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_error_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, ref_heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_error_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, lateral_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, heading_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, current_target_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleLateralDebug, steer_angle_feedback_augment_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  0,
  30,
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, ref_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, heading_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steering_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, ref_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, station_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, station_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, speed_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, speed_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, station_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, speed_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, calibration_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_unconstraint_control_diff_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, steer_angle_feedforward_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, matrix_q_updated_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, matrix_r_updated_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, lateral_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, ref_heading_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, heading_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, ref_heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, heading_error_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, ref_heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, heading_error_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, acceleration_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, acceleration_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, jerk_reference_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, jerk_feedback_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::SimpleMPCDebug, jerk_error_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  46,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  ~0u,
  ~0u,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, localization_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, canbus_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, trajectory_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::InputDebug, latest_replan_trajectory_header_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, simple_lon_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, simple_lat_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, input_debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::Debug, simple_mpc_debug_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::control::LatencyStats)},
  { 11, 41, sizeof(::apollo::control::ControlCommand)},
  { 66, 102, sizeof(::apollo::control::SimpleLongitudinalDebug)},
  { 133, 169, sizeof(::apollo::control::SimpleLateralDebug)},
  { 200, 254, sizeof(::apollo::control::SimpleMPCDebug)},
  { 303, 312, sizeof(::apollo::control::InputDebug)},
  { 316, 325, sizeof(::apollo::control::Debug)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_LatencyStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_ControlCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_SimpleLongitudinalDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_SimpleLateralDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_SimpleMPCDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_InputDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_Debug_default_instance_),
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'modules/control/proto/control_cmd.prot"
  "o\022\016apollo.control\032\"modules/canbus/proto/"
  "chassis.proto\032!modules/common/proto/head"
  "er.proto\032)modules/common/proto/vehicle_s"
  "ignal.proto\032#modules/control/proto/pad_m"
  "sg.proto\032&modules/common/proto/drive_sta"
  "te.proto\032$modules/common/proto/pnc_point"
  ".proto\"^\n\014LatencyStats\022\025\n\rtotal_time_ms\030"
  "\001 \001(\001\022\032\n\022controller_time_ms\030\002 \003(\001\022\033\n\023tot"
  "al_time_exceeded\030\003 \001(\010\"\267\006\n\016ControlComman"
  "d\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header"
  "\022\020\n\010throttle\030\003 \001(\001\022\r\n\005brake\030\004 \001(\001\022\025\n\rste"
  "ering_rate\030\006 \001(\001\022\027\n\017steering_target\030\007 \001("
  "\001\022\025\n\rparking_brake\030\010 \001(\010\022\r\n\005speed\030\t \001(\001\022"
  "\024\n\014acceleration\030\n \001(\001\022\027\n\013reset_model\030\020 \001"
  "(\010B\002\030\001\022\025\n\rengine_on_off\030\021 \001(\010\022\033\n\023traject"
  "ory_fraction\030\022 \001(\001\022<\n\014driving_mode\030\023 \001(\016"
  "2\".apollo.canbus.Chassis.DrivingModeB\002\030\001"
  "\022:\n\rgear_location\030\024 \001(\0162#.apollo.canbus."
  "Chassis.GearPosition\022$\n\005debug\030\026 \001(\0132\025.ap"
  "ollo.control.Debug\022,\n\006signal\030\027 \001(\0132\034.apo"
  "llo.common.VehicleSignal\0223\n\rlatency_stat"
  "s\030\030 \001(\0132\034.apollo.control.LatencyStats\022+\n"
  "\007pad_msg\030\031 \001(\0132\032.apollo.control.PadMessa"
  "ge\0222\n\rengage_advice\030\032 \001(\0132\033.apollo.commo"
  "n.EngageAdvice\022\036\n\017is_in_safe_mode\030\033 \001(\010:"
  "\005false\022\025\n\tleft_turn\030\r \001(\010B\002\030\001\022\026\n\nright_t"
  "urn\030\016 \001(\010B\002\030\001\022\025\n\thigh_beam\030\013 \001(\010B\002\030\001\022\024\n\010"
  "low_beam\030\014 \001(\010B\002\030\001\022\020\n\004horn\030\017 \001(\010B\002\030\001\0222\n\n"
  "turnsignal\030\025 \001(\0162\032.apollo.control.TurnSi"
  "gnalB\002\030\001\"\354\006\n\027SimpleLongitudinalDebug\022\031\n\021"
  "station_reference\030\001 \001(\001\022\025\n\rstation_error"
  "\030\002 \001(\001\022\035\n\025station_error_limited\030\003 \001(\001\022\035\n"
  "\025preview_station_error\030\004 \001(\001\022\027\n\017speed_re"
  "ference\030\005 \001(\001\022\023\n\013speed_error\030\006 \001(\001\022&\n\036sp"
  "eed_controller_input_limited\030\007 \001(\001\022\037\n\027pr"
  "eview_speed_reference\030\010 \001(\001\022\033\n\023preview_s"
  "peed_error\030\t \001(\001\022&\n\036preview_acceleration"
  "_reference\030\n \001(\001\022\"\n\032acceleration_cmd_clo"
  "seloop\030\013 \001(\001\022\030\n\020acceleration_cmd\030\014 \001(\001\022\033"
  "\n\023acceleration_lookup\030\r \001(\001\022\024\n\014speed_loo"
  "kup\030\016 \001(\001\022\031\n\021calibration_value\030\017 \001(\001\022\024\n\014"
  "throttle_cmd\030\020 \001(\001\022\021\n\tbrake_cmd\030\021 \001(\001\022\024\n"
  "\014is_full_stop\030\022 \001(\010\022!\n\031slope_offset_comp"
  "ensation\030\023 \001(\001\022\027\n\017current_station\030\024 \001(\001\022"
  "\023\n\013path_remain\030\025 \001(\001\022\035\n\025pid_saturation_s"
  "tatus\030\026 \001(\005\022!\n\031leadlag_saturation_status"
  "\030\027 \001(\005\022\024\n\014speed_offset\030\030 \001(\001\022\025\n\rcurrent_"
  "speed\030\031 \001(\001\022\036\n\026acceleration_reference\030\032 "
  "\001(\001\022\034\n\024current_acceleration\030\033 \001(\001\022\032\n\022acc"
  "eleration_error\030\034 \001(\001\022\026\n\016jerk_reference\030"
  "\035 \001(\001\022\024\n\014current_jerk\030\036 \001(\001\022\022\n\njerk_erro"
  "r\030\037 \001(\001\"\274\007\n\022SimpleLateralDebug\022\025\n\rlatera"
  "l_error\030\001 \001(\001\022\023\n\013ref_heading\030\002 \001(\001\022\017\n\007he"
  "ading\030\003 \001(\001\022\025\n\rheading_error\030\004 \001(\001\022\032\n\022he"
  "ading_error_rate\030\005 \001(\001\022\032\n\022lateral_error_"
  "rate\030\006 \001(\001\022\021\n\tcurvature\030\007 \001(\001\022\023\n\013steer_a"
  "ngle\030\010 \001(\001\022\037\n\027steer_angle_feedforward\030\t "
  "\001(\001\022(\n steer_angle_lateral_contribution\030"
  "\n \001(\001\022-\n%steer_angle_lateral_rate_contri"
  "bution\030\013 \001(\001\022(\n steer_angle_heading_cont"
  "ribution\030\014 \001(\001\022-\n%steer_angle_heading_ra"
  "te_contribution\030\r \001(\001\022\034\n\024steer_angle_fee"
  "dback\030\016 \001(\001\022\031\n\021steering_position\030\017 \001(\001\022\021"
  "\n\tref_speed\030\020 \001(\001\022\033\n\023steer_angle_limited"
  "\030\021 \001(\001\022\034\n\024lateral_acceleration\030\022 \001(\001\022\024\n\014"
  "lateral_jerk\030\023 \001(\001\022\030\n\020ref_heading_rate\030\024"
  " \001(\001\022\024\n\014heading_rate\030\025 \001(\001\022 \n\030ref_headin"
  "g_acceleration\030\026 \001(\001\022\034\n\024heading_accelera"
  "tion\030\027 \001(\001\022\"\n\032heading_error_acceleration"
  "\030\030 \001(\001\022\030\n\020ref_heading_jerk\030\031 \001(\001\022\024\n\014head"
  "ing_jerk\030\032 \001(\001\022\032\n\022heading_error_jerk\030\033 \001"
  "(\001\022\036\n\026lateral_error_feedback\030\034 \001(\001\022\036\n\026he"
  "ading_error_feedback\030\035 \001(\001\022<\n\024current_ta"
  "rget_point\030\036 \001(\0132\036.apollo.common.Traject"
  "oryPoint\022$\n\034steer_angle_feedback_augment"
  "\030\037 \001(\001\"\361\n\n\016SimpleMPCDebug\022\025\n\rlateral_err"
  "or\030\001 \001(\001\022\023\n\013ref_heading\030\002 \001(\001\022\017\n\007heading"
  "\030\003 \001(\001\022\025\n\rheading_error\030\004 \001(\001\022\032\n\022heading"
  "_error_rate\030\005 \001(\001\022\032\n\022lateral_error_rate\030"
  "\006 \001(\001\022\021\n\tcurvature\030\007 \001(\001\022\023\n\013steer_angle\030"
  "\010 \001(\001\022\037\n\027steer_angle_feedforward\030\t \001(\001\022("
  "\n steer_angle_lateral_contribution\030\n \001(\001"
  "\022-\n%steer_angle_lateral_rate_contributio"
  "n\030\013 \001(\001\022(\n steer_angle_heading_contribut"
  "ion\030\014 \001(\001\022-\n%steer_angle_heading_rate_co"
  "ntribution\030\r \001(\001\022\034\n\024steer_angle_feedback"
  "\030\016 \001(\001\022\031\n\021steering_position\030\017 \001(\001\022\021\n\tref"
  "_speed\030\020 \001(\001\022\033\n\023steer_angle_limited\030\021 \001("
  "\001\022\031\n\021station_reference\030\022 \001(\001\022\025\n\rstation_"
  "error\030\023 \001(\001\022\027\n\017speed_reference\030\024 \001(\001\022\023\n\013"
  "speed_error\030\025 \001(\001\022\036\n\026acceleration_refere"
  "nce\030\026 \001(\001\022\024\n\014is_full_stop\030\027 \001(\010\022\030\n\020stati"
  "on_feedback\030\030 \001(\001\022\026\n\016speed_feedback\030\031 \001("
  "\001\022\"\n\032acceleration_cmd_closeloop\030\032 \001(\001\022\030\n"
  "\020acceleration_cmd\030\033 \001(\001\022\033\n\023acceleration_"
  "lookup\030\034 \001(\001\022\024\n\014speed_lookup\030\035 \001(\001\022\031\n\021ca"
  "libration_value\030\036 \001(\001\022\'\n\037steer_unconstra"
  "int_control_diff\030\037 \001(\001\022,\n$steer_angle_fe"
  "edforward_compensation\030  \001(\001\022\030\n\020matrix_q"
  "_updated\030! \003(\001\022\030\n\020matrix_r_updated\030\" \003(\001"
  "\022\034\n\024lateral_acceleration\030# \001(\001\022\024\n\014latera"
  "l_jerk\030$ \001(\001\022\030\n\020ref_heading_rate\030% \001(\001\022\024"
  "\n\014heading_rate\030& \001(\001\022 \n\030ref_heading_acce"
  "leration\030\' \001(\001\022\034\n\024heading_acceleration\030("
  " \001(\001\022\"\n\032heading_error_acceleration\030) \001(\001"
  "\022\030\n\020ref_heading_jerk\030* \001(\001\022\024\n\014heading_je"
  "rk\030+ \001(\001\022\032\n\022heading_error_jerk\030, \001(\001\022\035\n\025"
  "acceleration_feedback\030- \001(\001\022\032\n\022accelerat"
  "ion_error\030. \001(\001\022\026\n\016jerk_reference\030/ \001(\001\022"
  "\025\n\rjerk_feedback\0300 \001(\001\022\022\n\njerk_error\0301 \001"
  "(\001\"\340\001\n\nInputDebug\0222\n\023localization_header"
  "\030\001 \001(\0132\025.apollo.common.Header\022,\n\rcanbus_"
  "header\030\002 \001(\0132\025.apollo.common.Header\0220\n\021t"
  "rajectory_header\030\003 \001(\0132\025.apollo.common.H"
  "eader\022>\n\037latest_replan_trajectory_header"
  "\030\004 \001(\0132\025.apollo.common.Header\"\363\001\n\005Debug\022"
  "A\n\020simple_lon_debug\030\001 \001(\0132\'.apollo.contr"
  "ol.SimpleLongitudinalDebug\022<\n\020simple_lat"
  "_debug\030\002 \001(\0132\".apollo.control.SimpleLate"
  "ralDebug\022/\n\013input_debug\030\003 \001(\0132\032.apollo.c"
  "ontrol.InputDebug\0228\n\020simple_mpc_debug\030\004 "
  "\001(\0132\036.apollo.control.SimpleMPCDebug*:\n\nT"
  "urnSignal\022\r\n\tTURN_NONE\020\000\022\r\n\tTURN_LEFT\020\001\022"
  "\016\n\nTURN_RIGHT\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_deps[6] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fpad_5fmsg_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_sccs[7] = {
  &scc_info_ControlCommand_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
  &scc_info_Debug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
  &scc_info_InputDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
  &scc_info_LatencyStats_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
  &scc_info_SimpleLateralDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
  &scc_info_SimpleLongitudinalDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
  &scc_info_SimpleMPCDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once;
static bool descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto = {
  &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_initialized, descriptor_table_protodef_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto, "modules/control/proto/control_cmd.proto", 4975,
  &descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_once, descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_sccs, descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto_deps, 7, 6,
  schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto::offsets,
  file_level_metadata_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto, 7, file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto, file_level_service_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto), true);
namespace apollo {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TurnSignal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto);
  return file_level_enum_descriptors_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto[0];
}
bool TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LatencyStats::InitAsDefaultInstance() {
}
class LatencyStats::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyStats>()._has_bits_);
  static void set_has_total_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_time_exceeded(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LatencyStats::LatencyStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      controller_time_ms_(from.controller_time_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_exceeded_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.LatencyStats)
}

void LatencyStats::SharedCtor() {
  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_exceeded_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.control.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
}

void LatencyStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyStats& LatencyStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatencyStats_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LatencyStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_time_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_exceeded_) -
        reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LatencyStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double total_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_total_time_ms(&has_bits);
          total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double controller_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_controller_time_ms(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_controller_time_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool total_time_exceeded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_time_exceeded(&has_bits);
          total_time_exceeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatencyStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LatencyStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time_ms(), target);
  }

  // repeated double controller_time_ms = 2;
  for (int i = 0, n = this->_internal_controller_time_ms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_controller_time_ms(i), target);
  }

  // optional bool total_time_exceeded = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_total_time_exceeded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LatencyStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double controller_time_ms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_controller_time_ms_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_controller_time_ms_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double total_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool total_time_exceeded = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatencyStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LatencyStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controller_time_ms_.MergeFrom(from.controller_time_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_time_ms_ = from.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_time_exceeded_ = from.total_time_exceeded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  controller_time_ms_.InternalSwap(&other->controller_time_ms_);
  swap(total_time_ms_, other->total_time_ms_);
  swap(total_time_exceeded_, other->total_time_exceeded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlCommand::InitAsDefaultInstance() {
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->debug_ = const_cast< ::apollo::control::Debug*>(
      ::apollo::control::Debug::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->signal_ = const_cast< ::apollo::common::VehicleSignal*>(
      ::apollo::common::VehicleSignal::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->latency_stats_ = const_cast< ::apollo::control::LatencyStats*>(
      ::apollo::control::LatencyStats::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->pad_msg_ = const_cast< ::apollo::control::PadMessage*>(
      ::apollo::control::PadMessage::internal_default_instance());
  ::apollo::control::_ControlCommand_default_instance_._instance.get_mutable()->engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(
      ::apollo::common::EngageAdvice::internal_default_instance());
}
class ControlCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCommand>()._has_bits_);
  static const ::apollo::common::Header& header(const ControlCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steering_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steering_target(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_parking_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_reset_model(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_engine_on_off(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_trajectory_fraction(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::apollo::control::Debug& debug(const ControlCommand* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::VehicleSignal& signal(const ControlCommand* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::control::LatencyStats& latency_stats(const ControlCommand* msg);
  static void set_has_latency_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::control::PadMessage& pad_msg(const ControlCommand* msg);
  static void set_has_pad_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::EngageAdvice& engage_advice(const ControlCommand* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_in_safe_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_left_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_right_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_high_beam(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_low_beam(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_turnsignal(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

const ::apollo::common::Header&
ControlCommand::_Internal::header(const ControlCommand* msg) {
  return *msg->header_;
}
const ::apollo::control::Debug&
ControlCommand::_Internal::debug(const ControlCommand* msg) {
  return *msg->debug_;
}
const ::apollo::common::VehicleSignal&
ControlCommand::_Internal::signal(const ControlCommand* msg) {
  return *msg->signal_;
}
const ::apollo::control::LatencyStats&
ControlCommand::_Internal::latency_stats(const ControlCommand* msg) {
  return *msg->latency_stats_;
}
const ::apollo::control::PadMessage&
ControlCommand::_Internal::pad_msg(const ControlCommand* msg) {
  return *msg->pad_msg_;
}
const ::apollo::common::EngageAdvice&
ControlCommand::_Internal::engage_advice(const ControlCommand* msg) {
  return *msg->engage_advice_;
}
void ControlCommand::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ControlCommand::clear_signal() {
  if (signal_ != nullptr) signal_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ControlCommand::clear_pad_msg() {
  if (pad_msg_ != nullptr) pad_msg_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ControlCommand::clear_engage_advice() {
  if (engage_advice_ != nullptr) engage_advice_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ControlCommand::ControlCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_debug()) {
    debug_ = new ::apollo::control::Debug(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  if (from._internal_has_signal()) {
    signal_ = new ::apollo::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = nullptr;
  }
  if (from._internal_has_latency_stats()) {
    latency_stats_ = new ::apollo::control::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = nullptr;
  }
  if (from._internal_has_pad_msg()) {
    pad_msg_ = new ::apollo::control::PadMessage(*from.pad_msg_);
  } else {
    pad_msg_ = nullptr;
  }
  if (from._internal_has_engage_advice()) {
    engage_advice_ = new ::apollo::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = nullptr;
  }
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnsignal_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(turnsignal_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.ControlCommand)
}

void ControlCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlCommand_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnsignal_) -
      reinterpret_cast<char*>(&header_)) + sizeof(turnsignal_));
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:apollo.control.ControlCommand)
  SharedDtor();
}

void ControlCommand::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete latency_stats_;
  if (this != internal_default_instance()) delete pad_msg_;
  if (this != internal_default_instance()) delete engage_advice_;
}

void ControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlCommand& ControlCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlCommand_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.ControlCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(debug_ != nullptr);
      debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(signal_ != nullptr);
      signal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(latency_stats_ != nullptr);
      latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pad_msg_ != nullptr);
      pad_msg_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(engage_advice_ != nullptr);
      engage_advice_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_) -
        reinterpret_cast<char*>(&throttle_)) + sizeof(brake_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&steering_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_beam_) -
        reinterpret_cast<char*>(&steering_rate_)) + sizeof(low_beam_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&horn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_location_) -
        reinterpret_cast<char*>(&horn_)) + sizeof(gear_location_));
  }
  turnsignal_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ControlCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double throttle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_throttle(&has_bits);
          throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_brake(&has_bits);
          brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_steering_rate(&has_bits);
          steering_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_steering_target(&has_bits);
          steering_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool parking_brake = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_parking_brake(&has_bits);
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool high_beam = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_high_beam(&has_bits);
          high_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_beam = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_low_beam(&has_bits);
          low_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_turn = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_left_turn(&has_bits);
          left_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_turn = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_right_turn(&has_bits);
          right_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool horn = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_horn(&has_bits);
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reset_model = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_reset_model(&has_bits);
          reset_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool engine_on_off = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_engine_on_off(&has_bits);
          engine_on_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double trajectory_fraction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_trajectory_fraction(&has_bits);
          trajectory_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            _internal_set_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::control::TurnSignal_IsValid(val))) {
            _internal_set_turnsignal(static_cast<::apollo::control::TurnSignal>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.Debug debug = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleSignal signal = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.LatencyStats latency_stats = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.PadMessage pad_msg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_pad_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.EngageAdvice engage_advice = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_safe_mode = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_is_in_safe_mode(&has_bits);
          is_in_safe_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.ControlCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional double throttle = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_throttle(), target);
  }

  // optional double brake = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_brake(), target);
  }

  // optional double steering_rate = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_steering_rate(), target);
  }

  // optional double steering_target = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_steering_target(), target);
  }

  // optional bool parking_brake = 8;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_parking_brake(), target);
  }

  // optional double speed = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_speed(), target);
  }

  // optional double acceleration = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_acceleration(), target);
  }

  // optional bool high_beam = 11 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_high_beam(), target);
  }

  // optional bool low_beam = 12 [deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_low_beam(), target);
  }

  // optional bool left_turn = 13 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_left_turn(), target);
  }

  // optional bool right_turn = 14 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_right_turn(), target);
  }

  // optional bool horn = 15 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_horn(), target);
  }

  // optional bool reset_model = 16 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_reset_model(), target);
  }

  // optional bool engine_on_off = 17;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_engine_on_off(), target);
  }

  // optional double trajectory_fraction = 18;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_trajectory_fraction(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_gear_location(), target);
  }

  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_turnsignal(), target);
  }

  // optional .apollo.control.Debug debug = 22;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::debug(this), target, stream);
  }

  // optional .apollo.common.VehicleSignal signal = 23;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::signal(this), target, stream);
  }

  // optional .apollo.control.LatencyStats latency_stats = 24;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::latency_stats(this), target, stream);
  }

  // optional .apollo.control.PadMessage pad_msg = 25;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::pad_msg(this), target, stream);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 26;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::engage_advice(this), target, stream);
  }

  // optional bool is_in_safe_mode = 27 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_is_in_safe_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.ControlCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.control.Debug debug = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_);
    }

    // optional .apollo.common.VehicleSignal signal = 23;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_);
    }

    // optional .apollo.control.LatencyStats latency_stats = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latency_stats_);
    }

    // optional .apollo.control.PadMessage pad_msg = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pad_msg_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

    // optional double throttle = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double brake = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double steering_rate = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double steering_target = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double speed = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional bool left_turn = 13 [deprecated = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool right_turn = 14 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool high_beam = 11 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool low_beam = 12 [deprecated = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool horn = 15 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 8;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool reset_model = 16 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool engine_on_off = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool is_in_safe_mode = 27 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 19 [deprecated = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
    }

    // optional double trajectory_fraction = 18;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

  }
  // optional .apollo.control.TurnSignal turnsignal = 21 [deprecated = true];
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turnsignal());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.ControlCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.ControlCommand)
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_debug()->::apollo::control::Debug::MergeFrom(from._internal_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_latency_stats()->::apollo::control::LatencyStats::MergeFrom(from._internal_latency_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pad_msg()->::apollo::control::PadMessage::MergeFrom(from._internal_pad_msg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000040u) {
      throttle_ = from.throttle_;
    }
    if (cached_has_bits & 0x00000080u) {
      brake_ = from.brake_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      steering_rate_ = from.steering_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      steering_target_ = from.steering_target_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      left_turn_ = from.left_turn_;
    }
    if (cached_has_bits & 0x00002000u) {
      right_turn_ = from.right_turn_;
    }
    if (cached_has_bits & 0x00004000u) {
      high_beam_ = from.high_beam_;
    }
    if (cached_has_bits & 0x00008000u) {
      low_beam_ = from.low_beam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00020000u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00040000u) {
      reset_model_ = from.reset_model_;
    }
    if (cached_has_bits & 0x00080000u) {
      engine_on_off_ = from.engine_on_off_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_in_safe_mode_ = from.is_in_safe_mode_;
    }
    if (cached_has_bits & 0x00200000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      trajectory_fraction_ = from.trajectory_fraction_;
    }
    if (cached_has_bits & 0x00800000u) {
      gear_location_ = from.gear_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_turnsignal(from._internal_turnsignal());
  }
}

void ControlCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(debug_, other->debug_);
  swap(signal_, other->signal_);
  swap(latency_stats_, other->latency_stats_);
  swap(pad_msg_, other->pad_msg_);
  swap(engage_advice_, other->engage_advice_);
  swap(throttle_, other->throttle_);
  swap(brake_, other->brake_);
  swap(steering_rate_, other->steering_rate_);
  swap(steering_target_, other->steering_target_);
  swap(speed_, other->speed_);
  swap(acceleration_, other->acceleration_);
  swap(left_turn_, other->left_turn_);
  swap(right_turn_, other->right_turn_);
  swap(high_beam_, other->high_beam_);
  swap(low_beam_, other->low_beam_);
  swap(horn_, other->horn_);
  swap(parking_brake_, other->parking_brake_);
  swap(reset_model_, other->reset_model_);
  swap(engine_on_off_, other->engine_on_off_);
  swap(is_in_safe_mode_, other->is_in_safe_mode_);
  swap(driving_mode_, other->driving_mode_);
  swap(trajectory_fraction_, other->trajectory_fraction_);
  swap(gear_location_, other->gear_location_);
  swap(turnsignal_, other->turnsignal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleLongitudinalDebug::InitAsDefaultInstance() {
}
class SimpleLongitudinalDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleLongitudinalDebug>()._has_bits_);
  static void set_has_station_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_station_error_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preview_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speed_controller_input_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preview_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_preview_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_preview_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_acceleration_cmd_closeloop(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_acceleration_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_acceleration_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_speed_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_calibration_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_throttle_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_brake_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_full_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_slope_offset_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_current_station(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_path_remain(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_pid_saturation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_leadlag_saturation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_speed_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_current_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_current_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_acceleration_error(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_jerk_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_current_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_jerk_error(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

SimpleLongitudinalDebug::SimpleLongitudinalDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleLongitudinalDebug)
}
SimpleLongitudinalDebug::SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&station_reference_, &from.station_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadlag_saturation_status_) -
    reinterpret_cast<char*>(&station_reference_)) + sizeof(leadlag_saturation_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLongitudinalDebug)
}

void SimpleLongitudinalDebug::SharedCtor() {
  ::memset(&station_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadlag_saturation_status_) -
      reinterpret_cast<char*>(&station_reference_)) + sizeof(leadlag_saturation_status_));
}

SimpleLongitudinalDebug::~SimpleLongitudinalDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLongitudinalDebug)
  SharedDtor();
}

void SimpleLongitudinalDebug::SharedDtor() {
}

void SimpleLongitudinalDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleLongitudinalDebug& SimpleLongitudinalDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleLongitudinalDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void SimpleLongitudinalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLongitudinalDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&station_reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preview_speed_reference_) -
        reinterpret_cast<char*>(&station_reference_)) + sizeof(preview_speed_reference_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&preview_speed_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&throttle_cmd_) -
        reinterpret_cast<char*>(&preview_speed_error_)) + sizeof(throttle_cmd_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&brake_cmd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_speed_) -
        reinterpret_cast<char*>(&brake_cmd_)) + sizeof(current_speed_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&acceleration_reference_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leadlag_saturation_status_) -
        reinterpret_cast<char*>(&acceleration_reference_)) + sizeof(leadlag_saturation_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SimpleLongitudinalDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double station_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_station_reference(&has_bits);
          station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_station_error(&has_bits);
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error_limited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_station_error_limited(&has_bits);
          station_error_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_station_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_preview_station_error(&has_bits);
          preview_station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_speed_reference(&has_bits);
          speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_speed_error(&has_bits);
          speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_controller_input_limited = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_speed_controller_input_limited(&has_bits);
          speed_controller_input_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_preview_speed_reference(&has_bits);
          preview_speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_speed_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_preview_speed_error(&has_bits);
          preview_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_acceleration_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_preview_acceleration_reference(&has_bits);
          preview_acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd_closeloop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_acceleration_cmd_closeloop(&has_bits);
          acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_acceleration_cmd(&has_bits);
          acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_acceleration_lookup(&has_bits);
          acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_lookup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_speed_lookup(&has_bits);
          speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double calibration_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_calibration_value(&has_bits);
          calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_cmd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_throttle_cmd(&has_bits);
          throttle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_cmd = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_brake_cmd(&has_bits);
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_stop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_full_stop(&has_bits);
          is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double slope_offset_compensation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_slope_offset_compensation(&has_bits);
          slope_offset_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_station = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_current_station(&has_bits);
          current_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double path_remain = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_path_remain(&has_bits);
          path_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 pid_saturation_status = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_pid_saturation_status(&has_bits);
          pid_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 leadlag_saturation_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_leadlag_saturation_status(&has_bits);
          leadlag_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double speed_offset = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_speed_offset(&has_bits);
          speed_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_speed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_current_speed(&has_bits);
          current_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_reference = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_acceleration_reference(&has_bits);
          acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_acceleration = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_current_acceleration(&has_bits);
          current_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_error = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_acceleration_error(&has_bits);
          acceleration_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_reference = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_jerk_reference(&has_bits);
          jerk_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_jerk = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_current_jerk(&has_bits);
          current_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_error = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_jerk_error(&has_bits);
          jerk_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleLongitudinalDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLongitudinalDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double station_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_station_reference(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_station_error(), target);
  }

  // optional double station_error_limited = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_station_error_limited(), target);
  }

  // optional double preview_station_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_preview_station_error(), target);
  }

  // optional double speed_reference = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_error(), target);
  }

  // optional double speed_controller_input_limited = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_speed_controller_input_limited(), target);
  }

  // optional double preview_speed_reference = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_preview_speed_reference(), target);
  }

  // optional double preview_speed_error = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_preview_speed_error(), target);
  }

  // optional double preview_acceleration_reference = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_preview_acceleration_reference(), target);
  }

  // optional double acceleration_cmd_closeloop = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_speed_lookup(), target);
  }

  // optional double calibration_value = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_calibration_value(), target);
  }

  // optional double throttle_cmd = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_throttle_cmd(), target);
  }

  // optional double brake_cmd = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_brake_cmd(), target);
  }

  // optional bool is_full_stop = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_full_stop(), target);
  }

  // optional double slope_offset_compensation = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_slope_offset_compensation(), target);
  }

  // optional double current_station = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_current_station(), target);
  }

  // optional double path_remain = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_path_remain(), target);
  }

  // optional int32 pid_saturation_status = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_pid_saturation_status(), target);
  }

  // optional int32 leadlag_saturation_status = 23;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_leadlag_saturation_status(), target);
  }

  // optional double speed_offset = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_speed_offset(), target);
  }

  // optional double current_speed = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_current_speed(), target);
  }

  // optional double acceleration_reference = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_reference(), target);
  }

  // optional double current_acceleration = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_current_acceleration(), target);
  }

  // optional double acceleration_error = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_error(), target);
  }

  // optional double jerk_reference = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_jerk_reference(), target);
  }

  // optional double current_jerk = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_current_jerk(), target);
  }

  // optional double jerk_error = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_jerk_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLongitudinalDebug)
  return target;
}

size_t SimpleLongitudinalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLongitudinalDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double station_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double station_error_limited = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double preview_station_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double speed_reference = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double speed_error = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limited = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double preview_speed_reference = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double preview_speed_error = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double preview_acceleration_reference = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd_closeloop = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_cmd = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_lookup = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double speed_lookup = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double calibration_value = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double brake_cmd = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double slope_offset_compensation = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double current_station = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional int32 pid_saturation_status = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pid_saturation_status());
    }

    // optional double path_remain = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double speed_offset = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double current_speed = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional double acceleration_reference = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double current_acceleration = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_error = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_reference = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double current_jerk = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_error = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional int32 leadlag_saturation_status = 23;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_leadlag_saturation_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleLongitudinalDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLongitudinalDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleLongitudinalDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleLongitudinalDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleLongitudinalDebug)
    MergeFrom(*source);
  }
}

void SimpleLongitudinalDebug::MergeFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      station_reference_ = from.station_reference_;
    }
    if (cached_has_bits & 0x00000002u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      station_error_limited_ = from.station_error_limited_;
    }
    if (cached_has_bits & 0x00000008u) {
      preview_station_error_ = from.preview_station_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_reference_ = from.speed_reference_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_error_ = from.speed_error_;
    }
    if (cached_has_bits & 0x00000040u) {
      speed_controller_input_limited_ = from.speed_controller_input_limited_;
    }
    if (cached_has_bits & 0x00000080u) {
      preview_speed_reference_ = from.preview_speed_reference_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      preview_speed_error_ = from.preview_speed_error_;
    }
    if (cached_has_bits & 0x00000200u) {
      preview_acceleration_reference_ = from.preview_acceleration_reference_;
    }
    if (cached_has_bits & 0x00000400u) {
      acceleration_cmd_closeloop_ = from.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x00000800u) {
      acceleration_cmd_ = from.acceleration_cmd_;
    }
    if (cached_has_bits & 0x00001000u) {
      acceleration_lookup_ = from.acceleration_lookup_;
    }
    if (cached_has_bits & 0x00002000u) {
      speed_lookup_ = from.speed_lookup_;
    }
    if (cached_has_bits & 0x00004000u) {
      calibration_value_ = from.calibration_value_;
    }
    if (cached_has_bits & 0x00008000u) {
      throttle_cmd_ = from.throttle_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      brake_cmd_ = from.brake_cmd_;
    }
    if (cached_has_bits & 0x00020000u) {
      slope_offset_compensation_ = from.slope_offset_compensation_;
    }
    if (cached_has_bits & 0x00040000u) {
      current_station_ = from.current_station_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_full_stop_ = from.is_full_stop_;
    }
    if (cached_has_bits & 0x00100000u) {
      pid_saturation_status_ = from.pid_saturation_status_;
    }
    if (cached_has_bits & 0x00200000u) {
      path_remain_ = from.path_remain_;
    }
    if (cached_has_bits & 0x00400000u) {
      speed_offset_ = from.speed_offset_;
    }
    if (cached_has_bits & 0x00800000u) {
      current_speed_ = from.current_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      acceleration_reference_ = from.acceleration_reference_;
    }
    if (cached_has_bits & 0x02000000u) {
      current_acceleration_ = from.current_acceleration_;
    }
    if (cached_has_bits & 0x04000000u) {
      acceleration_error_ = from.acceleration_error_;
    }
    if (cached_has_bits & 0x08000000u) {
      jerk_reference_ = from.jerk_reference_;
    }
    if (cached_has_bits & 0x10000000u) {
      current_jerk_ = from.current_jerk_;
    }
    if (cached_has_bits & 0x20000000u) {
      jerk_error_ = from.jerk_error_;
    }
    if (cached_has_bits & 0x40000000u) {
      leadlag_saturation_status_ = from.leadlag_saturation_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimpleLongitudinalDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLongitudinalDebug::CopyFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLongitudinalDebug::IsInitialized() const {
  return true;
}

void SimpleLongitudinalDebug::InternalSwap(SimpleLongitudinalDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(station_reference_, other->station_reference_);
  swap(station_error_, other->station_error_);
  swap(station_error_limited_, other->station_error_limited_);
  swap(preview_station_error_, other->preview_station_error_);
  swap(speed_reference_, other->speed_reference_);
  swap(speed_error_, other->speed_error_);
  swap(speed_controller_input_limited_, other->speed_controller_input_limited_);
  swap(preview_speed_reference_, other->preview_speed_reference_);
  swap(preview_speed_error_, other->preview_speed_error_);
  swap(preview_acceleration_reference_, other->preview_acceleration_reference_);
  swap(acceleration_cmd_closeloop_, other->acceleration_cmd_closeloop_);
  swap(acceleration_cmd_, other->acceleration_cmd_);
  swap(acceleration_lookup_, other->acceleration_lookup_);
  swap(speed_lookup_, other->speed_lookup_);
  swap(calibration_value_, other->calibration_value_);
  swap(throttle_cmd_, other->throttle_cmd_);
  swap(brake_cmd_, other->brake_cmd_);
  swap(slope_offset_compensation_, other->slope_offset_compensation_);
  swap(current_station_, other->current_station_);
  swap(is_full_stop_, other->is_full_stop_);
  swap(pid_saturation_status_, other->pid_saturation_status_);
  swap(path_remain_, other->path_remain_);
  swap(speed_offset_, other->speed_offset_);
  swap(current_speed_, other->current_speed_);
  swap(acceleration_reference_, other->acceleration_reference_);
  swap(current_acceleration_, other->current_acceleration_);
  swap(acceleration_error_, other->acceleration_error_);
  swap(jerk_reference_, other->jerk_reference_);
  swap(current_jerk_, other->current_jerk_);
  swap(jerk_error_, other->jerk_error_);
  swap(leadlag_saturation_status_, other->leadlag_saturation_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLongitudinalDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleLateralDebug::InitAsDefaultInstance() {
  ::apollo::control::_SimpleLateralDebug_default_instance_._instance.get_mutable()->current_target_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
}
class SimpleLateralDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleLateralDebug>()._has_bits_);
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ref_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lateral_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steer_angle_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steer_angle_lateral_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steer_angle_lateral_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steer_angle_heading_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steer_angle_heading_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_steer_angle_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_steering_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ref_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_steer_angle_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lateral_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ref_heading_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_heading_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ref_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_heading_error_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ref_heading_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_heading_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_heading_error_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_lateral_error_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_heading_error_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::apollo::common::TrajectoryPoint& current_target_point(const SimpleLateralDebug* msg);
  static void set_has_current_target_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steer_angle_feedback_augment(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

const ::apollo::common::TrajectoryPoint&
SimpleLateralDebug::_Internal::current_target_point(const SimpleLateralDebug* msg) {
  return *msg->current_target_point_;
}
void SimpleLateralDebug::clear_current_target_point() {
  if (current_target_point_ != nullptr) current_target_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SimpleLateralDebug::SimpleLateralDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleLateralDebug)
}
SimpleLateralDebug::SimpleLateralDebug(const SimpleLateralDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_current_target_point()) {
    current_target_point_ = new ::apollo::common::TrajectoryPoint(*from.current_target_point_);
  } else {
    current_target_point_ = nullptr;
  }
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_angle_feedback_augment_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(steer_angle_feedback_augment_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleLateralDebug)
}

void SimpleLateralDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleLateralDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  ::memset(&current_target_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_feedback_augment_) -
      reinterpret_cast<char*>(&current_target_point_)) + sizeof(steer_angle_feedback_augment_));
}

SimpleLateralDebug::~SimpleLateralDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleLateralDebug)
  SharedDtor();
}

void SimpleLateralDebug::SharedDtor() {
  if (this != internal_default_instance()) delete current_target_point_;
}

void SimpleLateralDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleLateralDebug& SimpleLateralDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleLateralDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void SimpleLateralDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleLateralDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(current_target_point_ != nullptr);
    current_target_point_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&lateral_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curvature_) -
        reinterpret_cast<char*>(&lateral_error_)) + sizeof(curvature_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&steer_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_position_) -
        reinterpret_cast<char*>(&steer_angle_)) + sizeof(steering_position_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ref_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_acceleration_) -
        reinterpret_cast<char*>(&ref_speed_)) + sizeof(heading_acceleration_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&heading_error_acceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_feedback_augment_) -
        reinterpret_cast<char*>(&heading_error_acceleration_)) + sizeof(steer_angle_feedback_augment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SimpleLateralDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lateral_error(&has_bits);
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ref_heading(&has_bits);
          ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading_error(&has_bits);
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading_error_rate(&has_bits);
          heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lateral_error_rate(&has_bits);
          lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_curvature(&has_bits);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steer_angle(&has_bits);
          steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_steer_angle_feedforward(&has_bits);
          steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steer_angle_lateral_contribution(&has_bits);
          steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_steer_angle_lateral_rate_contribution(&has_bits);
          steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_steer_angle_heading_contribution(&has_bits);
          steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_steer_angle_heading_rate_contribution(&has_bits);
          steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_steer_angle_feedback(&has_bits);
          steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_steering_position(&has_bits);
          steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_ref_speed(&has_bits);
          ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_steer_angle_limited(&has_bits);
          steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_acceleration = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_lateral_acceleration(&has_bits);
          lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_jerk = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_lateral_jerk(&has_bits);
          lateral_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_rate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_ref_heading_rate(&has_bits);
          ref_heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_rate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_heading_rate(&has_bits);
          heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_acceleration = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_ref_heading_acceleration(&has_bits);
          ref_heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_acceleration = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_heading_acceleration(&has_bits);
          heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_acceleration = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_heading_error_acceleration(&has_bits);
          heading_error_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_jerk = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_ref_heading_jerk(&has_bits);
          ref_heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_jerk = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_heading_jerk(&has_bits);
          heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_jerk = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_heading_error_jerk(&has_bits);
          heading_error_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_feedback = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_lateral_error_feedback(&has_bits);
          lateral_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_feedback = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_heading_error_feedback(&has_bits);
          heading_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint current_target_point = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_target_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback_augment = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_steer_angle_feedback_augment(&has_bits);
          steer_angle_feedback_augment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleLateralDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleLateralDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // optional double lateral_acceleration = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lateral_acceleration(), target);
  }

  // optional double lateral_jerk = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_lateral_jerk(), target);
  }

  // optional double ref_heading_rate = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_ref_heading_rate(), target);
  }

  // optional double heading_rate = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_heading_rate(), target);
  }

  // optional double ref_heading_acceleration = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_ref_heading_acceleration(), target);
  }

  // optional double heading_acceleration = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_heading_acceleration(), target);
  }

  // optional double heading_error_acceleration = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_heading_error_acceleration(), target);
  }

  // optional double ref_heading_jerk = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_ref_heading_jerk(), target);
  }

  // optional double heading_jerk = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_heading_jerk(), target);
  }

  // optional double heading_error_jerk = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_heading_error_jerk(), target);
  }

  // optional double lateral_error_feedback = 28;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_lateral_error_feedback(), target);
  }

  // optional double heading_error_feedback = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_heading_error_feedback(), target);
  }

  // optional .apollo.common.TrajectoryPoint current_target_point = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::current_target_point(this), target, stream);
  }

  // optional double steer_angle_feedback_augment = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_steer_angle_feedback_augment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleLateralDebug)
  return target;
}

size_t SimpleLateralDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleLateralDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.TrajectoryPoint current_target_point = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *current_target_point_);
    }

    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_acceleration = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_jerk = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_rate = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double heading_rate = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_acceleration = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double heading_acceleration = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional double heading_error_acceleration = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_jerk = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_jerk = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_jerk = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_error_feedback = 28;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_feedback = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_feedback_augment = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleLateralDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleLateralDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleLateralDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleLateralDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleLateralDebug)
    MergeFrom(*source);
  }
}

void SimpleLateralDebug::MergeFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_current_target_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_current_target_point());
    }
    if (cached_has_bits & 0x00000002u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      ref_heading_ = from.ref_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_error_ = from.heading_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_error_rate_ = from.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_error_rate_ = from.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      curvature_ = from.curvature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      steer_angle_ = from.steer_angle_;
    }
    if (cached_has_bits & 0x00000200u) {
      steer_angle_feedforward_ = from.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00000400u) {
      steer_angle_lateral_contribution_ = from.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00000800u) {
      steer_angle_lateral_rate_contribution_ = from.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00001000u) {
      steer_angle_heading_contribution_ = from.steer_angle_heading_contribution_;
    }
    if (cached_has_bits & 0x00002000u) {
      steer_angle_heading_rate_contribution_ = from.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      steer_angle_feedback_ = from.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00008000u) {
      steering_position_ = from.steering_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ref_speed_ = from.ref_speed_;
    }
    if (cached_has_bits & 0x00020000u) {
      steer_angle_limited_ = from.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00040000u) {
      lateral_acceleration_ = from.lateral_acceleration_;
    }
    if (cached_has_bits & 0x00080000u) {
      lateral_jerk_ = from.lateral_jerk_;
    }
    if (cached_has_bits & 0x00100000u) {
      ref_heading_rate_ = from.ref_heading_rate_;
    }
    if (cached_has_bits & 0x00200000u) {
      heading_rate_ = from.heading_rate_;
    }
    if (cached_has_bits & 0x00400000u) {
      ref_heading_acceleration_ = from.ref_heading_acceleration_;
    }
    if (cached_has_bits & 0x00800000u) {
      heading_acceleration_ = from.heading_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      heading_error_acceleration_ = from.heading_error_acceleration_;
    }
    if (cached_has_bits & 0x02000000u) {
      ref_heading_jerk_ = from.ref_heading_jerk_;
    }
    if (cached_has_bits & 0x04000000u) {
      heading_jerk_ = from.heading_jerk_;
    }
    if (cached_has_bits & 0x08000000u) {
      heading_error_jerk_ = from.heading_error_jerk_;
    }
    if (cached_has_bits & 0x10000000u) {
      lateral_error_feedback_ = from.lateral_error_feedback_;
    }
    if (cached_has_bits & 0x20000000u) {
      heading_error_feedback_ = from.heading_error_feedback_;
    }
    if (cached_has_bits & 0x40000000u) {
      steer_angle_feedback_augment_ = from.steer_angle_feedback_augment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimpleLateralDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleLateralDebug::CopyFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLateralDebug::IsInitialized() const {
  return true;
}

void SimpleLateralDebug::InternalSwap(SimpleLateralDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(current_target_point_, other->current_target_point_);
  swap(lateral_error_, other->lateral_error_);
  swap(ref_heading_, other->ref_heading_);
  swap(heading_, other->heading_);
  swap(heading_error_, other->heading_error_);
  swap(heading_error_rate_, other->heading_error_rate_);
  swap(lateral_error_rate_, other->lateral_error_rate_);
  swap(curvature_, other->curvature_);
  swap(steer_angle_, other->steer_angle_);
  swap(steer_angle_feedforward_, other->steer_angle_feedforward_);
  swap(steer_angle_lateral_contribution_, other->steer_angle_lateral_contribution_);
  swap(steer_angle_lateral_rate_contribution_, other->steer_angle_lateral_rate_contribution_);
  swap(steer_angle_heading_contribution_, other->steer_angle_heading_contribution_);
  swap(steer_angle_heading_rate_contribution_, other->steer_angle_heading_rate_contribution_);
  swap(steer_angle_feedback_, other->steer_angle_feedback_);
  swap(steering_position_, other->steering_position_);
  swap(ref_speed_, other->ref_speed_);
  swap(steer_angle_limited_, other->steer_angle_limited_);
  swap(lateral_acceleration_, other->lateral_acceleration_);
  swap(lateral_jerk_, other->lateral_jerk_);
  swap(ref_heading_rate_, other->ref_heading_rate_);
  swap(heading_rate_, other->heading_rate_);
  swap(ref_heading_acceleration_, other->ref_heading_acceleration_);
  swap(heading_acceleration_, other->heading_acceleration_);
  swap(heading_error_acceleration_, other->heading_error_acceleration_);
  swap(ref_heading_jerk_, other->ref_heading_jerk_);
  swap(heading_jerk_, other->heading_jerk_);
  swap(heading_error_jerk_, other->heading_error_jerk_);
  swap(lateral_error_feedback_, other->lateral_error_feedback_);
  swap(heading_error_feedback_, other->heading_error_feedback_);
  swap(steer_angle_feedback_augment_, other->steer_angle_feedback_augment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLateralDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleMPCDebug::InitAsDefaultInstance() {
}
class SimpleMPCDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleMPCDebug>()._has_bits_);
  static void set_has_lateral_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ref_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heading_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lateral_error_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steer_angle_feedforward(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steer_angle_lateral_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steer_angle_lateral_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steer_angle_heading_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steer_angle_heading_rate_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steer_angle_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_steering_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ref_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_steer_angle_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_station_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_station_error(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_speed_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_speed_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_acceleration_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_is_full_stop(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_station_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_speed_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_acceleration_cmd_closeloop(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_acceleration_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_acceleration_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_speed_lookup(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_calibration_value(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_steer_unconstraint_control_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_steer_angle_feedforward_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_lateral_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ref_heading_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_heading_rate(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ref_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_heading_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_heading_error_acceleration(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ref_heading_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_heading_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_heading_error_jerk(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_acceleration_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_acceleration_error(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_jerk_reference(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_jerk_feedback(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_jerk_error(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
};

SimpleMPCDebug::SimpleMPCDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.SimpleMPCDebug)
}
SimpleMPCDebug::SimpleMPCDebug(const SimpleMPCDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matrix_q_updated_(from.matrix_q_updated_),
      matrix_r_updated_(from.matrix_r_updated_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.SimpleMPCDebug)
}

void SimpleMPCDebug::SharedCtor() {
  ::memset(&lateral_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
}

SimpleMPCDebug::~SimpleMPCDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.SimpleMPCDebug)
  SharedDtor();
}

void SimpleMPCDebug::SharedDtor() {
}

void SimpleMPCDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleMPCDebug& SimpleMPCDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleMPCDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void SimpleMPCDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.SimpleMPCDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_updated_.Clear();
  matrix_r_updated_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lateral_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_angle_) -
        reinterpret_cast<char*>(&lateral_error_)) + sizeof(steer_angle_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&steer_angle_feedforward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ref_speed_) -
        reinterpret_cast<char*>(&steer_angle_feedforward_)) + sizeof(ref_speed_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&steer_angle_limited_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_feedback_) -
        reinterpret_cast<char*>(&steer_angle_limited_)) + sizeof(speed_feedback_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&acceleration_cmd_closeloop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lateral_acceleration_) -
        reinterpret_cast<char*>(&acceleration_cmd_closeloop_)) + sizeof(lateral_acceleration_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lateral_jerk_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_jerk_) -
        reinterpret_cast<char*>(&lateral_jerk_)) + sizeof(heading_jerk_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&heading_error_jerk_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_full_stop_) -
        reinterpret_cast<char*>(&heading_error_jerk_)) + sizeof(is_full_stop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SimpleMPCDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lateral_error(&_has_bits_);
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ref_heading(&_has_bits_);
          ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_heading(&_has_bits_);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_heading_error(&_has_bits_);
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading_error_rate(&_has_bits_);
          heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lateral_error_rate(&_has_bits_);
          lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_curvature(&_has_bits_);
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steer_angle(&_has_bits_);
          steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_steer_angle_feedforward(&_has_bits_);
          steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_steer_angle_lateral_contribution(&_has_bits_);
          steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_steer_angle_lateral_rate_contribution(&_has_bits_);
          steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_steer_angle_heading_contribution(&_has_bits_);
          steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_steer_angle_heading_rate_contribution(&_has_bits_);
          steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_steer_angle_feedback(&_has_bits_);
          steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_steering_position(&_has_bits_);
          steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_ref_speed(&_has_bits_);
          ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_steer_angle_limited(&_has_bits_);
          steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_reference = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_station_reference(&_has_bits_);
          station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_station_error(&_has_bits_);
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_reference = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_speed_reference(&_has_bits_);
          speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_error = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_speed_error(&_has_bits_);
          speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_reference = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_acceleration_reference(&_has_bits_);
          acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_full_stop = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_is_full_stop(&_has_bits_);
          is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double station_feedback = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_station_feedback(&_has_bits_);
          station_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_feedback = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_speed_feedback(&_has_bits_);
          speed_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd_closeloop = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_acceleration_cmd_closeloop(&_has_bits_);
          acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_cmd = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_acceleration_cmd(&_has_bits_);
          acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_lookup = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_acceleration_lookup(&_has_bits_);
          acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_lookup = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_speed_lookup(&_has_bits_);
          speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double calibration_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_calibration_value(&_has_bits_);
          calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_unconstraint_control_diff = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_steer_unconstraint_control_diff(&_has_bits_);
          steer_unconstraint_control_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer_angle_feedforward_compensation = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_steer_angle_feedforward_compensation(&_has_bits_);
          steer_angle_feedforward_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_q_updated = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_matrix_q_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<265>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q_updated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_r_updated = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_matrix_r_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<273>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_r_updated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lateral_acceleration = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lateral_acceleration(&_has_bits_);
          lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_jerk = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_lateral_jerk(&_has_bits_);
          lateral_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_rate = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ref_heading_rate(&_has_bits_);
          ref_heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_rate = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_heading_rate(&_has_bits_);
          heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_acceleration = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_ref_heading_acceleration(&_has_bits_);
          ref_heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_acceleration = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_heading_acceleration(&_has_bits_);
          heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_acceleration = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_heading_error_acceleration(&_has_bits_);
          heading_error_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ref_heading_jerk = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_ref_heading_jerk(&_has_bits_);
          ref_heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_jerk = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_heading_jerk(&_has_bits_);
          heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading_error_jerk = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_heading_error_jerk(&_has_bits_);
          heading_error_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_feedback = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_acceleration_feedback(&_has_bits_);
          acceleration_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double acceleration_error = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_acceleration_error(&_has_bits_);
          acceleration_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_reference = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_jerk_reference(&_has_bits_);
          jerk_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_feedback = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_jerk_feedback(&_has_bits_);
          jerk_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double jerk_error = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_jerk_error(&_has_bits_);
          jerk_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleMPCDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.SimpleMPCDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // optional double ref_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // optional double heading_error_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // optional double lateral_error_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // optional double curvature = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // optional double steer_angle = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // optional double steer_angle_feedforward = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // optional double steer_angle_lateral_contribution = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // optional double steer_angle_lateral_rate_contribution = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // optional double steer_angle_heading_contribution = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // optional double steer_angle_heading_rate_contribution = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // optional double steer_angle_feedback = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // optional double steering_position = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // optional double ref_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // optional double steer_angle_limited = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // optional double station_reference = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_station_reference(), target);
  }

  // optional double station_error = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_station_error(), target);
  }

  // optional double speed_reference = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_speed_reference(), target);
  }

  // optional double speed_error = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_speed_error(), target);
  }

  // optional double acceleration_reference = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_acceleration_reference(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_full_stop = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_is_full_stop(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double station_feedback = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_station_feedback(), target);
  }

  // optional double speed_feedback = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_speed_feedback(), target);
  }

  // optional double acceleration_cmd_closeloop = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // optional double acceleration_cmd = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_acceleration_cmd(), target);
  }

  // optional double acceleration_lookup = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_lookup(), target);
  }

  // optional double speed_lookup = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_speed_lookup(), target);
  }

  // optional double calibration_value = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_calibration_value(), target);
  }

  // optional double steer_unconstraint_control_diff = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_steer_unconstraint_control_diff(), target);
  }

  // optional double steer_angle_feedforward_compensation = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_steer_angle_feedforward_compensation(), target);
  }

  // repeated double matrix_q_updated = 33;
  for (int i = 0, n = this->_internal_matrix_q_updated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_matrix_q_updated(i), target);
  }

  // repeated double matrix_r_updated = 34;
  for (int i = 0, n = this->_internal_matrix_r_updated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(34, this->_internal_matrix_r_updated(i), target);
  }

  // optional double lateral_acceleration = 35;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_lateral_acceleration(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double lateral_jerk = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_lateral_jerk(), target);
  }

  // optional double ref_heading_rate = 37;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_ref_heading_rate(), target);
  }

  // optional double heading_rate = 38;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_heading_rate(), target);
  }

  // optional double ref_heading_acceleration = 39;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_ref_heading_acceleration(), target);
  }

  // optional double heading_acceleration = 40;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_heading_acceleration(), target);
  }

  // optional double heading_error_acceleration = 41;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_heading_error_acceleration(), target);
  }

  // optional double ref_heading_jerk = 42;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_ref_heading_jerk(), target);
  }

  // optional double heading_jerk = 43;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->_internal_heading_jerk(), target);
  }

  // optional double heading_error_jerk = 44;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->_internal_heading_error_jerk(), target);
  }

  // optional double acceleration_feedback = 45;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_acceleration_feedback(), target);
  }

  // optional double acceleration_error = 46;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->_internal_acceleration_error(), target);
  }

  // optional double jerk_reference = 47;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->_internal_jerk_reference(), target);
  }

  // optional double jerk_feedback = 48;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->_internal_jerk_feedback(), target);
  }

  // optional double jerk_error = 49;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->_internal_jerk_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.SimpleMPCDebug)
  return target;
}

size_t SimpleMPCDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.SimpleMPCDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q_updated = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_updated_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_q_updated_size());
    total_size += data_size;
  }

  // repeated double matrix_r_updated = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_r_updated_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_r_updated_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double lateral_error = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ref_heading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading_error_rate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double lateral_error_rate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double steer_angle_feedforward = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_contribution = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_lateral_rate_contribution = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_contribution = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_heading_rate_contribution = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double steer_angle_feedback = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double steering_position = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double ref_speed = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double steer_angle_limited = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double station_reference = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double station_error = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double speed_reference = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double speed_error = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_reference = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double station_feedback = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double speed_feedback = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double acceleration_cmd_closeloop = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_cmd = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_lookup = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double speed_lookup = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double calibration_value = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double steer_unconstraint_control_diff = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double steer_angle_feedforward_compensation = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_acceleration = 35;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional double lateral_jerk = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_rate = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double heading_rate = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_acceleration = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double heading_acceleration = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double heading_error_acceleration = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double ref_heading_jerk = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double heading_jerk = 43;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional double heading_error_jerk = 44;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_feedback = 45;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 8;
    }

    // optional double acceleration_error = 46;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional double jerk_reference = 47;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional double jerk_feedback = 48;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double jerk_error = 49;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional bool is_full_stop = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleMPCDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleMPCDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleMPCDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.SimpleMPCDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.SimpleMPCDebug)
    MergeFrom(*source);
  }
}

void SimpleMPCDebug::MergeFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_updated_.MergeFrom(from.matrix_q_updated_);
  matrix_r_updated_.MergeFrom(from.matrix_r_updated_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      ref_heading_ = from.ref_heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_error_ = from.heading_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_error_rate_ = from.heading_error_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      lateral_error_rate_ = from.lateral_error_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      curvature_ = from.curvature_;
    }
    if (cached_has_bits & 0x00000080u) {
      steer_angle_ = from.steer_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      steer_angle_feedforward_ = from.steer_angle_feedforward_;
    }
    if (cached_has_bits & 0x00000200u) {
      steer_angle_lateral_contribution_ = from.steer_angle_lateral_contribution_;
    }
    if (cached_has_bits & 0x00000400u) {
      steer_angle_lateral_rate_contribution_ = from.steer_angle_lateral_rate_contribution_;
    }
    if (cached_has_bits & 0x00000800u) {
      steer_angle_heading_contribution_ = from.steer_angle_heading_contribution_;
    }
    if (cached_has_bits & 0x00001000u) {
      steer_angle_heading_rate_contribution_ = from.steer_angle_heading_rate_contribution_;
    }
    if (cached_has_bits & 0x00002000u) {
      steer_angle_feedback_ = from.steer_angle_feedback_;
    }
    if (cached_has_bits & 0x00004000u) {
      steering_position_ = from.steering_position_;
    }
    if (cached_has_bits & 0x00008000u) {
      ref_speed_ = from.ref_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      steer_angle_limited_ = from.steer_angle_limited_;
    }
    if (cached_has_bits & 0x00020000u) {
      station_reference_ = from.station_reference_;
    }
    if (cached_has_bits & 0x00040000u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00080000u) {
      speed_reference_ = from.speed_reference_;
    }
    if (cached_has_bits & 0x00100000u) {
      speed_error_ = from.speed_error_;
    }
    if (cached_has_bits & 0x00200000u) {
      acceleration_reference_ = from.acceleration_reference_;
    }
    if (cached_has_bits & 0x00400000u) {
      station_feedback_ = from.station_feedback_;
    }
    if (cached_has_bits & 0x00800000u) {
      speed_feedback_ = from.speed_feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      acceleration_cmd_closeloop_ = from.acceleration_cmd_closeloop_;
    }
    if (cached_has_bits & 0x02000000u) {
      acceleration_cmd_ = from.acceleration_cmd_;
    }
    if (cached_has_bits & 0x04000000u) {
      acceleration_lookup_ = from.acceleration_lookup_;
    }
    if (cached_has_bits & 0x08000000u) {
      speed_lookup_ = from.speed_lookup_;
    }
    if (cached_has_bits & 0x10000000u) {
      calibration_value_ = from.calibration_value_;
    }
    if (cached_has_bits & 0x20000000u) {
      steer_unconstraint_control_diff_ = from.steer_unconstraint_control_diff_;
    }
    if (cached_has_bits & 0x40000000u) {
      steer_angle_feedforward_compensation_ = from.steer_angle_feedforward_compensation_;
    }
    if (cached_has_bits & 0x80000000u) {
      lateral_acceleration_ = from.lateral_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lateral_jerk_ = from.lateral_jerk_;
    }
    if (cached_has_bits & 0x00000002u) {
      ref_heading_rate_ = from.ref_heading_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      heading_rate_ = from.heading_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      ref_heading_acceleration_ = from.ref_heading_acceleration_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_acceleration_ = from.heading_acceleration_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_error_acceleration_ = from.heading_error_acceleration_;
    }
    if (cached_has_bits & 0x00000040u) {
      ref_heading_jerk_ = from.ref_heading_jerk_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_jerk_ = from.heading_jerk_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      heading_error_jerk_ = from.heading_error_jerk_;
    }
    if (cached_has_bits & 0x00000200u) {
      acceleration_feedback_ = from.acceleration_feedback_;
    }
    if (cached_has_bits & 0x00000400u) {
      acceleration_error_ = from.acceleration_error_;
    }
    if (cached_has_bits & 0x00000800u) {
      jerk_reference_ = from.jerk_reference_;
    }
    if (cached_has_bits & 0x00001000u) {
      jerk_feedback_ = from.jerk_feedback_;
    }
    if (cached_has_bits & 0x00002000u) {
      jerk_error_ = from.jerk_error_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_full_stop_ = from.is_full_stop_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SimpleMPCDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMPCDebug::CopyFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMPCDebug::IsInitialized() const {
  return true;
}

void SimpleMPCDebug::InternalSwap(SimpleMPCDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  matrix_q_updated_.InternalSwap(&other->matrix_q_updated_);
  matrix_r_updated_.InternalSwap(&other->matrix_r_updated_);
  swap(lateral_error_, other->lateral_error_);
  swap(ref_heading_, other->ref_heading_);
  swap(heading_, other->heading_);
  swap(heading_error_, other->heading_error_);
  swap(heading_error_rate_, other->heading_error_rate_);
  swap(lateral_error_rate_, other->lateral_error_rate_);
  swap(curvature_, other->curvature_);
  swap(steer_angle_, other->steer_angle_);
  swap(steer_angle_feedforward_, other->steer_angle_feedforward_);
  swap(steer_angle_lateral_contribution_, other->steer_angle_lateral_contribution_);
  swap(steer_angle_lateral_rate_contribution_, other->steer_angle_lateral_rate_contribution_);
  swap(steer_angle_heading_contribution_, other->steer_angle_heading_contribution_);
  swap(steer_angle_heading_rate_contribution_, other->steer_angle_heading_rate_contribution_);
  swap(steer_angle_feedback_, other->steer_angle_feedback_);
  swap(steering_position_, other->steering_position_);
  swap(ref_speed_, other->ref_speed_);
  swap(steer_angle_limited_, other->steer_angle_limited_);
  swap(station_reference_, other->station_reference_);
  swap(station_error_, other->station_error_);
  swap(speed_reference_, other->speed_reference_);
  swap(speed_error_, other->speed_error_);
  swap(acceleration_reference_, other->acceleration_reference_);
  swap(station_feedback_, other->station_feedback_);
  swap(speed_feedback_, other->speed_feedback_);
  swap(acceleration_cmd_closeloop_, other->acceleration_cmd_closeloop_);
  swap(acceleration_cmd_, other->acceleration_cmd_);
  swap(acceleration_lookup_, other->acceleration_lookup_);
  swap(speed_lookup_, other->speed_lookup_);
  swap(calibration_value_, other->calibration_value_);
  swap(steer_unconstraint_control_diff_, other->steer_unconstraint_control_diff_);
  swap(steer_angle_feedforward_compensation_, other->steer_angle_feedforward_compensation_);
  swap(lateral_acceleration_, other->lateral_acceleration_);
  swap(lateral_jerk_, other->lateral_jerk_);
  swap(ref_heading_rate_, other->ref_heading_rate_);
  swap(heading_rate_, other->heading_rate_);
  swap(ref_heading_acceleration_, other->ref_heading_acceleration_);
  swap(heading_acceleration_, other->heading_acceleration_);
  swap(heading_error_acceleration_, other->heading_error_acceleration_);
  swap(ref_heading_jerk_, other->ref_heading_jerk_);
  swap(heading_jerk_, other->heading_jerk_);
  swap(heading_error_jerk_, other->heading_error_jerk_);
  swap(acceleration_feedback_, other->acceleration_feedback_);
  swap(acceleration_error_, other->acceleration_error_);
  swap(jerk_reference_, other->jerk_reference_);
  swap(jerk_feedback_, other->jerk_feedback_);
  swap(jerk_error_, other->jerk_error_);
  swap(is_full_stop_, other->is_full_stop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMPCDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputDebug::InitAsDefaultInstance() {
  ::apollo::control::_InputDebug_default_instance_._instance.get_mutable()->localization_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::control::_InputDebug_default_instance_._instance.get_mutable()->canbus_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::control::_InputDebug_default_instance_._instance.get_mutable()->trajectory_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::control::_InputDebug_default_instance_._instance.get_mutable()->latest_replan_trajectory_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class InputDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<InputDebug>()._has_bits_);
  static const ::apollo::common::Header& localization_header(const InputDebug* msg);
  static void set_has_localization_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Header& canbus_header(const InputDebug* msg);
  static void set_has_canbus_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Header& trajectory_header(const InputDebug* msg);
  static void set_has_trajectory_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Header& latest_replan_trajectory_header(const InputDebug* msg);
  static void set_has_latest_replan_trajectory_header(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
InputDebug::_Internal::localization_header(const InputDebug* msg) {
  return *msg->localization_header_;
}
const ::apollo::common::Header&
InputDebug::_Internal::canbus_header(const InputDebug* msg) {
  return *msg->canbus_header_;
}
const ::apollo::common::Header&
InputDebug::_Internal::trajectory_header(const InputDebug* msg) {
  return *msg->trajectory_header_;
}
const ::apollo::common::Header&
InputDebug::_Internal::latest_replan_trajectory_header(const InputDebug* msg) {
  return *msg->latest_replan_trajectory_header_;
}
void InputDebug::clear_localization_header() {
  if (localization_header_ != nullptr) localization_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void InputDebug::clear_canbus_header() {
  if (canbus_header_ != nullptr) canbus_header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void InputDebug::clear_trajectory_header() {
  if (trajectory_header_ != nullptr) trajectory_header_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void InputDebug::clear_latest_replan_trajectory_header() {
  if (latest_replan_trajectory_header_ != nullptr) latest_replan_trajectory_header_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
InputDebug::InputDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.InputDebug)
}
InputDebug::InputDebug(const InputDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_localization_header()) {
    localization_header_ = new ::apollo::common::Header(*from.localization_header_);
  } else {
    localization_header_ = nullptr;
  }
  if (from._internal_has_canbus_header()) {
    canbus_header_ = new ::apollo::common::Header(*from.canbus_header_);
  } else {
    canbus_header_ = nullptr;
  }
  if (from._internal_has_trajectory_header()) {
    trajectory_header_ = new ::apollo::common::Header(*from.trajectory_header_);
  } else {
    trajectory_header_ = nullptr;
  }
  if (from._internal_has_latest_replan_trajectory_header()) {
    latest_replan_trajectory_header_ = new ::apollo::common::Header(*from.latest_replan_trajectory_header_);
  } else {
    latest_replan_trajectory_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.control.InputDebug)
}

void InputDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  ::memset(&localization_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_replan_trajectory_header_) -
      reinterpret_cast<char*>(&localization_header_)) + sizeof(latest_replan_trajectory_header_));
}

InputDebug::~InputDebug() {
  // @@protoc_insertion_point(destructor:apollo.control.InputDebug)
  SharedDtor();
}

void InputDebug::SharedDtor() {
  if (this != internal_default_instance()) delete localization_header_;
  if (this != internal_default_instance()) delete canbus_header_;
  if (this != internal_default_instance()) delete trajectory_header_;
  if (this != internal_default_instance()) delete latest_replan_trajectory_header_;
}

void InputDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputDebug& InputDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputDebug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void InputDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.InputDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(localization_header_ != nullptr);
      localization_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(canbus_header_ != nullptr);
      canbus_header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trajectory_header_ != nullptr);
      trajectory_header_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(latest_replan_trajectory_header_ != nullptr);
      latest_replan_trajectory_header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InputDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header localization_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Header canbus_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_canbus_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Header trajectory_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Header latest_replan_trajectory_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_replan_trajectory_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.InputDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header localization_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::localization_header(this), target, stream);
  }

  // optional .apollo.common.Header canbus_header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::canbus_header(this), target, stream);
  }

  // optional .apollo.common.Header trajectory_header = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trajectory_header(this), target, stream);
  }

  // optional .apollo.common.Header latest_replan_trajectory_header = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::latest_replan_trajectory_header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.InputDebug)
  return target;
}

size_t InputDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.InputDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header localization_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localization_header_);
    }

    // optional .apollo.common.Header canbus_header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *canbus_header_);
    }

    // optional .apollo.common.Header trajectory_header = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_header_);
    }

    // optional .apollo.common.Header latest_replan_trajectory_header = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latest_replan_trajectory_header_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const InputDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.InputDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.InputDebug)
    MergeFrom(*source);
  }
}

void InputDebug::MergeFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.InputDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_localization_header()->::apollo::common::Header::MergeFrom(from._internal_localization_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_canbus_header()->::apollo::common::Header::MergeFrom(from._internal_canbus_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_trajectory_header()->::apollo::common::Header::MergeFrom(from._internal_trajectory_header());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_latest_replan_trajectory_header()->::apollo::common::Header::MergeFrom(from._internal_latest_replan_trajectory_header());
    }
  }
}

void InputDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDebug::CopyFrom(const InputDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.InputDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDebug::IsInitialized() const {
  return true;
}

void InputDebug::InternalSwap(InputDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(localization_header_, other->localization_header_);
  swap(canbus_header_, other->canbus_header_);
  swap(trajectory_header_, other->trajectory_header_);
  swap(latest_replan_trajectory_header_, other->latest_replan_trajectory_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Debug::InitAsDefaultInstance() {
  ::apollo::control::_Debug_default_instance_._instance.get_mutable()->simple_lon_debug_ = const_cast< ::apollo::control::SimpleLongitudinalDebug*>(
      ::apollo::control::SimpleLongitudinalDebug::internal_default_instance());
  ::apollo::control::_Debug_default_instance_._instance.get_mutable()->simple_lat_debug_ = const_cast< ::apollo::control::SimpleLateralDebug*>(
      ::apollo::control::SimpleLateralDebug::internal_default_instance());
  ::apollo::control::_Debug_default_instance_._instance.get_mutable()->input_debug_ = const_cast< ::apollo::control::InputDebug*>(
      ::apollo::control::InputDebug::internal_default_instance());
  ::apollo::control::_Debug_default_instance_._instance.get_mutable()->simple_mpc_debug_ = const_cast< ::apollo::control::SimpleMPCDebug*>(
      ::apollo::control::SimpleMPCDebug::internal_default_instance());
}
class Debug::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug>()._has_bits_);
  static const ::apollo::control::SimpleLongitudinalDebug& simple_lon_debug(const Debug* msg);
  static void set_has_simple_lon_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::control::SimpleLateralDebug& simple_lat_debug(const Debug* msg);
  static void set_has_simple_lat_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::control::InputDebug& input_debug(const Debug* msg);
  static void set_has_input_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::control::SimpleMPCDebug& simple_mpc_debug(const Debug* msg);
  static void set_has_simple_mpc_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::control::SimpleLongitudinalDebug&
Debug::_Internal::simple_lon_debug(const Debug* msg) {
  return *msg->simple_lon_debug_;
}
const ::apollo::control::SimpleLateralDebug&
Debug::_Internal::simple_lat_debug(const Debug* msg) {
  return *msg->simple_lat_debug_;
}
const ::apollo::control::InputDebug&
Debug::_Internal::input_debug(const Debug* msg) {
  return *msg->input_debug_;
}
const ::apollo::control::SimpleMPCDebug&
Debug::_Internal::simple_mpc_debug(const Debug* msg) {
  return *msg->simple_mpc_debug_;
}
Debug::Debug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.Debug)
}
Debug::Debug(const Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_simple_lon_debug()) {
    simple_lon_debug_ = new ::apollo::control::SimpleLongitudinalDebug(*from.simple_lon_debug_);
  } else {
    simple_lon_debug_ = nullptr;
  }
  if (from._internal_has_simple_lat_debug()) {
    simple_lat_debug_ = new ::apollo::control::SimpleLateralDebug(*from.simple_lat_debug_);
  } else {
    simple_lat_debug_ = nullptr;
  }
  if (from._internal_has_input_debug()) {
    input_debug_ = new ::apollo::control::InputDebug(*from.input_debug_);
  } else {
    input_debug_ = nullptr;
  }
  if (from._internal_has_simple_mpc_debug()) {
    simple_mpc_debug_ = new ::apollo::control::SimpleMPCDebug(*from.simple_mpc_debug_);
  } else {
    simple_mpc_debug_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.control.Debug)
}

void Debug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Debug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  ::memset(&simple_lon_debug_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simple_mpc_debug_) -
      reinterpret_cast<char*>(&simple_lon_debug_)) + sizeof(simple_mpc_debug_));
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.control.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  if (this != internal_default_instance()) delete simple_lon_debug_;
  if (this != internal_default_instance()) delete simple_lat_debug_;
  if (this != internal_default_instance()) delete input_debug_;
  if (this != internal_default_instance()) delete simple_mpc_debug_;
}

void Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Debug& Debug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Debug_modules_2fcontrol_2fproto_2fcontrol_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(simple_lon_debug_ != nullptr);
      simple_lon_debug_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(simple_lat_debug_ != nullptr);
      simple_lat_debug_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(input_debug_ != nullptr);
      input_debug_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(simple_mpc_debug_ != nullptr);
      simple_mpc_debug_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Debug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lon_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lat_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.InputDebug input_debug = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_mpc_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Debug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simple_lon_debug(this), target, stream);
  }

  // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::simple_lat_debug(this), target, stream);
  }

  // optional .apollo.control.InputDebug input_debug = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input_debug(this), target, stream);
  }

  // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::simple_mpc_debug(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.Debug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.control.SimpleLongitudinalDebug simple_lon_debug = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_lon_debug_);
    }

    // optional .apollo.control.SimpleLateralDebug simple_lat_debug = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_lat_debug_);
    }

    // optional .apollo.control.InputDebug input_debug = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_debug_);
    }

    // optional .apollo.control.SimpleMPCDebug simple_mpc_debug = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *simple_mpc_debug_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Debug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Debug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.Debug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_simple_lon_debug()->::apollo::control::SimpleLongitudinalDebug::MergeFrom(from._internal_simple_lon_debug());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_simple_lat_debug()->::apollo::control::SimpleLateralDebug::MergeFrom(from._internal_simple_lat_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_input_debug()->::apollo::control::InputDebug::MergeFrom(from._internal_input_debug());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_simple_mpc_debug()->::apollo::control::SimpleMPCDebug::MergeFrom(from._internal_simple_mpc_debug());
    }
  }
}

void Debug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::InternalSwap(Debug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(simple_lon_debug_, other->simple_lon_debug_);
  swap(simple_lat_debug_, other->simple_lat_debug_);
  swap(input_debug_, other->input_debug_);
  swap(simple_mpc_debug_, other->simple_mpc_debug_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::LatencyStats* Arena::CreateMaybeMessage< ::apollo::control::LatencyStats >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::LatencyStats >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::ControlCommand* Arena::CreateMaybeMessage< ::apollo::control::ControlCommand >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::ControlCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::SimpleLongitudinalDebug* Arena::CreateMaybeMessage< ::apollo::control::SimpleLongitudinalDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::SimpleLongitudinalDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::SimpleLateralDebug* Arena::CreateMaybeMessage< ::apollo::control::SimpleLateralDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::SimpleLateralDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::SimpleMPCDebug* Arena::CreateMaybeMessage< ::apollo::control::SimpleMPCDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::SimpleMPCDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::InputDebug* Arena::CreateMaybeMessage< ::apollo::control::InputDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::InputDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::Debug* Arena::CreateMaybeMessage< ::apollo::control::Debug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::Debug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
