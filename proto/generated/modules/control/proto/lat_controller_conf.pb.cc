// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/lat_controller_conf.proto

#include "modules/control/proto/lat_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GainScheduler_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto;
namespace apollo {
namespace control {
class LatControllerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatControllerConf> _instance;
} _LatControllerConf_default_instance_;
}  // namespace control
}  // namespace apollo
static void InitDefaultsscc_info_LatControllerConf_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_LatControllerConf_default_instance_;
    new (ptr) ::apollo::control::LatControllerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::LatControllerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LatControllerConf_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LatControllerConf_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto}, {
      &scc_info_GainScheduler_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto.base,
      &scc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, preview_window_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, cf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, cr_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, mass_fl_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, mass_fr_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, mass_rl_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, mass_rr_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, eps_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, matrix_q_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, reverse_matrix_q_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, max_lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, lat_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, heading_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, reverse_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, enable_reverse_leadlag_compensation_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, enable_look_ahead_back_control_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, lookahead_station_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LatControllerConf, lookback_station_),
  3,
  5,
  4,
  7,
  6,
  8,
  9,
  11,
  10,
  ~0u,
  ~0u,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  18,
  19,
  16,
  17,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::apollo::control::LatControllerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_LatControllerConf_default_instance_),
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/control/proto/lat_controller_c"
  "onf.proto\022\016apollo.control\032/modules/contr"
  "ol/proto/gain_scheduler_conf.proto\032(modu"
  "les/control/proto/leadlag_conf.proto\"\226\005\n"
  "\021LatControllerConf\022\n\n\002ts\030\001 \001(\001\022\026\n\016previe"
  "w_window\030\002 \001(\005\022\n\n\002cf\030\003 \001(\001\022\n\n\002cr\030\004 \001(\001\022\017"
  "\n\007mass_fl\030\005 \001(\005\022\017\n\007mass_fr\030\006 \001(\005\022\017\n\007mass"
  "_rl\030\007 \001(\005\022\017\n\007mass_rr\030\010 \001(\005\022\013\n\003eps\030\t \001(\001\022"
  "\020\n\010matrix_q\030\n \003(\001\022\030\n\020reverse_matrix_q\030\013 "
  "\003(\001\022\023\n\013cutoff_freq\030\014 \001(\005\022\037\n\027mean_filter_"
  "window_size\030\r \001(\005\022\025\n\rmax_iteration\030\016 \001(\005"
  "\022 \n\030max_lateral_acceleration\030\017 \001(\001\022=\n\026la"
  "t_err_gain_scheduler\030\020 \001(\0132\035.apollo.cont"
  "rol.GainScheduler\022A\n\032heading_err_gain_sc"
  "heduler\030\021 \001(\0132\035.apollo.control.GainSched"
  "uler\0229\n\024reverse_leadlag_conf\030\022 \001(\0132\033.apo"
  "llo.control.LeadlagConf\0222\n#enable_revers"
  "e_leadlag_compensation\030\023 \001(\010:\005false\022-\n\036e"
  "nable_look_ahead_back_control\030\024 \001(\010:\005fal"
  "se\022\034\n\021lookahead_station\030\025 \001(\001:\0010\022\033\n\020look"
  "back_station\030\026 \001(\001:\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcontrol_2fproto_2fgain_5fscheduler_5fconf_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto_sccs[1] = {
  &scc_info_LatControllerConf_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto_once;
static bool descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto = {
  &descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto_initialized, descriptor_table_protodef_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto, "modules/control/proto/lat_controller_conf.proto", 821,
  &descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto_once, descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto_sccs, descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto, 1, file_level_enum_descriptors_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto, file_level_service_descriptors_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto), true);
namespace apollo {
namespace control {

// ===================================================================

void LatControllerConf::InitAsDefaultInstance() {
  ::apollo::control::_LatControllerConf_default_instance_._instance.get_mutable()->lat_err_gain_scheduler_ = const_cast< ::apollo::control::GainScheduler*>(
      ::apollo::control::GainScheduler::internal_default_instance());
  ::apollo::control::_LatControllerConf_default_instance_._instance.get_mutable()->heading_err_gain_scheduler_ = const_cast< ::apollo::control::GainScheduler*>(
      ::apollo::control::GainScheduler::internal_default_instance());
  ::apollo::control::_LatControllerConf_default_instance_._instance.get_mutable()->reverse_leadlag_conf_ = const_cast< ::apollo::control::LeadlagConf*>(
      ::apollo::control::LeadlagConf::internal_default_instance());
}
class LatControllerConf::_Internal {
 public:
  using HasBits = decltype(std::declval<LatControllerConf>()._has_bits_);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preview_window(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mass_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mass_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mass_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mass_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cutoff_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mean_filter_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_lateral_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::control::GainScheduler& lat_err_gain_scheduler(const LatControllerConf* msg);
  static void set_has_lat_err_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::control::GainScheduler& heading_err_gain_scheduler(const LatControllerConf* msg);
  static void set_has_heading_err_gain_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::control::LeadlagConf& reverse_leadlag_conf(const LatControllerConf* msg);
  static void set_has_reverse_leadlag_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_reverse_leadlag_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enable_look_ahead_back_control(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lookahead_station(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lookback_station(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::apollo::control::GainScheduler&
LatControllerConf::_Internal::lat_err_gain_scheduler(const LatControllerConf* msg) {
  return *msg->lat_err_gain_scheduler_;
}
const ::apollo::control::GainScheduler&
LatControllerConf::_Internal::heading_err_gain_scheduler(const LatControllerConf* msg) {
  return *msg->heading_err_gain_scheduler_;
}
const ::apollo::control::LeadlagConf&
LatControllerConf::_Internal::reverse_leadlag_conf(const LatControllerConf* msg) {
  return *msg->reverse_leadlag_conf_;
}
void LatControllerConf::clear_lat_err_gain_scheduler() {
  if (lat_err_gain_scheduler_ != nullptr) lat_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LatControllerConf::clear_heading_err_gain_scheduler() {
  if (heading_err_gain_scheduler_ != nullptr) heading_err_gain_scheduler_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LatControllerConf::clear_reverse_leadlag_conf() {
  if (reverse_leadlag_conf_ != nullptr) reverse_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
LatControllerConf::LatControllerConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LatControllerConf)
}
LatControllerConf::LatControllerConf(const LatControllerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matrix_q_(from.matrix_q_),
      reverse_matrix_q_(from.reverse_matrix_q_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lat_err_gain_scheduler()) {
    lat_err_gain_scheduler_ = new ::apollo::control::GainScheduler(*from.lat_err_gain_scheduler_);
  } else {
    lat_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_heading_err_gain_scheduler()) {
    heading_err_gain_scheduler_ = new ::apollo::control::GainScheduler(*from.heading_err_gain_scheduler_);
  } else {
    heading_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_reverse_leadlag_conf()) {
    reverse_leadlag_conf_ = new ::apollo::control::LeadlagConf(*from.reverse_leadlag_conf_);
  } else {
    reverse_leadlag_conf_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_look_ahead_back_control_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(enable_look_ahead_back_control_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.LatControllerConf)
}

void LatControllerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LatControllerConf_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto.base);
  ::memset(&lat_err_gain_scheduler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_look_ahead_back_control_) -
      reinterpret_cast<char*>(&lat_err_gain_scheduler_)) + sizeof(enable_look_ahead_back_control_));
}

LatControllerConf::~LatControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LatControllerConf)
  SharedDtor();
}

void LatControllerConf::SharedDtor() {
  if (this != internal_default_instance()) delete lat_err_gain_scheduler_;
  if (this != internal_default_instance()) delete heading_err_gain_scheduler_;
  if (this != internal_default_instance()) delete reverse_leadlag_conf_;
}

void LatControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatControllerConf& LatControllerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatControllerConf_modules_2fcontrol_2fproto_2flat_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LatControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LatControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_.Clear();
  reverse_matrix_q_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lat_err_gain_scheduler_ != nullptr);
      lat_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(heading_err_gain_scheduler_ != nullptr);
      heading_err_gain_scheduler_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reverse_leadlag_conf_ != nullptr);
      reverse_leadlag_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cr_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(cr_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mass_fr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_lateral_acceleration_) -
        reinterpret_cast<char*>(&mass_fr_)) + sizeof(max_lateral_acceleration_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&lookahead_station_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_look_ahead_back_control_) -
        reinterpret_cast<char*>(&lookahead_station_)) + sizeof(enable_look_ahead_back_control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LatControllerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ts(&has_bits);
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 preview_window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_preview_window(&has_bits);
          preview_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_cf(&has_bits);
          cf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_cr(&has_bits);
          cr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_fl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mass_fl(&has_bits);
          mass_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_fr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mass_fr(&has_bits);
          mass_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_rl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mass_rl(&has_bits);
          mass_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mass_rr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mass_rr(&has_bits);
          mass_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double eps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_eps(&has_bits);
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double matrix_q = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_matrix_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double reverse_matrix_q = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reverse_matrix_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<89>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_reverse_matrix_q(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cutoff_freq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cutoff_freq(&has_bits);
          cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mean_filter_window_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_mean_filter_window_size(&has_bits);
          mean_filter_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_iteration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_max_iteration(&has_bits);
          max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_lateral_acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_max_lateral_acceleration(&has_bits);
          max_lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_heading_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.LeadlagConf reverse_leadlag_conf = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_leadlag_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_enable_reverse_leadlag_compensation(&has_bits);
          enable_reverse_leadlag_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_look_ahead_back_control = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_enable_look_ahead_back_control(&has_bits);
          enable_look_ahead_back_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double lookahead_station = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_lookahead_station(&has_bits);
          lookahead_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lookback_station = 22 [default = 0];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_lookback_station(&has_bits);
          lookback_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LatControllerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LatControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ts(), target);
  }

  // optional int32 preview_window = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_preview_window(), target);
  }

  // optional double cf = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cf(), target);
  }

  // optional double cr = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cr(), target);
  }

  // optional int32 mass_fl = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mass_fl(), target);
  }

  // optional int32 mass_fr = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mass_fr(), target);
  }

  // optional int32 mass_rl = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mass_rl(), target);
  }

  // optional int32 mass_rr = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mass_rr(), target);
  }

  // optional double eps = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_eps(), target);
  }

  // repeated double matrix_q = 10;
  for (int i = 0, n = this->_internal_matrix_q_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_matrix_q(i), target);
  }

  // repeated double reverse_matrix_q = 11;
  for (int i = 0, n = this->_internal_reverse_matrix_q_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_reverse_matrix_q(i), target);
  }

  // optional int32 cutoff_freq = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_cutoff_freq(), target);
  }

  // optional int32 mean_filter_window_size = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_mean_filter_window_size(), target);
  }

  // optional int32 max_iteration = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_iteration(), target);
  }

  // optional double max_lateral_acceleration = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_max_lateral_acceleration(), target);
  }

  // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::lat_err_gain_scheduler(this), target, stream);
  }

  // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::heading_err_gain_scheduler(this), target, stream);
  }

  // optional .apollo.control.LeadlagConf reverse_leadlag_conf = 18;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::reverse_leadlag_conf(this), target, stream);
  }

  // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_enable_reverse_leadlag_compensation(), target);
  }

  // optional bool enable_look_ahead_back_control = 20 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_enable_look_ahead_back_control(), target);
  }

  // optional double lookahead_station = 21 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_lookahead_station(), target);
  }

  // optional double lookback_station = 22 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_lookback_station(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LatControllerConf)
  return target;
}

size_t LatControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LatControllerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matrix_q_size());
    total_size += data_size;
  }

  // repeated double reverse_matrix_q = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_reverse_matrix_q_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reverse_matrix_q_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lat_err_gain_scheduler_);
    }

    // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heading_err_gain_scheduler_);
    }

    // optional .apollo.control.LeadlagConf reverse_leadlag_conf = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_leadlag_conf_);
    }

    // optional double ts = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double cf = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 preview_window = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_preview_window());
    }

    // optional int32 mass_fl = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_fl());
    }

    // optional double cr = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 mass_fr = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_fr());
    }

    // optional int32 mass_rl = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_rl());
    }

    // optional double eps = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 mass_rr = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mass_rr());
    }

    // optional int32 cutoff_freq = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cutoff_freq());
    }

    // optional int32 mean_filter_window_size = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mean_filter_window_size());
    }

    // optional int32 max_iteration = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_iteration());
    }

    // optional double max_lateral_acceleration = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double lookahead_station = 21 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double lookback_station = 22 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional bool enable_reverse_leadlag_compensation = 19 [default = false];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_look_ahead_back_control = 20 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatControllerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LatControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LatControllerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LatControllerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LatControllerConf)
    MergeFrom(*source);
  }
}

void LatControllerConf::MergeFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LatControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  reverse_matrix_q_.MergeFrom(from.reverse_matrix_q_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lat_err_gain_scheduler()->::apollo::control::GainScheduler::MergeFrom(from._internal_lat_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_heading_err_gain_scheduler()->::apollo::control::GainScheduler::MergeFrom(from._internal_heading_err_gain_scheduler());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_reverse_leadlag_conf()->::apollo::control::LeadlagConf::MergeFrom(from._internal_reverse_leadlag_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000010u) {
      cf_ = from.cf_;
    }
    if (cached_has_bits & 0x00000020u) {
      preview_window_ = from.preview_window_;
    }
    if (cached_has_bits & 0x00000040u) {
      mass_fl_ = from.mass_fl_;
    }
    if (cached_has_bits & 0x00000080u) {
      cr_ = from.cr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mass_fr_ = from.mass_fr_;
    }
    if (cached_has_bits & 0x00000200u) {
      mass_rl_ = from.mass_rl_;
    }
    if (cached_has_bits & 0x00000400u) {
      eps_ = from.eps_;
    }
    if (cached_has_bits & 0x00000800u) {
      mass_rr_ = from.mass_rr_;
    }
    if (cached_has_bits & 0x00001000u) {
      cutoff_freq_ = from.cutoff_freq_;
    }
    if (cached_has_bits & 0x00002000u) {
      mean_filter_window_size_ = from.mean_filter_window_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_iteration_ = from.max_iteration_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_lateral_acceleration_ = from.max_lateral_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      lookahead_station_ = from.lookahead_station_;
    }
    if (cached_has_bits & 0x00020000u) {
      lookback_station_ = from.lookback_station_;
    }
    if (cached_has_bits & 0x00040000u) {
      enable_reverse_leadlag_compensation_ = from.enable_reverse_leadlag_compensation_;
    }
    if (cached_has_bits & 0x00080000u) {
      enable_look_ahead_back_control_ = from.enable_look_ahead_back_control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatControllerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatControllerConf::CopyFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatControllerConf::IsInitialized() const {
  return true;
}

void LatControllerConf::InternalSwap(LatControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matrix_q_.InternalSwap(&other->matrix_q_);
  reverse_matrix_q_.InternalSwap(&other->reverse_matrix_q_);
  swap(lat_err_gain_scheduler_, other->lat_err_gain_scheduler_);
  swap(heading_err_gain_scheduler_, other->heading_err_gain_scheduler_);
  swap(reverse_leadlag_conf_, other->reverse_leadlag_conf_);
  swap(ts_, other->ts_);
  swap(cf_, other->cf_);
  swap(preview_window_, other->preview_window_);
  swap(mass_fl_, other->mass_fl_);
  swap(cr_, other->cr_);
  swap(mass_fr_, other->mass_fr_);
  swap(mass_rl_, other->mass_rl_);
  swap(eps_, other->eps_);
  swap(mass_rr_, other->mass_rr_);
  swap(cutoff_freq_, other->cutoff_freq_);
  swap(mean_filter_window_size_, other->mean_filter_window_size_);
  swap(max_iteration_, other->max_iteration_);
  swap(max_lateral_acceleration_, other->max_lateral_acceleration_);
  swap(lookahead_station_, other->lookahead_station_);
  swap(lookback_station_, other->lookback_station_);
  swap(enable_reverse_leadlag_compensation_, other->enable_reverse_leadlag_compensation_);
  swap(enable_look_ahead_back_control_, other->enable_look_ahead_back_control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatControllerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::LatControllerConf* Arena::CreateMaybeMessage< ::apollo::control::LatControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::LatControllerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
