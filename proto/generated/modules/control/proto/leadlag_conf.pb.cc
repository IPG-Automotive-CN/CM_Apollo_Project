// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/leadlag_conf.proto

#include "modules/control/proto/leadlag_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace control {
class LeadlagConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeadlagConf> _instance;
} _LeadlagConf_default_instance_;
}  // namespace control
}  // namespace apollo
static void InitDefaultsscc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_LeadlagConf_default_instance_;
    new (ptr) ::apollo::control::LeadlagConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::LeadlagConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::LeadlagConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LeadlagConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::LeadlagConf, innerstate_saturation_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LeadlagConf, alpha_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LeadlagConf, beta_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LeadlagConf, tau_),
  1,
  2,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::control::LeadlagConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_LeadlagConf_default_instance_),
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/control/proto/leadlag_conf.pro"
  "to\022\016apollo.control\"l\n\013LeadlagConf\022(\n\033inn"
  "erstate_saturation_level\030\001 \001(\001:\003300\022\022\n\005a"
  "lpha\030\002 \001(\001:\0030.1\022\017\n\004beta\030\003 \001(\001:\0011\022\016\n\003tau\030"
  "\004 \001(\001:\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto_sccs[1] = {
  &scc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto_once;
static bool descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto = {
  &descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto_initialized, descriptor_table_protodef_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto, "modules/control/proto/leadlag_conf.proto", 168,
  &descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto_once, descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto_sccs, descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto::offsets,
  file_level_metadata_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto, 1, file_level_enum_descriptors_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto, file_level_service_descriptors_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto), true);
namespace apollo {
namespace control {

// ===================================================================

void LeadlagConf::InitAsDefaultInstance() {
}
class LeadlagConf::_Internal {
 public:
  using HasBits = decltype(std::declval<LeadlagConf>()._has_bits_);
  static void set_has_innerstate_saturation_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tau(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LeadlagConf::LeadlagConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LeadlagConf)
}
LeadlagConf::LeadlagConf(const LeadlagConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tau_, &from.tau_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&tau_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.LeadlagConf)
}

void LeadlagConf::SharedCtor() {
  tau_ = 0;
  innerstate_saturation_level_ = 300;
  alpha_ = 0.1;
  beta_ = 1;
}

LeadlagConf::~LeadlagConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LeadlagConf)
  SharedDtor();
}

void LeadlagConf::SharedDtor() {
}

void LeadlagConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeadlagConf& LeadlagConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LeadlagConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LeadlagConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    tau_ = 0;
    innerstate_saturation_level_ = 300;
    alpha_ = 0.1;
    beta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LeadlagConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double innerstate_saturation_level = 1 [default = 300];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_innerstate_saturation_level(&has_bits);
          innerstate_saturation_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double alpha = 2 [default = 0.1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double beta = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_beta(&has_bits);
          beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double tau = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_tau(&has_bits);
          tau_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeadlagConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LeadlagConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double innerstate_saturation_level = 1 [default = 300];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_innerstate_saturation_level(), target);
  }

  // optional double alpha = 2 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_alpha(), target);
  }

  // optional double beta = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_beta(), target);
  }

  // optional double tau = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_tau(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LeadlagConf)
  return target;
}

size_t LeadlagConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LeadlagConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double tau = 4 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double innerstate_saturation_level = 1 [default = 300];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double alpha = 2 [default = 0.1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double beta = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeadlagConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LeadlagConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LeadlagConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeadlagConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LeadlagConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LeadlagConf)
    MergeFrom(*source);
  }
}

void LeadlagConf::MergeFrom(const LeadlagConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LeadlagConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tau_ = from.tau_;
    }
    if (cached_has_bits & 0x00000002u) {
      innerstate_saturation_level_ = from.innerstate_saturation_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000008u) {
      beta_ = from.beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeadlagConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LeadlagConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeadlagConf::CopyFrom(const LeadlagConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LeadlagConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeadlagConf::IsInitialized() const {
  return true;
}

void LeadlagConf::InternalSwap(LeadlagConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tau_, other->tau_);
  swap(innerstate_saturation_level_, other->innerstate_saturation_level_);
  swap(alpha_, other->alpha_);
  swap(beta_, other->beta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeadlagConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::LeadlagConf* Arena::CreateMaybeMessage< ::apollo::control::LeadlagConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::LeadlagConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
