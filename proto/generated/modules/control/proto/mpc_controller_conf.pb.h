// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/mpc_controller_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/control/proto/calibration_table.pb.h"
#include "modules/control/proto/gain_scheduler_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto;
namespace apollo {
namespace control {
class MPCControllerConf;
class MPCControllerConfDefaultTypeInternal;
extern MPCControllerConfDefaultTypeInternal _MPCControllerConf_default_instance_;
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::control::MPCControllerConf* Arena::CreateMaybeMessage<::apollo::control::MPCControllerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace control {

// ===================================================================

class MPCControllerConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.control.MPCControllerConf) */ {
 public:
  MPCControllerConf();
  virtual ~MPCControllerConf();

  MPCControllerConf(const MPCControllerConf& from);
  MPCControllerConf(MPCControllerConf&& from) noexcept
    : MPCControllerConf() {
    *this = ::std::move(from);
  }

  inline MPCControllerConf& operator=(const MPCControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPCControllerConf& operator=(MPCControllerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MPCControllerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPCControllerConf* internal_default_instance() {
    return reinterpret_cast<const MPCControllerConf*>(
               &_MPCControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MPCControllerConf& a, MPCControllerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(MPCControllerConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPCControllerConf* New() const final {
    return CreateMaybeMessage<MPCControllerConf>(nullptr);
  }

  MPCControllerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPCControllerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MPCControllerConf& from);
  void MergeFrom(const MPCControllerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPCControllerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.control.MPCControllerConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto);
    return ::descriptor_table_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixQFieldNumber = 9,
    kMatrixRFieldNumber = 10,
    kLatErrGainSchedulerFieldNumber = 18,
    kHeadingErrGainSchedulerFieldNumber = 19,
    kSteerWeightGainSchedulerFieldNumber = 20,
    kFeedforwardtermGainSchedulerFieldNumber = 21,
    kCalibrationTableFieldNumber = 22,
    kTsFieldNumber = 1,
    kCfFieldNumber = 2,
    kCrFieldNumber = 3,
    kMassFlFieldNumber = 4,
    kMassFrFieldNumber = 5,
    kMassRlFieldNumber = 6,
    kMassRrFieldNumber = 7,
    kEpsFieldNumber = 8,
    kCutoffFreqFieldNumber = 11,
    kMeanFilterWindowSizeFieldNumber = 12,
    kMaxLateralAccelerationFieldNumber = 14,
    kStandstillAccelerationFieldNumber = 15,
    kBrakeMinimumActionFieldNumber = 16,
    kThrottleMinimumActionFieldNumber = 17,
    kMaxIterationFieldNumber = 13,
    kEnableMpcFeedforwardCompensationFieldNumber = 23,
    kUnconstraintControlDiffLimitFieldNumber = 24,
  };
  // repeated double matrix_q = 9;
  int matrix_q_size() const;
  private:
  int _internal_matrix_q_size() const;
  public:
  void clear_matrix_q();
  private:
  double _internal_matrix_q(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_matrix_q() const;
  void _internal_add_matrix_q(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_matrix_q();
  public:
  double matrix_q(int index) const;
  void set_matrix_q(int index, double value);
  void add_matrix_q(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix_q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix_q();

  // repeated double matrix_r = 10;
  int matrix_r_size() const;
  private:
  int _internal_matrix_r_size() const;
  public:
  void clear_matrix_r();
  private:
  double _internal_matrix_r(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_matrix_r() const;
  void _internal_add_matrix_r(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_matrix_r();
  public:
  double matrix_r(int index) const;
  void set_matrix_r(int index, double value);
  void add_matrix_r(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix_r() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix_r();

  // optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
  bool has_lat_err_gain_scheduler() const;
  private:
  bool _internal_has_lat_err_gain_scheduler() const;
  public:
  void clear_lat_err_gain_scheduler();
  const ::apollo::control::GainScheduler& lat_err_gain_scheduler() const;
  ::apollo::control::GainScheduler* release_lat_err_gain_scheduler();
  ::apollo::control::GainScheduler* mutable_lat_err_gain_scheduler();
  void set_allocated_lat_err_gain_scheduler(::apollo::control::GainScheduler* lat_err_gain_scheduler);
  private:
  const ::apollo::control::GainScheduler& _internal_lat_err_gain_scheduler() const;
  ::apollo::control::GainScheduler* _internal_mutable_lat_err_gain_scheduler();
  public:

  // optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
  bool has_heading_err_gain_scheduler() const;
  private:
  bool _internal_has_heading_err_gain_scheduler() const;
  public:
  void clear_heading_err_gain_scheduler();
  const ::apollo::control::GainScheduler& heading_err_gain_scheduler() const;
  ::apollo::control::GainScheduler* release_heading_err_gain_scheduler();
  ::apollo::control::GainScheduler* mutable_heading_err_gain_scheduler();
  void set_allocated_heading_err_gain_scheduler(::apollo::control::GainScheduler* heading_err_gain_scheduler);
  private:
  const ::apollo::control::GainScheduler& _internal_heading_err_gain_scheduler() const;
  ::apollo::control::GainScheduler* _internal_mutable_heading_err_gain_scheduler();
  public:

  // optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
  bool has_steer_weight_gain_scheduler() const;
  private:
  bool _internal_has_steer_weight_gain_scheduler() const;
  public:
  void clear_steer_weight_gain_scheduler();
  const ::apollo::control::GainScheduler& steer_weight_gain_scheduler() const;
  ::apollo::control::GainScheduler* release_steer_weight_gain_scheduler();
  ::apollo::control::GainScheduler* mutable_steer_weight_gain_scheduler();
  void set_allocated_steer_weight_gain_scheduler(::apollo::control::GainScheduler* steer_weight_gain_scheduler);
  private:
  const ::apollo::control::GainScheduler& _internal_steer_weight_gain_scheduler() const;
  ::apollo::control::GainScheduler* _internal_mutable_steer_weight_gain_scheduler();
  public:

  // optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
  bool has_feedforwardterm_gain_scheduler() const;
  private:
  bool _internal_has_feedforwardterm_gain_scheduler() const;
  public:
  void clear_feedforwardterm_gain_scheduler();
  const ::apollo::control::GainScheduler& feedforwardterm_gain_scheduler() const;
  ::apollo::control::GainScheduler* release_feedforwardterm_gain_scheduler();
  ::apollo::control::GainScheduler* mutable_feedforwardterm_gain_scheduler();
  void set_allocated_feedforwardterm_gain_scheduler(::apollo::control::GainScheduler* feedforwardterm_gain_scheduler);
  private:
  const ::apollo::control::GainScheduler& _internal_feedforwardterm_gain_scheduler() const;
  ::apollo::control::GainScheduler* _internal_mutable_feedforwardterm_gain_scheduler();
  public:

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
  bool has_calibration_table() const;
  private:
  bool _internal_has_calibration_table() const;
  public:
  void clear_calibration_table();
  const ::apollo::control::calibrationtable::ControlCalibrationTable& calibration_table() const;
  ::apollo::control::calibrationtable::ControlCalibrationTable* release_calibration_table();
  ::apollo::control::calibrationtable::ControlCalibrationTable* mutable_calibration_table();
  void set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table);
  private:
  const ::apollo::control::calibrationtable::ControlCalibrationTable& _internal_calibration_table() const;
  ::apollo::control::calibrationtable::ControlCalibrationTable* _internal_mutable_calibration_table();
  public:

  // optional double ts = 1;
  bool has_ts() const;
  private:
  bool _internal_has_ts() const;
  public:
  void clear_ts();
  double ts() const;
  void set_ts(double value);
  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);
  public:

  // optional double cf = 2;
  bool has_cf() const;
  private:
  bool _internal_has_cf() const;
  public:
  void clear_cf();
  double cf() const;
  void set_cf(double value);
  private:
  double _internal_cf() const;
  void _internal_set_cf(double value);
  public:

  // optional double cr = 3;
  bool has_cr() const;
  private:
  bool _internal_has_cr() const;
  public:
  void clear_cr();
  double cr() const;
  void set_cr(double value);
  private:
  double _internal_cr() const;
  void _internal_set_cr(double value);
  public:

  // optional int32 mass_fl = 4;
  bool has_mass_fl() const;
  private:
  bool _internal_has_mass_fl() const;
  public:
  void clear_mass_fl();
  ::PROTOBUF_NAMESPACE_ID::int32 mass_fl() const;
  void set_mass_fl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mass_fl() const;
  void _internal_set_mass_fl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mass_fr = 5;
  bool has_mass_fr() const;
  private:
  bool _internal_has_mass_fr() const;
  public:
  void clear_mass_fr();
  ::PROTOBUF_NAMESPACE_ID::int32 mass_fr() const;
  void set_mass_fr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mass_fr() const;
  void _internal_set_mass_fr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mass_rl = 6;
  bool has_mass_rl() const;
  private:
  bool _internal_has_mass_rl() const;
  public:
  void clear_mass_rl();
  ::PROTOBUF_NAMESPACE_ID::int32 mass_rl() const;
  void set_mass_rl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mass_rl() const;
  void _internal_set_mass_rl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mass_rr = 7;
  bool has_mass_rr() const;
  private:
  bool _internal_has_mass_rr() const;
  public:
  void clear_mass_rr();
  ::PROTOBUF_NAMESPACE_ID::int32 mass_rr() const;
  void set_mass_rr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mass_rr() const;
  void _internal_set_mass_rr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double eps = 8;
  bool has_eps() const;
  private:
  bool _internal_has_eps() const;
  public:
  void clear_eps();
  double eps() const;
  void set_eps(double value);
  private:
  double _internal_eps() const;
  void _internal_set_eps(double value);
  public:

  // optional int32 cutoff_freq = 11;
  bool has_cutoff_freq() const;
  private:
  bool _internal_has_cutoff_freq() const;
  public:
  void clear_cutoff_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 cutoff_freq() const;
  void set_cutoff_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mean_filter_window_size = 12;
  bool has_mean_filter_window_size() const;
  private:
  bool _internal_has_mean_filter_window_size() const;
  public:
  void clear_mean_filter_window_size();
  ::PROTOBUF_NAMESPACE_ID::int32 mean_filter_window_size() const;
  void set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mean_filter_window_size() const;
  void _internal_set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double max_lateral_acceleration = 14;
  bool has_max_lateral_acceleration() const;
  private:
  bool _internal_has_max_lateral_acceleration() const;
  public:
  void clear_max_lateral_acceleration();
  double max_lateral_acceleration() const;
  void set_max_lateral_acceleration(double value);
  private:
  double _internal_max_lateral_acceleration() const;
  void _internal_set_max_lateral_acceleration(double value);
  public:

  // optional double standstill_acceleration = 15;
  bool has_standstill_acceleration() const;
  private:
  bool _internal_has_standstill_acceleration() const;
  public:
  void clear_standstill_acceleration();
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);
  private:
  double _internal_standstill_acceleration() const;
  void _internal_set_standstill_acceleration(double value);
  public:

  // optional double brake_minimum_action = 16;
  bool has_brake_minimum_action() const;
  private:
  bool _internal_has_brake_minimum_action() const;
  public:
  void clear_brake_minimum_action();
  double brake_minimum_action() const;
  void set_brake_minimum_action(double value);
  private:
  double _internal_brake_minimum_action() const;
  void _internal_set_brake_minimum_action(double value);
  public:

  // optional double throttle_minimum_action = 17;
  bool has_throttle_minimum_action() const;
  private:
  bool _internal_has_throttle_minimum_action() const;
  public:
  void clear_throttle_minimum_action();
  double throttle_minimum_action() const;
  void set_throttle_minimum_action(double value);
  private:
  double _internal_throttle_minimum_action() const;
  void _internal_set_throttle_minimum_action(double value);
  public:

  // optional int32 max_iteration = 13;
  bool has_max_iteration() const;
  private:
  bool _internal_has_max_iteration() const;
  public:
  void clear_max_iteration();
  ::PROTOBUF_NAMESPACE_ID::int32 max_iteration() const;
  void set_max_iteration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_iteration() const;
  void _internal_set_max_iteration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool enable_mpc_feedforward_compensation = 23 [default = false];
  bool has_enable_mpc_feedforward_compensation() const;
  private:
  bool _internal_has_enable_mpc_feedforward_compensation() const;
  public:
  void clear_enable_mpc_feedforward_compensation();
  bool enable_mpc_feedforward_compensation() const;
  void set_enable_mpc_feedforward_compensation(bool value);
  private:
  bool _internal_enable_mpc_feedforward_compensation() const;
  void _internal_set_enable_mpc_feedforward_compensation(bool value);
  public:

  // optional double unconstraint_control_diff_limit = 24;
  bool has_unconstraint_control_diff_limit() const;
  private:
  bool _internal_has_unconstraint_control_diff_limit() const;
  public:
  void clear_unconstraint_control_diff_limit();
  double unconstraint_control_diff_limit() const;
  void set_unconstraint_control_diff_limit(double value);
  private:
  double _internal_unconstraint_control_diff_limit() const;
  void _internal_set_unconstraint_control_diff_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.control.MPCControllerConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_q_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_r_;
  ::apollo::control::GainScheduler* lat_err_gain_scheduler_;
  ::apollo::control::GainScheduler* heading_err_gain_scheduler_;
  ::apollo::control::GainScheduler* steer_weight_gain_scheduler_;
  ::apollo::control::GainScheduler* feedforwardterm_gain_scheduler_;
  ::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table_;
  double ts_;
  double cf_;
  double cr_;
  ::PROTOBUF_NAMESPACE_ID::int32 mass_fl_;
  ::PROTOBUF_NAMESPACE_ID::int32 mass_fr_;
  ::PROTOBUF_NAMESPACE_ID::int32 mass_rl_;
  ::PROTOBUF_NAMESPACE_ID::int32 mass_rr_;
  double eps_;
  ::PROTOBUF_NAMESPACE_ID::int32 cutoff_freq_;
  ::PROTOBUF_NAMESPACE_ID::int32 mean_filter_window_size_;
  double max_lateral_acceleration_;
  double standstill_acceleration_;
  double brake_minimum_action_;
  double throttle_minimum_action_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_iteration_;
  bool enable_mpc_feedforward_compensation_;
  double unconstraint_control_diff_limit_;
  friend struct ::TableStruct_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MPCControllerConf

// optional double ts = 1;
inline bool MPCControllerConf::_internal_has_ts() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MPCControllerConf::has_ts() const {
  return _internal_has_ts();
}
inline void MPCControllerConf::clear_ts() {
  ts_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double MPCControllerConf::_internal_ts() const {
  return ts_;
}
inline double MPCControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.ts)
  return _internal_ts();
}
inline void MPCControllerConf::_internal_set_ts(double value) {
  _has_bits_[0] |= 0x00000020u;
  ts_ = value;
}
inline void MPCControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.ts)
}

// optional double cf = 2;
inline bool MPCControllerConf::_internal_has_cf() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MPCControllerConf::has_cf() const {
  return _internal_has_cf();
}
inline void MPCControllerConf::clear_cf() {
  cf_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double MPCControllerConf::_internal_cf() const {
  return cf_;
}
inline double MPCControllerConf::cf() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cf)
  return _internal_cf();
}
inline void MPCControllerConf::_internal_set_cf(double value) {
  _has_bits_[0] |= 0x00000040u;
  cf_ = value;
}
inline void MPCControllerConf::set_cf(double value) {
  _internal_set_cf(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cf)
}

// optional double cr = 3;
inline bool MPCControllerConf::_internal_has_cr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MPCControllerConf::has_cr() const {
  return _internal_has_cr();
}
inline void MPCControllerConf::clear_cr() {
  cr_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double MPCControllerConf::_internal_cr() const {
  return cr_;
}
inline double MPCControllerConf::cr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cr)
  return _internal_cr();
}
inline void MPCControllerConf::_internal_set_cr(double value) {
  _has_bits_[0] |= 0x00000080u;
  cr_ = value;
}
inline void MPCControllerConf::set_cr(double value) {
  _internal_set_cr(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cr)
}

// optional int32 mass_fl = 4;
inline bool MPCControllerConf::_internal_has_mass_fl() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MPCControllerConf::has_mass_fl() const {
  return _internal_has_mass_fl();
}
inline void MPCControllerConf::clear_mass_fl() {
  mass_fl_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::_internal_mass_fl() const {
  return mass_fl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::mass_fl() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_fl)
  return _internal_mass_fl();
}
inline void MPCControllerConf::_internal_set_mass_fl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  mass_fl_ = value;
}
inline void MPCControllerConf::set_mass_fl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mass_fl(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_fl)
}

// optional int32 mass_fr = 5;
inline bool MPCControllerConf::_internal_has_mass_fr() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MPCControllerConf::has_mass_fr() const {
  return _internal_has_mass_fr();
}
inline void MPCControllerConf::clear_mass_fr() {
  mass_fr_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::_internal_mass_fr() const {
  return mass_fr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::mass_fr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_fr)
  return _internal_mass_fr();
}
inline void MPCControllerConf::_internal_set_mass_fr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  mass_fr_ = value;
}
inline void MPCControllerConf::set_mass_fr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mass_fr(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_fr)
}

// optional int32 mass_rl = 6;
inline bool MPCControllerConf::_internal_has_mass_rl() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MPCControllerConf::has_mass_rl() const {
  return _internal_has_mass_rl();
}
inline void MPCControllerConf::clear_mass_rl() {
  mass_rl_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::_internal_mass_rl() const {
  return mass_rl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::mass_rl() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_rl)
  return _internal_mass_rl();
}
inline void MPCControllerConf::_internal_set_mass_rl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  mass_rl_ = value;
}
inline void MPCControllerConf::set_mass_rl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mass_rl(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_rl)
}

// optional int32 mass_rr = 7;
inline bool MPCControllerConf::_internal_has_mass_rr() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MPCControllerConf::has_mass_rr() const {
  return _internal_has_mass_rr();
}
inline void MPCControllerConf::clear_mass_rr() {
  mass_rr_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::_internal_mass_rr() const {
  return mass_rr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::mass_rr() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mass_rr)
  return _internal_mass_rr();
}
inline void MPCControllerConf::_internal_set_mass_rr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  mass_rr_ = value;
}
inline void MPCControllerConf::set_mass_rr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mass_rr(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mass_rr)
}

// optional double eps = 8;
inline bool MPCControllerConf::_internal_has_eps() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_eps() const {
  return _internal_has_eps();
}
inline void MPCControllerConf::clear_eps() {
  eps_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double MPCControllerConf::_internal_eps() const {
  return eps_;
}
inline double MPCControllerConf::eps() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.eps)
  return _internal_eps();
}
inline void MPCControllerConf::_internal_set_eps(double value) {
  _has_bits_[0] |= 0x00001000u;
  eps_ = value;
}
inline void MPCControllerConf::set_eps(double value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.eps)
}

// repeated double matrix_q = 9;
inline int MPCControllerConf::_internal_matrix_q_size() const {
  return matrix_q_.size();
}
inline int MPCControllerConf::matrix_q_size() const {
  return _internal_matrix_q_size();
}
inline void MPCControllerConf::clear_matrix_q() {
  matrix_q_.Clear();
}
inline double MPCControllerConf::_internal_matrix_q(int index) const {
  return matrix_q_.Get(index);
}
inline double MPCControllerConf::matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.matrix_q)
  return _internal_matrix_q(index);
}
inline void MPCControllerConf::set_matrix_q(int index, double value) {
  matrix_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.matrix_q)
}
inline void MPCControllerConf::_internal_add_matrix_q(double value) {
  matrix_q_.Add(value);
}
inline void MPCControllerConf::add_matrix_q(double value) {
  _internal_add_matrix_q(value);
  // @@protoc_insertion_point(field_add:apollo.control.MPCControllerConf.matrix_q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::_internal_matrix_q() const {
  return matrix_q_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::matrix_q() const {
  // @@protoc_insertion_point(field_list:apollo.control.MPCControllerConf.matrix_q)
  return _internal_matrix_q();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::_internal_mutable_matrix_q() {
  return &matrix_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::mutable_matrix_q() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.MPCControllerConf.matrix_q)
  return _internal_mutable_matrix_q();
}

// repeated double matrix_r = 10;
inline int MPCControllerConf::_internal_matrix_r_size() const {
  return matrix_r_.size();
}
inline int MPCControllerConf::matrix_r_size() const {
  return _internal_matrix_r_size();
}
inline void MPCControllerConf::clear_matrix_r() {
  matrix_r_.Clear();
}
inline double MPCControllerConf::_internal_matrix_r(int index) const {
  return matrix_r_.Get(index);
}
inline double MPCControllerConf::matrix_r(int index) const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.matrix_r)
  return _internal_matrix_r(index);
}
inline void MPCControllerConf::set_matrix_r(int index, double value) {
  matrix_r_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.matrix_r)
}
inline void MPCControllerConf::_internal_add_matrix_r(double value) {
  matrix_r_.Add(value);
}
inline void MPCControllerConf::add_matrix_r(double value) {
  _internal_add_matrix_r(value);
  // @@protoc_insertion_point(field_add:apollo.control.MPCControllerConf.matrix_r)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::_internal_matrix_r() const {
  return matrix_r_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::matrix_r() const {
  // @@protoc_insertion_point(field_list:apollo.control.MPCControllerConf.matrix_r)
  return _internal_matrix_r();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::_internal_mutable_matrix_r() {
  return &matrix_r_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::mutable_matrix_r() {
  // @@protoc_insertion_point(field_mutable_list:apollo.control.MPCControllerConf.matrix_r)
  return _internal_mutable_matrix_r();
}

// optional int32 cutoff_freq = 11;
inline bool MPCControllerConf::_internal_has_cutoff_freq() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_cutoff_freq() const {
  return _internal_has_cutoff_freq();
}
inline void MPCControllerConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::_internal_cutoff_freq() const {
  return cutoff_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void MPCControllerConf::_internal_set_cutoff_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  cutoff_freq_ = value;
}
inline void MPCControllerConf::set_cutoff_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cutoff_freq(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.cutoff_freq)
}

// optional int32 mean_filter_window_size = 12;
inline bool MPCControllerConf::_internal_has_mean_filter_window_size() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_mean_filter_window_size() const {
  return _internal_has_mean_filter_window_size();
}
inline void MPCControllerConf::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::_internal_mean_filter_window_size() const {
  return mean_filter_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.mean_filter_window_size)
  return _internal_mean_filter_window_size();
}
inline void MPCControllerConf::_internal_set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  mean_filter_window_size_ = value;
}
inline void MPCControllerConf::set_mean_filter_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mean_filter_window_size(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.mean_filter_window_size)
}

// optional int32 max_iteration = 13;
inline bool MPCControllerConf::_internal_has_max_iteration() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_max_iteration() const {
  return _internal_has_max_iteration();
}
inline void MPCControllerConf::clear_max_iteration() {
  max_iteration_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::_internal_max_iteration() const {
  return max_iteration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPCControllerConf::max_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.max_iteration)
  return _internal_max_iteration();
}
inline void MPCControllerConf::_internal_set_max_iteration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  max_iteration_ = value;
}
inline void MPCControllerConf::set_max_iteration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_iteration(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.max_iteration)
}

// optional double max_lateral_acceleration = 14;
inline bool MPCControllerConf::_internal_has_max_lateral_acceleration() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_max_lateral_acceleration() const {
  return _internal_has_max_lateral_acceleration();
}
inline void MPCControllerConf::clear_max_lateral_acceleration() {
  max_lateral_acceleration_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double MPCControllerConf::_internal_max_lateral_acceleration() const {
  return max_lateral_acceleration_;
}
inline double MPCControllerConf::max_lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.max_lateral_acceleration)
  return _internal_max_lateral_acceleration();
}
inline void MPCControllerConf::_internal_set_max_lateral_acceleration(double value) {
  _has_bits_[0] |= 0x00008000u;
  max_lateral_acceleration_ = value;
}
inline void MPCControllerConf::set_max_lateral_acceleration(double value) {
  _internal_set_max_lateral_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.max_lateral_acceleration)
}

// optional double standstill_acceleration = 15;
inline bool MPCControllerConf::_internal_has_standstill_acceleration() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_standstill_acceleration() const {
  return _internal_has_standstill_acceleration();
}
inline void MPCControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double MPCControllerConf::_internal_standstill_acceleration() const {
  return standstill_acceleration_;
}
inline double MPCControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.standstill_acceleration)
  return _internal_standstill_acceleration();
}
inline void MPCControllerConf::_internal_set_standstill_acceleration(double value) {
  _has_bits_[0] |= 0x00010000u;
  standstill_acceleration_ = value;
}
inline void MPCControllerConf::set_standstill_acceleration(double value) {
  _internal_set_standstill_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.standstill_acceleration)
}

// optional double brake_minimum_action = 16;
inline bool MPCControllerConf::_internal_has_brake_minimum_action() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_brake_minimum_action() const {
  return _internal_has_brake_minimum_action();
}
inline void MPCControllerConf::clear_brake_minimum_action() {
  brake_minimum_action_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double MPCControllerConf::_internal_brake_minimum_action() const {
  return brake_minimum_action_;
}
inline double MPCControllerConf::brake_minimum_action() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.brake_minimum_action)
  return _internal_brake_minimum_action();
}
inline void MPCControllerConf::_internal_set_brake_minimum_action(double value) {
  _has_bits_[0] |= 0x00020000u;
  brake_minimum_action_ = value;
}
inline void MPCControllerConf::set_brake_minimum_action(double value) {
  _internal_set_brake_minimum_action(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.brake_minimum_action)
}

// optional double throttle_minimum_action = 17;
inline bool MPCControllerConf::_internal_has_throttle_minimum_action() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_throttle_minimum_action() const {
  return _internal_has_throttle_minimum_action();
}
inline void MPCControllerConf::clear_throttle_minimum_action() {
  throttle_minimum_action_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double MPCControllerConf::_internal_throttle_minimum_action() const {
  return throttle_minimum_action_;
}
inline double MPCControllerConf::throttle_minimum_action() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.throttle_minimum_action)
  return _internal_throttle_minimum_action();
}
inline void MPCControllerConf::_internal_set_throttle_minimum_action(double value) {
  _has_bits_[0] |= 0x00040000u;
  throttle_minimum_action_ = value;
}
inline void MPCControllerConf::set_throttle_minimum_action(double value) {
  _internal_set_throttle_minimum_action(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.throttle_minimum_action)
}

// optional .apollo.control.GainScheduler lat_err_gain_scheduler = 18;
inline bool MPCControllerConf::_internal_has_lat_err_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lat_err_gain_scheduler_ != nullptr);
  return value;
}
inline bool MPCControllerConf::has_lat_err_gain_scheduler() const {
  return _internal_has_lat_err_gain_scheduler();
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::_internal_lat_err_gain_scheduler() const {
  const ::apollo::control::GainScheduler* p = lat_err_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::control::GainScheduler*>(
      &::apollo::control::_GainScheduler_default_instance_);
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::lat_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  return _internal_lat_err_gain_scheduler();
}
inline ::apollo::control::GainScheduler* MPCControllerConf::release_lat_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::control::GainScheduler* temp = lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::_internal_mutable_lat_err_gain_scheduler() {
  _has_bits_[0] |= 0x00000001u;
  if (lat_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::GainScheduler>(GetArenaNoVirtual());
    lat_err_gain_scheduler_ = p;
  }
  return lat_err_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::mutable_lat_err_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
  return _internal_mutable_lat_err_gain_scheduler();
}
inline void MPCControllerConf::set_allocated_lat_err_gain_scheduler(::apollo::control::GainScheduler* lat_err_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_err_gain_scheduler_);
  }
  if (lat_err_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lat_err_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_err_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lat_err_gain_scheduler_ = lat_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.lat_err_gain_scheduler)
}

// optional .apollo.control.GainScheduler heading_err_gain_scheduler = 19;
inline bool MPCControllerConf::_internal_has_heading_err_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || heading_err_gain_scheduler_ != nullptr);
  return value;
}
inline bool MPCControllerConf::has_heading_err_gain_scheduler() const {
  return _internal_has_heading_err_gain_scheduler();
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::_internal_heading_err_gain_scheduler() const {
  const ::apollo::control::GainScheduler* p = heading_err_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::control::GainScheduler*>(
      &::apollo::control::_GainScheduler_default_instance_);
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::heading_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  return _internal_heading_err_gain_scheduler();
}
inline ::apollo::control::GainScheduler* MPCControllerConf::release_heading_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::control::GainScheduler* temp = heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::_internal_mutable_heading_err_gain_scheduler() {
  _has_bits_[0] |= 0x00000002u;
  if (heading_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::GainScheduler>(GetArenaNoVirtual());
    heading_err_gain_scheduler_ = p;
  }
  return heading_err_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::mutable_heading_err_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
  return _internal_mutable_heading_err_gain_scheduler();
}
inline void MPCControllerConf::set_allocated_heading_err_gain_scheduler(::apollo::control::GainScheduler* heading_err_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_err_gain_scheduler_);
  }
  if (heading_err_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      heading_err_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heading_err_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  heading_err_gain_scheduler_ = heading_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.heading_err_gain_scheduler)
}

// optional .apollo.control.GainScheduler steer_weight_gain_scheduler = 20;
inline bool MPCControllerConf::_internal_has_steer_weight_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || steer_weight_gain_scheduler_ != nullptr);
  return value;
}
inline bool MPCControllerConf::has_steer_weight_gain_scheduler() const {
  return _internal_has_steer_weight_gain_scheduler();
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::_internal_steer_weight_gain_scheduler() const {
  const ::apollo::control::GainScheduler* p = steer_weight_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::control::GainScheduler*>(
      &::apollo::control::_GainScheduler_default_instance_);
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::steer_weight_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  return _internal_steer_weight_gain_scheduler();
}
inline ::apollo::control::GainScheduler* MPCControllerConf::release_steer_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::control::GainScheduler* temp = steer_weight_gain_scheduler_;
  steer_weight_gain_scheduler_ = nullptr;
  return temp;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::_internal_mutable_steer_weight_gain_scheduler() {
  _has_bits_[0] |= 0x00000004u;
  if (steer_weight_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::GainScheduler>(GetArenaNoVirtual());
    steer_weight_gain_scheduler_ = p;
  }
  return steer_weight_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::mutable_steer_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
  return _internal_mutable_steer_weight_gain_scheduler();
}
inline void MPCControllerConf::set_allocated_steer_weight_gain_scheduler(::apollo::control::GainScheduler* steer_weight_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_weight_gain_scheduler_);
  }
  if (steer_weight_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      steer_weight_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_weight_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  steer_weight_gain_scheduler_ = steer_weight_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.steer_weight_gain_scheduler)
}

// optional .apollo.control.GainScheduler feedforwardterm_gain_scheduler = 21;
inline bool MPCControllerConf::_internal_has_feedforwardterm_gain_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || feedforwardterm_gain_scheduler_ != nullptr);
  return value;
}
inline bool MPCControllerConf::has_feedforwardterm_gain_scheduler() const {
  return _internal_has_feedforwardterm_gain_scheduler();
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::_internal_feedforwardterm_gain_scheduler() const {
  const ::apollo::control::GainScheduler* p = feedforwardterm_gain_scheduler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::control::GainScheduler*>(
      &::apollo::control::_GainScheduler_default_instance_);
}
inline const ::apollo::control::GainScheduler& MPCControllerConf::feedforwardterm_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  return _internal_feedforwardterm_gain_scheduler();
}
inline ::apollo::control::GainScheduler* MPCControllerConf::release_feedforwardterm_gain_scheduler() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::control::GainScheduler* temp = feedforwardterm_gain_scheduler_;
  feedforwardterm_gain_scheduler_ = nullptr;
  return temp;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::_internal_mutable_feedforwardterm_gain_scheduler() {
  _has_bits_[0] |= 0x00000008u;
  if (feedforwardterm_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::GainScheduler>(GetArenaNoVirtual());
    feedforwardterm_gain_scheduler_ = p;
  }
  return feedforwardterm_gain_scheduler_;
}
inline ::apollo::control::GainScheduler* MPCControllerConf::mutable_feedforwardterm_gain_scheduler() {
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  return _internal_mutable_feedforwardterm_gain_scheduler();
}
inline void MPCControllerConf::set_allocated_feedforwardterm_gain_scheduler(::apollo::control::GainScheduler* feedforwardterm_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedforwardterm_gain_scheduler_);
  }
  if (feedforwardterm_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      feedforwardterm_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feedforwardterm_gain_scheduler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  feedforwardterm_gain_scheduler_ = feedforwardterm_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.feedforwardterm_gain_scheduler)
}

// optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 22;
inline bool MPCControllerConf::_internal_has_calibration_table() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || calibration_table_ != nullptr);
  return value;
}
inline bool MPCControllerConf::has_calibration_table() const {
  return _internal_has_calibration_table();
}
inline const ::apollo::control::calibrationtable::ControlCalibrationTable& MPCControllerConf::_internal_calibration_table() const {
  const ::apollo::control::calibrationtable::ControlCalibrationTable* p = calibration_table_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::control::calibrationtable::ControlCalibrationTable*>(
      &::apollo::control::calibrationtable::_ControlCalibrationTable_default_instance_);
}
inline const ::apollo::control::calibrationtable::ControlCalibrationTable& MPCControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.calibration_table)
  return _internal_calibration_table();
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::release_calibration_table() {
  // @@protoc_insertion_point(field_release:apollo.control.MPCControllerConf.calibration_table)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = nullptr;
  return temp;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::_internal_mutable_calibration_table() {
  _has_bits_[0] |= 0x00000010u;
  if (calibration_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::control::calibrationtable::ControlCalibrationTable>(GetArenaNoVirtual());
    calibration_table_ = p;
  }
  return calibration_table_;
}
inline ::apollo::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::mutable_calibration_table() {
  // @@protoc_insertion_point(field_mutable:apollo.control.MPCControllerConf.calibration_table)
  return _internal_mutable_calibration_table();
}
inline void MPCControllerConf::set_allocated_calibration_table(::apollo::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_table_);
  }
  if (calibration_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      calibration_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_table, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  calibration_table_ = calibration_table;
  // @@protoc_insertion_point(field_set_allocated:apollo.control.MPCControllerConf.calibration_table)
}

// optional bool enable_mpc_feedforward_compensation = 23 [default = false];
inline bool MPCControllerConf::_internal_has_enable_mpc_feedforward_compensation() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_enable_mpc_feedforward_compensation() const {
  return _internal_has_enable_mpc_feedforward_compensation();
}
inline void MPCControllerConf::clear_enable_mpc_feedforward_compensation() {
  enable_mpc_feedforward_compensation_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool MPCControllerConf::_internal_enable_mpc_feedforward_compensation() const {
  return enable_mpc_feedforward_compensation_;
}
inline bool MPCControllerConf::enable_mpc_feedforward_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.enable_mpc_feedforward_compensation)
  return _internal_enable_mpc_feedforward_compensation();
}
inline void MPCControllerConf::_internal_set_enable_mpc_feedforward_compensation(bool value) {
  _has_bits_[0] |= 0x00100000u;
  enable_mpc_feedforward_compensation_ = value;
}
inline void MPCControllerConf::set_enable_mpc_feedforward_compensation(bool value) {
  _internal_set_enable_mpc_feedforward_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.enable_mpc_feedforward_compensation)
}

// optional double unconstraint_control_diff_limit = 24;
inline bool MPCControllerConf::_internal_has_unconstraint_control_diff_limit() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool MPCControllerConf::has_unconstraint_control_diff_limit() const {
  return _internal_has_unconstraint_control_diff_limit();
}
inline void MPCControllerConf::clear_unconstraint_control_diff_limit() {
  unconstraint_control_diff_limit_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double MPCControllerConf::_internal_unconstraint_control_diff_limit() const {
  return unconstraint_control_diff_limit_;
}
inline double MPCControllerConf::unconstraint_control_diff_limit() const {
  // @@protoc_insertion_point(field_get:apollo.control.MPCControllerConf.unconstraint_control_diff_limit)
  return _internal_unconstraint_control_diff_limit();
}
inline void MPCControllerConf::_internal_set_unconstraint_control_diff_limit(double value) {
  _has_bits_[0] |= 0x00200000u;
  unconstraint_control_diff_limit_ = value;
}
inline void MPCControllerConf::set_unconstraint_control_diff_limit(double value) {
  _internal_set_unconstraint_control_diff_limit(value);
  // @@protoc_insertion_point(field_set:apollo.control.MPCControllerConf.unconstraint_control_diff_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcontrol_2fproto_2fmpc_5fcontroller_5fconf_2eproto
