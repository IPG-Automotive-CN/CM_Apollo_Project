// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/control/proto/lon_controller_conf.proto

#include "modules/control/proto/lon_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fpid_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PidConf_modules_2fcontrol_2fproto_2fpid_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlCalibrationTable_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto;
namespace apollo {
namespace control {
class FilterConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterConf> _instance;
} _FilterConf_default_instance_;
class LonControllerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LonControllerConf> _instance;
} _LonControllerConf_default_instance_;
}  // namespace control
}  // namespace apollo
static void InitDefaultsscc_info_FilterConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_FilterConf_default_instance_;
    new (ptr) ::apollo::control::FilterConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::FilterConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_LonControllerConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::control::_LonControllerConf_default_instance_;
    new (ptr) ::apollo::control::LonControllerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::control::LonControllerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LonControllerConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LonControllerConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto}, {
      &scc_info_PidConf_modules_2fcontrol_2fproto_2fpid_5fconf_2eproto.base,
      &scc_info_FilterConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto.base,
      &scc_info_LeadlagConf_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto.base,
      &scc_info_ControlCalibrationTable_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::control::FilterConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::FilterConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::FilterConf, cutoff_freq_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, brake_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, throttle_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, speed_controller_input_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, station_error_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, preview_window_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, standstill_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, low_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, high_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, switch_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, reverse_station_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, reverse_speed_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, pitch_angle_filter_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, reverse_station_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, reverse_speed_leadlag_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, calibration_table_),
  PROTOBUF_FIELD_OFFSET(::apollo::control::LonControllerConf, enable_reverse_leadlag_compensation_),
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  16,
  3,
  4,
  5,
  6,
  7,
  8,
  17,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::control::FilterConf)},
  { 7, 30, sizeof(::apollo::control::LonControllerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_FilterConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::control::_LonControllerConf_default_instance_),
};

const char descriptor_table_protodef_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/control/proto/lon_controller_c"
  "onf.proto\022\016apollo.control\032-modules/contr"
  "ol/proto/calibration_table.proto\032(module"
  "s/control/proto/leadlag_conf.proto\032$modu"
  "les/control/proto/pid_conf.proto\"!\n\nFilt"
  "erConf\022\023\n\013cutoff_freq\030\001 \001(\005\"\314\006\n\021LonContr"
  "ollerConf\022\n\n\002ts\030\001 \001(\001\022\034\n\024brake_minimum_a"
  "ction\030\002 \001(\001\022\037\n\027throttle_minimum_action\030\003"
  " \001(\001\022$\n\034speed_controller_input_limit\030\004 \001"
  "(\001\022\033\n\023station_error_limit\030\005 \001(\001\022\026\n\016previ"
  "ew_window\030\006 \001(\001\022\037\n\027standstill_accelerati"
  "on\030\007 \001(\001\0221\n\020station_pid_conf\030\010 \001(\0132\027.apo"
  "llo.control.PidConf\0223\n\022low_speed_pid_con"
  "f\030\t \001(\0132\027.apollo.control.PidConf\0224\n\023high"
  "_speed_pid_conf\030\n \001(\0132\027.apollo.control.P"
  "idConf\022\024\n\014switch_speed\030\013 \001(\001\0229\n\030reverse_"
  "station_pid_conf\030\014 \001(\0132\027.apollo.control."
  "PidConf\0227\n\026reverse_speed_pid_conf\030\r \001(\0132"
  "\027.apollo.control.PidConf\022;\n\027pitch_angle_"
  "filter_conf\030\016 \001(\0132\032.apollo.control.Filte"
  "rConf\022A\n\034reverse_station_leadlag_conf\030\017 "
  "\001(\0132\033.apollo.control.LeadlagConf\022\?\n\032reve"
  "rse_speed_leadlag_conf\030\020 \001(\0132\033.apollo.co"
  "ntrol.LeadlagConf\022S\n\021calibration_table\030\021"
  " \001(\01328.apollo.control.calibrationtable.C"
  "ontrolCalibrationTable\0222\n#enable_reverse"
  "_leadlag_compensation\030\022 \001(\010:\005false"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcontrol_2fproto_2fcalibration_5ftable_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fleadlag_5fconf_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fpid_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto_sccs[2] = {
  &scc_info_FilterConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto.base,
  &scc_info_LonControllerConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto_once;
static bool descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto = {
  &descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto_initialized, descriptor_table_protodef_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto, "modules/control/proto/lon_controller_conf.proto", 1074,
  &descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto_once, descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto_sccs, descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto, 2, file_level_enum_descriptors_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto, file_level_service_descriptors_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto), true);
namespace apollo {
namespace control {

// ===================================================================

void FilterConf::InitAsDefaultInstance() {
}
class FilterConf::_Internal {
 public:
  using HasBits = decltype(std::declval<FilterConf>()._has_bits_);
  static void set_has_cutoff_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FilterConf::FilterConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.FilterConf)
}
FilterConf::FilterConf(const FilterConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cutoff_freq_ = from.cutoff_freq_;
  // @@protoc_insertion_point(copy_constructor:apollo.control.FilterConf)
}

void FilterConf::SharedCtor() {
  cutoff_freq_ = 0;
}

FilterConf::~FilterConf() {
  // @@protoc_insertion_point(destructor:apollo.control.FilterConf)
  SharedDtor();
}

void FilterConf::SharedDtor() {
}

void FilterConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterConf& FilterConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void FilterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.FilterConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cutoff_freq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FilterConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cutoff_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cutoff_freq(&has_bits);
          cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.FilterConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cutoff_freq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cutoff_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.FilterConf)
  return target;
}

size_t FilterConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.FilterConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 cutoff_freq = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cutoff_freq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.FilterConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.FilterConf)
    MergeFrom(*source);
  }
}

void FilterConf::MergeFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.FilterConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cutoff_freq()) {
    _internal_set_cutoff_freq(from._internal_cutoff_freq());
  }
}

void FilterConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConf::CopyFrom(const FilterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.FilterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConf::IsInitialized() const {
  return true;
}

void FilterConf::InternalSwap(FilterConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cutoff_freq_, other->cutoff_freq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LonControllerConf::InitAsDefaultInstance() {
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->station_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->low_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->high_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->reverse_station_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->reverse_speed_pid_conf_ = const_cast< ::apollo::control::PidConf*>(
      ::apollo::control::PidConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->pitch_angle_filter_conf_ = const_cast< ::apollo::control::FilterConf*>(
      ::apollo::control::FilterConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->reverse_station_leadlag_conf_ = const_cast< ::apollo::control::LeadlagConf*>(
      ::apollo::control::LeadlagConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->reverse_speed_leadlag_conf_ = const_cast< ::apollo::control::LeadlagConf*>(
      ::apollo::control::LeadlagConf::internal_default_instance());
  ::apollo::control::_LonControllerConf_default_instance_._instance.get_mutable()->calibration_table_ = const_cast< ::apollo::control::calibrationtable::ControlCalibrationTable*>(
      ::apollo::control::calibrationtable::ControlCalibrationTable::internal_default_instance());
}
class LonControllerConf::_Internal {
 public:
  using HasBits = decltype(std::declval<LonControllerConf>()._has_bits_);
  static void set_has_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_brake_minimum_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_throttle_minimum_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_speed_controller_input_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_station_error_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_preview_window(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_standstill_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::control::PidConf& station_pid_conf(const LonControllerConf* msg);
  static void set_has_station_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::control::PidConf& low_speed_pid_conf(const LonControllerConf* msg);
  static void set_has_low_speed_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::control::PidConf& high_speed_pid_conf(const LonControllerConf* msg);
  static void set_has_high_speed_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_switch_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::control::PidConf& reverse_station_pid_conf(const LonControllerConf* msg);
  static void set_has_reverse_station_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::control::PidConf& reverse_speed_pid_conf(const LonControllerConf* msg);
  static void set_has_reverse_speed_pid_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::control::FilterConf& pitch_angle_filter_conf(const LonControllerConf* msg);
  static void set_has_pitch_angle_filter_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::control::LeadlagConf& reverse_station_leadlag_conf(const LonControllerConf* msg);
  static void set_has_reverse_station_leadlag_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::control::LeadlagConf& reverse_speed_leadlag_conf(const LonControllerConf* msg);
  static void set_has_reverse_speed_leadlag_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::control::calibrationtable::ControlCalibrationTable& calibration_table(const LonControllerConf* msg);
  static void set_has_calibration_table(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enable_reverse_leadlag_compensation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::apollo::control::PidConf&
LonControllerConf::_Internal::station_pid_conf(const LonControllerConf* msg) {
  return *msg->station_pid_conf_;
}
const ::apollo::control::PidConf&
LonControllerConf::_Internal::low_speed_pid_conf(const LonControllerConf* msg) {
  return *msg->low_speed_pid_conf_;
}
const ::apollo::control::PidConf&
LonControllerConf::_Internal::high_speed_pid_conf(const LonControllerConf* msg) {
  return *msg->high_speed_pid_conf_;
}
const ::apollo::control::PidConf&
LonControllerConf::_Internal::reverse_station_pid_conf(const LonControllerConf* msg) {
  return *msg->reverse_station_pid_conf_;
}
const ::apollo::control::PidConf&
LonControllerConf::_Internal::reverse_speed_pid_conf(const LonControllerConf* msg) {
  return *msg->reverse_speed_pid_conf_;
}
const ::apollo::control::FilterConf&
LonControllerConf::_Internal::pitch_angle_filter_conf(const LonControllerConf* msg) {
  return *msg->pitch_angle_filter_conf_;
}
const ::apollo::control::LeadlagConf&
LonControllerConf::_Internal::reverse_station_leadlag_conf(const LonControllerConf* msg) {
  return *msg->reverse_station_leadlag_conf_;
}
const ::apollo::control::LeadlagConf&
LonControllerConf::_Internal::reverse_speed_leadlag_conf(const LonControllerConf* msg) {
  return *msg->reverse_speed_leadlag_conf_;
}
const ::apollo::control::calibrationtable::ControlCalibrationTable&
LonControllerConf::_Internal::calibration_table(const LonControllerConf* msg) {
  return *msg->calibration_table_;
}
void LonControllerConf::clear_station_pid_conf() {
  if (station_pid_conf_ != nullptr) station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LonControllerConf::clear_low_speed_pid_conf() {
  if (low_speed_pid_conf_ != nullptr) low_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LonControllerConf::clear_high_speed_pid_conf() {
  if (high_speed_pid_conf_ != nullptr) high_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void LonControllerConf::clear_reverse_station_pid_conf() {
  if (reverse_station_pid_conf_ != nullptr) reverse_station_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void LonControllerConf::clear_reverse_speed_pid_conf() {
  if (reverse_speed_pid_conf_ != nullptr) reverse_speed_pid_conf_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void LonControllerConf::clear_reverse_station_leadlag_conf() {
  if (reverse_station_leadlag_conf_ != nullptr) reverse_station_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void LonControllerConf::clear_reverse_speed_leadlag_conf() {
  if (reverse_speed_leadlag_conf_ != nullptr) reverse_speed_leadlag_conf_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void LonControllerConf::clear_calibration_table() {
  if (calibration_table_ != nullptr) calibration_table_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
LonControllerConf::LonControllerConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.control.LonControllerConf)
}
LonControllerConf::LonControllerConf(const LonControllerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_station_pid_conf()) {
    station_pid_conf_ = new ::apollo::control::PidConf(*from.station_pid_conf_);
  } else {
    station_pid_conf_ = nullptr;
  }
  if (from._internal_has_low_speed_pid_conf()) {
    low_speed_pid_conf_ = new ::apollo::control::PidConf(*from.low_speed_pid_conf_);
  } else {
    low_speed_pid_conf_ = nullptr;
  }
  if (from._internal_has_high_speed_pid_conf()) {
    high_speed_pid_conf_ = new ::apollo::control::PidConf(*from.high_speed_pid_conf_);
  } else {
    high_speed_pid_conf_ = nullptr;
  }
  if (from._internal_has_reverse_station_pid_conf()) {
    reverse_station_pid_conf_ = new ::apollo::control::PidConf(*from.reverse_station_pid_conf_);
  } else {
    reverse_station_pid_conf_ = nullptr;
  }
  if (from._internal_has_reverse_speed_pid_conf()) {
    reverse_speed_pid_conf_ = new ::apollo::control::PidConf(*from.reverse_speed_pid_conf_);
  } else {
    reverse_speed_pid_conf_ = nullptr;
  }
  if (from._internal_has_pitch_angle_filter_conf()) {
    pitch_angle_filter_conf_ = new ::apollo::control::FilterConf(*from.pitch_angle_filter_conf_);
  } else {
    pitch_angle_filter_conf_ = nullptr;
  }
  if (from._internal_has_reverse_station_leadlag_conf()) {
    reverse_station_leadlag_conf_ = new ::apollo::control::LeadlagConf(*from.reverse_station_leadlag_conf_);
  } else {
    reverse_station_leadlag_conf_ = nullptr;
  }
  if (from._internal_has_reverse_speed_leadlag_conf()) {
    reverse_speed_leadlag_conf_ = new ::apollo::control::LeadlagConf(*from.reverse_speed_leadlag_conf_);
  } else {
    reverse_speed_leadlag_conf_ = nullptr;
  }
  if (from._internal_has_calibration_table()) {
    calibration_table_ = new ::apollo::control::calibrationtable::ControlCalibrationTable(*from.calibration_table_);
  } else {
    calibration_table_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_reverse_leadlag_compensation_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(enable_reverse_leadlag_compensation_));
  // @@protoc_insertion_point(copy_constructor:apollo.control.LonControllerConf)
}

void LonControllerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LonControllerConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto.base);
  ::memset(&station_pid_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_reverse_leadlag_compensation_) -
      reinterpret_cast<char*>(&station_pid_conf_)) + sizeof(enable_reverse_leadlag_compensation_));
}

LonControllerConf::~LonControllerConf() {
  // @@protoc_insertion_point(destructor:apollo.control.LonControllerConf)
  SharedDtor();
}

void LonControllerConf::SharedDtor() {
  if (this != internal_default_instance()) delete station_pid_conf_;
  if (this != internal_default_instance()) delete low_speed_pid_conf_;
  if (this != internal_default_instance()) delete high_speed_pid_conf_;
  if (this != internal_default_instance()) delete reverse_station_pid_conf_;
  if (this != internal_default_instance()) delete reverse_speed_pid_conf_;
  if (this != internal_default_instance()) delete pitch_angle_filter_conf_;
  if (this != internal_default_instance()) delete reverse_station_leadlag_conf_;
  if (this != internal_default_instance()) delete reverse_speed_leadlag_conf_;
  if (this != internal_default_instance()) delete calibration_table_;
}

void LonControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LonControllerConf& LonControllerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LonControllerConf_modules_2fcontrol_2fproto_2flon_5fcontroller_5fconf_2eproto.base);
  return *internal_default_instance();
}


void LonControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.control.LonControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(station_pid_conf_ != nullptr);
      station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(low_speed_pid_conf_ != nullptr);
      low_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(high_speed_pid_conf_ != nullptr);
      high_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reverse_station_pid_conf_ != nullptr);
      reverse_station_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reverse_speed_pid_conf_ != nullptr);
      reverse_speed_pid_conf_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(pitch_angle_filter_conf_ != nullptr);
      pitch_angle_filter_conf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(reverse_station_leadlag_conf_ != nullptr);
      reverse_station_leadlag_conf_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(reverse_speed_leadlag_conf_ != nullptr);
      reverse_speed_leadlag_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(calibration_table_ != nullptr);
    calibration_table_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&standstill_acceleration_) -
        reinterpret_cast<char*>(&ts_)) + sizeof(standstill_acceleration_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&switch_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_reverse_leadlag_compensation_) -
        reinterpret_cast<char*>(&switch_speed_)) + sizeof(enable_reverse_leadlag_compensation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LonControllerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ts(&has_bits);
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double brake_minimum_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_brake_minimum_action(&has_bits);
          brake_minimum_action_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double throttle_minimum_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_throttle_minimum_action(&has_bits);
          throttle_minimum_action_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed_controller_input_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_speed_controller_input_limit(&has_bits);
          speed_controller_input_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double station_error_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_station_error_limit(&has_bits);
          station_error_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double preview_window = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_preview_window(&has_bits);
          preview_window_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double standstill_acceleration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_standstill_acceleration(&has_bits);
          standstill_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.PidConf station_pid_conf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_station_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.PidConf low_speed_pid_conf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_speed_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.PidConf high_speed_pid_conf = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_speed_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double switch_speed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_switch_speed(&has_bits);
          switch_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.PidConf reverse_station_pid_conf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_station_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.PidConf reverse_speed_pid_conf = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_speed_pid_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.FilterConf pitch_angle_filter_conf = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_pitch_angle_filter_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.LeadlagConf reverse_station_leadlag_conf = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_station_leadlag_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.LeadlagConf reverse_speed_leadlag_conf = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_reverse_speed_leadlag_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_calibration_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_enable_reverse_leadlag_compensation(&has_bits);
          enable_reverse_leadlag_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LonControllerConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.control.LonControllerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ts = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ts(), target);
  }

  // optional double brake_minimum_action = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_brake_minimum_action(), target);
  }

  // optional double throttle_minimum_action = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_throttle_minimum_action(), target);
  }

  // optional double speed_controller_input_limit = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_speed_controller_input_limit(), target);
  }

  // optional double station_error_limit = 5;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_station_error_limit(), target);
  }

  // optional double preview_window = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_preview_window(), target);
  }

  // optional double standstill_acceleration = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_standstill_acceleration(), target);
  }

  // optional .apollo.control.PidConf station_pid_conf = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::station_pid_conf(this), target, stream);
  }

  // optional .apollo.control.PidConf low_speed_pid_conf = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::low_speed_pid_conf(this), target, stream);
  }

  // optional .apollo.control.PidConf high_speed_pid_conf = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::high_speed_pid_conf(this), target, stream);
  }

  // optional double switch_speed = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_switch_speed(), target);
  }

  // optional .apollo.control.PidConf reverse_station_pid_conf = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::reverse_station_pid_conf(this), target, stream);
  }

  // optional .apollo.control.PidConf reverse_speed_pid_conf = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::reverse_speed_pid_conf(this), target, stream);
  }

  // optional .apollo.control.FilterConf pitch_angle_filter_conf = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::pitch_angle_filter_conf(this), target, stream);
  }

  // optional .apollo.control.LeadlagConf reverse_station_leadlag_conf = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::reverse_station_leadlag_conf(this), target, stream);
  }

  // optional .apollo.control.LeadlagConf reverse_speed_leadlag_conf = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::reverse_speed_leadlag_conf(this), target, stream);
  }

  // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 17;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::calibration_table(this), target, stream);
  }

  // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_enable_reverse_leadlag_compensation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.control.LonControllerConf)
  return target;
}

size_t LonControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.control.LonControllerConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.control.PidConf station_pid_conf = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *station_pid_conf_);
    }

    // optional .apollo.control.PidConf low_speed_pid_conf = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_speed_pid_conf_);
    }

    // optional .apollo.control.PidConf high_speed_pid_conf = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *high_speed_pid_conf_);
    }

    // optional .apollo.control.PidConf reverse_station_pid_conf = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_station_pid_conf_);
    }

    // optional .apollo.control.PidConf reverse_speed_pid_conf = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_speed_pid_conf_);
    }

    // optional .apollo.control.FilterConf pitch_angle_filter_conf = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pitch_angle_filter_conf_);
    }

    // optional .apollo.control.LeadlagConf reverse_station_leadlag_conf = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_station_leadlag_conf_);
    }

    // optional .apollo.control.LeadlagConf reverse_speed_leadlag_conf = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reverse_speed_leadlag_conf_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.control.calibrationtable.ControlCalibrationTable calibration_table = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calibration_table_);
    }

    // optional double ts = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double brake_minimum_action = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double throttle_minimum_action = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double speed_controller_input_limit = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double station_error_limit = 5;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double preview_window = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double standstill_acceleration = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional double switch_speed = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional bool enable_reverse_leadlag_compensation = 18 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LonControllerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.control.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const LonControllerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LonControllerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.control.LonControllerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.control.LonControllerConf)
    MergeFrom(*source);
  }
}

void LonControllerConf::MergeFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.control.LonControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_station_pid_conf()->::apollo::control::PidConf::MergeFrom(from._internal_station_pid_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_low_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from._internal_low_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_high_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from._internal_high_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reverse_station_pid_conf()->::apollo::control::PidConf::MergeFrom(from._internal_reverse_station_pid_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_reverse_speed_pid_conf()->::apollo::control::PidConf::MergeFrom(from._internal_reverse_speed_pid_conf());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_pitch_angle_filter_conf()->::apollo::control::FilterConf::MergeFrom(from._internal_pitch_angle_filter_conf());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_reverse_station_leadlag_conf()->::apollo::control::LeadlagConf::MergeFrom(from._internal_reverse_station_leadlag_conf());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_reverse_speed_leadlag_conf()->::apollo::control::LeadlagConf::MergeFrom(from._internal_reverse_speed_leadlag_conf());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_calibration_table()->::apollo::control::calibrationtable::ControlCalibrationTable::MergeFrom(from._internal_calibration_table());
    }
    if (cached_has_bits & 0x00000200u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00000400u) {
      brake_minimum_action_ = from.brake_minimum_action_;
    }
    if (cached_has_bits & 0x00000800u) {
      throttle_minimum_action_ = from.throttle_minimum_action_;
    }
    if (cached_has_bits & 0x00001000u) {
      speed_controller_input_limit_ = from.speed_controller_input_limit_;
    }
    if (cached_has_bits & 0x00002000u) {
      station_error_limit_ = from.station_error_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      preview_window_ = from.preview_window_;
    }
    if (cached_has_bits & 0x00008000u) {
      standstill_acceleration_ = from.standstill_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      switch_speed_ = from.switch_speed_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_reverse_leadlag_compensation_ = from.enable_reverse_leadlag_compensation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LonControllerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LonControllerConf::CopyFrom(const LonControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.control.LonControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonControllerConf::IsInitialized() const {
  return true;
}

void LonControllerConf::InternalSwap(LonControllerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(station_pid_conf_, other->station_pid_conf_);
  swap(low_speed_pid_conf_, other->low_speed_pid_conf_);
  swap(high_speed_pid_conf_, other->high_speed_pid_conf_);
  swap(reverse_station_pid_conf_, other->reverse_station_pid_conf_);
  swap(reverse_speed_pid_conf_, other->reverse_speed_pid_conf_);
  swap(pitch_angle_filter_conf_, other->pitch_angle_filter_conf_);
  swap(reverse_station_leadlag_conf_, other->reverse_station_leadlag_conf_);
  swap(reverse_speed_leadlag_conf_, other->reverse_speed_leadlag_conf_);
  swap(calibration_table_, other->calibration_table_);
  swap(ts_, other->ts_);
  swap(brake_minimum_action_, other->brake_minimum_action_);
  swap(throttle_minimum_action_, other->throttle_minimum_action_);
  swap(speed_controller_input_limit_, other->speed_controller_input_limit_);
  swap(station_error_limit_, other->station_error_limit_);
  swap(preview_window_, other->preview_window_);
  swap(standstill_acceleration_, other->standstill_acceleration_);
  swap(switch_speed_, other->switch_speed_);
  swap(enable_reverse_leadlag_compensation_, other->enable_reverse_leadlag_compensation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LonControllerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::control::FilterConf* Arena::CreateMaybeMessage< ::apollo::control::FilterConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::FilterConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::control::LonControllerConf* Arena::CreateMaybeMessage< ::apollo::control::LonControllerConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::control::LonControllerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
