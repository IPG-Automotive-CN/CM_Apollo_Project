// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/video/proto/video_h265cfg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto;
namespace apollo {
namespace drivers {
namespace video {
namespace config {
class CameraH265Config;
class CameraH265ConfigDefaultTypeInternal;
extern CameraH265ConfigDefaultTypeInternal _CameraH265Config_default_instance_;
class CameraH265Config_CompressConfig;
class CameraH265Config_CompressConfigDefaultTypeInternal;
extern CameraH265Config_CompressConfigDefaultTypeInternal _CameraH265Config_CompressConfig_default_instance_;
}  // namespace config
}  // namespace video
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::video::config::CameraH265Config* Arena::CreateMaybeMessage<::apollo::drivers::video::config::CameraH265Config>(Arena*);
template<> ::apollo::drivers::video::config::CameraH265Config_CompressConfig* Arena::CreateMaybeMessage<::apollo::drivers::video::config::CameraH265Config_CompressConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace video {
namespace config {

// ===================================================================

class CameraH265Config_CompressConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.video.config.CameraH265Config.CompressConfig) */ {
 public:
  CameraH265Config_CompressConfig();
  virtual ~CameraH265Config_CompressConfig();

  CameraH265Config_CompressConfig(const CameraH265Config_CompressConfig& from);
  CameraH265Config_CompressConfig(CameraH265Config_CompressConfig&& from) noexcept
    : CameraH265Config_CompressConfig() {
    *this = ::std::move(from);
  }

  inline CameraH265Config_CompressConfig& operator=(const CameraH265Config_CompressConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraH265Config_CompressConfig& operator=(CameraH265Config_CompressConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraH265Config_CompressConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraH265Config_CompressConfig* internal_default_instance() {
    return reinterpret_cast<const CameraH265Config_CompressConfig*>(
               &_CameraH265Config_CompressConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraH265Config_CompressConfig& a, CameraH265Config_CompressConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraH265Config_CompressConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraH265Config_CompressConfig* New() const final {
    return CreateMaybeMessage<CameraH265Config_CompressConfig>(nullptr);
  }

  CameraH265Config_CompressConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraH265Config_CompressConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraH265Config_CompressConfig& from);
  void MergeFrom(const CameraH265Config_CompressConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraH265Config_CompressConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.video.config.CameraH265Config.CompressConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputChannelFieldNumber = 1,
    kImagePoolSizeFieldNumber = 2,
  };
  // optional string output_channel = 1;
  bool has_output_channel() const;
  private:
  bool _internal_has_output_channel() const;
  public:
  void clear_output_channel();
  const std::string& output_channel() const;
  void set_output_channel(const std::string& value);
  void set_output_channel(std::string&& value);
  void set_output_channel(const char* value);
  void set_output_channel(const char* value, size_t size);
  std::string* mutable_output_channel();
  std::string* release_output_channel();
  void set_allocated_output_channel(std::string* output_channel);
  private:
  const std::string& _internal_output_channel() const;
  void _internal_set_output_channel(const std::string& value);
  std::string* _internal_mutable_output_channel();
  public:

  // optional uint32 image_pool_size = 2 [default = 20];
  bool has_image_pool_size() const;
  private:
  bool _internal_has_image_pool_size() const;
  public:
  void clear_image_pool_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_pool_size() const;
  void set_image_pool_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_image_pool_size() const;
  void _internal_set_image_pool_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.video.config.CameraH265Config.CompressConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_pool_size_;
  friend struct ::TableStruct_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto;
};
// -------------------------------------------------------------------

class CameraH265Config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.video.config.CameraH265Config) */ {
 public:
  CameraH265Config();
  virtual ~CameraH265Config();

  CameraH265Config(const CameraH265Config& from);
  CameraH265Config(CameraH265Config&& from) noexcept
    : CameraH265Config() {
    *this = ::std::move(from);
  }

  inline CameraH265Config& operator=(const CameraH265Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraH265Config& operator=(CameraH265Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraH265Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraH265Config* internal_default_instance() {
    return reinterpret_cast<const CameraH265Config*>(
               &_CameraH265Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CameraH265Config& a, CameraH265Config& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraH265Config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraH265Config* New() const final {
    return CreateMaybeMessage<CameraH265Config>(nullptr);
  }

  CameraH265Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraH265Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraH265Config& from);
  void MergeFrom(const CameraH265Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraH265Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.video.config.CameraH265Config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CameraH265Config_CompressConfig CompressConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 2,
    kPixelFormatFieldNumber = 3,
    kTriggerParamFieldNumber = 21,
    kCompressConfFieldNumber = 25,
    kUdpPortFieldNumber = 1,
    kRecordFieldNumber = 4,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
    kFrameRateFieldNumber = 7,
    kMonochromeFieldNumber = 8,
    kAutoFocusFieldNumber = 14,
    kCameraSeqNumberFieldNumber = 24,
    kBrightnessFieldNumber = 9,
    kContrastFieldNumber = 10,
    kSaturationFieldNumber = 11,
    kSharpnessFieldNumber = 12,
    kGainFieldNumber = 13,
    kFocusFieldNumber = 15,
    kExposureFieldNumber = 17,
    kAutoExposureFieldNumber = 16,
    kAutoWhiteBalanceFieldNumber = 18,
    kWhiteBalanceFieldNumber = 19,
    kBytesPerPixelFieldNumber = 20,
    kMetricErrorCodeFieldNumber = 22,
    kFpgaDevNumberFieldNumber = 23,
  };
  // required string frame_id = 2;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // required string pixel_format = 3 [default = "yuyv"];
  bool has_pixel_format() const;
  private:
  bool _internal_has_pixel_format() const;
  public:
  void clear_pixel_format();
  const std::string& pixel_format() const;
  void set_pixel_format(const std::string& value);
  void set_pixel_format(std::string&& value);
  void set_pixel_format(const char* value);
  void set_pixel_format(const char* value, size_t size);
  std::string* mutable_pixel_format();
  std::string* release_pixel_format();
  void set_allocated_pixel_format(std::string* pixel_format);
  private:
  const std::string& _internal_pixel_format() const;
  void _internal_set_pixel_format(const std::string& value);
  std::string* _internal_mutable_pixel_format();
  public:

  // required string trigger_param = 21 [default = "f2ff"];
  bool has_trigger_param() const;
  private:
  bool _internal_has_trigger_param() const;
  public:
  void clear_trigger_param();
  const std::string& trigger_param() const;
  void set_trigger_param(const std::string& value);
  void set_trigger_param(std::string&& value);
  void set_trigger_param(const char* value);
  void set_trigger_param(const char* value, size_t size);
  std::string* mutable_trigger_param();
  std::string* release_trigger_param();
  void set_allocated_trigger_param(std::string* trigger_param);
  private:
  const std::string& _internal_trigger_param() const;
  void _internal_set_trigger_param(const std::string& value);
  std::string* _internal_mutable_trigger_param();
  public:

  // optional .apollo.drivers.video.config.CameraH265Config.CompressConfig compress_conf = 25;
  bool has_compress_conf() const;
  private:
  bool _internal_has_compress_conf() const;
  public:
  void clear_compress_conf();
  const ::apollo::drivers::video::config::CameraH265Config_CompressConfig& compress_conf() const;
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* release_compress_conf();
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* mutable_compress_conf();
  void set_allocated_compress_conf(::apollo::drivers::video::config::CameraH265Config_CompressConfig* compress_conf);
  private:
  const ::apollo::drivers::video::config::CameraH265Config_CompressConfig& _internal_compress_conf() const;
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* _internal_mutable_compress_conf();
  public:

  // required uint32 udp_port = 1;
  bool has_udp_port() const;
  private:
  bool _internal_has_udp_port() const;
  public:
  void clear_udp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 udp_port() const;
  void set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udp_port() const;
  void _internal_set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 record = 4;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  ::PROTOBUF_NAMESPACE_ID::uint32 record() const;
  void set_record(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_record() const;
  void _internal_set_record(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 width = 5;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 height = 6;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 frame_rate = 7;
  bool has_frame_rate() const;
  private:
  bool _internal_has_frame_rate() const;
  public:
  void clear_frame_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_rate() const;
  void set_frame_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_rate() const;
  void _internal_set_frame_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool monochrome = 8 [default = false];
  bool has_monochrome() const;
  private:
  bool _internal_has_monochrome() const;
  public:
  void clear_monochrome();
  bool monochrome() const;
  void set_monochrome(bool value);
  private:
  bool _internal_monochrome() const;
  void _internal_set_monochrome(bool value);
  public:

  // required bool auto_focus = 14 [default = false];
  bool has_auto_focus() const;
  private:
  bool _internal_has_auto_focus() const;
  public:
  void clear_auto_focus();
  bool auto_focus() const;
  void set_auto_focus(bool value);
  private:
  bool _internal_auto_focus() const;
  void _internal_set_auto_focus(bool value);
  public:

  // required int32 camera_seq_number = 24 [default = -1];
  bool has_camera_seq_number() const;
  private:
  bool _internal_has_camera_seq_number() const;
  public:
  void clear_camera_seq_number();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_seq_number() const;
  void set_camera_seq_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_seq_number() const;
  void _internal_set_camera_seq_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 brightness = 9 [default = -1];
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::int32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 contrast = 10 [default = -1];
  bool has_contrast() const;
  private:
  bool _internal_has_contrast() const;
  public:
  void clear_contrast();
  ::PROTOBUF_NAMESPACE_ID::int32 contrast() const;
  void set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contrast() const;
  void _internal_set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 saturation = 11 [default = -1];
  bool has_saturation() const;
  private:
  bool _internal_has_saturation() const;
  public:
  void clear_saturation();
  ::PROTOBUF_NAMESPACE_ID::int32 saturation() const;
  void set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_saturation() const;
  void _internal_set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 sharpness = 12 [default = -1];
  bool has_sharpness() const;
  private:
  bool _internal_has_sharpness() const;
  public:
  void clear_sharpness();
  ::PROTOBUF_NAMESPACE_ID::int32 sharpness() const;
  void set_sharpness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sharpness() const;
  void _internal_set_sharpness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 gain = 13 [default = -1];
  bool has_gain() const;
  private:
  bool _internal_has_gain() const;
  public:
  void clear_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 gain() const;
  void set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gain() const;
  void _internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 focus = 15 [default = -1];
  bool has_focus() const;
  private:
  bool _internal_has_focus() const;
  public:
  void clear_focus();
  ::PROTOBUF_NAMESPACE_ID::int32 focus() const;
  void set_focus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_focus() const;
  void _internal_set_focus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 exposure = 17 [default = 100];
  bool has_exposure() const;
  private:
  bool _internal_has_exposure() const;
  public:
  void clear_exposure();
  ::PROTOBUF_NAMESPACE_ID::int32 exposure() const;
  void set_exposure(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exposure() const;
  void _internal_set_exposure(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool auto_exposure = 16 [default = true];
  bool has_auto_exposure() const;
  private:
  bool _internal_has_auto_exposure() const;
  public:
  void clear_auto_exposure();
  bool auto_exposure() const;
  void set_auto_exposure(bool value);
  private:
  bool _internal_auto_exposure() const;
  void _internal_set_auto_exposure(bool value);
  public:

  // required bool auto_white_balance = 18 [default = true];
  bool has_auto_white_balance() const;
  private:
  bool _internal_has_auto_white_balance() const;
  public:
  void clear_auto_white_balance();
  bool auto_white_balance() const;
  void set_auto_white_balance(bool value);
  private:
  bool _internal_auto_white_balance() const;
  void _internal_set_auto_white_balance(bool value);
  public:

  // required int32 white_balance = 19 [default = 4000];
  bool has_white_balance() const;
  private:
  bool _internal_has_white_balance() const;
  public:
  void clear_white_balance();
  ::PROTOBUF_NAMESPACE_ID::int32 white_balance() const;
  void set_white_balance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_white_balance() const;
  void _internal_set_white_balance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 bytes_per_pixel = 20 [default = 3];
  bool has_bytes_per_pixel() const;
  private:
  bool _internal_has_bytes_per_pixel() const;
  public:
  void clear_bytes_per_pixel();
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_per_pixel() const;
  void set_bytes_per_pixel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bytes_per_pixel() const;
  void _internal_set_bytes_per_pixel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 metric_error_code = 22 [default = 11];
  bool has_metric_error_code() const;
  private:
  bool _internal_has_metric_error_code() const;
  public:
  void clear_metric_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 metric_error_code() const;
  void set_metric_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_metric_error_code() const;
  void _internal_set_metric_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 fpga_dev_number = 23 [default = -1];
  bool has_fpga_dev_number() const;
  private:
  bool _internal_has_fpga_dev_number() const;
  public:
  void clear_fpga_dev_number();
  ::PROTOBUF_NAMESPACE_ID::int32 fpga_dev_number() const;
  void set_fpga_dev_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fpga_dev_number() const;
  void _internal_set_fpga_dev_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.video.config.CameraH265Config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_pixel_format_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pixel_format_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_trigger_param_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_param_;
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* compress_conf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udp_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 record_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_rate_;
  bool monochrome_;
  bool auto_focus_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_seq_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 brightness_;
  ::PROTOBUF_NAMESPACE_ID::int32 contrast_;
  ::PROTOBUF_NAMESPACE_ID::int32 saturation_;
  ::PROTOBUF_NAMESPACE_ID::int32 sharpness_;
  ::PROTOBUF_NAMESPACE_ID::int32 gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 focus_;
  ::PROTOBUF_NAMESPACE_ID::int32 exposure_;
  bool auto_exposure_;
  bool auto_white_balance_;
  ::PROTOBUF_NAMESPACE_ID::int32 white_balance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bytes_per_pixel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 metric_error_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 fpga_dev_number_;
  friend struct ::TableStruct_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraH265Config_CompressConfig

// optional string output_channel = 1;
inline bool CameraH265Config_CompressConfig::_internal_has_output_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraH265Config_CompressConfig::has_output_channel() const {
  return _internal_has_output_channel();
}
inline void CameraH265Config_CompressConfig::clear_output_channel() {
  output_channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraH265Config_CompressConfig::output_channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
  return _internal_output_channel();
}
inline void CameraH265Config_CompressConfig::set_output_channel(const std::string& value) {
  _internal_set_output_channel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
}
inline std::string* CameraH265Config_CompressConfig::mutable_output_channel() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
  return _internal_mutable_output_channel();
}
inline const std::string& CameraH265Config_CompressConfig::_internal_output_channel() const {
  return output_channel_.GetNoArena();
}
inline void CameraH265Config_CompressConfig::_internal_set_output_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  output_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraH265Config_CompressConfig::set_output_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  output_channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
}
inline void CameraH265Config_CompressConfig::set_output_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  output_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
}
inline void CameraH265Config_CompressConfig::set_output_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  output_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
}
inline std::string* CameraH265Config_CompressConfig::_internal_mutable_output_channel() {
  _has_bits_[0] |= 0x00000001u;
  return output_channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraH265Config_CompressConfig::release_output_channel() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
  if (!_internal_has_output_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return output_channel_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraH265Config_CompressConfig::set_allocated_output_channel(std::string* output_channel) {
  if (output_channel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_channel);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.CompressConfig.output_channel)
}

// optional uint32 image_pool_size = 2 [default = 20];
inline bool CameraH265Config_CompressConfig::_internal_has_image_pool_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraH265Config_CompressConfig::has_image_pool_size() const {
  return _internal_has_image_pool_size();
}
inline void CameraH265Config_CompressConfig::clear_image_pool_size() {
  image_pool_size_ = 20u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config_CompressConfig::_internal_image_pool_size() const {
  return image_pool_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config_CompressConfig::image_pool_size() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.CompressConfig.image_pool_size)
  return _internal_image_pool_size();
}
inline void CameraH265Config_CompressConfig::_internal_set_image_pool_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  image_pool_size_ = value;
}
inline void CameraH265Config_CompressConfig::set_image_pool_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_image_pool_size(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.CompressConfig.image_pool_size)
}

// -------------------------------------------------------------------

// CameraH265Config

// required uint32 udp_port = 1;
inline bool CameraH265Config::_internal_has_udp_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CameraH265Config::has_udp_port() const {
  return _internal_has_udp_port();
}
inline void CameraH265Config::clear_udp_port() {
  udp_port_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::_internal_udp_port() const {
  return udp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::udp_port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.udp_port)
  return _internal_udp_port();
}
inline void CameraH265Config::_internal_set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  udp_port_ = value;
}
inline void CameraH265Config::set_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udp_port(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.udp_port)
}

// required string frame_id = 2;
inline bool CameraH265Config::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraH265Config::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void CameraH265Config::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraH265Config::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.frame_id)
  return _internal_frame_id();
}
inline void CameraH265Config::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.frame_id)
}
inline std::string* CameraH265Config::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& CameraH265Config::_internal_frame_id() const {
  return frame_id_.GetNoArena();
}
inline void CameraH265Config::_internal_set_frame_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CameraH265Config::set_frame_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.video.config.CameraH265Config.frame_id)
}
inline void CameraH265Config::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.video.config.CameraH265Config.frame_id)
}
inline void CameraH265Config::set_frame_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.video.config.CameraH265Config.frame_id)
}
inline std::string* CameraH265Config::_internal_mutable_frame_id() {
  _has_bits_[0] |= 0x00000001u;
  return frame_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraH265Config::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.frame_id)
  if (!_internal_has_frame_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return frame_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraH265Config::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.frame_id)
}

// required string pixel_format = 3 [default = "yuyv"];
inline bool CameraH265Config::_internal_has_pixel_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraH265Config::has_pixel_format() const {
  return _internal_has_pixel_format();
}
inline void CameraH265Config::clear_pixel_format() {
  pixel_format_.ClearToDefaultNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_pixel_format_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraH265Config::pixel_format() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.pixel_format)
  return _internal_pixel_format();
}
inline void CameraH265Config::set_pixel_format(const std::string& value) {
  _internal_set_pixel_format(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.pixel_format)
}
inline std::string* CameraH265Config::mutable_pixel_format() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.pixel_format)
  return _internal_mutable_pixel_format();
}
inline const std::string& CameraH265Config::_internal_pixel_format() const {
  return pixel_format_.GetNoArena();
}
inline void CameraH265Config::_internal_set_pixel_format(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pixel_format_.SetNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_pixel_format_.get(), value);
}
inline void CameraH265Config::set_pixel_format(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pixel_format_.SetNoArena(
    &::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_pixel_format_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.video.config.CameraH265Config.pixel_format)
}
inline void CameraH265Config::set_pixel_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pixel_format_.SetNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_pixel_format_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.video.config.CameraH265Config.pixel_format)
}
inline void CameraH265Config::set_pixel_format(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pixel_format_.SetNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_pixel_format_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.video.config.CameraH265Config.pixel_format)
}
inline std::string* CameraH265Config::_internal_mutable_pixel_format() {
  _has_bits_[0] |= 0x00000002u;
  return pixel_format_.MutableNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_pixel_format_.get());
}
inline std::string* CameraH265Config::release_pixel_format() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.pixel_format)
  if (!_internal_has_pixel_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pixel_format_.ReleaseNonDefaultNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_pixel_format_.get());
}
inline void CameraH265Config::set_allocated_pixel_format(std::string* pixel_format) {
  if (pixel_format != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pixel_format_.SetAllocatedNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_pixel_format_.get(), pixel_format);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.pixel_format)
}

// required uint32 record = 4;
inline bool CameraH265Config::_internal_has_record() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CameraH265Config::has_record() const {
  return _internal_has_record();
}
inline void CameraH265Config::clear_record() {
  record_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::_internal_record() const {
  return record_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::record() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.record)
  return _internal_record();
}
inline void CameraH265Config::_internal_set_record(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  record_ = value;
}
inline void CameraH265Config::set_record(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.record)
}

// required uint32 width = 5;
inline bool CameraH265Config::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CameraH265Config::has_width() const {
  return _internal_has_width();
}
inline void CameraH265Config::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.width)
  return _internal_width();
}
inline void CameraH265Config::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  width_ = value;
}
inline void CameraH265Config::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.width)
}

// required uint32 height = 6;
inline bool CameraH265Config::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CameraH265Config::has_height() const {
  return _internal_has_height();
}
inline void CameraH265Config::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.height)
  return _internal_height();
}
inline void CameraH265Config::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  height_ = value;
}
inline void CameraH265Config::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.height)
}

// required uint32 frame_rate = 7;
inline bool CameraH265Config::_internal_has_frame_rate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CameraH265Config::has_frame_rate() const {
  return _internal_has_frame_rate();
}
inline void CameraH265Config::clear_frame_rate() {
  frame_rate_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::_internal_frame_rate() const {
  return frame_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::frame_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.frame_rate)
  return _internal_frame_rate();
}
inline void CameraH265Config::_internal_set_frame_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  frame_rate_ = value;
}
inline void CameraH265Config::set_frame_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.frame_rate)
}

// required bool monochrome = 8 [default = false];
inline bool CameraH265Config::_internal_has_monochrome() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CameraH265Config::has_monochrome() const {
  return _internal_has_monochrome();
}
inline void CameraH265Config::clear_monochrome() {
  monochrome_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CameraH265Config::_internal_monochrome() const {
  return monochrome_;
}
inline bool CameraH265Config::monochrome() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.monochrome)
  return _internal_monochrome();
}
inline void CameraH265Config::_internal_set_monochrome(bool value) {
  _has_bits_[0] |= 0x00000200u;
  monochrome_ = value;
}
inline void CameraH265Config::set_monochrome(bool value) {
  _internal_set_monochrome(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.monochrome)
}

// required int32 brightness = 9 [default = -1];
inline bool CameraH265Config::_internal_has_brightness() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CameraH265Config::has_brightness() const {
  return _internal_has_brightness();
}
inline void CameraH265Config::clear_brightness() {
  brightness_ = -1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::brightness() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.brightness)
  return _internal_brightness();
}
inline void CameraH265Config::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  brightness_ = value;
}
inline void CameraH265Config::set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.brightness)
}

// required int32 contrast = 10 [default = -1];
inline bool CameraH265Config::_internal_has_contrast() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CameraH265Config::has_contrast() const {
  return _internal_has_contrast();
}
inline void CameraH265Config::clear_contrast() {
  contrast_ = -1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_contrast() const {
  return contrast_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::contrast() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.contrast)
  return _internal_contrast();
}
inline void CameraH265Config::_internal_set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  contrast_ = value;
}
inline void CameraH265Config::set_contrast(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contrast(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.contrast)
}

// required int32 saturation = 11 [default = -1];
inline bool CameraH265Config::_internal_has_saturation() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CameraH265Config::has_saturation() const {
  return _internal_has_saturation();
}
inline void CameraH265Config::clear_saturation() {
  saturation_ = -1;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_saturation() const {
  return saturation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::saturation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.saturation)
  return _internal_saturation();
}
inline void CameraH265Config::_internal_set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  saturation_ = value;
}
inline void CameraH265Config::set_saturation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.saturation)
}

// required int32 sharpness = 12 [default = -1];
inline bool CameraH265Config::_internal_has_sharpness() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CameraH265Config::has_sharpness() const {
  return _internal_has_sharpness();
}
inline void CameraH265Config::clear_sharpness() {
  sharpness_ = -1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_sharpness() const {
  return sharpness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::sharpness() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.sharpness)
  return _internal_sharpness();
}
inline void CameraH265Config::_internal_set_sharpness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  sharpness_ = value;
}
inline void CameraH265Config::set_sharpness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sharpness(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.sharpness)
}

// required int32 gain = 13 [default = -1];
inline bool CameraH265Config::_internal_has_gain() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CameraH265Config::has_gain() const {
  return _internal_has_gain();
}
inline void CameraH265Config::clear_gain() {
  gain_ = -1;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_gain() const {
  return gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::gain() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.gain)
  return _internal_gain();
}
inline void CameraH265Config::_internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  gain_ = value;
}
inline void CameraH265Config::set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.gain)
}

// required bool auto_focus = 14 [default = false];
inline bool CameraH265Config::_internal_has_auto_focus() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CameraH265Config::has_auto_focus() const {
  return _internal_has_auto_focus();
}
inline void CameraH265Config::clear_auto_focus() {
  auto_focus_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CameraH265Config::_internal_auto_focus() const {
  return auto_focus_;
}
inline bool CameraH265Config::auto_focus() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.auto_focus)
  return _internal_auto_focus();
}
inline void CameraH265Config::_internal_set_auto_focus(bool value) {
  _has_bits_[0] |= 0x00000400u;
  auto_focus_ = value;
}
inline void CameraH265Config::set_auto_focus(bool value) {
  _internal_set_auto_focus(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.auto_focus)
}

// required int32 focus = 15 [default = -1];
inline bool CameraH265Config::_internal_has_focus() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CameraH265Config::has_focus() const {
  return _internal_has_focus();
}
inline void CameraH265Config::clear_focus() {
  focus_ = -1;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_focus() const {
  return focus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::focus() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.focus)
  return _internal_focus();
}
inline void CameraH265Config::_internal_set_focus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  focus_ = value;
}
inline void CameraH265Config::set_focus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_focus(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.focus)
}

// required bool auto_exposure = 16 [default = true];
inline bool CameraH265Config::_internal_has_auto_exposure() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CameraH265Config::has_auto_exposure() const {
  return _internal_has_auto_exposure();
}
inline void CameraH265Config::clear_auto_exposure() {
  auto_exposure_ = true;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CameraH265Config::_internal_auto_exposure() const {
  return auto_exposure_;
}
inline bool CameraH265Config::auto_exposure() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.auto_exposure)
  return _internal_auto_exposure();
}
inline void CameraH265Config::_internal_set_auto_exposure(bool value) {
  _has_bits_[0] |= 0x00080000u;
  auto_exposure_ = value;
}
inline void CameraH265Config::set_auto_exposure(bool value) {
  _internal_set_auto_exposure(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.auto_exposure)
}

// required int32 exposure = 17 [default = 100];
inline bool CameraH265Config::_internal_has_exposure() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CameraH265Config::has_exposure() const {
  return _internal_has_exposure();
}
inline void CameraH265Config::clear_exposure() {
  exposure_ = 100;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_exposure() const {
  return exposure_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::exposure() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.exposure)
  return _internal_exposure();
}
inline void CameraH265Config::_internal_set_exposure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  exposure_ = value;
}
inline void CameraH265Config::set_exposure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exposure(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.exposure)
}

// required bool auto_white_balance = 18 [default = true];
inline bool CameraH265Config::_internal_has_auto_white_balance() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CameraH265Config::has_auto_white_balance() const {
  return _internal_has_auto_white_balance();
}
inline void CameraH265Config::clear_auto_white_balance() {
  auto_white_balance_ = true;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool CameraH265Config::_internal_auto_white_balance() const {
  return auto_white_balance_;
}
inline bool CameraH265Config::auto_white_balance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.auto_white_balance)
  return _internal_auto_white_balance();
}
inline void CameraH265Config::_internal_set_auto_white_balance(bool value) {
  _has_bits_[0] |= 0x00100000u;
  auto_white_balance_ = value;
}
inline void CameraH265Config::set_auto_white_balance(bool value) {
  _internal_set_auto_white_balance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.auto_white_balance)
}

// required int32 white_balance = 19 [default = 4000];
inline bool CameraH265Config::_internal_has_white_balance() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CameraH265Config::has_white_balance() const {
  return _internal_has_white_balance();
}
inline void CameraH265Config::clear_white_balance() {
  white_balance_ = 4000;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_white_balance() const {
  return white_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::white_balance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.white_balance)
  return _internal_white_balance();
}
inline void CameraH265Config::_internal_set_white_balance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  white_balance_ = value;
}
inline void CameraH265Config::set_white_balance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_white_balance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.white_balance)
}

// required uint32 bytes_per_pixel = 20 [default = 3];
inline bool CameraH265Config::_internal_has_bytes_per_pixel() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CameraH265Config::has_bytes_per_pixel() const {
  return _internal_has_bytes_per_pixel();
}
inline void CameraH265Config::clear_bytes_per_pixel() {
  bytes_per_pixel_ = 3u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::_internal_bytes_per_pixel() const {
  return bytes_per_pixel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::bytes_per_pixel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.bytes_per_pixel)
  return _internal_bytes_per_pixel();
}
inline void CameraH265Config::_internal_set_bytes_per_pixel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  bytes_per_pixel_ = value;
}
inline void CameraH265Config::set_bytes_per_pixel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bytes_per_pixel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.bytes_per_pixel)
}

// required string trigger_param = 21 [default = "f2ff"];
inline bool CameraH265Config::_internal_has_trigger_param() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CameraH265Config::has_trigger_param() const {
  return _internal_has_trigger_param();
}
inline void CameraH265Config::clear_trigger_param() {
  trigger_param_.ClearToDefaultNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_trigger_param_.get());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CameraH265Config::trigger_param() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.trigger_param)
  return _internal_trigger_param();
}
inline void CameraH265Config::set_trigger_param(const std::string& value) {
  _internal_set_trigger_param(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.trigger_param)
}
inline std::string* CameraH265Config::mutable_trigger_param() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.trigger_param)
  return _internal_mutable_trigger_param();
}
inline const std::string& CameraH265Config::_internal_trigger_param() const {
  return trigger_param_.GetNoArena();
}
inline void CameraH265Config::_internal_set_trigger_param(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  trigger_param_.SetNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_trigger_param_.get(), value);
}
inline void CameraH265Config::set_trigger_param(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  trigger_param_.SetNoArena(
    &::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_trigger_param_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.video.config.CameraH265Config.trigger_param)
}
inline void CameraH265Config::set_trigger_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  trigger_param_.SetNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_trigger_param_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.video.config.CameraH265Config.trigger_param)
}
inline void CameraH265Config::set_trigger_param(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  trigger_param_.SetNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_trigger_param_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.video.config.CameraH265Config.trigger_param)
}
inline std::string* CameraH265Config::_internal_mutable_trigger_param() {
  _has_bits_[0] |= 0x00000004u;
  return trigger_param_.MutableNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_trigger_param_.get());
}
inline std::string* CameraH265Config::release_trigger_param() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.trigger_param)
  if (!_internal_has_trigger_param()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return trigger_param_.ReleaseNonDefaultNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_trigger_param_.get());
}
inline void CameraH265Config::set_allocated_trigger_param(std::string* trigger_param) {
  if (trigger_param != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trigger_param_.SetAllocatedNoArena(&::apollo::drivers::video::config::CameraH265Config::_i_give_permission_to_break_this_code_default_trigger_param_.get(), trigger_param);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.trigger_param)
}

// required uint32 metric_error_code = 22 [default = 11];
inline bool CameraH265Config::_internal_has_metric_error_code() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CameraH265Config::has_metric_error_code() const {
  return _internal_has_metric_error_code();
}
inline void CameraH265Config::clear_metric_error_code() {
  metric_error_code_ = 11u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::_internal_metric_error_code() const {
  return metric_error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CameraH265Config::metric_error_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.metric_error_code)
  return _internal_metric_error_code();
}
inline void CameraH265Config::_internal_set_metric_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  metric_error_code_ = value;
}
inline void CameraH265Config::set_metric_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_metric_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.metric_error_code)
}

// required int32 fpga_dev_number = 23 [default = -1];
inline bool CameraH265Config::_internal_has_fpga_dev_number() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CameraH265Config::has_fpga_dev_number() const {
  return _internal_has_fpga_dev_number();
}
inline void CameraH265Config::clear_fpga_dev_number() {
  fpga_dev_number_ = -1;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_fpga_dev_number() const {
  return fpga_dev_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::fpga_dev_number() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.fpga_dev_number)
  return _internal_fpga_dev_number();
}
inline void CameraH265Config::_internal_set_fpga_dev_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  fpga_dev_number_ = value;
}
inline void CameraH265Config::set_fpga_dev_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fpga_dev_number(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.fpga_dev_number)
}

// required int32 camera_seq_number = 24 [default = -1];
inline bool CameraH265Config::_internal_has_camera_seq_number() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CameraH265Config::has_camera_seq_number() const {
  return _internal_has_camera_seq_number();
}
inline void CameraH265Config::clear_camera_seq_number() {
  camera_seq_number_ = -1;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::_internal_camera_seq_number() const {
  return camera_seq_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraH265Config::camera_seq_number() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.camera_seq_number)
  return _internal_camera_seq_number();
}
inline void CameraH265Config::_internal_set_camera_seq_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  camera_seq_number_ = value;
}
inline void CameraH265Config::set_camera_seq_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_seq_number(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.video.config.CameraH265Config.camera_seq_number)
}

// optional .apollo.drivers.video.config.CameraH265Config.CompressConfig compress_conf = 25;
inline bool CameraH265Config::_internal_has_compress_conf() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || compress_conf_ != nullptr);
  return value;
}
inline bool CameraH265Config::has_compress_conf() const {
  return _internal_has_compress_conf();
}
inline void CameraH265Config::clear_compress_conf() {
  if (compress_conf_ != nullptr) compress_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::drivers::video::config::CameraH265Config_CompressConfig& CameraH265Config::_internal_compress_conf() const {
  const ::apollo::drivers::video::config::CameraH265Config_CompressConfig* p = compress_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::video::config::CameraH265Config_CompressConfig*>(
      &::apollo::drivers::video::config::_CameraH265Config_CompressConfig_default_instance_);
}
inline const ::apollo::drivers::video::config::CameraH265Config_CompressConfig& CameraH265Config::compress_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.video.config.CameraH265Config.compress_conf)
  return _internal_compress_conf();
}
inline ::apollo::drivers::video::config::CameraH265Config_CompressConfig* CameraH265Config::release_compress_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.video.config.CameraH265Config.compress_conf)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::drivers::video::config::CameraH265Config_CompressConfig* temp = compress_conf_;
  compress_conf_ = nullptr;
  return temp;
}
inline ::apollo::drivers::video::config::CameraH265Config_CompressConfig* CameraH265Config::_internal_mutable_compress_conf() {
  _has_bits_[0] |= 0x00000008u;
  if (compress_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::video::config::CameraH265Config_CompressConfig>(GetArenaNoVirtual());
    compress_conf_ = p;
  }
  return compress_conf_;
}
inline ::apollo::drivers::video::config::CameraH265Config_CompressConfig* CameraH265Config::mutable_compress_conf() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.video.config.CameraH265Config.compress_conf)
  return _internal_mutable_compress_conf();
}
inline void CameraH265Config::set_allocated_compress_conf(::apollo::drivers::video::config::CameraH265Config_CompressConfig* compress_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete compress_conf_;
  }
  if (compress_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      compress_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compress_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  compress_conf_ = compress_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.video.config.CameraH265Config.compress_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace video
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvideo_2fproto_2fvideo_5fh265cfg_2eproto
