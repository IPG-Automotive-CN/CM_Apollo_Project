// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/mobileye.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fmobileye_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fmobileye_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fmobileye_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto;
namespace apollo {
namespace drivers {
class Aftermarket_669;
class Aftermarket_669DefaultTypeInternal;
extern Aftermarket_669DefaultTypeInternal _Aftermarket_669_default_instance_;
class Details_737;
class Details_737DefaultTypeInternal;
extern Details_737DefaultTypeInternal _Details_737_default_instance_;
class Details_738;
class Details_738DefaultTypeInternal;
extern Details_738DefaultTypeInternal _Details_738_default_instance_;
class Details_739;
class Details_739DefaultTypeInternal;
extern Details_739DefaultTypeInternal _Details_739_default_instance_;
class Details_73a;
class Details_73aDefaultTypeInternal;
extern Details_73aDefaultTypeInternal _Details_73a_default_instance_;
class Details_73b;
class Details_73bDefaultTypeInternal;
extern Details_73bDefaultTypeInternal _Details_73b_default_instance_;
class Lka_766;
class Lka_766DefaultTypeInternal;
extern Lka_766DefaultTypeInternal _Lka_766_default_instance_;
class Lka_767;
class Lka_767DefaultTypeInternal;
extern Lka_767DefaultTypeInternal _Lka_767_default_instance_;
class Lka_768;
class Lka_768DefaultTypeInternal;
extern Lka_768DefaultTypeInternal _Lka_768_default_instance_;
class Lka_769;
class Lka_769DefaultTypeInternal;
extern Lka_769DefaultTypeInternal _Lka_769_default_instance_;
class Mobileye;
class MobileyeDefaultTypeInternal;
extern MobileyeDefaultTypeInternal _Mobileye_default_instance_;
class Next_76c;
class Next_76cDefaultTypeInternal;
extern Next_76cDefaultTypeInternal _Next_76c_default_instance_;
class Next_76d;
class Next_76dDefaultTypeInternal;
extern Next_76dDefaultTypeInternal _Next_76d_default_instance_;
class Num_76b;
class Num_76bDefaultTypeInternal;
extern Num_76bDefaultTypeInternal _Num_76b_default_instance_;
class Reference_76a;
class Reference_76aDefaultTypeInternal;
extern Reference_76aDefaultTypeInternal _Reference_76a_default_instance_;
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::Aftermarket_669* Arena::CreateMaybeMessage<::apollo::drivers::Aftermarket_669>(Arena*);
template<> ::apollo::drivers::Details_737* Arena::CreateMaybeMessage<::apollo::drivers::Details_737>(Arena*);
template<> ::apollo::drivers::Details_738* Arena::CreateMaybeMessage<::apollo::drivers::Details_738>(Arena*);
template<> ::apollo::drivers::Details_739* Arena::CreateMaybeMessage<::apollo::drivers::Details_739>(Arena*);
template<> ::apollo::drivers::Details_73a* Arena::CreateMaybeMessage<::apollo::drivers::Details_73a>(Arena*);
template<> ::apollo::drivers::Details_73b* Arena::CreateMaybeMessage<::apollo::drivers::Details_73b>(Arena*);
template<> ::apollo::drivers::Lka_766* Arena::CreateMaybeMessage<::apollo::drivers::Lka_766>(Arena*);
template<> ::apollo::drivers::Lka_767* Arena::CreateMaybeMessage<::apollo::drivers::Lka_767>(Arena*);
template<> ::apollo::drivers::Lka_768* Arena::CreateMaybeMessage<::apollo::drivers::Lka_768>(Arena*);
template<> ::apollo::drivers::Lka_769* Arena::CreateMaybeMessage<::apollo::drivers::Lka_769>(Arena*);
template<> ::apollo::drivers::Mobileye* Arena::CreateMaybeMessage<::apollo::drivers::Mobileye>(Arena*);
template<> ::apollo::drivers::Next_76c* Arena::CreateMaybeMessage<::apollo::drivers::Next_76c>(Arena*);
template<> ::apollo::drivers::Next_76d* Arena::CreateMaybeMessage<::apollo::drivers::Next_76d>(Arena*);
template<> ::apollo::drivers::Num_76b* Arena::CreateMaybeMessage<::apollo::drivers::Num_76b>(Arena*);
template<> ::apollo::drivers::Reference_76a* Arena::CreateMaybeMessage<::apollo::drivers::Reference_76a>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {

// ===================================================================

class Lka_768 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Lka_768) */ {
 public:
  Lka_768();
  virtual ~Lka_768();

  Lka_768(const Lka_768& from);
  Lka_768(Lka_768&& from) noexcept
    : Lka_768() {
    *this = ::std::move(from);
  }

  inline Lka_768& operator=(const Lka_768& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lka_768& operator=(Lka_768&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lka_768& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lka_768* internal_default_instance() {
    return reinterpret_cast<const Lka_768*>(
               &_Lka_768_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Lka_768& a, Lka_768& b) {
    a.Swap(&b);
  }
  inline void Swap(Lka_768* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lka_768* New() const final {
    return CreateMaybeMessage<Lka_768>(nullptr);
  }

  Lka_768* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lka_768>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lka_768& from);
  void MergeFrom(const Lka_768& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lka_768* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Lka_768";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneTypeFieldNumber = 1,
    kQualityFieldNumber = 2,
    kPositionFieldNumber = 4,
    kCurvatureFieldNumber = 5,
    kCurvatureDerivativeFieldNumber = 6,
    kWidthRightMarkingFieldNumber = 7,
    kModelDegreeFieldNumber = 3,
  };
  // optional int32 lane_type = 1;
  bool has_lane_type() const;
  private:
  bool _internal_has_lane_type() const;
  public:
  void clear_lane_type();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type() const;
  void set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_type() const;
  void _internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 quality = 2;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // optional double curvature = 5;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // optional double curvature_derivative = 6;
  bool has_curvature_derivative() const;
  private:
  bool _internal_has_curvature_derivative() const;
  public:
  void clear_curvature_derivative();
  double curvature_derivative() const;
  void set_curvature_derivative(double value);
  private:
  double _internal_curvature_derivative() const;
  void _internal_set_curvature_derivative(double value);
  public:

  // optional double width_right_marking = 7;
  bool has_width_right_marking() const;
  private:
  bool _internal_has_width_right_marking() const;
  public:
  void clear_width_right_marking();
  double width_right_marking() const;
  void set_width_right_marking(double value);
  private:
  double _internal_width_right_marking() const;
  void _internal_set_width_right_marking(double value);
  public:

  // optional int32 model_degree = 3;
  bool has_model_degree() const;
  private:
  bool _internal_has_model_degree() const;
  public:
  void clear_model_degree();
  ::PROTOBUF_NAMESPACE_ID::int32 model_degree() const;
  void set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_degree() const;
  void _internal_set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Lka_768)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  double position_;
  double curvature_;
  double curvature_derivative_;
  double width_right_marking_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_degree_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Num_76b :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Num_76b) */ {
 public:
  Num_76b();
  virtual ~Num_76b();

  Num_76b(const Num_76b& from);
  Num_76b(Num_76b&& from) noexcept
    : Num_76b() {
    *this = ::std::move(from);
  }

  inline Num_76b& operator=(const Num_76b& from) {
    CopyFrom(from);
    return *this;
  }
  inline Num_76b& operator=(Num_76b&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Num_76b& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Num_76b* internal_default_instance() {
    return reinterpret_cast<const Num_76b*>(
               &_Num_76b_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Num_76b& a, Num_76b& b) {
    a.Swap(&b);
  }
  inline void Swap(Num_76b* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Num_76b* New() const final {
    return CreateMaybeMessage<Num_76b>(nullptr);
  }

  Num_76b* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Num_76b>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Num_76b& from);
  void MergeFrom(const Num_76b& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Num_76b* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Num_76b";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumOfNextLaneMarkReportedFieldNumber = 1,
  };
  // optional int32 num_of_next_lane_mark_reported = 1;
  bool has_num_of_next_lane_mark_reported() const;
  private:
  bool _internal_has_num_of_next_lane_mark_reported() const;
  public:
  void clear_num_of_next_lane_mark_reported();
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_next_lane_mark_reported() const;
  void set_num_of_next_lane_mark_reported(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_of_next_lane_mark_reported() const;
  void _internal_set_num_of_next_lane_mark_reported(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Num_76b)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_next_lane_mark_reported_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Aftermarket_669 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Aftermarket_669) */ {
 public:
  Aftermarket_669();
  virtual ~Aftermarket_669();

  Aftermarket_669(const Aftermarket_669& from);
  Aftermarket_669(Aftermarket_669&& from) noexcept
    : Aftermarket_669() {
    *this = ::std::move(from);
  }

  inline Aftermarket_669& operator=(const Aftermarket_669& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aftermarket_669& operator=(Aftermarket_669&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Aftermarket_669& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Aftermarket_669* internal_default_instance() {
    return reinterpret_cast<const Aftermarket_669*>(
               &_Aftermarket_669_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Aftermarket_669& a, Aftermarket_669& b) {
    a.Swap(&b);
  }
  inline void Swap(Aftermarket_669* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Aftermarket_669* New() const final {
    return CreateMaybeMessage<Aftermarket_669>(nullptr);
  }

  Aftermarket_669* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Aftermarket_669>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Aftermarket_669& from);
  void MergeFrom(const Aftermarket_669& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aftermarket_669* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Aftermarket_669";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneConfLeftFieldNumber = 1,
    kLaneTypeLeftFieldNumber = 3,
    kDistanceToLaneLFieldNumber = 4,
    kLdwAvailabilityLeftFieldNumber = 2,
    kLdwAvailabilityRightFieldNumber = 6,
    kLaneConfRightFieldNumber = 5,
    kDistanceToLaneRFieldNumber = 8,
    kLaneTypeRightFieldNumber = 7,
  };
  // optional int32 lane_conf_left = 1;
  bool has_lane_conf_left() const;
  private:
  bool _internal_has_lane_conf_left() const;
  public:
  void clear_lane_conf_left();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_conf_left() const;
  void set_lane_conf_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_conf_left() const;
  void _internal_set_lane_conf_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lane_type_left = 3;
  bool has_lane_type_left() const;
  private:
  bool _internal_has_lane_type_left() const;
  public:
  void clear_lane_type_left();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_left() const;
  void set_lane_type_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_type_left() const;
  void _internal_set_lane_type_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double distance_to_lane_l = 4;
  bool has_distance_to_lane_l() const;
  private:
  bool _internal_has_distance_to_lane_l() const;
  public:
  void clear_distance_to_lane_l();
  double distance_to_lane_l() const;
  void set_distance_to_lane_l(double value);
  private:
  double _internal_distance_to_lane_l() const;
  void _internal_set_distance_to_lane_l(double value);
  public:

  // optional bool ldw_availability_left = 2;
  bool has_ldw_availability_left() const;
  private:
  bool _internal_has_ldw_availability_left() const;
  public:
  void clear_ldw_availability_left();
  bool ldw_availability_left() const;
  void set_ldw_availability_left(bool value);
  private:
  bool _internal_ldw_availability_left() const;
  void _internal_set_ldw_availability_left(bool value);
  public:

  // optional bool ldw_availability_right = 6;
  bool has_ldw_availability_right() const;
  private:
  bool _internal_has_ldw_availability_right() const;
  public:
  void clear_ldw_availability_right();
  bool ldw_availability_right() const;
  void set_ldw_availability_right(bool value);
  private:
  bool _internal_ldw_availability_right() const;
  void _internal_set_ldw_availability_right(bool value);
  public:

  // optional int32 lane_conf_right = 5;
  bool has_lane_conf_right() const;
  private:
  bool _internal_has_lane_conf_right() const;
  public:
  void clear_lane_conf_right();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_conf_right() const;
  void set_lane_conf_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_conf_right() const;
  void _internal_set_lane_conf_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double distance_to_lane_r = 8;
  bool has_distance_to_lane_r() const;
  private:
  bool _internal_has_distance_to_lane_r() const;
  public:
  void clear_distance_to_lane_r();
  double distance_to_lane_r() const;
  void set_distance_to_lane_r(double value);
  private:
  double _internal_distance_to_lane_r() const;
  void _internal_set_distance_to_lane_r(double value);
  public:

  // optional int32 lane_type_right = 7;
  bool has_lane_type_right() const;
  private:
  bool _internal_has_lane_type_right() const;
  public:
  void clear_lane_type_right();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_right() const;
  void set_lane_type_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_type_right() const;
  void _internal_set_lane_type_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Aftermarket_669)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_conf_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_left_;
  double distance_to_lane_l_;
  bool ldw_availability_left_;
  bool ldw_availability_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_conf_right_;
  double distance_to_lane_r_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_right_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Lka_769 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Lka_769) */ {
 public:
  Lka_769();
  virtual ~Lka_769();

  Lka_769(const Lka_769& from);
  Lka_769(Lka_769&& from) noexcept
    : Lka_769() {
    *this = ::std::move(from);
  }

  inline Lka_769& operator=(const Lka_769& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lka_769& operator=(Lka_769&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lka_769& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lka_769* internal_default_instance() {
    return reinterpret_cast<const Lka_769*>(
               &_Lka_769_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Lka_769& a, Lka_769& b) {
    a.Swap(&b);
  }
  inline void Swap(Lka_769* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lka_769* New() const final {
    return CreateMaybeMessage<Lka_769>(nullptr);
  }

  Lka_769* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lka_769>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lka_769& from);
  void MergeFrom(const Lka_769& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lka_769* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Lka_769";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingAngleFieldNumber = 1,
    kViewRangeFieldNumber = 2,
    kViewRangeAvailabilityFieldNumber = 3,
  };
  // optional double heading_angle = 1;
  bool has_heading_angle() const;
  private:
  bool _internal_has_heading_angle() const;
  public:
  void clear_heading_angle();
  double heading_angle() const;
  void set_heading_angle(double value);
  private:
  double _internal_heading_angle() const;
  void _internal_set_heading_angle(double value);
  public:

  // optional double view_range = 2;
  bool has_view_range() const;
  private:
  bool _internal_has_view_range() const;
  public:
  void clear_view_range();
  double view_range() const;
  void set_view_range(double value);
  private:
  double _internal_view_range() const;
  void _internal_set_view_range(double value);
  public:

  // optional bool view_range_availability = 3;
  bool has_view_range_availability() const;
  private:
  bool _internal_has_view_range_availability() const;
  public:
  void clear_view_range_availability();
  bool view_range_availability() const;
  void set_view_range_availability(bool value);
  private:
  bool _internal_view_range_availability() const;
  void _internal_set_view_range_availability(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Lka_769)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double heading_angle_;
  double view_range_;
  bool view_range_availability_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Reference_76a :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Reference_76a) */ {
 public:
  Reference_76a();
  virtual ~Reference_76a();

  Reference_76a(const Reference_76a& from);
  Reference_76a(Reference_76a&& from) noexcept
    : Reference_76a() {
    *this = ::std::move(from);
  }

  inline Reference_76a& operator=(const Reference_76a& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reference_76a& operator=(Reference_76a&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reference_76a& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reference_76a* internal_default_instance() {
    return reinterpret_cast<const Reference_76a*>(
               &_Reference_76a_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Reference_76a& a, Reference_76a& b) {
    a.Swap(&b);
  }
  inline void Swap(Reference_76a* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reference_76a* New() const final {
    return CreateMaybeMessage<Reference_76a>(nullptr);
  }

  Reference_76a* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reference_76a>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reference_76a& from);
  void MergeFrom(const Reference_76a& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference_76a* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Reference_76a";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefPoint1PositionFieldNumber = 1,
    kRefPoint1DistanceFieldNumber = 2,
    kRefPoint2PositionFieldNumber = 4,
    kRefPoint2DistanceFieldNumber = 5,
    kRefPoint1ValidityFieldNumber = 3,
    kRefPoint2ValidityFieldNumber = 6,
  };
  // optional double ref_point_1_position = 1;
  bool has_ref_point_1_position() const;
  private:
  bool _internal_has_ref_point_1_position() const;
  public:
  void clear_ref_point_1_position();
  double ref_point_1_position() const;
  void set_ref_point_1_position(double value);
  private:
  double _internal_ref_point_1_position() const;
  void _internal_set_ref_point_1_position(double value);
  public:

  // optional double ref_point_1_distance = 2;
  bool has_ref_point_1_distance() const;
  private:
  bool _internal_has_ref_point_1_distance() const;
  public:
  void clear_ref_point_1_distance();
  double ref_point_1_distance() const;
  void set_ref_point_1_distance(double value);
  private:
  double _internal_ref_point_1_distance() const;
  void _internal_set_ref_point_1_distance(double value);
  public:

  // optional double ref_point_2_position = 4;
  bool has_ref_point_2_position() const;
  private:
  bool _internal_has_ref_point_2_position() const;
  public:
  void clear_ref_point_2_position();
  double ref_point_2_position() const;
  void set_ref_point_2_position(double value);
  private:
  double _internal_ref_point_2_position() const;
  void _internal_set_ref_point_2_position(double value);
  public:

  // optional double ref_point_2_distance = 5;
  bool has_ref_point_2_distance() const;
  private:
  bool _internal_has_ref_point_2_distance() const;
  public:
  void clear_ref_point_2_distance();
  double ref_point_2_distance() const;
  void set_ref_point_2_distance(double value);
  private:
  double _internal_ref_point_2_distance() const;
  void _internal_set_ref_point_2_distance(double value);
  public:

  // optional bool ref_point_1_validity = 3;
  bool has_ref_point_1_validity() const;
  private:
  bool _internal_has_ref_point_1_validity() const;
  public:
  void clear_ref_point_1_validity();
  bool ref_point_1_validity() const;
  void set_ref_point_1_validity(bool value);
  private:
  bool _internal_ref_point_1_validity() const;
  void _internal_set_ref_point_1_validity(bool value);
  public:

  // optional bool ref_point_2_validity = 6;
  bool has_ref_point_2_validity() const;
  private:
  bool _internal_has_ref_point_2_validity() const;
  public:
  void clear_ref_point_2_validity();
  bool ref_point_2_validity() const;
  void set_ref_point_2_validity(bool value);
  private:
  bool _internal_ref_point_2_validity() const;
  void _internal_set_ref_point_2_validity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Reference_76a)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double ref_point_1_position_;
  double ref_point_1_distance_;
  double ref_point_2_position_;
  double ref_point_2_distance_;
  bool ref_point_1_validity_;
  bool ref_point_2_validity_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Details_738 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Details_738) */ {
 public:
  Details_738();
  virtual ~Details_738();

  Details_738(const Details_738& from);
  Details_738(Details_738&& from) noexcept
    : Details_738() {
    *this = ::std::move(from);
  }

  inline Details_738& operator=(const Details_738& from) {
    CopyFrom(from);
    return *this;
  }
  inline Details_738& operator=(Details_738&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Details_738& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details_738* internal_default_instance() {
    return reinterpret_cast<const Details_738*>(
               &_Details_738_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Details_738& a, Details_738& b) {
    a.Swap(&b);
  }
  inline void Swap(Details_738* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Details_738* New() const final {
    return CreateMaybeMessage<Details_738>(nullptr);
  }

  Details_738* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Details_738>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Details_738& from);
  void MergeFrom(const Details_738& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details_738* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Details_738";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumObstaclesFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kApplicationVersionFieldNumber = 3,
    kActiveVersionNumberSectionFieldNumber = 4,
    kLeftCloseRangCutInFieldNumber = 5,
    kRightCloseRangCutInFieldNumber = 6,
    kCloseCarFieldNumber = 9,
    kGoFieldNumber = 7,
    kProtocolVersionFieldNumber = 8,
    kFailsafeFieldNumber = 10,
    kReserved10FieldNumber = 11,
  };
  // optional int32 num_obstacles = 1;
  bool has_num_obstacles() const;
  private:
  bool _internal_has_num_obstacles() const;
  public:
  void clear_num_obstacles();
  ::PROTOBUF_NAMESPACE_ID::int32 num_obstacles() const;
  void set_num_obstacles(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_obstacles() const;
  void _internal_set_num_obstacles(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 application_version = 3;
  bool has_application_version() const;
  private:
  bool _internal_has_application_version() const;
  public:
  void clear_application_version();
  ::PROTOBUF_NAMESPACE_ID::int32 application_version() const;
  void set_application_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_application_version() const;
  void _internal_set_application_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 active_version_number_section = 4;
  bool has_active_version_number_section() const;
  private:
  bool _internal_has_active_version_number_section() const;
  public:
  void clear_active_version_number_section();
  ::PROTOBUF_NAMESPACE_ID::int32 active_version_number_section() const;
  void set_active_version_number_section(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_version_number_section() const;
  void _internal_set_active_version_number_section(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool left_close_rang_cut_in = 5;
  bool has_left_close_rang_cut_in() const;
  private:
  bool _internal_has_left_close_rang_cut_in() const;
  public:
  void clear_left_close_rang_cut_in();
  bool left_close_rang_cut_in() const;
  void set_left_close_rang_cut_in(bool value);
  private:
  bool _internal_left_close_rang_cut_in() const;
  void _internal_set_left_close_rang_cut_in(bool value);
  public:

  // optional bool right_close_rang_cut_in = 6;
  bool has_right_close_rang_cut_in() const;
  private:
  bool _internal_has_right_close_rang_cut_in() const;
  public:
  void clear_right_close_rang_cut_in();
  bool right_close_rang_cut_in() const;
  void set_right_close_rang_cut_in(bool value);
  private:
  bool _internal_right_close_rang_cut_in() const;
  void _internal_set_right_close_rang_cut_in(bool value);
  public:

  // optional bool close_car = 9;
  bool has_close_car() const;
  private:
  bool _internal_has_close_car() const;
  public:
  void clear_close_car();
  bool close_car() const;
  void set_close_car(bool value);
  private:
  bool _internal_close_car() const;
  void _internal_set_close_car(bool value);
  public:

  // optional int32 go = 7;
  bool has_go() const;
  private:
  bool _internal_has_go() const;
  public:
  void clear_go();
  ::PROTOBUF_NAMESPACE_ID::int32 go() const;
  void set_go(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_go() const;
  void _internal_set_go(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 protocol_version = 8;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 failsafe = 10;
  bool has_failsafe() const;
  private:
  bool _internal_has_failsafe() const;
  public:
  void clear_failsafe();
  ::PROTOBUF_NAMESPACE_ID::int32 failsafe() const;
  void set_failsafe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_failsafe() const;
  void _internal_set_failsafe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 reserved_10 = 11;
  bool has_reserved_10() const;
  private:
  bool _internal_has_reserved_10() const;
  public:
  void clear_reserved_10();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_10() const;
  void set_reserved_10(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reserved_10() const;
  void _internal_set_reserved_10(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Details_738)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_obstacles_;
  ::PROTOBUF_NAMESPACE_ID::int32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 application_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_version_number_section_;
  bool left_close_rang_cut_in_;
  bool right_close_rang_cut_in_;
  bool close_car_;
  ::PROTOBUF_NAMESPACE_ID::int32 go_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 failsafe_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_10_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Next_76c :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Next_76c) */ {
 public:
  Next_76c();
  virtual ~Next_76c();

  Next_76c(const Next_76c& from);
  Next_76c(Next_76c&& from) noexcept
    : Next_76c() {
    *this = ::std::move(from);
  }

  inline Next_76c& operator=(const Next_76c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Next_76c& operator=(Next_76c&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Next_76c& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Next_76c* internal_default_instance() {
    return reinterpret_cast<const Next_76c*>(
               &_Next_76c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Next_76c& a, Next_76c& b) {
    a.Swap(&b);
  }
  inline void Swap(Next_76c* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Next_76c* New() const final {
    return CreateMaybeMessage<Next_76c>(nullptr);
  }

  Next_76c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Next_76c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Next_76c& from);
  void MergeFrom(const Next_76c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Next_76c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Next_76c";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneTypeFieldNumber = 1,
    kQualityFieldNumber = 2,
    kPositionFieldNumber = 4,
    kCurvatureFieldNumber = 5,
    kCurvatureDerivativeFieldNumber = 6,
    kLaneMarkWidthFieldNumber = 7,
    kModelDegreeFieldNumber = 3,
  };
  // optional int32 lane_type = 1;
  bool has_lane_type() const;
  private:
  bool _internal_has_lane_type() const;
  public:
  void clear_lane_type();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type() const;
  void set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_type() const;
  void _internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 quality = 2;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // optional double curvature = 5;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // optional double curvature_derivative = 6;
  bool has_curvature_derivative() const;
  private:
  bool _internal_has_curvature_derivative() const;
  public:
  void clear_curvature_derivative();
  double curvature_derivative() const;
  void set_curvature_derivative(double value);
  private:
  double _internal_curvature_derivative() const;
  void _internal_set_curvature_derivative(double value);
  public:

  // optional double lane_mark_width = 7;
  bool has_lane_mark_width() const;
  private:
  bool _internal_has_lane_mark_width() const;
  public:
  void clear_lane_mark_width();
  double lane_mark_width() const;
  void set_lane_mark_width(double value);
  private:
  double _internal_lane_mark_width() const;
  void _internal_set_lane_mark_width(double value);
  public:

  // optional int32 model_degree = 3;
  bool has_model_degree() const;
  private:
  bool _internal_has_model_degree() const;
  public:
  void clear_model_degree();
  ::PROTOBUF_NAMESPACE_ID::int32 model_degree() const;
  void set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_degree() const;
  void _internal_set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Next_76c)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  double position_;
  double curvature_;
  double curvature_derivative_;
  double lane_mark_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_degree_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Details_737 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Details_737) */ {
 public:
  Details_737();
  virtual ~Details_737();

  Details_737(const Details_737& from);
  Details_737(Details_737&& from) noexcept
    : Details_737() {
    *this = ::std::move(from);
  }

  inline Details_737& operator=(const Details_737& from) {
    CopyFrom(from);
    return *this;
  }
  inline Details_737& operator=(Details_737&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Details_737& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details_737* internal_default_instance() {
    return reinterpret_cast<const Details_737*>(
               &_Details_737_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Details_737& a, Details_737& b) {
    a.Swap(&b);
  }
  inline void Swap(Details_737* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Details_737* New() const final {
    return CreateMaybeMessage<Details_737>(nullptr);
  }

  Details_737* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Details_737>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Details_737& from);
  void MergeFrom(const Details_737& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details_737* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Details_737";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneCurvatureFieldNumber = 1,
    kLaneHeadingFieldNumber = 2,
    kYawAngleFieldNumber = 7,
    kPitchAngleFieldNumber = 8,
    kCaConstructionAreaFieldNumber = 3,
    kRightLdwAvailabilityFieldNumber = 4,
    kLeftLdwAvailabilityFieldNumber = 5,
    kReserved1FieldNumber = 6,
  };
  // optional double lane_curvature = 1;
  bool has_lane_curvature() const;
  private:
  bool _internal_has_lane_curvature() const;
  public:
  void clear_lane_curvature();
  double lane_curvature() const;
  void set_lane_curvature(double value);
  private:
  double _internal_lane_curvature() const;
  void _internal_set_lane_curvature(double value);
  public:

  // optional double lane_heading = 2;
  bool has_lane_heading() const;
  private:
  bool _internal_has_lane_heading() const;
  public:
  void clear_lane_heading();
  double lane_heading() const;
  void set_lane_heading(double value);
  private:
  double _internal_lane_heading() const;
  void _internal_set_lane_heading(double value);
  public:

  // optional double yaw_angle = 7;
  bool has_yaw_angle() const;
  private:
  bool _internal_has_yaw_angle() const;
  public:
  void clear_yaw_angle();
  double yaw_angle() const;
  void set_yaw_angle(double value);
  private:
  double _internal_yaw_angle() const;
  void _internal_set_yaw_angle(double value);
  public:

  // optional double pitch_angle = 8;
  bool has_pitch_angle() const;
  private:
  bool _internal_has_pitch_angle() const;
  public:
  void clear_pitch_angle();
  double pitch_angle() const;
  void set_pitch_angle(double value);
  private:
  double _internal_pitch_angle() const;
  void _internal_set_pitch_angle(double value);
  public:

  // optional bool ca_construction_area = 3;
  bool has_ca_construction_area() const;
  private:
  bool _internal_has_ca_construction_area() const;
  public:
  void clear_ca_construction_area();
  bool ca_construction_area() const;
  void set_ca_construction_area(bool value);
  private:
  bool _internal_ca_construction_area() const;
  void _internal_set_ca_construction_area(bool value);
  public:

  // optional bool right_ldw_availability = 4;
  bool has_right_ldw_availability() const;
  private:
  bool _internal_has_right_ldw_availability() const;
  public:
  void clear_right_ldw_availability();
  bool right_ldw_availability() const;
  void set_right_ldw_availability(bool value);
  private:
  bool _internal_right_ldw_availability() const;
  void _internal_set_right_ldw_availability(bool value);
  public:

  // optional bool left_ldw_availability = 5;
  bool has_left_ldw_availability() const;
  private:
  bool _internal_has_left_ldw_availability() const;
  public:
  void clear_left_ldw_availability();
  bool left_ldw_availability() const;
  void set_left_ldw_availability(bool value);
  private:
  bool _internal_left_ldw_availability() const;
  void _internal_set_left_ldw_availability(bool value);
  public:

  // optional bool reserved_1 = 6;
  bool has_reserved_1() const;
  private:
  bool _internal_has_reserved_1() const;
  public:
  void clear_reserved_1();
  bool reserved_1() const;
  void set_reserved_1(bool value);
  private:
  bool _internal_reserved_1() const;
  void _internal_set_reserved_1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Details_737)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double lane_curvature_;
  double lane_heading_;
  double yaw_angle_;
  double pitch_angle_;
  bool ca_construction_area_;
  bool right_ldw_availability_;
  bool left_ldw_availability_;
  bool reserved_1_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Lka_767 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Lka_767) */ {
 public:
  Lka_767();
  virtual ~Lka_767();

  Lka_767(const Lka_767& from);
  Lka_767(Lka_767&& from) noexcept
    : Lka_767() {
    *this = ::std::move(from);
  }

  inline Lka_767& operator=(const Lka_767& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lka_767& operator=(Lka_767&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lka_767& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lka_767* internal_default_instance() {
    return reinterpret_cast<const Lka_767*>(
               &_Lka_767_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Lka_767& a, Lka_767& b) {
    a.Swap(&b);
  }
  inline void Swap(Lka_767* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lka_767* New() const final {
    return CreateMaybeMessage<Lka_767>(nullptr);
  }

  Lka_767* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lka_767>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lka_767& from);
  void MergeFrom(const Lka_767& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lka_767* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Lka_767";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingAngleFieldNumber = 1,
    kViewRangeFieldNumber = 2,
    kViewRangeAvailabilityFieldNumber = 3,
  };
  // optional double heading_angle = 1;
  bool has_heading_angle() const;
  private:
  bool _internal_has_heading_angle() const;
  public:
  void clear_heading_angle();
  double heading_angle() const;
  void set_heading_angle(double value);
  private:
  double _internal_heading_angle() const;
  void _internal_set_heading_angle(double value);
  public:

  // optional double view_range = 2;
  bool has_view_range() const;
  private:
  bool _internal_has_view_range() const;
  public:
  void clear_view_range();
  double view_range() const;
  void set_view_range(double value);
  private:
  double _internal_view_range() const;
  void _internal_set_view_range(double value);
  public:

  // optional bool view_range_availability = 3;
  bool has_view_range_availability() const;
  private:
  bool _internal_has_view_range_availability() const;
  public:
  void clear_view_range_availability();
  bool view_range_availability() const;
  void set_view_range_availability(bool value);
  private:
  bool _internal_view_range_availability() const;
  void _internal_set_view_range_availability(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Lka_767)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double heading_angle_;
  double view_range_;
  bool view_range_availability_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Lka_766 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Lka_766) */ {
 public:
  Lka_766();
  virtual ~Lka_766();

  Lka_766(const Lka_766& from);
  Lka_766(Lka_766&& from) noexcept
    : Lka_766() {
    *this = ::std::move(from);
  }

  inline Lka_766& operator=(const Lka_766& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lka_766& operator=(Lka_766&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lka_766& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lka_766* internal_default_instance() {
    return reinterpret_cast<const Lka_766*>(
               &_Lka_766_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Lka_766& a, Lka_766& b) {
    a.Swap(&b);
  }
  inline void Swap(Lka_766* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lka_766* New() const final {
    return CreateMaybeMessage<Lka_766>(nullptr);
  }

  Lka_766* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lka_766>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lka_766& from);
  void MergeFrom(const Lka_766& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lka_766* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Lka_766";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneTypeFieldNumber = 1,
    kQualityFieldNumber = 2,
    kPositionFieldNumber = 4,
    kCurvatureFieldNumber = 5,
    kCurvatureDerivativeFieldNumber = 6,
    kWidthLeftMarkingFieldNumber = 7,
    kModelDegreeFieldNumber = 3,
  };
  // optional int32 lane_type = 1;
  bool has_lane_type() const;
  private:
  bool _internal_has_lane_type() const;
  public:
  void clear_lane_type();
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type() const;
  void set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lane_type() const;
  void _internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 quality = 2;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // optional double curvature = 5;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // optional double curvature_derivative = 6;
  bool has_curvature_derivative() const;
  private:
  bool _internal_has_curvature_derivative() const;
  public:
  void clear_curvature_derivative();
  double curvature_derivative() const;
  void set_curvature_derivative(double value);
  private:
  double _internal_curvature_derivative() const;
  void _internal_set_curvature_derivative(double value);
  public:

  // optional double width_left_marking = 7;
  bool has_width_left_marking() const;
  private:
  bool _internal_has_width_left_marking() const;
  public:
  void clear_width_left_marking();
  double width_left_marking() const;
  void set_width_left_marking(double value);
  private:
  double _internal_width_left_marking() const;
  void _internal_set_width_left_marking(double value);
  public:

  // optional int32 model_degree = 3;
  bool has_model_degree() const;
  private:
  bool _internal_has_model_degree() const;
  public:
  void clear_model_degree();
  ::PROTOBUF_NAMESPACE_ID::int32 model_degree() const;
  void set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_degree() const;
  void _internal_set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Lka_766)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lane_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  double position_;
  double curvature_;
  double curvature_derivative_;
  double width_left_marking_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_degree_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Next_76d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Next_76d) */ {
 public:
  Next_76d();
  virtual ~Next_76d();

  Next_76d(const Next_76d& from);
  Next_76d(Next_76d&& from) noexcept
    : Next_76d() {
    *this = ::std::move(from);
  }

  inline Next_76d& operator=(const Next_76d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Next_76d& operator=(Next_76d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Next_76d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Next_76d* internal_default_instance() {
    return reinterpret_cast<const Next_76d*>(
               &_Next_76d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Next_76d& a, Next_76d& b) {
    a.Swap(&b);
  }
  inline void Swap(Next_76d* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Next_76d* New() const final {
    return CreateMaybeMessage<Next_76d>(nullptr);
  }

  Next_76d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Next_76d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Next_76d& from);
  void MergeFrom(const Next_76d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Next_76d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Next_76d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingAngleFieldNumber = 1,
    kViewRangeFieldNumber = 2,
    kViewRangeAvailabilityFieldNumber = 3,
  };
  // optional double heading_angle = 1;
  bool has_heading_angle() const;
  private:
  bool _internal_has_heading_angle() const;
  public:
  void clear_heading_angle();
  double heading_angle() const;
  void set_heading_angle(double value);
  private:
  double _internal_heading_angle() const;
  void _internal_set_heading_angle(double value);
  public:

  // optional double view_range = 2;
  bool has_view_range() const;
  private:
  bool _internal_has_view_range() const;
  public:
  void clear_view_range();
  double view_range() const;
  void set_view_range(double value);
  private:
  double _internal_view_range() const;
  void _internal_set_view_range(double value);
  public:

  // optional bool view_range_availability = 3;
  bool has_view_range_availability() const;
  private:
  bool _internal_has_view_range_availability() const;
  public:
  void clear_view_range_availability();
  bool view_range_availability() const;
  void set_view_range_availability(bool value);
  private:
  bool _internal_view_range_availability() const;
  void _internal_set_view_range_availability(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Next_76d)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double heading_angle_;
  double view_range_;
  bool view_range_availability_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Details_739 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Details_739) */ {
 public:
  Details_739();
  virtual ~Details_739();

  Details_739(const Details_739& from);
  Details_739(Details_739&& from) noexcept
    : Details_739() {
    *this = ::std::move(from);
  }

  inline Details_739& operator=(const Details_739& from) {
    CopyFrom(from);
    return *this;
  }
  inline Details_739& operator=(Details_739&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Details_739& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details_739* internal_default_instance() {
    return reinterpret_cast<const Details_739*>(
               &_Details_739_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Details_739& a, Details_739& b) {
    a.Swap(&b);
  }
  inline void Swap(Details_739* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Details_739* New() const final {
    return CreateMaybeMessage<Details_739>(nullptr);
  }

  Details_739* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Details_739>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Details_739& from);
  void MergeFrom(const Details_739& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details_739* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Details_739";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclePosXFieldNumber = 2,
    kObstacleIdFieldNumber = 1,
    kReseved2FieldNumber = 3,
    kObstaclePosYFieldNumber = 4,
    kBlinkerInfoFieldNumber = 5,
    kCutInAndOutFieldNumber = 6,
    kObstacleRelVelXFieldNumber = 7,
    kObstacleTypeFieldNumber = 8,
    kObstacleStatusFieldNumber = 10,
    kReserved3FieldNumber = 9,
    kObstacleBrakeLightsFieldNumber = 11,
    kReserved4FieldNumber = 12,
    kObstacleValidFieldNumber = 13,
  };
  // optional double obstacle_pos_x = 2;
  bool has_obstacle_pos_x() const;
  private:
  bool _internal_has_obstacle_pos_x() const;
  public:
  void clear_obstacle_pos_x();
  double obstacle_pos_x() const;
  void set_obstacle_pos_x(double value);
  private:
  double _internal_obstacle_pos_x() const;
  void _internal_set_obstacle_pos_x(double value);
  public:

  // optional int32 obstacle_id = 1;
  bool has_obstacle_id() const;
  private:
  bool _internal_has_obstacle_id() const;
  public:
  void clear_obstacle_id();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_id() const;
  void set_obstacle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obstacle_id() const;
  void _internal_set_obstacle_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 reseved_2 = 3;
  bool has_reseved_2() const;
  private:
  bool _internal_has_reseved_2() const;
  public:
  void clear_reseved_2();
  ::PROTOBUF_NAMESPACE_ID::int32 reseved_2() const;
  void set_reseved_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reseved_2() const;
  void _internal_set_reseved_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double obstacle_pos_y = 4;
  bool has_obstacle_pos_y() const;
  private:
  bool _internal_has_obstacle_pos_y() const;
  public:
  void clear_obstacle_pos_y();
  double obstacle_pos_y() const;
  void set_obstacle_pos_y(double value);
  private:
  double _internal_obstacle_pos_y() const;
  void _internal_set_obstacle_pos_y(double value);
  public:

  // optional int32 blinker_info = 5;
  bool has_blinker_info() const;
  private:
  bool _internal_has_blinker_info() const;
  public:
  void clear_blinker_info();
  ::PROTOBUF_NAMESPACE_ID::int32 blinker_info() const;
  void set_blinker_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blinker_info() const;
  void _internal_set_blinker_info(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cut_in_and_out = 6;
  bool has_cut_in_and_out() const;
  private:
  bool _internal_has_cut_in_and_out() const;
  public:
  void clear_cut_in_and_out();
  ::PROTOBUF_NAMESPACE_ID::int32 cut_in_and_out() const;
  void set_cut_in_and_out(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cut_in_and_out() const;
  void _internal_set_cut_in_and_out(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double obstacle_rel_vel_x = 7;
  bool has_obstacle_rel_vel_x() const;
  private:
  bool _internal_has_obstacle_rel_vel_x() const;
  public:
  void clear_obstacle_rel_vel_x();
  double obstacle_rel_vel_x() const;
  void set_obstacle_rel_vel_x(double value);
  private:
  double _internal_obstacle_rel_vel_x() const;
  void _internal_set_obstacle_rel_vel_x(double value);
  public:

  // optional int32 obstacle_type = 8;
  bool has_obstacle_type() const;
  private:
  bool _internal_has_obstacle_type() const;
  public:
  void clear_obstacle_type();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_type() const;
  void set_obstacle_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obstacle_type() const;
  void _internal_set_obstacle_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 obstacle_status = 10;
  bool has_obstacle_status() const;
  private:
  bool _internal_has_obstacle_status() const;
  public:
  void clear_obstacle_status();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_status() const;
  void set_obstacle_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obstacle_status() const;
  void _internal_set_obstacle_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool reserved_3 = 9;
  bool has_reserved_3() const;
  private:
  bool _internal_has_reserved_3() const;
  public:
  void clear_reserved_3();
  bool reserved_3() const;
  void set_reserved_3(bool value);
  private:
  bool _internal_reserved_3() const;
  void _internal_set_reserved_3(bool value);
  public:

  // optional bool obstacle_brake_lights = 11;
  bool has_obstacle_brake_lights() const;
  private:
  bool _internal_has_obstacle_brake_lights() const;
  public:
  void clear_obstacle_brake_lights();
  bool obstacle_brake_lights() const;
  void set_obstacle_brake_lights(bool value);
  private:
  bool _internal_obstacle_brake_lights() const;
  void _internal_set_obstacle_brake_lights(bool value);
  public:

  // optional int32 reserved_4 = 12;
  bool has_reserved_4() const;
  private:
  bool _internal_has_reserved_4() const;
  public:
  void clear_reserved_4();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_4() const;
  void set_reserved_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reserved_4() const;
  void _internal_set_reserved_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 obstacle_valid = 13;
  bool has_obstacle_valid() const;
  private:
  bool _internal_has_obstacle_valid() const;
  public:
  void clear_obstacle_valid();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_valid() const;
  void set_obstacle_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obstacle_valid() const;
  void _internal_set_obstacle_valid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Details_739)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double obstacle_pos_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 reseved_2_;
  double obstacle_pos_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 blinker_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 cut_in_and_out_;
  double obstacle_rel_vel_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_status_;
  bool reserved_3_;
  bool obstacle_brake_lights_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_4_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_valid_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Details_73a :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Details_73a) */ {
 public:
  Details_73a();
  virtual ~Details_73a();

  Details_73a(const Details_73a& from);
  Details_73a(Details_73a&& from) noexcept
    : Details_73a() {
    *this = ::std::move(from);
  }

  inline Details_73a& operator=(const Details_73a& from) {
    CopyFrom(from);
    return *this;
  }
  inline Details_73a& operator=(Details_73a&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Details_73a& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details_73a* internal_default_instance() {
    return reinterpret_cast<const Details_73a*>(
               &_Details_73a_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Details_73a& a, Details_73a& b) {
    a.Swap(&b);
  }
  inline void Swap(Details_73a* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Details_73a* New() const final {
    return CreateMaybeMessage<Details_73a>(nullptr);
  }

  Details_73a* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Details_73a>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Details_73a& from);
  void MergeFrom(const Details_73a& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details_73a* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Details_73a";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleLengthFieldNumber = 1,
    kObstacleWidthFieldNumber = 2,
    kObstacleAgeFieldNumber = 3,
    kObstacleLaneFieldNumber = 4,
    kRadarPosXFieldNumber = 7,
    kRadarVelXFieldNumber = 8,
    kCipvFlagFieldNumber = 5,
    kReserved5FieldNumber = 6,
    kReserved6FieldNumber = 10,
    kReserved7FieldNumber = 12,
    kRadarMatchConfidenceFieldNumber = 9,
    kMatchedRadarIdFieldNumber = 11,
  };
  // optional double obstacle_length = 1;
  bool has_obstacle_length() const;
  private:
  bool _internal_has_obstacle_length() const;
  public:
  void clear_obstacle_length();
  double obstacle_length() const;
  void set_obstacle_length(double value);
  private:
  double _internal_obstacle_length() const;
  void _internal_set_obstacle_length(double value);
  public:

  // optional double obstacle_width = 2;
  bool has_obstacle_width() const;
  private:
  bool _internal_has_obstacle_width() const;
  public:
  void clear_obstacle_width();
  double obstacle_width() const;
  void set_obstacle_width(double value);
  private:
  double _internal_obstacle_width() const;
  void _internal_set_obstacle_width(double value);
  public:

  // optional int32 obstacle_age = 3;
  bool has_obstacle_age() const;
  private:
  bool _internal_has_obstacle_age() const;
  public:
  void clear_obstacle_age();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_age() const;
  void set_obstacle_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obstacle_age() const;
  void _internal_set_obstacle_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 obstacle_lane = 4;
  bool has_obstacle_lane() const;
  private:
  bool _internal_has_obstacle_lane() const;
  public:
  void clear_obstacle_lane();
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_lane() const;
  void set_obstacle_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obstacle_lane() const;
  void _internal_set_obstacle_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double radar_pos_x = 7;
  bool has_radar_pos_x() const;
  private:
  bool _internal_has_radar_pos_x() const;
  public:
  void clear_radar_pos_x();
  double radar_pos_x() const;
  void set_radar_pos_x(double value);
  private:
  double _internal_radar_pos_x() const;
  void _internal_set_radar_pos_x(double value);
  public:

  // optional double radar_vel_x = 8;
  bool has_radar_vel_x() const;
  private:
  bool _internal_has_radar_vel_x() const;
  public:
  void clear_radar_vel_x();
  double radar_vel_x() const;
  void set_radar_vel_x(double value);
  private:
  double _internal_radar_vel_x() const;
  void _internal_set_radar_vel_x(double value);
  public:

  // optional bool cipv_flag = 5;
  bool has_cipv_flag() const;
  private:
  bool _internal_has_cipv_flag() const;
  public:
  void clear_cipv_flag();
  bool cipv_flag() const;
  void set_cipv_flag(bool value);
  private:
  bool _internal_cipv_flag() const;
  void _internal_set_cipv_flag(bool value);
  public:

  // optional bool reserved_5 = 6;
  bool has_reserved_5() const;
  private:
  bool _internal_has_reserved_5() const;
  public:
  void clear_reserved_5();
  bool reserved_5() const;
  void set_reserved_5(bool value);
  private:
  bool _internal_reserved_5() const;
  void _internal_set_reserved_5(bool value);
  public:

  // optional bool reserved_6 = 10;
  bool has_reserved_6() const;
  private:
  bool _internal_has_reserved_6() const;
  public:
  void clear_reserved_6();
  bool reserved_6() const;
  void set_reserved_6(bool value);
  private:
  bool _internal_reserved_6() const;
  void _internal_set_reserved_6(bool value);
  public:

  // optional bool reserved_7 = 12;
  bool has_reserved_7() const;
  private:
  bool _internal_has_reserved_7() const;
  public:
  void clear_reserved_7();
  bool reserved_7() const;
  void set_reserved_7(bool value);
  private:
  bool _internal_reserved_7() const;
  void _internal_set_reserved_7(bool value);
  public:

  // optional int32 radar_match_confidence = 9;
  bool has_radar_match_confidence() const;
  private:
  bool _internal_has_radar_match_confidence() const;
  public:
  void clear_radar_match_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 radar_match_confidence() const;
  void set_radar_match_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_radar_match_confidence() const;
  void _internal_set_radar_match_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 matched_radar_id = 11;
  bool has_matched_radar_id() const;
  private:
  bool _internal_has_matched_radar_id() const;
  public:
  void clear_matched_radar_id();
  ::PROTOBUF_NAMESPACE_ID::int32 matched_radar_id() const;
  void set_matched_radar_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matched_radar_id() const;
  void _internal_set_matched_radar_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Details_73a)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double obstacle_length_;
  double obstacle_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_age_;
  ::PROTOBUF_NAMESPACE_ID::int32 obstacle_lane_;
  double radar_pos_x_;
  double radar_vel_x_;
  bool cipv_flag_;
  bool reserved_5_;
  bool reserved_6_;
  bool reserved_7_;
  ::PROTOBUF_NAMESPACE_ID::int32 radar_match_confidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 matched_radar_id_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Details_73b :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Details_73b) */ {
 public:
  Details_73b();
  virtual ~Details_73b();

  Details_73b(const Details_73b& from);
  Details_73b(Details_73b&& from) noexcept
    : Details_73b() {
    *this = ::std::move(from);
  }

  inline Details_73b& operator=(const Details_73b& from) {
    CopyFrom(from);
    return *this;
  }
  inline Details_73b& operator=(Details_73b&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Details_73b& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Details_73b* internal_default_instance() {
    return reinterpret_cast<const Details_73b*>(
               &_Details_73b_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Details_73b& a, Details_73b& b) {
    a.Swap(&b);
  }
  inline void Swap(Details_73b* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Details_73b* New() const final {
    return CreateMaybeMessage<Details_73b>(nullptr);
  }

  Details_73b* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Details_73b>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Details_73b& from);
  void MergeFrom(const Details_73b& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Details_73b* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Details_73b";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleAngleRateFieldNumber = 1,
    kObstacleScaleChangeFieldNumber = 2,
    kObjectAccelXFieldNumber = 3,
    kReserved8FieldNumber = 4,
    kObstacleReplacedFieldNumber = 5,
    kObstacleAngleFieldNumber = 7,
    kReserved9FieldNumber = 6,
  };
  // optional double obstacle_angle_rate = 1;
  bool has_obstacle_angle_rate() const;
  private:
  bool _internal_has_obstacle_angle_rate() const;
  public:
  void clear_obstacle_angle_rate();
  double obstacle_angle_rate() const;
  void set_obstacle_angle_rate(double value);
  private:
  double _internal_obstacle_angle_rate() const;
  void _internal_set_obstacle_angle_rate(double value);
  public:

  // optional double obstacle_scale_change = 2;
  bool has_obstacle_scale_change() const;
  private:
  bool _internal_has_obstacle_scale_change() const;
  public:
  void clear_obstacle_scale_change();
  double obstacle_scale_change() const;
  void set_obstacle_scale_change(double value);
  private:
  double _internal_obstacle_scale_change() const;
  void _internal_set_obstacle_scale_change(double value);
  public:

  // optional double object_accel_x = 3;
  bool has_object_accel_x() const;
  private:
  bool _internal_has_object_accel_x() const;
  public:
  void clear_object_accel_x();
  double object_accel_x() const;
  void set_object_accel_x(double value);
  private:
  double _internal_object_accel_x() const;
  void _internal_set_object_accel_x(double value);
  public:

  // optional int32 reserved_8 = 4;
  bool has_reserved_8() const;
  private:
  bool _internal_has_reserved_8() const;
  public:
  void clear_reserved_8();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_8() const;
  void set_reserved_8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reserved_8() const;
  void _internal_set_reserved_8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool obstacle_replaced = 5;
  bool has_obstacle_replaced() const;
  private:
  bool _internal_has_obstacle_replaced() const;
  public:
  void clear_obstacle_replaced();
  bool obstacle_replaced() const;
  void set_obstacle_replaced(bool value);
  private:
  bool _internal_obstacle_replaced() const;
  void _internal_set_obstacle_replaced(bool value);
  public:

  // optional double obstacle_angle = 7;
  bool has_obstacle_angle() const;
  private:
  bool _internal_has_obstacle_angle() const;
  public:
  void clear_obstacle_angle();
  double obstacle_angle() const;
  void set_obstacle_angle(double value);
  private:
  double _internal_obstacle_angle() const;
  void _internal_set_obstacle_angle(double value);
  public:

  // optional int32 reserved_9 = 6;
  bool has_reserved_9() const;
  private:
  bool _internal_has_reserved_9() const;
  public:
  void clear_reserved_9();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_9() const;
  void set_reserved_9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reserved_9() const;
  void _internal_set_reserved_9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Details_73b)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double obstacle_angle_rate_;
  double obstacle_scale_change_;
  double object_accel_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_8_;
  bool obstacle_replaced_;
  double obstacle_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_9_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// -------------------------------------------------------------------

class Mobileye :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Mobileye) */ {
 public:
  Mobileye();
  virtual ~Mobileye();

  Mobileye(const Mobileye& from);
  Mobileye(Mobileye&& from) noexcept
    : Mobileye() {
    *this = ::std::move(from);
  }

  inline Mobileye& operator=(const Mobileye& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mobileye& operator=(Mobileye&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mobileye& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mobileye* internal_default_instance() {
    return reinterpret_cast<const Mobileye*>(
               &_Mobileye_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Mobileye& a, Mobileye& b) {
    a.Swap(&b);
  }
  inline void Swap(Mobileye* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mobileye* New() const final {
    return CreateMaybeMessage<Mobileye>(nullptr);
  }

  Mobileye* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mobileye>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mobileye& from);
  void MergeFrom(const Mobileye& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mobileye* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Mobileye";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fmobileye_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetails739FieldNumber = 5,
    kDetails73AFieldNumber = 6,
    kDetails73BFieldNumber = 7,
    kNext76CFieldNumber = 14,
    kNext76DFieldNumber = 15,
    kHeaderFieldNumber = 1,
    kAftermarket669FieldNumber = 2,
    kDetails737FieldNumber = 3,
    kDetails738FieldNumber = 4,
    kLka766FieldNumber = 8,
    kLka767FieldNumber = 9,
    kLka768FieldNumber = 10,
    kLka769FieldNumber = 11,
    kReference76AFieldNumber = 12,
    kNum76BFieldNumber = 13,
  };
  // repeated .apollo.drivers.Details_739 details_739 = 5;
  int details_739_size() const;
  private:
  int _internal_details_739_size() const;
  public:
  void clear_details_739();
  ::apollo::drivers::Details_739* mutable_details_739(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_739 >*
      mutable_details_739();
  private:
  const ::apollo::drivers::Details_739& _internal_details_739(int index) const;
  ::apollo::drivers::Details_739* _internal_add_details_739();
  public:
  const ::apollo::drivers::Details_739& details_739(int index) const;
  ::apollo::drivers::Details_739* add_details_739();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_739 >&
      details_739() const;

  // repeated .apollo.drivers.Details_73a details_73a = 6;
  int details_73a_size() const;
  private:
  int _internal_details_73a_size() const;
  public:
  void clear_details_73a();
  ::apollo::drivers::Details_73a* mutable_details_73a(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73a >*
      mutable_details_73a();
  private:
  const ::apollo::drivers::Details_73a& _internal_details_73a(int index) const;
  ::apollo::drivers::Details_73a* _internal_add_details_73a();
  public:
  const ::apollo::drivers::Details_73a& details_73a(int index) const;
  ::apollo::drivers::Details_73a* add_details_73a();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73a >&
      details_73a() const;

  // repeated .apollo.drivers.Details_73b details_73b = 7;
  int details_73b_size() const;
  private:
  int _internal_details_73b_size() const;
  public:
  void clear_details_73b();
  ::apollo::drivers::Details_73b* mutable_details_73b(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73b >*
      mutable_details_73b();
  private:
  const ::apollo::drivers::Details_73b& _internal_details_73b(int index) const;
  ::apollo::drivers::Details_73b* _internal_add_details_73b();
  public:
  const ::apollo::drivers::Details_73b& details_73b(int index) const;
  ::apollo::drivers::Details_73b* add_details_73b();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73b >&
      details_73b() const;

  // repeated .apollo.drivers.Next_76c next_76c = 14;
  int next_76c_size() const;
  private:
  int _internal_next_76c_size() const;
  public:
  void clear_next_76c();
  ::apollo::drivers::Next_76c* mutable_next_76c(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76c >*
      mutable_next_76c();
  private:
  const ::apollo::drivers::Next_76c& _internal_next_76c(int index) const;
  ::apollo::drivers::Next_76c* _internal_add_next_76c();
  public:
  const ::apollo::drivers::Next_76c& next_76c(int index) const;
  ::apollo::drivers::Next_76c* add_next_76c();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76c >&
      next_76c() const;

  // repeated .apollo.drivers.Next_76d next_76d = 15;
  int next_76d_size() const;
  private:
  int _internal_next_76d_size() const;
  public:
  void clear_next_76d();
  ::apollo::drivers::Next_76d* mutable_next_76d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76d >*
      mutable_next_76d();
  private:
  const ::apollo::drivers::Next_76d& _internal_next_76d(int index) const;
  ::apollo::drivers::Next_76d* _internal_add_next_76d();
  public:
  const ::apollo::drivers::Next_76d& next_76d(int index) const;
  ::apollo::drivers::Next_76d* add_next_76d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76d >&
      next_76d() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
  bool has_aftermarket_669() const;
  private:
  bool _internal_has_aftermarket_669() const;
  public:
  void clear_aftermarket_669();
  const ::apollo::drivers::Aftermarket_669& aftermarket_669() const;
  ::apollo::drivers::Aftermarket_669* release_aftermarket_669();
  ::apollo::drivers::Aftermarket_669* mutable_aftermarket_669();
  void set_allocated_aftermarket_669(::apollo::drivers::Aftermarket_669* aftermarket_669);
  private:
  const ::apollo::drivers::Aftermarket_669& _internal_aftermarket_669() const;
  ::apollo::drivers::Aftermarket_669* _internal_mutable_aftermarket_669();
  public:

  // optional .apollo.drivers.Details_737 details_737 = 3;
  bool has_details_737() const;
  private:
  bool _internal_has_details_737() const;
  public:
  void clear_details_737();
  const ::apollo::drivers::Details_737& details_737() const;
  ::apollo::drivers::Details_737* release_details_737();
  ::apollo::drivers::Details_737* mutable_details_737();
  void set_allocated_details_737(::apollo::drivers::Details_737* details_737);
  private:
  const ::apollo::drivers::Details_737& _internal_details_737() const;
  ::apollo::drivers::Details_737* _internal_mutable_details_737();
  public:

  // optional .apollo.drivers.Details_738 details_738 = 4;
  bool has_details_738() const;
  private:
  bool _internal_has_details_738() const;
  public:
  void clear_details_738();
  const ::apollo::drivers::Details_738& details_738() const;
  ::apollo::drivers::Details_738* release_details_738();
  ::apollo::drivers::Details_738* mutable_details_738();
  void set_allocated_details_738(::apollo::drivers::Details_738* details_738);
  private:
  const ::apollo::drivers::Details_738& _internal_details_738() const;
  ::apollo::drivers::Details_738* _internal_mutable_details_738();
  public:

  // optional .apollo.drivers.Lka_766 lka_766 = 8;
  bool has_lka_766() const;
  private:
  bool _internal_has_lka_766() const;
  public:
  void clear_lka_766();
  const ::apollo::drivers::Lka_766& lka_766() const;
  ::apollo::drivers::Lka_766* release_lka_766();
  ::apollo::drivers::Lka_766* mutable_lka_766();
  void set_allocated_lka_766(::apollo::drivers::Lka_766* lka_766);
  private:
  const ::apollo::drivers::Lka_766& _internal_lka_766() const;
  ::apollo::drivers::Lka_766* _internal_mutable_lka_766();
  public:

  // optional .apollo.drivers.Lka_767 lka_767 = 9;
  bool has_lka_767() const;
  private:
  bool _internal_has_lka_767() const;
  public:
  void clear_lka_767();
  const ::apollo::drivers::Lka_767& lka_767() const;
  ::apollo::drivers::Lka_767* release_lka_767();
  ::apollo::drivers::Lka_767* mutable_lka_767();
  void set_allocated_lka_767(::apollo::drivers::Lka_767* lka_767);
  private:
  const ::apollo::drivers::Lka_767& _internal_lka_767() const;
  ::apollo::drivers::Lka_767* _internal_mutable_lka_767();
  public:

  // optional .apollo.drivers.Lka_768 lka_768 = 10;
  bool has_lka_768() const;
  private:
  bool _internal_has_lka_768() const;
  public:
  void clear_lka_768();
  const ::apollo::drivers::Lka_768& lka_768() const;
  ::apollo::drivers::Lka_768* release_lka_768();
  ::apollo::drivers::Lka_768* mutable_lka_768();
  void set_allocated_lka_768(::apollo::drivers::Lka_768* lka_768);
  private:
  const ::apollo::drivers::Lka_768& _internal_lka_768() const;
  ::apollo::drivers::Lka_768* _internal_mutable_lka_768();
  public:

  // optional .apollo.drivers.Lka_769 lka_769 = 11;
  bool has_lka_769() const;
  private:
  bool _internal_has_lka_769() const;
  public:
  void clear_lka_769();
  const ::apollo::drivers::Lka_769& lka_769() const;
  ::apollo::drivers::Lka_769* release_lka_769();
  ::apollo::drivers::Lka_769* mutable_lka_769();
  void set_allocated_lka_769(::apollo::drivers::Lka_769* lka_769);
  private:
  const ::apollo::drivers::Lka_769& _internal_lka_769() const;
  ::apollo::drivers::Lka_769* _internal_mutable_lka_769();
  public:

  // optional .apollo.drivers.Reference_76a reference_76a = 12;
  bool has_reference_76a() const;
  private:
  bool _internal_has_reference_76a() const;
  public:
  void clear_reference_76a();
  const ::apollo::drivers::Reference_76a& reference_76a() const;
  ::apollo::drivers::Reference_76a* release_reference_76a();
  ::apollo::drivers::Reference_76a* mutable_reference_76a();
  void set_allocated_reference_76a(::apollo::drivers::Reference_76a* reference_76a);
  private:
  const ::apollo::drivers::Reference_76a& _internal_reference_76a() const;
  ::apollo::drivers::Reference_76a* _internal_mutable_reference_76a();
  public:

  // optional .apollo.drivers.Num_76b num_76b = 13;
  bool has_num_76b() const;
  private:
  bool _internal_has_num_76b() const;
  public:
  void clear_num_76b();
  const ::apollo::drivers::Num_76b& num_76b() const;
  ::apollo::drivers::Num_76b* release_num_76b();
  ::apollo::drivers::Num_76b* mutable_num_76b();
  void set_allocated_num_76b(::apollo::drivers::Num_76b* num_76b);
  private:
  const ::apollo::drivers::Num_76b& _internal_num_76b() const;
  ::apollo::drivers::Num_76b* _internal_mutable_num_76b();
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Mobileye)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_739 > details_739_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73a > details_73a_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73b > details_73b_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76c > next_76c_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76d > next_76d_;
  ::apollo::common::Header* header_;
  ::apollo::drivers::Aftermarket_669* aftermarket_669_;
  ::apollo::drivers::Details_737* details_737_;
  ::apollo::drivers::Details_738* details_738_;
  ::apollo::drivers::Lka_766* lka_766_;
  ::apollo::drivers::Lka_767* lka_767_;
  ::apollo::drivers::Lka_768* lka_768_;
  ::apollo::drivers::Lka_769* lka_769_;
  ::apollo::drivers::Reference_76a* reference_76a_;
  ::apollo::drivers::Num_76b* num_76b_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fmobileye_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lka_768

// optional int32 lane_type = 1;
inline bool Lka_768::_internal_has_lane_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Lka_768::has_lane_type() const {
  return _internal_has_lane_type();
}
inline void Lka_768::clear_lane_type() {
  lane_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_768::_internal_lane_type() const {
  return lane_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_768::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.lane_type)
  return _internal_lane_type();
}
inline void Lka_768::_internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  lane_type_ = value;
}
inline void Lka_768::set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.lane_type)
}

// optional int32 quality = 2;
inline bool Lka_768::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Lka_768::has_quality() const {
  return _internal_has_quality();
}
inline void Lka_768::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_768::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_768::quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.quality)
  return _internal_quality();
}
inline void Lka_768::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quality_ = value;
}
inline void Lka_768::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.quality)
}

// optional int32 model_degree = 3;
inline bool Lka_768::_internal_has_model_degree() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Lka_768::has_model_degree() const {
  return _internal_has_model_degree();
}
inline void Lka_768::clear_model_degree() {
  model_degree_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_768::_internal_model_degree() const {
  return model_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_768::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.model_degree)
  return _internal_model_degree();
}
inline void Lka_768::_internal_set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  model_degree_ = value;
}
inline void Lka_768::set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_degree(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.model_degree)
}

// optional double position = 4;
inline bool Lka_768::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Lka_768::has_position() const {
  return _internal_has_position();
}
inline void Lka_768::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Lka_768::_internal_position() const {
  return position_;
}
inline double Lka_768::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.position)
  return _internal_position();
}
inline void Lka_768::_internal_set_position(double value) {
  _has_bits_[0] |= 0x00000004u;
  position_ = value;
}
inline void Lka_768::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.position)
}

// optional double curvature = 5;
inline bool Lka_768::_internal_has_curvature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Lka_768::has_curvature() const {
  return _internal_has_curvature();
}
inline void Lka_768::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Lka_768::_internal_curvature() const {
  return curvature_;
}
inline double Lka_768::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.curvature)
  return _internal_curvature();
}
inline void Lka_768::_internal_set_curvature(double value) {
  _has_bits_[0] |= 0x00000008u;
  curvature_ = value;
}
inline void Lka_768::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.curvature)
}

// optional double curvature_derivative = 6;
inline bool Lka_768::_internal_has_curvature_derivative() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Lka_768::has_curvature_derivative() const {
  return _internal_has_curvature_derivative();
}
inline void Lka_768::clear_curvature_derivative() {
  curvature_derivative_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Lka_768::_internal_curvature_derivative() const {
  return curvature_derivative_;
}
inline double Lka_768::curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.curvature_derivative)
  return _internal_curvature_derivative();
}
inline void Lka_768::_internal_set_curvature_derivative(double value) {
  _has_bits_[0] |= 0x00000010u;
  curvature_derivative_ = value;
}
inline void Lka_768::set_curvature_derivative(double value) {
  _internal_set_curvature_derivative(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.curvature_derivative)
}

// optional double width_right_marking = 7;
inline bool Lka_768::_internal_has_width_right_marking() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Lka_768::has_width_right_marking() const {
  return _internal_has_width_right_marking();
}
inline void Lka_768::clear_width_right_marking() {
  width_right_marking_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Lka_768::_internal_width_right_marking() const {
  return width_right_marking_;
}
inline double Lka_768::width_right_marking() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_768.width_right_marking)
  return _internal_width_right_marking();
}
inline void Lka_768::_internal_set_width_right_marking(double value) {
  _has_bits_[0] |= 0x00000020u;
  width_right_marking_ = value;
}
inline void Lka_768::set_width_right_marking(double value) {
  _internal_set_width_right_marking(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_768.width_right_marking)
}

// -------------------------------------------------------------------

// Num_76b

// optional int32 num_of_next_lane_mark_reported = 1;
inline bool Num_76b::_internal_has_num_of_next_lane_mark_reported() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Num_76b::has_num_of_next_lane_mark_reported() const {
  return _internal_has_num_of_next_lane_mark_reported();
}
inline void Num_76b::clear_num_of_next_lane_mark_reported() {
  num_of_next_lane_mark_reported_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Num_76b::_internal_num_of_next_lane_mark_reported() const {
  return num_of_next_lane_mark_reported_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Num_76b::num_of_next_lane_mark_reported() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Num_76b.num_of_next_lane_mark_reported)
  return _internal_num_of_next_lane_mark_reported();
}
inline void Num_76b::_internal_set_num_of_next_lane_mark_reported(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_of_next_lane_mark_reported_ = value;
}
inline void Num_76b::set_num_of_next_lane_mark_reported(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_of_next_lane_mark_reported(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Num_76b.num_of_next_lane_mark_reported)
}

// -------------------------------------------------------------------

// Aftermarket_669

// optional int32 lane_conf_left = 1;
inline bool Aftermarket_669::_internal_has_lane_conf_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Aftermarket_669::has_lane_conf_left() const {
  return _internal_has_lane_conf_left();
}
inline void Aftermarket_669::clear_lane_conf_left() {
  lane_conf_left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aftermarket_669::_internal_lane_conf_left() const {
  return lane_conf_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aftermarket_669::lane_conf_left() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.lane_conf_left)
  return _internal_lane_conf_left();
}
inline void Aftermarket_669::_internal_set_lane_conf_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  lane_conf_left_ = value;
}
inline void Aftermarket_669::set_lane_conf_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_conf_left(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.lane_conf_left)
}

// optional bool ldw_availability_left = 2;
inline bool Aftermarket_669::_internal_has_ldw_availability_left() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Aftermarket_669::has_ldw_availability_left() const {
  return _internal_has_ldw_availability_left();
}
inline void Aftermarket_669::clear_ldw_availability_left() {
  ldw_availability_left_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Aftermarket_669::_internal_ldw_availability_left() const {
  return ldw_availability_left_;
}
inline bool Aftermarket_669::ldw_availability_left() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.ldw_availability_left)
  return _internal_ldw_availability_left();
}
inline void Aftermarket_669::_internal_set_ldw_availability_left(bool value) {
  _has_bits_[0] |= 0x00000008u;
  ldw_availability_left_ = value;
}
inline void Aftermarket_669::set_ldw_availability_left(bool value) {
  _internal_set_ldw_availability_left(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.ldw_availability_left)
}

// optional int32 lane_type_left = 3;
inline bool Aftermarket_669::_internal_has_lane_type_left() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Aftermarket_669::has_lane_type_left() const {
  return _internal_has_lane_type_left();
}
inline void Aftermarket_669::clear_lane_type_left() {
  lane_type_left_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aftermarket_669::_internal_lane_type_left() const {
  return lane_type_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aftermarket_669::lane_type_left() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.lane_type_left)
  return _internal_lane_type_left();
}
inline void Aftermarket_669::_internal_set_lane_type_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lane_type_left_ = value;
}
inline void Aftermarket_669::set_lane_type_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_type_left(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.lane_type_left)
}

// optional double distance_to_lane_l = 4;
inline bool Aftermarket_669::_internal_has_distance_to_lane_l() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Aftermarket_669::has_distance_to_lane_l() const {
  return _internal_has_distance_to_lane_l();
}
inline void Aftermarket_669::clear_distance_to_lane_l() {
  distance_to_lane_l_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Aftermarket_669::_internal_distance_to_lane_l() const {
  return distance_to_lane_l_;
}
inline double Aftermarket_669::distance_to_lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.distance_to_lane_l)
  return _internal_distance_to_lane_l();
}
inline void Aftermarket_669::_internal_set_distance_to_lane_l(double value) {
  _has_bits_[0] |= 0x00000004u;
  distance_to_lane_l_ = value;
}
inline void Aftermarket_669::set_distance_to_lane_l(double value) {
  _internal_set_distance_to_lane_l(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.distance_to_lane_l)
}

// optional int32 lane_conf_right = 5;
inline bool Aftermarket_669::_internal_has_lane_conf_right() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Aftermarket_669::has_lane_conf_right() const {
  return _internal_has_lane_conf_right();
}
inline void Aftermarket_669::clear_lane_conf_right() {
  lane_conf_right_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aftermarket_669::_internal_lane_conf_right() const {
  return lane_conf_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aftermarket_669::lane_conf_right() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.lane_conf_right)
  return _internal_lane_conf_right();
}
inline void Aftermarket_669::_internal_set_lane_conf_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lane_conf_right_ = value;
}
inline void Aftermarket_669::set_lane_conf_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_conf_right(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.lane_conf_right)
}

// optional bool ldw_availability_right = 6;
inline bool Aftermarket_669::_internal_has_ldw_availability_right() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Aftermarket_669::has_ldw_availability_right() const {
  return _internal_has_ldw_availability_right();
}
inline void Aftermarket_669::clear_ldw_availability_right() {
  ldw_availability_right_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Aftermarket_669::_internal_ldw_availability_right() const {
  return ldw_availability_right_;
}
inline bool Aftermarket_669::ldw_availability_right() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.ldw_availability_right)
  return _internal_ldw_availability_right();
}
inline void Aftermarket_669::_internal_set_ldw_availability_right(bool value) {
  _has_bits_[0] |= 0x00000010u;
  ldw_availability_right_ = value;
}
inline void Aftermarket_669::set_ldw_availability_right(bool value) {
  _internal_set_ldw_availability_right(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.ldw_availability_right)
}

// optional int32 lane_type_right = 7;
inline bool Aftermarket_669::_internal_has_lane_type_right() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Aftermarket_669::has_lane_type_right() const {
  return _internal_has_lane_type_right();
}
inline void Aftermarket_669::clear_lane_type_right() {
  lane_type_right_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aftermarket_669::_internal_lane_type_right() const {
  return lane_type_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aftermarket_669::lane_type_right() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.lane_type_right)
  return _internal_lane_type_right();
}
inline void Aftermarket_669::_internal_set_lane_type_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  lane_type_right_ = value;
}
inline void Aftermarket_669::set_lane_type_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_type_right(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.lane_type_right)
}

// optional double distance_to_lane_r = 8;
inline bool Aftermarket_669::_internal_has_distance_to_lane_r() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Aftermarket_669::has_distance_to_lane_r() const {
  return _internal_has_distance_to_lane_r();
}
inline void Aftermarket_669::clear_distance_to_lane_r() {
  distance_to_lane_r_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Aftermarket_669::_internal_distance_to_lane_r() const {
  return distance_to_lane_r_;
}
inline double Aftermarket_669::distance_to_lane_r() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Aftermarket_669.distance_to_lane_r)
  return _internal_distance_to_lane_r();
}
inline void Aftermarket_669::_internal_set_distance_to_lane_r(double value) {
  _has_bits_[0] |= 0x00000040u;
  distance_to_lane_r_ = value;
}
inline void Aftermarket_669::set_distance_to_lane_r(double value) {
  _internal_set_distance_to_lane_r(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Aftermarket_669.distance_to_lane_r)
}

// -------------------------------------------------------------------

// Lka_769

// optional double heading_angle = 1;
inline bool Lka_769::_internal_has_heading_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Lka_769::has_heading_angle() const {
  return _internal_has_heading_angle();
}
inline void Lka_769::clear_heading_angle() {
  heading_angle_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Lka_769::_internal_heading_angle() const {
  return heading_angle_;
}
inline double Lka_769::heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_769.heading_angle)
  return _internal_heading_angle();
}
inline void Lka_769::_internal_set_heading_angle(double value) {
  _has_bits_[0] |= 0x00000001u;
  heading_angle_ = value;
}
inline void Lka_769::set_heading_angle(double value) {
  _internal_set_heading_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_769.heading_angle)
}

// optional double view_range = 2;
inline bool Lka_769::_internal_has_view_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Lka_769::has_view_range() const {
  return _internal_has_view_range();
}
inline void Lka_769::clear_view_range() {
  view_range_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Lka_769::_internal_view_range() const {
  return view_range_;
}
inline double Lka_769::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_769.view_range)
  return _internal_view_range();
}
inline void Lka_769::_internal_set_view_range(double value) {
  _has_bits_[0] |= 0x00000002u;
  view_range_ = value;
}
inline void Lka_769::set_view_range(double value) {
  _internal_set_view_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_769.view_range)
}

// optional bool view_range_availability = 3;
inline bool Lka_769::_internal_has_view_range_availability() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Lka_769::has_view_range_availability() const {
  return _internal_has_view_range_availability();
}
inline void Lka_769::clear_view_range_availability() {
  view_range_availability_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Lka_769::_internal_view_range_availability() const {
  return view_range_availability_;
}
inline bool Lka_769::view_range_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_769.view_range_availability)
  return _internal_view_range_availability();
}
inline void Lka_769::_internal_set_view_range_availability(bool value) {
  _has_bits_[0] |= 0x00000004u;
  view_range_availability_ = value;
}
inline void Lka_769::set_view_range_availability(bool value) {
  _internal_set_view_range_availability(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_769.view_range_availability)
}

// -------------------------------------------------------------------

// Reference_76a

// optional double ref_point_1_position = 1;
inline bool Reference_76a::_internal_has_ref_point_1_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reference_76a::has_ref_point_1_position() const {
  return _internal_has_ref_point_1_position();
}
inline void Reference_76a::clear_ref_point_1_position() {
  ref_point_1_position_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Reference_76a::_internal_ref_point_1_position() const {
  return ref_point_1_position_;
}
inline double Reference_76a::ref_point_1_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_1_position)
  return _internal_ref_point_1_position();
}
inline void Reference_76a::_internal_set_ref_point_1_position(double value) {
  _has_bits_[0] |= 0x00000001u;
  ref_point_1_position_ = value;
}
inline void Reference_76a::set_ref_point_1_position(double value) {
  _internal_set_ref_point_1_position(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_1_position)
}

// optional double ref_point_1_distance = 2;
inline bool Reference_76a::_internal_has_ref_point_1_distance() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Reference_76a::has_ref_point_1_distance() const {
  return _internal_has_ref_point_1_distance();
}
inline void Reference_76a::clear_ref_point_1_distance() {
  ref_point_1_distance_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Reference_76a::_internal_ref_point_1_distance() const {
  return ref_point_1_distance_;
}
inline double Reference_76a::ref_point_1_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_1_distance)
  return _internal_ref_point_1_distance();
}
inline void Reference_76a::_internal_set_ref_point_1_distance(double value) {
  _has_bits_[0] |= 0x00000002u;
  ref_point_1_distance_ = value;
}
inline void Reference_76a::set_ref_point_1_distance(double value) {
  _internal_set_ref_point_1_distance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_1_distance)
}

// optional bool ref_point_1_validity = 3;
inline bool Reference_76a::_internal_has_ref_point_1_validity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Reference_76a::has_ref_point_1_validity() const {
  return _internal_has_ref_point_1_validity();
}
inline void Reference_76a::clear_ref_point_1_validity() {
  ref_point_1_validity_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Reference_76a::_internal_ref_point_1_validity() const {
  return ref_point_1_validity_;
}
inline bool Reference_76a::ref_point_1_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_1_validity)
  return _internal_ref_point_1_validity();
}
inline void Reference_76a::_internal_set_ref_point_1_validity(bool value) {
  _has_bits_[0] |= 0x00000010u;
  ref_point_1_validity_ = value;
}
inline void Reference_76a::set_ref_point_1_validity(bool value) {
  _internal_set_ref_point_1_validity(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_1_validity)
}

// optional double ref_point_2_position = 4;
inline bool Reference_76a::_internal_has_ref_point_2_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Reference_76a::has_ref_point_2_position() const {
  return _internal_has_ref_point_2_position();
}
inline void Reference_76a::clear_ref_point_2_position() {
  ref_point_2_position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Reference_76a::_internal_ref_point_2_position() const {
  return ref_point_2_position_;
}
inline double Reference_76a::ref_point_2_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_2_position)
  return _internal_ref_point_2_position();
}
inline void Reference_76a::_internal_set_ref_point_2_position(double value) {
  _has_bits_[0] |= 0x00000004u;
  ref_point_2_position_ = value;
}
inline void Reference_76a::set_ref_point_2_position(double value) {
  _internal_set_ref_point_2_position(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_2_position)
}

// optional double ref_point_2_distance = 5;
inline bool Reference_76a::_internal_has_ref_point_2_distance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Reference_76a::has_ref_point_2_distance() const {
  return _internal_has_ref_point_2_distance();
}
inline void Reference_76a::clear_ref_point_2_distance() {
  ref_point_2_distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Reference_76a::_internal_ref_point_2_distance() const {
  return ref_point_2_distance_;
}
inline double Reference_76a::ref_point_2_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_2_distance)
  return _internal_ref_point_2_distance();
}
inline void Reference_76a::_internal_set_ref_point_2_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  ref_point_2_distance_ = value;
}
inline void Reference_76a::set_ref_point_2_distance(double value) {
  _internal_set_ref_point_2_distance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_2_distance)
}

// optional bool ref_point_2_validity = 6;
inline bool Reference_76a::_internal_has_ref_point_2_validity() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Reference_76a::has_ref_point_2_validity() const {
  return _internal_has_ref_point_2_validity();
}
inline void Reference_76a::clear_ref_point_2_validity() {
  ref_point_2_validity_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Reference_76a::_internal_ref_point_2_validity() const {
  return ref_point_2_validity_;
}
inline bool Reference_76a::ref_point_2_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Reference_76a.ref_point_2_validity)
  return _internal_ref_point_2_validity();
}
inline void Reference_76a::_internal_set_ref_point_2_validity(bool value) {
  _has_bits_[0] |= 0x00000020u;
  ref_point_2_validity_ = value;
}
inline void Reference_76a::set_ref_point_2_validity(bool value) {
  _internal_set_ref_point_2_validity(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Reference_76a.ref_point_2_validity)
}

// -------------------------------------------------------------------

// Details_738

// optional int32 num_obstacles = 1;
inline bool Details_738::_internal_has_num_obstacles() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Details_738::has_num_obstacles() const {
  return _internal_has_num_obstacles();
}
inline void Details_738::clear_num_obstacles() {
  num_obstacles_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::_internal_num_obstacles() const {
  return num_obstacles_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::num_obstacles() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.num_obstacles)
  return _internal_num_obstacles();
}
inline void Details_738::_internal_set_num_obstacles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_obstacles_ = value;
}
inline void Details_738::set_num_obstacles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_obstacles(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.num_obstacles)
}

// optional int32 timestamp = 2;
inline bool Details_738::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Details_738::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Details_738::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.timestamp)
  return _internal_timestamp();
}
inline void Details_738::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void Details_738::set_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.timestamp)
}

// optional int32 application_version = 3;
inline bool Details_738::_internal_has_application_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Details_738::has_application_version() const {
  return _internal_has_application_version();
}
inline void Details_738::clear_application_version() {
  application_version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::_internal_application_version() const {
  return application_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::application_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.application_version)
  return _internal_application_version();
}
inline void Details_738::_internal_set_application_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  application_version_ = value;
}
inline void Details_738::set_application_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_application_version(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.application_version)
}

// optional int32 active_version_number_section = 4;
inline bool Details_738::_internal_has_active_version_number_section() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Details_738::has_active_version_number_section() const {
  return _internal_has_active_version_number_section();
}
inline void Details_738::clear_active_version_number_section() {
  active_version_number_section_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::_internal_active_version_number_section() const {
  return active_version_number_section_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::active_version_number_section() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.active_version_number_section)
  return _internal_active_version_number_section();
}
inline void Details_738::_internal_set_active_version_number_section(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  active_version_number_section_ = value;
}
inline void Details_738::set_active_version_number_section(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active_version_number_section(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.active_version_number_section)
}

// optional bool left_close_rang_cut_in = 5;
inline bool Details_738::_internal_has_left_close_rang_cut_in() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Details_738::has_left_close_rang_cut_in() const {
  return _internal_has_left_close_rang_cut_in();
}
inline void Details_738::clear_left_close_rang_cut_in() {
  left_close_rang_cut_in_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Details_738::_internal_left_close_rang_cut_in() const {
  return left_close_rang_cut_in_;
}
inline bool Details_738::left_close_rang_cut_in() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.left_close_rang_cut_in)
  return _internal_left_close_rang_cut_in();
}
inline void Details_738::_internal_set_left_close_rang_cut_in(bool value) {
  _has_bits_[0] |= 0x00000010u;
  left_close_rang_cut_in_ = value;
}
inline void Details_738::set_left_close_rang_cut_in(bool value) {
  _internal_set_left_close_rang_cut_in(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.left_close_rang_cut_in)
}

// optional bool right_close_rang_cut_in = 6;
inline bool Details_738::_internal_has_right_close_rang_cut_in() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Details_738::has_right_close_rang_cut_in() const {
  return _internal_has_right_close_rang_cut_in();
}
inline void Details_738::clear_right_close_rang_cut_in() {
  right_close_rang_cut_in_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Details_738::_internal_right_close_rang_cut_in() const {
  return right_close_rang_cut_in_;
}
inline bool Details_738::right_close_rang_cut_in() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.right_close_rang_cut_in)
  return _internal_right_close_rang_cut_in();
}
inline void Details_738::_internal_set_right_close_rang_cut_in(bool value) {
  _has_bits_[0] |= 0x00000020u;
  right_close_rang_cut_in_ = value;
}
inline void Details_738::set_right_close_rang_cut_in(bool value) {
  _internal_set_right_close_rang_cut_in(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.right_close_rang_cut_in)
}

// optional int32 go = 7;
inline bool Details_738::_internal_has_go() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Details_738::has_go() const {
  return _internal_has_go();
}
inline void Details_738::clear_go() {
  go_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::_internal_go() const {
  return go_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::go() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.go)
  return _internal_go();
}
inline void Details_738::_internal_set_go(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  go_ = value;
}
inline void Details_738::set_go(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_go(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.go)
}

// optional int32 protocol_version = 8;
inline bool Details_738::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Details_738::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void Details_738::clear_protocol_version() {
  protocol_version_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::protocol_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.protocol_version)
  return _internal_protocol_version();
}
inline void Details_738::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  protocol_version_ = value;
}
inline void Details_738::set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.protocol_version)
}

// optional bool close_car = 9;
inline bool Details_738::_internal_has_close_car() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Details_738::has_close_car() const {
  return _internal_has_close_car();
}
inline void Details_738::clear_close_car() {
  close_car_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Details_738::_internal_close_car() const {
  return close_car_;
}
inline bool Details_738::close_car() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.close_car)
  return _internal_close_car();
}
inline void Details_738::_internal_set_close_car(bool value) {
  _has_bits_[0] |= 0x00000040u;
  close_car_ = value;
}
inline void Details_738::set_close_car(bool value) {
  _internal_set_close_car(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.close_car)
}

// optional int32 failsafe = 10;
inline bool Details_738::_internal_has_failsafe() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Details_738::has_failsafe() const {
  return _internal_has_failsafe();
}
inline void Details_738::clear_failsafe() {
  failsafe_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::_internal_failsafe() const {
  return failsafe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::failsafe() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.failsafe)
  return _internal_failsafe();
}
inline void Details_738::_internal_set_failsafe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  failsafe_ = value;
}
inline void Details_738::set_failsafe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_failsafe(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.failsafe)
}

// optional int32 reserved_10 = 11;
inline bool Details_738::_internal_has_reserved_10() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Details_738::has_reserved_10() const {
  return _internal_has_reserved_10();
}
inline void Details_738::clear_reserved_10() {
  reserved_10_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::_internal_reserved_10() const {
  return reserved_10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_738::reserved_10() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_738.reserved_10)
  return _internal_reserved_10();
}
inline void Details_738::_internal_set_reserved_10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  reserved_10_ = value;
}
inline void Details_738::set_reserved_10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reserved_10(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_738.reserved_10)
}

// -------------------------------------------------------------------

// Next_76c

// optional int32 lane_type = 1;
inline bool Next_76c::_internal_has_lane_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Next_76c::has_lane_type() const {
  return _internal_has_lane_type();
}
inline void Next_76c::clear_lane_type() {
  lane_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Next_76c::_internal_lane_type() const {
  return lane_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Next_76c::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.lane_type)
  return _internal_lane_type();
}
inline void Next_76c::_internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  lane_type_ = value;
}
inline void Next_76c::set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.lane_type)
}

// optional int32 quality = 2;
inline bool Next_76c::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Next_76c::has_quality() const {
  return _internal_has_quality();
}
inline void Next_76c::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Next_76c::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Next_76c::quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.quality)
  return _internal_quality();
}
inline void Next_76c::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quality_ = value;
}
inline void Next_76c::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.quality)
}

// optional int32 model_degree = 3;
inline bool Next_76c::_internal_has_model_degree() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Next_76c::has_model_degree() const {
  return _internal_has_model_degree();
}
inline void Next_76c::clear_model_degree() {
  model_degree_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Next_76c::_internal_model_degree() const {
  return model_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Next_76c::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.model_degree)
  return _internal_model_degree();
}
inline void Next_76c::_internal_set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  model_degree_ = value;
}
inline void Next_76c::set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_degree(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.model_degree)
}

// optional double position = 4;
inline bool Next_76c::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Next_76c::has_position() const {
  return _internal_has_position();
}
inline void Next_76c::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Next_76c::_internal_position() const {
  return position_;
}
inline double Next_76c::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.position)
  return _internal_position();
}
inline void Next_76c::_internal_set_position(double value) {
  _has_bits_[0] |= 0x00000004u;
  position_ = value;
}
inline void Next_76c::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.position)
}

// optional double curvature = 5;
inline bool Next_76c::_internal_has_curvature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Next_76c::has_curvature() const {
  return _internal_has_curvature();
}
inline void Next_76c::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Next_76c::_internal_curvature() const {
  return curvature_;
}
inline double Next_76c::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.curvature)
  return _internal_curvature();
}
inline void Next_76c::_internal_set_curvature(double value) {
  _has_bits_[0] |= 0x00000008u;
  curvature_ = value;
}
inline void Next_76c::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.curvature)
}

// optional double curvature_derivative = 6;
inline bool Next_76c::_internal_has_curvature_derivative() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Next_76c::has_curvature_derivative() const {
  return _internal_has_curvature_derivative();
}
inline void Next_76c::clear_curvature_derivative() {
  curvature_derivative_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Next_76c::_internal_curvature_derivative() const {
  return curvature_derivative_;
}
inline double Next_76c::curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.curvature_derivative)
  return _internal_curvature_derivative();
}
inline void Next_76c::_internal_set_curvature_derivative(double value) {
  _has_bits_[0] |= 0x00000010u;
  curvature_derivative_ = value;
}
inline void Next_76c::set_curvature_derivative(double value) {
  _internal_set_curvature_derivative(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.curvature_derivative)
}

// optional double lane_mark_width = 7;
inline bool Next_76c::_internal_has_lane_mark_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Next_76c::has_lane_mark_width() const {
  return _internal_has_lane_mark_width();
}
inline void Next_76c::clear_lane_mark_width() {
  lane_mark_width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Next_76c::_internal_lane_mark_width() const {
  return lane_mark_width_;
}
inline double Next_76c::lane_mark_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76c.lane_mark_width)
  return _internal_lane_mark_width();
}
inline void Next_76c::_internal_set_lane_mark_width(double value) {
  _has_bits_[0] |= 0x00000020u;
  lane_mark_width_ = value;
}
inline void Next_76c::set_lane_mark_width(double value) {
  _internal_set_lane_mark_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76c.lane_mark_width)
}

// -------------------------------------------------------------------

// Details_737

// optional double lane_curvature = 1;
inline bool Details_737::_internal_has_lane_curvature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Details_737::has_lane_curvature() const {
  return _internal_has_lane_curvature();
}
inline void Details_737::clear_lane_curvature() {
  lane_curvature_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Details_737::_internal_lane_curvature() const {
  return lane_curvature_;
}
inline double Details_737::lane_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.lane_curvature)
  return _internal_lane_curvature();
}
inline void Details_737::_internal_set_lane_curvature(double value) {
  _has_bits_[0] |= 0x00000001u;
  lane_curvature_ = value;
}
inline void Details_737::set_lane_curvature(double value) {
  _internal_set_lane_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.lane_curvature)
}

// optional double lane_heading = 2;
inline bool Details_737::_internal_has_lane_heading() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Details_737::has_lane_heading() const {
  return _internal_has_lane_heading();
}
inline void Details_737::clear_lane_heading() {
  lane_heading_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Details_737::_internal_lane_heading() const {
  return lane_heading_;
}
inline double Details_737::lane_heading() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.lane_heading)
  return _internal_lane_heading();
}
inline void Details_737::_internal_set_lane_heading(double value) {
  _has_bits_[0] |= 0x00000002u;
  lane_heading_ = value;
}
inline void Details_737::set_lane_heading(double value) {
  _internal_set_lane_heading(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.lane_heading)
}

// optional bool ca_construction_area = 3;
inline bool Details_737::_internal_has_ca_construction_area() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Details_737::has_ca_construction_area() const {
  return _internal_has_ca_construction_area();
}
inline void Details_737::clear_ca_construction_area() {
  ca_construction_area_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Details_737::_internal_ca_construction_area() const {
  return ca_construction_area_;
}
inline bool Details_737::ca_construction_area() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.ca_construction_area)
  return _internal_ca_construction_area();
}
inline void Details_737::_internal_set_ca_construction_area(bool value) {
  _has_bits_[0] |= 0x00000010u;
  ca_construction_area_ = value;
}
inline void Details_737::set_ca_construction_area(bool value) {
  _internal_set_ca_construction_area(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.ca_construction_area)
}

// optional bool right_ldw_availability = 4;
inline bool Details_737::_internal_has_right_ldw_availability() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Details_737::has_right_ldw_availability() const {
  return _internal_has_right_ldw_availability();
}
inline void Details_737::clear_right_ldw_availability() {
  right_ldw_availability_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Details_737::_internal_right_ldw_availability() const {
  return right_ldw_availability_;
}
inline bool Details_737::right_ldw_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.right_ldw_availability)
  return _internal_right_ldw_availability();
}
inline void Details_737::_internal_set_right_ldw_availability(bool value) {
  _has_bits_[0] |= 0x00000020u;
  right_ldw_availability_ = value;
}
inline void Details_737::set_right_ldw_availability(bool value) {
  _internal_set_right_ldw_availability(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.right_ldw_availability)
}

// optional bool left_ldw_availability = 5;
inline bool Details_737::_internal_has_left_ldw_availability() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Details_737::has_left_ldw_availability() const {
  return _internal_has_left_ldw_availability();
}
inline void Details_737::clear_left_ldw_availability() {
  left_ldw_availability_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Details_737::_internal_left_ldw_availability() const {
  return left_ldw_availability_;
}
inline bool Details_737::left_ldw_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.left_ldw_availability)
  return _internal_left_ldw_availability();
}
inline void Details_737::_internal_set_left_ldw_availability(bool value) {
  _has_bits_[0] |= 0x00000040u;
  left_ldw_availability_ = value;
}
inline void Details_737::set_left_ldw_availability(bool value) {
  _internal_set_left_ldw_availability(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.left_ldw_availability)
}

// optional bool reserved_1 = 6;
inline bool Details_737::_internal_has_reserved_1() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Details_737::has_reserved_1() const {
  return _internal_has_reserved_1();
}
inline void Details_737::clear_reserved_1() {
  reserved_1_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Details_737::_internal_reserved_1() const {
  return reserved_1_;
}
inline bool Details_737::reserved_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.reserved_1)
  return _internal_reserved_1();
}
inline void Details_737::_internal_set_reserved_1(bool value) {
  _has_bits_[0] |= 0x00000080u;
  reserved_1_ = value;
}
inline void Details_737::set_reserved_1(bool value) {
  _internal_set_reserved_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.reserved_1)
}

// optional double yaw_angle = 7;
inline bool Details_737::_internal_has_yaw_angle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Details_737::has_yaw_angle() const {
  return _internal_has_yaw_angle();
}
inline void Details_737::clear_yaw_angle() {
  yaw_angle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Details_737::_internal_yaw_angle() const {
  return yaw_angle_;
}
inline double Details_737::yaw_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.yaw_angle)
  return _internal_yaw_angle();
}
inline void Details_737::_internal_set_yaw_angle(double value) {
  _has_bits_[0] |= 0x00000004u;
  yaw_angle_ = value;
}
inline void Details_737::set_yaw_angle(double value) {
  _internal_set_yaw_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.yaw_angle)
}

// optional double pitch_angle = 8;
inline bool Details_737::_internal_has_pitch_angle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Details_737::has_pitch_angle() const {
  return _internal_has_pitch_angle();
}
inline void Details_737::clear_pitch_angle() {
  pitch_angle_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Details_737::_internal_pitch_angle() const {
  return pitch_angle_;
}
inline double Details_737::pitch_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_737.pitch_angle)
  return _internal_pitch_angle();
}
inline void Details_737::_internal_set_pitch_angle(double value) {
  _has_bits_[0] |= 0x00000008u;
  pitch_angle_ = value;
}
inline void Details_737::set_pitch_angle(double value) {
  _internal_set_pitch_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_737.pitch_angle)
}

// -------------------------------------------------------------------

// Lka_767

// optional double heading_angle = 1;
inline bool Lka_767::_internal_has_heading_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Lka_767::has_heading_angle() const {
  return _internal_has_heading_angle();
}
inline void Lka_767::clear_heading_angle() {
  heading_angle_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Lka_767::_internal_heading_angle() const {
  return heading_angle_;
}
inline double Lka_767::heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_767.heading_angle)
  return _internal_heading_angle();
}
inline void Lka_767::_internal_set_heading_angle(double value) {
  _has_bits_[0] |= 0x00000001u;
  heading_angle_ = value;
}
inline void Lka_767::set_heading_angle(double value) {
  _internal_set_heading_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_767.heading_angle)
}

// optional double view_range = 2;
inline bool Lka_767::_internal_has_view_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Lka_767::has_view_range() const {
  return _internal_has_view_range();
}
inline void Lka_767::clear_view_range() {
  view_range_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Lka_767::_internal_view_range() const {
  return view_range_;
}
inline double Lka_767::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_767.view_range)
  return _internal_view_range();
}
inline void Lka_767::_internal_set_view_range(double value) {
  _has_bits_[0] |= 0x00000002u;
  view_range_ = value;
}
inline void Lka_767::set_view_range(double value) {
  _internal_set_view_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_767.view_range)
}

// optional bool view_range_availability = 3;
inline bool Lka_767::_internal_has_view_range_availability() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Lka_767::has_view_range_availability() const {
  return _internal_has_view_range_availability();
}
inline void Lka_767::clear_view_range_availability() {
  view_range_availability_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Lka_767::_internal_view_range_availability() const {
  return view_range_availability_;
}
inline bool Lka_767::view_range_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_767.view_range_availability)
  return _internal_view_range_availability();
}
inline void Lka_767::_internal_set_view_range_availability(bool value) {
  _has_bits_[0] |= 0x00000004u;
  view_range_availability_ = value;
}
inline void Lka_767::set_view_range_availability(bool value) {
  _internal_set_view_range_availability(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_767.view_range_availability)
}

// -------------------------------------------------------------------

// Lka_766

// optional int32 lane_type = 1;
inline bool Lka_766::_internal_has_lane_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Lka_766::has_lane_type() const {
  return _internal_has_lane_type();
}
inline void Lka_766::clear_lane_type() {
  lane_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_766::_internal_lane_type() const {
  return lane_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_766::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.lane_type)
  return _internal_lane_type();
}
inline void Lka_766::_internal_set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  lane_type_ = value;
}
inline void Lka_766::set_lane_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.lane_type)
}

// optional int32 quality = 2;
inline bool Lka_766::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Lka_766::has_quality() const {
  return _internal_has_quality();
}
inline void Lka_766::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_766::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_766::quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.quality)
  return _internal_quality();
}
inline void Lka_766::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quality_ = value;
}
inline void Lka_766::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.quality)
}

// optional int32 model_degree = 3;
inline bool Lka_766::_internal_has_model_degree() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Lka_766::has_model_degree() const {
  return _internal_has_model_degree();
}
inline void Lka_766::clear_model_degree() {
  model_degree_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_766::_internal_model_degree() const {
  return model_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lka_766::model_degree() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.model_degree)
  return _internal_model_degree();
}
inline void Lka_766::_internal_set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  model_degree_ = value;
}
inline void Lka_766::set_model_degree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_degree(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.model_degree)
}

// optional double position = 4;
inline bool Lka_766::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Lka_766::has_position() const {
  return _internal_has_position();
}
inline void Lka_766::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Lka_766::_internal_position() const {
  return position_;
}
inline double Lka_766::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.position)
  return _internal_position();
}
inline void Lka_766::_internal_set_position(double value) {
  _has_bits_[0] |= 0x00000004u;
  position_ = value;
}
inline void Lka_766::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.position)
}

// optional double curvature = 5;
inline bool Lka_766::_internal_has_curvature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Lka_766::has_curvature() const {
  return _internal_has_curvature();
}
inline void Lka_766::clear_curvature() {
  curvature_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Lka_766::_internal_curvature() const {
  return curvature_;
}
inline double Lka_766::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.curvature)
  return _internal_curvature();
}
inline void Lka_766::_internal_set_curvature(double value) {
  _has_bits_[0] |= 0x00000008u;
  curvature_ = value;
}
inline void Lka_766::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.curvature)
}

// optional double curvature_derivative = 6;
inline bool Lka_766::_internal_has_curvature_derivative() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Lka_766::has_curvature_derivative() const {
  return _internal_has_curvature_derivative();
}
inline void Lka_766::clear_curvature_derivative() {
  curvature_derivative_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Lka_766::_internal_curvature_derivative() const {
  return curvature_derivative_;
}
inline double Lka_766::curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.curvature_derivative)
  return _internal_curvature_derivative();
}
inline void Lka_766::_internal_set_curvature_derivative(double value) {
  _has_bits_[0] |= 0x00000010u;
  curvature_derivative_ = value;
}
inline void Lka_766::set_curvature_derivative(double value) {
  _internal_set_curvature_derivative(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.curvature_derivative)
}

// optional double width_left_marking = 7;
inline bool Lka_766::_internal_has_width_left_marking() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Lka_766::has_width_left_marking() const {
  return _internal_has_width_left_marking();
}
inline void Lka_766::clear_width_left_marking() {
  width_left_marking_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Lka_766::_internal_width_left_marking() const {
  return width_left_marking_;
}
inline double Lka_766::width_left_marking() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Lka_766.width_left_marking)
  return _internal_width_left_marking();
}
inline void Lka_766::_internal_set_width_left_marking(double value) {
  _has_bits_[0] |= 0x00000020u;
  width_left_marking_ = value;
}
inline void Lka_766::set_width_left_marking(double value) {
  _internal_set_width_left_marking(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Lka_766.width_left_marking)
}

// -------------------------------------------------------------------

// Next_76d

// optional double heading_angle = 1;
inline bool Next_76d::_internal_has_heading_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Next_76d::has_heading_angle() const {
  return _internal_has_heading_angle();
}
inline void Next_76d::clear_heading_angle() {
  heading_angle_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Next_76d::_internal_heading_angle() const {
  return heading_angle_;
}
inline double Next_76d::heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76d.heading_angle)
  return _internal_heading_angle();
}
inline void Next_76d::_internal_set_heading_angle(double value) {
  _has_bits_[0] |= 0x00000001u;
  heading_angle_ = value;
}
inline void Next_76d::set_heading_angle(double value) {
  _internal_set_heading_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76d.heading_angle)
}

// optional double view_range = 2;
inline bool Next_76d::_internal_has_view_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Next_76d::has_view_range() const {
  return _internal_has_view_range();
}
inline void Next_76d::clear_view_range() {
  view_range_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Next_76d::_internal_view_range() const {
  return view_range_;
}
inline double Next_76d::view_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76d.view_range)
  return _internal_view_range();
}
inline void Next_76d::_internal_set_view_range(double value) {
  _has_bits_[0] |= 0x00000002u;
  view_range_ = value;
}
inline void Next_76d::set_view_range(double value) {
  _internal_set_view_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76d.view_range)
}

// optional bool view_range_availability = 3;
inline bool Next_76d::_internal_has_view_range_availability() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Next_76d::has_view_range_availability() const {
  return _internal_has_view_range_availability();
}
inline void Next_76d::clear_view_range_availability() {
  view_range_availability_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Next_76d::_internal_view_range_availability() const {
  return view_range_availability_;
}
inline bool Next_76d::view_range_availability() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Next_76d.view_range_availability)
  return _internal_view_range_availability();
}
inline void Next_76d::_internal_set_view_range_availability(bool value) {
  _has_bits_[0] |= 0x00000004u;
  view_range_availability_ = value;
}
inline void Next_76d::set_view_range_availability(bool value) {
  _internal_set_view_range_availability(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Next_76d.view_range_availability)
}

// -------------------------------------------------------------------

// Details_739

// optional int32 obstacle_id = 1;
inline bool Details_739::_internal_has_obstacle_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Details_739::has_obstacle_id() const {
  return _internal_has_obstacle_id();
}
inline void Details_739::clear_obstacle_id() {
  obstacle_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::_internal_obstacle_id() const {
  return obstacle_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_id)
  return _internal_obstacle_id();
}
inline void Details_739::_internal_set_obstacle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  obstacle_id_ = value;
}
inline void Details_739::set_obstacle_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obstacle_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_id)
}

// optional double obstacle_pos_x = 2;
inline bool Details_739::_internal_has_obstacle_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Details_739::has_obstacle_pos_x() const {
  return _internal_has_obstacle_pos_x();
}
inline void Details_739::clear_obstacle_pos_x() {
  obstacle_pos_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Details_739::_internal_obstacle_pos_x() const {
  return obstacle_pos_x_;
}
inline double Details_739::obstacle_pos_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_pos_x)
  return _internal_obstacle_pos_x();
}
inline void Details_739::_internal_set_obstacle_pos_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  obstacle_pos_x_ = value;
}
inline void Details_739::set_obstacle_pos_x(double value) {
  _internal_set_obstacle_pos_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_pos_x)
}

// optional int32 reseved_2 = 3;
inline bool Details_739::_internal_has_reseved_2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Details_739::has_reseved_2() const {
  return _internal_has_reseved_2();
}
inline void Details_739::clear_reseved_2() {
  reseved_2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::_internal_reseved_2() const {
  return reseved_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::reseved_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.reseved_2)
  return _internal_reseved_2();
}
inline void Details_739::_internal_set_reseved_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  reseved_2_ = value;
}
inline void Details_739::set_reseved_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reseved_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.reseved_2)
}

// optional double obstacle_pos_y = 4;
inline bool Details_739::_internal_has_obstacle_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Details_739::has_obstacle_pos_y() const {
  return _internal_has_obstacle_pos_y();
}
inline void Details_739::clear_obstacle_pos_y() {
  obstacle_pos_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Details_739::_internal_obstacle_pos_y() const {
  return obstacle_pos_y_;
}
inline double Details_739::obstacle_pos_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_pos_y)
  return _internal_obstacle_pos_y();
}
inline void Details_739::_internal_set_obstacle_pos_y(double value) {
  _has_bits_[0] |= 0x00000008u;
  obstacle_pos_y_ = value;
}
inline void Details_739::set_obstacle_pos_y(double value) {
  _internal_set_obstacle_pos_y(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_pos_y)
}

// optional int32 blinker_info = 5;
inline bool Details_739::_internal_has_blinker_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Details_739::has_blinker_info() const {
  return _internal_has_blinker_info();
}
inline void Details_739::clear_blinker_info() {
  blinker_info_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::_internal_blinker_info() const {
  return blinker_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::blinker_info() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.blinker_info)
  return _internal_blinker_info();
}
inline void Details_739::_internal_set_blinker_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  blinker_info_ = value;
}
inline void Details_739::set_blinker_info(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blinker_info(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.blinker_info)
}

// optional int32 cut_in_and_out = 6;
inline bool Details_739::_internal_has_cut_in_and_out() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Details_739::has_cut_in_and_out() const {
  return _internal_has_cut_in_and_out();
}
inline void Details_739::clear_cut_in_and_out() {
  cut_in_and_out_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::_internal_cut_in_and_out() const {
  return cut_in_and_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::cut_in_and_out() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.cut_in_and_out)
  return _internal_cut_in_and_out();
}
inline void Details_739::_internal_set_cut_in_and_out(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  cut_in_and_out_ = value;
}
inline void Details_739::set_cut_in_and_out(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cut_in_and_out(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.cut_in_and_out)
}

// optional double obstacle_rel_vel_x = 7;
inline bool Details_739::_internal_has_obstacle_rel_vel_x() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Details_739::has_obstacle_rel_vel_x() const {
  return _internal_has_obstacle_rel_vel_x();
}
inline void Details_739::clear_obstacle_rel_vel_x() {
  obstacle_rel_vel_x_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Details_739::_internal_obstacle_rel_vel_x() const {
  return obstacle_rel_vel_x_;
}
inline double Details_739::obstacle_rel_vel_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_rel_vel_x)
  return _internal_obstacle_rel_vel_x();
}
inline void Details_739::_internal_set_obstacle_rel_vel_x(double value) {
  _has_bits_[0] |= 0x00000040u;
  obstacle_rel_vel_x_ = value;
}
inline void Details_739::set_obstacle_rel_vel_x(double value) {
  _internal_set_obstacle_rel_vel_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_rel_vel_x)
}

// optional int32 obstacle_type = 8;
inline bool Details_739::_internal_has_obstacle_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Details_739::has_obstacle_type() const {
  return _internal_has_obstacle_type();
}
inline void Details_739::clear_obstacle_type() {
  obstacle_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::_internal_obstacle_type() const {
  return obstacle_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::obstacle_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_type)
  return _internal_obstacle_type();
}
inline void Details_739::_internal_set_obstacle_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  obstacle_type_ = value;
}
inline void Details_739::set_obstacle_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obstacle_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_type)
}

// optional bool reserved_3 = 9;
inline bool Details_739::_internal_has_reserved_3() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Details_739::has_reserved_3() const {
  return _internal_has_reserved_3();
}
inline void Details_739::clear_reserved_3() {
  reserved_3_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Details_739::_internal_reserved_3() const {
  return reserved_3_;
}
inline bool Details_739::reserved_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.reserved_3)
  return _internal_reserved_3();
}
inline void Details_739::_internal_set_reserved_3(bool value) {
  _has_bits_[0] |= 0x00000200u;
  reserved_3_ = value;
}
inline void Details_739::set_reserved_3(bool value) {
  _internal_set_reserved_3(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.reserved_3)
}

// optional int32 obstacle_status = 10;
inline bool Details_739::_internal_has_obstacle_status() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Details_739::has_obstacle_status() const {
  return _internal_has_obstacle_status();
}
inline void Details_739::clear_obstacle_status() {
  obstacle_status_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::_internal_obstacle_status() const {
  return obstacle_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::obstacle_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_status)
  return _internal_obstacle_status();
}
inline void Details_739::_internal_set_obstacle_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  obstacle_status_ = value;
}
inline void Details_739::set_obstacle_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obstacle_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_status)
}

// optional bool obstacle_brake_lights = 11;
inline bool Details_739::_internal_has_obstacle_brake_lights() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Details_739::has_obstacle_brake_lights() const {
  return _internal_has_obstacle_brake_lights();
}
inline void Details_739::clear_obstacle_brake_lights() {
  obstacle_brake_lights_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Details_739::_internal_obstacle_brake_lights() const {
  return obstacle_brake_lights_;
}
inline bool Details_739::obstacle_brake_lights() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_brake_lights)
  return _internal_obstacle_brake_lights();
}
inline void Details_739::_internal_set_obstacle_brake_lights(bool value) {
  _has_bits_[0] |= 0x00000400u;
  obstacle_brake_lights_ = value;
}
inline void Details_739::set_obstacle_brake_lights(bool value) {
  _internal_set_obstacle_brake_lights(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_brake_lights)
}

// optional int32 reserved_4 = 12;
inline bool Details_739::_internal_has_reserved_4() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Details_739::has_reserved_4() const {
  return _internal_has_reserved_4();
}
inline void Details_739::clear_reserved_4() {
  reserved_4_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::_internal_reserved_4() const {
  return reserved_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::reserved_4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.reserved_4)
  return _internal_reserved_4();
}
inline void Details_739::_internal_set_reserved_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  reserved_4_ = value;
}
inline void Details_739::set_reserved_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reserved_4(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.reserved_4)
}

// optional int32 obstacle_valid = 13;
inline bool Details_739::_internal_has_obstacle_valid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Details_739::has_obstacle_valid() const {
  return _internal_has_obstacle_valid();
}
inline void Details_739::clear_obstacle_valid() {
  obstacle_valid_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::_internal_obstacle_valid() const {
  return obstacle_valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_739::obstacle_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_739.obstacle_valid)
  return _internal_obstacle_valid();
}
inline void Details_739::_internal_set_obstacle_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  obstacle_valid_ = value;
}
inline void Details_739::set_obstacle_valid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obstacle_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_739.obstacle_valid)
}

// -------------------------------------------------------------------

// Details_73a

// optional double obstacle_length = 1;
inline bool Details_73a::_internal_has_obstacle_length() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Details_73a::has_obstacle_length() const {
  return _internal_has_obstacle_length();
}
inline void Details_73a::clear_obstacle_length() {
  obstacle_length_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Details_73a::_internal_obstacle_length() const {
  return obstacle_length_;
}
inline double Details_73a::obstacle_length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.obstacle_length)
  return _internal_obstacle_length();
}
inline void Details_73a::_internal_set_obstacle_length(double value) {
  _has_bits_[0] |= 0x00000001u;
  obstacle_length_ = value;
}
inline void Details_73a::set_obstacle_length(double value) {
  _internal_set_obstacle_length(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.obstacle_length)
}

// optional double obstacle_width = 2;
inline bool Details_73a::_internal_has_obstacle_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Details_73a::has_obstacle_width() const {
  return _internal_has_obstacle_width();
}
inline void Details_73a::clear_obstacle_width() {
  obstacle_width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Details_73a::_internal_obstacle_width() const {
  return obstacle_width_;
}
inline double Details_73a::obstacle_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.obstacle_width)
  return _internal_obstacle_width();
}
inline void Details_73a::_internal_set_obstacle_width(double value) {
  _has_bits_[0] |= 0x00000002u;
  obstacle_width_ = value;
}
inline void Details_73a::set_obstacle_width(double value) {
  _internal_set_obstacle_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.obstacle_width)
}

// optional int32 obstacle_age = 3;
inline bool Details_73a::_internal_has_obstacle_age() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Details_73a::has_obstacle_age() const {
  return _internal_has_obstacle_age();
}
inline void Details_73a::clear_obstacle_age() {
  obstacle_age_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73a::_internal_obstacle_age() const {
  return obstacle_age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73a::obstacle_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.obstacle_age)
  return _internal_obstacle_age();
}
inline void Details_73a::_internal_set_obstacle_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  obstacle_age_ = value;
}
inline void Details_73a::set_obstacle_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obstacle_age(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.obstacle_age)
}

// optional int32 obstacle_lane = 4;
inline bool Details_73a::_internal_has_obstacle_lane() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Details_73a::has_obstacle_lane() const {
  return _internal_has_obstacle_lane();
}
inline void Details_73a::clear_obstacle_lane() {
  obstacle_lane_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73a::_internal_obstacle_lane() const {
  return obstacle_lane_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73a::obstacle_lane() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.obstacle_lane)
  return _internal_obstacle_lane();
}
inline void Details_73a::_internal_set_obstacle_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  obstacle_lane_ = value;
}
inline void Details_73a::set_obstacle_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obstacle_lane(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.obstacle_lane)
}

// optional bool cipv_flag = 5;
inline bool Details_73a::_internal_has_cipv_flag() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Details_73a::has_cipv_flag() const {
  return _internal_has_cipv_flag();
}
inline void Details_73a::clear_cipv_flag() {
  cipv_flag_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Details_73a::_internal_cipv_flag() const {
  return cipv_flag_;
}
inline bool Details_73a::cipv_flag() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.cipv_flag)
  return _internal_cipv_flag();
}
inline void Details_73a::_internal_set_cipv_flag(bool value) {
  _has_bits_[0] |= 0x00000040u;
  cipv_flag_ = value;
}
inline void Details_73a::set_cipv_flag(bool value) {
  _internal_set_cipv_flag(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.cipv_flag)
}

// optional bool reserved_5 = 6;
inline bool Details_73a::_internal_has_reserved_5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Details_73a::has_reserved_5() const {
  return _internal_has_reserved_5();
}
inline void Details_73a::clear_reserved_5() {
  reserved_5_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Details_73a::_internal_reserved_5() const {
  return reserved_5_;
}
inline bool Details_73a::reserved_5() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.reserved_5)
  return _internal_reserved_5();
}
inline void Details_73a::_internal_set_reserved_5(bool value) {
  _has_bits_[0] |= 0x00000080u;
  reserved_5_ = value;
}
inline void Details_73a::set_reserved_5(bool value) {
  _internal_set_reserved_5(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.reserved_5)
}

// optional double radar_pos_x = 7;
inline bool Details_73a::_internal_has_radar_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Details_73a::has_radar_pos_x() const {
  return _internal_has_radar_pos_x();
}
inline void Details_73a::clear_radar_pos_x() {
  radar_pos_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Details_73a::_internal_radar_pos_x() const {
  return radar_pos_x_;
}
inline double Details_73a::radar_pos_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.radar_pos_x)
  return _internal_radar_pos_x();
}
inline void Details_73a::_internal_set_radar_pos_x(double value) {
  _has_bits_[0] |= 0x00000010u;
  radar_pos_x_ = value;
}
inline void Details_73a::set_radar_pos_x(double value) {
  _internal_set_radar_pos_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.radar_pos_x)
}

// optional double radar_vel_x = 8;
inline bool Details_73a::_internal_has_radar_vel_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Details_73a::has_radar_vel_x() const {
  return _internal_has_radar_vel_x();
}
inline void Details_73a::clear_radar_vel_x() {
  radar_vel_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Details_73a::_internal_radar_vel_x() const {
  return radar_vel_x_;
}
inline double Details_73a::radar_vel_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.radar_vel_x)
  return _internal_radar_vel_x();
}
inline void Details_73a::_internal_set_radar_vel_x(double value) {
  _has_bits_[0] |= 0x00000020u;
  radar_vel_x_ = value;
}
inline void Details_73a::set_radar_vel_x(double value) {
  _internal_set_radar_vel_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.radar_vel_x)
}

// optional int32 radar_match_confidence = 9;
inline bool Details_73a::_internal_has_radar_match_confidence() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Details_73a::has_radar_match_confidence() const {
  return _internal_has_radar_match_confidence();
}
inline void Details_73a::clear_radar_match_confidence() {
  radar_match_confidence_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73a::_internal_radar_match_confidence() const {
  return radar_match_confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73a::radar_match_confidence() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.radar_match_confidence)
  return _internal_radar_match_confidence();
}
inline void Details_73a::_internal_set_radar_match_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  radar_match_confidence_ = value;
}
inline void Details_73a::set_radar_match_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_radar_match_confidence(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.radar_match_confidence)
}

// optional bool reserved_6 = 10;
inline bool Details_73a::_internal_has_reserved_6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Details_73a::has_reserved_6() const {
  return _internal_has_reserved_6();
}
inline void Details_73a::clear_reserved_6() {
  reserved_6_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Details_73a::_internal_reserved_6() const {
  return reserved_6_;
}
inline bool Details_73a::reserved_6() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.reserved_6)
  return _internal_reserved_6();
}
inline void Details_73a::_internal_set_reserved_6(bool value) {
  _has_bits_[0] |= 0x00000100u;
  reserved_6_ = value;
}
inline void Details_73a::set_reserved_6(bool value) {
  _internal_set_reserved_6(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.reserved_6)
}

// optional int32 matched_radar_id = 11;
inline bool Details_73a::_internal_has_matched_radar_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Details_73a::has_matched_radar_id() const {
  return _internal_has_matched_radar_id();
}
inline void Details_73a::clear_matched_radar_id() {
  matched_radar_id_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73a::_internal_matched_radar_id() const {
  return matched_radar_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73a::matched_radar_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.matched_radar_id)
  return _internal_matched_radar_id();
}
inline void Details_73a::_internal_set_matched_radar_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  matched_radar_id_ = value;
}
inline void Details_73a::set_matched_radar_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matched_radar_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.matched_radar_id)
}

// optional bool reserved_7 = 12;
inline bool Details_73a::_internal_has_reserved_7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Details_73a::has_reserved_7() const {
  return _internal_has_reserved_7();
}
inline void Details_73a::clear_reserved_7() {
  reserved_7_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Details_73a::_internal_reserved_7() const {
  return reserved_7_;
}
inline bool Details_73a::reserved_7() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73a.reserved_7)
  return _internal_reserved_7();
}
inline void Details_73a::_internal_set_reserved_7(bool value) {
  _has_bits_[0] |= 0x00000200u;
  reserved_7_ = value;
}
inline void Details_73a::set_reserved_7(bool value) {
  _internal_set_reserved_7(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73a.reserved_7)
}

// -------------------------------------------------------------------

// Details_73b

// optional double obstacle_angle_rate = 1;
inline bool Details_73b::_internal_has_obstacle_angle_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Details_73b::has_obstacle_angle_rate() const {
  return _internal_has_obstacle_angle_rate();
}
inline void Details_73b::clear_obstacle_angle_rate() {
  obstacle_angle_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Details_73b::_internal_obstacle_angle_rate() const {
  return obstacle_angle_rate_;
}
inline double Details_73b::obstacle_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.obstacle_angle_rate)
  return _internal_obstacle_angle_rate();
}
inline void Details_73b::_internal_set_obstacle_angle_rate(double value) {
  _has_bits_[0] |= 0x00000001u;
  obstacle_angle_rate_ = value;
}
inline void Details_73b::set_obstacle_angle_rate(double value) {
  _internal_set_obstacle_angle_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.obstacle_angle_rate)
}

// optional double obstacle_scale_change = 2;
inline bool Details_73b::_internal_has_obstacle_scale_change() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Details_73b::has_obstacle_scale_change() const {
  return _internal_has_obstacle_scale_change();
}
inline void Details_73b::clear_obstacle_scale_change() {
  obstacle_scale_change_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Details_73b::_internal_obstacle_scale_change() const {
  return obstacle_scale_change_;
}
inline double Details_73b::obstacle_scale_change() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.obstacle_scale_change)
  return _internal_obstacle_scale_change();
}
inline void Details_73b::_internal_set_obstacle_scale_change(double value) {
  _has_bits_[0] |= 0x00000002u;
  obstacle_scale_change_ = value;
}
inline void Details_73b::set_obstacle_scale_change(double value) {
  _internal_set_obstacle_scale_change(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.obstacle_scale_change)
}

// optional double object_accel_x = 3;
inline bool Details_73b::_internal_has_object_accel_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Details_73b::has_object_accel_x() const {
  return _internal_has_object_accel_x();
}
inline void Details_73b::clear_object_accel_x() {
  object_accel_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Details_73b::_internal_object_accel_x() const {
  return object_accel_x_;
}
inline double Details_73b::object_accel_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.object_accel_x)
  return _internal_object_accel_x();
}
inline void Details_73b::_internal_set_object_accel_x(double value) {
  _has_bits_[0] |= 0x00000004u;
  object_accel_x_ = value;
}
inline void Details_73b::set_object_accel_x(double value) {
  _internal_set_object_accel_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.object_accel_x)
}

// optional int32 reserved_8 = 4;
inline bool Details_73b::_internal_has_reserved_8() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Details_73b::has_reserved_8() const {
  return _internal_has_reserved_8();
}
inline void Details_73b::clear_reserved_8() {
  reserved_8_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73b::_internal_reserved_8() const {
  return reserved_8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73b::reserved_8() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.reserved_8)
  return _internal_reserved_8();
}
inline void Details_73b::_internal_set_reserved_8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  reserved_8_ = value;
}
inline void Details_73b::set_reserved_8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reserved_8(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.reserved_8)
}

// optional bool obstacle_replaced = 5;
inline bool Details_73b::_internal_has_obstacle_replaced() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Details_73b::has_obstacle_replaced() const {
  return _internal_has_obstacle_replaced();
}
inline void Details_73b::clear_obstacle_replaced() {
  obstacle_replaced_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Details_73b::_internal_obstacle_replaced() const {
  return obstacle_replaced_;
}
inline bool Details_73b::obstacle_replaced() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.obstacle_replaced)
  return _internal_obstacle_replaced();
}
inline void Details_73b::_internal_set_obstacle_replaced(bool value) {
  _has_bits_[0] |= 0x00000010u;
  obstacle_replaced_ = value;
}
inline void Details_73b::set_obstacle_replaced(bool value) {
  _internal_set_obstacle_replaced(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.obstacle_replaced)
}

// optional int32 reserved_9 = 6;
inline bool Details_73b::_internal_has_reserved_9() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Details_73b::has_reserved_9() const {
  return _internal_has_reserved_9();
}
inline void Details_73b::clear_reserved_9() {
  reserved_9_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73b::_internal_reserved_9() const {
  return reserved_9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Details_73b::reserved_9() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.reserved_9)
  return _internal_reserved_9();
}
inline void Details_73b::_internal_set_reserved_9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  reserved_9_ = value;
}
inline void Details_73b::set_reserved_9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reserved_9(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.reserved_9)
}

// optional double obstacle_angle = 7;
inline bool Details_73b::_internal_has_obstacle_angle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Details_73b::has_obstacle_angle() const {
  return _internal_has_obstacle_angle();
}
inline void Details_73b::clear_obstacle_angle() {
  obstacle_angle_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Details_73b::_internal_obstacle_angle() const {
  return obstacle_angle_;
}
inline double Details_73b::obstacle_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Details_73b.obstacle_angle)
  return _internal_obstacle_angle();
}
inline void Details_73b::_internal_set_obstacle_angle(double value) {
  _has_bits_[0] |= 0x00000020u;
  obstacle_angle_ = value;
}
inline void Details_73b::set_obstacle_angle(double value) {
  _internal_set_obstacle_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Details_73b.obstacle_angle)
}

// -------------------------------------------------------------------

// Mobileye

// optional .apollo.common.Header header = 1;
inline bool Mobileye::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Mobileye::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Mobileye::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Mobileye::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.header)
  return _internal_header();
}
inline ::apollo::common::Header* Mobileye::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Mobileye::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* Mobileye::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.header)
  return _internal_mutable_header();
}
inline void Mobileye::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.header)
}

// optional .apollo.drivers.Aftermarket_669 aftermarket_669 = 2;
inline bool Mobileye::_internal_has_aftermarket_669() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || aftermarket_669_ != nullptr);
  return value;
}
inline bool Mobileye::has_aftermarket_669() const {
  return _internal_has_aftermarket_669();
}
inline void Mobileye::clear_aftermarket_669() {
  if (aftermarket_669_ != nullptr) aftermarket_669_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::drivers::Aftermarket_669& Mobileye::_internal_aftermarket_669() const {
  const ::apollo::drivers::Aftermarket_669* p = aftermarket_669_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Aftermarket_669*>(
      &::apollo::drivers::_Aftermarket_669_default_instance_);
}
inline const ::apollo::drivers::Aftermarket_669& Mobileye::aftermarket_669() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.aftermarket_669)
  return _internal_aftermarket_669();
}
inline ::apollo::drivers::Aftermarket_669* Mobileye::release_aftermarket_669() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.aftermarket_669)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::drivers::Aftermarket_669* temp = aftermarket_669_;
  aftermarket_669_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Aftermarket_669* Mobileye::_internal_mutable_aftermarket_669() {
  _has_bits_[0] |= 0x00000002u;
  if (aftermarket_669_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Aftermarket_669>(GetArenaNoVirtual());
    aftermarket_669_ = p;
  }
  return aftermarket_669_;
}
inline ::apollo::drivers::Aftermarket_669* Mobileye::mutable_aftermarket_669() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.aftermarket_669)
  return _internal_mutable_aftermarket_669();
}
inline void Mobileye::set_allocated_aftermarket_669(::apollo::drivers::Aftermarket_669* aftermarket_669) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete aftermarket_669_;
  }
  if (aftermarket_669) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aftermarket_669 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aftermarket_669, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  aftermarket_669_ = aftermarket_669;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.aftermarket_669)
}

// optional .apollo.drivers.Details_737 details_737 = 3;
inline bool Mobileye::_internal_has_details_737() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || details_737_ != nullptr);
  return value;
}
inline bool Mobileye::has_details_737() const {
  return _internal_has_details_737();
}
inline void Mobileye::clear_details_737() {
  if (details_737_ != nullptr) details_737_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::drivers::Details_737& Mobileye::_internal_details_737() const {
  const ::apollo::drivers::Details_737* p = details_737_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Details_737*>(
      &::apollo::drivers::_Details_737_default_instance_);
}
inline const ::apollo::drivers::Details_737& Mobileye::details_737() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_737)
  return _internal_details_737();
}
inline ::apollo::drivers::Details_737* Mobileye::release_details_737() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.details_737)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::drivers::Details_737* temp = details_737_;
  details_737_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Details_737* Mobileye::_internal_mutable_details_737() {
  _has_bits_[0] |= 0x00000004u;
  if (details_737_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Details_737>(GetArenaNoVirtual());
    details_737_ = p;
  }
  return details_737_;
}
inline ::apollo::drivers::Details_737* Mobileye::mutable_details_737() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_737)
  return _internal_mutable_details_737();
}
inline void Mobileye::set_allocated_details_737(::apollo::drivers::Details_737* details_737) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete details_737_;
  }
  if (details_737) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      details_737 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details_737, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  details_737_ = details_737;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.details_737)
}

// optional .apollo.drivers.Details_738 details_738 = 4;
inline bool Mobileye::_internal_has_details_738() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || details_738_ != nullptr);
  return value;
}
inline bool Mobileye::has_details_738() const {
  return _internal_has_details_738();
}
inline void Mobileye::clear_details_738() {
  if (details_738_ != nullptr) details_738_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::drivers::Details_738& Mobileye::_internal_details_738() const {
  const ::apollo::drivers::Details_738* p = details_738_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Details_738*>(
      &::apollo::drivers::_Details_738_default_instance_);
}
inline const ::apollo::drivers::Details_738& Mobileye::details_738() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_738)
  return _internal_details_738();
}
inline ::apollo::drivers::Details_738* Mobileye::release_details_738() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.details_738)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::drivers::Details_738* temp = details_738_;
  details_738_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Details_738* Mobileye::_internal_mutable_details_738() {
  _has_bits_[0] |= 0x00000008u;
  if (details_738_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Details_738>(GetArenaNoVirtual());
    details_738_ = p;
  }
  return details_738_;
}
inline ::apollo::drivers::Details_738* Mobileye::mutable_details_738() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_738)
  return _internal_mutable_details_738();
}
inline void Mobileye::set_allocated_details_738(::apollo::drivers::Details_738* details_738) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete details_738_;
  }
  if (details_738) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      details_738 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details_738, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  details_738_ = details_738;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.details_738)
}

// repeated .apollo.drivers.Details_739 details_739 = 5;
inline int Mobileye::_internal_details_739_size() const {
  return details_739_.size();
}
inline int Mobileye::details_739_size() const {
  return _internal_details_739_size();
}
inline void Mobileye::clear_details_739() {
  details_739_.Clear();
}
inline ::apollo::drivers::Details_739* Mobileye::mutable_details_739(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_739)
  return details_739_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_739 >*
Mobileye::mutable_details_739() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.details_739)
  return &details_739_;
}
inline const ::apollo::drivers::Details_739& Mobileye::_internal_details_739(int index) const {
  return details_739_.Get(index);
}
inline const ::apollo::drivers::Details_739& Mobileye::details_739(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_739)
  return _internal_details_739(index);
}
inline ::apollo::drivers::Details_739* Mobileye::_internal_add_details_739() {
  return details_739_.Add();
}
inline ::apollo::drivers::Details_739* Mobileye::add_details_739() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.details_739)
  return _internal_add_details_739();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_739 >&
Mobileye::details_739() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.details_739)
  return details_739_;
}

// repeated .apollo.drivers.Details_73a details_73a = 6;
inline int Mobileye::_internal_details_73a_size() const {
  return details_73a_.size();
}
inline int Mobileye::details_73a_size() const {
  return _internal_details_73a_size();
}
inline void Mobileye::clear_details_73a() {
  details_73a_.Clear();
}
inline ::apollo::drivers::Details_73a* Mobileye::mutable_details_73a(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_73a)
  return details_73a_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73a >*
Mobileye::mutable_details_73a() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.details_73a)
  return &details_73a_;
}
inline const ::apollo::drivers::Details_73a& Mobileye::_internal_details_73a(int index) const {
  return details_73a_.Get(index);
}
inline const ::apollo::drivers::Details_73a& Mobileye::details_73a(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_73a)
  return _internal_details_73a(index);
}
inline ::apollo::drivers::Details_73a* Mobileye::_internal_add_details_73a() {
  return details_73a_.Add();
}
inline ::apollo::drivers::Details_73a* Mobileye::add_details_73a() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.details_73a)
  return _internal_add_details_73a();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73a >&
Mobileye::details_73a() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.details_73a)
  return details_73a_;
}

// repeated .apollo.drivers.Details_73b details_73b = 7;
inline int Mobileye::_internal_details_73b_size() const {
  return details_73b_.size();
}
inline int Mobileye::details_73b_size() const {
  return _internal_details_73b_size();
}
inline void Mobileye::clear_details_73b() {
  details_73b_.Clear();
}
inline ::apollo::drivers::Details_73b* Mobileye::mutable_details_73b(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.details_73b)
  return details_73b_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73b >*
Mobileye::mutable_details_73b() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.details_73b)
  return &details_73b_;
}
inline const ::apollo::drivers::Details_73b& Mobileye::_internal_details_73b(int index) const {
  return details_73b_.Get(index);
}
inline const ::apollo::drivers::Details_73b& Mobileye::details_73b(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.details_73b)
  return _internal_details_73b(index);
}
inline ::apollo::drivers::Details_73b* Mobileye::_internal_add_details_73b() {
  return details_73b_.Add();
}
inline ::apollo::drivers::Details_73b* Mobileye::add_details_73b() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.details_73b)
  return _internal_add_details_73b();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Details_73b >&
Mobileye::details_73b() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.details_73b)
  return details_73b_;
}

// optional .apollo.drivers.Lka_766 lka_766 = 8;
inline bool Mobileye::_internal_has_lka_766() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || lka_766_ != nullptr);
  return value;
}
inline bool Mobileye::has_lka_766() const {
  return _internal_has_lka_766();
}
inline void Mobileye::clear_lka_766() {
  if (lka_766_ != nullptr) lka_766_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::drivers::Lka_766& Mobileye::_internal_lka_766() const {
  const ::apollo::drivers::Lka_766* p = lka_766_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Lka_766*>(
      &::apollo::drivers::_Lka_766_default_instance_);
}
inline const ::apollo::drivers::Lka_766& Mobileye::lka_766() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.lka_766)
  return _internal_lka_766();
}
inline ::apollo::drivers::Lka_766* Mobileye::release_lka_766() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.lka_766)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::drivers::Lka_766* temp = lka_766_;
  lka_766_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Lka_766* Mobileye::_internal_mutable_lka_766() {
  _has_bits_[0] |= 0x00000010u;
  if (lka_766_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Lka_766>(GetArenaNoVirtual());
    lka_766_ = p;
  }
  return lka_766_;
}
inline ::apollo::drivers::Lka_766* Mobileye::mutable_lka_766() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.lka_766)
  return _internal_mutable_lka_766();
}
inline void Mobileye::set_allocated_lka_766(::apollo::drivers::Lka_766* lka_766) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lka_766_;
  }
  if (lka_766) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lka_766 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lka_766, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lka_766_ = lka_766;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.lka_766)
}

// optional .apollo.drivers.Lka_767 lka_767 = 9;
inline bool Mobileye::_internal_has_lka_767() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || lka_767_ != nullptr);
  return value;
}
inline bool Mobileye::has_lka_767() const {
  return _internal_has_lka_767();
}
inline void Mobileye::clear_lka_767() {
  if (lka_767_ != nullptr) lka_767_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::drivers::Lka_767& Mobileye::_internal_lka_767() const {
  const ::apollo::drivers::Lka_767* p = lka_767_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Lka_767*>(
      &::apollo::drivers::_Lka_767_default_instance_);
}
inline const ::apollo::drivers::Lka_767& Mobileye::lka_767() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.lka_767)
  return _internal_lka_767();
}
inline ::apollo::drivers::Lka_767* Mobileye::release_lka_767() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.lka_767)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::drivers::Lka_767* temp = lka_767_;
  lka_767_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Lka_767* Mobileye::_internal_mutable_lka_767() {
  _has_bits_[0] |= 0x00000020u;
  if (lka_767_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Lka_767>(GetArenaNoVirtual());
    lka_767_ = p;
  }
  return lka_767_;
}
inline ::apollo::drivers::Lka_767* Mobileye::mutable_lka_767() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.lka_767)
  return _internal_mutable_lka_767();
}
inline void Mobileye::set_allocated_lka_767(::apollo::drivers::Lka_767* lka_767) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lka_767_;
  }
  if (lka_767) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lka_767 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lka_767, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  lka_767_ = lka_767;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.lka_767)
}

// optional .apollo.drivers.Lka_768 lka_768 = 10;
inline bool Mobileye::_internal_has_lka_768() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || lka_768_ != nullptr);
  return value;
}
inline bool Mobileye::has_lka_768() const {
  return _internal_has_lka_768();
}
inline void Mobileye::clear_lka_768() {
  if (lka_768_ != nullptr) lka_768_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::drivers::Lka_768& Mobileye::_internal_lka_768() const {
  const ::apollo::drivers::Lka_768* p = lka_768_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Lka_768*>(
      &::apollo::drivers::_Lka_768_default_instance_);
}
inline const ::apollo::drivers::Lka_768& Mobileye::lka_768() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.lka_768)
  return _internal_lka_768();
}
inline ::apollo::drivers::Lka_768* Mobileye::release_lka_768() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.lka_768)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::drivers::Lka_768* temp = lka_768_;
  lka_768_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Lka_768* Mobileye::_internal_mutable_lka_768() {
  _has_bits_[0] |= 0x00000040u;
  if (lka_768_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Lka_768>(GetArenaNoVirtual());
    lka_768_ = p;
  }
  return lka_768_;
}
inline ::apollo::drivers::Lka_768* Mobileye::mutable_lka_768() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.lka_768)
  return _internal_mutable_lka_768();
}
inline void Mobileye::set_allocated_lka_768(::apollo::drivers::Lka_768* lka_768) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lka_768_;
  }
  if (lka_768) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lka_768 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lka_768, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  lka_768_ = lka_768;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.lka_768)
}

// optional .apollo.drivers.Lka_769 lka_769 = 11;
inline bool Mobileye::_internal_has_lka_769() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || lka_769_ != nullptr);
  return value;
}
inline bool Mobileye::has_lka_769() const {
  return _internal_has_lka_769();
}
inline void Mobileye::clear_lka_769() {
  if (lka_769_ != nullptr) lka_769_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::drivers::Lka_769& Mobileye::_internal_lka_769() const {
  const ::apollo::drivers::Lka_769* p = lka_769_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Lka_769*>(
      &::apollo::drivers::_Lka_769_default_instance_);
}
inline const ::apollo::drivers::Lka_769& Mobileye::lka_769() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.lka_769)
  return _internal_lka_769();
}
inline ::apollo::drivers::Lka_769* Mobileye::release_lka_769() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.lka_769)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::drivers::Lka_769* temp = lka_769_;
  lka_769_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Lka_769* Mobileye::_internal_mutable_lka_769() {
  _has_bits_[0] |= 0x00000080u;
  if (lka_769_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Lka_769>(GetArenaNoVirtual());
    lka_769_ = p;
  }
  return lka_769_;
}
inline ::apollo::drivers::Lka_769* Mobileye::mutable_lka_769() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.lka_769)
  return _internal_mutable_lka_769();
}
inline void Mobileye::set_allocated_lka_769(::apollo::drivers::Lka_769* lka_769) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lka_769_;
  }
  if (lka_769) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lka_769 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lka_769, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  lka_769_ = lka_769;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.lka_769)
}

// optional .apollo.drivers.Reference_76a reference_76a = 12;
inline bool Mobileye::_internal_has_reference_76a() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || reference_76a_ != nullptr);
  return value;
}
inline bool Mobileye::has_reference_76a() const {
  return _internal_has_reference_76a();
}
inline void Mobileye::clear_reference_76a() {
  if (reference_76a_ != nullptr) reference_76a_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::drivers::Reference_76a& Mobileye::_internal_reference_76a() const {
  const ::apollo::drivers::Reference_76a* p = reference_76a_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Reference_76a*>(
      &::apollo::drivers::_Reference_76a_default_instance_);
}
inline const ::apollo::drivers::Reference_76a& Mobileye::reference_76a() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.reference_76a)
  return _internal_reference_76a();
}
inline ::apollo::drivers::Reference_76a* Mobileye::release_reference_76a() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.reference_76a)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::drivers::Reference_76a* temp = reference_76a_;
  reference_76a_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Reference_76a* Mobileye::_internal_mutable_reference_76a() {
  _has_bits_[0] |= 0x00000100u;
  if (reference_76a_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Reference_76a>(GetArenaNoVirtual());
    reference_76a_ = p;
  }
  return reference_76a_;
}
inline ::apollo::drivers::Reference_76a* Mobileye::mutable_reference_76a() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.reference_76a)
  return _internal_mutable_reference_76a();
}
inline void Mobileye::set_allocated_reference_76a(::apollo::drivers::Reference_76a* reference_76a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reference_76a_;
  }
  if (reference_76a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_76a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_76a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  reference_76a_ = reference_76a;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.reference_76a)
}

// optional .apollo.drivers.Num_76b num_76b = 13;
inline bool Mobileye::_internal_has_num_76b() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || num_76b_ != nullptr);
  return value;
}
inline bool Mobileye::has_num_76b() const {
  return _internal_has_num_76b();
}
inline void Mobileye::clear_num_76b() {
  if (num_76b_ != nullptr) num_76b_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::drivers::Num_76b& Mobileye::_internal_num_76b() const {
  const ::apollo::drivers::Num_76b* p = num_76b_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Num_76b*>(
      &::apollo::drivers::_Num_76b_default_instance_);
}
inline const ::apollo::drivers::Num_76b& Mobileye::num_76b() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.num_76b)
  return _internal_num_76b();
}
inline ::apollo::drivers::Num_76b* Mobileye::release_num_76b() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Mobileye.num_76b)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::drivers::Num_76b* temp = num_76b_;
  num_76b_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Num_76b* Mobileye::_internal_mutable_num_76b() {
  _has_bits_[0] |= 0x00000200u;
  if (num_76b_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Num_76b>(GetArenaNoVirtual());
    num_76b_ = p;
  }
  return num_76b_;
}
inline ::apollo::drivers::Num_76b* Mobileye::mutable_num_76b() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.num_76b)
  return _internal_mutable_num_76b();
}
inline void Mobileye::set_allocated_num_76b(::apollo::drivers::Num_76b* num_76b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete num_76b_;
  }
  if (num_76b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      num_76b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num_76b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  num_76b_ = num_76b;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Mobileye.num_76b)
}

// repeated .apollo.drivers.Next_76c next_76c = 14;
inline int Mobileye::_internal_next_76c_size() const {
  return next_76c_.size();
}
inline int Mobileye::next_76c_size() const {
  return _internal_next_76c_size();
}
inline void Mobileye::clear_next_76c() {
  next_76c_.Clear();
}
inline ::apollo::drivers::Next_76c* Mobileye::mutable_next_76c(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.next_76c)
  return next_76c_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76c >*
Mobileye::mutable_next_76c() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.next_76c)
  return &next_76c_;
}
inline const ::apollo::drivers::Next_76c& Mobileye::_internal_next_76c(int index) const {
  return next_76c_.Get(index);
}
inline const ::apollo::drivers::Next_76c& Mobileye::next_76c(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.next_76c)
  return _internal_next_76c(index);
}
inline ::apollo::drivers::Next_76c* Mobileye::_internal_add_next_76c() {
  return next_76c_.Add();
}
inline ::apollo::drivers::Next_76c* Mobileye::add_next_76c() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.next_76c)
  return _internal_add_next_76c();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76c >&
Mobileye::next_76c() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.next_76c)
  return next_76c_;
}

// repeated .apollo.drivers.Next_76d next_76d = 15;
inline int Mobileye::_internal_next_76d_size() const {
  return next_76d_.size();
}
inline int Mobileye::next_76d_size() const {
  return _internal_next_76d_size();
}
inline void Mobileye::clear_next_76d() {
  next_76d_.Clear();
}
inline ::apollo::drivers::Next_76d* Mobileye::mutable_next_76d(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Mobileye.next_76d)
  return next_76d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76d >*
Mobileye::mutable_next_76d() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Mobileye.next_76d)
  return &next_76d_;
}
inline const ::apollo::drivers::Next_76d& Mobileye::_internal_next_76d(int index) const {
  return next_76d_.Get(index);
}
inline const ::apollo::drivers::Next_76d& Mobileye::next_76d(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Mobileye.next_76d)
  return _internal_next_76d(index);
}
inline ::apollo::drivers::Next_76d* Mobileye::_internal_add_next_76d() {
  return next_76d_.Add();
}
inline ::apollo::drivers::Next_76d* Mobileye::add_next_76d() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Mobileye.next_76d)
  return _internal_add_next_76d();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Next_76d >&
Mobileye::next_76d() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Mobileye.next_76d)
  return next_76d_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fmobileye_2eproto
