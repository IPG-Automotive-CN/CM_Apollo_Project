// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/racobit_radar.proto

#include "modules/drivers/proto/racobit_radar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RacobitClusterListStatus_600_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RacobitObjectListStatus_60A_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RacobitRadarObs_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RacobitRadarState_201_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto;
namespace apollo {
namespace drivers {
class RacobitClusterListStatus_600DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RacobitClusterListStatus_600> _instance;
} _RacobitClusterListStatus_600_default_instance_;
class RacobitObjectListStatus_60ADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RacobitObjectListStatus_60A> _instance;
} _RacobitObjectListStatus_60A_default_instance_;
class RacobitRadarState_201DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RacobitRadarState_201> _instance;
} _RacobitRadarState_201_default_instance_;
class RacobitRadarObsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RacobitRadarObs> _instance;
} _RacobitRadarObs_default_instance_;
class RacobitRadarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RacobitRadar> _instance;
} _RacobitRadar_default_instance_;
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_RacobitClusterListStatus_600_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitClusterListStatus_600_default_instance_;
    new (ptr) ::apollo::drivers::RacobitClusterListStatus_600();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitClusterListStatus_600::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RacobitClusterListStatus_600_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RacobitClusterListStatus_600_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto}, {}};

static void InitDefaultsscc_info_RacobitObjectListStatus_60A_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitObjectListStatus_60A_default_instance_;
    new (ptr) ::apollo::drivers::RacobitObjectListStatus_60A();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitObjectListStatus_60A::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RacobitObjectListStatus_60A_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RacobitObjectListStatus_60A_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto}, {}};

static void InitDefaultsscc_info_RacobitRadar_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitRadar_default_instance_;
    new (ptr) ::apollo::drivers::RacobitRadar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitRadar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RacobitRadar_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_RacobitRadar_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_RacobitRadarObs_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,
      &scc_info_RacobitRadarState_201_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,
      &scc_info_RacobitClusterListStatus_600_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,
      &scc_info_RacobitObjectListStatus_60A_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,}};

static void InitDefaultsscc_info_RacobitRadarObs_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitRadarObs_default_instance_;
    new (ptr) ::apollo::drivers::RacobitRadarObs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitRadarObs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RacobitRadarObs_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RacobitRadarObs_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_RacobitRadarState_201_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitRadarState_201_default_instance_;
    new (ptr) ::apollo::drivers::RacobitRadarState_201();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitRadarState_201::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RacobitRadarState_201_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RacobitRadarState_201_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, near_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, far_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, meas_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, interface_version_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, nof_objects_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, meas_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, interface_version_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, radar_power_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, output_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, rcs_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, send_quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, send_ext_info_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, clusterortrack_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_vel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_vel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, rcs_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, dynprop_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_dist_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_dist_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_vel_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_vel_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, probexist_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, meas_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, oritation_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_accel_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_accel_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, oritation_angle_rms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, length_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, obstacle_class_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  11,
  8,
  9,
  10,
  13,
  14,
  12,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadar, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadar, contiobs_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadar, radar_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadar, cluster_list_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::RacobitRadar, object_list_status_),
  0,
  ~0u,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::drivers::RacobitClusterListStatus_600)},
  { 13, 21, sizeof(::apollo::drivers::RacobitObjectListStatus_60A)},
  { 24, 35, sizeof(::apollo::drivers::RacobitRadarState_201)},
  { 41, 70, sizeof(::apollo::drivers::RacobitRadarObs)},
  { 94, 104, sizeof(::apollo::drivers::RacobitRadar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_RacobitClusterListStatus_600_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_RacobitObjectListStatus_60A_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_RacobitRadarState_201_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_RacobitRadarObs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_RacobitRadar_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/drivers/proto/racobit_radar.pr"
  "oto\022\016apollo.drivers\032!modules/common/prot"
  "o/header.proto\032Bmodules/drivers/radar/ra"
  "cobit_radar/proto/racobit_radar_conf.pro"
  "to\"t\n\034RacobitClusterListStatus_600\022\017\n\004ne"
  "ar\030\001 \001(\005:\0010\022\016\n\003far\030\002 \001(\005:\0010\022\030\n\014meas_coun"
  "ter\030\003 \001(\005:\002-1\022\031\n\021interface_version\030\004 \001(\005"
  "\"j\n\033RacobitObjectListStatus_60A\022\026\n\013nof_o"
  "bjects\030\001 \001(\005:\0010\022\030\n\014meas_counter\030\002 \001(\005:\002-"
  "1\022\031\n\021interface_version\030\003 \001(\005\"\361\001\n\025Racobit"
  "RadarState_201\022\024\n\014max_distance\030\001 \001(\r\022\023\n\013"
  "radar_power\030\002 \001(\r\022=\n\013output_type\030\003 \001(\0162("
  ".apollo.drivers.racobit_radar.OutputType"
  "\022A\n\rrcs_threshold\030\004 \001(\0162*.apollo.drivers"
  ".racobit_radar.RcsThreshold\022\024\n\014send_qual"
  "ity\030\005 \001(\010\022\025\n\rsend_ext_info\030\006 \001(\010\"\303\004\n\017Rac"
  "obitRadarObs\022%\n\006header\030\001 \001(\0132\025.apollo.co"
  "mmon.Header\022\026\n\016clusterortrack\030\002 \001(\010\022\023\n\013o"
  "bstacle_id\030\003 \001(\005\022\026\n\016longitude_dist\030\004 \001(\001"
  "\022\024\n\014lateral_dist\030\005 \001(\001\022\025\n\rlongitude_vel\030"
  "\006 \001(\001\022\023\n\013lateral_vel\030\007 \001(\001\022\013\n\003rcs\030\010 \001(\001\022"
  "\017\n\007dynprop\030\t \001(\005\022\032\n\022longitude_dist_rms\030\n"
  " \001(\001\022\030\n\020lateral_dist_rms\030\013 \001(\001\022\031\n\021longit"
  "ude_vel_rms\030\014 \001(\001\022\027\n\017lateral_vel_rms\030\r \001"
  "(\001\022\021\n\tprobexist\030\016 \001(\001\022\022\n\nmeas_state\030\017 \001("
  "\005\022\027\n\017longitude_accel\030\020 \001(\001\022\025\n\rlateral_ac"
  "cel\030\021 \001(\001\022\027\n\017oritation_angle\030\022 \001(\001\022\033\n\023lo"
  "ngitude_accel_rms\030\023 \001(\001\022\031\n\021lateral_accel"
  "_rms\030\024 \001(\001\022\033\n\023oritation_angle_rms\030\025 \001(\001\022"
  "\016\n\006length\030\026 \001(\001\022\r\n\005width\030\027 \001(\001\022\026\n\016obstac"
  "le_class\030\030 \001(\005\"\270\002\n\014RacobitRadar\022%\n\006heade"
  "r\030\001 \001(\0132\025.apollo.common.Header\0221\n\010contio"
  "bs\030\002 \003(\0132\037.apollo.drivers.RacobitRadarOb"
  "s\022:\n\013radar_state\030\003 \001(\0132%.apollo.drivers."
  "RacobitRadarState_201\022I\n\023cluster_list_st"
  "atus\030\004 \001(\0132,.apollo.drivers.RacobitClust"
  "erListStatus_600\022G\n\022object_list_status\030\005"
  " \001(\0132+.apollo.drivers.RacobitObjectListS"
  "tatus_60A"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto_sccs[5] = {
  &scc_info_RacobitClusterListStatus_600_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,
  &scc_info_RacobitObjectListStatus_60A_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,
  &scc_info_RacobitRadar_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,
  &scc_info_RacobitRadarObs_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,
  &scc_info_RacobitRadarState_201_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto = {
  &descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto, "modules/drivers/proto/racobit_radar.proto", 1529,
  &descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto_once, descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto_sccs, descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto, 5, file_level_enum_descriptors_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto, file_level_service_descriptors_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto), true);
namespace apollo {
namespace drivers {

// ===================================================================

void RacobitClusterListStatus_600::InitAsDefaultInstance() {
}
class RacobitClusterListStatus_600::_Internal {
 public:
  using HasBits = decltype(std::declval<RacobitClusterListStatus_600>()._has_bits_);
  static void set_has_near(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_far(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_meas_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_interface_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RacobitClusterListStatus_600::RacobitClusterListStatus_600()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitClusterListStatus_600)
}
RacobitClusterListStatus_600::RacobitClusterListStatus_600(const RacobitClusterListStatus_600& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&near_, &from.near_,
    static_cast<size_t>(reinterpret_cast<char*>(&meas_counter_) -
    reinterpret_cast<char*>(&near_)) + sizeof(meas_counter_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitClusterListStatus_600)
}

void RacobitClusterListStatus_600::SharedCtor() {
  ::memset(&near_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interface_version_) -
      reinterpret_cast<char*>(&near_)) + sizeof(interface_version_));
  meas_counter_ = -1;
}

RacobitClusterListStatus_600::~RacobitClusterListStatus_600() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitClusterListStatus_600)
  SharedDtor();
}

void RacobitClusterListStatus_600::SharedDtor() {
}

void RacobitClusterListStatus_600::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RacobitClusterListStatus_600& RacobitClusterListStatus_600::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RacobitClusterListStatus_600_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base);
  return *internal_default_instance();
}


void RacobitClusterListStatus_600::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitClusterListStatus_600)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&near_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interface_version_) -
        reinterpret_cast<char*>(&near_)) + sizeof(interface_version_));
    meas_counter_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RacobitClusterListStatus_600::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 near = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_near(&has_bits);
          near_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 far = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_far(&has_bits);
          far_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 meas_counter = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_meas_counter(&has_bits);
          meas_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 interface_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_interface_version(&has_bits);
          interface_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RacobitClusterListStatus_600::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitClusterListStatus_600)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 near = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_near(), target);
  }

  // optional int32 far = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_far(), target);
  }

  // optional int32 meas_counter = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_meas_counter(), target);
  }

  // optional int32 interface_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_interface_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitClusterListStatus_600)
  return target;
}

size_t RacobitClusterListStatus_600::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitClusterListStatus_600)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 near = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_near());
    }

    // optional int32 far = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_far());
    }

    // optional int32 interface_version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_interface_version());
    }

    // optional int32 meas_counter = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_meas_counter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitClusterListStatus_600::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitClusterListStatus_600)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitClusterListStatus_600* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RacobitClusterListStatus_600>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitClusterListStatus_600)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitClusterListStatus_600)
    MergeFrom(*source);
  }
}

void RacobitClusterListStatus_600::MergeFrom(const RacobitClusterListStatus_600& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitClusterListStatus_600)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      near_ = from.near_;
    }
    if (cached_has_bits & 0x00000002u) {
      far_ = from.far_;
    }
    if (cached_has_bits & 0x00000004u) {
      interface_version_ = from.interface_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      meas_counter_ = from.meas_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RacobitClusterListStatus_600::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitClusterListStatus_600)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitClusterListStatus_600::CopyFrom(const RacobitClusterListStatus_600& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitClusterListStatus_600)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitClusterListStatus_600::IsInitialized() const {
  return true;
}

void RacobitClusterListStatus_600::InternalSwap(RacobitClusterListStatus_600* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(near_, other->near_);
  swap(far_, other->far_);
  swap(interface_version_, other->interface_version_);
  swap(meas_counter_, other->meas_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RacobitClusterListStatus_600::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RacobitObjectListStatus_60A::InitAsDefaultInstance() {
}
class RacobitObjectListStatus_60A::_Internal {
 public:
  using HasBits = decltype(std::declval<RacobitObjectListStatus_60A>()._has_bits_);
  static void set_has_nof_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_meas_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interface_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RacobitObjectListStatus_60A::RacobitObjectListStatus_60A()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitObjectListStatus_60A)
}
RacobitObjectListStatus_60A::RacobitObjectListStatus_60A(const RacobitObjectListStatus_60A& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nof_objects_, &from.nof_objects_,
    static_cast<size_t>(reinterpret_cast<char*>(&meas_counter_) -
    reinterpret_cast<char*>(&nof_objects_)) + sizeof(meas_counter_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitObjectListStatus_60A)
}

void RacobitObjectListStatus_60A::SharedCtor() {
  ::memset(&nof_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interface_version_) -
      reinterpret_cast<char*>(&nof_objects_)) + sizeof(interface_version_));
  meas_counter_ = -1;
}

RacobitObjectListStatus_60A::~RacobitObjectListStatus_60A() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitObjectListStatus_60A)
  SharedDtor();
}

void RacobitObjectListStatus_60A::SharedDtor() {
}

void RacobitObjectListStatus_60A::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RacobitObjectListStatus_60A& RacobitObjectListStatus_60A::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RacobitObjectListStatus_60A_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base);
  return *internal_default_instance();
}


void RacobitObjectListStatus_60A::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitObjectListStatus_60A)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&nof_objects_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interface_version_) -
        reinterpret_cast<char*>(&nof_objects_)) + sizeof(interface_version_));
    meas_counter_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RacobitObjectListStatus_60A::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 nof_objects = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nof_objects(&has_bits);
          nof_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 meas_counter = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_meas_counter(&has_bits);
          meas_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 interface_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_interface_version(&has_bits);
          interface_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RacobitObjectListStatus_60A::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitObjectListStatus_60A)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nof_objects = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nof_objects(), target);
  }

  // optional int32 meas_counter = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_meas_counter(), target);
  }

  // optional int32 interface_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_interface_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitObjectListStatus_60A)
  return target;
}

size_t RacobitObjectListStatus_60A::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitObjectListStatus_60A)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 nof_objects = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nof_objects());
    }

    // optional int32 interface_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_interface_version());
    }

    // optional int32 meas_counter = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_meas_counter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitObjectListStatus_60A::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitObjectListStatus_60A)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitObjectListStatus_60A* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RacobitObjectListStatus_60A>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitObjectListStatus_60A)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitObjectListStatus_60A)
    MergeFrom(*source);
  }
}

void RacobitObjectListStatus_60A::MergeFrom(const RacobitObjectListStatus_60A& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitObjectListStatus_60A)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      nof_objects_ = from.nof_objects_;
    }
    if (cached_has_bits & 0x00000002u) {
      interface_version_ = from.interface_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      meas_counter_ = from.meas_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RacobitObjectListStatus_60A::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitObjectListStatus_60A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitObjectListStatus_60A::CopyFrom(const RacobitObjectListStatus_60A& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitObjectListStatus_60A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitObjectListStatus_60A::IsInitialized() const {
  return true;
}

void RacobitObjectListStatus_60A::InternalSwap(RacobitObjectListStatus_60A* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nof_objects_, other->nof_objects_);
  swap(interface_version_, other->interface_version_);
  swap(meas_counter_, other->meas_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RacobitObjectListStatus_60A::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RacobitRadarState_201::InitAsDefaultInstance() {
}
class RacobitRadarState_201::_Internal {
 public:
  using HasBits = decltype(std::declval<RacobitRadarState_201>()._has_bits_);
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radar_power(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_output_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rcs_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_send_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_send_ext_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RacobitRadarState_201::RacobitRadarState_201()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitRadarState_201)
}
RacobitRadarState_201::RacobitRadarState_201(const RacobitRadarState_201& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_distance_, &from.max_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_ext_info_) -
    reinterpret_cast<char*>(&max_distance_)) + sizeof(send_ext_info_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitRadarState_201)
}

void RacobitRadarState_201::SharedCtor() {
  ::memset(&max_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_ext_info_) -
      reinterpret_cast<char*>(&max_distance_)) + sizeof(send_ext_info_));
}

RacobitRadarState_201::~RacobitRadarState_201() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitRadarState_201)
  SharedDtor();
}

void RacobitRadarState_201::SharedDtor() {
}

void RacobitRadarState_201::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RacobitRadarState_201& RacobitRadarState_201::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RacobitRadarState_201_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base);
  return *internal_default_instance();
}


void RacobitRadarState_201::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitRadarState_201)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&max_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_ext_info_) -
        reinterpret_cast<char*>(&max_distance_)) + sizeof(send_ext_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RacobitRadarState_201::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_distance(&has_bits);
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radar_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radar_power(&has_bits);
          radar_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::racobit_radar::OutputType_IsValid(val))) {
            _internal_set_output_type(static_cast<::apollo::drivers::racobit_radar::OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::racobit_radar::RcsThreshold_IsValid(val))) {
            _internal_set_rcs_threshold(static_cast<::apollo::drivers::racobit_radar::RcsThreshold>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool send_quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_send_quality(&has_bits);
          send_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_ext_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send_ext_info(&has_bits);
          send_ext_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RacobitRadarState_201::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitRadarState_201)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_distance(), target);
  }

  // optional uint32 radar_power = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radar_power(), target);
  }

  // optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_output_type(), target);
  }

  // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rcs_threshold(), target);
  }

  // optional bool send_quality = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_send_quality(), target);
  }

  // optional bool send_ext_info = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_send_ext_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitRadarState_201)
  return target;
}

size_t RacobitRadarState_201::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitRadarState_201)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 max_distance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_distance());
    }

    // optional uint32 radar_power = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radar_power());
    }

    // optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_type());
    }

    // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rcs_threshold());
    }

    // optional bool send_quality = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitRadarState_201::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitRadarState_201)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitRadarState_201* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RacobitRadarState_201>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitRadarState_201)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitRadarState_201)
    MergeFrom(*source);
  }
}

void RacobitRadarState_201::MergeFrom(const RacobitRadarState_201& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitRadarState_201)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      max_distance_ = from.max_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      radar_power_ = from.radar_power_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_type_ = from.output_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rcs_threshold_ = from.rcs_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      send_quality_ = from.send_quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ext_info_ = from.send_ext_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RacobitRadarState_201::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitRadarState_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitRadarState_201::CopyFrom(const RacobitRadarState_201& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitRadarState_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitRadarState_201::IsInitialized() const {
  return true;
}

void RacobitRadarState_201::InternalSwap(RacobitRadarState_201* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_distance_, other->max_distance_);
  swap(radar_power_, other->radar_power_);
  swap(output_type_, other->output_type_);
  swap(rcs_threshold_, other->rcs_threshold_);
  swap(send_quality_, other->send_quality_);
  swap(send_ext_info_, other->send_ext_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RacobitRadarState_201::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RacobitRadarObs::InitAsDefaultInstance() {
  ::apollo::drivers::_RacobitRadarObs_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class RacobitRadarObs::_Internal {
 public:
  using HasBits = decltype(std::declval<RacobitRadarObs>()._has_bits_);
  static const ::apollo::common::Header& header(const RacobitRadarObs* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clusterortrack(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_longitude_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lateral_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lateral_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rcs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dynprop(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_longitude_dist_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lateral_dist_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_longitude_vel_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lateral_vel_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_probexist(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_meas_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_longitude_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lateral_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_oritation_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_longitude_accel_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lateral_accel_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_oritation_angle_rms(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_obstacle_class(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::apollo::common::Header&
RacobitRadarObs::_Internal::header(const RacobitRadarObs* msg) {
  return *msg->header_;
}
void RacobitRadarObs::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RacobitRadarObs::RacobitRadarObs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitRadarObs)
}
RacobitRadarObs::RacobitRadarObs(const RacobitRadarObs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&clusterortrack_, &from.clusterortrack_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_class_) -
    reinterpret_cast<char*>(&clusterortrack_)) + sizeof(obstacle_class_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitRadarObs)
}

void RacobitRadarObs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RacobitRadarObs_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_class_) -
      reinterpret_cast<char*>(&header_)) + sizeof(obstacle_class_));
}

RacobitRadarObs::~RacobitRadarObs() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitRadarObs)
  SharedDtor();
}

void RacobitRadarObs::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RacobitRadarObs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RacobitRadarObs& RacobitRadarObs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RacobitRadarObs_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base);
  return *internal_default_instance();
}


void RacobitRadarObs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitRadarObs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&clusterortrack_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rcs_) -
        reinterpret_cast<char*>(&clusterortrack_)) + sizeof(rcs_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&longitude_dist_rms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_accel_) -
        reinterpret_cast<char*>(&longitude_dist_rms_)) + sizeof(longitude_accel_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&lateral_accel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_class_) -
        reinterpret_cast<char*>(&lateral_accel_)) + sizeof(obstacle_class_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RacobitRadarObs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clusterortrack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clusterortrack(&has_bits);
          clusterortrack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 obstacle_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_obstacle_id(&has_bits);
          obstacle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double longitude_dist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_longitude_dist(&has_bits);
          longitude_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_dist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_lateral_dist(&has_bits);
          lateral_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude_vel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_longitude_vel(&has_bits);
          longitude_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_vel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_lateral_vel(&has_bits);
          lateral_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double rcs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_rcs(&has_bits);
          rcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 dynprop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_dynprop(&has_bits);
          dynprop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double longitude_dist_rms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_longitude_dist_rms(&has_bits);
          longitude_dist_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_dist_rms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_lateral_dist_rms(&has_bits);
          lateral_dist_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude_vel_rms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_longitude_vel_rms(&has_bits);
          longitude_vel_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_vel_rms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_lateral_vel_rms(&has_bits);
          lateral_vel_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double probexist = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_probexist(&has_bits);
          probexist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 meas_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_meas_state(&has_bits);
          meas_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double longitude_accel = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_longitude_accel(&has_bits);
          longitude_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_accel = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_lateral_accel(&has_bits);
          lateral_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double oritation_angle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_oritation_angle(&has_bits);
          oritation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude_accel_rms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_longitude_accel_rms(&has_bits);
          longitude_accel_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lateral_accel_rms = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_lateral_accel_rms(&has_bits);
          lateral_accel_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double oritation_angle_rms = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_oritation_angle_rms(&has_bits);
          oritation_angle_rms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double length = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double width = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 obstacle_class = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_obstacle_class(&has_bits);
          obstacle_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RacobitRadarObs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitRadarObs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional bool clusterortrack = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clusterortrack(), target);
  }

  // optional int32 obstacle_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_obstacle_id(), target);
  }

  // optional double longitude_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude_dist(), target);
  }

  // optional double lateral_dist = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_lateral_dist(), target);
  }

  // optional double longitude_vel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_longitude_vel(), target);
  }

  // optional double lateral_vel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lateral_vel(), target);
  }

  // optional double rcs = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_rcs(), target);
  }

  // optional int32 dynprop = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_dynprop(), target);
  }

  // optional double longitude_dist_rms = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_longitude_dist_rms(), target);
  }

  // optional double lateral_dist_rms = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_lateral_dist_rms(), target);
  }

  // optional double longitude_vel_rms = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_longitude_vel_rms(), target);
  }

  // optional double lateral_vel_rms = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_lateral_vel_rms(), target);
  }

  // optional double probexist = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_probexist(), target);
  }

  // optional int32 meas_state = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_meas_state(), target);
  }

  // optional double longitude_accel = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_longitude_accel(), target);
  }

  // optional double lateral_accel = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_lateral_accel(), target);
  }

  // optional double oritation_angle = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_oritation_angle(), target);
  }

  // optional double longitude_accel_rms = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_longitude_accel_rms(), target);
  }

  // optional double lateral_accel_rms = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_lateral_accel_rms(), target);
  }

  // optional double oritation_angle_rms = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_oritation_angle_rms(), target);
  }

  // optional double length = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_length(), target);
  }

  // optional double width = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_width(), target);
  }

  // optional int32 obstacle_class = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_obstacle_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitRadarObs)
  return target;
}

size_t RacobitRadarObs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitRadarObs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional bool clusterortrack = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 obstacle_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_obstacle_id());
    }

    // optional double longitude_dist = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double lateral_dist = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double longitude_vel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double lateral_vel = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double rcs = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double longitude_dist_rms = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double lateral_dist_rms = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double longitude_vel_rms = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 dynprop = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dynprop());
    }

    // optional int32 meas_state = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_meas_state());
    }

    // optional double lateral_vel_rms = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double probexist = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double longitude_accel = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double lateral_accel = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double oritation_angle = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double longitude_accel_rms = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double lateral_accel_rms = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double oritation_angle_rms = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double length = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double width = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional int32 obstacle_class = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_obstacle_class());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitRadarObs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitRadarObs)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitRadarObs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RacobitRadarObs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitRadarObs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitRadarObs)
    MergeFrom(*source);
  }
}

void RacobitRadarObs::MergeFrom(const RacobitRadarObs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitRadarObs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      clusterortrack_ = from.clusterortrack_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacle_id_ = from.obstacle_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_dist_ = from.longitude_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_dist_ = from.lateral_dist_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_vel_ = from.longitude_vel_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_vel_ = from.lateral_vel_;
    }
    if (cached_has_bits & 0x00000080u) {
      rcs_ = from.rcs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      longitude_dist_rms_ = from.longitude_dist_rms_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_dist_rms_ = from.lateral_dist_rms_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitude_vel_rms_ = from.longitude_vel_rms_;
    }
    if (cached_has_bits & 0x00000800u) {
      dynprop_ = from.dynprop_;
    }
    if (cached_has_bits & 0x00001000u) {
      meas_state_ = from.meas_state_;
    }
    if (cached_has_bits & 0x00002000u) {
      lateral_vel_rms_ = from.lateral_vel_rms_;
    }
    if (cached_has_bits & 0x00004000u) {
      probexist_ = from.probexist_;
    }
    if (cached_has_bits & 0x00008000u) {
      longitude_accel_ = from.longitude_accel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      lateral_accel_ = from.lateral_accel_;
    }
    if (cached_has_bits & 0x00020000u) {
      oritation_angle_ = from.oritation_angle_;
    }
    if (cached_has_bits & 0x00040000u) {
      longitude_accel_rms_ = from.longitude_accel_rms_;
    }
    if (cached_has_bits & 0x00080000u) {
      lateral_accel_rms_ = from.lateral_accel_rms_;
    }
    if (cached_has_bits & 0x00100000u) {
      oritation_angle_rms_ = from.oritation_angle_rms_;
    }
    if (cached_has_bits & 0x00200000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00400000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00800000u) {
      obstacle_class_ = from.obstacle_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RacobitRadarObs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitRadarObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitRadarObs::CopyFrom(const RacobitRadarObs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitRadarObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitRadarObs::IsInitialized() const {
  return true;
}

void RacobitRadarObs::InternalSwap(RacobitRadarObs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(clusterortrack_, other->clusterortrack_);
  swap(obstacle_id_, other->obstacle_id_);
  swap(longitude_dist_, other->longitude_dist_);
  swap(lateral_dist_, other->lateral_dist_);
  swap(longitude_vel_, other->longitude_vel_);
  swap(lateral_vel_, other->lateral_vel_);
  swap(rcs_, other->rcs_);
  swap(longitude_dist_rms_, other->longitude_dist_rms_);
  swap(lateral_dist_rms_, other->lateral_dist_rms_);
  swap(longitude_vel_rms_, other->longitude_vel_rms_);
  swap(dynprop_, other->dynprop_);
  swap(meas_state_, other->meas_state_);
  swap(lateral_vel_rms_, other->lateral_vel_rms_);
  swap(probexist_, other->probexist_);
  swap(longitude_accel_, other->longitude_accel_);
  swap(lateral_accel_, other->lateral_accel_);
  swap(oritation_angle_, other->oritation_angle_);
  swap(longitude_accel_rms_, other->longitude_accel_rms_);
  swap(lateral_accel_rms_, other->lateral_accel_rms_);
  swap(oritation_angle_rms_, other->oritation_angle_rms_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(obstacle_class_, other->obstacle_class_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RacobitRadarObs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RacobitRadar::InitAsDefaultInstance() {
  ::apollo::drivers::_RacobitRadar_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::drivers::_RacobitRadar_default_instance_._instance.get_mutable()->radar_state_ = const_cast< ::apollo::drivers::RacobitRadarState_201*>(
      ::apollo::drivers::RacobitRadarState_201::internal_default_instance());
  ::apollo::drivers::_RacobitRadar_default_instance_._instance.get_mutable()->cluster_list_status_ = const_cast< ::apollo::drivers::RacobitClusterListStatus_600*>(
      ::apollo::drivers::RacobitClusterListStatus_600::internal_default_instance());
  ::apollo::drivers::_RacobitRadar_default_instance_._instance.get_mutable()->object_list_status_ = const_cast< ::apollo::drivers::RacobitObjectListStatus_60A*>(
      ::apollo::drivers::RacobitObjectListStatus_60A::internal_default_instance());
}
class RacobitRadar::_Internal {
 public:
  using HasBits = decltype(std::declval<RacobitRadar>()._has_bits_);
  static const ::apollo::common::Header& header(const RacobitRadar* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::RacobitRadarState_201& radar_state(const RacobitRadar* msg);
  static void set_has_radar_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::drivers::RacobitClusterListStatus_600& cluster_list_status(const RacobitRadar* msg);
  static void set_has_cluster_list_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::drivers::RacobitObjectListStatus_60A& object_list_status(const RacobitRadar* msg);
  static void set_has_object_list_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
RacobitRadar::_Internal::header(const RacobitRadar* msg) {
  return *msg->header_;
}
const ::apollo::drivers::RacobitRadarState_201&
RacobitRadar::_Internal::radar_state(const RacobitRadar* msg) {
  return *msg->radar_state_;
}
const ::apollo::drivers::RacobitClusterListStatus_600&
RacobitRadar::_Internal::cluster_list_status(const RacobitRadar* msg) {
  return *msg->cluster_list_status_;
}
const ::apollo::drivers::RacobitObjectListStatus_60A&
RacobitRadar::_Internal::object_list_status(const RacobitRadar* msg) {
  return *msg->object_list_status_;
}
void RacobitRadar::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RacobitRadar::RacobitRadar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitRadar)
}
RacobitRadar::RacobitRadar(const RacobitRadar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      contiobs_(from.contiobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_radar_state()) {
    radar_state_ = new ::apollo::drivers::RacobitRadarState_201(*from.radar_state_);
  } else {
    radar_state_ = nullptr;
  }
  if (from._internal_has_cluster_list_status()) {
    cluster_list_status_ = new ::apollo::drivers::RacobitClusterListStatus_600(*from.cluster_list_status_);
  } else {
    cluster_list_status_ = nullptr;
  }
  if (from._internal_has_object_list_status()) {
    object_list_status_ = new ::apollo::drivers::RacobitObjectListStatus_60A(*from.object_list_status_);
  } else {
    object_list_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitRadar)
}

void RacobitRadar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RacobitRadar_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_list_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(object_list_status_));
}

RacobitRadar::~RacobitRadar() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitRadar)
  SharedDtor();
}

void RacobitRadar::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete radar_state_;
  if (this != internal_default_instance()) delete cluster_list_status_;
  if (this != internal_default_instance()) delete object_list_status_;
}

void RacobitRadar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RacobitRadar& RacobitRadar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RacobitRadar_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto.base);
  return *internal_default_instance();
}


void RacobitRadar::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitRadar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contiobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(radar_state_ != nullptr);
      radar_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cluster_list_status_ != nullptr);
      cluster_list_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(object_list_status_ != nullptr);
      object_list_status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RacobitRadar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contiobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_radar_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cluster_list_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_list_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RacobitRadar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitRadar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contiobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_contiobs(i), target, stream);
  }

  // optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::radar_state(this), target, stream);
  }

  // optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cluster_list_status(this), target, stream);
  }

  // optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::object_list_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitRadar)
  return target;
}

size_t RacobitRadar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitRadar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
  total_size += 1UL * this->_internal_contiobs_size();
  for (const auto& msg : this->contiobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radar_state_);
    }

    // optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cluster_list_status_);
    }

    // optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *object_list_status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitRadar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitRadar)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitRadar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RacobitRadar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitRadar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitRadar)
    MergeFrom(*source);
  }
}

void RacobitRadar::MergeFrom(const RacobitRadar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitRadar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contiobs_.MergeFrom(from.contiobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_radar_state()->::apollo::drivers::RacobitRadarState_201::MergeFrom(from._internal_radar_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cluster_list_status()->::apollo::drivers::RacobitClusterListStatus_600::MergeFrom(from._internal_cluster_list_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_object_list_status()->::apollo::drivers::RacobitObjectListStatus_60A::MergeFrom(from._internal_object_list_status());
    }
  }
}

void RacobitRadar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitRadar::CopyFrom(const RacobitRadar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitRadar::IsInitialized() const {
  return true;
}

void RacobitRadar::InternalSwap(RacobitRadar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contiobs_.InternalSwap(&other->contiobs_);
  swap(header_, other->header_);
  swap(radar_state_, other->radar_state_);
  swap(cluster_list_status_, other->cluster_list_status_);
  swap(object_list_status_, other->object_list_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RacobitRadar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::RacobitClusterListStatus_600* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitClusterListStatus_600 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitClusterListStatus_600 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::RacobitObjectListStatus_60A* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitObjectListStatus_60A >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitObjectListStatus_60A >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::RacobitRadarState_201* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitRadarState_201 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitRadarState_201 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::RacobitRadarObs* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitRadarObs >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitRadarObs >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::RacobitRadar* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitRadar >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitRadar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
