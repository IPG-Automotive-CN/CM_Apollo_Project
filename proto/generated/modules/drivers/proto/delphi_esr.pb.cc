// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/delphi_esr.proto

#include "modules/drivers/proto/delphi_esr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acm_inst_req_7e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acm_inst_resp_7e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_sim1_5c0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status1_4e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status2_4e1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status3_4e2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status4_4e3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status5_5e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status6_5e5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status7_5e6_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status8_5e7_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status9_5e8_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_track01_500_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Esr_trackmotionpower_540_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_trackmotionpower_540_Motionpower_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_valid1_5d0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_valid2_5d1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle1_4f0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle2_4f1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle3_5f2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle4_5f3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle5_5f4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle6_5f5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
namespace apollo {
namespace drivers {
class Esr_status9_5e8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status9_5e8> _instance;
} _Esr_status9_5e8_default_instance_;
class Esr_status6_5e5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status6_5e5> _instance;
} _Esr_status6_5e5_default_instance_;
class Esr_status5_5e4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status5_5e4> _instance;
} _Esr_status5_5e4_default_instance_;
class Esr_status3_4e2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status3_4e2> _instance;
} _Esr_status3_4e2_default_instance_;
class Esr_status4_4e3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status4_4e3> _instance;
} _Esr_status4_4e3_default_instance_;
class Esr_trackmotionpower_540_MotionpowerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_trackmotionpower_540_Motionpower> _instance;
} _Esr_trackmotionpower_540_Motionpower_default_instance_;
class Esr_trackmotionpower_540DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_trackmotionpower_540> _instance;
} _Esr_trackmotionpower_540_default_instance_;
class Acm_inst_req_7e0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acm_inst_req_7e0> _instance;
} _Acm_inst_req_7e0_default_instance_;
class Esr_track01_500DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_track01_500> _instance;
} _Esr_track01_500_default_instance_;
class Esr_valid1_5d0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_valid1_5d0> _instance;
} _Esr_valid1_5d0_default_instance_;
class Esr_valid2_5d1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_valid2_5d1> _instance;
} _Esr_valid2_5d1_default_instance_;
class Acm_inst_resp_7e4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acm_inst_resp_7e4> _instance;
} _Acm_inst_resp_7e4_default_instance_;
class Vehicle2_4f1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle2_4f1> _instance;
} _Vehicle2_4f1_default_instance_;
class Vehicle1_4f0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle1_4f0> _instance;
} _Vehicle1_4f0_default_instance_;
class Esr_sim1_5c0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_sim1_5c0> _instance;
} _Esr_sim1_5c0_default_instance_;
class Esr_status1_4e0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status1_4e0> _instance;
} _Esr_status1_4e0_default_instance_;
class Esr_status2_4e1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status2_4e1> _instance;
} _Esr_status2_4e1_default_instance_;
class Esr_status8_5e7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status8_5e7> _instance;
} _Esr_status8_5e7_default_instance_;
class Esr_status7_5e6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Esr_status7_5e6> _instance;
} _Esr_status7_5e6_default_instance_;
class Vehicle3_5f2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle3_5f2> _instance;
} _Vehicle3_5f2_default_instance_;
class Vehicle4_5f3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle4_5f3> _instance;
} _Vehicle4_5f3_default_instance_;
class Vehicle5_5f4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle5_5f4> _instance;
} _Vehicle5_5f4_default_instance_;
class Vehicle6_5f5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle6_5f5> _instance;
} _Vehicle6_5f5_default_instance_;
class DelphiESRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelphiESR> _instance;
} _DelphiESR_default_instance_;
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_Acm_inst_req_7e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Acm_inst_req_7e0_default_instance_;
    new (ptr) ::apollo::drivers::Acm_inst_req_7e0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Acm_inst_req_7e0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acm_inst_req_7e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Acm_inst_req_7e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Acm_inst_resp_7e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Acm_inst_resp_7e4_default_instance_;
    new (ptr) ::apollo::drivers::Acm_inst_resp_7e4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Acm_inst_resp_7e4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acm_inst_resp_7e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Acm_inst_resp_7e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_DelphiESR_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_DelphiESR_default_instance_;
    new (ptr) ::apollo::drivers::DelphiESR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::DelphiESR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<23> scc_info_DelphiESR_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 23, 0, InitDefaultsscc_info_DelphiESR_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_Esr_status9_5e8_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_status6_5e5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_status5_5e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_status3_4e2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_status4_4e3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_trackmotionpower_540_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Acm_inst_req_7e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_track01_500_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_valid1_5d0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_valid2_5d1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Acm_inst_resp_7e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Vehicle2_4f1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Vehicle1_4f0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_sim1_5c0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_status1_4e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_status2_4e1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_status8_5e7_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Esr_status7_5e6_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Vehicle3_5f2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Vehicle4_5f3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Vehicle5_5f4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
      &scc_info_Vehicle6_5f5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,}};

static void InitDefaultsscc_info_Esr_sim1_5c0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_sim1_5c0_default_instance_;
    new (ptr) ::apollo::drivers::Esr_sim1_5c0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_sim1_5c0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_sim1_5c0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_sim1_5c0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status1_4e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status1_4e0_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status1_4e0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status1_4e0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status1_4e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status1_4e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status2_4e1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status2_4e1_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status2_4e1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status2_4e1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status2_4e1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status2_4e1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status3_4e2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status3_4e2_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status3_4e2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status3_4e2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status3_4e2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status3_4e2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status4_4e3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status4_4e3_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status4_4e3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status4_4e3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status4_4e3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status4_4e3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status5_5e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status5_5e4_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status5_5e4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status5_5e4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status5_5e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status5_5e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status6_5e5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status6_5e5_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status6_5e5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status6_5e5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status6_5e5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status6_5e5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status7_5e6_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status7_5e6_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status7_5e6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status7_5e6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status7_5e6_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status7_5e6_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status8_5e7_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status8_5e7_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status8_5e7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status8_5e7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status8_5e7_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status8_5e7_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_status9_5e8_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_status9_5e8_default_instance_;
    new (ptr) ::apollo::drivers::Esr_status9_5e8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_status9_5e8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_status9_5e8_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_status9_5e8_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_track01_500_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_track01_500_default_instance_;
    new (ptr) ::apollo::drivers::Esr_track01_500();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_track01_500::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_track01_500_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_track01_500_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_trackmotionpower_540_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_trackmotionpower_540_default_instance_;
    new (ptr) ::apollo::drivers::Esr_trackmotionpower_540();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_trackmotionpower_540::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Esr_trackmotionpower_540_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Esr_trackmotionpower_540_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {
      &scc_info_Esr_trackmotionpower_540_Motionpower_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,}};

static void InitDefaultsscc_info_Esr_trackmotionpower_540_Motionpower_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_trackmotionpower_540_Motionpower_default_instance_;
    new (ptr) ::apollo::drivers::Esr_trackmotionpower_540_Motionpower();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_trackmotionpower_540_Motionpower::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_trackmotionpower_540_Motionpower_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_trackmotionpower_540_Motionpower_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_valid1_5d0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_valid1_5d0_default_instance_;
    new (ptr) ::apollo::drivers::Esr_valid1_5d0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_valid1_5d0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_valid1_5d0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_valid1_5d0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Esr_valid2_5d1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Esr_valid2_5d1_default_instance_;
    new (ptr) ::apollo::drivers::Esr_valid2_5d1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Esr_valid2_5d1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Esr_valid2_5d1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Esr_valid2_5d1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle1_4f0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Vehicle1_4f0_default_instance_;
    new (ptr) ::apollo::drivers::Vehicle1_4f0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Vehicle1_4f0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle1_4f0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle1_4f0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle2_4f1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Vehicle2_4f1_default_instance_;
    new (ptr) ::apollo::drivers::Vehicle2_4f1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Vehicle2_4f1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle2_4f1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle2_4f1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle3_5f2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Vehicle3_5f2_default_instance_;
    new (ptr) ::apollo::drivers::Vehicle3_5f2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Vehicle3_5f2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle3_5f2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle3_5f2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle4_5f3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Vehicle4_5f3_default_instance_;
    new (ptr) ::apollo::drivers::Vehicle4_5f3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Vehicle4_5f3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle4_5f3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle4_5f3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle5_5f4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Vehicle5_5f4_default_instance_;
    new (ptr) ::apollo::drivers::Vehicle5_5f4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Vehicle5_5f4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle5_5f4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle5_5f4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static void InitDefaultsscc_info_Vehicle6_5f5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Vehicle6_5f5_default_instance_;
    new (ptr) ::apollo::drivers::Vehicle6_5f5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Vehicle6_5f5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vehicle6_5f5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vehicle6_5f5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[52];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, can_tx_path_id_acc_3_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, can_tx_path_id_acc_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, can_tx_filtered_xohp_acc_cipv_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, can_tx_water_spray_target_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, can_tx_serial_num_3rd_byte_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, can_tx_sideslip_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status9_5e8, can_tx_avg_pwr_cwblkg_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_sw_version_dsp_3rd_byte_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_vertical_align_updated_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_vertical_misalignment_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_serv_align_updates_done_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_found_target_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_factory_misalignment_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_factory_align_status_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_factory_align_status_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_recommend_unconverge_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_wave_diff_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_system_power_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_supply_n5v_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status6_5e5, can_tx_supply_1p8v_a2d_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, can_tx_supply_10v_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, can_tx_temp2_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, can_tx_temp1_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, can_tx_swbatt_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, can_tx_supply_5vdx_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, can_tx_supply_5va_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, can_tx_supply_3p3v_a2d_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status5_5e4, can_tx_ignp_a2d_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status3_4e2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status3_4e2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status3_4e2, can_tx_sw_version_pld_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status3_4e2, can_tx_sw_version_host_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status3_4e2, can_tx_hw_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status3_4e2, can_tx_interface_version_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status3_4e2, can_tx_serial_num_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_truck_target_det_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_lr_only_grating_lobe_det_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_sidelobe_blockage_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_partial_blockage_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_path_id_acc_stat_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_mr_lr_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_auto_align_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_rolling_count_3_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_path_id_fcw_stat_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_path_id_fcw_move_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_path_id_cmbb_stat_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_path_id_cmbb_move_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status4_4e3, can_tx_path_id_acc_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540_Motionpower, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540_Motionpower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540_Motionpower, can_tx_track_moving_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540_Motionpower, can_tx_track_moving_fast_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540_Motionpower, can_tx_track_moving_slow_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540_Motionpower, can_tx_track_power_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540, can_tx_track_rolling_count_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540, can_tx_track_can_id_group_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_trackmotionpower_540, can_tx_track_motion_power_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_req_7e0, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_req_7e0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_req_7e0, command_ctr_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_req_7e0, command_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_req_7e0, cc_word_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_req_7e0, cc_word_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_req_7e0, cc_byte_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_req_7e0, cc_byte_1_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_grouping_changed_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_oncoming_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_lat_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_bridge_object_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_rolling_count_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_range_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_range_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_med_range_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_track01_500, can_tx_track_angle_),
  0,
  1,
  2,
  4,
  3,
  5,
  8,
  6,
  7,
  10,
  9,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid1_5d0, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid1_5d0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid1_5d0, can_tx_valid_lr_sn_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid1_5d0, can_tx_valid_lr_range_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid1_5d0, can_tx_valid_lr_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid1_5d0, can_tx_valid_lr_power_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid1_5d0, can_tx_valid_lr_angle_),
  1,
  0,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid2_5d1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid2_5d1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid2_5d1, can_tx_valid_mr_sn_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid2_5d1, can_tx_valid_mr_range_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid2_5d1, can_tx_valid_mr_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid2_5d1, can_tx_valid_mr_power_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_valid2_5d1, can_tx_valid_mr_angle_),
  1,
  0,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, data_7_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, data_6_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, data_5_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, data_4_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, data_3_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, rtn_cmd_counter_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, command_return_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Acm_inst_resp_7e4, pid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_volvo_short_track_roc_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_mr_only_transmit_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_lr_only_transmit_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_high_yaw_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_clear_faults_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_use_angle_misalignment_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_turn_signal_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_blockage_disable_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_vehicle_speed_validity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_mmr_upside_down_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_wiper_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_raw_data_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_radar_cmd_radiate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_grouping_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_maximum_tracks_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_lateral_mounting_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_angle_misalignment_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle2_4f1, can_rx_scan_index_ack_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_steering_angle_validity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_steering_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_steering_angle_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_steering_angle_rate_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_steering_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_radius_curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_yaw_rate_validity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_yaw_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_vehicle_speed_direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle1_4f0, can_rx_vehicle_speed_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_track_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_range_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_range_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_lat_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_lat_pos_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_function_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_sim1_5c0, can_rx_sim_angle_),
  0,
  1,
  2,
  3,
  5,
  4,
  7,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, can_tx_dsp_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, can_tx_comm_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, can_tx_yaw_rate_calc_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, can_tx_vehicle_speed_calc_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, can_tx_scan_index_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, can_tx_rolling_count_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status1_4e0, can_tx_radius_curvature_calc_),
  0,
  2,
  1,
  4,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_yaw_rate_bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_veh_spd_comp_factor_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_sw_version_dsp_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_temperature_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_raw_data_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_range_perf_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_overheat_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_maximum_tracks_ack_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_internal_error_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_grouping_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_xcvr_operational_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_steering_angle_ack_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status2_4e1, can_tx_rolling_count_2_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, can_tx_history_fault_7_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, can_tx_history_fault_6_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, can_tx_history_fault_5_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, can_tx_history_fault_4_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, can_tx_history_fault_3_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, can_tx_history_fault_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, can_tx_history_fault_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status8_5e7, can_tx_history_fault_0_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, can_tx_active_fault_7_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, can_tx_active_fault_6_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, can_tx_active_fault_5_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, can_tx_active_fault_4_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, can_tx_active_fault_3_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, can_tx_active_fault_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, can_tx_active_fault_0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Esr_status7_5e6, can_tx_active_fault_1_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_serv_align_updates_need_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_serv_align_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_serv_align_enable_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_aalign_avg_ctr_total_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_auto_align_converged_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_auto_align_disable_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_angle_mounting_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_wheel_slip_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_radar_height_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_radar_fov_mr_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_radar_fov_lr_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_long_accel_validity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_long_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_lat_accel_validity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle3_5f2, can_rx_lat_accel_),
  0,
  1,
  3,
  2,
  4,
  6,
  5,
  7,
  8,
  9,
  10,
  11,
  12,
  14,
  13,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_tgt_range_r2m_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_tgt_range_m2t_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_tgt_range_1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_tgt_mtg_space_ver_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_tgt_mtg_space_hor_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_tgt_mtg_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_align_samp_req_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_align_max_nt_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_align_cmd_2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle4_5f3, can_rx_fac_align_cmd_1_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_yaw_rate_bias_shift_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_steering_gear_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_wheelbase_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_distance_rear_axle_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_cw_blockage_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_funnel_offset_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_funnel_offset_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_beamwidth_vert_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle5_5f4, can_rx_oversteer_understeer_),
  4,
  0,
  1,
  2,
  3,
  6,
  7,
  8,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle6_5f5, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle6_5f5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle6_5f5, can_rx_inner_funnel_offset_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle6_5f5, can_rx_inner_funnel_offset_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle6_5f5, can_volvo_fa_range_max_short_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle6_5f5, can_volvo_fa_min_vspeed_short_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::Vehicle6_5f5, can_volvo_fa_aalign_estimate_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status9_5e8_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status6_5e5_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status5_5e4_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status3_4e2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status4_4e3_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_trackmotionpower_540_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, acm_inst_req_7e0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_track01_500_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_valid1_5d0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_valid2_5d1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, acm_inst_resp_7e4_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, vehicle2_4f1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, vehicle1_4f0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_sim1_5c0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status1_4e0_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status2_4e1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status8_5e7_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, esr_status7_5e6_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, vehicle3_5f2_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, vehicle4_5f3_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, vehicle5_5f4_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::DelphiESR, vehicle6_5f5_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  ~0u,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::apollo::drivers::Esr_status9_5e8)},
  { 19, 37, sizeof(::apollo::drivers::Esr_status6_5e5)},
  { 50, 63, sizeof(::apollo::drivers::Esr_status5_5e4)},
  { 71, 81, sizeof(::apollo::drivers::Esr_status3_4e2)},
  { 86, 104, sizeof(::apollo::drivers::Esr_status4_4e3)},
  { 117, 126, sizeof(::apollo::drivers::Esr_trackmotionpower_540_Motionpower)},
  { 130, 138, sizeof(::apollo::drivers::Esr_trackmotionpower_540)},
  { 141, 152, sizeof(::apollo::drivers::Acm_inst_req_7e0)},
  { 158, 175, sizeof(::apollo::drivers::Esr_track01_500)},
  { 187, 197, sizeof(::apollo::drivers::Esr_valid1_5d0)},
  { 202, 212, sizeof(::apollo::drivers::Esr_valid2_5d1)},
  { 217, 230, sizeof(::apollo::drivers::Acm_inst_resp_7e4)},
  { 238, 261, sizeof(::apollo::drivers::Vehicle2_4f1)},
  { 279, 294, sizeof(::apollo::drivers::Vehicle1_4f0)},
  { 304, 318, sizeof(::apollo::drivers::Esr_sim1_5c0)},
  { 327, 339, sizeof(::apollo::drivers::Esr_status1_4e0)},
  { 346, 364, sizeof(::apollo::drivers::Esr_status2_4e1)},
  { 377, 390, sizeof(::apollo::drivers::Esr_status8_5e7)},
  { 398, 411, sizeof(::apollo::drivers::Esr_status7_5e6)},
  { 419, 439, sizeof(::apollo::drivers::Vehicle3_5f2)},
  { 454, 469, sizeof(::apollo::drivers::Vehicle4_5f3)},
  { 479, 493, sizeof(::apollo::drivers::Vehicle5_5f4)},
  { 502, 512, sizeof(::apollo::drivers::Vehicle6_5f5)},
  { 517, 545, sizeof(::apollo::drivers::DelphiESR)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status9_5e8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status6_5e5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status5_5e4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status3_4e2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status4_4e3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_trackmotionpower_540_Motionpower_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_trackmotionpower_540_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Acm_inst_req_7e0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_track01_500_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_valid1_5d0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_valid2_5d1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Acm_inst_resp_7e4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Vehicle2_4f1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Vehicle1_4f0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_sim1_5c0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status1_4e0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status2_4e1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status8_5e7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Esr_status7_5e6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Vehicle3_5f2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Vehicle4_5f3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Vehicle5_5f4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_Vehicle6_5f5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::_DelphiESR_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/drivers/proto/delphi_esr.proto"
  "\022\016apollo.drivers\032!modules/common/proto/h"
  "eader.proto\"\374\001\n\017Esr_status9_5e8\022\034\n\024can_t"
  "x_path_id_acc_3\030\001 \001(\005\022\034\n\024can_tx_path_id_"
  "acc_2\030\002 \001(\005\022%\n\035can_tx_filtered_xohp_acc_"
  "cipv\030\003 \001(\001\022$\n\034can_tx_water_spray_target_"
  "id\030\004 \001(\005\022\"\n\032can_tx_serial_num_3rd_byte\030\005"
  " \001(\005\022\035\n\025can_tx_sideslip_angle\030\006 \001(\001\022\035\n\025c"
  "an_tx_avg_pwr_cwblkg\030\007 \001(\005\"\232\021\n\017Esr_statu"
  "s6_5e5\022&\n\036can_tx_sw_version_dsp_3rd_byte"
  "\030\001 \001(\005\022h\n\035can_tx_vertical_align_updated\030"
  "\002 \001(\0162A.apollo.drivers.Esr_status6_5e5.C"
  "an_tx_vertical_align_updatedType\022$\n\034can_"
  "tx_vertical_misalignment\030\003 \001(\001\022&\n\036can_tx"
  "_serv_align_updates_done\030\004 \001(\005\022T\n\023can_tx"
  "_found_target\030\005 \001(\01627.apollo.drivers.Esr"
  "_status6_5e5.Can_tx_found_targetType\022#\n\033"
  "can_tx_factory_misalignment\030\006 \001(\001\022h\n\035can"
  "_tx_factory_align_status_2\030\007 \001(\0162A.apoll"
  "o.drivers.Esr_status6_5e5.Can_tx_factory"
  "_align_status_2Type\022h\n\035can_tx_factory_al"
  "ign_status_1\030\010 \001(\0162A.apollo.drivers.Esr_"
  "status6_5e5.Can_tx_factory_align_status_"
  "1Type\022d\n\033can_tx_recommend_unconverge\030\t \001"
  "(\0162\?.apollo.drivers.Esr_status6_5e5.Can_"
  "tx_recommend_unconvergeType\022\034\n\024can_tx_wa"
  "ve_diff_a2d\030\n \001(\005\022^\n\030can_tx_system_power"
  "_mode\030\013 \001(\0162<.apollo.drivers.Esr_status6"
  "_5e5.Can_tx_system_power_modeType\022\035\n\025can"
  "_tx_supply_n5v_a2d\030\014 \001(\005\022\036\n\026can_tx_suppl"
  "y_1p8v_a2d\030\r \001(\005\"}\n!Can_tx_vertical_alig"
  "n_updatedType\022-\n)CAN_TX_VERTICAL_ALIGN_U"
  "PDATED_NOT_UPDATED\020\000\022)\n%CAN_TX_VERTICAL_"
  "ALIGN_UPDATED_UPDATED\020\001\"[\n\027Can_tx_found_"
  "targetType\022!\n\035CAN_TX_FOUND_TARGET_NOT_FO"
  "UND\020\000\022\035\n\031CAN_TX_FOUND_TARGET_FOUND\020\001\"\273\002\n"
  "!Can_tx_factory_align_status_2Type\022%\n!CA"
  "N_TX_FACTORY_ALIGN_STATUS_2_OFF\020\000\022&\n\"CAN"
  "_TX_FACTORY_ALIGN_STATUS_2_BUSY\020\001\022)\n%CAN"
  "_TX_FACTORY_ALIGN_STATUS_2_SUCCESS\020\002\0220\n,"
  "CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_NO_TA"
  "RGET\020\003\0224\n0CAN_TX_FACTORY_ALIGN_STATUS_2_"
  "FAIL_DEV_TOO_LARGE\020\004\0224\n0CAN_TX_FACTORY_A"
  "LIGN_STATUS_2_FAIL_VAR_TOO_LARGE\020\005\"\273\002\n!C"
  "an_tx_factory_align_status_1Type\022%\n!CAN_"
  "TX_FACTORY_ALIGN_STATUS_1_OFF\020\000\022&\n\"CAN_T"
  "X_FACTORY_ALIGN_STATUS_1_BUSY\020\001\022)\n%CAN_T"
  "X_FACTORY_ALIGN_STATUS_1_SUCCESS\020\002\0220\n,CA"
  "N_TX_FACTORY_ALIGN_STATUS_1_FAIL_NO_TARG"
  "ET\020\003\0224\n0CAN_TX_FACTORY_ALIGN_STATUS_1_FA"
  "IL_DEV_TOO_LARGE\020\004\0224\n0CAN_TX_FACTORY_ALI"
  "GN_STATUS_1_FAIL_VAR_TOO_LARGE\020\005\"{\n\037Can_"
  "tx_recommend_unconvergeType\022-\n)CAN_TX_RE"
  "COMMEND_UNCONVERGE_NOT_RECOMMEND\020\000\022)\n%CA"
  "N_TX_RECOMMEND_UNCONVERGE_RECOMMEND\020\001\"\337\002"
  "\n\034Can_tx_system_power_modeType\022%\n!CAN_TX"
  "_SYSTEM_POWER_MODE_DSP_INIT\020\000\022(\n$CAN_TX_"
  "SYSTEM_POWER_MODE_RADIATE_OFF\020\001\022\'\n#CAN_T"
  "X_SYSTEM_POWER_MODE_RADIATE_ON\020\002\022)\n%CAN_"
  "TX_SYSTEM_POWER_MODE_DSP_SHUTDOWN\020\003\022$\n C"
  "AN_TX_SYSTEM_POWER_MODE_DSP_OFF\020\004\022*\n&CAN"
  "_TX_SYSTEM_POWER_MODE_HOST_SHUTDOWN\020\005\022!\n"
  "\035CAN_TX_SYSTEM_POWER_MODE_TEST\020\006\022%\n!CAN_"
  "TX_SYSTEM_POWER_MODE_7INVALID\020\007\"\367\001\n\017Esr_"
  "status5_5e4\022\035\n\025can_tx_supply_10v_a2d\030\001 \001"
  "(\005\022\030\n\020can_tx_temp2_a2d\030\002 \001(\005\022\030\n\020can_tx_t"
  "emp1_a2d\030\003 \001(\005\022\031\n\021can_tx_swbatt_a2d\030\004 \001("
  "\005\022\036\n\026can_tx_supply_5vdx_a2d\030\005 \001(\005\022\035\n\025can"
  "_tx_supply_5va_a2d\030\006 \001(\005\022\036\n\026can_tx_suppl"
  "y_3p3v_a2d\030\007 \001(\005\022\027\n\017can_tx_ignp_a2d\030\010 \001("
  "\005\"\250\001\n\017Esr_status3_4e2\022\035\n\025can_tx_sw_versi"
  "on_pld\030\001 \001(\005\022\036\n\026can_tx_sw_version_host\030\002"
  " \001(\005\022\031\n\021can_tx_hw_version\030\003 \001(\005\022 \n\030can_t"
  "x_interface_version\030\004 \001(\005\022\031\n\021can_tx_seri"
  "al_num\030\005 \001(\005\"\226\013\n\017Esr_status4_4e3\022\\\n\027can_"
  "tx_truck_target_det\030\001 \001(\0162;.apollo.drive"
  "rs.Esr_status4_4e3.Can_tx_truck_target_d"
  "etType\022l\n\037can_tx_lr_only_grating_lobe_de"
  "t\030\002 \001(\0162C.apollo.drivers.Esr_status4_4e3"
  ".Can_tx_lr_only_grating_lobe_detType\022^\n\030"
  "can_tx_sidelobe_blockage\030\003 \001(\0162<.apollo."
  "drivers.Esr_status4_4e3.Can_tx_sidelobe_"
  "blockageType\022\\\n\027can_tx_partial_blockage\030"
  "\004 \001(\0162;.apollo.drivers.Esr_status4_4e3.C"
  "an_tx_partial_blockageType\022\037\n\027can_tx_pat"
  "h_id_acc_stat\030\005 \001(\005\022P\n\021can_tx_mr_lr_mode"
  "\030\006 \001(\01625.apollo.drivers.Esr_status4_4e3."
  "Can_tx_mr_lr_modeType\022\037\n\027can_tx_auto_ali"
  "gn_angle\030\007 \001(\001\022\036\n\026can_tx_rolling_count_3"
  "\030\010 \001(\005\022\037\n\027can_tx_path_id_fcw_stat\030\t \001(\005\022"
  "\037\n\027can_tx_path_id_fcw_move\030\n \001(\005\022 \n\030can_"
  "tx_path_id_cmbb_stat\030\013 \001(\005\022 \n\030can_tx_pat"
  "h_id_cmbb_move\030\014 \001(\005\022\032\n\022can_tx_path_id_a"
  "cc\030\r \001(\005\"m\n\033Can_tx_truck_target_detType\022"
  "(\n$CAN_TX_TRUCK_TARGET_DET_NOT_DETECTED\020"
  "\000\022$\n CAN_TX_TRUCK_TARGET_DET_DETECTED\020\001\""
  "\205\001\n#Can_tx_lr_only_grating_lobe_detType\022"
  "0\n,CAN_TX_LR_ONLY_GRATING_LOBE_DET_NOT_D"
  "ETECTED\020\000\022,\n(CAN_TX_LR_ONLY_GRATING_LOBE"
  "_DET_DETECTED\020\001\"a\n\034Can_tx_sidelobe_block"
  "ageType\022 \n\034CAN_TX_SIDELOBE_BLOCKAGE_OFF\020"
  "\000\022\037\n\033CAN_TX_SIDELOBE_BLOCKAGE_ON\020\001\"k\n\033Ca"
  "n_tx_partial_blockageType\022\'\n#CAN_TX_PART"
  "IAL_BLOCKAGE_NOT_BLOCKED\020\000\022#\n\037CAN_TX_PAR"
  "TIAL_BLOCKAGE_BLOCKED\020\001\"\333\001\n\025Can_tx_mr_lr"
  "_modeType\022\036\n\032CAN_TX_MR_LR_MODE_RESERVED\020"
  "\000\0225\n1CAN_TX_MR_LR_MODE_OUTPUT_ONLY_MEDIU"
  "M_RANGE_TRACKS\020\001\0223\n/CAN_TX_MR_LR_MODE_OU"
  "TPUT_ONLY_LONG_RANGE_TRACKS\020\002\0226\n2CAN_TX_"
  "MR_LR_MODE_OUTPUT_ALL_MEDIUM_RANGE_AND_L"
  "ONG\020\003\"\311\002\n\030Esr_trackmotionpower_540\022$\n\034ca"
  "n_tx_track_rolling_count_2\030\001 \001(\010\022!\n\031can_"
  "tx_track_can_id_group\030\002 \001(\005\022W\n\031can_tx_tr"
  "ack_motion_power\030\003 \003(\01324.apollo.drivers."
  "Esr_trackmotionpower_540.Motionpower\032\212\001\n"
  "\013Motionpower\022\033\n\023can_tx_track_moving\030\001 \001("
  "\010\022 \n\030can_tx_track_moving_fast\030\002 \001(\010\022 \n\030c"
  "an_tx_track_moving_slow\030\003 \001(\010\022\032\n\022can_tx_"
  "track_power\030\004 \001(\005\"\211\001\n\020Acm_inst_req_7e0\022\023"
  "\n\013command_ctr\030\001 \001(\005\022\024\n\014command_code\030\002 \001("
  "\005\022\021\n\tcc_word_2\030\003 \001(\005\022\021\n\tcc_word_1\030\004 \001(\005\022"
  "\021\n\tcc_byte_2\030\005 \001(\005\022\021\n\tcc_byte_1\030\006 \001(\005\"\203\r"
  "\n\017Esr_track01_500\022h\n\035can_tx_track_groupi"
  "ng_changed\030\001 \001(\0162A.apollo.drivers.Esr_tr"
  "ack01_500.Can_tx_track_grouping_changedT"
  "ype\022X\n\025can_tx_track_oncoming\030\002 \001(\01629.apo"
  "llo.drivers.Esr_track01_500.Can_tx_track"
  "_oncomingType\022\035\n\025can_tx_track_lat_rate\030\003"
  " \001(\001\022b\n\032can_tx_track_bridge_object\030\004 \001(\016"
  "2>.apollo.drivers.Esr_track01_500.Can_tx"
  "_track_bridge_objectType\022\032\n\022can_tx_track"
  "_width\030\005 \001(\001\022T\n\023can_tx_track_status\030\006 \001("
  "\01627.apollo.drivers.Esr_track01_500.Can_t"
  "x_track_statusType\022\"\n\032can_tx_track_rolli"
  "ng_count\030\007 \001(\010\022\037\n\027can_tx_track_range_rat"
  "e\030\010 \001(\001\022 \n\030can_tx_track_range_accel\030\t \001("
  "\001\022\032\n\022can_tx_track_range\030\n \001(\001\022d\n\033can_tx_"
  "track_med_range_mode\030\013 \001(\0162\?.apollo.driv"
  "ers.Esr_track01_500.Can_tx_track_med_ran"
  "ge_modeType\022\032\n\022can_tx_track_angle\030\014 \001(\001\""
  "\213\001\n!Can_tx_track_grouping_changedType\0223\n"
  "/CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGU"
  "NCHANGED\020\000\0221\n-CAN_TX_TRACK_GROUPING_CHAN"
  "GED_GROUPINGCHANGED\020\001\"f\n\031Can_tx_track_on"
  "comingType\022%\n!CAN_TX_TRACK_ONCOMING_NOTO"
  "NCOMING\020\000\022\"\n\036CAN_TX_TRACK_ONCOMING_ONCOM"
  "ING\020\001\"r\n\036Can_tx_track_bridge_objectType\022"
  ")\n%CAN_TX_TRACK_BRIDGE_OBJECT_NOT_BRIDGE"
  "\020\000\022%\n!CAN_TX_TRACK_BRIDGE_OBJECT_BRIDGE\020"
  "\001\"\337\002\n\027Can_tx_track_statusType\022!\n\035CAN_TX_"
  "TRACK_STATUS_NO_TARGET\020\000\022\"\n\036CAN_TX_TRACK"
  "_STATUS_NEW_TARGET\020\001\022*\n&CAN_TX_TRACK_STA"
  "TUS_NEW_UPDATED_TARGET\020\002\022&\n\"CAN_TX_TRACK"
  "_STATUS_UPDATED_TARGET\020\003\022&\n\"CAN_TX_TRACK"
  "_STATUS_COASTED_TARGET\020\004\022%\n!CAN_TX_TRACK"
  "_STATUS_MERGED_TARGET\020\005\022.\n*CAN_TX_TRACK_"
  "STATUS_INVALID_COASTED_TARGET\020\006\022*\n&CAN_T"
  "X_TRACK_STATUS_NEW_COASTED_TARGET\020\007\"\345\001\n\037"
  "Can_tx_track_med_range_modeType\022/\n+CAN_T"
  "X_TRACK_MED_RANGE_MODE_NO_MR_LR_UPDATE\020\000"
  "\022.\n*CAN_TX_TRACK_MED_RANGE_MODE_MR_UPDAT"
  "E_ONLY\020\001\022.\n*CAN_TX_TRACK_MED_RANGE_MODE_"
  "LR_UPDATE_ONLY\020\002\0221\n-CAN_TX_TRACK_MED_RAN"
  "GE_MODE_BOTH_MR_LR_UPDATE\020\003\"\255\001\n\016Esr_vali"
  "d1_5d0\022\032\n\022can_tx_valid_lr_sn\030\001 \001(\005\022\"\n\032ca"
  "n_tx_valid_lr_range_rate\030\002 \001(\001\022\035\n\025can_tx"
  "_valid_lr_range\030\003 \001(\001\022\035\n\025can_tx_valid_lr"
  "_power\030\004 \001(\005\022\035\n\025can_tx_valid_lr_angle\030\005 "
  "\001(\001\"\255\001\n\016Esr_valid2_5d1\022\032\n\022can_tx_valid_m"
  "r_sn\030\001 \001(\005\022\"\n\032can_tx_valid_mr_range_rate"
  "\030\002 \001(\001\022\035\n\025can_tx_valid_mr_range\030\003 \001(\001\022\035\n"
  "\025can_tx_valid_mr_power\030\004 \001(\005\022\035\n\025can_tx_v"
  "alid_mr_angle\030\005 \001(\001\"\246\001\n\021Acm_inst_resp_7e"
  "4\022\016\n\006data_7\030\001 \001(\005\022\016\n\006data_6\030\002 \001(\005\022\016\n\006dat"
  "a_5\030\003 \001(\005\022\016\n\006data_4\030\004 \001(\005\022\016\n\006data_3\030\005 \001("
  "\005\022\027\n\017rtn_cmd_counter\030\006 \001(\005\022\033\n\023command_re"
  "turn_code\030\007 \001(\005\022\013\n\003pid\030\010 \001(\005\"\237\025\n\014Vehicle"
  "2_4f1\022$\n\034can_rx_volvo_short_track_roc\030\001 "
  "\001(\001\022Y\n\027can_rx_mr_only_transmit\030\002 \001(\01628.a"
  "pollo.drivers.Vehicle2_4f1.Can_rx_mr_onl"
  "y_transmitType\022Y\n\027can_rx_lr_only_transmi"
  "t\030\003 \001(\01628.apollo.drivers.Vehicle2_4f1.Ca"
  "n_rx_lr_only_transmitType\022\035\n\025can_rx_high"
  "_yaw_angle\030\004 \001(\005\022Q\n\023can_rx_clear_faults\030"
  "\005 \001(\01624.apollo.drivers.Vehicle2_4f1.Can_"
  "rx_clear_faultsType\022e\n\035can_rx_use_angle_"
  "misalignment\030\006 \001(\0162>.apollo.drivers.Vehi"
  "cle2_4f1.Can_rx_use_angle_misalignmentTy"
  "pe\022]\n\031can_rx_turn_signal_status\030\007 \001(\0162:."
  "apollo.drivers.Vehicle2_4f1.Can_rx_turn_"
  "signal_statusType\022Y\n\027can_rx_blockage_dis"
  "able\030\010 \001(\01628.apollo.drivers.Vehicle2_4f1"
  ".Can_rx_blockage_disableType\022e\n\035can_rx_v"
  "ehicle_speed_validity\030\t \001(\0162>.apollo.dri"
  "vers.Vehicle2_4f1.Can_rx_vehicle_speed_v"
  "alidityType\022W\n\026can_rx_mmr_upside_down\030\n "
  "\001(\01627.apollo.drivers.Vehicle2_4f1.Can_rx"
  "_mmr_upside_downType\022Q\n\023can_rx_wiper_sta"
  "tus\030\013 \001(\01624.apollo.drivers.Vehicle2_4f1."
  "Can_rx_wiper_statusType\022W\n\026can_rx_raw_da"
  "ta_enable\030\014 \001(\01627.apollo.drivers.Vehicle"
  "2_4f1.Can_rx_raw_data_enableType\022[\n\030can_"
  "rx_radar_cmd_radiate\030\r \001(\01629.apollo.driv"
  "ers.Vehicle2_4f1.Can_rx_radar_cmd_radiat"
  "eType\022S\n\024can_rx_grouping_mode\030\016 \001(\01625.ap"
  "ollo.drivers.Vehicle2_4f1.Can_rx_groupin"
  "g_modeType\022\035\n\025can_rx_maximum_tracks\030\017 \001("
  "\005\022&\n\036can_rx_lateral_mounting_offset\030\020 \001("
  "\001\022!\n\031can_rx_angle_misalignment\030\021 \001(\001\022\035\n\025"
  "can_rx_scan_index_ack\030\022 \001(\005\"^\n\033Can_rx_mr"
  "_only_transmitType\022\037\n\033CAN_RX_MR_ONLY_TRA"
  "NSMIT_OFF\020\000\022\036\n\032CAN_RX_MR_ONLY_TRANSMIT_O"
  "N\020\001\"^\n\033Can_rx_lr_only_transmitType\022\037\n\033CA"
  "N_RX_LR_ONLY_TRANSMIT_OFF\020\000\022\036\n\032CAN_RX_LR"
  "_ONLY_TRANSMIT_ON\020\001\"R\n\027Can_rx_clear_faul"
  "tsType\022\033\n\027CAN_RX_CLEAR_FAULTS_OFF\020\000\022\032\n\026C"
  "AN_RX_CLEAR_FAULTS_ON\020\001\"p\n!Can_rx_use_an"
  "gle_misalignmentType\022%\n!CAN_RX_USE_ANGLE"
  "_MISALIGNMENT_OFF\020\000\022$\n CAN_RX_USE_ANGLE_"
  "MISALIGNMENT_ON\020\001\"\264\001\n\035Can_rx_turn_signal"
  "_statusType\022!\n\035CAN_RX_TURN_SIGNAL_STATUS"
  "_OFF\020\000\022\"\n\036CAN_RX_TURN_SIGNAL_STATUS_LEFT"
  "\020\001\022#\n\037CAN_RX_TURN_SIGNAL_STATUS_RIGHT\020\002\022"
  "\'\n#CAN_RX_TURN_SIGNAL_STATUS_INVALID_3\020\003"
  "\"h\n\033Can_rx_blockage_disableType\022#\n\037CAN_R"
  "X_BLOCKAGE_DISABLE_ENABLED\020\000\022$\n CAN_RX_B"
  "LOCKAGE_DISABLE_DISABLED\020\001\"w\n!Can_rx_veh"
  "icle_speed_validityType\022)\n%CAN_RX_VEHICL"
  "E_SPEED_VALIDITY_INVALID\020\000\022\'\n#CAN_RX_VEH"
  "ICLE_SPEED_VALIDITY_VALID\020\001\"n\n\032Can_rx_mm"
  "r_upside_downType\022(\n$CAN_RX_MMR_UPSIDE_D"
  "OWN_RIGHT_SIDE_UP\020\000\022&\n\"CAN_RX_MMR_UPSIDE"
  "_DOWN_UPSIDE_DOWN\020\001\"R\n\027Can_rx_wiper_stat"
  "usType\022\033\n\027CAN_RX_WIPER_STATUS_OFF\020\000\022\032\n\026C"
  "AN_RX_WIPER_STATUS_ON\020\001\"a\n\032Can_rx_raw_da"
  "ta_enableType\022#\n\037CAN_RX_RAW_DATA_ENABLE_"
  "FILTERED\020\000\022\036\n\032CAN_RX_RAW_DATA_ENABLE_RAW"
  "\020\001\"a\n\034Can_rx_radar_cmd_radiateType\022 \n\034CA"
  "N_RX_RADAR_CMD_RADIATE_OFF\020\000\022\037\n\033CAN_RX_R"
  "ADAR_CMD_RADIATE_ON\020\001\"\316\001\n\030Can_rx_groupin"
  "g_modeType\022$\n CAN_RX_GROUPING_MODE_NO_GR"
  "OUPING\020\000\022*\n&CAN_RX_GROUPING_MODE_GROUP_M"
  "OVING_ONLY\020\001\022.\n*CAN_RX_GROUPING_MODE_GRO"
  "UP_STATIONARY_ONLY\020\002\0220\n,CAN_RX_GROUPING_"
  "MODE_GROUP_MOVING_STATIONARY\020\003\"\222\n\n\014Vehic"
  "le1_4f0\022g\n\036can_rx_steering_angle_validit"
  "y\030\001 \001(\0162\?.apollo.drivers.Vehicle1_4f0.Ca"
  "n_rx_steering_angle_validityType\022\"\n\032can_"
  "rx_steering_angle_rate\030\002 \001(\005\022_\n\032can_rx_s"
  "teering_angle_sign\030\003 \001(\0162;.apollo.driver"
  "s.Vehicle1_4f0.Can_rx_steering_angle_sig"
  "nType\022i\n\037can_rx_steering_angle_rate_sign"
  "\030\004 \001(\0162@.apollo.drivers.Vehicle1_4f0.Can"
  "_rx_steering_angle_rate_signType\022\035\n\025can_"
  "rx_steering_angle\030\005 \001(\005\022\037\n\027can_rx_radius"
  "_curvature\030\006 \001(\005\022[\n\030can_rx_yaw_rate_vali"
  "dity\030\007 \001(\01629.apollo.drivers.Vehicle1_4f0"
  ".Can_rx_yaw_rate_validityType\022\027\n\017can_rx_"
  "yaw_rate\030\010 \001(\001\022g\n\036can_rx_vehicle_speed_d"
  "irection\030\t \001(\0162\?.apollo.drivers.Vehicle1"
  "_4f0.Can_rx_vehicle_speed_directionType\022"
  "\034\n\024can_rx_vehicle_speed\030\n \001(\001\"z\n\"Can_rx_"
  "steering_angle_validityType\022*\n&CAN_RX_ST"
  "EERING_ANGLE_VALIDITY_INVALID\020\000\022(\n$CAN_R"
  "X_STEERING_ANGLE_VALIDITY_VALID\020\001\"{\n\036Can"
  "_rx_steering_angle_signType\022/\n+CAN_RX_ST"
  "EERING_ANGLE_SIGN_COUNTERCLOCKWISE\020\000\022(\n$"
  "CAN_RX_STEERING_ANGLE_SIGN_CLOCKWISE\020\001\"\212"
  "\001\n#Can_rx_steering_angle_rate_signType\0224"
  "\n0CAN_RX_STEERING_ANGLE_RATE_SIGN_COUNTE"
  "RCLOCKWISE\020\000\022-\n)CAN_RX_STEERING_ANGLE_RA"
  "TE_SIGN_CLOCKWISE\020\001\"h\n\034Can_rx_yaw_rate_v"
  "alidityType\022$\n CAN_RX_YAW_RATE_VALIDITY_"
  "INVALID\020\000\022\"\n\036CAN_RX_YAW_RATE_VALIDITY_VA"
  "LID\020\001\"|\n\"Can_rx_vehicle_speed_directionT"
  "ype\022*\n&CAN_RX_VEHICLE_SPEED_DIRECTION_FO"
  "RWARD\020\000\022*\n&CAN_RX_VEHICLE_SPEED_DIRECTIO"
  "N_REVERSE\020\001\"\202\010\n\014Esr_sim1_5c0\022Q\n\023can_rx_s"
  "im_track_id\030\001 \001(\01624.apollo.drivers.Esr_s"
  "im1_5c0.Can_rx_sim_track_idType\022M\n\021can_r"
  "x_sim_status\030\002 \001(\01622.apollo.drivers.Esr_"
  "sim1_5c0.Can_rx_sim_statusType\022\035\n\025can_rx"
  "_sim_range_rate\030\003 \001(\001\022\036\n\026can_rx_sim_rang"
  "e_accel\030\004 \001(\001\022\030\n\020can_rx_sim_range\030\005 \001(\005\022"
  "\033\n\023can_rx_sim_lat_rate\030\006 \001(\001\022\032\n\022can_rx_s"
  "im_lat_pos\030\007 \001(\001\022Q\n\023can_rx_sim_function\030"
  "\010 \001(\01624.apollo.drivers.Esr_sim1_5c0.Can_"
  "rx_sim_functionType\022\030\n\020can_rx_sim_angle\030"
  "\t \001(\001\"\200\001\n\027Can_rx_sim_track_idType\022!\n\035CAN"
  "_RX_SIM_TRACK_ID_NO_TARGET\020\000\022 \n\034CAN_RX_S"
  "IM_TRACK_ID_TARGET_1\020\001\022 \n\034CAN_RX_SIM_TRA"
  "CK_ID_TARGET_2\020\002\"\217\001\n\025Can_rx_sim_statusTy"
  "pe\022\035\n\031CAN_RX_SIM_STATUS_INVALID\020\000\022\031\n\025CAN"
  "_RX_SIM_STATUS_NEW\020\001\022\035\n\031CAN_RX_SIM_STATU"
  "S_UPDATED\020\002\022\035\n\031CAN_RX_SIM_STATUS_COASTED"
  "\020\003\"\273\002\n\027Can_rx_sim_functionType\022\033\n\027CAN_RX"
  "_SIM_FUNCTION_ACC\020\000\022\032\n\026CAN_RX_SIM_FUNCTI"
  "ON_RI\020\001\022 \n\034CAN_RX_SIM_FUNCTION_FCW_MOVE\020"
  "\002\022 \n\034CAN_RX_SIM_FUNCTION_FCW_STAT\020\003\022!\n\035C"
  "AN_RX_SIM_FUNCTION_CMBB_MOVE\020\004\022!\n\035CAN_RX"
  "_SIM_FUNCTION_CMBB_STAT\020\005\022/\n+CAN_RX_SIM_"
  "FUNCTION_ALL_MOVING_ACC_FCW_CMBB\020\006\022,\n(CA"
  "N_RX_SIM_FUNCTION_ALL_STAT_RI_FCW_CMBB\020\007"
  "\"\354\001\n\017Esr_status1_4e0\022\034\n\024can_tx_dsp_times"
  "tamp\030\001 \001(\001\022\031\n\021can_tx_comm_error\030\002 \001(\010\022\034\n"
  "\024can_tx_yaw_rate_calc\030\003 \001(\001\022!\n\031can_tx_ve"
  "hicle_speed_calc\030\004 \001(\001\022\031\n\021can_tx_scan_in"
  "dex\030\005 \001(\005\022\036\n\026can_tx_rolling_count_1\030\006 \001("
  "\005\022$\n\034can_tx_radius_curvature_calc\030\007 \001(\005\""
  "\335\013\n\017Esr_status2_4e1\022\034\n\024can_tx_yaw_rate_b"
  "ias\030\001 \001(\001\022\"\n\032can_tx_veh_spd_comp_factor\030"
  "\002 \001(\001\022\035\n\025can_tx_sw_version_dsp\030\003 \001(\005\022\032\n\022"
  "can_tx_temperature\030\004 \001(\005\022V\n\024can_tx_raw_d"
  "ata_mode\030\005 \001(\01628.apollo.drivers.Esr_stat"
  "us2_4e1.Can_tx_raw_data_modeType\022\\\n\027can_"
  "tx_range_perf_error\030\006 \001(\0162;.apollo.drive"
  "rs.Esr_status2_4e1.Can_tx_range_perf_err"
  "orType\022X\n\025can_tx_overheat_error\030\007 \001(\01629."
  "apollo.drivers.Esr_status2_4e1.Can_tx_ov"
  "erheat_errorType\022!\n\031can_tx_maximum_track"
  "s_ack\030\010 \001(\005\022X\n\025can_tx_internal_error\030\t \001"
  "(\01629.apollo.drivers.Esr_status2_4e1.Can_"
  "tx_internal_errorType\022V\n\024can_tx_grouping"
  "_mode\030\n \001(\01628.apollo.drivers.Esr_status2"
  "_4e1.Can_tx_grouping_modeType\022\\\n\027can_tx_"
  "xcvr_operational\030\013 \001(\0162;.apollo.drivers."
  "Esr_status2_4e1.Can_tx_xcvr_operationalT"
  "ype\022!\n\031can_tx_steering_angle_ack\030\014 \001(\005\022\036"
  "\n\026can_tx_rolling_count_2\030\r \001(\005\"[\n\030Can_tx"
  "_raw_data_modeType\022!\n\035CAN_TX_RAW_DATA_MO"
  "DE_FILTERED\020\000\022\034\n\030CAN_TX_RAW_DATA_MODE_RA"
  "W\020\001\"k\n\033Can_tx_range_perf_errorType\022\'\n#CA"
  "N_TX_RANGE_PERF_ERROR_NOT_BLOCKED\020\000\022#\n\037C"
  "AN_TX_RANGE_PERF_ERROR_BLOCKED\020\001\"g\n\031Can_"
  "tx_overheat_errorType\022&\n\"CAN_TX_OVERHEAT"
  "_ERROR_NOT_OVERTEMP\020\000\022\"\n\036CAN_TX_OVERHEAT"
  "_ERROR_OVERTEMP\020\001\"c\n\031Can_tx_internal_err"
  "orType\022$\n CAN_TX_INTERNAL_ERROR_NOT_FAIL"
  "ED\020\000\022 \n\034CAN_TX_INTERNAL_ERROR_FAILED\020\001\"\316"
  "\001\n\030Can_tx_grouping_modeType\022$\n CAN_TX_GR"
  "OUPING_MODE_NO_GROUPING\020\000\022*\n&CAN_TX_GROU"
  "PING_MODE_GROUP_MOVING_ONLY\020\001\022.\n*CAN_TX_"
  "GROUPING_MODE_GROUP_STATIONARY_ONLY\020\002\0220\n"
  ",CAN_TX_GROUPING_MODE_GROUP_MOVING_STATI"
  "ONARY\020\003\"^\n\033Can_tx_xcvr_operationalType\022\037"
  "\n\033CAN_TX_XCVR_OPERATIONAL_OFF\020\000\022\036\n\032CAN_T"
  "X_XCVR_OPERATIONAL_ON\020\001\"\221\002\n\017Esr_status8_"
  "5e7\022\036\n\026can_tx_history_fault_7\030\001 \001(\005\022\036\n\026c"
  "an_tx_history_fault_6\030\002 \001(\005\022\036\n\026can_tx_hi"
  "story_fault_5\030\003 \001(\005\022\036\n\026can_tx_history_fa"
  "ult_4\030\004 \001(\005\022\036\n\026can_tx_history_fault_3\030\005 "
  "\001(\005\022\036\n\026can_tx_history_fault_2\030\006 \001(\005\022\036\n\026c"
  "an_tx_history_fault_1\030\007 \001(\005\022\036\n\026can_tx_hi"
  "story_fault_0\030\010 \001(\005\"\211\002\n\017Esr_status7_5e6\022"
  "\035\n\025can_tx_active_fault_7\030\001 \001(\005\022\035\n\025can_tx"
  "_active_fault_6\030\002 \001(\005\022\035\n\025can_tx_active_f"
  "ault_5\030\003 \001(\005\022\035\n\025can_tx_active_fault_4\030\004 "
  "\001(\005\022\035\n\025can_tx_active_fault_3\030\005 \001(\005\022\035\n\025ca"
  "n_tx_active_fault_2\030\006 \001(\005\022\035\n\025can_tx_acti"
  "ve_fault_0\030\007 \001(\005\022\035\n\025can_tx_active_fault_"
  "1\030\010 \001(\005\"\366\r\n\014Vehicle3_5f2\022&\n\036can_rx_serv_"
  "align_updates_need\030\001 \001(\005\022W\n\026can_rx_serv_"
  "align_type\030\002 \001(\01627.apollo.drivers.Vehicl"
  "e3_5f2.Can_rx_serv_align_typeType\022[\n\030can"
  "_rx_serv_align_enable\030\003 \001(\01629.apollo.dri"
  "vers.Vehicle3_5f2.Can_rx_serv_align_enab"
  "leType\022#\n\033can_rx_aalign_avg_ctr_total\030\004 "
  "\001(\001\022a\n\033can_rx_auto_align_converged\030\005 \001(\016"
  "2<.apollo.drivers.Vehicle3_5f2.Can_rx_au"
  "to_align_convergedType\022]\n\031can_rx_auto_al"
  "ign_disable\030\006 \001(\0162:.apollo.drivers.Vehic"
  "le3_5f2.Can_rx_auto_align_disableType\022$\n"
  "\034can_rx_angle_mounting_offset\030\007 \001(\001\022M\n\021c"
  "an_rx_wheel_slip\030\010 \001(\01622.apollo.drivers."
  "Vehicle3_5f2.Can_rx_wheel_slipType\022\033\n\023ca"
  "n_rx_radar_height\030\t \001(\005\022\033\n\023can_rx_radar_"
  "fov_mr\030\n \001(\005\022\033\n\023can_rx_radar_fov_lr\030\013 \001("
  "\005\022_\n\032can_rx_long_accel_validity\030\014 \001(\0162;."
  "apollo.drivers.Vehicle3_5f2.Can_rx_long_"
  "accel_validityType\022\031\n\021can_rx_long_accel\030"
  "\r \001(\001\022]\n\031can_rx_lat_accel_validity\030\016 \001(\016"
  "2:.apollo.drivers.Vehicle3_5f2.Can_rx_la"
  "t_accel_validityType\022\030\n\020can_rx_lat_accel"
  "\030\017 \001(\001\"u\n\032Can_rx_serv_align_typeType\022)\n%"
  "CAN_RX_SERV_ALIGN_TYPE_AUTO_OR_DEALER\020\000\022"
  ",\n(CAN_RX_SERV_ALIGN_TYPE_VOLVO_SHORT_TR"
  "ACK\020\001\"k\n\034Can_rx_serv_align_enableType\022%\n"
  "!CAN_RX_SERV_ALIGN_ENABLE_DISABLED\020\000\022$\n "
  "CAN_RX_SERV_ALIGN_ENABLE_ENABLED\020\001\"{\n\037Ca"
  "n_rx_auto_align_convergedType\022-\n)CAN_RX_"
  "AUTO_ALIGN_CONVERGED_NOT_CONVERGED\020\000\022)\n%"
  "CAN_RX_AUTO_ALIGN_CONVERGED_CONVERGED\020\001\""
  "n\n\035Can_rx_auto_align_disableType\022%\n!CAN_"
  "RX_AUTO_ALIGN_DISABLE_ENABLED\020\000\022&\n\"CAN_R"
  "X_AUTO_ALIGN_DISABLE_DISABLED\020\001\"\261\001\n\025Can_"
  "rx_wheel_slipType\022 \n\034CAN_RX_WHEEL_SLIP_N"
  "O_CONTROL\020\000\022(\n$CAN_RX_WHEEL_SLIP_BRAKE_S"
  "LIP_CONTROL\020\001\022+\n\'CAN_RX_WHEEL_SLIP_TRACT"
  "ION_SLIP_CONTROL\020\002\022\037\n\033CAN_RX_WHEEL_SLIP_"
  "INVALID_3\020\003\"n\n\036Can_rx_long_accel_validit"
  "yType\022&\n\"CAN_RX_LONG_ACCEL_VALIDITY_INVA"
  "LID\020\000\022$\n CAN_RX_LONG_ACCEL_VALIDITY_VALI"
  "D\020\001\"k\n\035Can_rx_lat_accel_validityType\022%\n!"
  "CAN_RX_LAT_ACCEL_VALIDITY_INVALID\020\000\022#\n\037C"
  "AN_RX_LAT_ACCEL_VALIDITY_VALID\020\001\"\221\005\n\014Veh"
  "icle4_5f3\022 \n\030can_rx_fac_tgt_range_r2m\030\001 "
  "\001(\001\022 \n\030can_rx_fac_tgt_range_m2t\030\002 \001(\001\022\036\n"
  "\026can_rx_fac_tgt_range_1\030\003 \001(\001\022$\n\034can_rx_"
  "fac_tgt_mtg_space_ver\030\004 \001(\005\022$\n\034can_rx_fa"
  "c_tgt_mtg_space_hor\030\005 \001(\005\022!\n\031can_rx_fac_"
  "tgt_mtg_offset\030\006 \001(\005\022!\n\031can_rx_fac_align"
  "_samp_req\030\007 \001(\005\022\037\n\027can_rx_fac_align_max_"
  "nt\030\010 \001(\005\022W\n\026can_rx_fac_align_cmd_2\030\t \001(\016"
  "27.apollo.drivers.Vehicle4_5f3.Can_rx_fa"
  "c_align_cmd_2Type\022W\n\026can_rx_fac_align_cm"
  "d_1\030\n \001(\01627.apollo.drivers.Vehicle4_5f3."
  "Can_rx_fac_align_cmd_1Type\"[\n\032Can_rx_fac"
  "_align_cmd_2Type\022\036\n\032CAN_RX_FAC_ALIGN_CMD"
  "_2_OFF\020\000\022\035\n\031CAN_RX_FAC_ALIGN_CMD_2_ON\020\001\""
  "[\n\032Can_rx_fac_align_cmd_1Type\022\036\n\032CAN_RX_"
  "FAC_ALIGN_CMD_1_OFF\020\000\022\035\n\031CAN_RX_FAC_ALIG"
  "N_CMD_1_ON\020\001\"\364\003\n\014Vehicle5_5f4\022_\n\032can_rx_"
  "yaw_rate_bias_shift\030\001 \001(\0162;.apollo.drive"
  "rs.Vehicle5_5f4.Can_rx_yaw_rate_bias_shi"
  "ftType\022\"\n\032can_rx_steering_gear_ratio\030\002 \001"
  "(\001\022\030\n\020can_rx_wheelbase\030\003 \001(\001\022!\n\031can_rx_d"
  "istance_rear_axle\030\004 \001(\001\022$\n\034can_rx_cw_blo"
  "ckage_threshold\030\005 \001(\001\022\"\n\032can_rx_funnel_o"
  "ffset_right\030\006 \001(\001\022!\n\031can_rx_funnel_offse"
  "t_left\030\007 \001(\001\022\035\n\025can_rx_beamwidth_vert\030\010 "
  "\001(\001\022#\n\033can_rx_oversteer_understeer\030\t \001(\005"
  "\"q\n\036Can_rx_yaw_rate_bias_shiftType\022(\n$CA"
  "N_RX_YAW_RATE_BIAS_SHIFT_NO_DETECT\020\000\022%\n!"
  "CAN_RX_YAW_RATE_BIAS_SHIFT_DETECT\020\001\"\324\001\n\014"
  "Vehicle6_5f5\022(\n can_rx_inner_funnel_offs"
  "et_right\030\001 \001(\001\022\'\n\037can_rx_inner_funnel_of"
  "fset_left\030\002 \001(\001\022$\n\034can_volvo_fa_range_ma"
  "x_short\030\003 \001(\005\022%\n\035can_volvo_fa_min_vspeed"
  "_short\030\004 \001(\001\022$\n\034can_volvo_fa_aalign_esti"
  "mate\030\005 \001(\001\"\230\n\n\tDelphiESR\022%\n\006header\030\001 \001(\013"
  "2\025.apollo.common.Header\0228\n\017esr_status9_5"
  "e8\030\002 \001(\0132\037.apollo.drivers.Esr_status9_5e"
  "8\0228\n\017esr_status6_5e5\030\003 \001(\0132\037.apollo.driv"
  "ers.Esr_status6_5e5\0228\n\017esr_status5_5e4\030\004"
  " \001(\0132\037.apollo.drivers.Esr_status5_5e4\0228\n"
  "\017esr_status3_4e2\030\005 \001(\0132\037.apollo.drivers."
  "Esr_status3_4e2\0228\n\017esr_status4_4e3\030\006 \001(\013"
  "2\037.apollo.drivers.Esr_status4_4e3\022J\n\030esr"
  "_trackmotionpower_540\030\007 \003(\0132(.apollo.dri"
  "vers.Esr_trackmotionpower_540\022:\n\020acm_ins"
  "t_req_7e0\030\010 \001(\0132 .apollo.drivers.Acm_ins"
  "t_req_7e0\0228\n\017esr_track01_500\030\t \003(\0132\037.apo"
  "llo.drivers.Esr_track01_500\0226\n\016esr_valid"
  "1_5d0\030\n \001(\0132\036.apollo.drivers.Esr_valid1_"
  "5d0\0226\n\016esr_valid2_5d1\030\013 \001(\0132\036.apollo.dri"
  "vers.Esr_valid2_5d1\022<\n\021acm_inst_resp_7e4"
  "\030\014 \001(\0132!.apollo.drivers.Acm_inst_resp_7e"
  "4\0222\n\014vehicle2_4f1\030\r \001(\0132\034.apollo.drivers"
  ".Vehicle2_4f1\0222\n\014vehicle1_4f0\030\016 \001(\0132\034.ap"
  "ollo.drivers.Vehicle1_4f0\0222\n\014esr_sim1_5c"
  "0\030\017 \001(\0132\034.apollo.drivers.Esr_sim1_5c0\0228\n"
  "\017esr_status1_4e0\030\020 \001(\0132\037.apollo.drivers."
  "Esr_status1_4e0\0228\n\017esr_status2_4e1\030\021 \001(\013"
  "2\037.apollo.drivers.Esr_status2_4e1\0228\n\017esr"
  "_status8_5e7\030\022 \001(\0132\037.apollo.drivers.Esr_"
  "status8_5e7\0228\n\017esr_status7_5e6\030\023 \001(\0132\037.a"
  "pollo.drivers.Esr_status7_5e6\0222\n\014vehicle"
  "3_5f2\030\024 \001(\0132\034.apollo.drivers.Vehicle3_5f"
  "2\0222\n\014vehicle4_5f3\030\025 \001(\0132\034.apollo.drivers"
  ".Vehicle4_5f3\0222\n\014vehicle5_5f4\030\026 \001(\0132\034.ap"
  "ollo.drivers.Vehicle5_5f4\0222\n\014vehicle6_5f"
  "5\030\027 \001(\0132\034.apollo.drivers.Vehicle6_5f5"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto_sccs[24] = {
  &scc_info_Acm_inst_req_7e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Acm_inst_resp_7e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_DelphiESR_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_sim1_5c0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status1_4e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status2_4e1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status3_4e2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status4_4e3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status5_5e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status6_5e5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status7_5e6_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status8_5e7_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_status9_5e8_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_track01_500_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_trackmotionpower_540_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_trackmotionpower_540_Motionpower_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_valid1_5d0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Esr_valid2_5d1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Vehicle1_4f0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Vehicle2_4f1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Vehicle3_5f2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Vehicle4_5f3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Vehicle5_5f4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
  &scc_info_Vehicle6_5f5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto = {
  &descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto, "modules/drivers/proto/delphi_esr.proto", 18877,
  &descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto_once, descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto_sccs, descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto_deps, 24, 1,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto, 24, file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto, file_level_service_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto), true);
namespace apollo {
namespace drivers {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_vertical_align_updatedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[0];
}
bool Esr_status6_5e5_Can_tx_vertical_align_updatedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::CAN_TX_VERTICAL_ALIGN_UPDATED_NOT_UPDATED;
constexpr Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::CAN_TX_VERTICAL_ALIGN_UPDATED_UPDATED;
constexpr Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::Can_tx_vertical_align_updatedType_MIN;
constexpr Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::Can_tx_vertical_align_updatedType_MAX;
constexpr int Esr_status6_5e5::Can_tx_vertical_align_updatedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_found_targetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[1];
}
bool Esr_status6_5e5_Can_tx_found_targetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::CAN_TX_FOUND_TARGET_NOT_FOUND;
constexpr Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::CAN_TX_FOUND_TARGET_FOUND;
constexpr Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::Can_tx_found_targetType_MIN;
constexpr Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::Can_tx_found_targetType_MAX;
constexpr int Esr_status6_5e5::Can_tx_found_targetType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_factory_align_status_2Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[2];
}
bool Esr_status6_5e5_Can_tx_factory_align_status_2Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_OFF;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_BUSY;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_SUCCESS;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_NO_TARGET;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_DEV_TOO_LARGE;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_VAR_TOO_LARGE;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::Can_tx_factory_align_status_2Type_MIN;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::Can_tx_factory_align_status_2Type_MAX;
constexpr int Esr_status6_5e5::Can_tx_factory_align_status_2Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_factory_align_status_1Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[3];
}
bool Esr_status6_5e5_Can_tx_factory_align_status_1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_OFF;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_BUSY;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_SUCCESS;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_NO_TARGET;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_DEV_TOO_LARGE;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_VAR_TOO_LARGE;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::Can_tx_factory_align_status_1Type_MIN;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::Can_tx_factory_align_status_1Type_MAX;
constexpr int Esr_status6_5e5::Can_tx_factory_align_status_1Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_recommend_unconvergeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[4];
}
bool Esr_status6_5e5_Can_tx_recommend_unconvergeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::CAN_TX_RECOMMEND_UNCONVERGE_NOT_RECOMMEND;
constexpr Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::CAN_TX_RECOMMEND_UNCONVERGE_RECOMMEND;
constexpr Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::Can_tx_recommend_unconvergeType_MIN;
constexpr Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::Can_tx_recommend_unconvergeType_MAX;
constexpr int Esr_status6_5e5::Can_tx_recommend_unconvergeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_system_power_modeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[5];
}
bool Esr_status6_5e5_Can_tx_system_power_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_DSP_INIT;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_RADIATE_OFF;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_RADIATE_ON;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_DSP_SHUTDOWN;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_DSP_OFF;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_HOST_SHUTDOWN;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_TEST;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::CAN_TX_SYSTEM_POWER_MODE_7INVALID;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::Can_tx_system_power_modeType_MIN;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::Can_tx_system_power_modeType_MAX;
constexpr int Esr_status6_5e5::Can_tx_system_power_modeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_truck_target_detType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[6];
}
bool Esr_status4_4e3_Can_tx_truck_target_detType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::CAN_TX_TRUCK_TARGET_DET_NOT_DETECTED;
constexpr Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::CAN_TX_TRUCK_TARGET_DET_DETECTED;
constexpr Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::Can_tx_truck_target_detType_MIN;
constexpr Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::Can_tx_truck_target_detType_MAX;
constexpr int Esr_status4_4e3::Can_tx_truck_target_detType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[7];
}
bool Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::CAN_TX_LR_ONLY_GRATING_LOBE_DET_NOT_DETECTED;
constexpr Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::CAN_TX_LR_ONLY_GRATING_LOBE_DET_DETECTED;
constexpr Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::Can_tx_lr_only_grating_lobe_detType_MIN;
constexpr Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::Can_tx_lr_only_grating_lobe_detType_MAX;
constexpr int Esr_status4_4e3::Can_tx_lr_only_grating_lobe_detType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_sidelobe_blockageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[8];
}
bool Esr_status4_4e3_Can_tx_sidelobe_blockageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::CAN_TX_SIDELOBE_BLOCKAGE_OFF;
constexpr Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::CAN_TX_SIDELOBE_BLOCKAGE_ON;
constexpr Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::Can_tx_sidelobe_blockageType_MIN;
constexpr Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::Can_tx_sidelobe_blockageType_MAX;
constexpr int Esr_status4_4e3::Can_tx_sidelobe_blockageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_partial_blockageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[9];
}
bool Esr_status4_4e3_Can_tx_partial_blockageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::CAN_TX_PARTIAL_BLOCKAGE_NOT_BLOCKED;
constexpr Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::CAN_TX_PARTIAL_BLOCKAGE_BLOCKED;
constexpr Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::Can_tx_partial_blockageType_MIN;
constexpr Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::Can_tx_partial_blockageType_MAX;
constexpr int Esr_status4_4e3::Can_tx_partial_blockageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_mr_lr_modeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[10];
}
bool Esr_status4_4e3_Can_tx_mr_lr_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::CAN_TX_MR_LR_MODE_RESERVED;
constexpr Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::CAN_TX_MR_LR_MODE_OUTPUT_ONLY_MEDIUM_RANGE_TRACKS;
constexpr Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::CAN_TX_MR_LR_MODE_OUTPUT_ONLY_LONG_RANGE_TRACKS;
constexpr Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::CAN_TX_MR_LR_MODE_OUTPUT_ALL_MEDIUM_RANGE_AND_LONG;
constexpr Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::Can_tx_mr_lr_modeType_MIN;
constexpr Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::Can_tx_mr_lr_modeType_MAX;
constexpr int Esr_status4_4e3::Can_tx_mr_lr_modeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_grouping_changedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[11];
}
bool Esr_track01_500_Can_tx_track_grouping_changedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGUNCHANGED;
constexpr Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGCHANGED;
constexpr Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::Can_tx_track_grouping_changedType_MIN;
constexpr Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::Can_tx_track_grouping_changedType_MAX;
constexpr int Esr_track01_500::Can_tx_track_grouping_changedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_oncomingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[12];
}
bool Esr_track01_500_Can_tx_track_oncomingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::CAN_TX_TRACK_ONCOMING_NOTONCOMING;
constexpr Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::CAN_TX_TRACK_ONCOMING_ONCOMING;
constexpr Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::Can_tx_track_oncomingType_MIN;
constexpr Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::Can_tx_track_oncomingType_MAX;
constexpr int Esr_track01_500::Can_tx_track_oncomingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_bridge_objectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[13];
}
bool Esr_track01_500_Can_tx_track_bridge_objectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::CAN_TX_TRACK_BRIDGE_OBJECT_NOT_BRIDGE;
constexpr Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::CAN_TX_TRACK_BRIDGE_OBJECT_BRIDGE;
constexpr Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::Can_tx_track_bridge_objectType_MIN;
constexpr Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::Can_tx_track_bridge_objectType_MAX;
constexpr int Esr_track01_500::Can_tx_track_bridge_objectType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_statusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[14];
}
bool Esr_track01_500_Can_tx_track_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_NO_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_NEW_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_NEW_UPDATED_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_UPDATED_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_COASTED_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_MERGED_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_INVALID_COASTED_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::CAN_TX_TRACK_STATUS_NEW_COASTED_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::Can_tx_track_statusType_MIN;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500::Can_tx_track_statusType_MAX;
constexpr int Esr_track01_500::Can_tx_track_statusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_med_range_modeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[15];
}
bool Esr_track01_500_Can_tx_track_med_range_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::CAN_TX_TRACK_MED_RANGE_MODE_NO_MR_LR_UPDATE;
constexpr Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::CAN_TX_TRACK_MED_RANGE_MODE_MR_UPDATE_ONLY;
constexpr Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::CAN_TX_TRACK_MED_RANGE_MODE_LR_UPDATE_ONLY;
constexpr Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::CAN_TX_TRACK_MED_RANGE_MODE_BOTH_MR_LR_UPDATE;
constexpr Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::Can_tx_track_med_range_modeType_MIN;
constexpr Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::Can_tx_track_med_range_modeType_MAX;
constexpr int Esr_track01_500::Can_tx_track_med_range_modeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_mr_only_transmitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[16];
}
bool Vehicle2_4f1_Can_rx_mr_only_transmitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::CAN_RX_MR_ONLY_TRANSMIT_OFF;
constexpr Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::CAN_RX_MR_ONLY_TRANSMIT_ON;
constexpr Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::Can_rx_mr_only_transmitType_MIN;
constexpr Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::Can_rx_mr_only_transmitType_MAX;
constexpr int Vehicle2_4f1::Can_rx_mr_only_transmitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_lr_only_transmitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[17];
}
bool Vehicle2_4f1_Can_rx_lr_only_transmitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::CAN_RX_LR_ONLY_TRANSMIT_OFF;
constexpr Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::CAN_RX_LR_ONLY_TRANSMIT_ON;
constexpr Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::Can_rx_lr_only_transmitType_MIN;
constexpr Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::Can_rx_lr_only_transmitType_MAX;
constexpr int Vehicle2_4f1::Can_rx_lr_only_transmitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_clear_faultsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[18];
}
bool Vehicle2_4f1_Can_rx_clear_faultsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::CAN_RX_CLEAR_FAULTS_OFF;
constexpr Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::CAN_RX_CLEAR_FAULTS_ON;
constexpr Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::Can_rx_clear_faultsType_MIN;
constexpr Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::Can_rx_clear_faultsType_MAX;
constexpr int Vehicle2_4f1::Can_rx_clear_faultsType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_use_angle_misalignmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[19];
}
bool Vehicle2_4f1_Can_rx_use_angle_misalignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::CAN_RX_USE_ANGLE_MISALIGNMENT_OFF;
constexpr Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::CAN_RX_USE_ANGLE_MISALIGNMENT_ON;
constexpr Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::Can_rx_use_angle_misalignmentType_MIN;
constexpr Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::Can_rx_use_angle_misalignmentType_MAX;
constexpr int Vehicle2_4f1::Can_rx_use_angle_misalignmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_turn_signal_statusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[20];
}
bool Vehicle2_4f1_Can_rx_turn_signal_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::CAN_RX_TURN_SIGNAL_STATUS_OFF;
constexpr Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::CAN_RX_TURN_SIGNAL_STATUS_LEFT;
constexpr Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::CAN_RX_TURN_SIGNAL_STATUS_RIGHT;
constexpr Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::CAN_RX_TURN_SIGNAL_STATUS_INVALID_3;
constexpr Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::Can_rx_turn_signal_statusType_MIN;
constexpr Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::Can_rx_turn_signal_statusType_MAX;
constexpr int Vehicle2_4f1::Can_rx_turn_signal_statusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_blockage_disableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[21];
}
bool Vehicle2_4f1_Can_rx_blockage_disableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::CAN_RX_BLOCKAGE_DISABLE_ENABLED;
constexpr Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::CAN_RX_BLOCKAGE_DISABLE_DISABLED;
constexpr Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::Can_rx_blockage_disableType_MIN;
constexpr Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::Can_rx_blockage_disableType_MAX;
constexpr int Vehicle2_4f1::Can_rx_blockage_disableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_vehicle_speed_validityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[22];
}
bool Vehicle2_4f1_Can_rx_vehicle_speed_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::CAN_RX_VEHICLE_SPEED_VALIDITY_INVALID;
constexpr Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::CAN_RX_VEHICLE_SPEED_VALIDITY_VALID;
constexpr Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::Can_rx_vehicle_speed_validityType_MIN;
constexpr Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::Can_rx_vehicle_speed_validityType_MAX;
constexpr int Vehicle2_4f1::Can_rx_vehicle_speed_validityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_mmr_upside_downType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[23];
}
bool Vehicle2_4f1_Can_rx_mmr_upside_downType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::CAN_RX_MMR_UPSIDE_DOWN_RIGHT_SIDE_UP;
constexpr Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::CAN_RX_MMR_UPSIDE_DOWN_UPSIDE_DOWN;
constexpr Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::Can_rx_mmr_upside_downType_MIN;
constexpr Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::Can_rx_mmr_upside_downType_MAX;
constexpr int Vehicle2_4f1::Can_rx_mmr_upside_downType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_wiper_statusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[24];
}
bool Vehicle2_4f1_Can_rx_wiper_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::CAN_RX_WIPER_STATUS_OFF;
constexpr Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::CAN_RX_WIPER_STATUS_ON;
constexpr Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::Can_rx_wiper_statusType_MIN;
constexpr Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::Can_rx_wiper_statusType_MAX;
constexpr int Vehicle2_4f1::Can_rx_wiper_statusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_raw_data_enableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[25];
}
bool Vehicle2_4f1_Can_rx_raw_data_enableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::CAN_RX_RAW_DATA_ENABLE_FILTERED;
constexpr Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::CAN_RX_RAW_DATA_ENABLE_RAW;
constexpr Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::Can_rx_raw_data_enableType_MIN;
constexpr Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::Can_rx_raw_data_enableType_MAX;
constexpr int Vehicle2_4f1::Can_rx_raw_data_enableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_radar_cmd_radiateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[26];
}
bool Vehicle2_4f1_Can_rx_radar_cmd_radiateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::CAN_RX_RADAR_CMD_RADIATE_OFF;
constexpr Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::CAN_RX_RADAR_CMD_RADIATE_ON;
constexpr Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::Can_rx_radar_cmd_radiateType_MIN;
constexpr Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::Can_rx_radar_cmd_radiateType_MAX;
constexpr int Vehicle2_4f1::Can_rx_radar_cmd_radiateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_grouping_modeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[27];
}
bool Vehicle2_4f1_Can_rx_grouping_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::CAN_RX_GROUPING_MODE_NO_GROUPING;
constexpr Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::CAN_RX_GROUPING_MODE_GROUP_MOVING_ONLY;
constexpr Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::CAN_RX_GROUPING_MODE_GROUP_STATIONARY_ONLY;
constexpr Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::CAN_RX_GROUPING_MODE_GROUP_MOVING_STATIONARY;
constexpr Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::Can_rx_grouping_modeType_MIN;
constexpr Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::Can_rx_grouping_modeType_MAX;
constexpr int Vehicle2_4f1::Can_rx_grouping_modeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_validityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[28];
}
bool Vehicle1_4f0_Can_rx_steering_angle_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_VALIDITY_INVALID;
constexpr Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_VALIDITY_VALID;
constexpr Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::Can_rx_steering_angle_validityType_MIN;
constexpr Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::Can_rx_steering_angle_validityType_MAX;
constexpr int Vehicle1_4f0::Can_rx_steering_angle_validityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_signType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[29];
}
bool Vehicle1_4f0_Can_rx_steering_angle_signType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_SIGN_COUNTERCLOCKWISE;
constexpr Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_SIGN_CLOCKWISE;
constexpr Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::Can_rx_steering_angle_signType_MIN;
constexpr Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::Can_rx_steering_angle_signType_MAX;
constexpr int Vehicle1_4f0::Can_rx_steering_angle_signType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_rate_signType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[30];
}
bool Vehicle1_4f0_Can_rx_steering_angle_rate_signType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_RATE_SIGN_COUNTERCLOCKWISE;
constexpr Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::CAN_RX_STEERING_ANGLE_RATE_SIGN_CLOCKWISE;
constexpr Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::Can_rx_steering_angle_rate_signType_MIN;
constexpr Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::Can_rx_steering_angle_rate_signType_MAX;
constexpr int Vehicle1_4f0::Can_rx_steering_angle_rate_signType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_yaw_rate_validityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[31];
}
bool Vehicle1_4f0_Can_rx_yaw_rate_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::CAN_RX_YAW_RATE_VALIDITY_INVALID;
constexpr Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::CAN_RX_YAW_RATE_VALIDITY_VALID;
constexpr Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::Can_rx_yaw_rate_validityType_MIN;
constexpr Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::Can_rx_yaw_rate_validityType_MAX;
constexpr int Vehicle1_4f0::Can_rx_yaw_rate_validityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_vehicle_speed_directionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[32];
}
bool Vehicle1_4f0_Can_rx_vehicle_speed_directionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::CAN_RX_VEHICLE_SPEED_DIRECTION_FORWARD;
constexpr Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::CAN_RX_VEHICLE_SPEED_DIRECTION_REVERSE;
constexpr Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::Can_rx_vehicle_speed_directionType_MIN;
constexpr Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::Can_rx_vehicle_speed_directionType_MAX;
constexpr int Vehicle1_4f0::Can_rx_vehicle_speed_directionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_track_idType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[33];
}
bool Esr_sim1_5c0_Can_rx_sim_track_idType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::CAN_RX_SIM_TRACK_ID_NO_TARGET;
constexpr Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::CAN_RX_SIM_TRACK_ID_TARGET_1;
constexpr Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::CAN_RX_SIM_TRACK_ID_TARGET_2;
constexpr Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::Can_rx_sim_track_idType_MIN;
constexpr Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::Can_rx_sim_track_idType_MAX;
constexpr int Esr_sim1_5c0::Can_rx_sim_track_idType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_statusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[34];
}
bool Esr_sim1_5c0_Can_rx_sim_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::CAN_RX_SIM_STATUS_INVALID;
constexpr Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::CAN_RX_SIM_STATUS_NEW;
constexpr Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::CAN_RX_SIM_STATUS_UPDATED;
constexpr Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::CAN_RX_SIM_STATUS_COASTED;
constexpr Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::Can_rx_sim_statusType_MIN;
constexpr Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::Can_rx_sim_statusType_MAX;
constexpr int Esr_sim1_5c0::Can_rx_sim_statusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_functionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[35];
}
bool Esr_sim1_5c0_Can_rx_sim_functionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_ACC;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_RI;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_FCW_MOVE;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_FCW_STAT;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_CMBB_MOVE;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_CMBB_STAT;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_ALL_MOVING_ACC_FCW_CMBB;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::CAN_RX_SIM_FUNCTION_ALL_STAT_RI_FCW_CMBB;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::Can_rx_sim_functionType_MIN;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::Can_rx_sim_functionType_MAX;
constexpr int Esr_sim1_5c0::Can_rx_sim_functionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_raw_data_modeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[36];
}
bool Esr_status2_4e1_Can_tx_raw_data_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::CAN_TX_RAW_DATA_MODE_FILTERED;
constexpr Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::CAN_TX_RAW_DATA_MODE_RAW;
constexpr Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::Can_tx_raw_data_modeType_MIN;
constexpr Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::Can_tx_raw_data_modeType_MAX;
constexpr int Esr_status2_4e1::Can_tx_raw_data_modeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_range_perf_errorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[37];
}
bool Esr_status2_4e1_Can_tx_range_perf_errorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::CAN_TX_RANGE_PERF_ERROR_NOT_BLOCKED;
constexpr Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::CAN_TX_RANGE_PERF_ERROR_BLOCKED;
constexpr Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::Can_tx_range_perf_errorType_MIN;
constexpr Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::Can_tx_range_perf_errorType_MAX;
constexpr int Esr_status2_4e1::Can_tx_range_perf_errorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_overheat_errorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[38];
}
bool Esr_status2_4e1_Can_tx_overheat_errorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::CAN_TX_OVERHEAT_ERROR_NOT_OVERTEMP;
constexpr Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::CAN_TX_OVERHEAT_ERROR_OVERTEMP;
constexpr Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::Can_tx_overheat_errorType_MIN;
constexpr Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::Can_tx_overheat_errorType_MAX;
constexpr int Esr_status2_4e1::Can_tx_overheat_errorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_internal_errorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[39];
}
bool Esr_status2_4e1_Can_tx_internal_errorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::CAN_TX_INTERNAL_ERROR_NOT_FAILED;
constexpr Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::CAN_TX_INTERNAL_ERROR_FAILED;
constexpr Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::Can_tx_internal_errorType_MIN;
constexpr Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::Can_tx_internal_errorType_MAX;
constexpr int Esr_status2_4e1::Can_tx_internal_errorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_grouping_modeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[40];
}
bool Esr_status2_4e1_Can_tx_grouping_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::CAN_TX_GROUPING_MODE_NO_GROUPING;
constexpr Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::CAN_TX_GROUPING_MODE_GROUP_MOVING_ONLY;
constexpr Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::CAN_TX_GROUPING_MODE_GROUP_STATIONARY_ONLY;
constexpr Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::CAN_TX_GROUPING_MODE_GROUP_MOVING_STATIONARY;
constexpr Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::Can_tx_grouping_modeType_MIN;
constexpr Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::Can_tx_grouping_modeType_MAX;
constexpr int Esr_status2_4e1::Can_tx_grouping_modeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_xcvr_operationalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[41];
}
bool Esr_status2_4e1_Can_tx_xcvr_operationalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::CAN_TX_XCVR_OPERATIONAL_OFF;
constexpr Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::CAN_TX_XCVR_OPERATIONAL_ON;
constexpr Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::Can_tx_xcvr_operationalType_MIN;
constexpr Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::Can_tx_xcvr_operationalType_MAX;
constexpr int Esr_status2_4e1::Can_tx_xcvr_operationalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_serv_align_typeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[42];
}
bool Vehicle3_5f2_Can_rx_serv_align_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::CAN_RX_SERV_ALIGN_TYPE_AUTO_OR_DEALER;
constexpr Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::CAN_RX_SERV_ALIGN_TYPE_VOLVO_SHORT_TRACK;
constexpr Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::Can_rx_serv_align_typeType_MIN;
constexpr Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::Can_rx_serv_align_typeType_MAX;
constexpr int Vehicle3_5f2::Can_rx_serv_align_typeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_serv_align_enableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[43];
}
bool Vehicle3_5f2_Can_rx_serv_align_enableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::CAN_RX_SERV_ALIGN_ENABLE_DISABLED;
constexpr Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::CAN_RX_SERV_ALIGN_ENABLE_ENABLED;
constexpr Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::Can_rx_serv_align_enableType_MIN;
constexpr Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::Can_rx_serv_align_enableType_MAX;
constexpr int Vehicle3_5f2::Can_rx_serv_align_enableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_auto_align_convergedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[44];
}
bool Vehicle3_5f2_Can_rx_auto_align_convergedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::CAN_RX_AUTO_ALIGN_CONVERGED_NOT_CONVERGED;
constexpr Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::CAN_RX_AUTO_ALIGN_CONVERGED_CONVERGED;
constexpr Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::Can_rx_auto_align_convergedType_MIN;
constexpr Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::Can_rx_auto_align_convergedType_MAX;
constexpr int Vehicle3_5f2::Can_rx_auto_align_convergedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_auto_align_disableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[45];
}
bool Vehicle3_5f2_Can_rx_auto_align_disableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::CAN_RX_AUTO_ALIGN_DISABLE_ENABLED;
constexpr Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::CAN_RX_AUTO_ALIGN_DISABLE_DISABLED;
constexpr Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::Can_rx_auto_align_disableType_MIN;
constexpr Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::Can_rx_auto_align_disableType_MAX;
constexpr int Vehicle3_5f2::Can_rx_auto_align_disableType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_wheel_slipType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[46];
}
bool Vehicle3_5f2_Can_rx_wheel_slipType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::CAN_RX_WHEEL_SLIP_NO_CONTROL;
constexpr Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::CAN_RX_WHEEL_SLIP_BRAKE_SLIP_CONTROL;
constexpr Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::CAN_RX_WHEEL_SLIP_TRACTION_SLIP_CONTROL;
constexpr Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::CAN_RX_WHEEL_SLIP_INVALID_3;
constexpr Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::Can_rx_wheel_slipType_MIN;
constexpr Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::Can_rx_wheel_slipType_MAX;
constexpr int Vehicle3_5f2::Can_rx_wheel_slipType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_long_accel_validityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[47];
}
bool Vehicle3_5f2_Can_rx_long_accel_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle3_5f2_Can_rx_long_accel_validityType Vehicle3_5f2::CAN_RX_LONG_ACCEL_VALIDITY_INVALID;
constexpr Vehicle3_5f2_Can_rx_long_accel_validityType Vehicle3_5f2::CAN_RX_LONG_ACCEL_VALIDITY_VALID;
constexpr Vehicle3_5f2_Can_rx_long_accel_validityType Vehicle3_5f2::Can_rx_long_accel_validityType_MIN;
constexpr Vehicle3_5f2_Can_rx_long_accel_validityType Vehicle3_5f2::Can_rx_long_accel_validityType_MAX;
constexpr int Vehicle3_5f2::Can_rx_long_accel_validityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_lat_accel_validityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[48];
}
bool Vehicle3_5f2_Can_rx_lat_accel_validityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle3_5f2_Can_rx_lat_accel_validityType Vehicle3_5f2::CAN_RX_LAT_ACCEL_VALIDITY_INVALID;
constexpr Vehicle3_5f2_Can_rx_lat_accel_validityType Vehicle3_5f2::CAN_RX_LAT_ACCEL_VALIDITY_VALID;
constexpr Vehicle3_5f2_Can_rx_lat_accel_validityType Vehicle3_5f2::Can_rx_lat_accel_validityType_MIN;
constexpr Vehicle3_5f2_Can_rx_lat_accel_validityType Vehicle3_5f2::Can_rx_lat_accel_validityType_MAX;
constexpr int Vehicle3_5f2::Can_rx_lat_accel_validityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[49];
}
bool Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::CAN_RX_FAC_ALIGN_CMD_2_OFF;
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::CAN_RX_FAC_ALIGN_CMD_2_ON;
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::Can_rx_fac_align_cmd_2Type_MIN;
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::Can_rx_fac_align_cmd_2Type_MAX;
constexpr int Vehicle4_5f3::Can_rx_fac_align_cmd_2Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[50];
}
bool Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::CAN_RX_FAC_ALIGN_CMD_1_OFF;
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::CAN_RX_FAC_ALIGN_CMD_1_ON;
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::Can_rx_fac_align_cmd_1Type_MIN;
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::Can_rx_fac_align_cmd_1Type_MAX;
constexpr int Vehicle4_5f3::Can_rx_fac_align_cmd_1Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto[51];
}
bool Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::CAN_RX_YAW_RATE_BIAS_SHIFT_NO_DETECT;
constexpr Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::CAN_RX_YAW_RATE_BIAS_SHIFT_DETECT;
constexpr Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::Can_rx_yaw_rate_bias_shiftType_MIN;
constexpr Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::Can_rx_yaw_rate_bias_shiftType_MAX;
constexpr int Vehicle5_5f4::Can_rx_yaw_rate_bias_shiftType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Esr_status9_5e8::InitAsDefaultInstance() {
}
class Esr_status9_5e8::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status9_5e8>()._has_bits_);
  static void set_has_can_tx_path_id_acc_3(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_path_id_acc_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_filtered_xohp_acc_cipv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_water_spray_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_serial_num_3rd_byte(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_sideslip_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_avg_pwr_cwblkg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Esr_status9_5e8::Esr_status9_5e8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status9_5e8)
}
Esr_status9_5e8::Esr_status9_5e8(const Esr_status9_5e8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_path_id_acc_3_, &from.can_tx_path_id_acc_3_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_avg_pwr_cwblkg_) -
    reinterpret_cast<char*>(&can_tx_path_id_acc_3_)) + sizeof(can_tx_avg_pwr_cwblkg_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status9_5e8)
}

void Esr_status9_5e8::SharedCtor() {
  ::memset(&can_tx_path_id_acc_3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_avg_pwr_cwblkg_) -
      reinterpret_cast<char*>(&can_tx_path_id_acc_3_)) + sizeof(can_tx_avg_pwr_cwblkg_));
}

Esr_status9_5e8::~Esr_status9_5e8() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status9_5e8)
  SharedDtor();
}

void Esr_status9_5e8::SharedDtor() {
}

void Esr_status9_5e8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status9_5e8& Esr_status9_5e8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status9_5e8_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status9_5e8::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status9_5e8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&can_tx_path_id_acc_3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_avg_pwr_cwblkg_) -
        reinterpret_cast<char*>(&can_tx_path_id_acc_3_)) + sizeof(can_tx_avg_pwr_cwblkg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status9_5e8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_tx_path_id_acc_3 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_path_id_acc_3(&has_bits);
          can_tx_path_id_acc_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_path_id_acc_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_tx_path_id_acc_2(&has_bits);
          can_tx_path_id_acc_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_filtered_xohp_acc_cipv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_tx_filtered_xohp_acc_cipv(&has_bits);
          can_tx_filtered_xohp_acc_cipv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_water_spray_target_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_water_spray_target_id(&has_bits);
          can_tx_water_spray_target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_serial_num_3rd_byte = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_tx_serial_num_3rd_byte(&has_bits);
          can_tx_serial_num_3rd_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_sideslip_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_can_tx_sideslip_angle(&has_bits);
          can_tx_sideslip_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_avg_pwr_cwblkg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_tx_avg_pwr_cwblkg(&has_bits);
          can_tx_avg_pwr_cwblkg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status9_5e8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status9_5e8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_path_id_acc_3 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_tx_path_id_acc_3(), target);
  }

  // optional int32 can_tx_path_id_acc_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_can_tx_path_id_acc_2(), target);
  }

  // optional double can_tx_filtered_xohp_acc_cipv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_tx_filtered_xohp_acc_cipv(), target);
  }

  // optional int32 can_tx_water_spray_target_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_water_spray_target_id(), target);
  }

  // optional int32 can_tx_serial_num_3rd_byte = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_tx_serial_num_3rd_byte(), target);
  }

  // optional double can_tx_sideslip_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_can_tx_sideslip_angle(), target);
  }

  // optional int32 can_tx_avg_pwr_cwblkg = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_can_tx_avg_pwr_cwblkg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status9_5e8)
  return target;
}

size_t Esr_status9_5e8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status9_5e8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 can_tx_path_id_acc_3 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_path_id_acc_3());
    }

    // optional int32 can_tx_path_id_acc_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_path_id_acc_2());
    }

    // optional double can_tx_filtered_xohp_acc_cipv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_water_spray_target_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_water_spray_target_id());
    }

    // optional int32 can_tx_serial_num_3rd_byte = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_serial_num_3rd_byte());
    }

    // optional double can_tx_sideslip_angle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_avg_pwr_cwblkg = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_avg_pwr_cwblkg());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status9_5e8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status9_5e8)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status9_5e8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status9_5e8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status9_5e8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status9_5e8)
    MergeFrom(*source);
  }
}

void Esr_status9_5e8::MergeFrom(const Esr_status9_5e8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status9_5e8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_path_id_acc_3_ = from.can_tx_path_id_acc_3_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_path_id_acc_2_ = from.can_tx_path_id_acc_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_filtered_xohp_acc_cipv_ = from.can_tx_filtered_xohp_acc_cipv_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_water_spray_target_id_ = from.can_tx_water_spray_target_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_serial_num_3rd_byte_ = from.can_tx_serial_num_3rd_byte_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_sideslip_angle_ = from.can_tx_sideslip_angle_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_avg_pwr_cwblkg_ = from.can_tx_avg_pwr_cwblkg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status9_5e8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status9_5e8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status9_5e8::CopyFrom(const Esr_status9_5e8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status9_5e8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status9_5e8::IsInitialized() const {
  return true;
}

void Esr_status9_5e8::InternalSwap(Esr_status9_5e8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_path_id_acc_3_, other->can_tx_path_id_acc_3_);
  swap(can_tx_path_id_acc_2_, other->can_tx_path_id_acc_2_);
  swap(can_tx_filtered_xohp_acc_cipv_, other->can_tx_filtered_xohp_acc_cipv_);
  swap(can_tx_water_spray_target_id_, other->can_tx_water_spray_target_id_);
  swap(can_tx_serial_num_3rd_byte_, other->can_tx_serial_num_3rd_byte_);
  swap(can_tx_sideslip_angle_, other->can_tx_sideslip_angle_);
  swap(can_tx_avg_pwr_cwblkg_, other->can_tx_avg_pwr_cwblkg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status9_5e8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_status6_5e5::InitAsDefaultInstance() {
}
class Esr_status6_5e5::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status6_5e5>()._has_bits_);
  static void set_has_can_tx_sw_version_dsp_3rd_byte(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_vertical_align_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_vertical_misalignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_serv_align_updates_done(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_found_target(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_factory_misalignment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_factory_align_status_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_tx_factory_align_status_1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_tx_recommend_unconverge(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_tx_wave_diff_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_tx_system_power_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_can_tx_supply_n5v_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_tx_supply_1p8v_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

Esr_status6_5e5::Esr_status6_5e5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status6_5e5)
}
Esr_status6_5e5::Esr_status6_5e5(const Esr_status6_5e5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_sw_version_dsp_3rd_byte_, &from.can_tx_sw_version_dsp_3rd_byte_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_supply_1p8v_a2d_) -
    reinterpret_cast<char*>(&can_tx_sw_version_dsp_3rd_byte_)) + sizeof(can_tx_supply_1p8v_a2d_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status6_5e5)
}

void Esr_status6_5e5::SharedCtor() {
  ::memset(&can_tx_sw_version_dsp_3rd_byte_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_supply_1p8v_a2d_) -
      reinterpret_cast<char*>(&can_tx_sw_version_dsp_3rd_byte_)) + sizeof(can_tx_supply_1p8v_a2d_));
}

Esr_status6_5e5::~Esr_status6_5e5() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status6_5e5)
  SharedDtor();
}

void Esr_status6_5e5::SharedDtor() {
}

void Esr_status6_5e5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status6_5e5& Esr_status6_5e5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status6_5e5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status6_5e5::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status6_5e5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_tx_sw_version_dsp_3rd_byte_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_factory_align_status_1_) -
        reinterpret_cast<char*>(&can_tx_sw_version_dsp_3rd_byte_)) + sizeof(can_tx_factory_align_status_1_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&can_tx_recommend_unconverge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_supply_1p8v_a2d_) -
        reinterpret_cast<char*>(&can_tx_recommend_unconverge_)) + sizeof(can_tx_supply_1p8v_a2d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status6_5e5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_sw_version_dsp_3rd_byte(&has_bits);
          can_tx_sw_version_dsp_3rd_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType_IsValid(val))) {
            _internal_set_can_tx_vertical_align_updated(static_cast<::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_tx_vertical_misalignment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_tx_vertical_misalignment(&has_bits);
          can_tx_vertical_misalignment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_serv_align_updates_done = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_serv_align_updates_done(&has_bits);
          can_tx_serv_align_updates_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType_IsValid(val))) {
            _internal_set_can_tx_found_target(static_cast<::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_tx_factory_misalignment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_can_tx_factory_misalignment(&has_bits);
          can_tx_factory_misalignment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type_IsValid(val))) {
            _internal_set_can_tx_factory_align_status_2(static_cast<::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type_IsValid(val))) {
            _internal_set_can_tx_factory_align_status_1(static_cast<::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType_IsValid(val))) {
            _internal_set_can_tx_recommend_unconverge(static_cast<::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_wave_diff_a2d = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_can_tx_wave_diff_a2d(&has_bits);
          can_tx_wave_diff_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType_IsValid(val))) {
            _internal_set_can_tx_system_power_mode(static_cast<::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_supply_n5v_a2d = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_can_tx_supply_n5v_a2d(&has_bits);
          can_tx_supply_n5v_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_supply_1p8v_a2d = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_can_tx_supply_1p8v_a2d(&has_bits);
          can_tx_supply_1p8v_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status6_5e5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status6_5e5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_tx_sw_version_dsp_3rd_byte(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_can_tx_vertical_align_updated(), target);
  }

  // optional double can_tx_vertical_misalignment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_tx_vertical_misalignment(), target);
  }

  // optional int32 can_tx_serv_align_updates_done = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_serv_align_updates_done(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_can_tx_found_target(), target);
  }

  // optional double can_tx_factory_misalignment = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_can_tx_factory_misalignment(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_can_tx_factory_align_status_2(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_can_tx_factory_align_status_1(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_can_tx_recommend_unconverge(), target);
  }

  // optional int32 can_tx_wave_diff_a2d = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_can_tx_wave_diff_a2d(), target);
  }

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_can_tx_system_power_mode(), target);
  }

  // optional int32 can_tx_supply_n5v_a2d = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_can_tx_supply_n5v_a2d(), target);
  }

  // optional int32 can_tx_supply_1p8v_a2d = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_can_tx_supply_1p8v_a2d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status6_5e5)
  return target;
}

size_t Esr_status6_5e5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status6_5e5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_sw_version_dsp_3rd_byte());
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_vertical_align_updated());
    }

    // optional double can_tx_vertical_misalignment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_serv_align_updates_done = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_serv_align_updates_done());
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_found_target());
    }

    // optional double can_tx_factory_misalignment = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_factory_align_status_2());
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_factory_align_status_1());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_recommend_unconverge());
    }

    // optional int32 can_tx_wave_diff_a2d = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_wave_diff_a2d());
    }

    // optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_system_power_mode());
    }

    // optional int32 can_tx_supply_n5v_a2d = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_supply_n5v_a2d());
    }

    // optional int32 can_tx_supply_1p8v_a2d = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_supply_1p8v_a2d());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status6_5e5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status6_5e5)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status6_5e5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status6_5e5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status6_5e5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status6_5e5)
    MergeFrom(*source);
  }
}

void Esr_status6_5e5::MergeFrom(const Esr_status6_5e5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status6_5e5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_sw_version_dsp_3rd_byte_ = from.can_tx_sw_version_dsp_3rd_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_vertical_align_updated_ = from.can_tx_vertical_align_updated_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_vertical_misalignment_ = from.can_tx_vertical_misalignment_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_serv_align_updates_done_ = from.can_tx_serv_align_updates_done_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_found_target_ = from.can_tx_found_target_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_factory_misalignment_ = from.can_tx_factory_misalignment_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_factory_align_status_2_ = from.can_tx_factory_align_status_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_factory_align_status_1_ = from.can_tx_factory_align_status_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      can_tx_recommend_unconverge_ = from.can_tx_recommend_unconverge_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_tx_wave_diff_a2d_ = from.can_tx_wave_diff_a2d_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_tx_system_power_mode_ = from.can_tx_system_power_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_tx_supply_n5v_a2d_ = from.can_tx_supply_n5v_a2d_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_tx_supply_1p8v_a2d_ = from.can_tx_supply_1p8v_a2d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status6_5e5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status6_5e5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status6_5e5::CopyFrom(const Esr_status6_5e5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status6_5e5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status6_5e5::IsInitialized() const {
  return true;
}

void Esr_status6_5e5::InternalSwap(Esr_status6_5e5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_sw_version_dsp_3rd_byte_, other->can_tx_sw_version_dsp_3rd_byte_);
  swap(can_tx_vertical_align_updated_, other->can_tx_vertical_align_updated_);
  swap(can_tx_vertical_misalignment_, other->can_tx_vertical_misalignment_);
  swap(can_tx_serv_align_updates_done_, other->can_tx_serv_align_updates_done_);
  swap(can_tx_found_target_, other->can_tx_found_target_);
  swap(can_tx_factory_misalignment_, other->can_tx_factory_misalignment_);
  swap(can_tx_factory_align_status_2_, other->can_tx_factory_align_status_2_);
  swap(can_tx_factory_align_status_1_, other->can_tx_factory_align_status_1_);
  swap(can_tx_recommend_unconverge_, other->can_tx_recommend_unconverge_);
  swap(can_tx_wave_diff_a2d_, other->can_tx_wave_diff_a2d_);
  swap(can_tx_system_power_mode_, other->can_tx_system_power_mode_);
  swap(can_tx_supply_n5v_a2d_, other->can_tx_supply_n5v_a2d_);
  swap(can_tx_supply_1p8v_a2d_, other->can_tx_supply_1p8v_a2d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status6_5e5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_status5_5e4::InitAsDefaultInstance() {
}
class Esr_status5_5e4::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status5_5e4>()._has_bits_);
  static void set_has_can_tx_supply_10v_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_temp2_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_temp1_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_swbatt_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_supply_5vdx_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_supply_5va_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_supply_3p3v_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_tx_ignp_a2d(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Esr_status5_5e4::Esr_status5_5e4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status5_5e4)
}
Esr_status5_5e4::Esr_status5_5e4(const Esr_status5_5e4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_supply_10v_a2d_, &from.can_tx_supply_10v_a2d_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_ignp_a2d_) -
    reinterpret_cast<char*>(&can_tx_supply_10v_a2d_)) + sizeof(can_tx_ignp_a2d_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status5_5e4)
}

void Esr_status5_5e4::SharedCtor() {
  ::memset(&can_tx_supply_10v_a2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_ignp_a2d_) -
      reinterpret_cast<char*>(&can_tx_supply_10v_a2d_)) + sizeof(can_tx_ignp_a2d_));
}

Esr_status5_5e4::~Esr_status5_5e4() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status5_5e4)
  SharedDtor();
}

void Esr_status5_5e4::SharedDtor() {
}

void Esr_status5_5e4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status5_5e4& Esr_status5_5e4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status5_5e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status5_5e4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status5_5e4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_tx_supply_10v_a2d_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_ignp_a2d_) -
        reinterpret_cast<char*>(&can_tx_supply_10v_a2d_)) + sizeof(can_tx_ignp_a2d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status5_5e4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_tx_supply_10v_a2d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_supply_10v_a2d(&has_bits);
          can_tx_supply_10v_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_temp2_a2d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_tx_temp2_a2d(&has_bits);
          can_tx_temp2_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_temp1_a2d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_tx_temp1_a2d(&has_bits);
          can_tx_temp1_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_swbatt_a2d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_swbatt_a2d(&has_bits);
          can_tx_swbatt_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_supply_5vdx_a2d = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_tx_supply_5vdx_a2d(&has_bits);
          can_tx_supply_5vdx_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_supply_5va_a2d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_tx_supply_5va_a2d(&has_bits);
          can_tx_supply_5va_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_supply_3p3v_a2d = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_tx_supply_3p3v_a2d(&has_bits);
          can_tx_supply_3p3v_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_ignp_a2d = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_can_tx_ignp_a2d(&has_bits);
          can_tx_ignp_a2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status5_5e4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status5_5e4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_supply_10v_a2d = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_tx_supply_10v_a2d(), target);
  }

  // optional int32 can_tx_temp2_a2d = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_can_tx_temp2_a2d(), target);
  }

  // optional int32 can_tx_temp1_a2d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_can_tx_temp1_a2d(), target);
  }

  // optional int32 can_tx_swbatt_a2d = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_swbatt_a2d(), target);
  }

  // optional int32 can_tx_supply_5vdx_a2d = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_tx_supply_5vdx_a2d(), target);
  }

  // optional int32 can_tx_supply_5va_a2d = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_can_tx_supply_5va_a2d(), target);
  }

  // optional int32 can_tx_supply_3p3v_a2d = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_can_tx_supply_3p3v_a2d(), target);
  }

  // optional int32 can_tx_ignp_a2d = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_can_tx_ignp_a2d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status5_5e4)
  return target;
}

size_t Esr_status5_5e4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status5_5e4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 can_tx_supply_10v_a2d = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_supply_10v_a2d());
    }

    // optional int32 can_tx_temp2_a2d = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_temp2_a2d());
    }

    // optional int32 can_tx_temp1_a2d = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_temp1_a2d());
    }

    // optional int32 can_tx_swbatt_a2d = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_swbatt_a2d());
    }

    // optional int32 can_tx_supply_5vdx_a2d = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_supply_5vdx_a2d());
    }

    // optional int32 can_tx_supply_5va_a2d = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_supply_5va_a2d());
    }

    // optional int32 can_tx_supply_3p3v_a2d = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_supply_3p3v_a2d());
    }

    // optional int32 can_tx_ignp_a2d = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_ignp_a2d());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status5_5e4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status5_5e4)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status5_5e4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status5_5e4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status5_5e4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status5_5e4)
    MergeFrom(*source);
  }
}

void Esr_status5_5e4::MergeFrom(const Esr_status5_5e4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status5_5e4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_supply_10v_a2d_ = from.can_tx_supply_10v_a2d_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_temp2_a2d_ = from.can_tx_temp2_a2d_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_temp1_a2d_ = from.can_tx_temp1_a2d_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_swbatt_a2d_ = from.can_tx_swbatt_a2d_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_supply_5vdx_a2d_ = from.can_tx_supply_5vdx_a2d_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_supply_5va_a2d_ = from.can_tx_supply_5va_a2d_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_supply_3p3v_a2d_ = from.can_tx_supply_3p3v_a2d_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_ignp_a2d_ = from.can_tx_ignp_a2d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status5_5e4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status5_5e4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status5_5e4::CopyFrom(const Esr_status5_5e4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status5_5e4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status5_5e4::IsInitialized() const {
  return true;
}

void Esr_status5_5e4::InternalSwap(Esr_status5_5e4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_supply_10v_a2d_, other->can_tx_supply_10v_a2d_);
  swap(can_tx_temp2_a2d_, other->can_tx_temp2_a2d_);
  swap(can_tx_temp1_a2d_, other->can_tx_temp1_a2d_);
  swap(can_tx_swbatt_a2d_, other->can_tx_swbatt_a2d_);
  swap(can_tx_supply_5vdx_a2d_, other->can_tx_supply_5vdx_a2d_);
  swap(can_tx_supply_5va_a2d_, other->can_tx_supply_5va_a2d_);
  swap(can_tx_supply_3p3v_a2d_, other->can_tx_supply_3p3v_a2d_);
  swap(can_tx_ignp_a2d_, other->can_tx_ignp_a2d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status5_5e4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_status3_4e2::InitAsDefaultInstance() {
}
class Esr_status3_4e2::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status3_4e2>()._has_bits_);
  static void set_has_can_tx_sw_version_pld(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_sw_version_host(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_hw_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_interface_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_serial_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Esr_status3_4e2::Esr_status3_4e2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status3_4e2)
}
Esr_status3_4e2::Esr_status3_4e2(const Esr_status3_4e2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_sw_version_pld_, &from.can_tx_sw_version_pld_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_serial_num_) -
    reinterpret_cast<char*>(&can_tx_sw_version_pld_)) + sizeof(can_tx_serial_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status3_4e2)
}

void Esr_status3_4e2::SharedCtor() {
  ::memset(&can_tx_sw_version_pld_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_serial_num_) -
      reinterpret_cast<char*>(&can_tx_sw_version_pld_)) + sizeof(can_tx_serial_num_));
}

Esr_status3_4e2::~Esr_status3_4e2() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status3_4e2)
  SharedDtor();
}

void Esr_status3_4e2::SharedDtor() {
}

void Esr_status3_4e2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status3_4e2& Esr_status3_4e2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status3_4e2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status3_4e2::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status3_4e2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&can_tx_sw_version_pld_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_serial_num_) -
        reinterpret_cast<char*>(&can_tx_sw_version_pld_)) + sizeof(can_tx_serial_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status3_4e2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_tx_sw_version_pld = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_sw_version_pld(&has_bits);
          can_tx_sw_version_pld_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_sw_version_host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_tx_sw_version_host(&has_bits);
          can_tx_sw_version_host_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_hw_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_tx_hw_version(&has_bits);
          can_tx_hw_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_interface_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_interface_version(&has_bits);
          can_tx_interface_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_serial_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_tx_serial_num(&has_bits);
          can_tx_serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status3_4e2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status3_4e2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_sw_version_pld = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_tx_sw_version_pld(), target);
  }

  // optional int32 can_tx_sw_version_host = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_can_tx_sw_version_host(), target);
  }

  // optional int32 can_tx_hw_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_can_tx_hw_version(), target);
  }

  // optional int32 can_tx_interface_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_interface_version(), target);
  }

  // optional int32 can_tx_serial_num = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_tx_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status3_4e2)
  return target;
}

size_t Esr_status3_4e2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status3_4e2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 can_tx_sw_version_pld = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_sw_version_pld());
    }

    // optional int32 can_tx_sw_version_host = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_sw_version_host());
    }

    // optional int32 can_tx_hw_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_hw_version());
    }

    // optional int32 can_tx_interface_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_interface_version());
    }

    // optional int32 can_tx_serial_num = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_serial_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status3_4e2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status3_4e2)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status3_4e2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status3_4e2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status3_4e2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status3_4e2)
    MergeFrom(*source);
  }
}

void Esr_status3_4e2::MergeFrom(const Esr_status3_4e2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status3_4e2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_sw_version_pld_ = from.can_tx_sw_version_pld_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_sw_version_host_ = from.can_tx_sw_version_host_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_hw_version_ = from.can_tx_hw_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_interface_version_ = from.can_tx_interface_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_serial_num_ = from.can_tx_serial_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status3_4e2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status3_4e2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status3_4e2::CopyFrom(const Esr_status3_4e2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status3_4e2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status3_4e2::IsInitialized() const {
  return true;
}

void Esr_status3_4e2::InternalSwap(Esr_status3_4e2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_sw_version_pld_, other->can_tx_sw_version_pld_);
  swap(can_tx_sw_version_host_, other->can_tx_sw_version_host_);
  swap(can_tx_hw_version_, other->can_tx_hw_version_);
  swap(can_tx_interface_version_, other->can_tx_interface_version_);
  swap(can_tx_serial_num_, other->can_tx_serial_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status3_4e2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_status4_4e3::InitAsDefaultInstance() {
}
class Esr_status4_4e3::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status4_4e3>()._has_bits_);
  static void set_has_can_tx_truck_target_det(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_lr_only_grating_lobe_det(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_sidelobe_blockage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_partial_blockage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_path_id_acc_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_mr_lr_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_auto_align_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_tx_rolling_count_3(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_tx_path_id_fcw_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_tx_path_id_fcw_move(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_tx_path_id_cmbb_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_can_tx_path_id_cmbb_move(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_tx_path_id_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

Esr_status4_4e3::Esr_status4_4e3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status4_4e3)
}
Esr_status4_4e3::Esr_status4_4e3(const Esr_status4_4e3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_truck_target_det_, &from.can_tx_truck_target_det_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_path_id_acc_) -
    reinterpret_cast<char*>(&can_tx_truck_target_det_)) + sizeof(can_tx_path_id_acc_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status4_4e3)
}

void Esr_status4_4e3::SharedCtor() {
  ::memset(&can_tx_truck_target_det_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_path_id_acc_) -
      reinterpret_cast<char*>(&can_tx_truck_target_det_)) + sizeof(can_tx_path_id_acc_));
}

Esr_status4_4e3::~Esr_status4_4e3() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status4_4e3)
  SharedDtor();
}

void Esr_status4_4e3::SharedDtor() {
}

void Esr_status4_4e3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status4_4e3& Esr_status4_4e3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status4_4e3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status4_4e3::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status4_4e3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_tx_truck_target_det_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_rolling_count_3_) -
        reinterpret_cast<char*>(&can_tx_truck_target_det_)) + sizeof(can_tx_rolling_count_3_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&can_tx_path_id_fcw_stat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_path_id_acc_) -
        reinterpret_cast<char*>(&can_tx_path_id_fcw_stat_)) + sizeof(can_tx_path_id_acc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status4_4e3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType_IsValid(val))) {
            _internal_set_can_tx_truck_target_det(static_cast<::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_IsValid(val))) {
            _internal_set_can_tx_lr_only_grating_lobe_det(static_cast<::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType_IsValid(val))) {
            _internal_set_can_tx_sidelobe_blockage(static_cast<::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType_IsValid(val))) {
            _internal_set_can_tx_partial_blockage(static_cast<::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_path_id_acc_stat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_tx_path_id_acc_stat(&has_bits);
          can_tx_path_id_acc_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType_IsValid(val))) {
            _internal_set_can_tx_mr_lr_mode(static_cast<::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_tx_auto_align_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_can_tx_auto_align_angle(&has_bits);
          can_tx_auto_align_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_rolling_count_3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_can_tx_rolling_count_3(&has_bits);
          can_tx_rolling_count_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_path_id_fcw_stat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_can_tx_path_id_fcw_stat(&has_bits);
          can_tx_path_id_fcw_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_path_id_fcw_move = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_can_tx_path_id_fcw_move(&has_bits);
          can_tx_path_id_fcw_move_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_path_id_cmbb_stat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_can_tx_path_id_cmbb_stat(&has_bits);
          can_tx_path_id_cmbb_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_path_id_cmbb_move = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_can_tx_path_id_cmbb_move(&has_bits);
          can_tx_path_id_cmbb_move_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_path_id_acc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_can_tx_path_id_acc(&has_bits);
          can_tx_path_id_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status4_4e3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status4_4e3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_can_tx_truck_target_det(), target);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_can_tx_lr_only_grating_lobe_det(), target);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_can_tx_sidelobe_blockage(), target);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_can_tx_partial_blockage(), target);
  }

  // optional int32 can_tx_path_id_acc_stat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_tx_path_id_acc_stat(), target);
  }

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_can_tx_mr_lr_mode(), target);
  }

  // optional double can_tx_auto_align_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_can_tx_auto_align_angle(), target);
  }

  // optional int32 can_tx_rolling_count_3 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_can_tx_rolling_count_3(), target);
  }

  // optional int32 can_tx_path_id_fcw_stat = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_can_tx_path_id_fcw_stat(), target);
  }

  // optional int32 can_tx_path_id_fcw_move = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_can_tx_path_id_fcw_move(), target);
  }

  // optional int32 can_tx_path_id_cmbb_stat = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_can_tx_path_id_cmbb_stat(), target);
  }

  // optional int32 can_tx_path_id_cmbb_move = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_can_tx_path_id_cmbb_move(), target);
  }

  // optional int32 can_tx_path_id_acc = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_can_tx_path_id_acc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status4_4e3)
  return target;
}

size_t Esr_status4_4e3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status4_4e3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_truck_target_det());
    }

    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_lr_only_grating_lobe_det());
    }

    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_sidelobe_blockage());
    }

    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_partial_blockage());
    }

    // optional int32 can_tx_path_id_acc_stat = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_path_id_acc_stat());
    }

    // optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_mr_lr_mode());
    }

    // optional double can_tx_auto_align_angle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_rolling_count_3 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_rolling_count_3());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 can_tx_path_id_fcw_stat = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_path_id_fcw_stat());
    }

    // optional int32 can_tx_path_id_fcw_move = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_path_id_fcw_move());
    }

    // optional int32 can_tx_path_id_cmbb_stat = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_path_id_cmbb_stat());
    }

    // optional int32 can_tx_path_id_cmbb_move = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_path_id_cmbb_move());
    }

    // optional int32 can_tx_path_id_acc = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_path_id_acc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status4_4e3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status4_4e3)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status4_4e3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status4_4e3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status4_4e3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status4_4e3)
    MergeFrom(*source);
  }
}

void Esr_status4_4e3::MergeFrom(const Esr_status4_4e3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status4_4e3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_truck_target_det_ = from.can_tx_truck_target_det_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_lr_only_grating_lobe_det_ = from.can_tx_lr_only_grating_lobe_det_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_sidelobe_blockage_ = from.can_tx_sidelobe_blockage_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_partial_blockage_ = from.can_tx_partial_blockage_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_path_id_acc_stat_ = from.can_tx_path_id_acc_stat_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_mr_lr_mode_ = from.can_tx_mr_lr_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_auto_align_angle_ = from.can_tx_auto_align_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_rolling_count_3_ = from.can_tx_rolling_count_3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      can_tx_path_id_fcw_stat_ = from.can_tx_path_id_fcw_stat_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_tx_path_id_fcw_move_ = from.can_tx_path_id_fcw_move_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_tx_path_id_cmbb_stat_ = from.can_tx_path_id_cmbb_stat_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_tx_path_id_cmbb_move_ = from.can_tx_path_id_cmbb_move_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_tx_path_id_acc_ = from.can_tx_path_id_acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status4_4e3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status4_4e3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status4_4e3::CopyFrom(const Esr_status4_4e3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status4_4e3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status4_4e3::IsInitialized() const {
  return true;
}

void Esr_status4_4e3::InternalSwap(Esr_status4_4e3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_truck_target_det_, other->can_tx_truck_target_det_);
  swap(can_tx_lr_only_grating_lobe_det_, other->can_tx_lr_only_grating_lobe_det_);
  swap(can_tx_sidelobe_blockage_, other->can_tx_sidelobe_blockage_);
  swap(can_tx_partial_blockage_, other->can_tx_partial_blockage_);
  swap(can_tx_path_id_acc_stat_, other->can_tx_path_id_acc_stat_);
  swap(can_tx_mr_lr_mode_, other->can_tx_mr_lr_mode_);
  swap(can_tx_auto_align_angle_, other->can_tx_auto_align_angle_);
  swap(can_tx_rolling_count_3_, other->can_tx_rolling_count_3_);
  swap(can_tx_path_id_fcw_stat_, other->can_tx_path_id_fcw_stat_);
  swap(can_tx_path_id_fcw_move_, other->can_tx_path_id_fcw_move_);
  swap(can_tx_path_id_cmbb_stat_, other->can_tx_path_id_cmbb_stat_);
  swap(can_tx_path_id_cmbb_move_, other->can_tx_path_id_cmbb_move_);
  swap(can_tx_path_id_acc_, other->can_tx_path_id_acc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status4_4e3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_trackmotionpower_540_Motionpower::InitAsDefaultInstance() {
}
class Esr_trackmotionpower_540_Motionpower::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_trackmotionpower_540_Motionpower>()._has_bits_);
  static void set_has_can_tx_track_moving(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_track_moving_fast(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_track_moving_slow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_track_power(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Esr_trackmotionpower_540_Motionpower::Esr_trackmotionpower_540_Motionpower()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
}
Esr_trackmotionpower_540_Motionpower::Esr_trackmotionpower_540_Motionpower(const Esr_trackmotionpower_540_Motionpower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_track_moving_, &from.can_tx_track_moving_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_track_power_) -
    reinterpret_cast<char*>(&can_tx_track_moving_)) + sizeof(can_tx_track_power_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
}

void Esr_trackmotionpower_540_Motionpower::SharedCtor() {
  ::memset(&can_tx_track_moving_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_track_power_) -
      reinterpret_cast<char*>(&can_tx_track_moving_)) + sizeof(can_tx_track_power_));
}

Esr_trackmotionpower_540_Motionpower::~Esr_trackmotionpower_540_Motionpower() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  SharedDtor();
}

void Esr_trackmotionpower_540_Motionpower::SharedDtor() {
}

void Esr_trackmotionpower_540_Motionpower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_trackmotionpower_540_Motionpower& Esr_trackmotionpower_540_Motionpower::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_trackmotionpower_540_Motionpower_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_trackmotionpower_540_Motionpower::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&can_tx_track_moving_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_track_power_) -
        reinterpret_cast<char*>(&can_tx_track_moving_)) + sizeof(can_tx_track_power_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_trackmotionpower_540_Motionpower::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool can_tx_track_moving = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_track_moving(&has_bits);
          can_tx_track_moving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_tx_track_moving_fast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_tx_track_moving_fast(&has_bits);
          can_tx_track_moving_fast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_tx_track_moving_slow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_tx_track_moving_slow(&has_bits);
          can_tx_track_moving_slow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_track_power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_track_power(&has_bits);
          can_tx_track_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_trackmotionpower_540_Motionpower::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_tx_track_moving = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_tx_track_moving(), target);
  }

  // optional bool can_tx_track_moving_fast = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_tx_track_moving_fast(), target);
  }

  // optional bool can_tx_track_moving_slow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_can_tx_track_moving_slow(), target);
  }

  // optional int32 can_tx_track_power = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_track_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  return target;
}

size_t Esr_trackmotionpower_540_Motionpower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool can_tx_track_moving = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool can_tx_track_moving_fast = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool can_tx_track_moving_slow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 can_tx_track_power = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_track_power());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_trackmotionpower_540_Motionpower::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_trackmotionpower_540_Motionpower* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_trackmotionpower_540_Motionpower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
    MergeFrom(*source);
  }
}

void Esr_trackmotionpower_540_Motionpower::MergeFrom(const Esr_trackmotionpower_540_Motionpower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_track_moving_ = from.can_tx_track_moving_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_track_moving_fast_ = from.can_tx_track_moving_fast_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_track_moving_slow_ = from.can_tx_track_moving_slow_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_track_power_ = from.can_tx_track_power_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_trackmotionpower_540_Motionpower::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_trackmotionpower_540_Motionpower::CopyFrom(const Esr_trackmotionpower_540_Motionpower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_trackmotionpower_540_Motionpower::IsInitialized() const {
  return true;
}

void Esr_trackmotionpower_540_Motionpower::InternalSwap(Esr_trackmotionpower_540_Motionpower* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_track_moving_, other->can_tx_track_moving_);
  swap(can_tx_track_moving_fast_, other->can_tx_track_moving_fast_);
  swap(can_tx_track_moving_slow_, other->can_tx_track_moving_slow_);
  swap(can_tx_track_power_, other->can_tx_track_power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_trackmotionpower_540_Motionpower::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_trackmotionpower_540::InitAsDefaultInstance() {
}
class Esr_trackmotionpower_540::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_trackmotionpower_540>()._has_bits_);
  static void set_has_can_tx_track_rolling_count_2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_track_can_id_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Esr_trackmotionpower_540::Esr_trackmotionpower_540()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_trackmotionpower_540)
}
Esr_trackmotionpower_540::Esr_trackmotionpower_540(const Esr_trackmotionpower_540& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      can_tx_track_motion_power_(from.can_tx_track_motion_power_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_track_rolling_count_2_, &from.can_tx_track_rolling_count_2_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_track_can_id_group_) -
    reinterpret_cast<char*>(&can_tx_track_rolling_count_2_)) + sizeof(can_tx_track_can_id_group_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_trackmotionpower_540)
}

void Esr_trackmotionpower_540::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Esr_trackmotionpower_540_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  ::memset(&can_tx_track_rolling_count_2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_track_can_id_group_) -
      reinterpret_cast<char*>(&can_tx_track_rolling_count_2_)) + sizeof(can_tx_track_can_id_group_));
}

Esr_trackmotionpower_540::~Esr_trackmotionpower_540() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_trackmotionpower_540)
  SharedDtor();
}

void Esr_trackmotionpower_540::SharedDtor() {
}

void Esr_trackmotionpower_540::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_trackmotionpower_540& Esr_trackmotionpower_540::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_trackmotionpower_540_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_trackmotionpower_540::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_trackmotionpower_540)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_tx_track_motion_power_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&can_tx_track_rolling_count_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_track_can_id_group_) -
        reinterpret_cast<char*>(&can_tx_track_rolling_count_2_)) + sizeof(can_tx_track_can_id_group_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_trackmotionpower_540::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool can_tx_track_rolling_count_2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_track_rolling_count_2(&has_bits);
          can_tx_track_rolling_count_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_track_can_id_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_tx_track_can_id_group(&has_bits);
          can_tx_track_can_id_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_can_tx_track_motion_power(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_trackmotionpower_540::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_trackmotionpower_540)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_tx_track_rolling_count_2 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_tx_track_rolling_count_2(), target);
  }

  // optional int32 can_tx_track_can_id_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_can_tx_track_can_id_group(), target);
  }

  // repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_can_tx_track_motion_power_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_can_tx_track_motion_power(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_trackmotionpower_540)
  return target;
}

size_t Esr_trackmotionpower_540::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_trackmotionpower_540)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
  total_size += 1UL * this->_internal_can_tx_track_motion_power_size();
  for (const auto& msg : this->can_tx_track_motion_power_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool can_tx_track_rolling_count_2 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 can_tx_track_can_id_group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_track_can_id_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_trackmotionpower_540::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_trackmotionpower_540)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_trackmotionpower_540* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_trackmotionpower_540>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_trackmotionpower_540)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_trackmotionpower_540)
    MergeFrom(*source);
  }
}

void Esr_trackmotionpower_540::MergeFrom(const Esr_trackmotionpower_540& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_trackmotionpower_540)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  can_tx_track_motion_power_.MergeFrom(from.can_tx_track_motion_power_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_track_rolling_count_2_ = from.can_tx_track_rolling_count_2_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_track_can_id_group_ = from.can_tx_track_can_id_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_trackmotionpower_540::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_trackmotionpower_540)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_trackmotionpower_540::CopyFrom(const Esr_trackmotionpower_540& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_trackmotionpower_540)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_trackmotionpower_540::IsInitialized() const {
  return true;
}

void Esr_trackmotionpower_540::InternalSwap(Esr_trackmotionpower_540* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  can_tx_track_motion_power_.InternalSwap(&other->can_tx_track_motion_power_);
  swap(can_tx_track_rolling_count_2_, other->can_tx_track_rolling_count_2_);
  swap(can_tx_track_can_id_group_, other->can_tx_track_can_id_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_trackmotionpower_540::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acm_inst_req_7e0::InitAsDefaultInstance() {
}
class Acm_inst_req_7e0::_Internal {
 public:
  using HasBits = decltype(std::declval<Acm_inst_req_7e0>()._has_bits_);
  static void set_has_command_ctr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cc_word_2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cc_word_1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cc_byte_2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cc_byte_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Acm_inst_req_7e0::Acm_inst_req_7e0()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Acm_inst_req_7e0)
}
Acm_inst_req_7e0::Acm_inst_req_7e0(const Acm_inst_req_7e0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_ctr_, &from.command_ctr_,
    static_cast<size_t>(reinterpret_cast<char*>(&cc_byte_1_) -
    reinterpret_cast<char*>(&command_ctr_)) + sizeof(cc_byte_1_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Acm_inst_req_7e0)
}

void Acm_inst_req_7e0::SharedCtor() {
  ::memset(&command_ctr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cc_byte_1_) -
      reinterpret_cast<char*>(&command_ctr_)) + sizeof(cc_byte_1_));
}

Acm_inst_req_7e0::~Acm_inst_req_7e0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Acm_inst_req_7e0)
  SharedDtor();
}

void Acm_inst_req_7e0::SharedDtor() {
}

void Acm_inst_req_7e0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acm_inst_req_7e0& Acm_inst_req_7e0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acm_inst_req_7e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Acm_inst_req_7e0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Acm_inst_req_7e0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&command_ctr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cc_byte_1_) -
        reinterpret_cast<char*>(&command_ctr_)) + sizeof(cc_byte_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Acm_inst_req_7e0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 command_ctr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_command_ctr(&has_bits);
          command_ctr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 command_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_command_code(&has_bits);
          command_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cc_word_2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cc_word_2(&has_bits);
          cc_word_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cc_word_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cc_word_1(&has_bits);
          cc_word_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cc_byte_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cc_byte_2(&has_bits);
          cc_byte_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cc_byte_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cc_byte_1(&has_bits);
          cc_byte_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Acm_inst_req_7e0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Acm_inst_req_7e0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 command_ctr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_command_ctr(), target);
  }

  // optional int32 command_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_command_code(), target);
  }

  // optional int32 cc_word_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cc_word_2(), target);
  }

  // optional int32 cc_word_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cc_word_1(), target);
  }

  // optional int32 cc_byte_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cc_byte_2(), target);
  }

  // optional int32 cc_byte_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_cc_byte_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Acm_inst_req_7e0)
  return target;
}

size_t Acm_inst_req_7e0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Acm_inst_req_7e0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 command_ctr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_command_ctr());
    }

    // optional int32 command_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_command_code());
    }

    // optional int32 cc_word_2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cc_word_2());
    }

    // optional int32 cc_word_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cc_word_1());
    }

    // optional int32 cc_byte_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cc_byte_2());
    }

    // optional int32 cc_byte_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cc_byte_1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acm_inst_req_7e0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Acm_inst_req_7e0)
  GOOGLE_DCHECK_NE(&from, this);
  const Acm_inst_req_7e0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acm_inst_req_7e0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Acm_inst_req_7e0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Acm_inst_req_7e0)
    MergeFrom(*source);
  }
}

void Acm_inst_req_7e0::MergeFrom(const Acm_inst_req_7e0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Acm_inst_req_7e0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      command_ctr_ = from.command_ctr_;
    }
    if (cached_has_bits & 0x00000002u) {
      command_code_ = from.command_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      cc_word_2_ = from.cc_word_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      cc_word_1_ = from.cc_word_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      cc_byte_2_ = from.cc_byte_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      cc_byte_1_ = from.cc_byte_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Acm_inst_req_7e0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Acm_inst_req_7e0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acm_inst_req_7e0::CopyFrom(const Acm_inst_req_7e0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Acm_inst_req_7e0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acm_inst_req_7e0::IsInitialized() const {
  return true;
}

void Acm_inst_req_7e0::InternalSwap(Acm_inst_req_7e0* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(command_ctr_, other->command_ctr_);
  swap(command_code_, other->command_code_);
  swap(cc_word_2_, other->cc_word_2_);
  swap(cc_word_1_, other->cc_word_1_);
  swap(cc_byte_2_, other->cc_byte_2_);
  swap(cc_byte_1_, other->cc_byte_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acm_inst_req_7e0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_track01_500::InitAsDefaultInstance() {
}
class Esr_track01_500::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_track01_500>()._has_bits_);
  static void set_has_can_tx_track_grouping_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_track_oncoming(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_track_lat_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_track_bridge_object(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_track_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_track_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_track_rolling_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_tx_track_range_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_tx_track_range_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_tx_track_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_can_tx_track_med_range_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_tx_track_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

Esr_track01_500::Esr_track01_500()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_track01_500)
}
Esr_track01_500::Esr_track01_500(const Esr_track01_500& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_track_grouping_changed_, &from.can_tx_track_grouping_changed_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_track_angle_) -
    reinterpret_cast<char*>(&can_tx_track_grouping_changed_)) + sizeof(can_tx_track_angle_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_track01_500)
}

void Esr_track01_500::SharedCtor() {
  ::memset(&can_tx_track_grouping_changed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_track_angle_) -
      reinterpret_cast<char*>(&can_tx_track_grouping_changed_)) + sizeof(can_tx_track_angle_));
}

Esr_track01_500::~Esr_track01_500() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_track01_500)
  SharedDtor();
}

void Esr_track01_500::SharedDtor() {
}

void Esr_track01_500::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_track01_500& Esr_track01_500::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_track01_500_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_track01_500::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_track01_500)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_tx_track_grouping_changed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_track_range_accel_) -
        reinterpret_cast<char*>(&can_tx_track_grouping_changed_)) + sizeof(can_tx_track_range_accel_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&can_tx_track_rolling_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_track_angle_) -
        reinterpret_cast<char*>(&can_tx_track_rolling_count_)) + sizeof(can_tx_track_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_track01_500::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType_IsValid(val))) {
            _internal_set_can_tx_track_grouping_changed(static_cast<::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType_IsValid(val))) {
            _internal_set_can_tx_track_oncoming(static_cast<::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_tx_track_lat_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_tx_track_lat_rate(&has_bits);
          can_tx_track_lat_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType_IsValid(val))) {
            _internal_set_can_tx_track_bridge_object(static_cast<::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_tx_track_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_can_tx_track_width(&has_bits);
          can_tx_track_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_track01_500_Can_tx_track_statusType_IsValid(val))) {
            _internal_set_can_tx_track_status(static_cast<::apollo::drivers::Esr_track01_500_Can_tx_track_statusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool can_tx_track_rolling_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_tx_track_rolling_count(&has_bits);
          can_tx_track_rolling_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_track_range_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_can_tx_track_range_rate(&has_bits);
          can_tx_track_range_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_track_range_accel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_can_tx_track_range_accel(&has_bits);
          can_tx_track_range_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_track_range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_can_tx_track_range(&has_bits);
          can_tx_track_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType_IsValid(val))) {
            _internal_set_can_tx_track_med_range_mode(static_cast<::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_tx_track_angle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_can_tx_track_angle(&has_bits);
          can_tx_track_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_track01_500::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_track01_500)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_can_tx_track_grouping_changed(), target);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_can_tx_track_oncoming(), target);
  }

  // optional double can_tx_track_lat_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_tx_track_lat_rate(), target);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_can_tx_track_bridge_object(), target);
  }

  // optional double can_tx_track_width = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_can_tx_track_width(), target);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_can_tx_track_status(), target);
  }

  // optional bool can_tx_track_rolling_count = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_can_tx_track_rolling_count(), target);
  }

  // optional double can_tx_track_range_rate = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_can_tx_track_range_rate(), target);
  }

  // optional double can_tx_track_range_accel = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_can_tx_track_range_accel(), target);
  }

  // optional double can_tx_track_range = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_can_tx_track_range(), target);
  }

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_can_tx_track_med_range_mode(), target);
  }

  // optional double can_tx_track_angle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_can_tx_track_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_track01_500)
  return target;
}

size_t Esr_track01_500::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_track01_500)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_track_grouping_changed());
    }

    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_track_oncoming());
    }

    // optional double can_tx_track_lat_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double can_tx_track_width = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_track_bridge_object());
    }

    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_track_status());
    }

    // optional double can_tx_track_range_rate = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double can_tx_track_range_accel = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool can_tx_track_rolling_count = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_track_med_range_mode());
    }

    // optional double can_tx_track_range = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double can_tx_track_angle = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_track01_500::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_track01_500)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_track01_500* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_track01_500>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_track01_500)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_track01_500)
    MergeFrom(*source);
  }
}

void Esr_track01_500::MergeFrom(const Esr_track01_500& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_track01_500)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_track_grouping_changed_ = from.can_tx_track_grouping_changed_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_track_oncoming_ = from.can_tx_track_oncoming_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_track_lat_rate_ = from.can_tx_track_lat_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_track_width_ = from.can_tx_track_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_track_bridge_object_ = from.can_tx_track_bridge_object_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_track_status_ = from.can_tx_track_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_track_range_rate_ = from.can_tx_track_range_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_track_range_accel_ = from.can_tx_track_range_accel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      can_tx_track_rolling_count_ = from.can_tx_track_rolling_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_tx_track_med_range_mode_ = from.can_tx_track_med_range_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_tx_track_range_ = from.can_tx_track_range_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_tx_track_angle_ = from.can_tx_track_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_track01_500::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_track01_500)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_track01_500::CopyFrom(const Esr_track01_500& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_track01_500)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_track01_500::IsInitialized() const {
  return true;
}

void Esr_track01_500::InternalSwap(Esr_track01_500* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_track_grouping_changed_, other->can_tx_track_grouping_changed_);
  swap(can_tx_track_oncoming_, other->can_tx_track_oncoming_);
  swap(can_tx_track_lat_rate_, other->can_tx_track_lat_rate_);
  swap(can_tx_track_width_, other->can_tx_track_width_);
  swap(can_tx_track_bridge_object_, other->can_tx_track_bridge_object_);
  swap(can_tx_track_status_, other->can_tx_track_status_);
  swap(can_tx_track_range_rate_, other->can_tx_track_range_rate_);
  swap(can_tx_track_range_accel_, other->can_tx_track_range_accel_);
  swap(can_tx_track_rolling_count_, other->can_tx_track_rolling_count_);
  swap(can_tx_track_med_range_mode_, other->can_tx_track_med_range_mode_);
  swap(can_tx_track_range_, other->can_tx_track_range_);
  swap(can_tx_track_angle_, other->can_tx_track_angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_track01_500::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_valid1_5d0::InitAsDefaultInstance() {
}
class Esr_valid1_5d0::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_valid1_5d0>()._has_bits_);
  static void set_has_can_tx_valid_lr_sn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_valid_lr_range_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_valid_lr_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_valid_lr_power(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_valid_lr_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Esr_valid1_5d0::Esr_valid1_5d0()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_valid1_5d0)
}
Esr_valid1_5d0::Esr_valid1_5d0(const Esr_valid1_5d0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_valid_lr_range_rate_, &from.can_tx_valid_lr_range_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_valid_lr_angle_) -
    reinterpret_cast<char*>(&can_tx_valid_lr_range_rate_)) + sizeof(can_tx_valid_lr_angle_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_valid1_5d0)
}

void Esr_valid1_5d0::SharedCtor() {
  ::memset(&can_tx_valid_lr_range_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_valid_lr_angle_) -
      reinterpret_cast<char*>(&can_tx_valid_lr_range_rate_)) + sizeof(can_tx_valid_lr_angle_));
}

Esr_valid1_5d0::~Esr_valid1_5d0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_valid1_5d0)
  SharedDtor();
}

void Esr_valid1_5d0::SharedDtor() {
}

void Esr_valid1_5d0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_valid1_5d0& Esr_valid1_5d0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_valid1_5d0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_valid1_5d0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_valid1_5d0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&can_tx_valid_lr_range_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_valid_lr_angle_) -
        reinterpret_cast<char*>(&can_tx_valid_lr_range_rate_)) + sizeof(can_tx_valid_lr_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_valid1_5d0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_tx_valid_lr_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_valid_lr_sn(&has_bits);
          can_tx_valid_lr_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_valid_lr_range_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_can_tx_valid_lr_range_rate(&has_bits);
          can_tx_valid_lr_range_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_valid_lr_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_tx_valid_lr_range(&has_bits);
          can_tx_valid_lr_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_valid_lr_power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_valid_lr_power(&has_bits);
          can_tx_valid_lr_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_valid_lr_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_can_tx_valid_lr_angle(&has_bits);
          can_tx_valid_lr_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_valid1_5d0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_valid1_5d0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_valid_lr_sn = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_tx_valid_lr_sn(), target);
  }

  // optional double can_tx_valid_lr_range_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_can_tx_valid_lr_range_rate(), target);
  }

  // optional double can_tx_valid_lr_range = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_tx_valid_lr_range(), target);
  }

  // optional int32 can_tx_valid_lr_power = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_valid_lr_power(), target);
  }

  // optional double can_tx_valid_lr_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_can_tx_valid_lr_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_valid1_5d0)
  return target;
}

size_t Esr_valid1_5d0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_valid1_5d0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double can_tx_valid_lr_range_rate = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_valid_lr_sn = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_valid_lr_sn());
    }

    // optional int32 can_tx_valid_lr_power = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_valid_lr_power());
    }

    // optional double can_tx_valid_lr_range = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double can_tx_valid_lr_angle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_valid1_5d0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_valid1_5d0)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_valid1_5d0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_valid1_5d0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_valid1_5d0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_valid1_5d0)
    MergeFrom(*source);
  }
}

void Esr_valid1_5d0::MergeFrom(const Esr_valid1_5d0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_valid1_5d0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_valid_lr_range_rate_ = from.can_tx_valid_lr_range_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_valid_lr_sn_ = from.can_tx_valid_lr_sn_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_valid_lr_power_ = from.can_tx_valid_lr_power_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_valid_lr_range_ = from.can_tx_valid_lr_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_valid_lr_angle_ = from.can_tx_valid_lr_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_valid1_5d0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_valid1_5d0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_valid1_5d0::CopyFrom(const Esr_valid1_5d0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_valid1_5d0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_valid1_5d0::IsInitialized() const {
  return true;
}

void Esr_valid1_5d0::InternalSwap(Esr_valid1_5d0* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_valid_lr_range_rate_, other->can_tx_valid_lr_range_rate_);
  swap(can_tx_valid_lr_sn_, other->can_tx_valid_lr_sn_);
  swap(can_tx_valid_lr_power_, other->can_tx_valid_lr_power_);
  swap(can_tx_valid_lr_range_, other->can_tx_valid_lr_range_);
  swap(can_tx_valid_lr_angle_, other->can_tx_valid_lr_angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_valid1_5d0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_valid2_5d1::InitAsDefaultInstance() {
}
class Esr_valid2_5d1::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_valid2_5d1>()._has_bits_);
  static void set_has_can_tx_valid_mr_sn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_valid_mr_range_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_valid_mr_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_valid_mr_power(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_valid_mr_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Esr_valid2_5d1::Esr_valid2_5d1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_valid2_5d1)
}
Esr_valid2_5d1::Esr_valid2_5d1(const Esr_valid2_5d1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_valid_mr_range_rate_, &from.can_tx_valid_mr_range_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_valid_mr_angle_) -
    reinterpret_cast<char*>(&can_tx_valid_mr_range_rate_)) + sizeof(can_tx_valid_mr_angle_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_valid2_5d1)
}

void Esr_valid2_5d1::SharedCtor() {
  ::memset(&can_tx_valid_mr_range_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_valid_mr_angle_) -
      reinterpret_cast<char*>(&can_tx_valid_mr_range_rate_)) + sizeof(can_tx_valid_mr_angle_));
}

Esr_valid2_5d1::~Esr_valid2_5d1() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_valid2_5d1)
  SharedDtor();
}

void Esr_valid2_5d1::SharedDtor() {
}

void Esr_valid2_5d1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_valid2_5d1& Esr_valid2_5d1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_valid2_5d1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_valid2_5d1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_valid2_5d1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&can_tx_valid_mr_range_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_valid_mr_angle_) -
        reinterpret_cast<char*>(&can_tx_valid_mr_range_rate_)) + sizeof(can_tx_valid_mr_angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_valid2_5d1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_tx_valid_mr_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_valid_mr_sn(&has_bits);
          can_tx_valid_mr_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_valid_mr_range_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_can_tx_valid_mr_range_rate(&has_bits);
          can_tx_valid_mr_range_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_valid_mr_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_tx_valid_mr_range(&has_bits);
          can_tx_valid_mr_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_valid_mr_power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_valid_mr_power(&has_bits);
          can_tx_valid_mr_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_valid_mr_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_can_tx_valid_mr_angle(&has_bits);
          can_tx_valid_mr_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_valid2_5d1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_valid2_5d1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_valid_mr_sn = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_tx_valid_mr_sn(), target);
  }

  // optional double can_tx_valid_mr_range_rate = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_can_tx_valid_mr_range_rate(), target);
  }

  // optional double can_tx_valid_mr_range = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_tx_valid_mr_range(), target);
  }

  // optional int32 can_tx_valid_mr_power = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_valid_mr_power(), target);
  }

  // optional double can_tx_valid_mr_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_can_tx_valid_mr_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_valid2_5d1)
  return target;
}

size_t Esr_valid2_5d1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_valid2_5d1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double can_tx_valid_mr_range_rate = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_valid_mr_sn = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_valid_mr_sn());
    }

    // optional int32 can_tx_valid_mr_power = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_valid_mr_power());
    }

    // optional double can_tx_valid_mr_range = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double can_tx_valid_mr_angle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_valid2_5d1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_valid2_5d1)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_valid2_5d1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_valid2_5d1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_valid2_5d1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_valid2_5d1)
    MergeFrom(*source);
  }
}

void Esr_valid2_5d1::MergeFrom(const Esr_valid2_5d1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_valid2_5d1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_valid_mr_range_rate_ = from.can_tx_valid_mr_range_rate_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_valid_mr_sn_ = from.can_tx_valid_mr_sn_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_valid_mr_power_ = from.can_tx_valid_mr_power_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_valid_mr_range_ = from.can_tx_valid_mr_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_valid_mr_angle_ = from.can_tx_valid_mr_angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_valid2_5d1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_valid2_5d1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_valid2_5d1::CopyFrom(const Esr_valid2_5d1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_valid2_5d1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_valid2_5d1::IsInitialized() const {
  return true;
}

void Esr_valid2_5d1::InternalSwap(Esr_valid2_5d1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_valid_mr_range_rate_, other->can_tx_valid_mr_range_rate_);
  swap(can_tx_valid_mr_sn_, other->can_tx_valid_mr_sn_);
  swap(can_tx_valid_mr_power_, other->can_tx_valid_mr_power_);
  swap(can_tx_valid_mr_range_, other->can_tx_valid_mr_range_);
  swap(can_tx_valid_mr_angle_, other->can_tx_valid_mr_angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_valid2_5d1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acm_inst_resp_7e4::InitAsDefaultInstance() {
}
class Acm_inst_resp_7e4::_Internal {
 public:
  using HasBits = decltype(std::declval<Acm_inst_resp_7e4>()._has_bits_);
  static void set_has_data_7(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_6(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_5(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rtn_cmd_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command_return_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Acm_inst_resp_7e4::Acm_inst_resp_7e4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Acm_inst_resp_7e4)
}
Acm_inst_resp_7e4::Acm_inst_resp_7e4(const Acm_inst_resp_7e4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_7_, &from.data_7_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&data_7_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Acm_inst_resp_7e4)
}

void Acm_inst_resp_7e4::SharedCtor() {
  ::memset(&data_7_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&data_7_)) + sizeof(pid_));
}

Acm_inst_resp_7e4::~Acm_inst_resp_7e4() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Acm_inst_resp_7e4)
  SharedDtor();
}

void Acm_inst_resp_7e4::SharedDtor() {
}

void Acm_inst_resp_7e4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acm_inst_resp_7e4& Acm_inst_resp_7e4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acm_inst_resp_7e4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Acm_inst_resp_7e4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Acm_inst_resp_7e4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&data_7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pid_) -
        reinterpret_cast<char*>(&data_7_)) + sizeof(pid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Acm_inst_resp_7e4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 data_7 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_7(&has_bits);
          data_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data_6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data_6(&has_bits);
          data_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data_5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_data_5(&has_bits);
          data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_data_4(&has_bits);
          data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_data_3(&has_bits);
          data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rtn_cmd_counter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rtn_cmd_counter(&has_bits);
          rtn_cmd_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 command_return_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_command_return_code(&has_bits);
          command_return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Acm_inst_resp_7e4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Acm_inst_resp_7e4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 data_7 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_data_7(), target);
  }

  // optional int32 data_6 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_6(), target);
  }

  // optional int32 data_5 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_data_5(), target);
  }

  // optional int32 data_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_data_4(), target);
  }

  // optional int32 data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_data_3(), target);
  }

  // optional int32 rtn_cmd_counter = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rtn_cmd_counter(), target);
  }

  // optional int32 command_return_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_command_return_code(), target);
  }

  // optional int32 pid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Acm_inst_resp_7e4)
  return target;
}

size_t Acm_inst_resp_7e4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Acm_inst_resp_7e4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 data_7 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data_7());
    }

    // optional int32 data_6 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data_6());
    }

    // optional int32 data_5 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data_5());
    }

    // optional int32 data_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data_4());
    }

    // optional int32 data_3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data_3());
    }

    // optional int32 rtn_cmd_counter = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rtn_cmd_counter());
    }

    // optional int32 command_return_code = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_command_return_code());
    }

    // optional int32 pid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acm_inst_resp_7e4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Acm_inst_resp_7e4)
  GOOGLE_DCHECK_NE(&from, this);
  const Acm_inst_resp_7e4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acm_inst_resp_7e4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Acm_inst_resp_7e4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Acm_inst_resp_7e4)
    MergeFrom(*source);
  }
}

void Acm_inst_resp_7e4::MergeFrom(const Acm_inst_resp_7e4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Acm_inst_resp_7e4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      data_7_ = from.data_7_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_6_ = from.data_6_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_5_ = from.data_5_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_4_ = from.data_4_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_3_ = from.data_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtn_cmd_counter_ = from.rtn_cmd_counter_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_return_code_ = from.command_return_code_;
    }
    if (cached_has_bits & 0x00000080u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Acm_inst_resp_7e4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Acm_inst_resp_7e4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acm_inst_resp_7e4::CopyFrom(const Acm_inst_resp_7e4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Acm_inst_resp_7e4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acm_inst_resp_7e4::IsInitialized() const {
  return true;
}

void Acm_inst_resp_7e4::InternalSwap(Acm_inst_resp_7e4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_7_, other->data_7_);
  swap(data_6_, other->data_6_);
  swap(data_5_, other->data_5_);
  swap(data_4_, other->data_4_);
  swap(data_3_, other->data_3_);
  swap(rtn_cmd_counter_, other->rtn_cmd_counter_);
  swap(command_return_code_, other->command_return_code_);
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acm_inst_resp_7e4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle2_4f1::InitAsDefaultInstance() {
}
class Vehicle2_4f1::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle2_4f1>()._has_bits_);
  static void set_has_can_rx_volvo_short_track_roc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_rx_mr_only_transmit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_rx_lr_only_transmit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_rx_high_yaw_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_rx_clear_faults(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_rx_use_angle_misalignment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_rx_turn_signal_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_rx_blockage_disable(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_rx_vehicle_speed_validity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_rx_mmr_upside_down(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_rx_wiper_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_can_rx_raw_data_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_rx_radar_cmd_radiate(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_can_rx_grouping_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_can_rx_maximum_tracks(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_can_rx_lateral_mounting_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_can_rx_angle_misalignment(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_can_rx_scan_index_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

Vehicle2_4f1::Vehicle2_4f1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Vehicle2_4f1)
}
Vehicle2_4f1::Vehicle2_4f1(const Vehicle2_4f1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_volvo_short_track_roc_, &from.can_rx_volvo_short_track_roc_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_rx_scan_index_ack_) -
    reinterpret_cast<char*>(&can_rx_volvo_short_track_roc_)) + sizeof(can_rx_scan_index_ack_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Vehicle2_4f1)
}

void Vehicle2_4f1::SharedCtor() {
  ::memset(&can_rx_volvo_short_track_roc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_rx_scan_index_ack_) -
      reinterpret_cast<char*>(&can_rx_volvo_short_track_roc_)) + sizeof(can_rx_scan_index_ack_));
}

Vehicle2_4f1::~Vehicle2_4f1() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Vehicle2_4f1)
  SharedDtor();
}

void Vehicle2_4f1::SharedDtor() {
}

void Vehicle2_4f1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle2_4f1& Vehicle2_4f1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle2_4f1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Vehicle2_4f1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Vehicle2_4f1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_rx_volvo_short_track_roc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_blockage_disable_) -
        reinterpret_cast<char*>(&can_rx_volvo_short_track_roc_)) + sizeof(can_rx_blockage_disable_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&can_rx_vehicle_speed_validity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_lateral_mounting_offset_) -
        reinterpret_cast<char*>(&can_rx_vehicle_speed_validity_)) + sizeof(can_rx_lateral_mounting_offset_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&can_rx_angle_misalignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_scan_index_ack_) -
        reinterpret_cast<char*>(&can_rx_angle_misalignment_)) + sizeof(can_rx_scan_index_ack_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle2_4f1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double can_rx_volvo_short_track_roc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_can_rx_volvo_short_track_roc(&has_bits);
          can_rx_volvo_short_track_roc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType_IsValid(val))) {
            _internal_set_can_rx_mr_only_transmit(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType_IsValid(val))) {
            _internal_set_can_rx_lr_only_transmit(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_high_yaw_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_rx_high_yaw_angle(&has_bits);
          can_rx_high_yaw_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType_IsValid(val))) {
            _internal_set_can_rx_clear_faults(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType_IsValid(val))) {
            _internal_set_can_rx_use_angle_misalignment(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType_IsValid(val))) {
            _internal_set_can_rx_turn_signal_status(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType_IsValid(val))) {
            _internal_set_can_rx_blockage_disable(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType_IsValid(val))) {
            _internal_set_can_rx_vehicle_speed_validity(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType_IsValid(val))) {
            _internal_set_can_rx_mmr_upside_down(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType_IsValid(val))) {
            _internal_set_can_rx_wiper_status(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType_IsValid(val))) {
            _internal_set_can_rx_raw_data_enable(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType_IsValid(val))) {
            _internal_set_can_rx_radar_cmd_radiate(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType_IsValid(val))) {
            _internal_set_can_rx_grouping_mode(static_cast<::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_maximum_tracks = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_can_rx_maximum_tracks(&has_bits);
          can_rx_maximum_tracks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_lateral_mounting_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_can_rx_lateral_mounting_offset(&has_bits);
          can_rx_lateral_mounting_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_angle_misalignment = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_can_rx_angle_misalignment(&has_bits);
          can_rx_angle_misalignment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_scan_index_ack = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_can_rx_scan_index_ack(&has_bits);
          can_rx_scan_index_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle2_4f1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Vehicle2_4f1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double can_rx_volvo_short_track_roc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_can_rx_volvo_short_track_roc(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_can_rx_mr_only_transmit(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_can_rx_lr_only_transmit(), target);
  }

  // optional int32 can_rx_high_yaw_angle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_rx_high_yaw_angle(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_can_rx_clear_faults(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_can_rx_use_angle_misalignment(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_can_rx_turn_signal_status(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_can_rx_blockage_disable(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_can_rx_vehicle_speed_validity(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_can_rx_mmr_upside_down(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_can_rx_wiper_status(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_can_rx_raw_data_enable(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_can_rx_radar_cmd_radiate(), target);
  }

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_can_rx_grouping_mode(), target);
  }

  // optional int32 can_rx_maximum_tracks = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_can_rx_maximum_tracks(), target);
  }

  // optional double can_rx_lateral_mounting_offset = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_can_rx_lateral_mounting_offset(), target);
  }

  // optional double can_rx_angle_misalignment = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_can_rx_angle_misalignment(), target);
  }

  // optional int32 can_rx_scan_index_ack = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_can_rx_scan_index_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Vehicle2_4f1)
  return target;
}

size_t Vehicle2_4f1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Vehicle2_4f1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double can_rx_volvo_short_track_roc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_mr_only_transmit());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_lr_only_transmit());
    }

    // optional int32 can_rx_high_yaw_angle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_high_yaw_angle());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_clear_faults());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_use_angle_misalignment());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_turn_signal_status());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_blockage_disable());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_vehicle_speed_validity());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_mmr_upside_down());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_wiper_status());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_raw_data_enable());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_radar_cmd_radiate());
    }

    // optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_grouping_mode());
    }

    // optional int32 can_rx_maximum_tracks = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_maximum_tracks());
    }

    // optional double can_rx_lateral_mounting_offset = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional double can_rx_angle_misalignment = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional int32 can_rx_scan_index_ack = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_scan_index_ack());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle2_4f1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Vehicle2_4f1)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle2_4f1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle2_4f1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Vehicle2_4f1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Vehicle2_4f1)
    MergeFrom(*source);
  }
}

void Vehicle2_4f1::MergeFrom(const Vehicle2_4f1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Vehicle2_4f1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_volvo_short_track_roc_ = from.can_rx_volvo_short_track_roc_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_mr_only_transmit_ = from.can_rx_mr_only_transmit_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_lr_only_transmit_ = from.can_rx_lr_only_transmit_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_high_yaw_angle_ = from.can_rx_high_yaw_angle_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_clear_faults_ = from.can_rx_clear_faults_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_use_angle_misalignment_ = from.can_rx_use_angle_misalignment_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_turn_signal_status_ = from.can_rx_turn_signal_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_blockage_disable_ = from.can_rx_blockage_disable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      can_rx_vehicle_speed_validity_ = from.can_rx_vehicle_speed_validity_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_rx_mmr_upside_down_ = from.can_rx_mmr_upside_down_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_rx_wiper_status_ = from.can_rx_wiper_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_rx_raw_data_enable_ = from.can_rx_raw_data_enable_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_rx_radar_cmd_radiate_ = from.can_rx_radar_cmd_radiate_;
    }
    if (cached_has_bits & 0x00002000u) {
      can_rx_grouping_mode_ = from.can_rx_grouping_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      can_rx_maximum_tracks_ = from.can_rx_maximum_tracks_;
    }
    if (cached_has_bits & 0x00008000u) {
      can_rx_lateral_mounting_offset_ = from.can_rx_lateral_mounting_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      can_rx_angle_misalignment_ = from.can_rx_angle_misalignment_;
    }
    if (cached_has_bits & 0x00020000u) {
      can_rx_scan_index_ack_ = from.can_rx_scan_index_ack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle2_4f1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Vehicle2_4f1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle2_4f1::CopyFrom(const Vehicle2_4f1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Vehicle2_4f1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle2_4f1::IsInitialized() const {
  return true;
}

void Vehicle2_4f1::InternalSwap(Vehicle2_4f1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_rx_volvo_short_track_roc_, other->can_rx_volvo_short_track_roc_);
  swap(can_rx_mr_only_transmit_, other->can_rx_mr_only_transmit_);
  swap(can_rx_lr_only_transmit_, other->can_rx_lr_only_transmit_);
  swap(can_rx_high_yaw_angle_, other->can_rx_high_yaw_angle_);
  swap(can_rx_clear_faults_, other->can_rx_clear_faults_);
  swap(can_rx_use_angle_misalignment_, other->can_rx_use_angle_misalignment_);
  swap(can_rx_turn_signal_status_, other->can_rx_turn_signal_status_);
  swap(can_rx_blockage_disable_, other->can_rx_blockage_disable_);
  swap(can_rx_vehicle_speed_validity_, other->can_rx_vehicle_speed_validity_);
  swap(can_rx_mmr_upside_down_, other->can_rx_mmr_upside_down_);
  swap(can_rx_wiper_status_, other->can_rx_wiper_status_);
  swap(can_rx_raw_data_enable_, other->can_rx_raw_data_enable_);
  swap(can_rx_radar_cmd_radiate_, other->can_rx_radar_cmd_radiate_);
  swap(can_rx_grouping_mode_, other->can_rx_grouping_mode_);
  swap(can_rx_maximum_tracks_, other->can_rx_maximum_tracks_);
  swap(can_rx_lateral_mounting_offset_, other->can_rx_lateral_mounting_offset_);
  swap(can_rx_angle_misalignment_, other->can_rx_angle_misalignment_);
  swap(can_rx_scan_index_ack_, other->can_rx_scan_index_ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle2_4f1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle1_4f0::InitAsDefaultInstance() {
}
class Vehicle1_4f0::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle1_4f0>()._has_bits_);
  static void set_has_can_rx_steering_angle_validity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_rx_steering_angle_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_rx_steering_angle_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_rx_steering_angle_rate_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_rx_steering_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_rx_radius_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_rx_yaw_rate_validity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_rx_yaw_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_rx_vehicle_speed_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_rx_vehicle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Vehicle1_4f0::Vehicle1_4f0()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Vehicle1_4f0)
}
Vehicle1_4f0::Vehicle1_4f0(const Vehicle1_4f0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_steering_angle_validity_, &from.can_rx_steering_angle_validity_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_rx_vehicle_speed_) -
    reinterpret_cast<char*>(&can_rx_steering_angle_validity_)) + sizeof(can_rx_vehicle_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Vehicle1_4f0)
}

void Vehicle1_4f0::SharedCtor() {
  ::memset(&can_rx_steering_angle_validity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_rx_vehicle_speed_) -
      reinterpret_cast<char*>(&can_rx_steering_angle_validity_)) + sizeof(can_rx_vehicle_speed_));
}

Vehicle1_4f0::~Vehicle1_4f0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Vehicle1_4f0)
  SharedDtor();
}

void Vehicle1_4f0::SharedDtor() {
}

void Vehicle1_4f0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle1_4f0& Vehicle1_4f0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle1_4f0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Vehicle1_4f0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Vehicle1_4f0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_rx_steering_angle_validity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_yaw_rate_validity_) -
        reinterpret_cast<char*>(&can_rx_steering_angle_validity_)) + sizeof(can_rx_yaw_rate_validity_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&can_rx_vehicle_speed_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_vehicle_speed_) -
        reinterpret_cast<char*>(&can_rx_vehicle_speed_direction_)) + sizeof(can_rx_vehicle_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle1_4f0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType_IsValid(val))) {
            _internal_set_can_rx_steering_angle_validity(static_cast<::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_steering_angle_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_rx_steering_angle_rate(&has_bits);
          can_rx_steering_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType_IsValid(val))) {
            _internal_set_can_rx_steering_angle_sign(static_cast<::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType_IsValid(val))) {
            _internal_set_can_rx_steering_angle_rate_sign(static_cast<::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_steering_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_rx_steering_angle(&has_bits);
          can_rx_steering_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_radius_curvature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_rx_radius_curvature(&has_bits);
          can_rx_radius_curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType_IsValid(val))) {
            _internal_set_can_rx_yaw_rate_validity(static_cast<::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_yaw_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_can_rx_yaw_rate(&has_bits);
          can_rx_yaw_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType_IsValid(val))) {
            _internal_set_can_rx_vehicle_speed_direction(static_cast<::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_vehicle_speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_can_rx_vehicle_speed(&has_bits);
          can_rx_vehicle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle1_4f0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Vehicle1_4f0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_can_rx_steering_angle_validity(), target);
  }

  // optional int32 can_rx_steering_angle_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_can_rx_steering_angle_rate(), target);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_can_rx_steering_angle_sign(), target);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_can_rx_steering_angle_rate_sign(), target);
  }

  // optional int32 can_rx_steering_angle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_rx_steering_angle(), target);
  }

  // optional int32 can_rx_radius_curvature = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_can_rx_radius_curvature(), target);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_can_rx_yaw_rate_validity(), target);
  }

  // optional double can_rx_yaw_rate = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_can_rx_yaw_rate(), target);
  }

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_can_rx_vehicle_speed_direction(), target);
  }

  // optional double can_rx_vehicle_speed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_can_rx_vehicle_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Vehicle1_4f0)
  return target;
}

size_t Vehicle1_4f0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Vehicle1_4f0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_steering_angle_validity());
    }

    // optional int32 can_rx_steering_angle_rate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_steering_angle_rate());
    }

    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_steering_angle_sign());
    }

    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_steering_angle_rate_sign());
    }

    // optional int32 can_rx_steering_angle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_steering_angle());
    }

    // optional int32 can_rx_radius_curvature = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_radius_curvature());
    }

    // optional double can_rx_yaw_rate = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_yaw_rate_validity());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_vehicle_speed_direction());
    }

    // optional double can_rx_vehicle_speed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle1_4f0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Vehicle1_4f0)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle1_4f0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle1_4f0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Vehicle1_4f0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Vehicle1_4f0)
    MergeFrom(*source);
  }
}

void Vehicle1_4f0::MergeFrom(const Vehicle1_4f0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Vehicle1_4f0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_steering_angle_validity_ = from.can_rx_steering_angle_validity_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_steering_angle_rate_ = from.can_rx_steering_angle_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_steering_angle_sign_ = from.can_rx_steering_angle_sign_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_steering_angle_rate_sign_ = from.can_rx_steering_angle_rate_sign_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_steering_angle_ = from.can_rx_steering_angle_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_radius_curvature_ = from.can_rx_radius_curvature_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_yaw_rate_ = from.can_rx_yaw_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_yaw_rate_validity_ = from.can_rx_yaw_rate_validity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      can_rx_vehicle_speed_direction_ = from.can_rx_vehicle_speed_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_rx_vehicle_speed_ = from.can_rx_vehicle_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle1_4f0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Vehicle1_4f0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle1_4f0::CopyFrom(const Vehicle1_4f0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Vehicle1_4f0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle1_4f0::IsInitialized() const {
  return true;
}

void Vehicle1_4f0::InternalSwap(Vehicle1_4f0* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_rx_steering_angle_validity_, other->can_rx_steering_angle_validity_);
  swap(can_rx_steering_angle_rate_, other->can_rx_steering_angle_rate_);
  swap(can_rx_steering_angle_sign_, other->can_rx_steering_angle_sign_);
  swap(can_rx_steering_angle_rate_sign_, other->can_rx_steering_angle_rate_sign_);
  swap(can_rx_steering_angle_, other->can_rx_steering_angle_);
  swap(can_rx_radius_curvature_, other->can_rx_radius_curvature_);
  swap(can_rx_yaw_rate_, other->can_rx_yaw_rate_);
  swap(can_rx_yaw_rate_validity_, other->can_rx_yaw_rate_validity_);
  swap(can_rx_vehicle_speed_direction_, other->can_rx_vehicle_speed_direction_);
  swap(can_rx_vehicle_speed_, other->can_rx_vehicle_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle1_4f0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_sim1_5c0::InitAsDefaultInstance() {
}
class Esr_sim1_5c0::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_sim1_5c0>()._has_bits_);
  static void set_has_can_rx_sim_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_rx_sim_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_rx_sim_range_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_rx_sim_range_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_rx_sim_range(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_rx_sim_lat_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_rx_sim_lat_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_rx_sim_function(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_rx_sim_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Esr_sim1_5c0::Esr_sim1_5c0()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_sim1_5c0)
}
Esr_sim1_5c0::Esr_sim1_5c0(const Esr_sim1_5c0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_sim_track_id_, &from.can_rx_sim_track_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_rx_sim_angle_) -
    reinterpret_cast<char*>(&can_rx_sim_track_id_)) + sizeof(can_rx_sim_angle_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_sim1_5c0)
}

void Esr_sim1_5c0::SharedCtor() {
  ::memset(&can_rx_sim_track_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_rx_sim_angle_) -
      reinterpret_cast<char*>(&can_rx_sim_track_id_)) + sizeof(can_rx_sim_angle_));
}

Esr_sim1_5c0::~Esr_sim1_5c0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_sim1_5c0)
  SharedDtor();
}

void Esr_sim1_5c0::SharedDtor() {
}

void Esr_sim1_5c0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_sim1_5c0& Esr_sim1_5c0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_sim1_5c0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_sim1_5c0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_sim1_5c0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_rx_sim_track_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_sim_lat_pos_) -
        reinterpret_cast<char*>(&can_rx_sim_track_id_)) + sizeof(can_rx_sim_lat_pos_));
  }
  can_rx_sim_angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_sim1_5c0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType_IsValid(val))) {
            _internal_set_can_rx_sim_track_id(static_cast<::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType_IsValid(val))) {
            _internal_set_can_rx_sim_status(static_cast<::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_sim_range_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_rx_sim_range_rate(&has_bits);
          can_rx_sim_range_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_sim_range_accel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_can_rx_sim_range_accel(&has_bits);
          can_rx_sim_range_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_sim_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_rx_sim_range(&has_bits);
          can_rx_sim_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_sim_lat_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_can_rx_sim_lat_rate(&has_bits);
          can_rx_sim_lat_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_sim_lat_pos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_can_rx_sim_lat_pos(&has_bits);
          can_rx_sim_lat_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType_IsValid(val))) {
            _internal_set_can_rx_sim_function(static_cast<::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_sim_angle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_can_rx_sim_angle(&has_bits);
          can_rx_sim_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_sim1_5c0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_sim1_5c0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_can_rx_sim_track_id(), target);
  }

  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_can_rx_sim_status(), target);
  }

  // optional double can_rx_sim_range_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_rx_sim_range_rate(), target);
  }

  // optional double can_rx_sim_range_accel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_can_rx_sim_range_accel(), target);
  }

  // optional int32 can_rx_sim_range = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_rx_sim_range(), target);
  }

  // optional double can_rx_sim_lat_rate = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_can_rx_sim_lat_rate(), target);
  }

  // optional double can_rx_sim_lat_pos = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_can_rx_sim_lat_pos(), target);
  }

  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_can_rx_sim_function(), target);
  }

  // optional double can_rx_sim_angle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_can_rx_sim_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_sim1_5c0)
  return target;
}

size_t Esr_sim1_5c0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_sim1_5c0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_sim_track_id());
    }

    // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_sim_status());
    }

    // optional double can_rx_sim_range_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_sim_range_accel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_sim_lat_rate = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 can_rx_sim_range = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_sim_range());
    }

    // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_sim_function());
    }

    // optional double can_rx_sim_lat_pos = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double can_rx_sim_angle = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_sim1_5c0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_sim1_5c0)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_sim1_5c0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_sim1_5c0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_sim1_5c0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_sim1_5c0)
    MergeFrom(*source);
  }
}

void Esr_sim1_5c0::MergeFrom(const Esr_sim1_5c0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_sim1_5c0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_sim_track_id_ = from.can_rx_sim_track_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_sim_status_ = from.can_rx_sim_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_sim_range_rate_ = from.can_rx_sim_range_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_sim_range_accel_ = from.can_rx_sim_range_accel_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_sim_lat_rate_ = from.can_rx_sim_lat_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_sim_range_ = from.can_rx_sim_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_sim_function_ = from.can_rx_sim_function_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_sim_lat_pos_ = from.can_rx_sim_lat_pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_can_rx_sim_angle(from._internal_can_rx_sim_angle());
  }
}

void Esr_sim1_5c0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_sim1_5c0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_sim1_5c0::CopyFrom(const Esr_sim1_5c0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_sim1_5c0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_sim1_5c0::IsInitialized() const {
  return true;
}

void Esr_sim1_5c0::InternalSwap(Esr_sim1_5c0* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_rx_sim_track_id_, other->can_rx_sim_track_id_);
  swap(can_rx_sim_status_, other->can_rx_sim_status_);
  swap(can_rx_sim_range_rate_, other->can_rx_sim_range_rate_);
  swap(can_rx_sim_range_accel_, other->can_rx_sim_range_accel_);
  swap(can_rx_sim_lat_rate_, other->can_rx_sim_lat_rate_);
  swap(can_rx_sim_range_, other->can_rx_sim_range_);
  swap(can_rx_sim_function_, other->can_rx_sim_function_);
  swap(can_rx_sim_lat_pos_, other->can_rx_sim_lat_pos_);
  swap(can_rx_sim_angle_, other->can_rx_sim_angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_sim1_5c0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_status1_4e0::InitAsDefaultInstance() {
}
class Esr_status1_4e0::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status1_4e0>()._has_bits_);
  static void set_has_can_tx_dsp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_comm_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_yaw_rate_calc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_vehicle_speed_calc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_scan_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_rolling_count_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_radius_curvature_calc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Esr_status1_4e0::Esr_status1_4e0()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status1_4e0)
}
Esr_status1_4e0::Esr_status1_4e0(const Esr_status1_4e0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_dsp_timestamp_, &from.can_tx_dsp_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_radius_curvature_calc_) -
    reinterpret_cast<char*>(&can_tx_dsp_timestamp_)) + sizeof(can_tx_radius_curvature_calc_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status1_4e0)
}

void Esr_status1_4e0::SharedCtor() {
  ::memset(&can_tx_dsp_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_radius_curvature_calc_) -
      reinterpret_cast<char*>(&can_tx_dsp_timestamp_)) + sizeof(can_tx_radius_curvature_calc_));
}

Esr_status1_4e0::~Esr_status1_4e0() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status1_4e0)
  SharedDtor();
}

void Esr_status1_4e0::SharedDtor() {
}

void Esr_status1_4e0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status1_4e0& Esr_status1_4e0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status1_4e0_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status1_4e0::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status1_4e0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&can_tx_dsp_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_radius_curvature_calc_) -
        reinterpret_cast<char*>(&can_tx_dsp_timestamp_)) + sizeof(can_tx_radius_curvature_calc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status1_4e0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double can_tx_dsp_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_can_tx_dsp_timestamp(&has_bits);
          can_tx_dsp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool can_tx_comm_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_tx_comm_error(&has_bits);
          can_tx_comm_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_yaw_rate_calc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_tx_yaw_rate_calc(&has_bits);
          can_tx_yaw_rate_calc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_vehicle_speed_calc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_can_tx_vehicle_speed_calc(&has_bits);
          can_tx_vehicle_speed_calc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_scan_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_tx_scan_index(&has_bits);
          can_tx_scan_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_rolling_count_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_tx_rolling_count_1(&has_bits);
          can_tx_rolling_count_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_radius_curvature_calc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_tx_radius_curvature_calc(&has_bits);
          can_tx_radius_curvature_calc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status1_4e0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status1_4e0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double can_tx_dsp_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_can_tx_dsp_timestamp(), target);
  }

  // optional bool can_tx_comm_error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_can_tx_comm_error(), target);
  }

  // optional double can_tx_yaw_rate_calc = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_tx_yaw_rate_calc(), target);
  }

  // optional double can_tx_vehicle_speed_calc = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_can_tx_vehicle_speed_calc(), target);
  }

  // optional int32 can_tx_scan_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_tx_scan_index(), target);
  }

  // optional int32 can_tx_rolling_count_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_can_tx_rolling_count_1(), target);
  }

  // optional int32 can_tx_radius_curvature_calc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_can_tx_radius_curvature_calc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status1_4e0)
  return target;
}

size_t Esr_status1_4e0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status1_4e0)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double can_tx_dsp_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double can_tx_yaw_rate_calc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool can_tx_comm_error = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 can_tx_scan_index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_scan_index());
    }

    // optional double can_tx_vehicle_speed_calc = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_rolling_count_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_rolling_count_1());
    }

    // optional int32 can_tx_radius_curvature_calc = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_radius_curvature_calc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status1_4e0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status1_4e0)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status1_4e0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status1_4e0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status1_4e0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status1_4e0)
    MergeFrom(*source);
  }
}

void Esr_status1_4e0::MergeFrom(const Esr_status1_4e0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status1_4e0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_dsp_timestamp_ = from.can_tx_dsp_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_yaw_rate_calc_ = from.can_tx_yaw_rate_calc_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_comm_error_ = from.can_tx_comm_error_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_scan_index_ = from.can_tx_scan_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_vehicle_speed_calc_ = from.can_tx_vehicle_speed_calc_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_rolling_count_1_ = from.can_tx_rolling_count_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_radius_curvature_calc_ = from.can_tx_radius_curvature_calc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status1_4e0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status1_4e0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status1_4e0::CopyFrom(const Esr_status1_4e0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status1_4e0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status1_4e0::IsInitialized() const {
  return true;
}

void Esr_status1_4e0::InternalSwap(Esr_status1_4e0* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_dsp_timestamp_, other->can_tx_dsp_timestamp_);
  swap(can_tx_yaw_rate_calc_, other->can_tx_yaw_rate_calc_);
  swap(can_tx_comm_error_, other->can_tx_comm_error_);
  swap(can_tx_scan_index_, other->can_tx_scan_index_);
  swap(can_tx_vehicle_speed_calc_, other->can_tx_vehicle_speed_calc_);
  swap(can_tx_rolling_count_1_, other->can_tx_rolling_count_1_);
  swap(can_tx_radius_curvature_calc_, other->can_tx_radius_curvature_calc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status1_4e0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_status2_4e1::InitAsDefaultInstance() {
}
class Esr_status2_4e1::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status2_4e1>()._has_bits_);
  static void set_has_can_tx_yaw_rate_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_veh_spd_comp_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_sw_version_dsp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_raw_data_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_range_perf_error(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_overheat_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_tx_maximum_tracks_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_tx_internal_error(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_tx_grouping_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_tx_xcvr_operational(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_can_tx_steering_angle_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_tx_rolling_count_2(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

Esr_status2_4e1::Esr_status2_4e1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status2_4e1)
}
Esr_status2_4e1::Esr_status2_4e1(const Esr_status2_4e1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_yaw_rate_bias_, &from.can_tx_yaw_rate_bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_rolling_count_2_) -
    reinterpret_cast<char*>(&can_tx_yaw_rate_bias_)) + sizeof(can_tx_rolling_count_2_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status2_4e1)
}

void Esr_status2_4e1::SharedCtor() {
  ::memset(&can_tx_yaw_rate_bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_rolling_count_2_) -
      reinterpret_cast<char*>(&can_tx_yaw_rate_bias_)) + sizeof(can_tx_rolling_count_2_));
}

Esr_status2_4e1::~Esr_status2_4e1() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status2_4e1)
  SharedDtor();
}

void Esr_status2_4e1::SharedDtor() {
}

void Esr_status2_4e1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status2_4e1& Esr_status2_4e1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status2_4e1_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status2_4e1::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status2_4e1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_tx_yaw_rate_bias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_maximum_tracks_ack_) -
        reinterpret_cast<char*>(&can_tx_yaw_rate_bias_)) + sizeof(can_tx_maximum_tracks_ack_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&can_tx_internal_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_rolling_count_2_) -
        reinterpret_cast<char*>(&can_tx_internal_error_)) + sizeof(can_tx_rolling_count_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status2_4e1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double can_tx_yaw_rate_bias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_can_tx_yaw_rate_bias(&has_bits);
          can_tx_yaw_rate_bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_tx_veh_spd_comp_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_can_tx_veh_spd_comp_factor(&has_bits);
          can_tx_veh_spd_comp_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_sw_version_dsp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_tx_sw_version_dsp(&has_bits);
          can_tx_sw_version_dsp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_temperature(&has_bits);
          can_tx_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status2_4e1.Can_tx_raw_data_modeType can_tx_raw_data_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType_IsValid(val))) {
            _internal_set_can_tx_raw_data_mode(static_cast<::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status2_4e1.Can_tx_range_perf_errorType can_tx_range_perf_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType_IsValid(val))) {
            _internal_set_can_tx_range_perf_error(static_cast<::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status2_4e1.Can_tx_overheat_errorType can_tx_overheat_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType_IsValid(val))) {
            _internal_set_can_tx_overheat_error(static_cast<::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_maximum_tracks_ack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_can_tx_maximum_tracks_ack(&has_bits);
          can_tx_maximum_tracks_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status2_4e1.Can_tx_internal_errorType can_tx_internal_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType_IsValid(val))) {
            _internal_set_can_tx_internal_error(static_cast<::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status2_4e1.Can_tx_grouping_modeType can_tx_grouping_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType_IsValid(val))) {
            _internal_set_can_tx_grouping_mode(static_cast<::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status2_4e1.Can_tx_xcvr_operationalType can_tx_xcvr_operational = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType_IsValid(val))) {
            _internal_set_can_tx_xcvr_operational(static_cast<::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_steering_angle_ack = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_can_tx_steering_angle_ack(&has_bits);
          can_tx_steering_angle_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_rolling_count_2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_can_tx_rolling_count_2(&has_bits);
          can_tx_rolling_count_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status2_4e1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status2_4e1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double can_tx_yaw_rate_bias = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_can_tx_yaw_rate_bias(), target);
  }

  // optional double can_tx_veh_spd_comp_factor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_can_tx_veh_spd_comp_factor(), target);
  }

  // optional int32 can_tx_sw_version_dsp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_can_tx_sw_version_dsp(), target);
  }

  // optional int32 can_tx_temperature = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_temperature(), target);
  }

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_raw_data_modeType can_tx_raw_data_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_can_tx_raw_data_mode(), target);
  }

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_range_perf_errorType can_tx_range_perf_error = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_can_tx_range_perf_error(), target);
  }

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_overheat_errorType can_tx_overheat_error = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_can_tx_overheat_error(), target);
  }

  // optional int32 can_tx_maximum_tracks_ack = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_can_tx_maximum_tracks_ack(), target);
  }

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_internal_errorType can_tx_internal_error = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_can_tx_internal_error(), target);
  }

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_grouping_modeType can_tx_grouping_mode = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_can_tx_grouping_mode(), target);
  }

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_xcvr_operationalType can_tx_xcvr_operational = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_can_tx_xcvr_operational(), target);
  }

  // optional int32 can_tx_steering_angle_ack = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_can_tx_steering_angle_ack(), target);
  }

  // optional int32 can_tx_rolling_count_2 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_can_tx_rolling_count_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status2_4e1)
  return target;
}

size_t Esr_status2_4e1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status2_4e1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double can_tx_yaw_rate_bias = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double can_tx_veh_spd_comp_factor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 can_tx_sw_version_dsp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_sw_version_dsp());
    }

    // optional int32 can_tx_temperature = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_temperature());
    }

    // optional .apollo.drivers.Esr_status2_4e1.Can_tx_raw_data_modeType can_tx_raw_data_mode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_raw_data_mode());
    }

    // optional .apollo.drivers.Esr_status2_4e1.Can_tx_range_perf_errorType can_tx_range_perf_error = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_range_perf_error());
    }

    // optional .apollo.drivers.Esr_status2_4e1.Can_tx_overheat_errorType can_tx_overheat_error = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_overheat_error());
    }

    // optional int32 can_tx_maximum_tracks_ack = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_maximum_tracks_ack());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .apollo.drivers.Esr_status2_4e1.Can_tx_internal_errorType can_tx_internal_error = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_internal_error());
    }

    // optional .apollo.drivers.Esr_status2_4e1.Can_tx_grouping_modeType can_tx_grouping_mode = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_grouping_mode());
    }

    // optional .apollo.drivers.Esr_status2_4e1.Can_tx_xcvr_operationalType can_tx_xcvr_operational = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_tx_xcvr_operational());
    }

    // optional int32 can_tx_steering_angle_ack = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_steering_angle_ack());
    }

    // optional int32 can_tx_rolling_count_2 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_rolling_count_2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status2_4e1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status2_4e1)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status2_4e1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status2_4e1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status2_4e1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status2_4e1)
    MergeFrom(*source);
  }
}

void Esr_status2_4e1::MergeFrom(const Esr_status2_4e1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status2_4e1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_yaw_rate_bias_ = from.can_tx_yaw_rate_bias_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_veh_spd_comp_factor_ = from.can_tx_veh_spd_comp_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_sw_version_dsp_ = from.can_tx_sw_version_dsp_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_temperature_ = from.can_tx_temperature_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_raw_data_mode_ = from.can_tx_raw_data_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_range_perf_error_ = from.can_tx_range_perf_error_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_overheat_error_ = from.can_tx_overheat_error_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_maximum_tracks_ack_ = from.can_tx_maximum_tracks_ack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      can_tx_internal_error_ = from.can_tx_internal_error_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_tx_grouping_mode_ = from.can_tx_grouping_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_tx_xcvr_operational_ = from.can_tx_xcvr_operational_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_tx_steering_angle_ack_ = from.can_tx_steering_angle_ack_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_tx_rolling_count_2_ = from.can_tx_rolling_count_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status2_4e1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status2_4e1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status2_4e1::CopyFrom(const Esr_status2_4e1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status2_4e1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status2_4e1::IsInitialized() const {
  return true;
}

void Esr_status2_4e1::InternalSwap(Esr_status2_4e1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_yaw_rate_bias_, other->can_tx_yaw_rate_bias_);
  swap(can_tx_veh_spd_comp_factor_, other->can_tx_veh_spd_comp_factor_);
  swap(can_tx_sw_version_dsp_, other->can_tx_sw_version_dsp_);
  swap(can_tx_temperature_, other->can_tx_temperature_);
  swap(can_tx_raw_data_mode_, other->can_tx_raw_data_mode_);
  swap(can_tx_range_perf_error_, other->can_tx_range_perf_error_);
  swap(can_tx_overheat_error_, other->can_tx_overheat_error_);
  swap(can_tx_maximum_tracks_ack_, other->can_tx_maximum_tracks_ack_);
  swap(can_tx_internal_error_, other->can_tx_internal_error_);
  swap(can_tx_grouping_mode_, other->can_tx_grouping_mode_);
  swap(can_tx_xcvr_operational_, other->can_tx_xcvr_operational_);
  swap(can_tx_steering_angle_ack_, other->can_tx_steering_angle_ack_);
  swap(can_tx_rolling_count_2_, other->can_tx_rolling_count_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status2_4e1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_status8_5e7::InitAsDefaultInstance() {
}
class Esr_status8_5e7::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status8_5e7>()._has_bits_);
  static void set_has_can_tx_history_fault_7(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_history_fault_6(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_history_fault_5(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_history_fault_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_history_fault_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_history_fault_2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_history_fault_1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_tx_history_fault_0(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Esr_status8_5e7::Esr_status8_5e7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status8_5e7)
}
Esr_status8_5e7::Esr_status8_5e7(const Esr_status8_5e7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_history_fault_7_, &from.can_tx_history_fault_7_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_history_fault_0_) -
    reinterpret_cast<char*>(&can_tx_history_fault_7_)) + sizeof(can_tx_history_fault_0_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status8_5e7)
}

void Esr_status8_5e7::SharedCtor() {
  ::memset(&can_tx_history_fault_7_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_history_fault_0_) -
      reinterpret_cast<char*>(&can_tx_history_fault_7_)) + sizeof(can_tx_history_fault_0_));
}

Esr_status8_5e7::~Esr_status8_5e7() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status8_5e7)
  SharedDtor();
}

void Esr_status8_5e7::SharedDtor() {
}

void Esr_status8_5e7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status8_5e7& Esr_status8_5e7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status8_5e7_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status8_5e7::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status8_5e7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_tx_history_fault_7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_history_fault_0_) -
        reinterpret_cast<char*>(&can_tx_history_fault_7_)) + sizeof(can_tx_history_fault_0_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status8_5e7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_tx_history_fault_7 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_history_fault_7(&has_bits);
          can_tx_history_fault_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_history_fault_6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_tx_history_fault_6(&has_bits);
          can_tx_history_fault_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_history_fault_5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_tx_history_fault_5(&has_bits);
          can_tx_history_fault_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_history_fault_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_history_fault_4(&has_bits);
          can_tx_history_fault_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_history_fault_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_tx_history_fault_3(&has_bits);
          can_tx_history_fault_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_history_fault_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_tx_history_fault_2(&has_bits);
          can_tx_history_fault_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_history_fault_1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_tx_history_fault_1(&has_bits);
          can_tx_history_fault_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_history_fault_0 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_can_tx_history_fault_0(&has_bits);
          can_tx_history_fault_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status8_5e7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status8_5e7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_history_fault_7 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_tx_history_fault_7(), target);
  }

  // optional int32 can_tx_history_fault_6 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_can_tx_history_fault_6(), target);
  }

  // optional int32 can_tx_history_fault_5 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_can_tx_history_fault_5(), target);
  }

  // optional int32 can_tx_history_fault_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_history_fault_4(), target);
  }

  // optional int32 can_tx_history_fault_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_tx_history_fault_3(), target);
  }

  // optional int32 can_tx_history_fault_2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_can_tx_history_fault_2(), target);
  }

  // optional int32 can_tx_history_fault_1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_can_tx_history_fault_1(), target);
  }

  // optional int32 can_tx_history_fault_0 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_can_tx_history_fault_0(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status8_5e7)
  return target;
}

size_t Esr_status8_5e7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status8_5e7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 can_tx_history_fault_7 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_history_fault_7());
    }

    // optional int32 can_tx_history_fault_6 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_history_fault_6());
    }

    // optional int32 can_tx_history_fault_5 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_history_fault_5());
    }

    // optional int32 can_tx_history_fault_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_history_fault_4());
    }

    // optional int32 can_tx_history_fault_3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_history_fault_3());
    }

    // optional int32 can_tx_history_fault_2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_history_fault_2());
    }

    // optional int32 can_tx_history_fault_1 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_history_fault_1());
    }

    // optional int32 can_tx_history_fault_0 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_history_fault_0());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status8_5e7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status8_5e7)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status8_5e7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status8_5e7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status8_5e7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status8_5e7)
    MergeFrom(*source);
  }
}

void Esr_status8_5e7::MergeFrom(const Esr_status8_5e7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status8_5e7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_history_fault_7_ = from.can_tx_history_fault_7_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_history_fault_6_ = from.can_tx_history_fault_6_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_history_fault_5_ = from.can_tx_history_fault_5_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_history_fault_4_ = from.can_tx_history_fault_4_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_history_fault_3_ = from.can_tx_history_fault_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_history_fault_2_ = from.can_tx_history_fault_2_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_history_fault_1_ = from.can_tx_history_fault_1_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_history_fault_0_ = from.can_tx_history_fault_0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status8_5e7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status8_5e7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status8_5e7::CopyFrom(const Esr_status8_5e7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status8_5e7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status8_5e7::IsInitialized() const {
  return true;
}

void Esr_status8_5e7::InternalSwap(Esr_status8_5e7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_history_fault_7_, other->can_tx_history_fault_7_);
  swap(can_tx_history_fault_6_, other->can_tx_history_fault_6_);
  swap(can_tx_history_fault_5_, other->can_tx_history_fault_5_);
  swap(can_tx_history_fault_4_, other->can_tx_history_fault_4_);
  swap(can_tx_history_fault_3_, other->can_tx_history_fault_3_);
  swap(can_tx_history_fault_2_, other->can_tx_history_fault_2_);
  swap(can_tx_history_fault_1_, other->can_tx_history_fault_1_);
  swap(can_tx_history_fault_0_, other->can_tx_history_fault_0_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status8_5e7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Esr_status7_5e6::InitAsDefaultInstance() {
}
class Esr_status7_5e6::_Internal {
 public:
  using HasBits = decltype(std::declval<Esr_status7_5e6>()._has_bits_);
  static void set_has_can_tx_active_fault_7(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_tx_active_fault_6(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_tx_active_fault_5(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_tx_active_fault_4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_tx_active_fault_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_tx_active_fault_2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_tx_active_fault_0(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_tx_active_fault_1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

Esr_status7_5e6::Esr_status7_5e6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Esr_status7_5e6)
}
Esr_status7_5e6::Esr_status7_5e6(const Esr_status7_5e6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_tx_active_fault_7_, &from.can_tx_active_fault_7_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_tx_active_fault_1_) -
    reinterpret_cast<char*>(&can_tx_active_fault_7_)) + sizeof(can_tx_active_fault_1_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Esr_status7_5e6)
}

void Esr_status7_5e6::SharedCtor() {
  ::memset(&can_tx_active_fault_7_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_tx_active_fault_1_) -
      reinterpret_cast<char*>(&can_tx_active_fault_7_)) + sizeof(can_tx_active_fault_1_));
}

Esr_status7_5e6::~Esr_status7_5e6() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Esr_status7_5e6)
  SharedDtor();
}

void Esr_status7_5e6::SharedDtor() {
}

void Esr_status7_5e6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Esr_status7_5e6& Esr_status7_5e6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Esr_status7_5e6_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Esr_status7_5e6::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Esr_status7_5e6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_tx_active_fault_7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_tx_active_fault_1_) -
        reinterpret_cast<char*>(&can_tx_active_fault_7_)) + sizeof(can_tx_active_fault_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Esr_status7_5e6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_tx_active_fault_7 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_tx_active_fault_7(&has_bits);
          can_tx_active_fault_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_active_fault_6 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_can_tx_active_fault_6(&has_bits);
          can_tx_active_fault_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_active_fault_5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_tx_active_fault_5(&has_bits);
          can_tx_active_fault_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_active_fault_4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_tx_active_fault_4(&has_bits);
          can_tx_active_fault_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_active_fault_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_tx_active_fault_3(&has_bits);
          can_tx_active_fault_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_active_fault_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_tx_active_fault_2(&has_bits);
          can_tx_active_fault_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_active_fault_0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_tx_active_fault_0(&has_bits);
          can_tx_active_fault_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_tx_active_fault_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_can_tx_active_fault_1(&has_bits);
          can_tx_active_fault_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Esr_status7_5e6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Esr_status7_5e6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_tx_active_fault_7 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_tx_active_fault_7(), target);
  }

  // optional int32 can_tx_active_fault_6 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_can_tx_active_fault_6(), target);
  }

  // optional int32 can_tx_active_fault_5 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_can_tx_active_fault_5(), target);
  }

  // optional int32 can_tx_active_fault_4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_tx_active_fault_4(), target);
  }

  // optional int32 can_tx_active_fault_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_tx_active_fault_3(), target);
  }

  // optional int32 can_tx_active_fault_2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_can_tx_active_fault_2(), target);
  }

  // optional int32 can_tx_active_fault_0 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_can_tx_active_fault_0(), target);
  }

  // optional int32 can_tx_active_fault_1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_can_tx_active_fault_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Esr_status7_5e6)
  return target;
}

size_t Esr_status7_5e6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Esr_status7_5e6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 can_tx_active_fault_7 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_active_fault_7());
    }

    // optional int32 can_tx_active_fault_6 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_active_fault_6());
    }

    // optional int32 can_tx_active_fault_5 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_active_fault_5());
    }

    // optional int32 can_tx_active_fault_4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_active_fault_4());
    }

    // optional int32 can_tx_active_fault_3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_active_fault_3());
    }

    // optional int32 can_tx_active_fault_2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_active_fault_2());
    }

    // optional int32 can_tx_active_fault_0 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_active_fault_0());
    }

    // optional int32 can_tx_active_fault_1 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_tx_active_fault_1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esr_status7_5e6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Esr_status7_5e6)
  GOOGLE_DCHECK_NE(&from, this);
  const Esr_status7_5e6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Esr_status7_5e6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Esr_status7_5e6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Esr_status7_5e6)
    MergeFrom(*source);
  }
}

void Esr_status7_5e6::MergeFrom(const Esr_status7_5e6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Esr_status7_5e6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_tx_active_fault_7_ = from.can_tx_active_fault_7_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_tx_active_fault_6_ = from.can_tx_active_fault_6_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_tx_active_fault_5_ = from.can_tx_active_fault_5_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_tx_active_fault_4_ = from.can_tx_active_fault_4_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_tx_active_fault_3_ = from.can_tx_active_fault_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_tx_active_fault_2_ = from.can_tx_active_fault_2_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_tx_active_fault_0_ = from.can_tx_active_fault_0_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_tx_active_fault_1_ = from.can_tx_active_fault_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esr_status7_5e6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Esr_status7_5e6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esr_status7_5e6::CopyFrom(const Esr_status7_5e6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Esr_status7_5e6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esr_status7_5e6::IsInitialized() const {
  return true;
}

void Esr_status7_5e6::InternalSwap(Esr_status7_5e6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_tx_active_fault_7_, other->can_tx_active_fault_7_);
  swap(can_tx_active_fault_6_, other->can_tx_active_fault_6_);
  swap(can_tx_active_fault_5_, other->can_tx_active_fault_5_);
  swap(can_tx_active_fault_4_, other->can_tx_active_fault_4_);
  swap(can_tx_active_fault_3_, other->can_tx_active_fault_3_);
  swap(can_tx_active_fault_2_, other->can_tx_active_fault_2_);
  swap(can_tx_active_fault_0_, other->can_tx_active_fault_0_);
  swap(can_tx_active_fault_1_, other->can_tx_active_fault_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Esr_status7_5e6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle3_5f2::InitAsDefaultInstance() {
}
class Vehicle3_5f2::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle3_5f2>()._has_bits_);
  static void set_has_can_rx_serv_align_updates_need(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_rx_serv_align_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_rx_serv_align_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_rx_aalign_avg_ctr_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_rx_auto_align_converged(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_rx_auto_align_disable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_rx_angle_mounting_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_rx_wheel_slip(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_rx_radar_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_rx_radar_fov_mr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_can_rx_radar_fov_lr(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_can_rx_long_accel_validity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_rx_long_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_can_rx_lat_accel_validity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_can_rx_lat_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

Vehicle3_5f2::Vehicle3_5f2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Vehicle3_5f2)
}
Vehicle3_5f2::Vehicle3_5f2(const Vehicle3_5f2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_serv_align_updates_need_, &from.can_rx_serv_align_updates_need_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_rx_lat_accel_validity_) -
    reinterpret_cast<char*>(&can_rx_serv_align_updates_need_)) + sizeof(can_rx_lat_accel_validity_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Vehicle3_5f2)
}

void Vehicle3_5f2::SharedCtor() {
  ::memset(&can_rx_serv_align_updates_need_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_rx_lat_accel_validity_) -
      reinterpret_cast<char*>(&can_rx_serv_align_updates_need_)) + sizeof(can_rx_lat_accel_validity_));
}

Vehicle3_5f2::~Vehicle3_5f2() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Vehicle3_5f2)
  SharedDtor();
}

void Vehicle3_5f2::SharedDtor() {
}

void Vehicle3_5f2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle3_5f2& Vehicle3_5f2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle3_5f2_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Vehicle3_5f2::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Vehicle3_5f2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_rx_serv_align_updates_need_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_wheel_slip_) -
        reinterpret_cast<char*>(&can_rx_serv_align_updates_need_)) + sizeof(can_rx_wheel_slip_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&can_rx_radar_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_lat_accel_validity_) -
        reinterpret_cast<char*>(&can_rx_radar_height_)) + sizeof(can_rx_lat_accel_validity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle3_5f2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 can_rx_serv_align_updates_need = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_rx_serv_align_updates_need(&has_bits);
          can_rx_serv_align_updates_need_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_typeType can_rx_serv_align_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType_IsValid(val))) {
            _internal_set_can_rx_serv_align_type(static_cast<::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_enableType can_rx_serv_align_enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType_IsValid(val))) {
            _internal_set_can_rx_serv_align_enable(static_cast<::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_aalign_avg_ctr_total = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_can_rx_aalign_avg_ctr_total(&has_bits);
          can_rx_aalign_avg_ctr_total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_convergedType can_rx_auto_align_converged = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType_IsValid(val))) {
            _internal_set_can_rx_auto_align_converged(static_cast<::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_disableType can_rx_auto_align_disable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType_IsValid(val))) {
            _internal_set_can_rx_auto_align_disable(static_cast<::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_angle_mounting_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_can_rx_angle_mounting_offset(&has_bits);
          can_rx_angle_mounting_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle3_5f2.Can_rx_wheel_slipType can_rx_wheel_slip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType_IsValid(val))) {
            _internal_set_can_rx_wheel_slip(static_cast<::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_radar_height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_can_rx_radar_height(&has_bits);
          can_rx_radar_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_radar_fov_mr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_can_rx_radar_fov_mr(&has_bits);
          can_rx_radar_fov_mr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_radar_fov_lr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_can_rx_radar_fov_lr(&has_bits);
          can_rx_radar_fov_lr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle3_5f2.Can_rx_long_accel_validityType can_rx_long_accel_validity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType_IsValid(val))) {
            _internal_set_can_rx_long_accel_validity(static_cast<::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_long_accel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_can_rx_long_accel(&has_bits);
          can_rx_long_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle3_5f2.Can_rx_lat_accel_validityType can_rx_lat_accel_validity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType_IsValid(val))) {
            _internal_set_can_rx_lat_accel_validity(static_cast<::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_lat_accel = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_can_rx_lat_accel(&has_bits);
          can_rx_lat_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle3_5f2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Vehicle3_5f2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 can_rx_serv_align_updates_need = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_can_rx_serv_align_updates_need(), target);
  }

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_typeType can_rx_serv_align_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_can_rx_serv_align_type(), target);
  }

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_enableType can_rx_serv_align_enable = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_can_rx_serv_align_enable(), target);
  }

  // optional double can_rx_aalign_avg_ctr_total = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_can_rx_aalign_avg_ctr_total(), target);
  }

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_convergedType can_rx_auto_align_converged = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_can_rx_auto_align_converged(), target);
  }

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_disableType can_rx_auto_align_disable = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_can_rx_auto_align_disable(), target);
  }

  // optional double can_rx_angle_mounting_offset = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_can_rx_angle_mounting_offset(), target);
  }

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_wheel_slipType can_rx_wheel_slip = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_can_rx_wheel_slip(), target);
  }

  // optional int32 can_rx_radar_height = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_can_rx_radar_height(), target);
  }

  // optional int32 can_rx_radar_fov_mr = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_can_rx_radar_fov_mr(), target);
  }

  // optional int32 can_rx_radar_fov_lr = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_can_rx_radar_fov_lr(), target);
  }

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_long_accel_validityType can_rx_long_accel_validity = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_can_rx_long_accel_validity(), target);
  }

  // optional double can_rx_long_accel = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_can_rx_long_accel(), target);
  }

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_lat_accel_validityType can_rx_lat_accel_validity = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_can_rx_lat_accel_validity(), target);
  }

  // optional double can_rx_lat_accel = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_can_rx_lat_accel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Vehicle3_5f2)
  return target;
}

size_t Vehicle3_5f2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Vehicle3_5f2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 can_rx_serv_align_updates_need = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_serv_align_updates_need());
    }

    // optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_typeType can_rx_serv_align_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_serv_align_type());
    }

    // optional double can_rx_aalign_avg_ctr_total = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_enableType can_rx_serv_align_enable = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_serv_align_enable());
    }

    // optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_convergedType can_rx_auto_align_converged = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_auto_align_converged());
    }

    // optional double can_rx_angle_mounting_offset = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_disableType can_rx_auto_align_disable = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_auto_align_disable());
    }

    // optional .apollo.drivers.Vehicle3_5f2.Can_rx_wheel_slipType can_rx_wheel_slip = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_wheel_slip());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 can_rx_radar_height = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_radar_height());
    }

    // optional int32 can_rx_radar_fov_mr = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_radar_fov_mr());
    }

    // optional int32 can_rx_radar_fov_lr = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_radar_fov_lr());
    }

    // optional .apollo.drivers.Vehicle3_5f2.Can_rx_long_accel_validityType can_rx_long_accel_validity = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_long_accel_validity());
    }

    // optional double can_rx_long_accel = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_lat_accel = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Vehicle3_5f2.Can_rx_lat_accel_validityType can_rx_lat_accel_validity = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_lat_accel_validity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle3_5f2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Vehicle3_5f2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle3_5f2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle3_5f2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Vehicle3_5f2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Vehicle3_5f2)
    MergeFrom(*source);
  }
}

void Vehicle3_5f2::MergeFrom(const Vehicle3_5f2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Vehicle3_5f2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_serv_align_updates_need_ = from.can_rx_serv_align_updates_need_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_serv_align_type_ = from.can_rx_serv_align_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_aalign_avg_ctr_total_ = from.can_rx_aalign_avg_ctr_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_serv_align_enable_ = from.can_rx_serv_align_enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_auto_align_converged_ = from.can_rx_auto_align_converged_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_angle_mounting_offset_ = from.can_rx_angle_mounting_offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_auto_align_disable_ = from.can_rx_auto_align_disable_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_wheel_slip_ = from.can_rx_wheel_slip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      can_rx_radar_height_ = from.can_rx_radar_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_rx_radar_fov_mr_ = from.can_rx_radar_fov_mr_;
    }
    if (cached_has_bits & 0x00000400u) {
      can_rx_radar_fov_lr_ = from.can_rx_radar_fov_lr_;
    }
    if (cached_has_bits & 0x00000800u) {
      can_rx_long_accel_validity_ = from.can_rx_long_accel_validity_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_rx_long_accel_ = from.can_rx_long_accel_;
    }
    if (cached_has_bits & 0x00002000u) {
      can_rx_lat_accel_ = from.can_rx_lat_accel_;
    }
    if (cached_has_bits & 0x00004000u) {
      can_rx_lat_accel_validity_ = from.can_rx_lat_accel_validity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle3_5f2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Vehicle3_5f2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle3_5f2::CopyFrom(const Vehicle3_5f2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Vehicle3_5f2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle3_5f2::IsInitialized() const {
  return true;
}

void Vehicle3_5f2::InternalSwap(Vehicle3_5f2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_rx_serv_align_updates_need_, other->can_rx_serv_align_updates_need_);
  swap(can_rx_serv_align_type_, other->can_rx_serv_align_type_);
  swap(can_rx_aalign_avg_ctr_total_, other->can_rx_aalign_avg_ctr_total_);
  swap(can_rx_serv_align_enable_, other->can_rx_serv_align_enable_);
  swap(can_rx_auto_align_converged_, other->can_rx_auto_align_converged_);
  swap(can_rx_angle_mounting_offset_, other->can_rx_angle_mounting_offset_);
  swap(can_rx_auto_align_disable_, other->can_rx_auto_align_disable_);
  swap(can_rx_wheel_slip_, other->can_rx_wheel_slip_);
  swap(can_rx_radar_height_, other->can_rx_radar_height_);
  swap(can_rx_radar_fov_mr_, other->can_rx_radar_fov_mr_);
  swap(can_rx_radar_fov_lr_, other->can_rx_radar_fov_lr_);
  swap(can_rx_long_accel_validity_, other->can_rx_long_accel_validity_);
  swap(can_rx_long_accel_, other->can_rx_long_accel_);
  swap(can_rx_lat_accel_, other->can_rx_lat_accel_);
  swap(can_rx_lat_accel_validity_, other->can_rx_lat_accel_validity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle3_5f2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle4_5f3::InitAsDefaultInstance() {
}
class Vehicle4_5f3::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle4_5f3>()._has_bits_);
  static void set_has_can_rx_fac_tgt_range_r2m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_rx_fac_tgt_range_m2t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_rx_fac_tgt_range_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_rx_fac_tgt_mtg_space_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_rx_fac_tgt_mtg_space_hor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_rx_fac_tgt_mtg_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_rx_fac_align_samp_req(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_rx_fac_align_max_nt(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_rx_fac_align_cmd_2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_rx_fac_align_cmd_1(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Vehicle4_5f3::Vehicle4_5f3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Vehicle4_5f3)
}
Vehicle4_5f3::Vehicle4_5f3(const Vehicle4_5f3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_fac_tgt_range_r2m_, &from.can_rx_fac_tgt_range_r2m_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_rx_fac_align_cmd_1_) -
    reinterpret_cast<char*>(&can_rx_fac_tgt_range_r2m_)) + sizeof(can_rx_fac_align_cmd_1_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Vehicle4_5f3)
}

void Vehicle4_5f3::SharedCtor() {
  ::memset(&can_rx_fac_tgt_range_r2m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_rx_fac_align_cmd_1_) -
      reinterpret_cast<char*>(&can_rx_fac_tgt_range_r2m_)) + sizeof(can_rx_fac_align_cmd_1_));
}

Vehicle4_5f3::~Vehicle4_5f3() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Vehicle4_5f3)
  SharedDtor();
}

void Vehicle4_5f3::SharedDtor() {
}

void Vehicle4_5f3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle4_5f3& Vehicle4_5f3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle4_5f3_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Vehicle4_5f3::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Vehicle4_5f3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_rx_fac_tgt_range_r2m_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_fac_align_max_nt_) -
        reinterpret_cast<char*>(&can_rx_fac_tgt_range_r2m_)) + sizeof(can_rx_fac_align_max_nt_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&can_rx_fac_align_cmd_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_fac_align_cmd_1_) -
        reinterpret_cast<char*>(&can_rx_fac_align_cmd_2_)) + sizeof(can_rx_fac_align_cmd_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle4_5f3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double can_rx_fac_tgt_range_r2m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_can_rx_fac_tgt_range_r2m(&has_bits);
          can_rx_fac_tgt_range_r2m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_fac_tgt_range_m2t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_can_rx_fac_tgt_range_m2t(&has_bits);
          can_rx_fac_tgt_range_m2t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_fac_tgt_range_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_rx_fac_tgt_range_1(&has_bits);
          can_rx_fac_tgt_range_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_fac_tgt_mtg_space_ver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_can_rx_fac_tgt_mtg_space_ver(&has_bits);
          can_rx_fac_tgt_mtg_space_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_fac_tgt_mtg_space_hor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_can_rx_fac_tgt_mtg_space_hor(&has_bits);
          can_rx_fac_tgt_mtg_space_hor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_fac_tgt_mtg_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_rx_fac_tgt_mtg_offset(&has_bits);
          can_rx_fac_tgt_mtg_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_fac_align_samp_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_rx_fac_align_samp_req(&has_bits);
          can_rx_fac_align_samp_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_fac_align_max_nt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_can_rx_fac_align_max_nt(&has_bits);
          can_rx_fac_align_max_nt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_2Type can_rx_fac_align_cmd_2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_IsValid(val))) {
            _internal_set_can_rx_fac_align_cmd_2(static_cast<::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_1Type can_rx_fac_align_cmd_1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_IsValid(val))) {
            _internal_set_can_rx_fac_align_cmd_1(static_cast<::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle4_5f3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Vehicle4_5f3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double can_rx_fac_tgt_range_r2m = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_can_rx_fac_tgt_range_r2m(), target);
  }

  // optional double can_rx_fac_tgt_range_m2t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_can_rx_fac_tgt_range_m2t(), target);
  }

  // optional double can_rx_fac_tgt_range_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_rx_fac_tgt_range_1(), target);
  }

  // optional int32 can_rx_fac_tgt_mtg_space_ver = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_can_rx_fac_tgt_mtg_space_ver(), target);
  }

  // optional int32 can_rx_fac_tgt_mtg_space_hor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_can_rx_fac_tgt_mtg_space_hor(), target);
  }

  // optional int32 can_rx_fac_tgt_mtg_offset = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_can_rx_fac_tgt_mtg_offset(), target);
  }

  // optional int32 can_rx_fac_align_samp_req = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_can_rx_fac_align_samp_req(), target);
  }

  // optional int32 can_rx_fac_align_max_nt = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_can_rx_fac_align_max_nt(), target);
  }

  // optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_2Type can_rx_fac_align_cmd_2 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_can_rx_fac_align_cmd_2(), target);
  }

  // optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_1Type can_rx_fac_align_cmd_1 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_can_rx_fac_align_cmd_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Vehicle4_5f3)
  return target;
}

size_t Vehicle4_5f3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Vehicle4_5f3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double can_rx_fac_tgt_range_r2m = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_fac_tgt_range_m2t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_fac_tgt_range_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 can_rx_fac_tgt_mtg_space_ver = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_fac_tgt_mtg_space_ver());
    }

    // optional int32 can_rx_fac_tgt_mtg_space_hor = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_fac_tgt_mtg_space_hor());
    }

    // optional int32 can_rx_fac_tgt_mtg_offset = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_fac_tgt_mtg_offset());
    }

    // optional int32 can_rx_fac_align_samp_req = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_fac_align_samp_req());
    }

    // optional int32 can_rx_fac_align_max_nt = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_fac_align_max_nt());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_2Type can_rx_fac_align_cmd_2 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_fac_align_cmd_2());
    }

    // optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_1Type can_rx_fac_align_cmd_1 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_fac_align_cmd_1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle4_5f3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Vehicle4_5f3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle4_5f3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle4_5f3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Vehicle4_5f3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Vehicle4_5f3)
    MergeFrom(*source);
  }
}

void Vehicle4_5f3::MergeFrom(const Vehicle4_5f3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Vehicle4_5f3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_fac_tgt_range_r2m_ = from.can_rx_fac_tgt_range_r2m_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_fac_tgt_range_m2t_ = from.can_rx_fac_tgt_range_m2t_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_fac_tgt_range_1_ = from.can_rx_fac_tgt_range_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_fac_tgt_mtg_space_ver_ = from.can_rx_fac_tgt_mtg_space_ver_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_fac_tgt_mtg_space_hor_ = from.can_rx_fac_tgt_mtg_space_hor_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_fac_tgt_mtg_offset_ = from.can_rx_fac_tgt_mtg_offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_fac_align_samp_req_ = from.can_rx_fac_align_samp_req_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_fac_align_max_nt_ = from.can_rx_fac_align_max_nt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      can_rx_fac_align_cmd_2_ = from.can_rx_fac_align_cmd_2_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_rx_fac_align_cmd_1_ = from.can_rx_fac_align_cmd_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle4_5f3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Vehicle4_5f3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle4_5f3::CopyFrom(const Vehicle4_5f3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Vehicle4_5f3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle4_5f3::IsInitialized() const {
  return true;
}

void Vehicle4_5f3::InternalSwap(Vehicle4_5f3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_rx_fac_tgt_range_r2m_, other->can_rx_fac_tgt_range_r2m_);
  swap(can_rx_fac_tgt_range_m2t_, other->can_rx_fac_tgt_range_m2t_);
  swap(can_rx_fac_tgt_range_1_, other->can_rx_fac_tgt_range_1_);
  swap(can_rx_fac_tgt_mtg_space_ver_, other->can_rx_fac_tgt_mtg_space_ver_);
  swap(can_rx_fac_tgt_mtg_space_hor_, other->can_rx_fac_tgt_mtg_space_hor_);
  swap(can_rx_fac_tgt_mtg_offset_, other->can_rx_fac_tgt_mtg_offset_);
  swap(can_rx_fac_align_samp_req_, other->can_rx_fac_align_samp_req_);
  swap(can_rx_fac_align_max_nt_, other->can_rx_fac_align_max_nt_);
  swap(can_rx_fac_align_cmd_2_, other->can_rx_fac_align_cmd_2_);
  swap(can_rx_fac_align_cmd_1_, other->can_rx_fac_align_cmd_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle4_5f3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle5_5f4::InitAsDefaultInstance() {
}
class Vehicle5_5f4::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle5_5f4>()._has_bits_);
  static void set_has_can_rx_yaw_rate_bias_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_rx_steering_gear_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_rx_wheelbase(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_rx_distance_rear_axle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_rx_cw_blockage_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_can_rx_funnel_offset_right(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_rx_funnel_offset_left(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_can_rx_beamwidth_vert(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_rx_oversteer_understeer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Vehicle5_5f4::Vehicle5_5f4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Vehicle5_5f4)
}
Vehicle5_5f4::Vehicle5_5f4(const Vehicle5_5f4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_steering_gear_ratio_, &from.can_rx_steering_gear_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_rx_beamwidth_vert_) -
    reinterpret_cast<char*>(&can_rx_steering_gear_ratio_)) + sizeof(can_rx_beamwidth_vert_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Vehicle5_5f4)
}

void Vehicle5_5f4::SharedCtor() {
  ::memset(&can_rx_steering_gear_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_rx_beamwidth_vert_) -
      reinterpret_cast<char*>(&can_rx_steering_gear_ratio_)) + sizeof(can_rx_beamwidth_vert_));
}

Vehicle5_5f4::~Vehicle5_5f4() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Vehicle5_5f4)
  SharedDtor();
}

void Vehicle5_5f4::SharedDtor() {
}

void Vehicle5_5f4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle5_5f4& Vehicle5_5f4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle5_5f4_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Vehicle5_5f4::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Vehicle5_5f4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&can_rx_steering_gear_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_rx_funnel_offset_left_) -
        reinterpret_cast<char*>(&can_rx_steering_gear_ratio_)) + sizeof(can_rx_funnel_offset_left_));
  }
  can_rx_beamwidth_vert_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle5_5f4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.Vehicle5_5f4.Can_rx_yaw_rate_bias_shiftType can_rx_yaw_rate_bias_shift = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_IsValid(val))) {
            _internal_set_can_rx_yaw_rate_bias_shift(static_cast<::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double can_rx_steering_gear_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_can_rx_steering_gear_ratio(&has_bits);
          can_rx_steering_gear_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_wheelbase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_can_rx_wheelbase(&has_bits);
          can_rx_wheelbase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_distance_rear_axle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_can_rx_distance_rear_axle(&has_bits);
          can_rx_distance_rear_axle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_cw_blockage_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_can_rx_cw_blockage_threshold(&has_bits);
          can_rx_cw_blockage_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_funnel_offset_right = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_can_rx_funnel_offset_right(&has_bits);
          can_rx_funnel_offset_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_funnel_offset_left = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_can_rx_funnel_offset_left(&has_bits);
          can_rx_funnel_offset_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_beamwidth_vert = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_can_rx_beamwidth_vert(&has_bits);
          can_rx_beamwidth_vert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_rx_oversteer_understeer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_can_rx_oversteer_understeer(&has_bits);
          can_rx_oversteer_understeer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle5_5f4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Vehicle5_5f4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.Vehicle5_5f4.Can_rx_yaw_rate_bias_shiftType can_rx_yaw_rate_bias_shift = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_can_rx_yaw_rate_bias_shift(), target);
  }

  // optional double can_rx_steering_gear_ratio = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_can_rx_steering_gear_ratio(), target);
  }

  // optional double can_rx_wheelbase = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_can_rx_wheelbase(), target);
  }

  // optional double can_rx_distance_rear_axle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_can_rx_distance_rear_axle(), target);
  }

  // optional double can_rx_cw_blockage_threshold = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_can_rx_cw_blockage_threshold(), target);
  }

  // optional double can_rx_funnel_offset_right = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_can_rx_funnel_offset_right(), target);
  }

  // optional double can_rx_funnel_offset_left = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_can_rx_funnel_offset_left(), target);
  }

  // optional double can_rx_beamwidth_vert = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_can_rx_beamwidth_vert(), target);
  }

  // optional int32 can_rx_oversteer_understeer = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_can_rx_oversteer_understeer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Vehicle5_5f4)
  return target;
}

size_t Vehicle5_5f4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Vehicle5_5f4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double can_rx_steering_gear_ratio = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_wheelbase = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_distance_rear_axle = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_cw_blockage_threshold = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.Vehicle5_5f4.Can_rx_yaw_rate_bias_shiftType can_rx_yaw_rate_bias_shift = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_can_rx_yaw_rate_bias_shift());
    }

    // optional int32 can_rx_oversteer_understeer = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_rx_oversteer_understeer());
    }

    // optional double can_rx_funnel_offset_right = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_funnel_offset_left = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double can_rx_beamwidth_vert = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle5_5f4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Vehicle5_5f4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle5_5f4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle5_5f4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Vehicle5_5f4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Vehicle5_5f4)
    MergeFrom(*source);
  }
}

void Vehicle5_5f4::MergeFrom(const Vehicle5_5f4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Vehicle5_5f4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_steering_gear_ratio_ = from.can_rx_steering_gear_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_wheelbase_ = from.can_rx_wheelbase_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_rx_distance_rear_axle_ = from.can_rx_distance_rear_axle_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_rx_cw_blockage_threshold_ = from.can_rx_cw_blockage_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_rx_yaw_rate_bias_shift_ = from.can_rx_yaw_rate_bias_shift_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_rx_oversteer_understeer_ = from.can_rx_oversteer_understeer_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_rx_funnel_offset_right_ = from.can_rx_funnel_offset_right_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_rx_funnel_offset_left_ = from.can_rx_funnel_offset_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_can_rx_beamwidth_vert(from._internal_can_rx_beamwidth_vert());
  }
}

void Vehicle5_5f4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Vehicle5_5f4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle5_5f4::CopyFrom(const Vehicle5_5f4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Vehicle5_5f4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle5_5f4::IsInitialized() const {
  return true;
}

void Vehicle5_5f4::InternalSwap(Vehicle5_5f4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_rx_steering_gear_ratio_, other->can_rx_steering_gear_ratio_);
  swap(can_rx_wheelbase_, other->can_rx_wheelbase_);
  swap(can_rx_distance_rear_axle_, other->can_rx_distance_rear_axle_);
  swap(can_rx_cw_blockage_threshold_, other->can_rx_cw_blockage_threshold_);
  swap(can_rx_yaw_rate_bias_shift_, other->can_rx_yaw_rate_bias_shift_);
  swap(can_rx_oversteer_understeer_, other->can_rx_oversteer_understeer_);
  swap(can_rx_funnel_offset_right_, other->can_rx_funnel_offset_right_);
  swap(can_rx_funnel_offset_left_, other->can_rx_funnel_offset_left_);
  swap(can_rx_beamwidth_vert_, other->can_rx_beamwidth_vert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle5_5f4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle6_5f5::InitAsDefaultInstance() {
}
class Vehicle6_5f5::_Internal {
 public:
  using HasBits = decltype(std::declval<Vehicle6_5f5>()._has_bits_);
  static void set_has_can_rx_inner_funnel_offset_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_can_rx_inner_funnel_offset_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_can_volvo_fa_range_max_short(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_volvo_fa_min_vspeed_short(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_can_volvo_fa_aalign_estimate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Vehicle6_5f5::Vehicle6_5f5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Vehicle6_5f5)
}
Vehicle6_5f5::Vehicle6_5f5(const Vehicle6_5f5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_rx_inner_funnel_offset_right_, &from.can_rx_inner_funnel_offset_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_volvo_fa_range_max_short_) -
    reinterpret_cast<char*>(&can_rx_inner_funnel_offset_right_)) + sizeof(can_volvo_fa_range_max_short_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Vehicle6_5f5)
}

void Vehicle6_5f5::SharedCtor() {
  ::memset(&can_rx_inner_funnel_offset_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_volvo_fa_range_max_short_) -
      reinterpret_cast<char*>(&can_rx_inner_funnel_offset_right_)) + sizeof(can_volvo_fa_range_max_short_));
}

Vehicle6_5f5::~Vehicle6_5f5() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Vehicle6_5f5)
  SharedDtor();
}

void Vehicle6_5f5::SharedDtor() {
}

void Vehicle6_5f5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle6_5f5& Vehicle6_5f5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle6_5f5_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void Vehicle6_5f5::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Vehicle6_5f5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&can_rx_inner_funnel_offset_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_volvo_fa_range_max_short_) -
        reinterpret_cast<char*>(&can_rx_inner_funnel_offset_right_)) + sizeof(can_volvo_fa_range_max_short_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Vehicle6_5f5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double can_rx_inner_funnel_offset_right = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_can_rx_inner_funnel_offset_right(&has_bits);
          can_rx_inner_funnel_offset_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_rx_inner_funnel_offset_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_can_rx_inner_funnel_offset_left(&has_bits);
          can_rx_inner_funnel_offset_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 can_volvo_fa_range_max_short = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_volvo_fa_range_max_short(&has_bits);
          can_volvo_fa_range_max_short_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double can_volvo_fa_min_vspeed_short = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_can_volvo_fa_min_vspeed_short(&has_bits);
          can_volvo_fa_min_vspeed_short_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double can_volvo_fa_aalign_estimate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_can_volvo_fa_aalign_estimate(&has_bits);
          can_volvo_fa_aalign_estimate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle6_5f5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Vehicle6_5f5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double can_rx_inner_funnel_offset_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_can_rx_inner_funnel_offset_right(), target);
  }

  // optional double can_rx_inner_funnel_offset_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_can_rx_inner_funnel_offset_left(), target);
  }

  // optional int32 can_volvo_fa_range_max_short = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_can_volvo_fa_range_max_short(), target);
  }

  // optional double can_volvo_fa_min_vspeed_short = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_can_volvo_fa_min_vspeed_short(), target);
  }

  // optional double can_volvo_fa_aalign_estimate = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_can_volvo_fa_aalign_estimate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Vehicle6_5f5)
  return target;
}

size_t Vehicle6_5f5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Vehicle6_5f5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double can_rx_inner_funnel_offset_right = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double can_rx_inner_funnel_offset_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double can_volvo_fa_min_vspeed_short = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double can_volvo_fa_aalign_estimate = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 can_volvo_fa_range_max_short = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_can_volvo_fa_range_max_short());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle6_5f5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Vehicle6_5f5)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle6_5f5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle6_5f5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Vehicle6_5f5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Vehicle6_5f5)
    MergeFrom(*source);
  }
}

void Vehicle6_5f5::MergeFrom(const Vehicle6_5f5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Vehicle6_5f5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      can_rx_inner_funnel_offset_right_ = from.can_rx_inner_funnel_offset_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      can_rx_inner_funnel_offset_left_ = from.can_rx_inner_funnel_offset_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      can_volvo_fa_min_vspeed_short_ = from.can_volvo_fa_min_vspeed_short_;
    }
    if (cached_has_bits & 0x00000008u) {
      can_volvo_fa_aalign_estimate_ = from.can_volvo_fa_aalign_estimate_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_volvo_fa_range_max_short_ = from.can_volvo_fa_range_max_short_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle6_5f5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Vehicle6_5f5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle6_5f5::CopyFrom(const Vehicle6_5f5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Vehicle6_5f5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle6_5f5::IsInitialized() const {
  return true;
}

void Vehicle6_5f5::InternalSwap(Vehicle6_5f5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_rx_inner_funnel_offset_right_, other->can_rx_inner_funnel_offset_right_);
  swap(can_rx_inner_funnel_offset_left_, other->can_rx_inner_funnel_offset_left_);
  swap(can_volvo_fa_min_vspeed_short_, other->can_volvo_fa_min_vspeed_short_);
  swap(can_volvo_fa_aalign_estimate_, other->can_volvo_fa_aalign_estimate_);
  swap(can_volvo_fa_range_max_short_, other->can_volvo_fa_range_max_short_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle6_5f5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelphiESR::InitAsDefaultInstance() {
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status9_5e8_ = const_cast< ::apollo::drivers::Esr_status9_5e8*>(
      ::apollo::drivers::Esr_status9_5e8::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status6_5e5_ = const_cast< ::apollo::drivers::Esr_status6_5e5*>(
      ::apollo::drivers::Esr_status6_5e5::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status5_5e4_ = const_cast< ::apollo::drivers::Esr_status5_5e4*>(
      ::apollo::drivers::Esr_status5_5e4::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status3_4e2_ = const_cast< ::apollo::drivers::Esr_status3_4e2*>(
      ::apollo::drivers::Esr_status3_4e2::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status4_4e3_ = const_cast< ::apollo::drivers::Esr_status4_4e3*>(
      ::apollo::drivers::Esr_status4_4e3::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->acm_inst_req_7e0_ = const_cast< ::apollo::drivers::Acm_inst_req_7e0*>(
      ::apollo::drivers::Acm_inst_req_7e0::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_valid1_5d0_ = const_cast< ::apollo::drivers::Esr_valid1_5d0*>(
      ::apollo::drivers::Esr_valid1_5d0::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_valid2_5d1_ = const_cast< ::apollo::drivers::Esr_valid2_5d1*>(
      ::apollo::drivers::Esr_valid2_5d1::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->acm_inst_resp_7e4_ = const_cast< ::apollo::drivers::Acm_inst_resp_7e4*>(
      ::apollo::drivers::Acm_inst_resp_7e4::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->vehicle2_4f1_ = const_cast< ::apollo::drivers::Vehicle2_4f1*>(
      ::apollo::drivers::Vehicle2_4f1::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->vehicle1_4f0_ = const_cast< ::apollo::drivers::Vehicle1_4f0*>(
      ::apollo::drivers::Vehicle1_4f0::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_sim1_5c0_ = const_cast< ::apollo::drivers::Esr_sim1_5c0*>(
      ::apollo::drivers::Esr_sim1_5c0::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status1_4e0_ = const_cast< ::apollo::drivers::Esr_status1_4e0*>(
      ::apollo::drivers::Esr_status1_4e0::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status2_4e1_ = const_cast< ::apollo::drivers::Esr_status2_4e1*>(
      ::apollo::drivers::Esr_status2_4e1::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status8_5e7_ = const_cast< ::apollo::drivers::Esr_status8_5e7*>(
      ::apollo::drivers::Esr_status8_5e7::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->esr_status7_5e6_ = const_cast< ::apollo::drivers::Esr_status7_5e6*>(
      ::apollo::drivers::Esr_status7_5e6::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->vehicle3_5f2_ = const_cast< ::apollo::drivers::Vehicle3_5f2*>(
      ::apollo::drivers::Vehicle3_5f2::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->vehicle4_5f3_ = const_cast< ::apollo::drivers::Vehicle4_5f3*>(
      ::apollo::drivers::Vehicle4_5f3::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->vehicle5_5f4_ = const_cast< ::apollo::drivers::Vehicle5_5f4*>(
      ::apollo::drivers::Vehicle5_5f4::internal_default_instance());
  ::apollo::drivers::_DelphiESR_default_instance_._instance.get_mutable()->vehicle6_5f5_ = const_cast< ::apollo::drivers::Vehicle6_5f5*>(
      ::apollo::drivers::Vehicle6_5f5::internal_default_instance());
}
class DelphiESR::_Internal {
 public:
  using HasBits = decltype(std::declval<DelphiESR>()._has_bits_);
  static const ::apollo::common::Header& header(const DelphiESR* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::Esr_status9_5e8& esr_status9_5e8(const DelphiESR* msg);
  static void set_has_esr_status9_5e8(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::drivers::Esr_status6_5e5& esr_status6_5e5(const DelphiESR* msg);
  static void set_has_esr_status6_5e5(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::drivers::Esr_status5_5e4& esr_status5_5e4(const DelphiESR* msg);
  static void set_has_esr_status5_5e4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::drivers::Esr_status3_4e2& esr_status3_4e2(const DelphiESR* msg);
  static void set_has_esr_status3_4e2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::drivers::Esr_status4_4e3& esr_status4_4e3(const DelphiESR* msg);
  static void set_has_esr_status4_4e3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::drivers::Acm_inst_req_7e0& acm_inst_req_7e0(const DelphiESR* msg);
  static void set_has_acm_inst_req_7e0(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::drivers::Esr_valid1_5d0& esr_valid1_5d0(const DelphiESR* msg);
  static void set_has_esr_valid1_5d0(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::drivers::Esr_valid2_5d1& esr_valid2_5d1(const DelphiESR* msg);
  static void set_has_esr_valid2_5d1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::drivers::Acm_inst_resp_7e4& acm_inst_resp_7e4(const DelphiESR* msg);
  static void set_has_acm_inst_resp_7e4(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::drivers::Vehicle2_4f1& vehicle2_4f1(const DelphiESR* msg);
  static void set_has_vehicle2_4f1(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::drivers::Vehicle1_4f0& vehicle1_4f0(const DelphiESR* msg);
  static void set_has_vehicle1_4f0(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::drivers::Esr_sim1_5c0& esr_sim1_5c0(const DelphiESR* msg);
  static void set_has_esr_sim1_5c0(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::drivers::Esr_status1_4e0& esr_status1_4e0(const DelphiESR* msg);
  static void set_has_esr_status1_4e0(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::drivers::Esr_status2_4e1& esr_status2_4e1(const DelphiESR* msg);
  static void set_has_esr_status2_4e1(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::drivers::Esr_status8_5e7& esr_status8_5e7(const DelphiESR* msg);
  static void set_has_esr_status8_5e7(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::drivers::Esr_status7_5e6& esr_status7_5e6(const DelphiESR* msg);
  static void set_has_esr_status7_5e6(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::apollo::drivers::Vehicle3_5f2& vehicle3_5f2(const DelphiESR* msg);
  static void set_has_vehicle3_5f2(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::apollo::drivers::Vehicle4_5f3& vehicle4_5f3(const DelphiESR* msg);
  static void set_has_vehicle4_5f3(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::apollo::drivers::Vehicle5_5f4& vehicle5_5f4(const DelphiESR* msg);
  static void set_has_vehicle5_5f4(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::apollo::drivers::Vehicle6_5f5& vehicle6_5f5(const DelphiESR* msg);
  static void set_has_vehicle6_5f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::apollo::common::Header&
DelphiESR::_Internal::header(const DelphiESR* msg) {
  return *msg->header_;
}
const ::apollo::drivers::Esr_status9_5e8&
DelphiESR::_Internal::esr_status9_5e8(const DelphiESR* msg) {
  return *msg->esr_status9_5e8_;
}
const ::apollo::drivers::Esr_status6_5e5&
DelphiESR::_Internal::esr_status6_5e5(const DelphiESR* msg) {
  return *msg->esr_status6_5e5_;
}
const ::apollo::drivers::Esr_status5_5e4&
DelphiESR::_Internal::esr_status5_5e4(const DelphiESR* msg) {
  return *msg->esr_status5_5e4_;
}
const ::apollo::drivers::Esr_status3_4e2&
DelphiESR::_Internal::esr_status3_4e2(const DelphiESR* msg) {
  return *msg->esr_status3_4e2_;
}
const ::apollo::drivers::Esr_status4_4e3&
DelphiESR::_Internal::esr_status4_4e3(const DelphiESR* msg) {
  return *msg->esr_status4_4e3_;
}
const ::apollo::drivers::Acm_inst_req_7e0&
DelphiESR::_Internal::acm_inst_req_7e0(const DelphiESR* msg) {
  return *msg->acm_inst_req_7e0_;
}
const ::apollo::drivers::Esr_valid1_5d0&
DelphiESR::_Internal::esr_valid1_5d0(const DelphiESR* msg) {
  return *msg->esr_valid1_5d0_;
}
const ::apollo::drivers::Esr_valid2_5d1&
DelphiESR::_Internal::esr_valid2_5d1(const DelphiESR* msg) {
  return *msg->esr_valid2_5d1_;
}
const ::apollo::drivers::Acm_inst_resp_7e4&
DelphiESR::_Internal::acm_inst_resp_7e4(const DelphiESR* msg) {
  return *msg->acm_inst_resp_7e4_;
}
const ::apollo::drivers::Vehicle2_4f1&
DelphiESR::_Internal::vehicle2_4f1(const DelphiESR* msg) {
  return *msg->vehicle2_4f1_;
}
const ::apollo::drivers::Vehicle1_4f0&
DelphiESR::_Internal::vehicle1_4f0(const DelphiESR* msg) {
  return *msg->vehicle1_4f0_;
}
const ::apollo::drivers::Esr_sim1_5c0&
DelphiESR::_Internal::esr_sim1_5c0(const DelphiESR* msg) {
  return *msg->esr_sim1_5c0_;
}
const ::apollo::drivers::Esr_status1_4e0&
DelphiESR::_Internal::esr_status1_4e0(const DelphiESR* msg) {
  return *msg->esr_status1_4e0_;
}
const ::apollo::drivers::Esr_status2_4e1&
DelphiESR::_Internal::esr_status2_4e1(const DelphiESR* msg) {
  return *msg->esr_status2_4e1_;
}
const ::apollo::drivers::Esr_status8_5e7&
DelphiESR::_Internal::esr_status8_5e7(const DelphiESR* msg) {
  return *msg->esr_status8_5e7_;
}
const ::apollo::drivers::Esr_status7_5e6&
DelphiESR::_Internal::esr_status7_5e6(const DelphiESR* msg) {
  return *msg->esr_status7_5e6_;
}
const ::apollo::drivers::Vehicle3_5f2&
DelphiESR::_Internal::vehicle3_5f2(const DelphiESR* msg) {
  return *msg->vehicle3_5f2_;
}
const ::apollo::drivers::Vehicle4_5f3&
DelphiESR::_Internal::vehicle4_5f3(const DelphiESR* msg) {
  return *msg->vehicle4_5f3_;
}
const ::apollo::drivers::Vehicle5_5f4&
DelphiESR::_Internal::vehicle5_5f4(const DelphiESR* msg) {
  return *msg->vehicle5_5f4_;
}
const ::apollo::drivers::Vehicle6_5f5&
DelphiESR::_Internal::vehicle6_5f5(const DelphiESR* msg) {
  return *msg->vehicle6_5f5_;
}
void DelphiESR::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DelphiESR::DelphiESR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.DelphiESR)
}
DelphiESR::DelphiESR(const DelphiESR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      esr_trackmotionpower_540_(from.esr_trackmotionpower_540_),
      esr_track01_500_(from.esr_track01_500_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_esr_status9_5e8()) {
    esr_status9_5e8_ = new ::apollo::drivers::Esr_status9_5e8(*from.esr_status9_5e8_);
  } else {
    esr_status9_5e8_ = nullptr;
  }
  if (from._internal_has_esr_status6_5e5()) {
    esr_status6_5e5_ = new ::apollo::drivers::Esr_status6_5e5(*from.esr_status6_5e5_);
  } else {
    esr_status6_5e5_ = nullptr;
  }
  if (from._internal_has_esr_status5_5e4()) {
    esr_status5_5e4_ = new ::apollo::drivers::Esr_status5_5e4(*from.esr_status5_5e4_);
  } else {
    esr_status5_5e4_ = nullptr;
  }
  if (from._internal_has_esr_status3_4e2()) {
    esr_status3_4e2_ = new ::apollo::drivers::Esr_status3_4e2(*from.esr_status3_4e2_);
  } else {
    esr_status3_4e2_ = nullptr;
  }
  if (from._internal_has_esr_status4_4e3()) {
    esr_status4_4e3_ = new ::apollo::drivers::Esr_status4_4e3(*from.esr_status4_4e3_);
  } else {
    esr_status4_4e3_ = nullptr;
  }
  if (from._internal_has_acm_inst_req_7e0()) {
    acm_inst_req_7e0_ = new ::apollo::drivers::Acm_inst_req_7e0(*from.acm_inst_req_7e0_);
  } else {
    acm_inst_req_7e0_ = nullptr;
  }
  if (from._internal_has_esr_valid1_5d0()) {
    esr_valid1_5d0_ = new ::apollo::drivers::Esr_valid1_5d0(*from.esr_valid1_5d0_);
  } else {
    esr_valid1_5d0_ = nullptr;
  }
  if (from._internal_has_esr_valid2_5d1()) {
    esr_valid2_5d1_ = new ::apollo::drivers::Esr_valid2_5d1(*from.esr_valid2_5d1_);
  } else {
    esr_valid2_5d1_ = nullptr;
  }
  if (from._internal_has_acm_inst_resp_7e4()) {
    acm_inst_resp_7e4_ = new ::apollo::drivers::Acm_inst_resp_7e4(*from.acm_inst_resp_7e4_);
  } else {
    acm_inst_resp_7e4_ = nullptr;
  }
  if (from._internal_has_vehicle2_4f1()) {
    vehicle2_4f1_ = new ::apollo::drivers::Vehicle2_4f1(*from.vehicle2_4f1_);
  } else {
    vehicle2_4f1_ = nullptr;
  }
  if (from._internal_has_vehicle1_4f0()) {
    vehicle1_4f0_ = new ::apollo::drivers::Vehicle1_4f0(*from.vehicle1_4f0_);
  } else {
    vehicle1_4f0_ = nullptr;
  }
  if (from._internal_has_esr_sim1_5c0()) {
    esr_sim1_5c0_ = new ::apollo::drivers::Esr_sim1_5c0(*from.esr_sim1_5c0_);
  } else {
    esr_sim1_5c0_ = nullptr;
  }
  if (from._internal_has_esr_status1_4e0()) {
    esr_status1_4e0_ = new ::apollo::drivers::Esr_status1_4e0(*from.esr_status1_4e0_);
  } else {
    esr_status1_4e0_ = nullptr;
  }
  if (from._internal_has_esr_status2_4e1()) {
    esr_status2_4e1_ = new ::apollo::drivers::Esr_status2_4e1(*from.esr_status2_4e1_);
  } else {
    esr_status2_4e1_ = nullptr;
  }
  if (from._internal_has_esr_status8_5e7()) {
    esr_status8_5e7_ = new ::apollo::drivers::Esr_status8_5e7(*from.esr_status8_5e7_);
  } else {
    esr_status8_5e7_ = nullptr;
  }
  if (from._internal_has_esr_status7_5e6()) {
    esr_status7_5e6_ = new ::apollo::drivers::Esr_status7_5e6(*from.esr_status7_5e6_);
  } else {
    esr_status7_5e6_ = nullptr;
  }
  if (from._internal_has_vehicle3_5f2()) {
    vehicle3_5f2_ = new ::apollo::drivers::Vehicle3_5f2(*from.vehicle3_5f2_);
  } else {
    vehicle3_5f2_ = nullptr;
  }
  if (from._internal_has_vehicle4_5f3()) {
    vehicle4_5f3_ = new ::apollo::drivers::Vehicle4_5f3(*from.vehicle4_5f3_);
  } else {
    vehicle4_5f3_ = nullptr;
  }
  if (from._internal_has_vehicle5_5f4()) {
    vehicle5_5f4_ = new ::apollo::drivers::Vehicle5_5f4(*from.vehicle5_5f4_);
  } else {
    vehicle5_5f4_ = nullptr;
  }
  if (from._internal_has_vehicle6_5f5()) {
    vehicle6_5f5_ = new ::apollo::drivers::Vehicle6_5f5(*from.vehicle6_5f5_);
  } else {
    vehicle6_5f5_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.DelphiESR)
}

void DelphiESR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelphiESR_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle6_5f5_) -
      reinterpret_cast<char*>(&header_)) + sizeof(vehicle6_5f5_));
}

DelphiESR::~DelphiESR() {
  // @@protoc_insertion_point(destructor:apollo.drivers.DelphiESR)
  SharedDtor();
}

void DelphiESR::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete esr_status9_5e8_;
  if (this != internal_default_instance()) delete esr_status6_5e5_;
  if (this != internal_default_instance()) delete esr_status5_5e4_;
  if (this != internal_default_instance()) delete esr_status3_4e2_;
  if (this != internal_default_instance()) delete esr_status4_4e3_;
  if (this != internal_default_instance()) delete acm_inst_req_7e0_;
  if (this != internal_default_instance()) delete esr_valid1_5d0_;
  if (this != internal_default_instance()) delete esr_valid2_5d1_;
  if (this != internal_default_instance()) delete acm_inst_resp_7e4_;
  if (this != internal_default_instance()) delete vehicle2_4f1_;
  if (this != internal_default_instance()) delete vehicle1_4f0_;
  if (this != internal_default_instance()) delete esr_sim1_5c0_;
  if (this != internal_default_instance()) delete esr_status1_4e0_;
  if (this != internal_default_instance()) delete esr_status2_4e1_;
  if (this != internal_default_instance()) delete esr_status8_5e7_;
  if (this != internal_default_instance()) delete esr_status7_5e6_;
  if (this != internal_default_instance()) delete vehicle3_5f2_;
  if (this != internal_default_instance()) delete vehicle4_5f3_;
  if (this != internal_default_instance()) delete vehicle5_5f4_;
  if (this != internal_default_instance()) delete vehicle6_5f5_;
}

void DelphiESR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelphiESR& DelphiESR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelphiESR_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.base);
  return *internal_default_instance();
}


void DelphiESR::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.DelphiESR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  esr_trackmotionpower_540_.Clear();
  esr_track01_500_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(esr_status9_5e8_ != nullptr);
      esr_status9_5e8_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(esr_status6_5e5_ != nullptr);
      esr_status6_5e5_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(esr_status5_5e4_ != nullptr);
      esr_status5_5e4_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(esr_status3_4e2_ != nullptr);
      esr_status3_4e2_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(esr_status4_4e3_ != nullptr);
      esr_status4_4e3_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(acm_inst_req_7e0_ != nullptr);
      acm_inst_req_7e0_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(esr_valid1_5d0_ != nullptr);
      esr_valid1_5d0_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(esr_valid2_5d1_ != nullptr);
      esr_valid2_5d1_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(acm_inst_resp_7e4_ != nullptr);
      acm_inst_resp_7e4_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(vehicle2_4f1_ != nullptr);
      vehicle2_4f1_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(vehicle1_4f0_ != nullptr);
      vehicle1_4f0_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(esr_sim1_5c0_ != nullptr);
      esr_sim1_5c0_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(esr_status1_4e0_ != nullptr);
      esr_status1_4e0_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(esr_status2_4e1_ != nullptr);
      esr_status2_4e1_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(esr_status8_5e7_ != nullptr);
      esr_status8_5e7_->Clear();
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(esr_status7_5e6_ != nullptr);
      esr_status7_5e6_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(vehicle3_5f2_ != nullptr);
      vehicle3_5f2_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(vehicle4_5f3_ != nullptr);
      vehicle4_5f3_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(vehicle5_5f4_ != nullptr);
      vehicle5_5f4_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(vehicle6_5f5_ != nullptr);
      vehicle6_5f5_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DelphiESR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status9_5e8 esr_status9_5e8 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status9_5e8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status6_5e5 esr_status6_5e5 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status6_5e5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status5_5e4 esr_status5_5e4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status5_5e4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status3_4e2 esr_status3_4e2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status3_4e2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status4_4e3 esr_status4_4e3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status4_4e3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.drivers.Esr_trackmotionpower_540 esr_trackmotionpower_540 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_esr_trackmotionpower_540(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Acm_inst_req_7e0 acm_inst_req_7e0 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_acm_inst_req_7e0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.drivers.Esr_track01_500 esr_track01_500 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_esr_track01_500(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_valid1_5d0 esr_valid1_5d0 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_valid1_5d0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_valid2_5d1 esr_valid2_5d1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_valid2_5d1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Acm_inst_resp_7e4 acm_inst_resp_7e4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_acm_inst_resp_7e4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle2_4f1 vehicle2_4f1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle2_4f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle1_4f0 vehicle1_4f0 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle1_4f0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_sim1_5c0 esr_sim1_5c0 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_sim1_5c0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status1_4e0 esr_status1_4e0 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status1_4e0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status2_4e1 esr_status2_4e1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status2_4e1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status8_5e7 esr_status8_5e7 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status8_5e7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Esr_status7_5e6 esr_status7_5e6 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_esr_status7_5e6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle3_5f2 vehicle3_5f2 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle3_5f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle4_5f3 vehicle4_5f3 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle4_5f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle5_5f4 vehicle5_5f4 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle5_5f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.Vehicle6_5f5 vehicle6_5f5 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle6_5f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelphiESR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.DelphiESR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status9_5e8 esr_status9_5e8 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::esr_status9_5e8(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status6_5e5 esr_status6_5e5 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::esr_status6_5e5(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status5_5e4 esr_status5_5e4 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::esr_status5_5e4(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status3_4e2 esr_status3_4e2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::esr_status3_4e2(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status4_4e3 esr_status4_4e3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::esr_status4_4e3(this), target, stream);
  }

  // repeated .apollo.drivers.Esr_trackmotionpower_540 esr_trackmotionpower_540 = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_esr_trackmotionpower_540_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_esr_trackmotionpower_540(i), target, stream);
  }

  // optional .apollo.drivers.Acm_inst_req_7e0 acm_inst_req_7e0 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::acm_inst_req_7e0(this), target, stream);
  }

  // repeated .apollo.drivers.Esr_track01_500 esr_track01_500 = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_esr_track01_500_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_esr_track01_500(i), target, stream);
  }

  // optional .apollo.drivers.Esr_valid1_5d0 esr_valid1_5d0 = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::esr_valid1_5d0(this), target, stream);
  }

  // optional .apollo.drivers.Esr_valid2_5d1 esr_valid2_5d1 = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::esr_valid2_5d1(this), target, stream);
  }

  // optional .apollo.drivers.Acm_inst_resp_7e4 acm_inst_resp_7e4 = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::acm_inst_resp_7e4(this), target, stream);
  }

  // optional .apollo.drivers.Vehicle2_4f1 vehicle2_4f1 = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::vehicle2_4f1(this), target, stream);
  }

  // optional .apollo.drivers.Vehicle1_4f0 vehicle1_4f0 = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::vehicle1_4f0(this), target, stream);
  }

  // optional .apollo.drivers.Esr_sim1_5c0 esr_sim1_5c0 = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::esr_sim1_5c0(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status1_4e0 esr_status1_4e0 = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::esr_status1_4e0(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status2_4e1 esr_status2_4e1 = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::esr_status2_4e1(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status8_5e7 esr_status8_5e7 = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::esr_status8_5e7(this), target, stream);
  }

  // optional .apollo.drivers.Esr_status7_5e6 esr_status7_5e6 = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::esr_status7_5e6(this), target, stream);
  }

  // optional .apollo.drivers.Vehicle3_5f2 vehicle3_5f2 = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::vehicle3_5f2(this), target, stream);
  }

  // optional .apollo.drivers.Vehicle4_5f3 vehicle4_5f3 = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::vehicle4_5f3(this), target, stream);
  }

  // optional .apollo.drivers.Vehicle5_5f4 vehicle5_5f4 = 22;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::vehicle5_5f4(this), target, stream);
  }

  // optional .apollo.drivers.Vehicle6_5f5 vehicle6_5f5 = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::vehicle6_5f5(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.DelphiESR)
  return target;
}

size_t DelphiESR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.DelphiESR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.Esr_trackmotionpower_540 esr_trackmotionpower_540 = 7;
  total_size += 1UL * this->_internal_esr_trackmotionpower_540_size();
  for (const auto& msg : this->esr_trackmotionpower_540_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.drivers.Esr_track01_500 esr_track01_500 = 9;
  total_size += 1UL * this->_internal_esr_track01_500_size();
  for (const auto& msg : this->esr_track01_500_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.drivers.Esr_status9_5e8 esr_status9_5e8 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status9_5e8_);
    }

    // optional .apollo.drivers.Esr_status6_5e5 esr_status6_5e5 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status6_5e5_);
    }

    // optional .apollo.drivers.Esr_status5_5e4 esr_status5_5e4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status5_5e4_);
    }

    // optional .apollo.drivers.Esr_status3_4e2 esr_status3_4e2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status3_4e2_);
    }

    // optional .apollo.drivers.Esr_status4_4e3 esr_status4_4e3 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status4_4e3_);
    }

    // optional .apollo.drivers.Acm_inst_req_7e0 acm_inst_req_7e0 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acm_inst_req_7e0_);
    }

    // optional .apollo.drivers.Esr_valid1_5d0 esr_valid1_5d0 = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_valid1_5d0_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .apollo.drivers.Esr_valid2_5d1 esr_valid2_5d1 = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_valid2_5d1_);
    }

    // optional .apollo.drivers.Acm_inst_resp_7e4 acm_inst_resp_7e4 = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acm_inst_resp_7e4_);
    }

    // optional .apollo.drivers.Vehicle2_4f1 vehicle2_4f1 = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle2_4f1_);
    }

    // optional .apollo.drivers.Vehicle1_4f0 vehicle1_4f0 = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle1_4f0_);
    }

    // optional .apollo.drivers.Esr_sim1_5c0 esr_sim1_5c0 = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_sim1_5c0_);
    }

    // optional .apollo.drivers.Esr_status1_4e0 esr_status1_4e0 = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status1_4e0_);
    }

    // optional .apollo.drivers.Esr_status2_4e1 esr_status2_4e1 = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status2_4e1_);
    }

    // optional .apollo.drivers.Esr_status8_5e7 esr_status8_5e7 = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status8_5e7_);
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional .apollo.drivers.Esr_status7_5e6 esr_status7_5e6 = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *esr_status7_5e6_);
    }

    // optional .apollo.drivers.Vehicle3_5f2 vehicle3_5f2 = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle3_5f2_);
    }

    // optional .apollo.drivers.Vehicle4_5f3 vehicle4_5f3 = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle4_5f3_);
    }

    // optional .apollo.drivers.Vehicle5_5f4 vehicle5_5f4 = 22;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle5_5f4_);
    }

    // optional .apollo.drivers.Vehicle6_5f5 vehicle6_5f5 = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vehicle6_5f5_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelphiESR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.DelphiESR)
  GOOGLE_DCHECK_NE(&from, this);
  const DelphiESR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelphiESR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.DelphiESR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.DelphiESR)
    MergeFrom(*source);
  }
}

void DelphiESR::MergeFrom(const DelphiESR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.DelphiESR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  esr_trackmotionpower_540_.MergeFrom(from.esr_trackmotionpower_540_);
  esr_track01_500_.MergeFrom(from.esr_track01_500_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_esr_status9_5e8()->::apollo::drivers::Esr_status9_5e8::MergeFrom(from._internal_esr_status9_5e8());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_esr_status6_5e5()->::apollo::drivers::Esr_status6_5e5::MergeFrom(from._internal_esr_status6_5e5());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_esr_status5_5e4()->::apollo::drivers::Esr_status5_5e4::MergeFrom(from._internal_esr_status5_5e4());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_esr_status3_4e2()->::apollo::drivers::Esr_status3_4e2::MergeFrom(from._internal_esr_status3_4e2());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_esr_status4_4e3()->::apollo::drivers::Esr_status4_4e3::MergeFrom(from._internal_esr_status4_4e3());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_acm_inst_req_7e0()->::apollo::drivers::Acm_inst_req_7e0::MergeFrom(from._internal_acm_inst_req_7e0());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_esr_valid1_5d0()->::apollo::drivers::Esr_valid1_5d0::MergeFrom(from._internal_esr_valid1_5d0());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_esr_valid2_5d1()->::apollo::drivers::Esr_valid2_5d1::MergeFrom(from._internal_esr_valid2_5d1());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_acm_inst_resp_7e4()->::apollo::drivers::Acm_inst_resp_7e4::MergeFrom(from._internal_acm_inst_resp_7e4());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_vehicle2_4f1()->::apollo::drivers::Vehicle2_4f1::MergeFrom(from._internal_vehicle2_4f1());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_vehicle1_4f0()->::apollo::drivers::Vehicle1_4f0::MergeFrom(from._internal_vehicle1_4f0());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_esr_sim1_5c0()->::apollo::drivers::Esr_sim1_5c0::MergeFrom(from._internal_esr_sim1_5c0());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_esr_status1_4e0()->::apollo::drivers::Esr_status1_4e0::MergeFrom(from._internal_esr_status1_4e0());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_esr_status2_4e1()->::apollo::drivers::Esr_status2_4e1::MergeFrom(from._internal_esr_status2_4e1());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_esr_status8_5e7()->::apollo::drivers::Esr_status8_5e7::MergeFrom(from._internal_esr_status8_5e7());
    }
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_esr_status7_5e6()->::apollo::drivers::Esr_status7_5e6::MergeFrom(from._internal_esr_status7_5e6());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_vehicle3_5f2()->::apollo::drivers::Vehicle3_5f2::MergeFrom(from._internal_vehicle3_5f2());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_vehicle4_5f3()->::apollo::drivers::Vehicle4_5f3::MergeFrom(from._internal_vehicle4_5f3());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_vehicle5_5f4()->::apollo::drivers::Vehicle5_5f4::MergeFrom(from._internal_vehicle5_5f4());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_vehicle6_5f5()->::apollo::drivers::Vehicle6_5f5::MergeFrom(from._internal_vehicle6_5f5());
    }
  }
}

void DelphiESR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.DelphiESR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelphiESR::CopyFrom(const DelphiESR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.DelphiESR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelphiESR::IsInitialized() const {
  return true;
}

void DelphiESR::InternalSwap(DelphiESR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  esr_trackmotionpower_540_.InternalSwap(&other->esr_trackmotionpower_540_);
  esr_track01_500_.InternalSwap(&other->esr_track01_500_);
  swap(header_, other->header_);
  swap(esr_status9_5e8_, other->esr_status9_5e8_);
  swap(esr_status6_5e5_, other->esr_status6_5e5_);
  swap(esr_status5_5e4_, other->esr_status5_5e4_);
  swap(esr_status3_4e2_, other->esr_status3_4e2_);
  swap(esr_status4_4e3_, other->esr_status4_4e3_);
  swap(acm_inst_req_7e0_, other->acm_inst_req_7e0_);
  swap(esr_valid1_5d0_, other->esr_valid1_5d0_);
  swap(esr_valid2_5d1_, other->esr_valid2_5d1_);
  swap(acm_inst_resp_7e4_, other->acm_inst_resp_7e4_);
  swap(vehicle2_4f1_, other->vehicle2_4f1_);
  swap(vehicle1_4f0_, other->vehicle1_4f0_);
  swap(esr_sim1_5c0_, other->esr_sim1_5c0_);
  swap(esr_status1_4e0_, other->esr_status1_4e0_);
  swap(esr_status2_4e1_, other->esr_status2_4e1_);
  swap(esr_status8_5e7_, other->esr_status8_5e7_);
  swap(esr_status7_5e6_, other->esr_status7_5e6_);
  swap(vehicle3_5f2_, other->vehicle3_5f2_);
  swap(vehicle4_5f3_, other->vehicle4_5f3_);
  swap(vehicle5_5f4_, other->vehicle5_5f4_);
  swap(vehicle6_5f5_, other->vehicle6_5f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelphiESR::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status9_5e8* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status9_5e8 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status9_5e8 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status6_5e5* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status6_5e5 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status6_5e5 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status5_5e4* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status5_5e4 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status5_5e4 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status3_4e2* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status3_4e2 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status3_4e2 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status4_4e3* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status4_4e3 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status4_4e3 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_trackmotionpower_540_Motionpower* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_trackmotionpower_540* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_trackmotionpower_540 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_trackmotionpower_540 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Acm_inst_req_7e0* Arena::CreateMaybeMessage< ::apollo::drivers::Acm_inst_req_7e0 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Acm_inst_req_7e0 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_track01_500* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_track01_500 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_track01_500 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_valid1_5d0* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_valid1_5d0 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_valid1_5d0 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_valid2_5d1* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_valid2_5d1 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_valid2_5d1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Acm_inst_resp_7e4* Arena::CreateMaybeMessage< ::apollo::drivers::Acm_inst_resp_7e4 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Acm_inst_resp_7e4 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Vehicle2_4f1* Arena::CreateMaybeMessage< ::apollo::drivers::Vehicle2_4f1 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Vehicle2_4f1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Vehicle1_4f0* Arena::CreateMaybeMessage< ::apollo::drivers::Vehicle1_4f0 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Vehicle1_4f0 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_sim1_5c0* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_sim1_5c0 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_sim1_5c0 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status1_4e0* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status1_4e0 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status1_4e0 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status2_4e1* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status2_4e1 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status2_4e1 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status8_5e7* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status8_5e7 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status8_5e7 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Esr_status7_5e6* Arena::CreateMaybeMessage< ::apollo::drivers::Esr_status7_5e6 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Esr_status7_5e6 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Vehicle3_5f2* Arena::CreateMaybeMessage< ::apollo::drivers::Vehicle3_5f2 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Vehicle3_5f2 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Vehicle4_5f3* Arena::CreateMaybeMessage< ::apollo::drivers::Vehicle4_5f3 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Vehicle4_5f3 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Vehicle5_5f4* Arena::CreateMaybeMessage< ::apollo::drivers::Vehicle5_5f4 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Vehicle5_5f4 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::Vehicle6_5f5* Arena::CreateMaybeMessage< ::apollo::drivers::Vehicle6_5f5 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Vehicle6_5f5 >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::DelphiESR* Arena::CreateMaybeMessage< ::apollo::drivers::DelphiESR >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::DelphiESR >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
