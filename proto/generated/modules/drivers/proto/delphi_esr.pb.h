// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/delphi_esr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
namespace apollo {
namespace drivers {
class Acm_inst_req_7e0;
class Acm_inst_req_7e0DefaultTypeInternal;
extern Acm_inst_req_7e0DefaultTypeInternal _Acm_inst_req_7e0_default_instance_;
class Acm_inst_resp_7e4;
class Acm_inst_resp_7e4DefaultTypeInternal;
extern Acm_inst_resp_7e4DefaultTypeInternal _Acm_inst_resp_7e4_default_instance_;
class DelphiESR;
class DelphiESRDefaultTypeInternal;
extern DelphiESRDefaultTypeInternal _DelphiESR_default_instance_;
class Esr_sim1_5c0;
class Esr_sim1_5c0DefaultTypeInternal;
extern Esr_sim1_5c0DefaultTypeInternal _Esr_sim1_5c0_default_instance_;
class Esr_status1_4e0;
class Esr_status1_4e0DefaultTypeInternal;
extern Esr_status1_4e0DefaultTypeInternal _Esr_status1_4e0_default_instance_;
class Esr_status2_4e1;
class Esr_status2_4e1DefaultTypeInternal;
extern Esr_status2_4e1DefaultTypeInternal _Esr_status2_4e1_default_instance_;
class Esr_status3_4e2;
class Esr_status3_4e2DefaultTypeInternal;
extern Esr_status3_4e2DefaultTypeInternal _Esr_status3_4e2_default_instance_;
class Esr_status4_4e3;
class Esr_status4_4e3DefaultTypeInternal;
extern Esr_status4_4e3DefaultTypeInternal _Esr_status4_4e3_default_instance_;
class Esr_status5_5e4;
class Esr_status5_5e4DefaultTypeInternal;
extern Esr_status5_5e4DefaultTypeInternal _Esr_status5_5e4_default_instance_;
class Esr_status6_5e5;
class Esr_status6_5e5DefaultTypeInternal;
extern Esr_status6_5e5DefaultTypeInternal _Esr_status6_5e5_default_instance_;
class Esr_status7_5e6;
class Esr_status7_5e6DefaultTypeInternal;
extern Esr_status7_5e6DefaultTypeInternal _Esr_status7_5e6_default_instance_;
class Esr_status8_5e7;
class Esr_status8_5e7DefaultTypeInternal;
extern Esr_status8_5e7DefaultTypeInternal _Esr_status8_5e7_default_instance_;
class Esr_status9_5e8;
class Esr_status9_5e8DefaultTypeInternal;
extern Esr_status9_5e8DefaultTypeInternal _Esr_status9_5e8_default_instance_;
class Esr_track01_500;
class Esr_track01_500DefaultTypeInternal;
extern Esr_track01_500DefaultTypeInternal _Esr_track01_500_default_instance_;
class Esr_trackmotionpower_540;
class Esr_trackmotionpower_540DefaultTypeInternal;
extern Esr_trackmotionpower_540DefaultTypeInternal _Esr_trackmotionpower_540_default_instance_;
class Esr_trackmotionpower_540_Motionpower;
class Esr_trackmotionpower_540_MotionpowerDefaultTypeInternal;
extern Esr_trackmotionpower_540_MotionpowerDefaultTypeInternal _Esr_trackmotionpower_540_Motionpower_default_instance_;
class Esr_valid1_5d0;
class Esr_valid1_5d0DefaultTypeInternal;
extern Esr_valid1_5d0DefaultTypeInternal _Esr_valid1_5d0_default_instance_;
class Esr_valid2_5d1;
class Esr_valid2_5d1DefaultTypeInternal;
extern Esr_valid2_5d1DefaultTypeInternal _Esr_valid2_5d1_default_instance_;
class Vehicle1_4f0;
class Vehicle1_4f0DefaultTypeInternal;
extern Vehicle1_4f0DefaultTypeInternal _Vehicle1_4f0_default_instance_;
class Vehicle2_4f1;
class Vehicle2_4f1DefaultTypeInternal;
extern Vehicle2_4f1DefaultTypeInternal _Vehicle2_4f1_default_instance_;
class Vehicle3_5f2;
class Vehicle3_5f2DefaultTypeInternal;
extern Vehicle3_5f2DefaultTypeInternal _Vehicle3_5f2_default_instance_;
class Vehicle4_5f3;
class Vehicle4_5f3DefaultTypeInternal;
extern Vehicle4_5f3DefaultTypeInternal _Vehicle4_5f3_default_instance_;
class Vehicle5_5f4;
class Vehicle5_5f4DefaultTypeInternal;
extern Vehicle5_5f4DefaultTypeInternal _Vehicle5_5f4_default_instance_;
class Vehicle6_5f5;
class Vehicle6_5f5DefaultTypeInternal;
extern Vehicle6_5f5DefaultTypeInternal _Vehicle6_5f5_default_instance_;
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::Acm_inst_req_7e0* Arena::CreateMaybeMessage<::apollo::drivers::Acm_inst_req_7e0>(Arena*);
template<> ::apollo::drivers::Acm_inst_resp_7e4* Arena::CreateMaybeMessage<::apollo::drivers::Acm_inst_resp_7e4>(Arena*);
template<> ::apollo::drivers::DelphiESR* Arena::CreateMaybeMessage<::apollo::drivers::DelphiESR>(Arena*);
template<> ::apollo::drivers::Esr_sim1_5c0* Arena::CreateMaybeMessage<::apollo::drivers::Esr_sim1_5c0>(Arena*);
template<> ::apollo::drivers::Esr_status1_4e0* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status1_4e0>(Arena*);
template<> ::apollo::drivers::Esr_status2_4e1* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status2_4e1>(Arena*);
template<> ::apollo::drivers::Esr_status3_4e2* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status3_4e2>(Arena*);
template<> ::apollo::drivers::Esr_status4_4e3* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status4_4e3>(Arena*);
template<> ::apollo::drivers::Esr_status5_5e4* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status5_5e4>(Arena*);
template<> ::apollo::drivers::Esr_status6_5e5* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status6_5e5>(Arena*);
template<> ::apollo::drivers::Esr_status7_5e6* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status7_5e6>(Arena*);
template<> ::apollo::drivers::Esr_status8_5e7* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status8_5e7>(Arena*);
template<> ::apollo::drivers::Esr_status9_5e8* Arena::CreateMaybeMessage<::apollo::drivers::Esr_status9_5e8>(Arena*);
template<> ::apollo::drivers::Esr_track01_500* Arena::CreateMaybeMessage<::apollo::drivers::Esr_track01_500>(Arena*);
template<> ::apollo::drivers::Esr_trackmotionpower_540* Arena::CreateMaybeMessage<::apollo::drivers::Esr_trackmotionpower_540>(Arena*);
template<> ::apollo::drivers::Esr_trackmotionpower_540_Motionpower* Arena::CreateMaybeMessage<::apollo::drivers::Esr_trackmotionpower_540_Motionpower>(Arena*);
template<> ::apollo::drivers::Esr_valid1_5d0* Arena::CreateMaybeMessage<::apollo::drivers::Esr_valid1_5d0>(Arena*);
template<> ::apollo::drivers::Esr_valid2_5d1* Arena::CreateMaybeMessage<::apollo::drivers::Esr_valid2_5d1>(Arena*);
template<> ::apollo::drivers::Vehicle1_4f0* Arena::CreateMaybeMessage<::apollo::drivers::Vehicle1_4f0>(Arena*);
template<> ::apollo::drivers::Vehicle2_4f1* Arena::CreateMaybeMessage<::apollo::drivers::Vehicle2_4f1>(Arena*);
template<> ::apollo::drivers::Vehicle3_5f2* Arena::CreateMaybeMessage<::apollo::drivers::Vehicle3_5f2>(Arena*);
template<> ::apollo::drivers::Vehicle4_5f3* Arena::CreateMaybeMessage<::apollo::drivers::Vehicle4_5f3>(Arena*);
template<> ::apollo::drivers::Vehicle5_5f4* Arena::CreateMaybeMessage<::apollo::drivers::Vehicle5_5f4>(Arena*);
template<> ::apollo::drivers::Vehicle6_5f5* Arena::CreateMaybeMessage<::apollo::drivers::Vehicle6_5f5>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {

enum Esr_status6_5e5_Can_tx_vertical_align_updatedType : int {
  Esr_status6_5e5_Can_tx_vertical_align_updatedType_CAN_TX_VERTICAL_ALIGN_UPDATED_NOT_UPDATED = 0,
  Esr_status6_5e5_Can_tx_vertical_align_updatedType_CAN_TX_VERTICAL_ALIGN_UPDATED_UPDATED = 1
};
bool Esr_status6_5e5_Can_tx_vertical_align_updatedType_IsValid(int value);
constexpr Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5_Can_tx_vertical_align_updatedType_Can_tx_vertical_align_updatedType_MIN = Esr_status6_5e5_Can_tx_vertical_align_updatedType_CAN_TX_VERTICAL_ALIGN_UPDATED_NOT_UPDATED;
constexpr Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5_Can_tx_vertical_align_updatedType_Can_tx_vertical_align_updatedType_MAX = Esr_status6_5e5_Can_tx_vertical_align_updatedType_CAN_TX_VERTICAL_ALIGN_UPDATED_UPDATED;
constexpr int Esr_status6_5e5_Can_tx_vertical_align_updatedType_Can_tx_vertical_align_updatedType_ARRAYSIZE = Esr_status6_5e5_Can_tx_vertical_align_updatedType_Can_tx_vertical_align_updatedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_vertical_align_updatedType_descriptor();
template<typename T>
inline const std::string& Esr_status6_5e5_Can_tx_vertical_align_updatedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status6_5e5_Can_tx_vertical_align_updatedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status6_5e5_Can_tx_vertical_align_updatedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status6_5e5_Can_tx_vertical_align_updatedType_descriptor(), enum_t_value);
}
inline bool Esr_status6_5e5_Can_tx_vertical_align_updatedType_Parse(
    const std::string& name, Esr_status6_5e5_Can_tx_vertical_align_updatedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status6_5e5_Can_tx_vertical_align_updatedType>(
    Esr_status6_5e5_Can_tx_vertical_align_updatedType_descriptor(), name, value);
}
enum Esr_status6_5e5_Can_tx_found_targetType : int {
  Esr_status6_5e5_Can_tx_found_targetType_CAN_TX_FOUND_TARGET_NOT_FOUND = 0,
  Esr_status6_5e5_Can_tx_found_targetType_CAN_TX_FOUND_TARGET_FOUND = 1
};
bool Esr_status6_5e5_Can_tx_found_targetType_IsValid(int value);
constexpr Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5_Can_tx_found_targetType_Can_tx_found_targetType_MIN = Esr_status6_5e5_Can_tx_found_targetType_CAN_TX_FOUND_TARGET_NOT_FOUND;
constexpr Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5_Can_tx_found_targetType_Can_tx_found_targetType_MAX = Esr_status6_5e5_Can_tx_found_targetType_CAN_TX_FOUND_TARGET_FOUND;
constexpr int Esr_status6_5e5_Can_tx_found_targetType_Can_tx_found_targetType_ARRAYSIZE = Esr_status6_5e5_Can_tx_found_targetType_Can_tx_found_targetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_found_targetType_descriptor();
template<typename T>
inline const std::string& Esr_status6_5e5_Can_tx_found_targetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status6_5e5_Can_tx_found_targetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status6_5e5_Can_tx_found_targetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status6_5e5_Can_tx_found_targetType_descriptor(), enum_t_value);
}
inline bool Esr_status6_5e5_Can_tx_found_targetType_Parse(
    const std::string& name, Esr_status6_5e5_Can_tx_found_targetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status6_5e5_Can_tx_found_targetType>(
    Esr_status6_5e5_Can_tx_found_targetType_descriptor(), name, value);
}
enum Esr_status6_5e5_Can_tx_factory_align_status_2Type : int {
  Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_OFF = 0,
  Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_BUSY = 1,
  Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_SUCCESS = 2,
  Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_NO_TARGET = 3,
  Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_DEV_TOO_LARGE = 4,
  Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_VAR_TOO_LARGE = 5
};
bool Esr_status6_5e5_Can_tx_factory_align_status_2Type_IsValid(int value);
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5_Can_tx_factory_align_status_2Type_Can_tx_factory_align_status_2Type_MIN = Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_OFF;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5_Can_tx_factory_align_status_2Type_Can_tx_factory_align_status_2Type_MAX = Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_VAR_TOO_LARGE;
constexpr int Esr_status6_5e5_Can_tx_factory_align_status_2Type_Can_tx_factory_align_status_2Type_ARRAYSIZE = Esr_status6_5e5_Can_tx_factory_align_status_2Type_Can_tx_factory_align_status_2Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_factory_align_status_2Type_descriptor();
template<typename T>
inline const std::string& Esr_status6_5e5_Can_tx_factory_align_status_2Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status6_5e5_Can_tx_factory_align_status_2Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status6_5e5_Can_tx_factory_align_status_2Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_descriptor(), enum_t_value);
}
inline bool Esr_status6_5e5_Can_tx_factory_align_status_2Type_Parse(
    const std::string& name, Esr_status6_5e5_Can_tx_factory_align_status_2Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status6_5e5_Can_tx_factory_align_status_2Type>(
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_descriptor(), name, value);
}
enum Esr_status6_5e5_Can_tx_factory_align_status_1Type : int {
  Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_OFF = 0,
  Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_BUSY = 1,
  Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_SUCCESS = 2,
  Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_NO_TARGET = 3,
  Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_DEV_TOO_LARGE = 4,
  Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_VAR_TOO_LARGE = 5
};
bool Esr_status6_5e5_Can_tx_factory_align_status_1Type_IsValid(int value);
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5_Can_tx_factory_align_status_1Type_Can_tx_factory_align_status_1Type_MIN = Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_OFF;
constexpr Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5_Can_tx_factory_align_status_1Type_Can_tx_factory_align_status_1Type_MAX = Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_VAR_TOO_LARGE;
constexpr int Esr_status6_5e5_Can_tx_factory_align_status_1Type_Can_tx_factory_align_status_1Type_ARRAYSIZE = Esr_status6_5e5_Can_tx_factory_align_status_1Type_Can_tx_factory_align_status_1Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_factory_align_status_1Type_descriptor();
template<typename T>
inline const std::string& Esr_status6_5e5_Can_tx_factory_align_status_1Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status6_5e5_Can_tx_factory_align_status_1Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status6_5e5_Can_tx_factory_align_status_1Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_descriptor(), enum_t_value);
}
inline bool Esr_status6_5e5_Can_tx_factory_align_status_1Type_Parse(
    const std::string& name, Esr_status6_5e5_Can_tx_factory_align_status_1Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status6_5e5_Can_tx_factory_align_status_1Type>(
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_descriptor(), name, value);
}
enum Esr_status6_5e5_Can_tx_recommend_unconvergeType : int {
  Esr_status6_5e5_Can_tx_recommend_unconvergeType_CAN_TX_RECOMMEND_UNCONVERGE_NOT_RECOMMEND = 0,
  Esr_status6_5e5_Can_tx_recommend_unconvergeType_CAN_TX_RECOMMEND_UNCONVERGE_RECOMMEND = 1
};
bool Esr_status6_5e5_Can_tx_recommend_unconvergeType_IsValid(int value);
constexpr Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5_Can_tx_recommend_unconvergeType_Can_tx_recommend_unconvergeType_MIN = Esr_status6_5e5_Can_tx_recommend_unconvergeType_CAN_TX_RECOMMEND_UNCONVERGE_NOT_RECOMMEND;
constexpr Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5_Can_tx_recommend_unconvergeType_Can_tx_recommend_unconvergeType_MAX = Esr_status6_5e5_Can_tx_recommend_unconvergeType_CAN_TX_RECOMMEND_UNCONVERGE_RECOMMEND;
constexpr int Esr_status6_5e5_Can_tx_recommend_unconvergeType_Can_tx_recommend_unconvergeType_ARRAYSIZE = Esr_status6_5e5_Can_tx_recommend_unconvergeType_Can_tx_recommend_unconvergeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_recommend_unconvergeType_descriptor();
template<typename T>
inline const std::string& Esr_status6_5e5_Can_tx_recommend_unconvergeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status6_5e5_Can_tx_recommend_unconvergeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status6_5e5_Can_tx_recommend_unconvergeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status6_5e5_Can_tx_recommend_unconvergeType_descriptor(), enum_t_value);
}
inline bool Esr_status6_5e5_Can_tx_recommend_unconvergeType_Parse(
    const std::string& name, Esr_status6_5e5_Can_tx_recommend_unconvergeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status6_5e5_Can_tx_recommend_unconvergeType>(
    Esr_status6_5e5_Can_tx_recommend_unconvergeType_descriptor(), name, value);
}
enum Esr_status6_5e5_Can_tx_system_power_modeType : int {
  Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_DSP_INIT = 0,
  Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_RADIATE_OFF = 1,
  Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_RADIATE_ON = 2,
  Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_DSP_SHUTDOWN = 3,
  Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_DSP_OFF = 4,
  Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_HOST_SHUTDOWN = 5,
  Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_TEST = 6,
  Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_7INVALID = 7
};
bool Esr_status6_5e5_Can_tx_system_power_modeType_IsValid(int value);
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5_Can_tx_system_power_modeType_Can_tx_system_power_modeType_MIN = Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_DSP_INIT;
constexpr Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5_Can_tx_system_power_modeType_Can_tx_system_power_modeType_MAX = Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_7INVALID;
constexpr int Esr_status6_5e5_Can_tx_system_power_modeType_Can_tx_system_power_modeType_ARRAYSIZE = Esr_status6_5e5_Can_tx_system_power_modeType_Can_tx_system_power_modeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status6_5e5_Can_tx_system_power_modeType_descriptor();
template<typename T>
inline const std::string& Esr_status6_5e5_Can_tx_system_power_modeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status6_5e5_Can_tx_system_power_modeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status6_5e5_Can_tx_system_power_modeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status6_5e5_Can_tx_system_power_modeType_descriptor(), enum_t_value);
}
inline bool Esr_status6_5e5_Can_tx_system_power_modeType_Parse(
    const std::string& name, Esr_status6_5e5_Can_tx_system_power_modeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status6_5e5_Can_tx_system_power_modeType>(
    Esr_status6_5e5_Can_tx_system_power_modeType_descriptor(), name, value);
}
enum Esr_status4_4e3_Can_tx_truck_target_detType : int {
  Esr_status4_4e3_Can_tx_truck_target_detType_CAN_TX_TRUCK_TARGET_DET_NOT_DETECTED = 0,
  Esr_status4_4e3_Can_tx_truck_target_detType_CAN_TX_TRUCK_TARGET_DET_DETECTED = 1
};
bool Esr_status4_4e3_Can_tx_truck_target_detType_IsValid(int value);
constexpr Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3_Can_tx_truck_target_detType_Can_tx_truck_target_detType_MIN = Esr_status4_4e3_Can_tx_truck_target_detType_CAN_TX_TRUCK_TARGET_DET_NOT_DETECTED;
constexpr Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3_Can_tx_truck_target_detType_Can_tx_truck_target_detType_MAX = Esr_status4_4e3_Can_tx_truck_target_detType_CAN_TX_TRUCK_TARGET_DET_DETECTED;
constexpr int Esr_status4_4e3_Can_tx_truck_target_detType_Can_tx_truck_target_detType_ARRAYSIZE = Esr_status4_4e3_Can_tx_truck_target_detType_Can_tx_truck_target_detType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_truck_target_detType_descriptor();
template<typename T>
inline const std::string& Esr_status4_4e3_Can_tx_truck_target_detType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status4_4e3_Can_tx_truck_target_detType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status4_4e3_Can_tx_truck_target_detType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status4_4e3_Can_tx_truck_target_detType_descriptor(), enum_t_value);
}
inline bool Esr_status4_4e3_Can_tx_truck_target_detType_Parse(
    const std::string& name, Esr_status4_4e3_Can_tx_truck_target_detType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status4_4e3_Can_tx_truck_target_detType>(
    Esr_status4_4e3_Can_tx_truck_target_detType_descriptor(), name, value);
}
enum Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType : int {
  Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_CAN_TX_LR_ONLY_GRATING_LOBE_DET_NOT_DETECTED = 0,
  Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_CAN_TX_LR_ONLY_GRATING_LOBE_DET_DETECTED = 1
};
bool Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_IsValid(int value);
constexpr Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Can_tx_lr_only_grating_lobe_detType_MIN = Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_CAN_TX_LR_ONLY_GRATING_LOBE_DET_NOT_DETECTED;
constexpr Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Can_tx_lr_only_grating_lobe_detType_MAX = Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_CAN_TX_LR_ONLY_GRATING_LOBE_DET_DETECTED;
constexpr int Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Can_tx_lr_only_grating_lobe_detType_ARRAYSIZE = Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Can_tx_lr_only_grating_lobe_detType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_descriptor();
template<typename T>
inline const std::string& Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_descriptor(), enum_t_value);
}
inline bool Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Parse(
    const std::string& name, Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType>(
    Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_descriptor(), name, value);
}
enum Esr_status4_4e3_Can_tx_sidelobe_blockageType : int {
  Esr_status4_4e3_Can_tx_sidelobe_blockageType_CAN_TX_SIDELOBE_BLOCKAGE_OFF = 0,
  Esr_status4_4e3_Can_tx_sidelobe_blockageType_CAN_TX_SIDELOBE_BLOCKAGE_ON = 1
};
bool Esr_status4_4e3_Can_tx_sidelobe_blockageType_IsValid(int value);
constexpr Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3_Can_tx_sidelobe_blockageType_Can_tx_sidelobe_blockageType_MIN = Esr_status4_4e3_Can_tx_sidelobe_blockageType_CAN_TX_SIDELOBE_BLOCKAGE_OFF;
constexpr Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3_Can_tx_sidelobe_blockageType_Can_tx_sidelobe_blockageType_MAX = Esr_status4_4e3_Can_tx_sidelobe_blockageType_CAN_TX_SIDELOBE_BLOCKAGE_ON;
constexpr int Esr_status4_4e3_Can_tx_sidelobe_blockageType_Can_tx_sidelobe_blockageType_ARRAYSIZE = Esr_status4_4e3_Can_tx_sidelobe_blockageType_Can_tx_sidelobe_blockageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_sidelobe_blockageType_descriptor();
template<typename T>
inline const std::string& Esr_status4_4e3_Can_tx_sidelobe_blockageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status4_4e3_Can_tx_sidelobe_blockageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status4_4e3_Can_tx_sidelobe_blockageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status4_4e3_Can_tx_sidelobe_blockageType_descriptor(), enum_t_value);
}
inline bool Esr_status4_4e3_Can_tx_sidelobe_blockageType_Parse(
    const std::string& name, Esr_status4_4e3_Can_tx_sidelobe_blockageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status4_4e3_Can_tx_sidelobe_blockageType>(
    Esr_status4_4e3_Can_tx_sidelobe_blockageType_descriptor(), name, value);
}
enum Esr_status4_4e3_Can_tx_partial_blockageType : int {
  Esr_status4_4e3_Can_tx_partial_blockageType_CAN_TX_PARTIAL_BLOCKAGE_NOT_BLOCKED = 0,
  Esr_status4_4e3_Can_tx_partial_blockageType_CAN_TX_PARTIAL_BLOCKAGE_BLOCKED = 1
};
bool Esr_status4_4e3_Can_tx_partial_blockageType_IsValid(int value);
constexpr Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3_Can_tx_partial_blockageType_Can_tx_partial_blockageType_MIN = Esr_status4_4e3_Can_tx_partial_blockageType_CAN_TX_PARTIAL_BLOCKAGE_NOT_BLOCKED;
constexpr Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3_Can_tx_partial_blockageType_Can_tx_partial_blockageType_MAX = Esr_status4_4e3_Can_tx_partial_blockageType_CAN_TX_PARTIAL_BLOCKAGE_BLOCKED;
constexpr int Esr_status4_4e3_Can_tx_partial_blockageType_Can_tx_partial_blockageType_ARRAYSIZE = Esr_status4_4e3_Can_tx_partial_blockageType_Can_tx_partial_blockageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_partial_blockageType_descriptor();
template<typename T>
inline const std::string& Esr_status4_4e3_Can_tx_partial_blockageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status4_4e3_Can_tx_partial_blockageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status4_4e3_Can_tx_partial_blockageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status4_4e3_Can_tx_partial_blockageType_descriptor(), enum_t_value);
}
inline bool Esr_status4_4e3_Can_tx_partial_blockageType_Parse(
    const std::string& name, Esr_status4_4e3_Can_tx_partial_blockageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status4_4e3_Can_tx_partial_blockageType>(
    Esr_status4_4e3_Can_tx_partial_blockageType_descriptor(), name, value);
}
enum Esr_status4_4e3_Can_tx_mr_lr_modeType : int {
  Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_RESERVED = 0,
  Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_OUTPUT_ONLY_MEDIUM_RANGE_TRACKS = 1,
  Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_OUTPUT_ONLY_LONG_RANGE_TRACKS = 2,
  Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_OUTPUT_ALL_MEDIUM_RANGE_AND_LONG = 3
};
bool Esr_status4_4e3_Can_tx_mr_lr_modeType_IsValid(int value);
constexpr Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3_Can_tx_mr_lr_modeType_Can_tx_mr_lr_modeType_MIN = Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_RESERVED;
constexpr Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3_Can_tx_mr_lr_modeType_Can_tx_mr_lr_modeType_MAX = Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_OUTPUT_ALL_MEDIUM_RANGE_AND_LONG;
constexpr int Esr_status4_4e3_Can_tx_mr_lr_modeType_Can_tx_mr_lr_modeType_ARRAYSIZE = Esr_status4_4e3_Can_tx_mr_lr_modeType_Can_tx_mr_lr_modeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status4_4e3_Can_tx_mr_lr_modeType_descriptor();
template<typename T>
inline const std::string& Esr_status4_4e3_Can_tx_mr_lr_modeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status4_4e3_Can_tx_mr_lr_modeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status4_4e3_Can_tx_mr_lr_modeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status4_4e3_Can_tx_mr_lr_modeType_descriptor(), enum_t_value);
}
inline bool Esr_status4_4e3_Can_tx_mr_lr_modeType_Parse(
    const std::string& name, Esr_status4_4e3_Can_tx_mr_lr_modeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status4_4e3_Can_tx_mr_lr_modeType>(
    Esr_status4_4e3_Can_tx_mr_lr_modeType_descriptor(), name, value);
}
enum Esr_track01_500_Can_tx_track_grouping_changedType : int {
  Esr_track01_500_Can_tx_track_grouping_changedType_CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGUNCHANGED = 0,
  Esr_track01_500_Can_tx_track_grouping_changedType_CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGCHANGED = 1
};
bool Esr_track01_500_Can_tx_track_grouping_changedType_IsValid(int value);
constexpr Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500_Can_tx_track_grouping_changedType_Can_tx_track_grouping_changedType_MIN = Esr_track01_500_Can_tx_track_grouping_changedType_CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGUNCHANGED;
constexpr Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500_Can_tx_track_grouping_changedType_Can_tx_track_grouping_changedType_MAX = Esr_track01_500_Can_tx_track_grouping_changedType_CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGCHANGED;
constexpr int Esr_track01_500_Can_tx_track_grouping_changedType_Can_tx_track_grouping_changedType_ARRAYSIZE = Esr_track01_500_Can_tx_track_grouping_changedType_Can_tx_track_grouping_changedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_grouping_changedType_descriptor();
template<typename T>
inline const std::string& Esr_track01_500_Can_tx_track_grouping_changedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_track01_500_Can_tx_track_grouping_changedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_track01_500_Can_tx_track_grouping_changedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_track01_500_Can_tx_track_grouping_changedType_descriptor(), enum_t_value);
}
inline bool Esr_track01_500_Can_tx_track_grouping_changedType_Parse(
    const std::string& name, Esr_track01_500_Can_tx_track_grouping_changedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_track01_500_Can_tx_track_grouping_changedType>(
    Esr_track01_500_Can_tx_track_grouping_changedType_descriptor(), name, value);
}
enum Esr_track01_500_Can_tx_track_oncomingType : int {
  Esr_track01_500_Can_tx_track_oncomingType_CAN_TX_TRACK_ONCOMING_NOTONCOMING = 0,
  Esr_track01_500_Can_tx_track_oncomingType_CAN_TX_TRACK_ONCOMING_ONCOMING = 1
};
bool Esr_track01_500_Can_tx_track_oncomingType_IsValid(int value);
constexpr Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500_Can_tx_track_oncomingType_Can_tx_track_oncomingType_MIN = Esr_track01_500_Can_tx_track_oncomingType_CAN_TX_TRACK_ONCOMING_NOTONCOMING;
constexpr Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500_Can_tx_track_oncomingType_Can_tx_track_oncomingType_MAX = Esr_track01_500_Can_tx_track_oncomingType_CAN_TX_TRACK_ONCOMING_ONCOMING;
constexpr int Esr_track01_500_Can_tx_track_oncomingType_Can_tx_track_oncomingType_ARRAYSIZE = Esr_track01_500_Can_tx_track_oncomingType_Can_tx_track_oncomingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_oncomingType_descriptor();
template<typename T>
inline const std::string& Esr_track01_500_Can_tx_track_oncomingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_track01_500_Can_tx_track_oncomingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_track01_500_Can_tx_track_oncomingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_track01_500_Can_tx_track_oncomingType_descriptor(), enum_t_value);
}
inline bool Esr_track01_500_Can_tx_track_oncomingType_Parse(
    const std::string& name, Esr_track01_500_Can_tx_track_oncomingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_track01_500_Can_tx_track_oncomingType>(
    Esr_track01_500_Can_tx_track_oncomingType_descriptor(), name, value);
}
enum Esr_track01_500_Can_tx_track_bridge_objectType : int {
  Esr_track01_500_Can_tx_track_bridge_objectType_CAN_TX_TRACK_BRIDGE_OBJECT_NOT_BRIDGE = 0,
  Esr_track01_500_Can_tx_track_bridge_objectType_CAN_TX_TRACK_BRIDGE_OBJECT_BRIDGE = 1
};
bool Esr_track01_500_Can_tx_track_bridge_objectType_IsValid(int value);
constexpr Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500_Can_tx_track_bridge_objectType_Can_tx_track_bridge_objectType_MIN = Esr_track01_500_Can_tx_track_bridge_objectType_CAN_TX_TRACK_BRIDGE_OBJECT_NOT_BRIDGE;
constexpr Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500_Can_tx_track_bridge_objectType_Can_tx_track_bridge_objectType_MAX = Esr_track01_500_Can_tx_track_bridge_objectType_CAN_TX_TRACK_BRIDGE_OBJECT_BRIDGE;
constexpr int Esr_track01_500_Can_tx_track_bridge_objectType_Can_tx_track_bridge_objectType_ARRAYSIZE = Esr_track01_500_Can_tx_track_bridge_objectType_Can_tx_track_bridge_objectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_bridge_objectType_descriptor();
template<typename T>
inline const std::string& Esr_track01_500_Can_tx_track_bridge_objectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_track01_500_Can_tx_track_bridge_objectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_track01_500_Can_tx_track_bridge_objectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_track01_500_Can_tx_track_bridge_objectType_descriptor(), enum_t_value);
}
inline bool Esr_track01_500_Can_tx_track_bridge_objectType_Parse(
    const std::string& name, Esr_track01_500_Can_tx_track_bridge_objectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_track01_500_Can_tx_track_bridge_objectType>(
    Esr_track01_500_Can_tx_track_bridge_objectType_descriptor(), name, value);
}
enum Esr_track01_500_Can_tx_track_statusType : int {
  Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NO_TARGET = 0,
  Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NEW_TARGET = 1,
  Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NEW_UPDATED_TARGET = 2,
  Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_UPDATED_TARGET = 3,
  Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_COASTED_TARGET = 4,
  Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_MERGED_TARGET = 5,
  Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_INVALID_COASTED_TARGET = 6,
  Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NEW_COASTED_TARGET = 7
};
bool Esr_track01_500_Can_tx_track_statusType_IsValid(int value);
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500_Can_tx_track_statusType_Can_tx_track_statusType_MIN = Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NO_TARGET;
constexpr Esr_track01_500_Can_tx_track_statusType Esr_track01_500_Can_tx_track_statusType_Can_tx_track_statusType_MAX = Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NEW_COASTED_TARGET;
constexpr int Esr_track01_500_Can_tx_track_statusType_Can_tx_track_statusType_ARRAYSIZE = Esr_track01_500_Can_tx_track_statusType_Can_tx_track_statusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_statusType_descriptor();
template<typename T>
inline const std::string& Esr_track01_500_Can_tx_track_statusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_track01_500_Can_tx_track_statusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_track01_500_Can_tx_track_statusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_track01_500_Can_tx_track_statusType_descriptor(), enum_t_value);
}
inline bool Esr_track01_500_Can_tx_track_statusType_Parse(
    const std::string& name, Esr_track01_500_Can_tx_track_statusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_track01_500_Can_tx_track_statusType>(
    Esr_track01_500_Can_tx_track_statusType_descriptor(), name, value);
}
enum Esr_track01_500_Can_tx_track_med_range_modeType : int {
  Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_NO_MR_LR_UPDATE = 0,
  Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_MR_UPDATE_ONLY = 1,
  Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_LR_UPDATE_ONLY = 2,
  Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_BOTH_MR_LR_UPDATE = 3
};
bool Esr_track01_500_Can_tx_track_med_range_modeType_IsValid(int value);
constexpr Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500_Can_tx_track_med_range_modeType_Can_tx_track_med_range_modeType_MIN = Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_NO_MR_LR_UPDATE;
constexpr Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500_Can_tx_track_med_range_modeType_Can_tx_track_med_range_modeType_MAX = Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_BOTH_MR_LR_UPDATE;
constexpr int Esr_track01_500_Can_tx_track_med_range_modeType_Can_tx_track_med_range_modeType_ARRAYSIZE = Esr_track01_500_Can_tx_track_med_range_modeType_Can_tx_track_med_range_modeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_track01_500_Can_tx_track_med_range_modeType_descriptor();
template<typename T>
inline const std::string& Esr_track01_500_Can_tx_track_med_range_modeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_track01_500_Can_tx_track_med_range_modeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_track01_500_Can_tx_track_med_range_modeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_track01_500_Can_tx_track_med_range_modeType_descriptor(), enum_t_value);
}
inline bool Esr_track01_500_Can_tx_track_med_range_modeType_Parse(
    const std::string& name, Esr_track01_500_Can_tx_track_med_range_modeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_track01_500_Can_tx_track_med_range_modeType>(
    Esr_track01_500_Can_tx_track_med_range_modeType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_mr_only_transmitType : int {
  Vehicle2_4f1_Can_rx_mr_only_transmitType_CAN_RX_MR_ONLY_TRANSMIT_OFF = 0,
  Vehicle2_4f1_Can_rx_mr_only_transmitType_CAN_RX_MR_ONLY_TRANSMIT_ON = 1
};
bool Vehicle2_4f1_Can_rx_mr_only_transmitType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1_Can_rx_mr_only_transmitType_Can_rx_mr_only_transmitType_MIN = Vehicle2_4f1_Can_rx_mr_only_transmitType_CAN_RX_MR_ONLY_TRANSMIT_OFF;
constexpr Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1_Can_rx_mr_only_transmitType_Can_rx_mr_only_transmitType_MAX = Vehicle2_4f1_Can_rx_mr_only_transmitType_CAN_RX_MR_ONLY_TRANSMIT_ON;
constexpr int Vehicle2_4f1_Can_rx_mr_only_transmitType_Can_rx_mr_only_transmitType_ARRAYSIZE = Vehicle2_4f1_Can_rx_mr_only_transmitType_Can_rx_mr_only_transmitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_mr_only_transmitType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_mr_only_transmitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_mr_only_transmitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_mr_only_transmitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_mr_only_transmitType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_mr_only_transmitType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_mr_only_transmitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_mr_only_transmitType>(
    Vehicle2_4f1_Can_rx_mr_only_transmitType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_lr_only_transmitType : int {
  Vehicle2_4f1_Can_rx_lr_only_transmitType_CAN_RX_LR_ONLY_TRANSMIT_OFF = 0,
  Vehicle2_4f1_Can_rx_lr_only_transmitType_CAN_RX_LR_ONLY_TRANSMIT_ON = 1
};
bool Vehicle2_4f1_Can_rx_lr_only_transmitType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1_Can_rx_lr_only_transmitType_Can_rx_lr_only_transmitType_MIN = Vehicle2_4f1_Can_rx_lr_only_transmitType_CAN_RX_LR_ONLY_TRANSMIT_OFF;
constexpr Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1_Can_rx_lr_only_transmitType_Can_rx_lr_only_transmitType_MAX = Vehicle2_4f1_Can_rx_lr_only_transmitType_CAN_RX_LR_ONLY_TRANSMIT_ON;
constexpr int Vehicle2_4f1_Can_rx_lr_only_transmitType_Can_rx_lr_only_transmitType_ARRAYSIZE = Vehicle2_4f1_Can_rx_lr_only_transmitType_Can_rx_lr_only_transmitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_lr_only_transmitType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_lr_only_transmitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_lr_only_transmitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_lr_only_transmitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_lr_only_transmitType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_lr_only_transmitType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_lr_only_transmitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_lr_only_transmitType>(
    Vehicle2_4f1_Can_rx_lr_only_transmitType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_clear_faultsType : int {
  Vehicle2_4f1_Can_rx_clear_faultsType_CAN_RX_CLEAR_FAULTS_OFF = 0,
  Vehicle2_4f1_Can_rx_clear_faultsType_CAN_RX_CLEAR_FAULTS_ON = 1
};
bool Vehicle2_4f1_Can_rx_clear_faultsType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1_Can_rx_clear_faultsType_Can_rx_clear_faultsType_MIN = Vehicle2_4f1_Can_rx_clear_faultsType_CAN_RX_CLEAR_FAULTS_OFF;
constexpr Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1_Can_rx_clear_faultsType_Can_rx_clear_faultsType_MAX = Vehicle2_4f1_Can_rx_clear_faultsType_CAN_RX_CLEAR_FAULTS_ON;
constexpr int Vehicle2_4f1_Can_rx_clear_faultsType_Can_rx_clear_faultsType_ARRAYSIZE = Vehicle2_4f1_Can_rx_clear_faultsType_Can_rx_clear_faultsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_clear_faultsType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_clear_faultsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_clear_faultsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_clear_faultsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_clear_faultsType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_clear_faultsType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_clear_faultsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_clear_faultsType>(
    Vehicle2_4f1_Can_rx_clear_faultsType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_use_angle_misalignmentType : int {
  Vehicle2_4f1_Can_rx_use_angle_misalignmentType_CAN_RX_USE_ANGLE_MISALIGNMENT_OFF = 0,
  Vehicle2_4f1_Can_rx_use_angle_misalignmentType_CAN_RX_USE_ANGLE_MISALIGNMENT_ON = 1
};
bool Vehicle2_4f1_Can_rx_use_angle_misalignmentType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Can_rx_use_angle_misalignmentType_MIN = Vehicle2_4f1_Can_rx_use_angle_misalignmentType_CAN_RX_USE_ANGLE_MISALIGNMENT_OFF;
constexpr Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Can_rx_use_angle_misalignmentType_MAX = Vehicle2_4f1_Can_rx_use_angle_misalignmentType_CAN_RX_USE_ANGLE_MISALIGNMENT_ON;
constexpr int Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Can_rx_use_angle_misalignmentType_ARRAYSIZE = Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Can_rx_use_angle_misalignmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_use_angle_misalignmentType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_use_angle_misalignmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_use_angle_misalignmentType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_use_angle_misalignmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_use_angle_misalignmentType>(
    Vehicle2_4f1_Can_rx_use_angle_misalignmentType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_turn_signal_statusType : int {
  Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_OFF = 0,
  Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_LEFT = 1,
  Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_RIGHT = 2,
  Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_INVALID_3 = 3
};
bool Vehicle2_4f1_Can_rx_turn_signal_statusType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1_Can_rx_turn_signal_statusType_Can_rx_turn_signal_statusType_MIN = Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_OFF;
constexpr Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1_Can_rx_turn_signal_statusType_Can_rx_turn_signal_statusType_MAX = Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_INVALID_3;
constexpr int Vehicle2_4f1_Can_rx_turn_signal_statusType_Can_rx_turn_signal_statusType_ARRAYSIZE = Vehicle2_4f1_Can_rx_turn_signal_statusType_Can_rx_turn_signal_statusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_turn_signal_statusType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_turn_signal_statusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_turn_signal_statusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_turn_signal_statusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_turn_signal_statusType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_turn_signal_statusType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_turn_signal_statusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_turn_signal_statusType>(
    Vehicle2_4f1_Can_rx_turn_signal_statusType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_blockage_disableType : int {
  Vehicle2_4f1_Can_rx_blockage_disableType_CAN_RX_BLOCKAGE_DISABLE_ENABLED = 0,
  Vehicle2_4f1_Can_rx_blockage_disableType_CAN_RX_BLOCKAGE_DISABLE_DISABLED = 1
};
bool Vehicle2_4f1_Can_rx_blockage_disableType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1_Can_rx_blockage_disableType_Can_rx_blockage_disableType_MIN = Vehicle2_4f1_Can_rx_blockage_disableType_CAN_RX_BLOCKAGE_DISABLE_ENABLED;
constexpr Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1_Can_rx_blockage_disableType_Can_rx_blockage_disableType_MAX = Vehicle2_4f1_Can_rx_blockage_disableType_CAN_RX_BLOCKAGE_DISABLE_DISABLED;
constexpr int Vehicle2_4f1_Can_rx_blockage_disableType_Can_rx_blockage_disableType_ARRAYSIZE = Vehicle2_4f1_Can_rx_blockage_disableType_Can_rx_blockage_disableType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_blockage_disableType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_blockage_disableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_blockage_disableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_blockage_disableType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_blockage_disableType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_blockage_disableType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_blockage_disableType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_blockage_disableType>(
    Vehicle2_4f1_Can_rx_blockage_disableType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_vehicle_speed_validityType : int {
  Vehicle2_4f1_Can_rx_vehicle_speed_validityType_CAN_RX_VEHICLE_SPEED_VALIDITY_INVALID = 0,
  Vehicle2_4f1_Can_rx_vehicle_speed_validityType_CAN_RX_VEHICLE_SPEED_VALIDITY_VALID = 1
};
bool Vehicle2_4f1_Can_rx_vehicle_speed_validityType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Can_rx_vehicle_speed_validityType_MIN = Vehicle2_4f1_Can_rx_vehicle_speed_validityType_CAN_RX_VEHICLE_SPEED_VALIDITY_INVALID;
constexpr Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Can_rx_vehicle_speed_validityType_MAX = Vehicle2_4f1_Can_rx_vehicle_speed_validityType_CAN_RX_VEHICLE_SPEED_VALIDITY_VALID;
constexpr int Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Can_rx_vehicle_speed_validityType_ARRAYSIZE = Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Can_rx_vehicle_speed_validityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_vehicle_speed_validityType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_vehicle_speed_validityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_vehicle_speed_validityType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_vehicle_speed_validityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_vehicle_speed_validityType>(
    Vehicle2_4f1_Can_rx_vehicle_speed_validityType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_mmr_upside_downType : int {
  Vehicle2_4f1_Can_rx_mmr_upside_downType_CAN_RX_MMR_UPSIDE_DOWN_RIGHT_SIDE_UP = 0,
  Vehicle2_4f1_Can_rx_mmr_upside_downType_CAN_RX_MMR_UPSIDE_DOWN_UPSIDE_DOWN = 1
};
bool Vehicle2_4f1_Can_rx_mmr_upside_downType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1_Can_rx_mmr_upside_downType_Can_rx_mmr_upside_downType_MIN = Vehicle2_4f1_Can_rx_mmr_upside_downType_CAN_RX_MMR_UPSIDE_DOWN_RIGHT_SIDE_UP;
constexpr Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1_Can_rx_mmr_upside_downType_Can_rx_mmr_upside_downType_MAX = Vehicle2_4f1_Can_rx_mmr_upside_downType_CAN_RX_MMR_UPSIDE_DOWN_UPSIDE_DOWN;
constexpr int Vehicle2_4f1_Can_rx_mmr_upside_downType_Can_rx_mmr_upside_downType_ARRAYSIZE = Vehicle2_4f1_Can_rx_mmr_upside_downType_Can_rx_mmr_upside_downType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_mmr_upside_downType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_mmr_upside_downType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_mmr_upside_downType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_mmr_upside_downType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_mmr_upside_downType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_mmr_upside_downType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_mmr_upside_downType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_mmr_upside_downType>(
    Vehicle2_4f1_Can_rx_mmr_upside_downType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_wiper_statusType : int {
  Vehicle2_4f1_Can_rx_wiper_statusType_CAN_RX_WIPER_STATUS_OFF = 0,
  Vehicle2_4f1_Can_rx_wiper_statusType_CAN_RX_WIPER_STATUS_ON = 1
};
bool Vehicle2_4f1_Can_rx_wiper_statusType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1_Can_rx_wiper_statusType_Can_rx_wiper_statusType_MIN = Vehicle2_4f1_Can_rx_wiper_statusType_CAN_RX_WIPER_STATUS_OFF;
constexpr Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1_Can_rx_wiper_statusType_Can_rx_wiper_statusType_MAX = Vehicle2_4f1_Can_rx_wiper_statusType_CAN_RX_WIPER_STATUS_ON;
constexpr int Vehicle2_4f1_Can_rx_wiper_statusType_Can_rx_wiper_statusType_ARRAYSIZE = Vehicle2_4f1_Can_rx_wiper_statusType_Can_rx_wiper_statusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_wiper_statusType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_wiper_statusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_wiper_statusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_wiper_statusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_wiper_statusType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_wiper_statusType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_wiper_statusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_wiper_statusType>(
    Vehicle2_4f1_Can_rx_wiper_statusType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_raw_data_enableType : int {
  Vehicle2_4f1_Can_rx_raw_data_enableType_CAN_RX_RAW_DATA_ENABLE_FILTERED = 0,
  Vehicle2_4f1_Can_rx_raw_data_enableType_CAN_RX_RAW_DATA_ENABLE_RAW = 1
};
bool Vehicle2_4f1_Can_rx_raw_data_enableType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1_Can_rx_raw_data_enableType_Can_rx_raw_data_enableType_MIN = Vehicle2_4f1_Can_rx_raw_data_enableType_CAN_RX_RAW_DATA_ENABLE_FILTERED;
constexpr Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1_Can_rx_raw_data_enableType_Can_rx_raw_data_enableType_MAX = Vehicle2_4f1_Can_rx_raw_data_enableType_CAN_RX_RAW_DATA_ENABLE_RAW;
constexpr int Vehicle2_4f1_Can_rx_raw_data_enableType_Can_rx_raw_data_enableType_ARRAYSIZE = Vehicle2_4f1_Can_rx_raw_data_enableType_Can_rx_raw_data_enableType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_raw_data_enableType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_raw_data_enableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_raw_data_enableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_raw_data_enableType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_raw_data_enableType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_raw_data_enableType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_raw_data_enableType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_raw_data_enableType>(
    Vehicle2_4f1_Can_rx_raw_data_enableType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_radar_cmd_radiateType : int {
  Vehicle2_4f1_Can_rx_radar_cmd_radiateType_CAN_RX_RADAR_CMD_RADIATE_OFF = 0,
  Vehicle2_4f1_Can_rx_radar_cmd_radiateType_CAN_RX_RADAR_CMD_RADIATE_ON = 1
};
bool Vehicle2_4f1_Can_rx_radar_cmd_radiateType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Can_rx_radar_cmd_radiateType_MIN = Vehicle2_4f1_Can_rx_radar_cmd_radiateType_CAN_RX_RADAR_CMD_RADIATE_OFF;
constexpr Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Can_rx_radar_cmd_radiateType_MAX = Vehicle2_4f1_Can_rx_radar_cmd_radiateType_CAN_RX_RADAR_CMD_RADIATE_ON;
constexpr int Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Can_rx_radar_cmd_radiateType_ARRAYSIZE = Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Can_rx_radar_cmd_radiateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_radar_cmd_radiateType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_radar_cmd_radiateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_radar_cmd_radiateType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_radar_cmd_radiateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_radar_cmd_radiateType>(
    Vehicle2_4f1_Can_rx_radar_cmd_radiateType_descriptor(), name, value);
}
enum Vehicle2_4f1_Can_rx_grouping_modeType : int {
  Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_NO_GROUPING = 0,
  Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_GROUP_MOVING_ONLY = 1,
  Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_GROUP_STATIONARY_ONLY = 2,
  Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_GROUP_MOVING_STATIONARY = 3
};
bool Vehicle2_4f1_Can_rx_grouping_modeType_IsValid(int value);
constexpr Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1_Can_rx_grouping_modeType_Can_rx_grouping_modeType_MIN = Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_NO_GROUPING;
constexpr Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1_Can_rx_grouping_modeType_Can_rx_grouping_modeType_MAX = Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_GROUP_MOVING_STATIONARY;
constexpr int Vehicle2_4f1_Can_rx_grouping_modeType_Can_rx_grouping_modeType_ARRAYSIZE = Vehicle2_4f1_Can_rx_grouping_modeType_Can_rx_grouping_modeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle2_4f1_Can_rx_grouping_modeType_descriptor();
template<typename T>
inline const std::string& Vehicle2_4f1_Can_rx_grouping_modeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle2_4f1_Can_rx_grouping_modeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle2_4f1_Can_rx_grouping_modeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle2_4f1_Can_rx_grouping_modeType_descriptor(), enum_t_value);
}
inline bool Vehicle2_4f1_Can_rx_grouping_modeType_Parse(
    const std::string& name, Vehicle2_4f1_Can_rx_grouping_modeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle2_4f1_Can_rx_grouping_modeType>(
    Vehicle2_4f1_Can_rx_grouping_modeType_descriptor(), name, value);
}
enum Vehicle1_4f0_Can_rx_steering_angle_validityType : int {
  Vehicle1_4f0_Can_rx_steering_angle_validityType_CAN_RX_STEERING_ANGLE_VALIDITY_INVALID = 0,
  Vehicle1_4f0_Can_rx_steering_angle_validityType_CAN_RX_STEERING_ANGLE_VALIDITY_VALID = 1
};
bool Vehicle1_4f0_Can_rx_steering_angle_validityType_IsValid(int value);
constexpr Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0_Can_rx_steering_angle_validityType_Can_rx_steering_angle_validityType_MIN = Vehicle1_4f0_Can_rx_steering_angle_validityType_CAN_RX_STEERING_ANGLE_VALIDITY_INVALID;
constexpr Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0_Can_rx_steering_angle_validityType_Can_rx_steering_angle_validityType_MAX = Vehicle1_4f0_Can_rx_steering_angle_validityType_CAN_RX_STEERING_ANGLE_VALIDITY_VALID;
constexpr int Vehicle1_4f0_Can_rx_steering_angle_validityType_Can_rx_steering_angle_validityType_ARRAYSIZE = Vehicle1_4f0_Can_rx_steering_angle_validityType_Can_rx_steering_angle_validityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_validityType_descriptor();
template<typename T>
inline const std::string& Vehicle1_4f0_Can_rx_steering_angle_validityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle1_4f0_Can_rx_steering_angle_validityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle1_4f0_Can_rx_steering_angle_validityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle1_4f0_Can_rx_steering_angle_validityType_descriptor(), enum_t_value);
}
inline bool Vehicle1_4f0_Can_rx_steering_angle_validityType_Parse(
    const std::string& name, Vehicle1_4f0_Can_rx_steering_angle_validityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle1_4f0_Can_rx_steering_angle_validityType>(
    Vehicle1_4f0_Can_rx_steering_angle_validityType_descriptor(), name, value);
}
enum Vehicle1_4f0_Can_rx_steering_angle_signType : int {
  Vehicle1_4f0_Can_rx_steering_angle_signType_CAN_RX_STEERING_ANGLE_SIGN_COUNTERCLOCKWISE = 0,
  Vehicle1_4f0_Can_rx_steering_angle_signType_CAN_RX_STEERING_ANGLE_SIGN_CLOCKWISE = 1
};
bool Vehicle1_4f0_Can_rx_steering_angle_signType_IsValid(int value);
constexpr Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0_Can_rx_steering_angle_signType_Can_rx_steering_angle_signType_MIN = Vehicle1_4f0_Can_rx_steering_angle_signType_CAN_RX_STEERING_ANGLE_SIGN_COUNTERCLOCKWISE;
constexpr Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0_Can_rx_steering_angle_signType_Can_rx_steering_angle_signType_MAX = Vehicle1_4f0_Can_rx_steering_angle_signType_CAN_RX_STEERING_ANGLE_SIGN_CLOCKWISE;
constexpr int Vehicle1_4f0_Can_rx_steering_angle_signType_Can_rx_steering_angle_signType_ARRAYSIZE = Vehicle1_4f0_Can_rx_steering_angle_signType_Can_rx_steering_angle_signType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_signType_descriptor();
template<typename T>
inline const std::string& Vehicle1_4f0_Can_rx_steering_angle_signType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle1_4f0_Can_rx_steering_angle_signType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle1_4f0_Can_rx_steering_angle_signType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle1_4f0_Can_rx_steering_angle_signType_descriptor(), enum_t_value);
}
inline bool Vehicle1_4f0_Can_rx_steering_angle_signType_Parse(
    const std::string& name, Vehicle1_4f0_Can_rx_steering_angle_signType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle1_4f0_Can_rx_steering_angle_signType>(
    Vehicle1_4f0_Can_rx_steering_angle_signType_descriptor(), name, value);
}
enum Vehicle1_4f0_Can_rx_steering_angle_rate_signType : int {
  Vehicle1_4f0_Can_rx_steering_angle_rate_signType_CAN_RX_STEERING_ANGLE_RATE_SIGN_COUNTERCLOCKWISE = 0,
  Vehicle1_4f0_Can_rx_steering_angle_rate_signType_CAN_RX_STEERING_ANGLE_RATE_SIGN_CLOCKWISE = 1
};
bool Vehicle1_4f0_Can_rx_steering_angle_rate_signType_IsValid(int value);
constexpr Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Can_rx_steering_angle_rate_signType_MIN = Vehicle1_4f0_Can_rx_steering_angle_rate_signType_CAN_RX_STEERING_ANGLE_RATE_SIGN_COUNTERCLOCKWISE;
constexpr Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Can_rx_steering_angle_rate_signType_MAX = Vehicle1_4f0_Can_rx_steering_angle_rate_signType_CAN_RX_STEERING_ANGLE_RATE_SIGN_CLOCKWISE;
constexpr int Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Can_rx_steering_angle_rate_signType_ARRAYSIZE = Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Can_rx_steering_angle_rate_signType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_steering_angle_rate_signType_descriptor();
template<typename T>
inline const std::string& Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle1_4f0_Can_rx_steering_angle_rate_signType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle1_4f0_Can_rx_steering_angle_rate_signType_descriptor(), enum_t_value);
}
inline bool Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Parse(
    const std::string& name, Vehicle1_4f0_Can_rx_steering_angle_rate_signType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle1_4f0_Can_rx_steering_angle_rate_signType>(
    Vehicle1_4f0_Can_rx_steering_angle_rate_signType_descriptor(), name, value);
}
enum Vehicle1_4f0_Can_rx_yaw_rate_validityType : int {
  Vehicle1_4f0_Can_rx_yaw_rate_validityType_CAN_RX_YAW_RATE_VALIDITY_INVALID = 0,
  Vehicle1_4f0_Can_rx_yaw_rate_validityType_CAN_RX_YAW_RATE_VALIDITY_VALID = 1
};
bool Vehicle1_4f0_Can_rx_yaw_rate_validityType_IsValid(int value);
constexpr Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0_Can_rx_yaw_rate_validityType_Can_rx_yaw_rate_validityType_MIN = Vehicle1_4f0_Can_rx_yaw_rate_validityType_CAN_RX_YAW_RATE_VALIDITY_INVALID;
constexpr Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0_Can_rx_yaw_rate_validityType_Can_rx_yaw_rate_validityType_MAX = Vehicle1_4f0_Can_rx_yaw_rate_validityType_CAN_RX_YAW_RATE_VALIDITY_VALID;
constexpr int Vehicle1_4f0_Can_rx_yaw_rate_validityType_Can_rx_yaw_rate_validityType_ARRAYSIZE = Vehicle1_4f0_Can_rx_yaw_rate_validityType_Can_rx_yaw_rate_validityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_yaw_rate_validityType_descriptor();
template<typename T>
inline const std::string& Vehicle1_4f0_Can_rx_yaw_rate_validityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle1_4f0_Can_rx_yaw_rate_validityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle1_4f0_Can_rx_yaw_rate_validityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle1_4f0_Can_rx_yaw_rate_validityType_descriptor(), enum_t_value);
}
inline bool Vehicle1_4f0_Can_rx_yaw_rate_validityType_Parse(
    const std::string& name, Vehicle1_4f0_Can_rx_yaw_rate_validityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle1_4f0_Can_rx_yaw_rate_validityType>(
    Vehicle1_4f0_Can_rx_yaw_rate_validityType_descriptor(), name, value);
}
enum Vehicle1_4f0_Can_rx_vehicle_speed_directionType : int {
  Vehicle1_4f0_Can_rx_vehicle_speed_directionType_CAN_RX_VEHICLE_SPEED_DIRECTION_FORWARD = 0,
  Vehicle1_4f0_Can_rx_vehicle_speed_directionType_CAN_RX_VEHICLE_SPEED_DIRECTION_REVERSE = 1
};
bool Vehicle1_4f0_Can_rx_vehicle_speed_directionType_IsValid(int value);
constexpr Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Can_rx_vehicle_speed_directionType_MIN = Vehicle1_4f0_Can_rx_vehicle_speed_directionType_CAN_RX_VEHICLE_SPEED_DIRECTION_FORWARD;
constexpr Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Can_rx_vehicle_speed_directionType_MAX = Vehicle1_4f0_Can_rx_vehicle_speed_directionType_CAN_RX_VEHICLE_SPEED_DIRECTION_REVERSE;
constexpr int Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Can_rx_vehicle_speed_directionType_ARRAYSIZE = Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Can_rx_vehicle_speed_directionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle1_4f0_Can_rx_vehicle_speed_directionType_descriptor();
template<typename T>
inline const std::string& Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle1_4f0_Can_rx_vehicle_speed_directionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle1_4f0_Can_rx_vehicle_speed_directionType_descriptor(), enum_t_value);
}
inline bool Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Parse(
    const std::string& name, Vehicle1_4f0_Can_rx_vehicle_speed_directionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle1_4f0_Can_rx_vehicle_speed_directionType>(
    Vehicle1_4f0_Can_rx_vehicle_speed_directionType_descriptor(), name, value);
}
enum Esr_sim1_5c0_Can_rx_sim_track_idType : int {
  Esr_sim1_5c0_Can_rx_sim_track_idType_CAN_RX_SIM_TRACK_ID_NO_TARGET = 0,
  Esr_sim1_5c0_Can_rx_sim_track_idType_CAN_RX_SIM_TRACK_ID_TARGET_1 = 1,
  Esr_sim1_5c0_Can_rx_sim_track_idType_CAN_RX_SIM_TRACK_ID_TARGET_2 = 2
};
bool Esr_sim1_5c0_Can_rx_sim_track_idType_IsValid(int value);
constexpr Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0_Can_rx_sim_track_idType_Can_rx_sim_track_idType_MIN = Esr_sim1_5c0_Can_rx_sim_track_idType_CAN_RX_SIM_TRACK_ID_NO_TARGET;
constexpr Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0_Can_rx_sim_track_idType_Can_rx_sim_track_idType_MAX = Esr_sim1_5c0_Can_rx_sim_track_idType_CAN_RX_SIM_TRACK_ID_TARGET_2;
constexpr int Esr_sim1_5c0_Can_rx_sim_track_idType_Can_rx_sim_track_idType_ARRAYSIZE = Esr_sim1_5c0_Can_rx_sim_track_idType_Can_rx_sim_track_idType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_track_idType_descriptor();
template<typename T>
inline const std::string& Esr_sim1_5c0_Can_rx_sim_track_idType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_sim1_5c0_Can_rx_sim_track_idType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_sim1_5c0_Can_rx_sim_track_idType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_sim1_5c0_Can_rx_sim_track_idType_descriptor(), enum_t_value);
}
inline bool Esr_sim1_5c0_Can_rx_sim_track_idType_Parse(
    const std::string& name, Esr_sim1_5c0_Can_rx_sim_track_idType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_sim1_5c0_Can_rx_sim_track_idType>(
    Esr_sim1_5c0_Can_rx_sim_track_idType_descriptor(), name, value);
}
enum Esr_sim1_5c0_Can_rx_sim_statusType : int {
  Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_INVALID = 0,
  Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_NEW = 1,
  Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_UPDATED = 2,
  Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_COASTED = 3
};
bool Esr_sim1_5c0_Can_rx_sim_statusType_IsValid(int value);
constexpr Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0_Can_rx_sim_statusType_Can_rx_sim_statusType_MIN = Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_INVALID;
constexpr Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0_Can_rx_sim_statusType_Can_rx_sim_statusType_MAX = Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_COASTED;
constexpr int Esr_sim1_5c0_Can_rx_sim_statusType_Can_rx_sim_statusType_ARRAYSIZE = Esr_sim1_5c0_Can_rx_sim_statusType_Can_rx_sim_statusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_statusType_descriptor();
template<typename T>
inline const std::string& Esr_sim1_5c0_Can_rx_sim_statusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_sim1_5c0_Can_rx_sim_statusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_sim1_5c0_Can_rx_sim_statusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_sim1_5c0_Can_rx_sim_statusType_descriptor(), enum_t_value);
}
inline bool Esr_sim1_5c0_Can_rx_sim_statusType_Parse(
    const std::string& name, Esr_sim1_5c0_Can_rx_sim_statusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_sim1_5c0_Can_rx_sim_statusType>(
    Esr_sim1_5c0_Can_rx_sim_statusType_descriptor(), name, value);
}
enum Esr_sim1_5c0_Can_rx_sim_functionType : int {
  Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_ACC = 0,
  Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_RI = 1,
  Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_FCW_MOVE = 2,
  Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_FCW_STAT = 3,
  Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_CMBB_MOVE = 4,
  Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_CMBB_STAT = 5,
  Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_ALL_MOVING_ACC_FCW_CMBB = 6,
  Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_ALL_STAT_RI_FCW_CMBB = 7
};
bool Esr_sim1_5c0_Can_rx_sim_functionType_IsValid(int value);
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0_Can_rx_sim_functionType_Can_rx_sim_functionType_MIN = Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_ACC;
constexpr Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0_Can_rx_sim_functionType_Can_rx_sim_functionType_MAX = Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_ALL_STAT_RI_FCW_CMBB;
constexpr int Esr_sim1_5c0_Can_rx_sim_functionType_Can_rx_sim_functionType_ARRAYSIZE = Esr_sim1_5c0_Can_rx_sim_functionType_Can_rx_sim_functionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_sim1_5c0_Can_rx_sim_functionType_descriptor();
template<typename T>
inline const std::string& Esr_sim1_5c0_Can_rx_sim_functionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_sim1_5c0_Can_rx_sim_functionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_sim1_5c0_Can_rx_sim_functionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_sim1_5c0_Can_rx_sim_functionType_descriptor(), enum_t_value);
}
inline bool Esr_sim1_5c0_Can_rx_sim_functionType_Parse(
    const std::string& name, Esr_sim1_5c0_Can_rx_sim_functionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_sim1_5c0_Can_rx_sim_functionType>(
    Esr_sim1_5c0_Can_rx_sim_functionType_descriptor(), name, value);
}
enum Esr_status2_4e1_Can_tx_raw_data_modeType : int {
  Esr_status2_4e1_Can_tx_raw_data_modeType_CAN_TX_RAW_DATA_MODE_FILTERED = 0,
  Esr_status2_4e1_Can_tx_raw_data_modeType_CAN_TX_RAW_DATA_MODE_RAW = 1
};
bool Esr_status2_4e1_Can_tx_raw_data_modeType_IsValid(int value);
constexpr Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1_Can_tx_raw_data_modeType_Can_tx_raw_data_modeType_MIN = Esr_status2_4e1_Can_tx_raw_data_modeType_CAN_TX_RAW_DATA_MODE_FILTERED;
constexpr Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1_Can_tx_raw_data_modeType_Can_tx_raw_data_modeType_MAX = Esr_status2_4e1_Can_tx_raw_data_modeType_CAN_TX_RAW_DATA_MODE_RAW;
constexpr int Esr_status2_4e1_Can_tx_raw_data_modeType_Can_tx_raw_data_modeType_ARRAYSIZE = Esr_status2_4e1_Can_tx_raw_data_modeType_Can_tx_raw_data_modeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_raw_data_modeType_descriptor();
template<typename T>
inline const std::string& Esr_status2_4e1_Can_tx_raw_data_modeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status2_4e1_Can_tx_raw_data_modeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status2_4e1_Can_tx_raw_data_modeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status2_4e1_Can_tx_raw_data_modeType_descriptor(), enum_t_value);
}
inline bool Esr_status2_4e1_Can_tx_raw_data_modeType_Parse(
    const std::string& name, Esr_status2_4e1_Can_tx_raw_data_modeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status2_4e1_Can_tx_raw_data_modeType>(
    Esr_status2_4e1_Can_tx_raw_data_modeType_descriptor(), name, value);
}
enum Esr_status2_4e1_Can_tx_range_perf_errorType : int {
  Esr_status2_4e1_Can_tx_range_perf_errorType_CAN_TX_RANGE_PERF_ERROR_NOT_BLOCKED = 0,
  Esr_status2_4e1_Can_tx_range_perf_errorType_CAN_TX_RANGE_PERF_ERROR_BLOCKED = 1
};
bool Esr_status2_4e1_Can_tx_range_perf_errorType_IsValid(int value);
constexpr Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1_Can_tx_range_perf_errorType_Can_tx_range_perf_errorType_MIN = Esr_status2_4e1_Can_tx_range_perf_errorType_CAN_TX_RANGE_PERF_ERROR_NOT_BLOCKED;
constexpr Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1_Can_tx_range_perf_errorType_Can_tx_range_perf_errorType_MAX = Esr_status2_4e1_Can_tx_range_perf_errorType_CAN_TX_RANGE_PERF_ERROR_BLOCKED;
constexpr int Esr_status2_4e1_Can_tx_range_perf_errorType_Can_tx_range_perf_errorType_ARRAYSIZE = Esr_status2_4e1_Can_tx_range_perf_errorType_Can_tx_range_perf_errorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_range_perf_errorType_descriptor();
template<typename T>
inline const std::string& Esr_status2_4e1_Can_tx_range_perf_errorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status2_4e1_Can_tx_range_perf_errorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status2_4e1_Can_tx_range_perf_errorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status2_4e1_Can_tx_range_perf_errorType_descriptor(), enum_t_value);
}
inline bool Esr_status2_4e1_Can_tx_range_perf_errorType_Parse(
    const std::string& name, Esr_status2_4e1_Can_tx_range_perf_errorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status2_4e1_Can_tx_range_perf_errorType>(
    Esr_status2_4e1_Can_tx_range_perf_errorType_descriptor(), name, value);
}
enum Esr_status2_4e1_Can_tx_overheat_errorType : int {
  Esr_status2_4e1_Can_tx_overheat_errorType_CAN_TX_OVERHEAT_ERROR_NOT_OVERTEMP = 0,
  Esr_status2_4e1_Can_tx_overheat_errorType_CAN_TX_OVERHEAT_ERROR_OVERTEMP = 1
};
bool Esr_status2_4e1_Can_tx_overheat_errorType_IsValid(int value);
constexpr Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1_Can_tx_overheat_errorType_Can_tx_overheat_errorType_MIN = Esr_status2_4e1_Can_tx_overheat_errorType_CAN_TX_OVERHEAT_ERROR_NOT_OVERTEMP;
constexpr Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1_Can_tx_overheat_errorType_Can_tx_overheat_errorType_MAX = Esr_status2_4e1_Can_tx_overheat_errorType_CAN_TX_OVERHEAT_ERROR_OVERTEMP;
constexpr int Esr_status2_4e1_Can_tx_overheat_errorType_Can_tx_overheat_errorType_ARRAYSIZE = Esr_status2_4e1_Can_tx_overheat_errorType_Can_tx_overheat_errorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_overheat_errorType_descriptor();
template<typename T>
inline const std::string& Esr_status2_4e1_Can_tx_overheat_errorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status2_4e1_Can_tx_overheat_errorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status2_4e1_Can_tx_overheat_errorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status2_4e1_Can_tx_overheat_errorType_descriptor(), enum_t_value);
}
inline bool Esr_status2_4e1_Can_tx_overheat_errorType_Parse(
    const std::string& name, Esr_status2_4e1_Can_tx_overheat_errorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status2_4e1_Can_tx_overheat_errorType>(
    Esr_status2_4e1_Can_tx_overheat_errorType_descriptor(), name, value);
}
enum Esr_status2_4e1_Can_tx_internal_errorType : int {
  Esr_status2_4e1_Can_tx_internal_errorType_CAN_TX_INTERNAL_ERROR_NOT_FAILED = 0,
  Esr_status2_4e1_Can_tx_internal_errorType_CAN_TX_INTERNAL_ERROR_FAILED = 1
};
bool Esr_status2_4e1_Can_tx_internal_errorType_IsValid(int value);
constexpr Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1_Can_tx_internal_errorType_Can_tx_internal_errorType_MIN = Esr_status2_4e1_Can_tx_internal_errorType_CAN_TX_INTERNAL_ERROR_NOT_FAILED;
constexpr Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1_Can_tx_internal_errorType_Can_tx_internal_errorType_MAX = Esr_status2_4e1_Can_tx_internal_errorType_CAN_TX_INTERNAL_ERROR_FAILED;
constexpr int Esr_status2_4e1_Can_tx_internal_errorType_Can_tx_internal_errorType_ARRAYSIZE = Esr_status2_4e1_Can_tx_internal_errorType_Can_tx_internal_errorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_internal_errorType_descriptor();
template<typename T>
inline const std::string& Esr_status2_4e1_Can_tx_internal_errorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status2_4e1_Can_tx_internal_errorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status2_4e1_Can_tx_internal_errorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status2_4e1_Can_tx_internal_errorType_descriptor(), enum_t_value);
}
inline bool Esr_status2_4e1_Can_tx_internal_errorType_Parse(
    const std::string& name, Esr_status2_4e1_Can_tx_internal_errorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status2_4e1_Can_tx_internal_errorType>(
    Esr_status2_4e1_Can_tx_internal_errorType_descriptor(), name, value);
}
enum Esr_status2_4e1_Can_tx_grouping_modeType : int {
  Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_NO_GROUPING = 0,
  Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_GROUP_MOVING_ONLY = 1,
  Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_GROUP_STATIONARY_ONLY = 2,
  Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_GROUP_MOVING_STATIONARY = 3
};
bool Esr_status2_4e1_Can_tx_grouping_modeType_IsValid(int value);
constexpr Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1_Can_tx_grouping_modeType_Can_tx_grouping_modeType_MIN = Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_NO_GROUPING;
constexpr Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1_Can_tx_grouping_modeType_Can_tx_grouping_modeType_MAX = Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_GROUP_MOVING_STATIONARY;
constexpr int Esr_status2_4e1_Can_tx_grouping_modeType_Can_tx_grouping_modeType_ARRAYSIZE = Esr_status2_4e1_Can_tx_grouping_modeType_Can_tx_grouping_modeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_grouping_modeType_descriptor();
template<typename T>
inline const std::string& Esr_status2_4e1_Can_tx_grouping_modeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status2_4e1_Can_tx_grouping_modeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status2_4e1_Can_tx_grouping_modeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status2_4e1_Can_tx_grouping_modeType_descriptor(), enum_t_value);
}
inline bool Esr_status2_4e1_Can_tx_grouping_modeType_Parse(
    const std::string& name, Esr_status2_4e1_Can_tx_grouping_modeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status2_4e1_Can_tx_grouping_modeType>(
    Esr_status2_4e1_Can_tx_grouping_modeType_descriptor(), name, value);
}
enum Esr_status2_4e1_Can_tx_xcvr_operationalType : int {
  Esr_status2_4e1_Can_tx_xcvr_operationalType_CAN_TX_XCVR_OPERATIONAL_OFF = 0,
  Esr_status2_4e1_Can_tx_xcvr_operationalType_CAN_TX_XCVR_OPERATIONAL_ON = 1
};
bool Esr_status2_4e1_Can_tx_xcvr_operationalType_IsValid(int value);
constexpr Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1_Can_tx_xcvr_operationalType_Can_tx_xcvr_operationalType_MIN = Esr_status2_4e1_Can_tx_xcvr_operationalType_CAN_TX_XCVR_OPERATIONAL_OFF;
constexpr Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1_Can_tx_xcvr_operationalType_Can_tx_xcvr_operationalType_MAX = Esr_status2_4e1_Can_tx_xcvr_operationalType_CAN_TX_XCVR_OPERATIONAL_ON;
constexpr int Esr_status2_4e1_Can_tx_xcvr_operationalType_Can_tx_xcvr_operationalType_ARRAYSIZE = Esr_status2_4e1_Can_tx_xcvr_operationalType_Can_tx_xcvr_operationalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Esr_status2_4e1_Can_tx_xcvr_operationalType_descriptor();
template<typename T>
inline const std::string& Esr_status2_4e1_Can_tx_xcvr_operationalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Esr_status2_4e1_Can_tx_xcvr_operationalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Esr_status2_4e1_Can_tx_xcvr_operationalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Esr_status2_4e1_Can_tx_xcvr_operationalType_descriptor(), enum_t_value);
}
inline bool Esr_status2_4e1_Can_tx_xcvr_operationalType_Parse(
    const std::string& name, Esr_status2_4e1_Can_tx_xcvr_operationalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Esr_status2_4e1_Can_tx_xcvr_operationalType>(
    Esr_status2_4e1_Can_tx_xcvr_operationalType_descriptor(), name, value);
}
enum Vehicle3_5f2_Can_rx_serv_align_typeType : int {
  Vehicle3_5f2_Can_rx_serv_align_typeType_CAN_RX_SERV_ALIGN_TYPE_AUTO_OR_DEALER = 0,
  Vehicle3_5f2_Can_rx_serv_align_typeType_CAN_RX_SERV_ALIGN_TYPE_VOLVO_SHORT_TRACK = 1
};
bool Vehicle3_5f2_Can_rx_serv_align_typeType_IsValid(int value);
constexpr Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2_Can_rx_serv_align_typeType_Can_rx_serv_align_typeType_MIN = Vehicle3_5f2_Can_rx_serv_align_typeType_CAN_RX_SERV_ALIGN_TYPE_AUTO_OR_DEALER;
constexpr Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2_Can_rx_serv_align_typeType_Can_rx_serv_align_typeType_MAX = Vehicle3_5f2_Can_rx_serv_align_typeType_CAN_RX_SERV_ALIGN_TYPE_VOLVO_SHORT_TRACK;
constexpr int Vehicle3_5f2_Can_rx_serv_align_typeType_Can_rx_serv_align_typeType_ARRAYSIZE = Vehicle3_5f2_Can_rx_serv_align_typeType_Can_rx_serv_align_typeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_serv_align_typeType_descriptor();
template<typename T>
inline const std::string& Vehicle3_5f2_Can_rx_serv_align_typeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle3_5f2_Can_rx_serv_align_typeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle3_5f2_Can_rx_serv_align_typeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle3_5f2_Can_rx_serv_align_typeType_descriptor(), enum_t_value);
}
inline bool Vehicle3_5f2_Can_rx_serv_align_typeType_Parse(
    const std::string& name, Vehicle3_5f2_Can_rx_serv_align_typeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle3_5f2_Can_rx_serv_align_typeType>(
    Vehicle3_5f2_Can_rx_serv_align_typeType_descriptor(), name, value);
}
enum Vehicle3_5f2_Can_rx_serv_align_enableType : int {
  Vehicle3_5f2_Can_rx_serv_align_enableType_CAN_RX_SERV_ALIGN_ENABLE_DISABLED = 0,
  Vehicle3_5f2_Can_rx_serv_align_enableType_CAN_RX_SERV_ALIGN_ENABLE_ENABLED = 1
};
bool Vehicle3_5f2_Can_rx_serv_align_enableType_IsValid(int value);
constexpr Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2_Can_rx_serv_align_enableType_Can_rx_serv_align_enableType_MIN = Vehicle3_5f2_Can_rx_serv_align_enableType_CAN_RX_SERV_ALIGN_ENABLE_DISABLED;
constexpr Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2_Can_rx_serv_align_enableType_Can_rx_serv_align_enableType_MAX = Vehicle3_5f2_Can_rx_serv_align_enableType_CAN_RX_SERV_ALIGN_ENABLE_ENABLED;
constexpr int Vehicle3_5f2_Can_rx_serv_align_enableType_Can_rx_serv_align_enableType_ARRAYSIZE = Vehicle3_5f2_Can_rx_serv_align_enableType_Can_rx_serv_align_enableType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_serv_align_enableType_descriptor();
template<typename T>
inline const std::string& Vehicle3_5f2_Can_rx_serv_align_enableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle3_5f2_Can_rx_serv_align_enableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle3_5f2_Can_rx_serv_align_enableType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle3_5f2_Can_rx_serv_align_enableType_descriptor(), enum_t_value);
}
inline bool Vehicle3_5f2_Can_rx_serv_align_enableType_Parse(
    const std::string& name, Vehicle3_5f2_Can_rx_serv_align_enableType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle3_5f2_Can_rx_serv_align_enableType>(
    Vehicle3_5f2_Can_rx_serv_align_enableType_descriptor(), name, value);
}
enum Vehicle3_5f2_Can_rx_auto_align_convergedType : int {
  Vehicle3_5f2_Can_rx_auto_align_convergedType_CAN_RX_AUTO_ALIGN_CONVERGED_NOT_CONVERGED = 0,
  Vehicle3_5f2_Can_rx_auto_align_convergedType_CAN_RX_AUTO_ALIGN_CONVERGED_CONVERGED = 1
};
bool Vehicle3_5f2_Can_rx_auto_align_convergedType_IsValid(int value);
constexpr Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2_Can_rx_auto_align_convergedType_Can_rx_auto_align_convergedType_MIN = Vehicle3_5f2_Can_rx_auto_align_convergedType_CAN_RX_AUTO_ALIGN_CONVERGED_NOT_CONVERGED;
constexpr Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2_Can_rx_auto_align_convergedType_Can_rx_auto_align_convergedType_MAX = Vehicle3_5f2_Can_rx_auto_align_convergedType_CAN_RX_AUTO_ALIGN_CONVERGED_CONVERGED;
constexpr int Vehicle3_5f2_Can_rx_auto_align_convergedType_Can_rx_auto_align_convergedType_ARRAYSIZE = Vehicle3_5f2_Can_rx_auto_align_convergedType_Can_rx_auto_align_convergedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_auto_align_convergedType_descriptor();
template<typename T>
inline const std::string& Vehicle3_5f2_Can_rx_auto_align_convergedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle3_5f2_Can_rx_auto_align_convergedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle3_5f2_Can_rx_auto_align_convergedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle3_5f2_Can_rx_auto_align_convergedType_descriptor(), enum_t_value);
}
inline bool Vehicle3_5f2_Can_rx_auto_align_convergedType_Parse(
    const std::string& name, Vehicle3_5f2_Can_rx_auto_align_convergedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle3_5f2_Can_rx_auto_align_convergedType>(
    Vehicle3_5f2_Can_rx_auto_align_convergedType_descriptor(), name, value);
}
enum Vehicle3_5f2_Can_rx_auto_align_disableType : int {
  Vehicle3_5f2_Can_rx_auto_align_disableType_CAN_RX_AUTO_ALIGN_DISABLE_ENABLED = 0,
  Vehicle3_5f2_Can_rx_auto_align_disableType_CAN_RX_AUTO_ALIGN_DISABLE_DISABLED = 1
};
bool Vehicle3_5f2_Can_rx_auto_align_disableType_IsValid(int value);
constexpr Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2_Can_rx_auto_align_disableType_Can_rx_auto_align_disableType_MIN = Vehicle3_5f2_Can_rx_auto_align_disableType_CAN_RX_AUTO_ALIGN_DISABLE_ENABLED;
constexpr Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2_Can_rx_auto_align_disableType_Can_rx_auto_align_disableType_MAX = Vehicle3_5f2_Can_rx_auto_align_disableType_CAN_RX_AUTO_ALIGN_DISABLE_DISABLED;
constexpr int Vehicle3_5f2_Can_rx_auto_align_disableType_Can_rx_auto_align_disableType_ARRAYSIZE = Vehicle3_5f2_Can_rx_auto_align_disableType_Can_rx_auto_align_disableType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_auto_align_disableType_descriptor();
template<typename T>
inline const std::string& Vehicle3_5f2_Can_rx_auto_align_disableType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle3_5f2_Can_rx_auto_align_disableType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle3_5f2_Can_rx_auto_align_disableType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle3_5f2_Can_rx_auto_align_disableType_descriptor(), enum_t_value);
}
inline bool Vehicle3_5f2_Can_rx_auto_align_disableType_Parse(
    const std::string& name, Vehicle3_5f2_Can_rx_auto_align_disableType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle3_5f2_Can_rx_auto_align_disableType>(
    Vehicle3_5f2_Can_rx_auto_align_disableType_descriptor(), name, value);
}
enum Vehicle3_5f2_Can_rx_wheel_slipType : int {
  Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_NO_CONTROL = 0,
  Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_BRAKE_SLIP_CONTROL = 1,
  Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_TRACTION_SLIP_CONTROL = 2,
  Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_INVALID_3 = 3
};
bool Vehicle3_5f2_Can_rx_wheel_slipType_IsValid(int value);
constexpr Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2_Can_rx_wheel_slipType_Can_rx_wheel_slipType_MIN = Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_NO_CONTROL;
constexpr Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2_Can_rx_wheel_slipType_Can_rx_wheel_slipType_MAX = Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_INVALID_3;
constexpr int Vehicle3_5f2_Can_rx_wheel_slipType_Can_rx_wheel_slipType_ARRAYSIZE = Vehicle3_5f2_Can_rx_wheel_slipType_Can_rx_wheel_slipType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_wheel_slipType_descriptor();
template<typename T>
inline const std::string& Vehicle3_5f2_Can_rx_wheel_slipType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle3_5f2_Can_rx_wheel_slipType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle3_5f2_Can_rx_wheel_slipType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle3_5f2_Can_rx_wheel_slipType_descriptor(), enum_t_value);
}
inline bool Vehicle3_5f2_Can_rx_wheel_slipType_Parse(
    const std::string& name, Vehicle3_5f2_Can_rx_wheel_slipType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle3_5f2_Can_rx_wheel_slipType>(
    Vehicle3_5f2_Can_rx_wheel_slipType_descriptor(), name, value);
}
enum Vehicle3_5f2_Can_rx_long_accel_validityType : int {
  Vehicle3_5f2_Can_rx_long_accel_validityType_CAN_RX_LONG_ACCEL_VALIDITY_INVALID = 0,
  Vehicle3_5f2_Can_rx_long_accel_validityType_CAN_RX_LONG_ACCEL_VALIDITY_VALID = 1
};
bool Vehicle3_5f2_Can_rx_long_accel_validityType_IsValid(int value);
constexpr Vehicle3_5f2_Can_rx_long_accel_validityType Vehicle3_5f2_Can_rx_long_accel_validityType_Can_rx_long_accel_validityType_MIN = Vehicle3_5f2_Can_rx_long_accel_validityType_CAN_RX_LONG_ACCEL_VALIDITY_INVALID;
constexpr Vehicle3_5f2_Can_rx_long_accel_validityType Vehicle3_5f2_Can_rx_long_accel_validityType_Can_rx_long_accel_validityType_MAX = Vehicle3_5f2_Can_rx_long_accel_validityType_CAN_RX_LONG_ACCEL_VALIDITY_VALID;
constexpr int Vehicle3_5f2_Can_rx_long_accel_validityType_Can_rx_long_accel_validityType_ARRAYSIZE = Vehicle3_5f2_Can_rx_long_accel_validityType_Can_rx_long_accel_validityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_long_accel_validityType_descriptor();
template<typename T>
inline const std::string& Vehicle3_5f2_Can_rx_long_accel_validityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle3_5f2_Can_rx_long_accel_validityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle3_5f2_Can_rx_long_accel_validityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle3_5f2_Can_rx_long_accel_validityType_descriptor(), enum_t_value);
}
inline bool Vehicle3_5f2_Can_rx_long_accel_validityType_Parse(
    const std::string& name, Vehicle3_5f2_Can_rx_long_accel_validityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle3_5f2_Can_rx_long_accel_validityType>(
    Vehicle3_5f2_Can_rx_long_accel_validityType_descriptor(), name, value);
}
enum Vehicle3_5f2_Can_rx_lat_accel_validityType : int {
  Vehicle3_5f2_Can_rx_lat_accel_validityType_CAN_RX_LAT_ACCEL_VALIDITY_INVALID = 0,
  Vehicle3_5f2_Can_rx_lat_accel_validityType_CAN_RX_LAT_ACCEL_VALIDITY_VALID = 1
};
bool Vehicle3_5f2_Can_rx_lat_accel_validityType_IsValid(int value);
constexpr Vehicle3_5f2_Can_rx_lat_accel_validityType Vehicle3_5f2_Can_rx_lat_accel_validityType_Can_rx_lat_accel_validityType_MIN = Vehicle3_5f2_Can_rx_lat_accel_validityType_CAN_RX_LAT_ACCEL_VALIDITY_INVALID;
constexpr Vehicle3_5f2_Can_rx_lat_accel_validityType Vehicle3_5f2_Can_rx_lat_accel_validityType_Can_rx_lat_accel_validityType_MAX = Vehicle3_5f2_Can_rx_lat_accel_validityType_CAN_RX_LAT_ACCEL_VALIDITY_VALID;
constexpr int Vehicle3_5f2_Can_rx_lat_accel_validityType_Can_rx_lat_accel_validityType_ARRAYSIZE = Vehicle3_5f2_Can_rx_lat_accel_validityType_Can_rx_lat_accel_validityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle3_5f2_Can_rx_lat_accel_validityType_descriptor();
template<typename T>
inline const std::string& Vehicle3_5f2_Can_rx_lat_accel_validityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle3_5f2_Can_rx_lat_accel_validityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle3_5f2_Can_rx_lat_accel_validityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle3_5f2_Can_rx_lat_accel_validityType_descriptor(), enum_t_value);
}
inline bool Vehicle3_5f2_Can_rx_lat_accel_validityType_Parse(
    const std::string& name, Vehicle3_5f2_Can_rx_lat_accel_validityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle3_5f2_Can_rx_lat_accel_validityType>(
    Vehicle3_5f2_Can_rx_lat_accel_validityType_descriptor(), name, value);
}
enum Vehicle4_5f3_Can_rx_fac_align_cmd_2Type : int {
  Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_CAN_RX_FAC_ALIGN_CMD_2_OFF = 0,
  Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_CAN_RX_FAC_ALIGN_CMD_2_ON = 1
};
bool Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_IsValid(int value);
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Can_rx_fac_align_cmd_2Type_MIN = Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_CAN_RX_FAC_ALIGN_CMD_2_OFF;
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Can_rx_fac_align_cmd_2Type_MAX = Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_CAN_RX_FAC_ALIGN_CMD_2_ON;
constexpr int Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Can_rx_fac_align_cmd_2Type_ARRAYSIZE = Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Can_rx_fac_align_cmd_2Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_descriptor();
template<typename T>
inline const std::string& Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle4_5f3_Can_rx_fac_align_cmd_2Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_descriptor(), enum_t_value);
}
inline bool Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Parse(
    const std::string& name, Vehicle4_5f3_Can_rx_fac_align_cmd_2Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle4_5f3_Can_rx_fac_align_cmd_2Type>(
    Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_descriptor(), name, value);
}
enum Vehicle4_5f3_Can_rx_fac_align_cmd_1Type : int {
  Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_CAN_RX_FAC_ALIGN_CMD_1_OFF = 0,
  Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_CAN_RX_FAC_ALIGN_CMD_1_ON = 1
};
bool Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_IsValid(int value);
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Can_rx_fac_align_cmd_1Type_MIN = Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_CAN_RX_FAC_ALIGN_CMD_1_OFF;
constexpr Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Can_rx_fac_align_cmd_1Type_MAX = Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_CAN_RX_FAC_ALIGN_CMD_1_ON;
constexpr int Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Can_rx_fac_align_cmd_1Type_ARRAYSIZE = Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Can_rx_fac_align_cmd_1Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_descriptor();
template<typename T>
inline const std::string& Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle4_5f3_Can_rx_fac_align_cmd_1Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_descriptor(), enum_t_value);
}
inline bool Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Parse(
    const std::string& name, Vehicle4_5f3_Can_rx_fac_align_cmd_1Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle4_5f3_Can_rx_fac_align_cmd_1Type>(
    Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_descriptor(), name, value);
}
enum Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType : int {
  Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_CAN_RX_YAW_RATE_BIAS_SHIFT_NO_DETECT = 0,
  Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_CAN_RX_YAW_RATE_BIAS_SHIFT_DETECT = 1
};
bool Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_IsValid(int value);
constexpr Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Can_rx_yaw_rate_bias_shiftType_MIN = Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_CAN_RX_YAW_RATE_BIAS_SHIFT_NO_DETECT;
constexpr Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Can_rx_yaw_rate_bias_shiftType_MAX = Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_CAN_RX_YAW_RATE_BIAS_SHIFT_DETECT;
constexpr int Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Can_rx_yaw_rate_bias_shiftType_ARRAYSIZE = Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Can_rx_yaw_rate_bias_shiftType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_descriptor();
template<typename T>
inline const std::string& Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_descriptor(), enum_t_value);
}
inline bool Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Parse(
    const std::string& name, Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType>(
    Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_descriptor(), name, value);
}
// ===================================================================

class Esr_status9_5e8 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status9_5e8) */ {
 public:
  Esr_status9_5e8();
  virtual ~Esr_status9_5e8();

  Esr_status9_5e8(const Esr_status9_5e8& from);
  Esr_status9_5e8(Esr_status9_5e8&& from) noexcept
    : Esr_status9_5e8() {
    *this = ::std::move(from);
  }

  inline Esr_status9_5e8& operator=(const Esr_status9_5e8& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status9_5e8& operator=(Esr_status9_5e8&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status9_5e8& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status9_5e8* internal_default_instance() {
    return reinterpret_cast<const Esr_status9_5e8*>(
               &_Esr_status9_5e8_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Esr_status9_5e8& a, Esr_status9_5e8& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status9_5e8* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status9_5e8* New() const final {
    return CreateMaybeMessage<Esr_status9_5e8>(nullptr);
  }

  Esr_status9_5e8* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status9_5e8>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status9_5e8& from);
  void MergeFrom(const Esr_status9_5e8& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status9_5e8* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status9_5e8";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxPathIdAcc3FieldNumber = 1,
    kCanTxPathIdAcc2FieldNumber = 2,
    kCanTxFilteredXohpAccCipvFieldNumber = 3,
    kCanTxWaterSprayTargetIdFieldNumber = 4,
    kCanTxSerialNum3RdByteFieldNumber = 5,
    kCanTxSideslipAngleFieldNumber = 6,
    kCanTxAvgPwrCwblkgFieldNumber = 7,
  };
  // optional int32 can_tx_path_id_acc_3 = 1;
  bool has_can_tx_path_id_acc_3() const;
  private:
  bool _internal_has_can_tx_path_id_acc_3() const;
  public:
  void clear_can_tx_path_id_acc_3();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_acc_3() const;
  void set_can_tx_path_id_acc_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_path_id_acc_3() const;
  void _internal_set_can_tx_path_id_acc_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_path_id_acc_2 = 2;
  bool has_can_tx_path_id_acc_2() const;
  private:
  bool _internal_has_can_tx_path_id_acc_2() const;
  public:
  void clear_can_tx_path_id_acc_2();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_acc_2() const;
  void set_can_tx_path_id_acc_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_path_id_acc_2() const;
  void _internal_set_can_tx_path_id_acc_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double can_tx_filtered_xohp_acc_cipv = 3;
  bool has_can_tx_filtered_xohp_acc_cipv() const;
  private:
  bool _internal_has_can_tx_filtered_xohp_acc_cipv() const;
  public:
  void clear_can_tx_filtered_xohp_acc_cipv();
  double can_tx_filtered_xohp_acc_cipv() const;
  void set_can_tx_filtered_xohp_acc_cipv(double value);
  private:
  double _internal_can_tx_filtered_xohp_acc_cipv() const;
  void _internal_set_can_tx_filtered_xohp_acc_cipv(double value);
  public:

  // optional int32 can_tx_water_spray_target_id = 4;
  bool has_can_tx_water_spray_target_id() const;
  private:
  bool _internal_has_can_tx_water_spray_target_id() const;
  public:
  void clear_can_tx_water_spray_target_id();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_water_spray_target_id() const;
  void set_can_tx_water_spray_target_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_water_spray_target_id() const;
  void _internal_set_can_tx_water_spray_target_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_serial_num_3rd_byte = 5;
  bool has_can_tx_serial_num_3rd_byte() const;
  private:
  bool _internal_has_can_tx_serial_num_3rd_byte() const;
  public:
  void clear_can_tx_serial_num_3rd_byte();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_serial_num_3rd_byte() const;
  void set_can_tx_serial_num_3rd_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_serial_num_3rd_byte() const;
  void _internal_set_can_tx_serial_num_3rd_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double can_tx_sideslip_angle = 6;
  bool has_can_tx_sideslip_angle() const;
  private:
  bool _internal_has_can_tx_sideslip_angle() const;
  public:
  void clear_can_tx_sideslip_angle();
  double can_tx_sideslip_angle() const;
  void set_can_tx_sideslip_angle(double value);
  private:
  double _internal_can_tx_sideslip_angle() const;
  void _internal_set_can_tx_sideslip_angle(double value);
  public:

  // optional int32 can_tx_avg_pwr_cwblkg = 7;
  bool has_can_tx_avg_pwr_cwblkg() const;
  private:
  bool _internal_has_can_tx_avg_pwr_cwblkg() const;
  public:
  void clear_can_tx_avg_pwr_cwblkg();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_avg_pwr_cwblkg() const;
  void set_can_tx_avg_pwr_cwblkg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_avg_pwr_cwblkg() const;
  void _internal_set_can_tx_avg_pwr_cwblkg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status9_5e8)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_acc_3_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_acc_2_;
  double can_tx_filtered_xohp_acc_cipv_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_water_spray_target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_serial_num_3rd_byte_;
  double can_tx_sideslip_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_avg_pwr_cwblkg_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_status6_5e5 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status6_5e5) */ {
 public:
  Esr_status6_5e5();
  virtual ~Esr_status6_5e5();

  Esr_status6_5e5(const Esr_status6_5e5& from);
  Esr_status6_5e5(Esr_status6_5e5&& from) noexcept
    : Esr_status6_5e5() {
    *this = ::std::move(from);
  }

  inline Esr_status6_5e5& operator=(const Esr_status6_5e5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status6_5e5& operator=(Esr_status6_5e5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status6_5e5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status6_5e5* internal_default_instance() {
    return reinterpret_cast<const Esr_status6_5e5*>(
               &_Esr_status6_5e5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Esr_status6_5e5& a, Esr_status6_5e5& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status6_5e5* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status6_5e5* New() const final {
    return CreateMaybeMessage<Esr_status6_5e5>(nullptr);
  }

  Esr_status6_5e5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status6_5e5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status6_5e5& from);
  void MergeFrom(const Esr_status6_5e5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status6_5e5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status6_5e5";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Esr_status6_5e5_Can_tx_vertical_align_updatedType Can_tx_vertical_align_updatedType;
  static constexpr Can_tx_vertical_align_updatedType CAN_TX_VERTICAL_ALIGN_UPDATED_NOT_UPDATED =
    Esr_status6_5e5_Can_tx_vertical_align_updatedType_CAN_TX_VERTICAL_ALIGN_UPDATED_NOT_UPDATED;
  static constexpr Can_tx_vertical_align_updatedType CAN_TX_VERTICAL_ALIGN_UPDATED_UPDATED =
    Esr_status6_5e5_Can_tx_vertical_align_updatedType_CAN_TX_VERTICAL_ALIGN_UPDATED_UPDATED;
  static inline bool Can_tx_vertical_align_updatedType_IsValid(int value) {
    return Esr_status6_5e5_Can_tx_vertical_align_updatedType_IsValid(value);
  }
  static constexpr Can_tx_vertical_align_updatedType Can_tx_vertical_align_updatedType_MIN =
    Esr_status6_5e5_Can_tx_vertical_align_updatedType_Can_tx_vertical_align_updatedType_MIN;
  static constexpr Can_tx_vertical_align_updatedType Can_tx_vertical_align_updatedType_MAX =
    Esr_status6_5e5_Can_tx_vertical_align_updatedType_Can_tx_vertical_align_updatedType_MAX;
  static constexpr int Can_tx_vertical_align_updatedType_ARRAYSIZE =
    Esr_status6_5e5_Can_tx_vertical_align_updatedType_Can_tx_vertical_align_updatedType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_vertical_align_updatedType_descriptor() {
    return Esr_status6_5e5_Can_tx_vertical_align_updatedType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_vertical_align_updatedType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_vertical_align_updatedType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_vertical_align_updatedType_Name.");
    return Esr_status6_5e5_Can_tx_vertical_align_updatedType_Name(enum_t_value);
  }
  static inline bool Can_tx_vertical_align_updatedType_Parse(const std::string& name,
      Can_tx_vertical_align_updatedType* value) {
    return Esr_status6_5e5_Can_tx_vertical_align_updatedType_Parse(name, value);
  }

  typedef Esr_status6_5e5_Can_tx_found_targetType Can_tx_found_targetType;
  static constexpr Can_tx_found_targetType CAN_TX_FOUND_TARGET_NOT_FOUND =
    Esr_status6_5e5_Can_tx_found_targetType_CAN_TX_FOUND_TARGET_NOT_FOUND;
  static constexpr Can_tx_found_targetType CAN_TX_FOUND_TARGET_FOUND =
    Esr_status6_5e5_Can_tx_found_targetType_CAN_TX_FOUND_TARGET_FOUND;
  static inline bool Can_tx_found_targetType_IsValid(int value) {
    return Esr_status6_5e5_Can_tx_found_targetType_IsValid(value);
  }
  static constexpr Can_tx_found_targetType Can_tx_found_targetType_MIN =
    Esr_status6_5e5_Can_tx_found_targetType_Can_tx_found_targetType_MIN;
  static constexpr Can_tx_found_targetType Can_tx_found_targetType_MAX =
    Esr_status6_5e5_Can_tx_found_targetType_Can_tx_found_targetType_MAX;
  static constexpr int Can_tx_found_targetType_ARRAYSIZE =
    Esr_status6_5e5_Can_tx_found_targetType_Can_tx_found_targetType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_found_targetType_descriptor() {
    return Esr_status6_5e5_Can_tx_found_targetType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_found_targetType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_found_targetType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_found_targetType_Name.");
    return Esr_status6_5e5_Can_tx_found_targetType_Name(enum_t_value);
  }
  static inline bool Can_tx_found_targetType_Parse(const std::string& name,
      Can_tx_found_targetType* value) {
    return Esr_status6_5e5_Can_tx_found_targetType_Parse(name, value);
  }

  typedef Esr_status6_5e5_Can_tx_factory_align_status_2Type Can_tx_factory_align_status_2Type;
  static constexpr Can_tx_factory_align_status_2Type CAN_TX_FACTORY_ALIGN_STATUS_2_OFF =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_OFF;
  static constexpr Can_tx_factory_align_status_2Type CAN_TX_FACTORY_ALIGN_STATUS_2_BUSY =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_BUSY;
  static constexpr Can_tx_factory_align_status_2Type CAN_TX_FACTORY_ALIGN_STATUS_2_SUCCESS =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_SUCCESS;
  static constexpr Can_tx_factory_align_status_2Type CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_NO_TARGET =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_NO_TARGET;
  static constexpr Can_tx_factory_align_status_2Type CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_DEV_TOO_LARGE =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_DEV_TOO_LARGE;
  static constexpr Can_tx_factory_align_status_2Type CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_VAR_TOO_LARGE =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_CAN_TX_FACTORY_ALIGN_STATUS_2_FAIL_VAR_TOO_LARGE;
  static inline bool Can_tx_factory_align_status_2Type_IsValid(int value) {
    return Esr_status6_5e5_Can_tx_factory_align_status_2Type_IsValid(value);
  }
  static constexpr Can_tx_factory_align_status_2Type Can_tx_factory_align_status_2Type_MIN =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_Can_tx_factory_align_status_2Type_MIN;
  static constexpr Can_tx_factory_align_status_2Type Can_tx_factory_align_status_2Type_MAX =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_Can_tx_factory_align_status_2Type_MAX;
  static constexpr int Can_tx_factory_align_status_2Type_ARRAYSIZE =
    Esr_status6_5e5_Can_tx_factory_align_status_2Type_Can_tx_factory_align_status_2Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_factory_align_status_2Type_descriptor() {
    return Esr_status6_5e5_Can_tx_factory_align_status_2Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_factory_align_status_2Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_factory_align_status_2Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_factory_align_status_2Type_Name.");
    return Esr_status6_5e5_Can_tx_factory_align_status_2Type_Name(enum_t_value);
  }
  static inline bool Can_tx_factory_align_status_2Type_Parse(const std::string& name,
      Can_tx_factory_align_status_2Type* value) {
    return Esr_status6_5e5_Can_tx_factory_align_status_2Type_Parse(name, value);
  }

  typedef Esr_status6_5e5_Can_tx_factory_align_status_1Type Can_tx_factory_align_status_1Type;
  static constexpr Can_tx_factory_align_status_1Type CAN_TX_FACTORY_ALIGN_STATUS_1_OFF =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_OFF;
  static constexpr Can_tx_factory_align_status_1Type CAN_TX_FACTORY_ALIGN_STATUS_1_BUSY =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_BUSY;
  static constexpr Can_tx_factory_align_status_1Type CAN_TX_FACTORY_ALIGN_STATUS_1_SUCCESS =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_SUCCESS;
  static constexpr Can_tx_factory_align_status_1Type CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_NO_TARGET =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_NO_TARGET;
  static constexpr Can_tx_factory_align_status_1Type CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_DEV_TOO_LARGE =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_DEV_TOO_LARGE;
  static constexpr Can_tx_factory_align_status_1Type CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_VAR_TOO_LARGE =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_CAN_TX_FACTORY_ALIGN_STATUS_1_FAIL_VAR_TOO_LARGE;
  static inline bool Can_tx_factory_align_status_1Type_IsValid(int value) {
    return Esr_status6_5e5_Can_tx_factory_align_status_1Type_IsValid(value);
  }
  static constexpr Can_tx_factory_align_status_1Type Can_tx_factory_align_status_1Type_MIN =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_Can_tx_factory_align_status_1Type_MIN;
  static constexpr Can_tx_factory_align_status_1Type Can_tx_factory_align_status_1Type_MAX =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_Can_tx_factory_align_status_1Type_MAX;
  static constexpr int Can_tx_factory_align_status_1Type_ARRAYSIZE =
    Esr_status6_5e5_Can_tx_factory_align_status_1Type_Can_tx_factory_align_status_1Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_factory_align_status_1Type_descriptor() {
    return Esr_status6_5e5_Can_tx_factory_align_status_1Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_factory_align_status_1Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_factory_align_status_1Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_factory_align_status_1Type_Name.");
    return Esr_status6_5e5_Can_tx_factory_align_status_1Type_Name(enum_t_value);
  }
  static inline bool Can_tx_factory_align_status_1Type_Parse(const std::string& name,
      Can_tx_factory_align_status_1Type* value) {
    return Esr_status6_5e5_Can_tx_factory_align_status_1Type_Parse(name, value);
  }

  typedef Esr_status6_5e5_Can_tx_recommend_unconvergeType Can_tx_recommend_unconvergeType;
  static constexpr Can_tx_recommend_unconvergeType CAN_TX_RECOMMEND_UNCONVERGE_NOT_RECOMMEND =
    Esr_status6_5e5_Can_tx_recommend_unconvergeType_CAN_TX_RECOMMEND_UNCONVERGE_NOT_RECOMMEND;
  static constexpr Can_tx_recommend_unconvergeType CAN_TX_RECOMMEND_UNCONVERGE_RECOMMEND =
    Esr_status6_5e5_Can_tx_recommend_unconvergeType_CAN_TX_RECOMMEND_UNCONVERGE_RECOMMEND;
  static inline bool Can_tx_recommend_unconvergeType_IsValid(int value) {
    return Esr_status6_5e5_Can_tx_recommend_unconvergeType_IsValid(value);
  }
  static constexpr Can_tx_recommend_unconvergeType Can_tx_recommend_unconvergeType_MIN =
    Esr_status6_5e5_Can_tx_recommend_unconvergeType_Can_tx_recommend_unconvergeType_MIN;
  static constexpr Can_tx_recommend_unconvergeType Can_tx_recommend_unconvergeType_MAX =
    Esr_status6_5e5_Can_tx_recommend_unconvergeType_Can_tx_recommend_unconvergeType_MAX;
  static constexpr int Can_tx_recommend_unconvergeType_ARRAYSIZE =
    Esr_status6_5e5_Can_tx_recommend_unconvergeType_Can_tx_recommend_unconvergeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_recommend_unconvergeType_descriptor() {
    return Esr_status6_5e5_Can_tx_recommend_unconvergeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_recommend_unconvergeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_recommend_unconvergeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_recommend_unconvergeType_Name.");
    return Esr_status6_5e5_Can_tx_recommend_unconvergeType_Name(enum_t_value);
  }
  static inline bool Can_tx_recommend_unconvergeType_Parse(const std::string& name,
      Can_tx_recommend_unconvergeType* value) {
    return Esr_status6_5e5_Can_tx_recommend_unconvergeType_Parse(name, value);
  }

  typedef Esr_status6_5e5_Can_tx_system_power_modeType Can_tx_system_power_modeType;
  static constexpr Can_tx_system_power_modeType CAN_TX_SYSTEM_POWER_MODE_DSP_INIT =
    Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_DSP_INIT;
  static constexpr Can_tx_system_power_modeType CAN_TX_SYSTEM_POWER_MODE_RADIATE_OFF =
    Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_RADIATE_OFF;
  static constexpr Can_tx_system_power_modeType CAN_TX_SYSTEM_POWER_MODE_RADIATE_ON =
    Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_RADIATE_ON;
  static constexpr Can_tx_system_power_modeType CAN_TX_SYSTEM_POWER_MODE_DSP_SHUTDOWN =
    Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_DSP_SHUTDOWN;
  static constexpr Can_tx_system_power_modeType CAN_TX_SYSTEM_POWER_MODE_DSP_OFF =
    Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_DSP_OFF;
  static constexpr Can_tx_system_power_modeType CAN_TX_SYSTEM_POWER_MODE_HOST_SHUTDOWN =
    Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_HOST_SHUTDOWN;
  static constexpr Can_tx_system_power_modeType CAN_TX_SYSTEM_POWER_MODE_TEST =
    Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_TEST;
  static constexpr Can_tx_system_power_modeType CAN_TX_SYSTEM_POWER_MODE_7INVALID =
    Esr_status6_5e5_Can_tx_system_power_modeType_CAN_TX_SYSTEM_POWER_MODE_7INVALID;
  static inline bool Can_tx_system_power_modeType_IsValid(int value) {
    return Esr_status6_5e5_Can_tx_system_power_modeType_IsValid(value);
  }
  static constexpr Can_tx_system_power_modeType Can_tx_system_power_modeType_MIN =
    Esr_status6_5e5_Can_tx_system_power_modeType_Can_tx_system_power_modeType_MIN;
  static constexpr Can_tx_system_power_modeType Can_tx_system_power_modeType_MAX =
    Esr_status6_5e5_Can_tx_system_power_modeType_Can_tx_system_power_modeType_MAX;
  static constexpr int Can_tx_system_power_modeType_ARRAYSIZE =
    Esr_status6_5e5_Can_tx_system_power_modeType_Can_tx_system_power_modeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_system_power_modeType_descriptor() {
    return Esr_status6_5e5_Can_tx_system_power_modeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_system_power_modeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_system_power_modeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_system_power_modeType_Name.");
    return Esr_status6_5e5_Can_tx_system_power_modeType_Name(enum_t_value);
  }
  static inline bool Can_tx_system_power_modeType_Parse(const std::string& name,
      Can_tx_system_power_modeType* value) {
    return Esr_status6_5e5_Can_tx_system_power_modeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxSwVersionDsp3RdByteFieldNumber = 1,
    kCanTxVerticalAlignUpdatedFieldNumber = 2,
    kCanTxVerticalMisalignmentFieldNumber = 3,
    kCanTxServAlignUpdatesDoneFieldNumber = 4,
    kCanTxFoundTargetFieldNumber = 5,
    kCanTxFactoryMisalignmentFieldNumber = 6,
    kCanTxFactoryAlignStatus2FieldNumber = 7,
    kCanTxFactoryAlignStatus1FieldNumber = 8,
    kCanTxRecommendUnconvergeFieldNumber = 9,
    kCanTxWaveDiffA2DFieldNumber = 10,
    kCanTxSystemPowerModeFieldNumber = 11,
    kCanTxSupplyN5VA2DFieldNumber = 12,
    kCanTxSupply1P8VA2DFieldNumber = 13,
  };
  // optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
  bool has_can_tx_sw_version_dsp_3rd_byte() const;
  private:
  bool _internal_has_can_tx_sw_version_dsp_3rd_byte() const;
  public:
  void clear_can_tx_sw_version_dsp_3rd_byte();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_sw_version_dsp_3rd_byte() const;
  void set_can_tx_sw_version_dsp_3rd_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_sw_version_dsp_3rd_byte() const;
  void _internal_set_can_tx_sw_version_dsp_3rd_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
  bool has_can_tx_vertical_align_updated() const;
  private:
  bool _internal_has_can_tx_vertical_align_updated() const;
  public:
  void clear_can_tx_vertical_align_updated();
  ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType can_tx_vertical_align_updated() const;
  void set_can_tx_vertical_align_updated(::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType value);
  private:
  ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType _internal_can_tx_vertical_align_updated() const;
  void _internal_set_can_tx_vertical_align_updated(::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType value);
  public:

  // optional double can_tx_vertical_misalignment = 3;
  bool has_can_tx_vertical_misalignment() const;
  private:
  bool _internal_has_can_tx_vertical_misalignment() const;
  public:
  void clear_can_tx_vertical_misalignment();
  double can_tx_vertical_misalignment() const;
  void set_can_tx_vertical_misalignment(double value);
  private:
  double _internal_can_tx_vertical_misalignment() const;
  void _internal_set_can_tx_vertical_misalignment(double value);
  public:

  // optional int32 can_tx_serv_align_updates_done = 4;
  bool has_can_tx_serv_align_updates_done() const;
  private:
  bool _internal_has_can_tx_serv_align_updates_done() const;
  public:
  void clear_can_tx_serv_align_updates_done();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_serv_align_updates_done() const;
  void set_can_tx_serv_align_updates_done(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_serv_align_updates_done() const;
  void _internal_set_can_tx_serv_align_updates_done(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
  bool has_can_tx_found_target() const;
  private:
  bool _internal_has_can_tx_found_target() const;
  public:
  void clear_can_tx_found_target();
  ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType can_tx_found_target() const;
  void set_can_tx_found_target(::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType value);
  private:
  ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType _internal_can_tx_found_target() const;
  void _internal_set_can_tx_found_target(::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType value);
  public:

  // optional double can_tx_factory_misalignment = 6;
  bool has_can_tx_factory_misalignment() const;
  private:
  bool _internal_has_can_tx_factory_misalignment() const;
  public:
  void clear_can_tx_factory_misalignment();
  double can_tx_factory_misalignment() const;
  void set_can_tx_factory_misalignment(double value);
  private:
  double _internal_can_tx_factory_misalignment() const;
  void _internal_set_can_tx_factory_misalignment(double value);
  public:

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
  bool has_can_tx_factory_align_status_2() const;
  private:
  bool _internal_has_can_tx_factory_align_status_2() const;
  public:
  void clear_can_tx_factory_align_status_2();
  ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type can_tx_factory_align_status_2() const;
  void set_can_tx_factory_align_status_2(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type value);
  private:
  ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type _internal_can_tx_factory_align_status_2() const;
  void _internal_set_can_tx_factory_align_status_2(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type value);
  public:

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
  bool has_can_tx_factory_align_status_1() const;
  private:
  bool _internal_has_can_tx_factory_align_status_1() const;
  public:
  void clear_can_tx_factory_align_status_1();
  ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type can_tx_factory_align_status_1() const;
  void set_can_tx_factory_align_status_1(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type value);
  private:
  ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type _internal_can_tx_factory_align_status_1() const;
  void _internal_set_can_tx_factory_align_status_1(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type value);
  public:

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
  bool has_can_tx_recommend_unconverge() const;
  private:
  bool _internal_has_can_tx_recommend_unconverge() const;
  public:
  void clear_can_tx_recommend_unconverge();
  ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType can_tx_recommend_unconverge() const;
  void set_can_tx_recommend_unconverge(::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType value);
  private:
  ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType _internal_can_tx_recommend_unconverge() const;
  void _internal_set_can_tx_recommend_unconverge(::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType value);
  public:

  // optional int32 can_tx_wave_diff_a2d = 10;
  bool has_can_tx_wave_diff_a2d() const;
  private:
  bool _internal_has_can_tx_wave_diff_a2d() const;
  public:
  void clear_can_tx_wave_diff_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_wave_diff_a2d() const;
  void set_can_tx_wave_diff_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_wave_diff_a2d() const;
  void _internal_set_can_tx_wave_diff_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
  bool has_can_tx_system_power_mode() const;
  private:
  bool _internal_has_can_tx_system_power_mode() const;
  public:
  void clear_can_tx_system_power_mode();
  ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType can_tx_system_power_mode() const;
  void set_can_tx_system_power_mode(::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType value);
  private:
  ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType _internal_can_tx_system_power_mode() const;
  void _internal_set_can_tx_system_power_mode(::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType value);
  public:

  // optional int32 can_tx_supply_n5v_a2d = 12;
  bool has_can_tx_supply_n5v_a2d() const;
  private:
  bool _internal_has_can_tx_supply_n5v_a2d() const;
  public:
  void clear_can_tx_supply_n5v_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_n5v_a2d() const;
  void set_can_tx_supply_n5v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_supply_n5v_a2d() const;
  void _internal_set_can_tx_supply_n5v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_supply_1p8v_a2d = 13;
  bool has_can_tx_supply_1p8v_a2d() const;
  private:
  bool _internal_has_can_tx_supply_1p8v_a2d() const;
  public:
  void clear_can_tx_supply_1p8v_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_1p8v_a2d() const;
  void set_can_tx_supply_1p8v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_supply_1p8v_a2d() const;
  void _internal_set_can_tx_supply_1p8v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status6_5e5)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_sw_version_dsp_3rd_byte_;
  int can_tx_vertical_align_updated_;
  double can_tx_vertical_misalignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_serv_align_updates_done_;
  int can_tx_found_target_;
  double can_tx_factory_misalignment_;
  int can_tx_factory_align_status_2_;
  int can_tx_factory_align_status_1_;
  int can_tx_recommend_unconverge_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_wave_diff_a2d_;
  int can_tx_system_power_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_n5v_a2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_1p8v_a2d_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_status5_5e4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status5_5e4) */ {
 public:
  Esr_status5_5e4();
  virtual ~Esr_status5_5e4();

  Esr_status5_5e4(const Esr_status5_5e4& from);
  Esr_status5_5e4(Esr_status5_5e4&& from) noexcept
    : Esr_status5_5e4() {
    *this = ::std::move(from);
  }

  inline Esr_status5_5e4& operator=(const Esr_status5_5e4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status5_5e4& operator=(Esr_status5_5e4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status5_5e4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status5_5e4* internal_default_instance() {
    return reinterpret_cast<const Esr_status5_5e4*>(
               &_Esr_status5_5e4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Esr_status5_5e4& a, Esr_status5_5e4& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status5_5e4* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status5_5e4* New() const final {
    return CreateMaybeMessage<Esr_status5_5e4>(nullptr);
  }

  Esr_status5_5e4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status5_5e4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status5_5e4& from);
  void MergeFrom(const Esr_status5_5e4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status5_5e4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status5_5e4";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxSupply10VA2DFieldNumber = 1,
    kCanTxTemp2A2DFieldNumber = 2,
    kCanTxTemp1A2DFieldNumber = 3,
    kCanTxSwbattA2DFieldNumber = 4,
    kCanTxSupply5VdxA2DFieldNumber = 5,
    kCanTxSupply5VaA2DFieldNumber = 6,
    kCanTxSupply3P3VA2DFieldNumber = 7,
    kCanTxIgnpA2DFieldNumber = 8,
  };
  // optional int32 can_tx_supply_10v_a2d = 1;
  bool has_can_tx_supply_10v_a2d() const;
  private:
  bool _internal_has_can_tx_supply_10v_a2d() const;
  public:
  void clear_can_tx_supply_10v_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_10v_a2d() const;
  void set_can_tx_supply_10v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_supply_10v_a2d() const;
  void _internal_set_can_tx_supply_10v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_temp2_a2d = 2;
  bool has_can_tx_temp2_a2d() const;
  private:
  bool _internal_has_can_tx_temp2_a2d() const;
  public:
  void clear_can_tx_temp2_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_temp2_a2d() const;
  void set_can_tx_temp2_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_temp2_a2d() const;
  void _internal_set_can_tx_temp2_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_temp1_a2d = 3;
  bool has_can_tx_temp1_a2d() const;
  private:
  bool _internal_has_can_tx_temp1_a2d() const;
  public:
  void clear_can_tx_temp1_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_temp1_a2d() const;
  void set_can_tx_temp1_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_temp1_a2d() const;
  void _internal_set_can_tx_temp1_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_swbatt_a2d = 4;
  bool has_can_tx_swbatt_a2d() const;
  private:
  bool _internal_has_can_tx_swbatt_a2d() const;
  public:
  void clear_can_tx_swbatt_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_swbatt_a2d() const;
  void set_can_tx_swbatt_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_swbatt_a2d() const;
  void _internal_set_can_tx_swbatt_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_supply_5vdx_a2d = 5;
  bool has_can_tx_supply_5vdx_a2d() const;
  private:
  bool _internal_has_can_tx_supply_5vdx_a2d() const;
  public:
  void clear_can_tx_supply_5vdx_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_5vdx_a2d() const;
  void set_can_tx_supply_5vdx_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_supply_5vdx_a2d() const;
  void _internal_set_can_tx_supply_5vdx_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_supply_5va_a2d = 6;
  bool has_can_tx_supply_5va_a2d() const;
  private:
  bool _internal_has_can_tx_supply_5va_a2d() const;
  public:
  void clear_can_tx_supply_5va_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_5va_a2d() const;
  void set_can_tx_supply_5va_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_supply_5va_a2d() const;
  void _internal_set_can_tx_supply_5va_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_supply_3p3v_a2d = 7;
  bool has_can_tx_supply_3p3v_a2d() const;
  private:
  bool _internal_has_can_tx_supply_3p3v_a2d() const;
  public:
  void clear_can_tx_supply_3p3v_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_3p3v_a2d() const;
  void set_can_tx_supply_3p3v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_supply_3p3v_a2d() const;
  void _internal_set_can_tx_supply_3p3v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_ignp_a2d = 8;
  bool has_can_tx_ignp_a2d() const;
  private:
  bool _internal_has_can_tx_ignp_a2d() const;
  public:
  void clear_can_tx_ignp_a2d();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_ignp_a2d() const;
  void set_can_tx_ignp_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_ignp_a2d() const;
  void _internal_set_can_tx_ignp_a2d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status5_5e4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_10v_a2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_temp2_a2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_temp1_a2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_swbatt_a2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_5vdx_a2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_5va_a2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_supply_3p3v_a2d_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_ignp_a2d_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_status3_4e2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status3_4e2) */ {
 public:
  Esr_status3_4e2();
  virtual ~Esr_status3_4e2();

  Esr_status3_4e2(const Esr_status3_4e2& from);
  Esr_status3_4e2(Esr_status3_4e2&& from) noexcept
    : Esr_status3_4e2() {
    *this = ::std::move(from);
  }

  inline Esr_status3_4e2& operator=(const Esr_status3_4e2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status3_4e2& operator=(Esr_status3_4e2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status3_4e2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status3_4e2* internal_default_instance() {
    return reinterpret_cast<const Esr_status3_4e2*>(
               &_Esr_status3_4e2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Esr_status3_4e2& a, Esr_status3_4e2& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status3_4e2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status3_4e2* New() const final {
    return CreateMaybeMessage<Esr_status3_4e2>(nullptr);
  }

  Esr_status3_4e2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status3_4e2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status3_4e2& from);
  void MergeFrom(const Esr_status3_4e2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status3_4e2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status3_4e2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxSwVersionPldFieldNumber = 1,
    kCanTxSwVersionHostFieldNumber = 2,
    kCanTxHwVersionFieldNumber = 3,
    kCanTxInterfaceVersionFieldNumber = 4,
    kCanTxSerialNumFieldNumber = 5,
  };
  // optional int32 can_tx_sw_version_pld = 1;
  bool has_can_tx_sw_version_pld() const;
  private:
  bool _internal_has_can_tx_sw_version_pld() const;
  public:
  void clear_can_tx_sw_version_pld();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_sw_version_pld() const;
  void set_can_tx_sw_version_pld(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_sw_version_pld() const;
  void _internal_set_can_tx_sw_version_pld(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_sw_version_host = 2;
  bool has_can_tx_sw_version_host() const;
  private:
  bool _internal_has_can_tx_sw_version_host() const;
  public:
  void clear_can_tx_sw_version_host();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_sw_version_host() const;
  void set_can_tx_sw_version_host(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_sw_version_host() const;
  void _internal_set_can_tx_sw_version_host(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_hw_version = 3;
  bool has_can_tx_hw_version() const;
  private:
  bool _internal_has_can_tx_hw_version() const;
  public:
  void clear_can_tx_hw_version();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_hw_version() const;
  void set_can_tx_hw_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_hw_version() const;
  void _internal_set_can_tx_hw_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_interface_version = 4;
  bool has_can_tx_interface_version() const;
  private:
  bool _internal_has_can_tx_interface_version() const;
  public:
  void clear_can_tx_interface_version();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_interface_version() const;
  void set_can_tx_interface_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_interface_version() const;
  void _internal_set_can_tx_interface_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_serial_num = 5;
  bool has_can_tx_serial_num() const;
  private:
  bool _internal_has_can_tx_serial_num() const;
  public:
  void clear_can_tx_serial_num();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_serial_num() const;
  void set_can_tx_serial_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_serial_num() const;
  void _internal_set_can_tx_serial_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status3_4e2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_sw_version_pld_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_sw_version_host_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_hw_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_interface_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_serial_num_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_status4_4e3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status4_4e3) */ {
 public:
  Esr_status4_4e3();
  virtual ~Esr_status4_4e3();

  Esr_status4_4e3(const Esr_status4_4e3& from);
  Esr_status4_4e3(Esr_status4_4e3&& from) noexcept
    : Esr_status4_4e3() {
    *this = ::std::move(from);
  }

  inline Esr_status4_4e3& operator=(const Esr_status4_4e3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status4_4e3& operator=(Esr_status4_4e3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status4_4e3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status4_4e3* internal_default_instance() {
    return reinterpret_cast<const Esr_status4_4e3*>(
               &_Esr_status4_4e3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Esr_status4_4e3& a, Esr_status4_4e3& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status4_4e3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status4_4e3* New() const final {
    return CreateMaybeMessage<Esr_status4_4e3>(nullptr);
  }

  Esr_status4_4e3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status4_4e3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status4_4e3& from);
  void MergeFrom(const Esr_status4_4e3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status4_4e3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status4_4e3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Esr_status4_4e3_Can_tx_truck_target_detType Can_tx_truck_target_detType;
  static constexpr Can_tx_truck_target_detType CAN_TX_TRUCK_TARGET_DET_NOT_DETECTED =
    Esr_status4_4e3_Can_tx_truck_target_detType_CAN_TX_TRUCK_TARGET_DET_NOT_DETECTED;
  static constexpr Can_tx_truck_target_detType CAN_TX_TRUCK_TARGET_DET_DETECTED =
    Esr_status4_4e3_Can_tx_truck_target_detType_CAN_TX_TRUCK_TARGET_DET_DETECTED;
  static inline bool Can_tx_truck_target_detType_IsValid(int value) {
    return Esr_status4_4e3_Can_tx_truck_target_detType_IsValid(value);
  }
  static constexpr Can_tx_truck_target_detType Can_tx_truck_target_detType_MIN =
    Esr_status4_4e3_Can_tx_truck_target_detType_Can_tx_truck_target_detType_MIN;
  static constexpr Can_tx_truck_target_detType Can_tx_truck_target_detType_MAX =
    Esr_status4_4e3_Can_tx_truck_target_detType_Can_tx_truck_target_detType_MAX;
  static constexpr int Can_tx_truck_target_detType_ARRAYSIZE =
    Esr_status4_4e3_Can_tx_truck_target_detType_Can_tx_truck_target_detType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_truck_target_detType_descriptor() {
    return Esr_status4_4e3_Can_tx_truck_target_detType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_truck_target_detType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_truck_target_detType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_truck_target_detType_Name.");
    return Esr_status4_4e3_Can_tx_truck_target_detType_Name(enum_t_value);
  }
  static inline bool Can_tx_truck_target_detType_Parse(const std::string& name,
      Can_tx_truck_target_detType* value) {
    return Esr_status4_4e3_Can_tx_truck_target_detType_Parse(name, value);
  }

  typedef Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Can_tx_lr_only_grating_lobe_detType;
  static constexpr Can_tx_lr_only_grating_lobe_detType CAN_TX_LR_ONLY_GRATING_LOBE_DET_NOT_DETECTED =
    Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_CAN_TX_LR_ONLY_GRATING_LOBE_DET_NOT_DETECTED;
  static constexpr Can_tx_lr_only_grating_lobe_detType CAN_TX_LR_ONLY_GRATING_LOBE_DET_DETECTED =
    Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_CAN_TX_LR_ONLY_GRATING_LOBE_DET_DETECTED;
  static inline bool Can_tx_lr_only_grating_lobe_detType_IsValid(int value) {
    return Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_IsValid(value);
  }
  static constexpr Can_tx_lr_only_grating_lobe_detType Can_tx_lr_only_grating_lobe_detType_MIN =
    Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Can_tx_lr_only_grating_lobe_detType_MIN;
  static constexpr Can_tx_lr_only_grating_lobe_detType Can_tx_lr_only_grating_lobe_detType_MAX =
    Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Can_tx_lr_only_grating_lobe_detType_MAX;
  static constexpr int Can_tx_lr_only_grating_lobe_detType_ARRAYSIZE =
    Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Can_tx_lr_only_grating_lobe_detType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_lr_only_grating_lobe_detType_descriptor() {
    return Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_lr_only_grating_lobe_detType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_lr_only_grating_lobe_detType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_lr_only_grating_lobe_detType_Name.");
    return Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Name(enum_t_value);
  }
  static inline bool Can_tx_lr_only_grating_lobe_detType_Parse(const std::string& name,
      Can_tx_lr_only_grating_lobe_detType* value) {
    return Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_Parse(name, value);
  }

  typedef Esr_status4_4e3_Can_tx_sidelobe_blockageType Can_tx_sidelobe_blockageType;
  static constexpr Can_tx_sidelobe_blockageType CAN_TX_SIDELOBE_BLOCKAGE_OFF =
    Esr_status4_4e3_Can_tx_sidelobe_blockageType_CAN_TX_SIDELOBE_BLOCKAGE_OFF;
  static constexpr Can_tx_sidelobe_blockageType CAN_TX_SIDELOBE_BLOCKAGE_ON =
    Esr_status4_4e3_Can_tx_sidelobe_blockageType_CAN_TX_SIDELOBE_BLOCKAGE_ON;
  static inline bool Can_tx_sidelobe_blockageType_IsValid(int value) {
    return Esr_status4_4e3_Can_tx_sidelobe_blockageType_IsValid(value);
  }
  static constexpr Can_tx_sidelobe_blockageType Can_tx_sidelobe_blockageType_MIN =
    Esr_status4_4e3_Can_tx_sidelobe_blockageType_Can_tx_sidelobe_blockageType_MIN;
  static constexpr Can_tx_sidelobe_blockageType Can_tx_sidelobe_blockageType_MAX =
    Esr_status4_4e3_Can_tx_sidelobe_blockageType_Can_tx_sidelobe_blockageType_MAX;
  static constexpr int Can_tx_sidelobe_blockageType_ARRAYSIZE =
    Esr_status4_4e3_Can_tx_sidelobe_blockageType_Can_tx_sidelobe_blockageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_sidelobe_blockageType_descriptor() {
    return Esr_status4_4e3_Can_tx_sidelobe_blockageType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_sidelobe_blockageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_sidelobe_blockageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_sidelobe_blockageType_Name.");
    return Esr_status4_4e3_Can_tx_sidelobe_blockageType_Name(enum_t_value);
  }
  static inline bool Can_tx_sidelobe_blockageType_Parse(const std::string& name,
      Can_tx_sidelobe_blockageType* value) {
    return Esr_status4_4e3_Can_tx_sidelobe_blockageType_Parse(name, value);
  }

  typedef Esr_status4_4e3_Can_tx_partial_blockageType Can_tx_partial_blockageType;
  static constexpr Can_tx_partial_blockageType CAN_TX_PARTIAL_BLOCKAGE_NOT_BLOCKED =
    Esr_status4_4e3_Can_tx_partial_blockageType_CAN_TX_PARTIAL_BLOCKAGE_NOT_BLOCKED;
  static constexpr Can_tx_partial_blockageType CAN_TX_PARTIAL_BLOCKAGE_BLOCKED =
    Esr_status4_4e3_Can_tx_partial_blockageType_CAN_TX_PARTIAL_BLOCKAGE_BLOCKED;
  static inline bool Can_tx_partial_blockageType_IsValid(int value) {
    return Esr_status4_4e3_Can_tx_partial_blockageType_IsValid(value);
  }
  static constexpr Can_tx_partial_blockageType Can_tx_partial_blockageType_MIN =
    Esr_status4_4e3_Can_tx_partial_blockageType_Can_tx_partial_blockageType_MIN;
  static constexpr Can_tx_partial_blockageType Can_tx_partial_blockageType_MAX =
    Esr_status4_4e3_Can_tx_partial_blockageType_Can_tx_partial_blockageType_MAX;
  static constexpr int Can_tx_partial_blockageType_ARRAYSIZE =
    Esr_status4_4e3_Can_tx_partial_blockageType_Can_tx_partial_blockageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_partial_blockageType_descriptor() {
    return Esr_status4_4e3_Can_tx_partial_blockageType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_partial_blockageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_partial_blockageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_partial_blockageType_Name.");
    return Esr_status4_4e3_Can_tx_partial_blockageType_Name(enum_t_value);
  }
  static inline bool Can_tx_partial_blockageType_Parse(const std::string& name,
      Can_tx_partial_blockageType* value) {
    return Esr_status4_4e3_Can_tx_partial_blockageType_Parse(name, value);
  }

  typedef Esr_status4_4e3_Can_tx_mr_lr_modeType Can_tx_mr_lr_modeType;
  static constexpr Can_tx_mr_lr_modeType CAN_TX_MR_LR_MODE_RESERVED =
    Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_RESERVED;
  static constexpr Can_tx_mr_lr_modeType CAN_TX_MR_LR_MODE_OUTPUT_ONLY_MEDIUM_RANGE_TRACKS =
    Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_OUTPUT_ONLY_MEDIUM_RANGE_TRACKS;
  static constexpr Can_tx_mr_lr_modeType CAN_TX_MR_LR_MODE_OUTPUT_ONLY_LONG_RANGE_TRACKS =
    Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_OUTPUT_ONLY_LONG_RANGE_TRACKS;
  static constexpr Can_tx_mr_lr_modeType CAN_TX_MR_LR_MODE_OUTPUT_ALL_MEDIUM_RANGE_AND_LONG =
    Esr_status4_4e3_Can_tx_mr_lr_modeType_CAN_TX_MR_LR_MODE_OUTPUT_ALL_MEDIUM_RANGE_AND_LONG;
  static inline bool Can_tx_mr_lr_modeType_IsValid(int value) {
    return Esr_status4_4e3_Can_tx_mr_lr_modeType_IsValid(value);
  }
  static constexpr Can_tx_mr_lr_modeType Can_tx_mr_lr_modeType_MIN =
    Esr_status4_4e3_Can_tx_mr_lr_modeType_Can_tx_mr_lr_modeType_MIN;
  static constexpr Can_tx_mr_lr_modeType Can_tx_mr_lr_modeType_MAX =
    Esr_status4_4e3_Can_tx_mr_lr_modeType_Can_tx_mr_lr_modeType_MAX;
  static constexpr int Can_tx_mr_lr_modeType_ARRAYSIZE =
    Esr_status4_4e3_Can_tx_mr_lr_modeType_Can_tx_mr_lr_modeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_mr_lr_modeType_descriptor() {
    return Esr_status4_4e3_Can_tx_mr_lr_modeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_mr_lr_modeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_mr_lr_modeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_mr_lr_modeType_Name.");
    return Esr_status4_4e3_Can_tx_mr_lr_modeType_Name(enum_t_value);
  }
  static inline bool Can_tx_mr_lr_modeType_Parse(const std::string& name,
      Can_tx_mr_lr_modeType* value) {
    return Esr_status4_4e3_Can_tx_mr_lr_modeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxTruckTargetDetFieldNumber = 1,
    kCanTxLrOnlyGratingLobeDetFieldNumber = 2,
    kCanTxSidelobeBlockageFieldNumber = 3,
    kCanTxPartialBlockageFieldNumber = 4,
    kCanTxPathIdAccStatFieldNumber = 5,
    kCanTxMrLrModeFieldNumber = 6,
    kCanTxAutoAlignAngleFieldNumber = 7,
    kCanTxRollingCount3FieldNumber = 8,
    kCanTxPathIdFcwStatFieldNumber = 9,
    kCanTxPathIdFcwMoveFieldNumber = 10,
    kCanTxPathIdCmbbStatFieldNumber = 11,
    kCanTxPathIdCmbbMoveFieldNumber = 12,
    kCanTxPathIdAccFieldNumber = 13,
  };
  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
  bool has_can_tx_truck_target_det() const;
  private:
  bool _internal_has_can_tx_truck_target_det() const;
  public:
  void clear_can_tx_truck_target_det();
  ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType can_tx_truck_target_det() const;
  void set_can_tx_truck_target_det(::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType value);
  private:
  ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType _internal_can_tx_truck_target_det() const;
  void _internal_set_can_tx_truck_target_det(::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType value);
  public:

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
  bool has_can_tx_lr_only_grating_lobe_det() const;
  private:
  bool _internal_has_can_tx_lr_only_grating_lobe_det() const;
  public:
  void clear_can_tx_lr_only_grating_lobe_det();
  ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det() const;
  void set_can_tx_lr_only_grating_lobe_det(::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType value);
  private:
  ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType _internal_can_tx_lr_only_grating_lobe_det() const;
  void _internal_set_can_tx_lr_only_grating_lobe_det(::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType value);
  public:

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
  bool has_can_tx_sidelobe_blockage() const;
  private:
  bool _internal_has_can_tx_sidelobe_blockage() const;
  public:
  void clear_can_tx_sidelobe_blockage();
  ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage() const;
  void set_can_tx_sidelobe_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType value);
  private:
  ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType _internal_can_tx_sidelobe_blockage() const;
  void _internal_set_can_tx_sidelobe_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType value);
  public:

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
  bool has_can_tx_partial_blockage() const;
  private:
  bool _internal_has_can_tx_partial_blockage() const;
  public:
  void clear_can_tx_partial_blockage();
  ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType can_tx_partial_blockage() const;
  void set_can_tx_partial_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType value);
  private:
  ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType _internal_can_tx_partial_blockage() const;
  void _internal_set_can_tx_partial_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType value);
  public:

  // optional int32 can_tx_path_id_acc_stat = 5;
  bool has_can_tx_path_id_acc_stat() const;
  private:
  bool _internal_has_can_tx_path_id_acc_stat() const;
  public:
  void clear_can_tx_path_id_acc_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_acc_stat() const;
  void set_can_tx_path_id_acc_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_path_id_acc_stat() const;
  void _internal_set_can_tx_path_id_acc_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
  bool has_can_tx_mr_lr_mode() const;
  private:
  bool _internal_has_can_tx_mr_lr_mode() const;
  public:
  void clear_can_tx_mr_lr_mode();
  ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType can_tx_mr_lr_mode() const;
  void set_can_tx_mr_lr_mode(::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType value);
  private:
  ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType _internal_can_tx_mr_lr_mode() const;
  void _internal_set_can_tx_mr_lr_mode(::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType value);
  public:

  // optional double can_tx_auto_align_angle = 7;
  bool has_can_tx_auto_align_angle() const;
  private:
  bool _internal_has_can_tx_auto_align_angle() const;
  public:
  void clear_can_tx_auto_align_angle();
  double can_tx_auto_align_angle() const;
  void set_can_tx_auto_align_angle(double value);
  private:
  double _internal_can_tx_auto_align_angle() const;
  void _internal_set_can_tx_auto_align_angle(double value);
  public:

  // optional int32 can_tx_rolling_count_3 = 8;
  bool has_can_tx_rolling_count_3() const;
  private:
  bool _internal_has_can_tx_rolling_count_3() const;
  public:
  void clear_can_tx_rolling_count_3();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_rolling_count_3() const;
  void set_can_tx_rolling_count_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_rolling_count_3() const;
  void _internal_set_can_tx_rolling_count_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_path_id_fcw_stat = 9;
  bool has_can_tx_path_id_fcw_stat() const;
  private:
  bool _internal_has_can_tx_path_id_fcw_stat() const;
  public:
  void clear_can_tx_path_id_fcw_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_fcw_stat() const;
  void set_can_tx_path_id_fcw_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_path_id_fcw_stat() const;
  void _internal_set_can_tx_path_id_fcw_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_path_id_fcw_move = 10;
  bool has_can_tx_path_id_fcw_move() const;
  private:
  bool _internal_has_can_tx_path_id_fcw_move() const;
  public:
  void clear_can_tx_path_id_fcw_move();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_fcw_move() const;
  void set_can_tx_path_id_fcw_move(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_path_id_fcw_move() const;
  void _internal_set_can_tx_path_id_fcw_move(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_path_id_cmbb_stat = 11;
  bool has_can_tx_path_id_cmbb_stat() const;
  private:
  bool _internal_has_can_tx_path_id_cmbb_stat() const;
  public:
  void clear_can_tx_path_id_cmbb_stat();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_cmbb_stat() const;
  void set_can_tx_path_id_cmbb_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_path_id_cmbb_stat() const;
  void _internal_set_can_tx_path_id_cmbb_stat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_path_id_cmbb_move = 12;
  bool has_can_tx_path_id_cmbb_move() const;
  private:
  bool _internal_has_can_tx_path_id_cmbb_move() const;
  public:
  void clear_can_tx_path_id_cmbb_move();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_cmbb_move() const;
  void set_can_tx_path_id_cmbb_move(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_path_id_cmbb_move() const;
  void _internal_set_can_tx_path_id_cmbb_move(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_path_id_acc = 13;
  bool has_can_tx_path_id_acc() const;
  private:
  bool _internal_has_can_tx_path_id_acc() const;
  public:
  void clear_can_tx_path_id_acc();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_acc() const;
  void set_can_tx_path_id_acc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_path_id_acc() const;
  void _internal_set_can_tx_path_id_acc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status4_4e3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int can_tx_truck_target_det_;
  int can_tx_lr_only_grating_lobe_det_;
  int can_tx_sidelobe_blockage_;
  int can_tx_partial_blockage_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_acc_stat_;
  int can_tx_mr_lr_mode_;
  double can_tx_auto_align_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_rolling_count_3_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_fcw_stat_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_fcw_move_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_cmbb_stat_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_cmbb_move_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_path_id_acc_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_trackmotionpower_540_Motionpower :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_trackmotionpower_540.Motionpower) */ {
 public:
  Esr_trackmotionpower_540_Motionpower();
  virtual ~Esr_trackmotionpower_540_Motionpower();

  Esr_trackmotionpower_540_Motionpower(const Esr_trackmotionpower_540_Motionpower& from);
  Esr_trackmotionpower_540_Motionpower(Esr_trackmotionpower_540_Motionpower&& from) noexcept
    : Esr_trackmotionpower_540_Motionpower() {
    *this = ::std::move(from);
  }

  inline Esr_trackmotionpower_540_Motionpower& operator=(const Esr_trackmotionpower_540_Motionpower& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_trackmotionpower_540_Motionpower& operator=(Esr_trackmotionpower_540_Motionpower&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_trackmotionpower_540_Motionpower& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_trackmotionpower_540_Motionpower* internal_default_instance() {
    return reinterpret_cast<const Esr_trackmotionpower_540_Motionpower*>(
               &_Esr_trackmotionpower_540_Motionpower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Esr_trackmotionpower_540_Motionpower& a, Esr_trackmotionpower_540_Motionpower& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_trackmotionpower_540_Motionpower* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_trackmotionpower_540_Motionpower* New() const final {
    return CreateMaybeMessage<Esr_trackmotionpower_540_Motionpower>(nullptr);
  }

  Esr_trackmotionpower_540_Motionpower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_trackmotionpower_540_Motionpower>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_trackmotionpower_540_Motionpower& from);
  void MergeFrom(const Esr_trackmotionpower_540_Motionpower& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_trackmotionpower_540_Motionpower* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_trackmotionpower_540.Motionpower";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxTrackMovingFieldNumber = 1,
    kCanTxTrackMovingFastFieldNumber = 2,
    kCanTxTrackMovingSlowFieldNumber = 3,
    kCanTxTrackPowerFieldNumber = 4,
  };
  // optional bool can_tx_track_moving = 1;
  bool has_can_tx_track_moving() const;
  private:
  bool _internal_has_can_tx_track_moving() const;
  public:
  void clear_can_tx_track_moving();
  bool can_tx_track_moving() const;
  void set_can_tx_track_moving(bool value);
  private:
  bool _internal_can_tx_track_moving() const;
  void _internal_set_can_tx_track_moving(bool value);
  public:

  // optional bool can_tx_track_moving_fast = 2;
  bool has_can_tx_track_moving_fast() const;
  private:
  bool _internal_has_can_tx_track_moving_fast() const;
  public:
  void clear_can_tx_track_moving_fast();
  bool can_tx_track_moving_fast() const;
  void set_can_tx_track_moving_fast(bool value);
  private:
  bool _internal_can_tx_track_moving_fast() const;
  void _internal_set_can_tx_track_moving_fast(bool value);
  public:

  // optional bool can_tx_track_moving_slow = 3;
  bool has_can_tx_track_moving_slow() const;
  private:
  bool _internal_has_can_tx_track_moving_slow() const;
  public:
  void clear_can_tx_track_moving_slow();
  bool can_tx_track_moving_slow() const;
  void set_can_tx_track_moving_slow(bool value);
  private:
  bool _internal_can_tx_track_moving_slow() const;
  void _internal_set_can_tx_track_moving_slow(bool value);
  public:

  // optional int32 can_tx_track_power = 4;
  bool has_can_tx_track_power() const;
  private:
  bool _internal_has_can_tx_track_power() const;
  public:
  void clear_can_tx_track_power();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_track_power() const;
  void set_can_tx_track_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_track_power() const;
  void _internal_set_can_tx_track_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_trackmotionpower_540.Motionpower)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool can_tx_track_moving_;
  bool can_tx_track_moving_fast_;
  bool can_tx_track_moving_slow_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_track_power_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_trackmotionpower_540 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_trackmotionpower_540) */ {
 public:
  Esr_trackmotionpower_540();
  virtual ~Esr_trackmotionpower_540();

  Esr_trackmotionpower_540(const Esr_trackmotionpower_540& from);
  Esr_trackmotionpower_540(Esr_trackmotionpower_540&& from) noexcept
    : Esr_trackmotionpower_540() {
    *this = ::std::move(from);
  }

  inline Esr_trackmotionpower_540& operator=(const Esr_trackmotionpower_540& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_trackmotionpower_540& operator=(Esr_trackmotionpower_540&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_trackmotionpower_540& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_trackmotionpower_540* internal_default_instance() {
    return reinterpret_cast<const Esr_trackmotionpower_540*>(
               &_Esr_trackmotionpower_540_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Esr_trackmotionpower_540& a, Esr_trackmotionpower_540& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_trackmotionpower_540* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_trackmotionpower_540* New() const final {
    return CreateMaybeMessage<Esr_trackmotionpower_540>(nullptr);
  }

  Esr_trackmotionpower_540* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_trackmotionpower_540>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_trackmotionpower_540& from);
  void MergeFrom(const Esr_trackmotionpower_540& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_trackmotionpower_540* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_trackmotionpower_540";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Esr_trackmotionpower_540_Motionpower Motionpower;

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxTrackMotionPowerFieldNumber = 3,
    kCanTxTrackRollingCount2FieldNumber = 1,
    kCanTxTrackCanIdGroupFieldNumber = 2,
  };
  // repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
  int can_tx_track_motion_power_size() const;
  private:
  int _internal_can_tx_track_motion_power_size() const;
  public:
  void clear_can_tx_track_motion_power();
  ::apollo::drivers::Esr_trackmotionpower_540_Motionpower* mutable_can_tx_track_motion_power(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower >*
      mutable_can_tx_track_motion_power();
  private:
  const ::apollo::drivers::Esr_trackmotionpower_540_Motionpower& _internal_can_tx_track_motion_power(int index) const;
  ::apollo::drivers::Esr_trackmotionpower_540_Motionpower* _internal_add_can_tx_track_motion_power();
  public:
  const ::apollo::drivers::Esr_trackmotionpower_540_Motionpower& can_tx_track_motion_power(int index) const;
  ::apollo::drivers::Esr_trackmotionpower_540_Motionpower* add_can_tx_track_motion_power();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower >&
      can_tx_track_motion_power() const;

  // optional bool can_tx_track_rolling_count_2 = 1;
  bool has_can_tx_track_rolling_count_2() const;
  private:
  bool _internal_has_can_tx_track_rolling_count_2() const;
  public:
  void clear_can_tx_track_rolling_count_2();
  bool can_tx_track_rolling_count_2() const;
  void set_can_tx_track_rolling_count_2(bool value);
  private:
  bool _internal_can_tx_track_rolling_count_2() const;
  void _internal_set_can_tx_track_rolling_count_2(bool value);
  public:

  // optional int32 can_tx_track_can_id_group = 2;
  bool has_can_tx_track_can_id_group() const;
  private:
  bool _internal_has_can_tx_track_can_id_group() const;
  public:
  void clear_can_tx_track_can_id_group();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_track_can_id_group() const;
  void set_can_tx_track_can_id_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_track_can_id_group() const;
  void _internal_set_can_tx_track_can_id_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_trackmotionpower_540)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower > can_tx_track_motion_power_;
  bool can_tx_track_rolling_count_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_track_can_id_group_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Acm_inst_req_7e0 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Acm_inst_req_7e0) */ {
 public:
  Acm_inst_req_7e0();
  virtual ~Acm_inst_req_7e0();

  Acm_inst_req_7e0(const Acm_inst_req_7e0& from);
  Acm_inst_req_7e0(Acm_inst_req_7e0&& from) noexcept
    : Acm_inst_req_7e0() {
    *this = ::std::move(from);
  }

  inline Acm_inst_req_7e0& operator=(const Acm_inst_req_7e0& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acm_inst_req_7e0& operator=(Acm_inst_req_7e0&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acm_inst_req_7e0& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acm_inst_req_7e0* internal_default_instance() {
    return reinterpret_cast<const Acm_inst_req_7e0*>(
               &_Acm_inst_req_7e0_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Acm_inst_req_7e0& a, Acm_inst_req_7e0& b) {
    a.Swap(&b);
  }
  inline void Swap(Acm_inst_req_7e0* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acm_inst_req_7e0* New() const final {
    return CreateMaybeMessage<Acm_inst_req_7e0>(nullptr);
  }

  Acm_inst_req_7e0* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acm_inst_req_7e0>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acm_inst_req_7e0& from);
  void MergeFrom(const Acm_inst_req_7e0& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acm_inst_req_7e0* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Acm_inst_req_7e0";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandCtrFieldNumber = 1,
    kCommandCodeFieldNumber = 2,
    kCcWord2FieldNumber = 3,
    kCcWord1FieldNumber = 4,
    kCcByte2FieldNumber = 5,
    kCcByte1FieldNumber = 6,
  };
  // optional int32 command_ctr = 1;
  bool has_command_ctr() const;
  private:
  bool _internal_has_command_ctr() const;
  public:
  void clear_command_ctr();
  ::PROTOBUF_NAMESPACE_ID::int32 command_ctr() const;
  void set_command_ctr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_command_ctr() const;
  void _internal_set_command_ctr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 command_code = 2;
  bool has_command_code() const;
  private:
  bool _internal_has_command_code() const;
  public:
  void clear_command_code();
  ::PROTOBUF_NAMESPACE_ID::int32 command_code() const;
  void set_command_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_command_code() const;
  void _internal_set_command_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cc_word_2 = 3;
  bool has_cc_word_2() const;
  private:
  bool _internal_has_cc_word_2() const;
  public:
  void clear_cc_word_2();
  ::PROTOBUF_NAMESPACE_ID::int32 cc_word_2() const;
  void set_cc_word_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cc_word_2() const;
  void _internal_set_cc_word_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cc_word_1 = 4;
  bool has_cc_word_1() const;
  private:
  bool _internal_has_cc_word_1() const;
  public:
  void clear_cc_word_1();
  ::PROTOBUF_NAMESPACE_ID::int32 cc_word_1() const;
  void set_cc_word_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cc_word_1() const;
  void _internal_set_cc_word_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cc_byte_2 = 5;
  bool has_cc_byte_2() const;
  private:
  bool _internal_has_cc_byte_2() const;
  public:
  void clear_cc_byte_2();
  ::PROTOBUF_NAMESPACE_ID::int32 cc_byte_2() const;
  void set_cc_byte_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cc_byte_2() const;
  void _internal_set_cc_byte_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cc_byte_1 = 6;
  bool has_cc_byte_1() const;
  private:
  bool _internal_has_cc_byte_1() const;
  public:
  void clear_cc_byte_1();
  ::PROTOBUF_NAMESPACE_ID::int32 cc_byte_1() const;
  void set_cc_byte_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cc_byte_1() const;
  void _internal_set_cc_byte_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Acm_inst_req_7e0)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 command_ctr_;
  ::PROTOBUF_NAMESPACE_ID::int32 command_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 cc_word_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 cc_word_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 cc_byte_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 cc_byte_1_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_track01_500 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_track01_500) */ {
 public:
  Esr_track01_500();
  virtual ~Esr_track01_500();

  Esr_track01_500(const Esr_track01_500& from);
  Esr_track01_500(Esr_track01_500&& from) noexcept
    : Esr_track01_500() {
    *this = ::std::move(from);
  }

  inline Esr_track01_500& operator=(const Esr_track01_500& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_track01_500& operator=(Esr_track01_500&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_track01_500& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_track01_500* internal_default_instance() {
    return reinterpret_cast<const Esr_track01_500*>(
               &_Esr_track01_500_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Esr_track01_500& a, Esr_track01_500& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_track01_500* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_track01_500* New() const final {
    return CreateMaybeMessage<Esr_track01_500>(nullptr);
  }

  Esr_track01_500* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_track01_500>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_track01_500& from);
  void MergeFrom(const Esr_track01_500& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_track01_500* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_track01_500";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Esr_track01_500_Can_tx_track_grouping_changedType Can_tx_track_grouping_changedType;
  static constexpr Can_tx_track_grouping_changedType CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGUNCHANGED =
    Esr_track01_500_Can_tx_track_grouping_changedType_CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGUNCHANGED;
  static constexpr Can_tx_track_grouping_changedType CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGCHANGED =
    Esr_track01_500_Can_tx_track_grouping_changedType_CAN_TX_TRACK_GROUPING_CHANGED_GROUPINGCHANGED;
  static inline bool Can_tx_track_grouping_changedType_IsValid(int value) {
    return Esr_track01_500_Can_tx_track_grouping_changedType_IsValid(value);
  }
  static constexpr Can_tx_track_grouping_changedType Can_tx_track_grouping_changedType_MIN =
    Esr_track01_500_Can_tx_track_grouping_changedType_Can_tx_track_grouping_changedType_MIN;
  static constexpr Can_tx_track_grouping_changedType Can_tx_track_grouping_changedType_MAX =
    Esr_track01_500_Can_tx_track_grouping_changedType_Can_tx_track_grouping_changedType_MAX;
  static constexpr int Can_tx_track_grouping_changedType_ARRAYSIZE =
    Esr_track01_500_Can_tx_track_grouping_changedType_Can_tx_track_grouping_changedType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_track_grouping_changedType_descriptor() {
    return Esr_track01_500_Can_tx_track_grouping_changedType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_track_grouping_changedType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_track_grouping_changedType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_track_grouping_changedType_Name.");
    return Esr_track01_500_Can_tx_track_grouping_changedType_Name(enum_t_value);
  }
  static inline bool Can_tx_track_grouping_changedType_Parse(const std::string& name,
      Can_tx_track_grouping_changedType* value) {
    return Esr_track01_500_Can_tx_track_grouping_changedType_Parse(name, value);
  }

  typedef Esr_track01_500_Can_tx_track_oncomingType Can_tx_track_oncomingType;
  static constexpr Can_tx_track_oncomingType CAN_TX_TRACK_ONCOMING_NOTONCOMING =
    Esr_track01_500_Can_tx_track_oncomingType_CAN_TX_TRACK_ONCOMING_NOTONCOMING;
  static constexpr Can_tx_track_oncomingType CAN_TX_TRACK_ONCOMING_ONCOMING =
    Esr_track01_500_Can_tx_track_oncomingType_CAN_TX_TRACK_ONCOMING_ONCOMING;
  static inline bool Can_tx_track_oncomingType_IsValid(int value) {
    return Esr_track01_500_Can_tx_track_oncomingType_IsValid(value);
  }
  static constexpr Can_tx_track_oncomingType Can_tx_track_oncomingType_MIN =
    Esr_track01_500_Can_tx_track_oncomingType_Can_tx_track_oncomingType_MIN;
  static constexpr Can_tx_track_oncomingType Can_tx_track_oncomingType_MAX =
    Esr_track01_500_Can_tx_track_oncomingType_Can_tx_track_oncomingType_MAX;
  static constexpr int Can_tx_track_oncomingType_ARRAYSIZE =
    Esr_track01_500_Can_tx_track_oncomingType_Can_tx_track_oncomingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_track_oncomingType_descriptor() {
    return Esr_track01_500_Can_tx_track_oncomingType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_track_oncomingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_track_oncomingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_track_oncomingType_Name.");
    return Esr_track01_500_Can_tx_track_oncomingType_Name(enum_t_value);
  }
  static inline bool Can_tx_track_oncomingType_Parse(const std::string& name,
      Can_tx_track_oncomingType* value) {
    return Esr_track01_500_Can_tx_track_oncomingType_Parse(name, value);
  }

  typedef Esr_track01_500_Can_tx_track_bridge_objectType Can_tx_track_bridge_objectType;
  static constexpr Can_tx_track_bridge_objectType CAN_TX_TRACK_BRIDGE_OBJECT_NOT_BRIDGE =
    Esr_track01_500_Can_tx_track_bridge_objectType_CAN_TX_TRACK_BRIDGE_OBJECT_NOT_BRIDGE;
  static constexpr Can_tx_track_bridge_objectType CAN_TX_TRACK_BRIDGE_OBJECT_BRIDGE =
    Esr_track01_500_Can_tx_track_bridge_objectType_CAN_TX_TRACK_BRIDGE_OBJECT_BRIDGE;
  static inline bool Can_tx_track_bridge_objectType_IsValid(int value) {
    return Esr_track01_500_Can_tx_track_bridge_objectType_IsValid(value);
  }
  static constexpr Can_tx_track_bridge_objectType Can_tx_track_bridge_objectType_MIN =
    Esr_track01_500_Can_tx_track_bridge_objectType_Can_tx_track_bridge_objectType_MIN;
  static constexpr Can_tx_track_bridge_objectType Can_tx_track_bridge_objectType_MAX =
    Esr_track01_500_Can_tx_track_bridge_objectType_Can_tx_track_bridge_objectType_MAX;
  static constexpr int Can_tx_track_bridge_objectType_ARRAYSIZE =
    Esr_track01_500_Can_tx_track_bridge_objectType_Can_tx_track_bridge_objectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_track_bridge_objectType_descriptor() {
    return Esr_track01_500_Can_tx_track_bridge_objectType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_track_bridge_objectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_track_bridge_objectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_track_bridge_objectType_Name.");
    return Esr_track01_500_Can_tx_track_bridge_objectType_Name(enum_t_value);
  }
  static inline bool Can_tx_track_bridge_objectType_Parse(const std::string& name,
      Can_tx_track_bridge_objectType* value) {
    return Esr_track01_500_Can_tx_track_bridge_objectType_Parse(name, value);
  }

  typedef Esr_track01_500_Can_tx_track_statusType Can_tx_track_statusType;
  static constexpr Can_tx_track_statusType CAN_TX_TRACK_STATUS_NO_TARGET =
    Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NO_TARGET;
  static constexpr Can_tx_track_statusType CAN_TX_TRACK_STATUS_NEW_TARGET =
    Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NEW_TARGET;
  static constexpr Can_tx_track_statusType CAN_TX_TRACK_STATUS_NEW_UPDATED_TARGET =
    Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NEW_UPDATED_TARGET;
  static constexpr Can_tx_track_statusType CAN_TX_TRACK_STATUS_UPDATED_TARGET =
    Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_UPDATED_TARGET;
  static constexpr Can_tx_track_statusType CAN_TX_TRACK_STATUS_COASTED_TARGET =
    Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_COASTED_TARGET;
  static constexpr Can_tx_track_statusType CAN_TX_TRACK_STATUS_MERGED_TARGET =
    Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_MERGED_TARGET;
  static constexpr Can_tx_track_statusType CAN_TX_TRACK_STATUS_INVALID_COASTED_TARGET =
    Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_INVALID_COASTED_TARGET;
  static constexpr Can_tx_track_statusType CAN_TX_TRACK_STATUS_NEW_COASTED_TARGET =
    Esr_track01_500_Can_tx_track_statusType_CAN_TX_TRACK_STATUS_NEW_COASTED_TARGET;
  static inline bool Can_tx_track_statusType_IsValid(int value) {
    return Esr_track01_500_Can_tx_track_statusType_IsValid(value);
  }
  static constexpr Can_tx_track_statusType Can_tx_track_statusType_MIN =
    Esr_track01_500_Can_tx_track_statusType_Can_tx_track_statusType_MIN;
  static constexpr Can_tx_track_statusType Can_tx_track_statusType_MAX =
    Esr_track01_500_Can_tx_track_statusType_Can_tx_track_statusType_MAX;
  static constexpr int Can_tx_track_statusType_ARRAYSIZE =
    Esr_track01_500_Can_tx_track_statusType_Can_tx_track_statusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_track_statusType_descriptor() {
    return Esr_track01_500_Can_tx_track_statusType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_track_statusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_track_statusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_track_statusType_Name.");
    return Esr_track01_500_Can_tx_track_statusType_Name(enum_t_value);
  }
  static inline bool Can_tx_track_statusType_Parse(const std::string& name,
      Can_tx_track_statusType* value) {
    return Esr_track01_500_Can_tx_track_statusType_Parse(name, value);
  }

  typedef Esr_track01_500_Can_tx_track_med_range_modeType Can_tx_track_med_range_modeType;
  static constexpr Can_tx_track_med_range_modeType CAN_TX_TRACK_MED_RANGE_MODE_NO_MR_LR_UPDATE =
    Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_NO_MR_LR_UPDATE;
  static constexpr Can_tx_track_med_range_modeType CAN_TX_TRACK_MED_RANGE_MODE_MR_UPDATE_ONLY =
    Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_MR_UPDATE_ONLY;
  static constexpr Can_tx_track_med_range_modeType CAN_TX_TRACK_MED_RANGE_MODE_LR_UPDATE_ONLY =
    Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_LR_UPDATE_ONLY;
  static constexpr Can_tx_track_med_range_modeType CAN_TX_TRACK_MED_RANGE_MODE_BOTH_MR_LR_UPDATE =
    Esr_track01_500_Can_tx_track_med_range_modeType_CAN_TX_TRACK_MED_RANGE_MODE_BOTH_MR_LR_UPDATE;
  static inline bool Can_tx_track_med_range_modeType_IsValid(int value) {
    return Esr_track01_500_Can_tx_track_med_range_modeType_IsValid(value);
  }
  static constexpr Can_tx_track_med_range_modeType Can_tx_track_med_range_modeType_MIN =
    Esr_track01_500_Can_tx_track_med_range_modeType_Can_tx_track_med_range_modeType_MIN;
  static constexpr Can_tx_track_med_range_modeType Can_tx_track_med_range_modeType_MAX =
    Esr_track01_500_Can_tx_track_med_range_modeType_Can_tx_track_med_range_modeType_MAX;
  static constexpr int Can_tx_track_med_range_modeType_ARRAYSIZE =
    Esr_track01_500_Can_tx_track_med_range_modeType_Can_tx_track_med_range_modeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_track_med_range_modeType_descriptor() {
    return Esr_track01_500_Can_tx_track_med_range_modeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_track_med_range_modeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_track_med_range_modeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_track_med_range_modeType_Name.");
    return Esr_track01_500_Can_tx_track_med_range_modeType_Name(enum_t_value);
  }
  static inline bool Can_tx_track_med_range_modeType_Parse(const std::string& name,
      Can_tx_track_med_range_modeType* value) {
    return Esr_track01_500_Can_tx_track_med_range_modeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxTrackGroupingChangedFieldNumber = 1,
    kCanTxTrackOncomingFieldNumber = 2,
    kCanTxTrackLatRateFieldNumber = 3,
    kCanTxTrackWidthFieldNumber = 5,
    kCanTxTrackBridgeObjectFieldNumber = 4,
    kCanTxTrackStatusFieldNumber = 6,
    kCanTxTrackRangeRateFieldNumber = 8,
    kCanTxTrackRangeAccelFieldNumber = 9,
    kCanTxTrackRollingCountFieldNumber = 7,
    kCanTxTrackMedRangeModeFieldNumber = 11,
    kCanTxTrackRangeFieldNumber = 10,
    kCanTxTrackAngleFieldNumber = 12,
  };
  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
  bool has_can_tx_track_grouping_changed() const;
  private:
  bool _internal_has_can_tx_track_grouping_changed() const;
  public:
  void clear_can_tx_track_grouping_changed();
  ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType can_tx_track_grouping_changed() const;
  void set_can_tx_track_grouping_changed(::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType value);
  private:
  ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType _internal_can_tx_track_grouping_changed() const;
  void _internal_set_can_tx_track_grouping_changed(::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType value);
  public:

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
  bool has_can_tx_track_oncoming() const;
  private:
  bool _internal_has_can_tx_track_oncoming() const;
  public:
  void clear_can_tx_track_oncoming();
  ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType can_tx_track_oncoming() const;
  void set_can_tx_track_oncoming(::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType value);
  private:
  ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType _internal_can_tx_track_oncoming() const;
  void _internal_set_can_tx_track_oncoming(::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType value);
  public:

  // optional double can_tx_track_lat_rate = 3;
  bool has_can_tx_track_lat_rate() const;
  private:
  bool _internal_has_can_tx_track_lat_rate() const;
  public:
  void clear_can_tx_track_lat_rate();
  double can_tx_track_lat_rate() const;
  void set_can_tx_track_lat_rate(double value);
  private:
  double _internal_can_tx_track_lat_rate() const;
  void _internal_set_can_tx_track_lat_rate(double value);
  public:

  // optional double can_tx_track_width = 5;
  bool has_can_tx_track_width() const;
  private:
  bool _internal_has_can_tx_track_width() const;
  public:
  void clear_can_tx_track_width();
  double can_tx_track_width() const;
  void set_can_tx_track_width(double value);
  private:
  double _internal_can_tx_track_width() const;
  void _internal_set_can_tx_track_width(double value);
  public:

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
  bool has_can_tx_track_bridge_object() const;
  private:
  bool _internal_has_can_tx_track_bridge_object() const;
  public:
  void clear_can_tx_track_bridge_object();
  ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType can_tx_track_bridge_object() const;
  void set_can_tx_track_bridge_object(::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType value);
  private:
  ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType _internal_can_tx_track_bridge_object() const;
  void _internal_set_can_tx_track_bridge_object(::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType value);
  public:

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
  bool has_can_tx_track_status() const;
  private:
  bool _internal_has_can_tx_track_status() const;
  public:
  void clear_can_tx_track_status();
  ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType can_tx_track_status() const;
  void set_can_tx_track_status(::apollo::drivers::Esr_track01_500_Can_tx_track_statusType value);
  private:
  ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType _internal_can_tx_track_status() const;
  void _internal_set_can_tx_track_status(::apollo::drivers::Esr_track01_500_Can_tx_track_statusType value);
  public:

  // optional double can_tx_track_range_rate = 8;
  bool has_can_tx_track_range_rate() const;
  private:
  bool _internal_has_can_tx_track_range_rate() const;
  public:
  void clear_can_tx_track_range_rate();
  double can_tx_track_range_rate() const;
  void set_can_tx_track_range_rate(double value);
  private:
  double _internal_can_tx_track_range_rate() const;
  void _internal_set_can_tx_track_range_rate(double value);
  public:

  // optional double can_tx_track_range_accel = 9;
  bool has_can_tx_track_range_accel() const;
  private:
  bool _internal_has_can_tx_track_range_accel() const;
  public:
  void clear_can_tx_track_range_accel();
  double can_tx_track_range_accel() const;
  void set_can_tx_track_range_accel(double value);
  private:
  double _internal_can_tx_track_range_accel() const;
  void _internal_set_can_tx_track_range_accel(double value);
  public:

  // optional bool can_tx_track_rolling_count = 7;
  bool has_can_tx_track_rolling_count() const;
  private:
  bool _internal_has_can_tx_track_rolling_count() const;
  public:
  void clear_can_tx_track_rolling_count();
  bool can_tx_track_rolling_count() const;
  void set_can_tx_track_rolling_count(bool value);
  private:
  bool _internal_can_tx_track_rolling_count() const;
  void _internal_set_can_tx_track_rolling_count(bool value);
  public:

  // optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
  bool has_can_tx_track_med_range_mode() const;
  private:
  bool _internal_has_can_tx_track_med_range_mode() const;
  public:
  void clear_can_tx_track_med_range_mode();
  ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType can_tx_track_med_range_mode() const;
  void set_can_tx_track_med_range_mode(::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType value);
  private:
  ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType _internal_can_tx_track_med_range_mode() const;
  void _internal_set_can_tx_track_med_range_mode(::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType value);
  public:

  // optional double can_tx_track_range = 10;
  bool has_can_tx_track_range() const;
  private:
  bool _internal_has_can_tx_track_range() const;
  public:
  void clear_can_tx_track_range();
  double can_tx_track_range() const;
  void set_can_tx_track_range(double value);
  private:
  double _internal_can_tx_track_range() const;
  void _internal_set_can_tx_track_range(double value);
  public:

  // optional double can_tx_track_angle = 12;
  bool has_can_tx_track_angle() const;
  private:
  bool _internal_has_can_tx_track_angle() const;
  public:
  void clear_can_tx_track_angle();
  double can_tx_track_angle() const;
  void set_can_tx_track_angle(double value);
  private:
  double _internal_can_tx_track_angle() const;
  void _internal_set_can_tx_track_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_track01_500)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int can_tx_track_grouping_changed_;
  int can_tx_track_oncoming_;
  double can_tx_track_lat_rate_;
  double can_tx_track_width_;
  int can_tx_track_bridge_object_;
  int can_tx_track_status_;
  double can_tx_track_range_rate_;
  double can_tx_track_range_accel_;
  bool can_tx_track_rolling_count_;
  int can_tx_track_med_range_mode_;
  double can_tx_track_range_;
  double can_tx_track_angle_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_valid1_5d0 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_valid1_5d0) */ {
 public:
  Esr_valid1_5d0();
  virtual ~Esr_valid1_5d0();

  Esr_valid1_5d0(const Esr_valid1_5d0& from);
  Esr_valid1_5d0(Esr_valid1_5d0&& from) noexcept
    : Esr_valid1_5d0() {
    *this = ::std::move(from);
  }

  inline Esr_valid1_5d0& operator=(const Esr_valid1_5d0& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_valid1_5d0& operator=(Esr_valid1_5d0&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_valid1_5d0& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_valid1_5d0* internal_default_instance() {
    return reinterpret_cast<const Esr_valid1_5d0*>(
               &_Esr_valid1_5d0_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Esr_valid1_5d0& a, Esr_valid1_5d0& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_valid1_5d0* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_valid1_5d0* New() const final {
    return CreateMaybeMessage<Esr_valid1_5d0>(nullptr);
  }

  Esr_valid1_5d0* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_valid1_5d0>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_valid1_5d0& from);
  void MergeFrom(const Esr_valid1_5d0& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_valid1_5d0* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_valid1_5d0";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxValidLrRangeRateFieldNumber = 2,
    kCanTxValidLrSnFieldNumber = 1,
    kCanTxValidLrPowerFieldNumber = 4,
    kCanTxValidLrRangeFieldNumber = 3,
    kCanTxValidLrAngleFieldNumber = 5,
  };
  // optional double can_tx_valid_lr_range_rate = 2;
  bool has_can_tx_valid_lr_range_rate() const;
  private:
  bool _internal_has_can_tx_valid_lr_range_rate() const;
  public:
  void clear_can_tx_valid_lr_range_rate();
  double can_tx_valid_lr_range_rate() const;
  void set_can_tx_valid_lr_range_rate(double value);
  private:
  double _internal_can_tx_valid_lr_range_rate() const;
  void _internal_set_can_tx_valid_lr_range_rate(double value);
  public:

  // optional int32 can_tx_valid_lr_sn = 1;
  bool has_can_tx_valid_lr_sn() const;
  private:
  bool _internal_has_can_tx_valid_lr_sn() const;
  public:
  void clear_can_tx_valid_lr_sn();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_valid_lr_sn() const;
  void set_can_tx_valid_lr_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_valid_lr_sn() const;
  void _internal_set_can_tx_valid_lr_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_valid_lr_power = 4;
  bool has_can_tx_valid_lr_power() const;
  private:
  bool _internal_has_can_tx_valid_lr_power() const;
  public:
  void clear_can_tx_valid_lr_power();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_valid_lr_power() const;
  void set_can_tx_valid_lr_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_valid_lr_power() const;
  void _internal_set_can_tx_valid_lr_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double can_tx_valid_lr_range = 3;
  bool has_can_tx_valid_lr_range() const;
  private:
  bool _internal_has_can_tx_valid_lr_range() const;
  public:
  void clear_can_tx_valid_lr_range();
  double can_tx_valid_lr_range() const;
  void set_can_tx_valid_lr_range(double value);
  private:
  double _internal_can_tx_valid_lr_range() const;
  void _internal_set_can_tx_valid_lr_range(double value);
  public:

  // optional double can_tx_valid_lr_angle = 5;
  bool has_can_tx_valid_lr_angle() const;
  private:
  bool _internal_has_can_tx_valid_lr_angle() const;
  public:
  void clear_can_tx_valid_lr_angle();
  double can_tx_valid_lr_angle() const;
  void set_can_tx_valid_lr_angle(double value);
  private:
  double _internal_can_tx_valid_lr_angle() const;
  void _internal_set_can_tx_valid_lr_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_valid1_5d0)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double can_tx_valid_lr_range_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_valid_lr_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_valid_lr_power_;
  double can_tx_valid_lr_range_;
  double can_tx_valid_lr_angle_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_valid2_5d1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_valid2_5d1) */ {
 public:
  Esr_valid2_5d1();
  virtual ~Esr_valid2_5d1();

  Esr_valid2_5d1(const Esr_valid2_5d1& from);
  Esr_valid2_5d1(Esr_valid2_5d1&& from) noexcept
    : Esr_valid2_5d1() {
    *this = ::std::move(from);
  }

  inline Esr_valid2_5d1& operator=(const Esr_valid2_5d1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_valid2_5d1& operator=(Esr_valid2_5d1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_valid2_5d1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_valid2_5d1* internal_default_instance() {
    return reinterpret_cast<const Esr_valid2_5d1*>(
               &_Esr_valid2_5d1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Esr_valid2_5d1& a, Esr_valid2_5d1& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_valid2_5d1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_valid2_5d1* New() const final {
    return CreateMaybeMessage<Esr_valid2_5d1>(nullptr);
  }

  Esr_valid2_5d1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_valid2_5d1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_valid2_5d1& from);
  void MergeFrom(const Esr_valid2_5d1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_valid2_5d1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_valid2_5d1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxValidMrRangeRateFieldNumber = 2,
    kCanTxValidMrSnFieldNumber = 1,
    kCanTxValidMrPowerFieldNumber = 4,
    kCanTxValidMrRangeFieldNumber = 3,
    kCanTxValidMrAngleFieldNumber = 5,
  };
  // optional double can_tx_valid_mr_range_rate = 2;
  bool has_can_tx_valid_mr_range_rate() const;
  private:
  bool _internal_has_can_tx_valid_mr_range_rate() const;
  public:
  void clear_can_tx_valid_mr_range_rate();
  double can_tx_valid_mr_range_rate() const;
  void set_can_tx_valid_mr_range_rate(double value);
  private:
  double _internal_can_tx_valid_mr_range_rate() const;
  void _internal_set_can_tx_valid_mr_range_rate(double value);
  public:

  // optional int32 can_tx_valid_mr_sn = 1;
  bool has_can_tx_valid_mr_sn() const;
  private:
  bool _internal_has_can_tx_valid_mr_sn() const;
  public:
  void clear_can_tx_valid_mr_sn();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_valid_mr_sn() const;
  void set_can_tx_valid_mr_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_valid_mr_sn() const;
  void _internal_set_can_tx_valid_mr_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_valid_mr_power = 4;
  bool has_can_tx_valid_mr_power() const;
  private:
  bool _internal_has_can_tx_valid_mr_power() const;
  public:
  void clear_can_tx_valid_mr_power();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_valid_mr_power() const;
  void set_can_tx_valid_mr_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_valid_mr_power() const;
  void _internal_set_can_tx_valid_mr_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double can_tx_valid_mr_range = 3;
  bool has_can_tx_valid_mr_range() const;
  private:
  bool _internal_has_can_tx_valid_mr_range() const;
  public:
  void clear_can_tx_valid_mr_range();
  double can_tx_valid_mr_range() const;
  void set_can_tx_valid_mr_range(double value);
  private:
  double _internal_can_tx_valid_mr_range() const;
  void _internal_set_can_tx_valid_mr_range(double value);
  public:

  // optional double can_tx_valid_mr_angle = 5;
  bool has_can_tx_valid_mr_angle() const;
  private:
  bool _internal_has_can_tx_valid_mr_angle() const;
  public:
  void clear_can_tx_valid_mr_angle();
  double can_tx_valid_mr_angle() const;
  void set_can_tx_valid_mr_angle(double value);
  private:
  double _internal_can_tx_valid_mr_angle() const;
  void _internal_set_can_tx_valid_mr_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_valid2_5d1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double can_tx_valid_mr_range_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_valid_mr_sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_valid_mr_power_;
  double can_tx_valid_mr_range_;
  double can_tx_valid_mr_angle_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Acm_inst_resp_7e4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Acm_inst_resp_7e4) */ {
 public:
  Acm_inst_resp_7e4();
  virtual ~Acm_inst_resp_7e4();

  Acm_inst_resp_7e4(const Acm_inst_resp_7e4& from);
  Acm_inst_resp_7e4(Acm_inst_resp_7e4&& from) noexcept
    : Acm_inst_resp_7e4() {
    *this = ::std::move(from);
  }

  inline Acm_inst_resp_7e4& operator=(const Acm_inst_resp_7e4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acm_inst_resp_7e4& operator=(Acm_inst_resp_7e4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acm_inst_resp_7e4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acm_inst_resp_7e4* internal_default_instance() {
    return reinterpret_cast<const Acm_inst_resp_7e4*>(
               &_Acm_inst_resp_7e4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Acm_inst_resp_7e4& a, Acm_inst_resp_7e4& b) {
    a.Swap(&b);
  }
  inline void Swap(Acm_inst_resp_7e4* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acm_inst_resp_7e4* New() const final {
    return CreateMaybeMessage<Acm_inst_resp_7e4>(nullptr);
  }

  Acm_inst_resp_7e4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acm_inst_resp_7e4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acm_inst_resp_7e4& from);
  void MergeFrom(const Acm_inst_resp_7e4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acm_inst_resp_7e4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Acm_inst_resp_7e4";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kData7FieldNumber = 1,
    kData6FieldNumber = 2,
    kData5FieldNumber = 3,
    kData4FieldNumber = 4,
    kData3FieldNumber = 5,
    kRtnCmdCounterFieldNumber = 6,
    kCommandReturnCodeFieldNumber = 7,
    kPidFieldNumber = 8,
  };
  // optional int32 data_7 = 1;
  bool has_data_7() const;
  private:
  bool _internal_has_data_7() const;
  public:
  void clear_data_7();
  ::PROTOBUF_NAMESPACE_ID::int32 data_7() const;
  void set_data_7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_7() const;
  void _internal_set_data_7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 data_6 = 2;
  bool has_data_6() const;
  private:
  bool _internal_has_data_6() const;
  public:
  void clear_data_6();
  ::PROTOBUF_NAMESPACE_ID::int32 data_6() const;
  void set_data_6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_6() const;
  void _internal_set_data_6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 data_5 = 3;
  bool has_data_5() const;
  private:
  bool _internal_has_data_5() const;
  public:
  void clear_data_5();
  ::PROTOBUF_NAMESPACE_ID::int32 data_5() const;
  void set_data_5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_5() const;
  void _internal_set_data_5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 data_4 = 4;
  bool has_data_4() const;
  private:
  bool _internal_has_data_4() const;
  public:
  void clear_data_4();
  ::PROTOBUF_NAMESPACE_ID::int32 data_4() const;
  void set_data_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_4() const;
  void _internal_set_data_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 data_3 = 5;
  bool has_data_3() const;
  private:
  bool _internal_has_data_3() const;
  public:
  void clear_data_3();
  ::PROTOBUF_NAMESPACE_ID::int32 data_3() const;
  void set_data_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_3() const;
  void _internal_set_data_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rtn_cmd_counter = 6;
  bool has_rtn_cmd_counter() const;
  private:
  bool _internal_has_rtn_cmd_counter() const;
  public:
  void clear_rtn_cmd_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 rtn_cmd_counter() const;
  void set_rtn_cmd_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rtn_cmd_counter() const;
  void _internal_set_rtn_cmd_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 command_return_code = 7;
  bool has_command_return_code() const;
  private:
  bool _internal_has_command_return_code() const;
  public:
  void clear_command_return_code();
  ::PROTOBUF_NAMESPACE_ID::int32 command_return_code() const;
  void set_command_return_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_command_return_code() const;
  void _internal_set_command_return_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pid = 8;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Acm_inst_resp_7e4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_7_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_6_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_5_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_4_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_3_;
  ::PROTOBUF_NAMESPACE_ID::int32 rtn_cmd_counter_;
  ::PROTOBUF_NAMESPACE_ID::int32 command_return_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Vehicle2_4f1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Vehicle2_4f1) */ {
 public:
  Vehicle2_4f1();
  virtual ~Vehicle2_4f1();

  Vehicle2_4f1(const Vehicle2_4f1& from);
  Vehicle2_4f1(Vehicle2_4f1&& from) noexcept
    : Vehicle2_4f1() {
    *this = ::std::move(from);
  }

  inline Vehicle2_4f1& operator=(const Vehicle2_4f1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle2_4f1& operator=(Vehicle2_4f1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle2_4f1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle2_4f1* internal_default_instance() {
    return reinterpret_cast<const Vehicle2_4f1*>(
               &_Vehicle2_4f1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Vehicle2_4f1& a, Vehicle2_4f1& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle2_4f1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle2_4f1* New() const final {
    return CreateMaybeMessage<Vehicle2_4f1>(nullptr);
  }

  Vehicle2_4f1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle2_4f1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle2_4f1& from);
  void MergeFrom(const Vehicle2_4f1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle2_4f1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Vehicle2_4f1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehicle2_4f1_Can_rx_mr_only_transmitType Can_rx_mr_only_transmitType;
  static constexpr Can_rx_mr_only_transmitType CAN_RX_MR_ONLY_TRANSMIT_OFF =
    Vehicle2_4f1_Can_rx_mr_only_transmitType_CAN_RX_MR_ONLY_TRANSMIT_OFF;
  static constexpr Can_rx_mr_only_transmitType CAN_RX_MR_ONLY_TRANSMIT_ON =
    Vehicle2_4f1_Can_rx_mr_only_transmitType_CAN_RX_MR_ONLY_TRANSMIT_ON;
  static inline bool Can_rx_mr_only_transmitType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_mr_only_transmitType_IsValid(value);
  }
  static constexpr Can_rx_mr_only_transmitType Can_rx_mr_only_transmitType_MIN =
    Vehicle2_4f1_Can_rx_mr_only_transmitType_Can_rx_mr_only_transmitType_MIN;
  static constexpr Can_rx_mr_only_transmitType Can_rx_mr_only_transmitType_MAX =
    Vehicle2_4f1_Can_rx_mr_only_transmitType_Can_rx_mr_only_transmitType_MAX;
  static constexpr int Can_rx_mr_only_transmitType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_mr_only_transmitType_Can_rx_mr_only_transmitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_mr_only_transmitType_descriptor() {
    return Vehicle2_4f1_Can_rx_mr_only_transmitType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_mr_only_transmitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_mr_only_transmitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_mr_only_transmitType_Name.");
    return Vehicle2_4f1_Can_rx_mr_only_transmitType_Name(enum_t_value);
  }
  static inline bool Can_rx_mr_only_transmitType_Parse(const std::string& name,
      Can_rx_mr_only_transmitType* value) {
    return Vehicle2_4f1_Can_rx_mr_only_transmitType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_lr_only_transmitType Can_rx_lr_only_transmitType;
  static constexpr Can_rx_lr_only_transmitType CAN_RX_LR_ONLY_TRANSMIT_OFF =
    Vehicle2_4f1_Can_rx_lr_only_transmitType_CAN_RX_LR_ONLY_TRANSMIT_OFF;
  static constexpr Can_rx_lr_only_transmitType CAN_RX_LR_ONLY_TRANSMIT_ON =
    Vehicle2_4f1_Can_rx_lr_only_transmitType_CAN_RX_LR_ONLY_TRANSMIT_ON;
  static inline bool Can_rx_lr_only_transmitType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_lr_only_transmitType_IsValid(value);
  }
  static constexpr Can_rx_lr_only_transmitType Can_rx_lr_only_transmitType_MIN =
    Vehicle2_4f1_Can_rx_lr_only_transmitType_Can_rx_lr_only_transmitType_MIN;
  static constexpr Can_rx_lr_only_transmitType Can_rx_lr_only_transmitType_MAX =
    Vehicle2_4f1_Can_rx_lr_only_transmitType_Can_rx_lr_only_transmitType_MAX;
  static constexpr int Can_rx_lr_only_transmitType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_lr_only_transmitType_Can_rx_lr_only_transmitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_lr_only_transmitType_descriptor() {
    return Vehicle2_4f1_Can_rx_lr_only_transmitType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_lr_only_transmitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_lr_only_transmitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_lr_only_transmitType_Name.");
    return Vehicle2_4f1_Can_rx_lr_only_transmitType_Name(enum_t_value);
  }
  static inline bool Can_rx_lr_only_transmitType_Parse(const std::string& name,
      Can_rx_lr_only_transmitType* value) {
    return Vehicle2_4f1_Can_rx_lr_only_transmitType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_clear_faultsType Can_rx_clear_faultsType;
  static constexpr Can_rx_clear_faultsType CAN_RX_CLEAR_FAULTS_OFF =
    Vehicle2_4f1_Can_rx_clear_faultsType_CAN_RX_CLEAR_FAULTS_OFF;
  static constexpr Can_rx_clear_faultsType CAN_RX_CLEAR_FAULTS_ON =
    Vehicle2_4f1_Can_rx_clear_faultsType_CAN_RX_CLEAR_FAULTS_ON;
  static inline bool Can_rx_clear_faultsType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_clear_faultsType_IsValid(value);
  }
  static constexpr Can_rx_clear_faultsType Can_rx_clear_faultsType_MIN =
    Vehicle2_4f1_Can_rx_clear_faultsType_Can_rx_clear_faultsType_MIN;
  static constexpr Can_rx_clear_faultsType Can_rx_clear_faultsType_MAX =
    Vehicle2_4f1_Can_rx_clear_faultsType_Can_rx_clear_faultsType_MAX;
  static constexpr int Can_rx_clear_faultsType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_clear_faultsType_Can_rx_clear_faultsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_clear_faultsType_descriptor() {
    return Vehicle2_4f1_Can_rx_clear_faultsType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_clear_faultsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_clear_faultsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_clear_faultsType_Name.");
    return Vehicle2_4f1_Can_rx_clear_faultsType_Name(enum_t_value);
  }
  static inline bool Can_rx_clear_faultsType_Parse(const std::string& name,
      Can_rx_clear_faultsType* value) {
    return Vehicle2_4f1_Can_rx_clear_faultsType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_use_angle_misalignmentType Can_rx_use_angle_misalignmentType;
  static constexpr Can_rx_use_angle_misalignmentType CAN_RX_USE_ANGLE_MISALIGNMENT_OFF =
    Vehicle2_4f1_Can_rx_use_angle_misalignmentType_CAN_RX_USE_ANGLE_MISALIGNMENT_OFF;
  static constexpr Can_rx_use_angle_misalignmentType CAN_RX_USE_ANGLE_MISALIGNMENT_ON =
    Vehicle2_4f1_Can_rx_use_angle_misalignmentType_CAN_RX_USE_ANGLE_MISALIGNMENT_ON;
  static inline bool Can_rx_use_angle_misalignmentType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_use_angle_misalignmentType_IsValid(value);
  }
  static constexpr Can_rx_use_angle_misalignmentType Can_rx_use_angle_misalignmentType_MIN =
    Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Can_rx_use_angle_misalignmentType_MIN;
  static constexpr Can_rx_use_angle_misalignmentType Can_rx_use_angle_misalignmentType_MAX =
    Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Can_rx_use_angle_misalignmentType_MAX;
  static constexpr int Can_rx_use_angle_misalignmentType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Can_rx_use_angle_misalignmentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_use_angle_misalignmentType_descriptor() {
    return Vehicle2_4f1_Can_rx_use_angle_misalignmentType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_use_angle_misalignmentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_use_angle_misalignmentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_use_angle_misalignmentType_Name.");
    return Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Name(enum_t_value);
  }
  static inline bool Can_rx_use_angle_misalignmentType_Parse(const std::string& name,
      Can_rx_use_angle_misalignmentType* value) {
    return Vehicle2_4f1_Can_rx_use_angle_misalignmentType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_turn_signal_statusType Can_rx_turn_signal_statusType;
  static constexpr Can_rx_turn_signal_statusType CAN_RX_TURN_SIGNAL_STATUS_OFF =
    Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_OFF;
  static constexpr Can_rx_turn_signal_statusType CAN_RX_TURN_SIGNAL_STATUS_LEFT =
    Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_LEFT;
  static constexpr Can_rx_turn_signal_statusType CAN_RX_TURN_SIGNAL_STATUS_RIGHT =
    Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_RIGHT;
  static constexpr Can_rx_turn_signal_statusType CAN_RX_TURN_SIGNAL_STATUS_INVALID_3 =
    Vehicle2_4f1_Can_rx_turn_signal_statusType_CAN_RX_TURN_SIGNAL_STATUS_INVALID_3;
  static inline bool Can_rx_turn_signal_statusType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_turn_signal_statusType_IsValid(value);
  }
  static constexpr Can_rx_turn_signal_statusType Can_rx_turn_signal_statusType_MIN =
    Vehicle2_4f1_Can_rx_turn_signal_statusType_Can_rx_turn_signal_statusType_MIN;
  static constexpr Can_rx_turn_signal_statusType Can_rx_turn_signal_statusType_MAX =
    Vehicle2_4f1_Can_rx_turn_signal_statusType_Can_rx_turn_signal_statusType_MAX;
  static constexpr int Can_rx_turn_signal_statusType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_turn_signal_statusType_Can_rx_turn_signal_statusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_turn_signal_statusType_descriptor() {
    return Vehicle2_4f1_Can_rx_turn_signal_statusType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_turn_signal_statusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_turn_signal_statusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_turn_signal_statusType_Name.");
    return Vehicle2_4f1_Can_rx_turn_signal_statusType_Name(enum_t_value);
  }
  static inline bool Can_rx_turn_signal_statusType_Parse(const std::string& name,
      Can_rx_turn_signal_statusType* value) {
    return Vehicle2_4f1_Can_rx_turn_signal_statusType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_blockage_disableType Can_rx_blockage_disableType;
  static constexpr Can_rx_blockage_disableType CAN_RX_BLOCKAGE_DISABLE_ENABLED =
    Vehicle2_4f1_Can_rx_blockage_disableType_CAN_RX_BLOCKAGE_DISABLE_ENABLED;
  static constexpr Can_rx_blockage_disableType CAN_RX_BLOCKAGE_DISABLE_DISABLED =
    Vehicle2_4f1_Can_rx_blockage_disableType_CAN_RX_BLOCKAGE_DISABLE_DISABLED;
  static inline bool Can_rx_blockage_disableType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_blockage_disableType_IsValid(value);
  }
  static constexpr Can_rx_blockage_disableType Can_rx_blockage_disableType_MIN =
    Vehicle2_4f1_Can_rx_blockage_disableType_Can_rx_blockage_disableType_MIN;
  static constexpr Can_rx_blockage_disableType Can_rx_blockage_disableType_MAX =
    Vehicle2_4f1_Can_rx_blockage_disableType_Can_rx_blockage_disableType_MAX;
  static constexpr int Can_rx_blockage_disableType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_blockage_disableType_Can_rx_blockage_disableType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_blockage_disableType_descriptor() {
    return Vehicle2_4f1_Can_rx_blockage_disableType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_blockage_disableType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_blockage_disableType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_blockage_disableType_Name.");
    return Vehicle2_4f1_Can_rx_blockage_disableType_Name(enum_t_value);
  }
  static inline bool Can_rx_blockage_disableType_Parse(const std::string& name,
      Can_rx_blockage_disableType* value) {
    return Vehicle2_4f1_Can_rx_blockage_disableType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_vehicle_speed_validityType Can_rx_vehicle_speed_validityType;
  static constexpr Can_rx_vehicle_speed_validityType CAN_RX_VEHICLE_SPEED_VALIDITY_INVALID =
    Vehicle2_4f1_Can_rx_vehicle_speed_validityType_CAN_RX_VEHICLE_SPEED_VALIDITY_INVALID;
  static constexpr Can_rx_vehicle_speed_validityType CAN_RX_VEHICLE_SPEED_VALIDITY_VALID =
    Vehicle2_4f1_Can_rx_vehicle_speed_validityType_CAN_RX_VEHICLE_SPEED_VALIDITY_VALID;
  static inline bool Can_rx_vehicle_speed_validityType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_vehicle_speed_validityType_IsValid(value);
  }
  static constexpr Can_rx_vehicle_speed_validityType Can_rx_vehicle_speed_validityType_MIN =
    Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Can_rx_vehicle_speed_validityType_MIN;
  static constexpr Can_rx_vehicle_speed_validityType Can_rx_vehicle_speed_validityType_MAX =
    Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Can_rx_vehicle_speed_validityType_MAX;
  static constexpr int Can_rx_vehicle_speed_validityType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Can_rx_vehicle_speed_validityType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_vehicle_speed_validityType_descriptor() {
    return Vehicle2_4f1_Can_rx_vehicle_speed_validityType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_vehicle_speed_validityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_vehicle_speed_validityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_vehicle_speed_validityType_Name.");
    return Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Name(enum_t_value);
  }
  static inline bool Can_rx_vehicle_speed_validityType_Parse(const std::string& name,
      Can_rx_vehicle_speed_validityType* value) {
    return Vehicle2_4f1_Can_rx_vehicle_speed_validityType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_mmr_upside_downType Can_rx_mmr_upside_downType;
  static constexpr Can_rx_mmr_upside_downType CAN_RX_MMR_UPSIDE_DOWN_RIGHT_SIDE_UP =
    Vehicle2_4f1_Can_rx_mmr_upside_downType_CAN_RX_MMR_UPSIDE_DOWN_RIGHT_SIDE_UP;
  static constexpr Can_rx_mmr_upside_downType CAN_RX_MMR_UPSIDE_DOWN_UPSIDE_DOWN =
    Vehicle2_4f1_Can_rx_mmr_upside_downType_CAN_RX_MMR_UPSIDE_DOWN_UPSIDE_DOWN;
  static inline bool Can_rx_mmr_upside_downType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_mmr_upside_downType_IsValid(value);
  }
  static constexpr Can_rx_mmr_upside_downType Can_rx_mmr_upside_downType_MIN =
    Vehicle2_4f1_Can_rx_mmr_upside_downType_Can_rx_mmr_upside_downType_MIN;
  static constexpr Can_rx_mmr_upside_downType Can_rx_mmr_upside_downType_MAX =
    Vehicle2_4f1_Can_rx_mmr_upside_downType_Can_rx_mmr_upside_downType_MAX;
  static constexpr int Can_rx_mmr_upside_downType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_mmr_upside_downType_Can_rx_mmr_upside_downType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_mmr_upside_downType_descriptor() {
    return Vehicle2_4f1_Can_rx_mmr_upside_downType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_mmr_upside_downType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_mmr_upside_downType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_mmr_upside_downType_Name.");
    return Vehicle2_4f1_Can_rx_mmr_upside_downType_Name(enum_t_value);
  }
  static inline bool Can_rx_mmr_upside_downType_Parse(const std::string& name,
      Can_rx_mmr_upside_downType* value) {
    return Vehicle2_4f1_Can_rx_mmr_upside_downType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_wiper_statusType Can_rx_wiper_statusType;
  static constexpr Can_rx_wiper_statusType CAN_RX_WIPER_STATUS_OFF =
    Vehicle2_4f1_Can_rx_wiper_statusType_CAN_RX_WIPER_STATUS_OFF;
  static constexpr Can_rx_wiper_statusType CAN_RX_WIPER_STATUS_ON =
    Vehicle2_4f1_Can_rx_wiper_statusType_CAN_RX_WIPER_STATUS_ON;
  static inline bool Can_rx_wiper_statusType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_wiper_statusType_IsValid(value);
  }
  static constexpr Can_rx_wiper_statusType Can_rx_wiper_statusType_MIN =
    Vehicle2_4f1_Can_rx_wiper_statusType_Can_rx_wiper_statusType_MIN;
  static constexpr Can_rx_wiper_statusType Can_rx_wiper_statusType_MAX =
    Vehicle2_4f1_Can_rx_wiper_statusType_Can_rx_wiper_statusType_MAX;
  static constexpr int Can_rx_wiper_statusType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_wiper_statusType_Can_rx_wiper_statusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_wiper_statusType_descriptor() {
    return Vehicle2_4f1_Can_rx_wiper_statusType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_wiper_statusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_wiper_statusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_wiper_statusType_Name.");
    return Vehicle2_4f1_Can_rx_wiper_statusType_Name(enum_t_value);
  }
  static inline bool Can_rx_wiper_statusType_Parse(const std::string& name,
      Can_rx_wiper_statusType* value) {
    return Vehicle2_4f1_Can_rx_wiper_statusType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_raw_data_enableType Can_rx_raw_data_enableType;
  static constexpr Can_rx_raw_data_enableType CAN_RX_RAW_DATA_ENABLE_FILTERED =
    Vehicle2_4f1_Can_rx_raw_data_enableType_CAN_RX_RAW_DATA_ENABLE_FILTERED;
  static constexpr Can_rx_raw_data_enableType CAN_RX_RAW_DATA_ENABLE_RAW =
    Vehicle2_4f1_Can_rx_raw_data_enableType_CAN_RX_RAW_DATA_ENABLE_RAW;
  static inline bool Can_rx_raw_data_enableType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_raw_data_enableType_IsValid(value);
  }
  static constexpr Can_rx_raw_data_enableType Can_rx_raw_data_enableType_MIN =
    Vehicle2_4f1_Can_rx_raw_data_enableType_Can_rx_raw_data_enableType_MIN;
  static constexpr Can_rx_raw_data_enableType Can_rx_raw_data_enableType_MAX =
    Vehicle2_4f1_Can_rx_raw_data_enableType_Can_rx_raw_data_enableType_MAX;
  static constexpr int Can_rx_raw_data_enableType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_raw_data_enableType_Can_rx_raw_data_enableType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_raw_data_enableType_descriptor() {
    return Vehicle2_4f1_Can_rx_raw_data_enableType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_raw_data_enableType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_raw_data_enableType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_raw_data_enableType_Name.");
    return Vehicle2_4f1_Can_rx_raw_data_enableType_Name(enum_t_value);
  }
  static inline bool Can_rx_raw_data_enableType_Parse(const std::string& name,
      Can_rx_raw_data_enableType* value) {
    return Vehicle2_4f1_Can_rx_raw_data_enableType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_radar_cmd_radiateType Can_rx_radar_cmd_radiateType;
  static constexpr Can_rx_radar_cmd_radiateType CAN_RX_RADAR_CMD_RADIATE_OFF =
    Vehicle2_4f1_Can_rx_radar_cmd_radiateType_CAN_RX_RADAR_CMD_RADIATE_OFF;
  static constexpr Can_rx_radar_cmd_radiateType CAN_RX_RADAR_CMD_RADIATE_ON =
    Vehicle2_4f1_Can_rx_radar_cmd_radiateType_CAN_RX_RADAR_CMD_RADIATE_ON;
  static inline bool Can_rx_radar_cmd_radiateType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_radar_cmd_radiateType_IsValid(value);
  }
  static constexpr Can_rx_radar_cmd_radiateType Can_rx_radar_cmd_radiateType_MIN =
    Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Can_rx_radar_cmd_radiateType_MIN;
  static constexpr Can_rx_radar_cmd_radiateType Can_rx_radar_cmd_radiateType_MAX =
    Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Can_rx_radar_cmd_radiateType_MAX;
  static constexpr int Can_rx_radar_cmd_radiateType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Can_rx_radar_cmd_radiateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_radar_cmd_radiateType_descriptor() {
    return Vehicle2_4f1_Can_rx_radar_cmd_radiateType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_radar_cmd_radiateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_radar_cmd_radiateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_radar_cmd_radiateType_Name.");
    return Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Name(enum_t_value);
  }
  static inline bool Can_rx_radar_cmd_radiateType_Parse(const std::string& name,
      Can_rx_radar_cmd_radiateType* value) {
    return Vehicle2_4f1_Can_rx_radar_cmd_radiateType_Parse(name, value);
  }

  typedef Vehicle2_4f1_Can_rx_grouping_modeType Can_rx_grouping_modeType;
  static constexpr Can_rx_grouping_modeType CAN_RX_GROUPING_MODE_NO_GROUPING =
    Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_NO_GROUPING;
  static constexpr Can_rx_grouping_modeType CAN_RX_GROUPING_MODE_GROUP_MOVING_ONLY =
    Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_GROUP_MOVING_ONLY;
  static constexpr Can_rx_grouping_modeType CAN_RX_GROUPING_MODE_GROUP_STATIONARY_ONLY =
    Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_GROUP_STATIONARY_ONLY;
  static constexpr Can_rx_grouping_modeType CAN_RX_GROUPING_MODE_GROUP_MOVING_STATIONARY =
    Vehicle2_4f1_Can_rx_grouping_modeType_CAN_RX_GROUPING_MODE_GROUP_MOVING_STATIONARY;
  static inline bool Can_rx_grouping_modeType_IsValid(int value) {
    return Vehicle2_4f1_Can_rx_grouping_modeType_IsValid(value);
  }
  static constexpr Can_rx_grouping_modeType Can_rx_grouping_modeType_MIN =
    Vehicle2_4f1_Can_rx_grouping_modeType_Can_rx_grouping_modeType_MIN;
  static constexpr Can_rx_grouping_modeType Can_rx_grouping_modeType_MAX =
    Vehicle2_4f1_Can_rx_grouping_modeType_Can_rx_grouping_modeType_MAX;
  static constexpr int Can_rx_grouping_modeType_ARRAYSIZE =
    Vehicle2_4f1_Can_rx_grouping_modeType_Can_rx_grouping_modeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_grouping_modeType_descriptor() {
    return Vehicle2_4f1_Can_rx_grouping_modeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_grouping_modeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_grouping_modeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_grouping_modeType_Name.");
    return Vehicle2_4f1_Can_rx_grouping_modeType_Name(enum_t_value);
  }
  static inline bool Can_rx_grouping_modeType_Parse(const std::string& name,
      Can_rx_grouping_modeType* value) {
    return Vehicle2_4f1_Can_rx_grouping_modeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanRxVolvoShortTrackRocFieldNumber = 1,
    kCanRxMrOnlyTransmitFieldNumber = 2,
    kCanRxLrOnlyTransmitFieldNumber = 3,
    kCanRxHighYawAngleFieldNumber = 4,
    kCanRxClearFaultsFieldNumber = 5,
    kCanRxUseAngleMisalignmentFieldNumber = 6,
    kCanRxTurnSignalStatusFieldNumber = 7,
    kCanRxBlockageDisableFieldNumber = 8,
    kCanRxVehicleSpeedValidityFieldNumber = 9,
    kCanRxMmrUpsideDownFieldNumber = 10,
    kCanRxWiperStatusFieldNumber = 11,
    kCanRxRawDataEnableFieldNumber = 12,
    kCanRxRadarCmdRadiateFieldNumber = 13,
    kCanRxGroupingModeFieldNumber = 14,
    kCanRxMaximumTracksFieldNumber = 15,
    kCanRxLateralMountingOffsetFieldNumber = 16,
    kCanRxAngleMisalignmentFieldNumber = 17,
    kCanRxScanIndexAckFieldNumber = 18,
  };
  // optional double can_rx_volvo_short_track_roc = 1;
  bool has_can_rx_volvo_short_track_roc() const;
  private:
  bool _internal_has_can_rx_volvo_short_track_roc() const;
  public:
  void clear_can_rx_volvo_short_track_roc();
  double can_rx_volvo_short_track_roc() const;
  void set_can_rx_volvo_short_track_roc(double value);
  private:
  double _internal_can_rx_volvo_short_track_roc() const;
  void _internal_set_can_rx_volvo_short_track_roc(double value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
  bool has_can_rx_mr_only_transmit() const;
  private:
  bool _internal_has_can_rx_mr_only_transmit() const;
  public:
  void clear_can_rx_mr_only_transmit();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType can_rx_mr_only_transmit() const;
  void set_can_rx_mr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType _internal_can_rx_mr_only_transmit() const;
  void _internal_set_can_rx_mr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
  bool has_can_rx_lr_only_transmit() const;
  private:
  bool _internal_has_can_rx_lr_only_transmit() const;
  public:
  void clear_can_rx_lr_only_transmit();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType can_rx_lr_only_transmit() const;
  void set_can_rx_lr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType _internal_can_rx_lr_only_transmit() const;
  void _internal_set_can_rx_lr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType value);
  public:

  // optional int32 can_rx_high_yaw_angle = 4;
  bool has_can_rx_high_yaw_angle() const;
  private:
  bool _internal_has_can_rx_high_yaw_angle() const;
  public:
  void clear_can_rx_high_yaw_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_high_yaw_angle() const;
  void set_can_rx_high_yaw_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_high_yaw_angle() const;
  void _internal_set_can_rx_high_yaw_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
  bool has_can_rx_clear_faults() const;
  private:
  bool _internal_has_can_rx_clear_faults() const;
  public:
  void clear_can_rx_clear_faults();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType can_rx_clear_faults() const;
  void set_can_rx_clear_faults(::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType _internal_can_rx_clear_faults() const;
  void _internal_set_can_rx_clear_faults(::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
  bool has_can_rx_use_angle_misalignment() const;
  private:
  bool _internal_has_can_rx_use_angle_misalignment() const;
  public:
  void clear_can_rx_use_angle_misalignment();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment() const;
  void set_can_rx_use_angle_misalignment(::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType _internal_can_rx_use_angle_misalignment() const;
  void _internal_set_can_rx_use_angle_misalignment(::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
  bool has_can_rx_turn_signal_status() const;
  private:
  bool _internal_has_can_rx_turn_signal_status() const;
  public:
  void clear_can_rx_turn_signal_status();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType can_rx_turn_signal_status() const;
  void set_can_rx_turn_signal_status(::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType _internal_can_rx_turn_signal_status() const;
  void _internal_set_can_rx_turn_signal_status(::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
  bool has_can_rx_blockage_disable() const;
  private:
  bool _internal_has_can_rx_blockage_disable() const;
  public:
  void clear_can_rx_blockage_disable();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType can_rx_blockage_disable() const;
  void set_can_rx_blockage_disable(::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType _internal_can_rx_blockage_disable() const;
  void _internal_set_can_rx_blockage_disable(::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
  bool has_can_rx_vehicle_speed_validity() const;
  private:
  bool _internal_has_can_rx_vehicle_speed_validity() const;
  public:
  void clear_can_rx_vehicle_speed_validity();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity() const;
  void set_can_rx_vehicle_speed_validity(::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType _internal_can_rx_vehicle_speed_validity() const;
  void _internal_set_can_rx_vehicle_speed_validity(::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
  bool has_can_rx_mmr_upside_down() const;
  private:
  bool _internal_has_can_rx_mmr_upside_down() const;
  public:
  void clear_can_rx_mmr_upside_down();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType can_rx_mmr_upside_down() const;
  void set_can_rx_mmr_upside_down(::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType _internal_can_rx_mmr_upside_down() const;
  void _internal_set_can_rx_mmr_upside_down(::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
  bool has_can_rx_wiper_status() const;
  private:
  bool _internal_has_can_rx_wiper_status() const;
  public:
  void clear_can_rx_wiper_status();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType can_rx_wiper_status() const;
  void set_can_rx_wiper_status(::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType _internal_can_rx_wiper_status() const;
  void _internal_set_can_rx_wiper_status(::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
  bool has_can_rx_raw_data_enable() const;
  private:
  bool _internal_has_can_rx_raw_data_enable() const;
  public:
  void clear_can_rx_raw_data_enable();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType can_rx_raw_data_enable() const;
  void set_can_rx_raw_data_enable(::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType _internal_can_rx_raw_data_enable() const;
  void _internal_set_can_rx_raw_data_enable(::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
  bool has_can_rx_radar_cmd_radiate() const;
  private:
  bool _internal_has_can_rx_radar_cmd_radiate() const;
  public:
  void clear_can_rx_radar_cmd_radiate();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate() const;
  void set_can_rx_radar_cmd_radiate(::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType _internal_can_rx_radar_cmd_radiate() const;
  void _internal_set_can_rx_radar_cmd_radiate(::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType value);
  public:

  // optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
  bool has_can_rx_grouping_mode() const;
  private:
  bool _internal_has_can_rx_grouping_mode() const;
  public:
  void clear_can_rx_grouping_mode();
  ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType can_rx_grouping_mode() const;
  void set_can_rx_grouping_mode(::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType value);
  private:
  ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType _internal_can_rx_grouping_mode() const;
  void _internal_set_can_rx_grouping_mode(::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType value);
  public:

  // optional int32 can_rx_maximum_tracks = 15;
  bool has_can_rx_maximum_tracks() const;
  private:
  bool _internal_has_can_rx_maximum_tracks() const;
  public:
  void clear_can_rx_maximum_tracks();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_maximum_tracks() const;
  void set_can_rx_maximum_tracks(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_maximum_tracks() const;
  void _internal_set_can_rx_maximum_tracks(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double can_rx_lateral_mounting_offset = 16;
  bool has_can_rx_lateral_mounting_offset() const;
  private:
  bool _internal_has_can_rx_lateral_mounting_offset() const;
  public:
  void clear_can_rx_lateral_mounting_offset();
  double can_rx_lateral_mounting_offset() const;
  void set_can_rx_lateral_mounting_offset(double value);
  private:
  double _internal_can_rx_lateral_mounting_offset() const;
  void _internal_set_can_rx_lateral_mounting_offset(double value);
  public:

  // optional double can_rx_angle_misalignment = 17;
  bool has_can_rx_angle_misalignment() const;
  private:
  bool _internal_has_can_rx_angle_misalignment() const;
  public:
  void clear_can_rx_angle_misalignment();
  double can_rx_angle_misalignment() const;
  void set_can_rx_angle_misalignment(double value);
  private:
  double _internal_can_rx_angle_misalignment() const;
  void _internal_set_can_rx_angle_misalignment(double value);
  public:

  // optional int32 can_rx_scan_index_ack = 18;
  bool has_can_rx_scan_index_ack() const;
  private:
  bool _internal_has_can_rx_scan_index_ack() const;
  public:
  void clear_can_rx_scan_index_ack();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_scan_index_ack() const;
  void set_can_rx_scan_index_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_scan_index_ack() const;
  void _internal_set_can_rx_scan_index_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Vehicle2_4f1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double can_rx_volvo_short_track_roc_;
  int can_rx_mr_only_transmit_;
  int can_rx_lr_only_transmit_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_high_yaw_angle_;
  int can_rx_clear_faults_;
  int can_rx_use_angle_misalignment_;
  int can_rx_turn_signal_status_;
  int can_rx_blockage_disable_;
  int can_rx_vehicle_speed_validity_;
  int can_rx_mmr_upside_down_;
  int can_rx_wiper_status_;
  int can_rx_raw_data_enable_;
  int can_rx_radar_cmd_radiate_;
  int can_rx_grouping_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_maximum_tracks_;
  double can_rx_lateral_mounting_offset_;
  double can_rx_angle_misalignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_scan_index_ack_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Vehicle1_4f0 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Vehicle1_4f0) */ {
 public:
  Vehicle1_4f0();
  virtual ~Vehicle1_4f0();

  Vehicle1_4f0(const Vehicle1_4f0& from);
  Vehicle1_4f0(Vehicle1_4f0&& from) noexcept
    : Vehicle1_4f0() {
    *this = ::std::move(from);
  }

  inline Vehicle1_4f0& operator=(const Vehicle1_4f0& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle1_4f0& operator=(Vehicle1_4f0&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle1_4f0& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle1_4f0* internal_default_instance() {
    return reinterpret_cast<const Vehicle1_4f0*>(
               &_Vehicle1_4f0_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Vehicle1_4f0& a, Vehicle1_4f0& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle1_4f0* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle1_4f0* New() const final {
    return CreateMaybeMessage<Vehicle1_4f0>(nullptr);
  }

  Vehicle1_4f0* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle1_4f0>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle1_4f0& from);
  void MergeFrom(const Vehicle1_4f0& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle1_4f0* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Vehicle1_4f0";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehicle1_4f0_Can_rx_steering_angle_validityType Can_rx_steering_angle_validityType;
  static constexpr Can_rx_steering_angle_validityType CAN_RX_STEERING_ANGLE_VALIDITY_INVALID =
    Vehicle1_4f0_Can_rx_steering_angle_validityType_CAN_RX_STEERING_ANGLE_VALIDITY_INVALID;
  static constexpr Can_rx_steering_angle_validityType CAN_RX_STEERING_ANGLE_VALIDITY_VALID =
    Vehicle1_4f0_Can_rx_steering_angle_validityType_CAN_RX_STEERING_ANGLE_VALIDITY_VALID;
  static inline bool Can_rx_steering_angle_validityType_IsValid(int value) {
    return Vehicle1_4f0_Can_rx_steering_angle_validityType_IsValid(value);
  }
  static constexpr Can_rx_steering_angle_validityType Can_rx_steering_angle_validityType_MIN =
    Vehicle1_4f0_Can_rx_steering_angle_validityType_Can_rx_steering_angle_validityType_MIN;
  static constexpr Can_rx_steering_angle_validityType Can_rx_steering_angle_validityType_MAX =
    Vehicle1_4f0_Can_rx_steering_angle_validityType_Can_rx_steering_angle_validityType_MAX;
  static constexpr int Can_rx_steering_angle_validityType_ARRAYSIZE =
    Vehicle1_4f0_Can_rx_steering_angle_validityType_Can_rx_steering_angle_validityType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_steering_angle_validityType_descriptor() {
    return Vehicle1_4f0_Can_rx_steering_angle_validityType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_steering_angle_validityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_steering_angle_validityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_steering_angle_validityType_Name.");
    return Vehicle1_4f0_Can_rx_steering_angle_validityType_Name(enum_t_value);
  }
  static inline bool Can_rx_steering_angle_validityType_Parse(const std::string& name,
      Can_rx_steering_angle_validityType* value) {
    return Vehicle1_4f0_Can_rx_steering_angle_validityType_Parse(name, value);
  }

  typedef Vehicle1_4f0_Can_rx_steering_angle_signType Can_rx_steering_angle_signType;
  static constexpr Can_rx_steering_angle_signType CAN_RX_STEERING_ANGLE_SIGN_COUNTERCLOCKWISE =
    Vehicle1_4f0_Can_rx_steering_angle_signType_CAN_RX_STEERING_ANGLE_SIGN_COUNTERCLOCKWISE;
  static constexpr Can_rx_steering_angle_signType CAN_RX_STEERING_ANGLE_SIGN_CLOCKWISE =
    Vehicle1_4f0_Can_rx_steering_angle_signType_CAN_RX_STEERING_ANGLE_SIGN_CLOCKWISE;
  static inline bool Can_rx_steering_angle_signType_IsValid(int value) {
    return Vehicle1_4f0_Can_rx_steering_angle_signType_IsValid(value);
  }
  static constexpr Can_rx_steering_angle_signType Can_rx_steering_angle_signType_MIN =
    Vehicle1_4f0_Can_rx_steering_angle_signType_Can_rx_steering_angle_signType_MIN;
  static constexpr Can_rx_steering_angle_signType Can_rx_steering_angle_signType_MAX =
    Vehicle1_4f0_Can_rx_steering_angle_signType_Can_rx_steering_angle_signType_MAX;
  static constexpr int Can_rx_steering_angle_signType_ARRAYSIZE =
    Vehicle1_4f0_Can_rx_steering_angle_signType_Can_rx_steering_angle_signType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_steering_angle_signType_descriptor() {
    return Vehicle1_4f0_Can_rx_steering_angle_signType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_steering_angle_signType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_steering_angle_signType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_steering_angle_signType_Name.");
    return Vehicle1_4f0_Can_rx_steering_angle_signType_Name(enum_t_value);
  }
  static inline bool Can_rx_steering_angle_signType_Parse(const std::string& name,
      Can_rx_steering_angle_signType* value) {
    return Vehicle1_4f0_Can_rx_steering_angle_signType_Parse(name, value);
  }

  typedef Vehicle1_4f0_Can_rx_steering_angle_rate_signType Can_rx_steering_angle_rate_signType;
  static constexpr Can_rx_steering_angle_rate_signType CAN_RX_STEERING_ANGLE_RATE_SIGN_COUNTERCLOCKWISE =
    Vehicle1_4f0_Can_rx_steering_angle_rate_signType_CAN_RX_STEERING_ANGLE_RATE_SIGN_COUNTERCLOCKWISE;
  static constexpr Can_rx_steering_angle_rate_signType CAN_RX_STEERING_ANGLE_RATE_SIGN_CLOCKWISE =
    Vehicle1_4f0_Can_rx_steering_angle_rate_signType_CAN_RX_STEERING_ANGLE_RATE_SIGN_CLOCKWISE;
  static inline bool Can_rx_steering_angle_rate_signType_IsValid(int value) {
    return Vehicle1_4f0_Can_rx_steering_angle_rate_signType_IsValid(value);
  }
  static constexpr Can_rx_steering_angle_rate_signType Can_rx_steering_angle_rate_signType_MIN =
    Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Can_rx_steering_angle_rate_signType_MIN;
  static constexpr Can_rx_steering_angle_rate_signType Can_rx_steering_angle_rate_signType_MAX =
    Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Can_rx_steering_angle_rate_signType_MAX;
  static constexpr int Can_rx_steering_angle_rate_signType_ARRAYSIZE =
    Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Can_rx_steering_angle_rate_signType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_steering_angle_rate_signType_descriptor() {
    return Vehicle1_4f0_Can_rx_steering_angle_rate_signType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_steering_angle_rate_signType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_steering_angle_rate_signType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_steering_angle_rate_signType_Name.");
    return Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Name(enum_t_value);
  }
  static inline bool Can_rx_steering_angle_rate_signType_Parse(const std::string& name,
      Can_rx_steering_angle_rate_signType* value) {
    return Vehicle1_4f0_Can_rx_steering_angle_rate_signType_Parse(name, value);
  }

  typedef Vehicle1_4f0_Can_rx_yaw_rate_validityType Can_rx_yaw_rate_validityType;
  static constexpr Can_rx_yaw_rate_validityType CAN_RX_YAW_RATE_VALIDITY_INVALID =
    Vehicle1_4f0_Can_rx_yaw_rate_validityType_CAN_RX_YAW_RATE_VALIDITY_INVALID;
  static constexpr Can_rx_yaw_rate_validityType CAN_RX_YAW_RATE_VALIDITY_VALID =
    Vehicle1_4f0_Can_rx_yaw_rate_validityType_CAN_RX_YAW_RATE_VALIDITY_VALID;
  static inline bool Can_rx_yaw_rate_validityType_IsValid(int value) {
    return Vehicle1_4f0_Can_rx_yaw_rate_validityType_IsValid(value);
  }
  static constexpr Can_rx_yaw_rate_validityType Can_rx_yaw_rate_validityType_MIN =
    Vehicle1_4f0_Can_rx_yaw_rate_validityType_Can_rx_yaw_rate_validityType_MIN;
  static constexpr Can_rx_yaw_rate_validityType Can_rx_yaw_rate_validityType_MAX =
    Vehicle1_4f0_Can_rx_yaw_rate_validityType_Can_rx_yaw_rate_validityType_MAX;
  static constexpr int Can_rx_yaw_rate_validityType_ARRAYSIZE =
    Vehicle1_4f0_Can_rx_yaw_rate_validityType_Can_rx_yaw_rate_validityType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_yaw_rate_validityType_descriptor() {
    return Vehicle1_4f0_Can_rx_yaw_rate_validityType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_yaw_rate_validityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_yaw_rate_validityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_yaw_rate_validityType_Name.");
    return Vehicle1_4f0_Can_rx_yaw_rate_validityType_Name(enum_t_value);
  }
  static inline bool Can_rx_yaw_rate_validityType_Parse(const std::string& name,
      Can_rx_yaw_rate_validityType* value) {
    return Vehicle1_4f0_Can_rx_yaw_rate_validityType_Parse(name, value);
  }

  typedef Vehicle1_4f0_Can_rx_vehicle_speed_directionType Can_rx_vehicle_speed_directionType;
  static constexpr Can_rx_vehicle_speed_directionType CAN_RX_VEHICLE_SPEED_DIRECTION_FORWARD =
    Vehicle1_4f0_Can_rx_vehicle_speed_directionType_CAN_RX_VEHICLE_SPEED_DIRECTION_FORWARD;
  static constexpr Can_rx_vehicle_speed_directionType CAN_RX_VEHICLE_SPEED_DIRECTION_REVERSE =
    Vehicle1_4f0_Can_rx_vehicle_speed_directionType_CAN_RX_VEHICLE_SPEED_DIRECTION_REVERSE;
  static inline bool Can_rx_vehicle_speed_directionType_IsValid(int value) {
    return Vehicle1_4f0_Can_rx_vehicle_speed_directionType_IsValid(value);
  }
  static constexpr Can_rx_vehicle_speed_directionType Can_rx_vehicle_speed_directionType_MIN =
    Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Can_rx_vehicle_speed_directionType_MIN;
  static constexpr Can_rx_vehicle_speed_directionType Can_rx_vehicle_speed_directionType_MAX =
    Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Can_rx_vehicle_speed_directionType_MAX;
  static constexpr int Can_rx_vehicle_speed_directionType_ARRAYSIZE =
    Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Can_rx_vehicle_speed_directionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_vehicle_speed_directionType_descriptor() {
    return Vehicle1_4f0_Can_rx_vehicle_speed_directionType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_vehicle_speed_directionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_vehicle_speed_directionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_vehicle_speed_directionType_Name.");
    return Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Name(enum_t_value);
  }
  static inline bool Can_rx_vehicle_speed_directionType_Parse(const std::string& name,
      Can_rx_vehicle_speed_directionType* value) {
    return Vehicle1_4f0_Can_rx_vehicle_speed_directionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanRxSteeringAngleValidityFieldNumber = 1,
    kCanRxSteeringAngleRateFieldNumber = 2,
    kCanRxSteeringAngleSignFieldNumber = 3,
    kCanRxSteeringAngleRateSignFieldNumber = 4,
    kCanRxSteeringAngleFieldNumber = 5,
    kCanRxRadiusCurvatureFieldNumber = 6,
    kCanRxYawRateFieldNumber = 8,
    kCanRxYawRateValidityFieldNumber = 7,
    kCanRxVehicleSpeedDirectionFieldNumber = 9,
    kCanRxVehicleSpeedFieldNumber = 10,
  };
  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
  bool has_can_rx_steering_angle_validity() const;
  private:
  bool _internal_has_can_rx_steering_angle_validity() const;
  public:
  void clear_can_rx_steering_angle_validity();
  ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType can_rx_steering_angle_validity() const;
  void set_can_rx_steering_angle_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType value);
  private:
  ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType _internal_can_rx_steering_angle_validity() const;
  void _internal_set_can_rx_steering_angle_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType value);
  public:

  // optional int32 can_rx_steering_angle_rate = 2;
  bool has_can_rx_steering_angle_rate() const;
  private:
  bool _internal_has_can_rx_steering_angle_rate() const;
  public:
  void clear_can_rx_steering_angle_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_steering_angle_rate() const;
  void set_can_rx_steering_angle_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_steering_angle_rate() const;
  void _internal_set_can_rx_steering_angle_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
  bool has_can_rx_steering_angle_sign() const;
  private:
  bool _internal_has_can_rx_steering_angle_sign() const;
  public:
  void clear_can_rx_steering_angle_sign();
  ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType can_rx_steering_angle_sign() const;
  void set_can_rx_steering_angle_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType value);
  private:
  ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType _internal_can_rx_steering_angle_sign() const;
  void _internal_set_can_rx_steering_angle_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType value);
  public:

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
  bool has_can_rx_steering_angle_rate_sign() const;
  private:
  bool _internal_has_can_rx_steering_angle_rate_sign() const;
  public:
  void clear_can_rx_steering_angle_rate_sign();
  ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign() const;
  void set_can_rx_steering_angle_rate_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType value);
  private:
  ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType _internal_can_rx_steering_angle_rate_sign() const;
  void _internal_set_can_rx_steering_angle_rate_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType value);
  public:

  // optional int32 can_rx_steering_angle = 5;
  bool has_can_rx_steering_angle() const;
  private:
  bool _internal_has_can_rx_steering_angle() const;
  public:
  void clear_can_rx_steering_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_steering_angle() const;
  void set_can_rx_steering_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_steering_angle() const;
  void _internal_set_can_rx_steering_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_rx_radius_curvature = 6;
  bool has_can_rx_radius_curvature() const;
  private:
  bool _internal_has_can_rx_radius_curvature() const;
  public:
  void clear_can_rx_radius_curvature();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_radius_curvature() const;
  void set_can_rx_radius_curvature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_radius_curvature() const;
  void _internal_set_can_rx_radius_curvature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double can_rx_yaw_rate = 8;
  bool has_can_rx_yaw_rate() const;
  private:
  bool _internal_has_can_rx_yaw_rate() const;
  public:
  void clear_can_rx_yaw_rate();
  double can_rx_yaw_rate() const;
  void set_can_rx_yaw_rate(double value);
  private:
  double _internal_can_rx_yaw_rate() const;
  void _internal_set_can_rx_yaw_rate(double value);
  public:

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
  bool has_can_rx_yaw_rate_validity() const;
  private:
  bool _internal_has_can_rx_yaw_rate_validity() const;
  public:
  void clear_can_rx_yaw_rate_validity();
  ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity() const;
  void set_can_rx_yaw_rate_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType value);
  private:
  ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType _internal_can_rx_yaw_rate_validity() const;
  void _internal_set_can_rx_yaw_rate_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType value);
  public:

  // optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
  bool has_can_rx_vehicle_speed_direction() const;
  private:
  bool _internal_has_can_rx_vehicle_speed_direction() const;
  public:
  void clear_can_rx_vehicle_speed_direction();
  ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction() const;
  void set_can_rx_vehicle_speed_direction(::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType value);
  private:
  ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType _internal_can_rx_vehicle_speed_direction() const;
  void _internal_set_can_rx_vehicle_speed_direction(::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType value);
  public:

  // optional double can_rx_vehicle_speed = 10;
  bool has_can_rx_vehicle_speed() const;
  private:
  bool _internal_has_can_rx_vehicle_speed() const;
  public:
  void clear_can_rx_vehicle_speed();
  double can_rx_vehicle_speed() const;
  void set_can_rx_vehicle_speed(double value);
  private:
  double _internal_can_rx_vehicle_speed() const;
  void _internal_set_can_rx_vehicle_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Vehicle1_4f0)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int can_rx_steering_angle_validity_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_steering_angle_rate_;
  int can_rx_steering_angle_sign_;
  int can_rx_steering_angle_rate_sign_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_steering_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_radius_curvature_;
  double can_rx_yaw_rate_;
  int can_rx_yaw_rate_validity_;
  int can_rx_vehicle_speed_direction_;
  double can_rx_vehicle_speed_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_sim1_5c0 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_sim1_5c0) */ {
 public:
  Esr_sim1_5c0();
  virtual ~Esr_sim1_5c0();

  Esr_sim1_5c0(const Esr_sim1_5c0& from);
  Esr_sim1_5c0(Esr_sim1_5c0&& from) noexcept
    : Esr_sim1_5c0() {
    *this = ::std::move(from);
  }

  inline Esr_sim1_5c0& operator=(const Esr_sim1_5c0& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_sim1_5c0& operator=(Esr_sim1_5c0&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_sim1_5c0& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_sim1_5c0* internal_default_instance() {
    return reinterpret_cast<const Esr_sim1_5c0*>(
               &_Esr_sim1_5c0_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Esr_sim1_5c0& a, Esr_sim1_5c0& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_sim1_5c0* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_sim1_5c0* New() const final {
    return CreateMaybeMessage<Esr_sim1_5c0>(nullptr);
  }

  Esr_sim1_5c0* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_sim1_5c0>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_sim1_5c0& from);
  void MergeFrom(const Esr_sim1_5c0& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_sim1_5c0* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_sim1_5c0";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Esr_sim1_5c0_Can_rx_sim_track_idType Can_rx_sim_track_idType;
  static constexpr Can_rx_sim_track_idType CAN_RX_SIM_TRACK_ID_NO_TARGET =
    Esr_sim1_5c0_Can_rx_sim_track_idType_CAN_RX_SIM_TRACK_ID_NO_TARGET;
  static constexpr Can_rx_sim_track_idType CAN_RX_SIM_TRACK_ID_TARGET_1 =
    Esr_sim1_5c0_Can_rx_sim_track_idType_CAN_RX_SIM_TRACK_ID_TARGET_1;
  static constexpr Can_rx_sim_track_idType CAN_RX_SIM_TRACK_ID_TARGET_2 =
    Esr_sim1_5c0_Can_rx_sim_track_idType_CAN_RX_SIM_TRACK_ID_TARGET_2;
  static inline bool Can_rx_sim_track_idType_IsValid(int value) {
    return Esr_sim1_5c0_Can_rx_sim_track_idType_IsValid(value);
  }
  static constexpr Can_rx_sim_track_idType Can_rx_sim_track_idType_MIN =
    Esr_sim1_5c0_Can_rx_sim_track_idType_Can_rx_sim_track_idType_MIN;
  static constexpr Can_rx_sim_track_idType Can_rx_sim_track_idType_MAX =
    Esr_sim1_5c0_Can_rx_sim_track_idType_Can_rx_sim_track_idType_MAX;
  static constexpr int Can_rx_sim_track_idType_ARRAYSIZE =
    Esr_sim1_5c0_Can_rx_sim_track_idType_Can_rx_sim_track_idType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_sim_track_idType_descriptor() {
    return Esr_sim1_5c0_Can_rx_sim_track_idType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_sim_track_idType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_sim_track_idType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_sim_track_idType_Name.");
    return Esr_sim1_5c0_Can_rx_sim_track_idType_Name(enum_t_value);
  }
  static inline bool Can_rx_sim_track_idType_Parse(const std::string& name,
      Can_rx_sim_track_idType* value) {
    return Esr_sim1_5c0_Can_rx_sim_track_idType_Parse(name, value);
  }

  typedef Esr_sim1_5c0_Can_rx_sim_statusType Can_rx_sim_statusType;
  static constexpr Can_rx_sim_statusType CAN_RX_SIM_STATUS_INVALID =
    Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_INVALID;
  static constexpr Can_rx_sim_statusType CAN_RX_SIM_STATUS_NEW =
    Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_NEW;
  static constexpr Can_rx_sim_statusType CAN_RX_SIM_STATUS_UPDATED =
    Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_UPDATED;
  static constexpr Can_rx_sim_statusType CAN_RX_SIM_STATUS_COASTED =
    Esr_sim1_5c0_Can_rx_sim_statusType_CAN_RX_SIM_STATUS_COASTED;
  static inline bool Can_rx_sim_statusType_IsValid(int value) {
    return Esr_sim1_5c0_Can_rx_sim_statusType_IsValid(value);
  }
  static constexpr Can_rx_sim_statusType Can_rx_sim_statusType_MIN =
    Esr_sim1_5c0_Can_rx_sim_statusType_Can_rx_sim_statusType_MIN;
  static constexpr Can_rx_sim_statusType Can_rx_sim_statusType_MAX =
    Esr_sim1_5c0_Can_rx_sim_statusType_Can_rx_sim_statusType_MAX;
  static constexpr int Can_rx_sim_statusType_ARRAYSIZE =
    Esr_sim1_5c0_Can_rx_sim_statusType_Can_rx_sim_statusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_sim_statusType_descriptor() {
    return Esr_sim1_5c0_Can_rx_sim_statusType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_sim_statusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_sim_statusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_sim_statusType_Name.");
    return Esr_sim1_5c0_Can_rx_sim_statusType_Name(enum_t_value);
  }
  static inline bool Can_rx_sim_statusType_Parse(const std::string& name,
      Can_rx_sim_statusType* value) {
    return Esr_sim1_5c0_Can_rx_sim_statusType_Parse(name, value);
  }

  typedef Esr_sim1_5c0_Can_rx_sim_functionType Can_rx_sim_functionType;
  static constexpr Can_rx_sim_functionType CAN_RX_SIM_FUNCTION_ACC =
    Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_ACC;
  static constexpr Can_rx_sim_functionType CAN_RX_SIM_FUNCTION_RI =
    Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_RI;
  static constexpr Can_rx_sim_functionType CAN_RX_SIM_FUNCTION_FCW_MOVE =
    Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_FCW_MOVE;
  static constexpr Can_rx_sim_functionType CAN_RX_SIM_FUNCTION_FCW_STAT =
    Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_FCW_STAT;
  static constexpr Can_rx_sim_functionType CAN_RX_SIM_FUNCTION_CMBB_MOVE =
    Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_CMBB_MOVE;
  static constexpr Can_rx_sim_functionType CAN_RX_SIM_FUNCTION_CMBB_STAT =
    Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_CMBB_STAT;
  static constexpr Can_rx_sim_functionType CAN_RX_SIM_FUNCTION_ALL_MOVING_ACC_FCW_CMBB =
    Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_ALL_MOVING_ACC_FCW_CMBB;
  static constexpr Can_rx_sim_functionType CAN_RX_SIM_FUNCTION_ALL_STAT_RI_FCW_CMBB =
    Esr_sim1_5c0_Can_rx_sim_functionType_CAN_RX_SIM_FUNCTION_ALL_STAT_RI_FCW_CMBB;
  static inline bool Can_rx_sim_functionType_IsValid(int value) {
    return Esr_sim1_5c0_Can_rx_sim_functionType_IsValid(value);
  }
  static constexpr Can_rx_sim_functionType Can_rx_sim_functionType_MIN =
    Esr_sim1_5c0_Can_rx_sim_functionType_Can_rx_sim_functionType_MIN;
  static constexpr Can_rx_sim_functionType Can_rx_sim_functionType_MAX =
    Esr_sim1_5c0_Can_rx_sim_functionType_Can_rx_sim_functionType_MAX;
  static constexpr int Can_rx_sim_functionType_ARRAYSIZE =
    Esr_sim1_5c0_Can_rx_sim_functionType_Can_rx_sim_functionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_sim_functionType_descriptor() {
    return Esr_sim1_5c0_Can_rx_sim_functionType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_sim_functionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_sim_functionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_sim_functionType_Name.");
    return Esr_sim1_5c0_Can_rx_sim_functionType_Name(enum_t_value);
  }
  static inline bool Can_rx_sim_functionType_Parse(const std::string& name,
      Can_rx_sim_functionType* value) {
    return Esr_sim1_5c0_Can_rx_sim_functionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanRxSimTrackIdFieldNumber = 1,
    kCanRxSimStatusFieldNumber = 2,
    kCanRxSimRangeRateFieldNumber = 3,
    kCanRxSimRangeAccelFieldNumber = 4,
    kCanRxSimLatRateFieldNumber = 6,
    kCanRxSimRangeFieldNumber = 5,
    kCanRxSimFunctionFieldNumber = 8,
    kCanRxSimLatPosFieldNumber = 7,
    kCanRxSimAngleFieldNumber = 9,
  };
  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
  bool has_can_rx_sim_track_id() const;
  private:
  bool _internal_has_can_rx_sim_track_id() const;
  public:
  void clear_can_rx_sim_track_id();
  ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType can_rx_sim_track_id() const;
  void set_can_rx_sim_track_id(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType value);
  private:
  ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType _internal_can_rx_sim_track_id() const;
  void _internal_set_can_rx_sim_track_id(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType value);
  public:

  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
  bool has_can_rx_sim_status() const;
  private:
  bool _internal_has_can_rx_sim_status() const;
  public:
  void clear_can_rx_sim_status();
  ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType can_rx_sim_status() const;
  void set_can_rx_sim_status(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType value);
  private:
  ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType _internal_can_rx_sim_status() const;
  void _internal_set_can_rx_sim_status(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType value);
  public:

  // optional double can_rx_sim_range_rate = 3;
  bool has_can_rx_sim_range_rate() const;
  private:
  bool _internal_has_can_rx_sim_range_rate() const;
  public:
  void clear_can_rx_sim_range_rate();
  double can_rx_sim_range_rate() const;
  void set_can_rx_sim_range_rate(double value);
  private:
  double _internal_can_rx_sim_range_rate() const;
  void _internal_set_can_rx_sim_range_rate(double value);
  public:

  // optional double can_rx_sim_range_accel = 4;
  bool has_can_rx_sim_range_accel() const;
  private:
  bool _internal_has_can_rx_sim_range_accel() const;
  public:
  void clear_can_rx_sim_range_accel();
  double can_rx_sim_range_accel() const;
  void set_can_rx_sim_range_accel(double value);
  private:
  double _internal_can_rx_sim_range_accel() const;
  void _internal_set_can_rx_sim_range_accel(double value);
  public:

  // optional double can_rx_sim_lat_rate = 6;
  bool has_can_rx_sim_lat_rate() const;
  private:
  bool _internal_has_can_rx_sim_lat_rate() const;
  public:
  void clear_can_rx_sim_lat_rate();
  double can_rx_sim_lat_rate() const;
  void set_can_rx_sim_lat_rate(double value);
  private:
  double _internal_can_rx_sim_lat_rate() const;
  void _internal_set_can_rx_sim_lat_rate(double value);
  public:

  // optional int32 can_rx_sim_range = 5;
  bool has_can_rx_sim_range() const;
  private:
  bool _internal_has_can_rx_sim_range() const;
  public:
  void clear_can_rx_sim_range();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_sim_range() const;
  void set_can_rx_sim_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_sim_range() const;
  void _internal_set_can_rx_sim_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
  bool has_can_rx_sim_function() const;
  private:
  bool _internal_has_can_rx_sim_function() const;
  public:
  void clear_can_rx_sim_function();
  ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType can_rx_sim_function() const;
  void set_can_rx_sim_function(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType value);
  private:
  ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType _internal_can_rx_sim_function() const;
  void _internal_set_can_rx_sim_function(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType value);
  public:

  // optional double can_rx_sim_lat_pos = 7;
  bool has_can_rx_sim_lat_pos() const;
  private:
  bool _internal_has_can_rx_sim_lat_pos() const;
  public:
  void clear_can_rx_sim_lat_pos();
  double can_rx_sim_lat_pos() const;
  void set_can_rx_sim_lat_pos(double value);
  private:
  double _internal_can_rx_sim_lat_pos() const;
  void _internal_set_can_rx_sim_lat_pos(double value);
  public:

  // optional double can_rx_sim_angle = 9;
  bool has_can_rx_sim_angle() const;
  private:
  bool _internal_has_can_rx_sim_angle() const;
  public:
  void clear_can_rx_sim_angle();
  double can_rx_sim_angle() const;
  void set_can_rx_sim_angle(double value);
  private:
  double _internal_can_rx_sim_angle() const;
  void _internal_set_can_rx_sim_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_sim1_5c0)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int can_rx_sim_track_id_;
  int can_rx_sim_status_;
  double can_rx_sim_range_rate_;
  double can_rx_sim_range_accel_;
  double can_rx_sim_lat_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_sim_range_;
  int can_rx_sim_function_;
  double can_rx_sim_lat_pos_;
  double can_rx_sim_angle_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_status1_4e0 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status1_4e0) */ {
 public:
  Esr_status1_4e0();
  virtual ~Esr_status1_4e0();

  Esr_status1_4e0(const Esr_status1_4e0& from);
  Esr_status1_4e0(Esr_status1_4e0&& from) noexcept
    : Esr_status1_4e0() {
    *this = ::std::move(from);
  }

  inline Esr_status1_4e0& operator=(const Esr_status1_4e0& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status1_4e0& operator=(Esr_status1_4e0&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status1_4e0& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status1_4e0* internal_default_instance() {
    return reinterpret_cast<const Esr_status1_4e0*>(
               &_Esr_status1_4e0_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Esr_status1_4e0& a, Esr_status1_4e0& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status1_4e0* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status1_4e0* New() const final {
    return CreateMaybeMessage<Esr_status1_4e0>(nullptr);
  }

  Esr_status1_4e0* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status1_4e0>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status1_4e0& from);
  void MergeFrom(const Esr_status1_4e0& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status1_4e0* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status1_4e0";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxDspTimestampFieldNumber = 1,
    kCanTxYawRateCalcFieldNumber = 3,
    kCanTxCommErrorFieldNumber = 2,
    kCanTxScanIndexFieldNumber = 5,
    kCanTxVehicleSpeedCalcFieldNumber = 4,
    kCanTxRollingCount1FieldNumber = 6,
    kCanTxRadiusCurvatureCalcFieldNumber = 7,
  };
  // optional double can_tx_dsp_timestamp = 1;
  bool has_can_tx_dsp_timestamp() const;
  private:
  bool _internal_has_can_tx_dsp_timestamp() const;
  public:
  void clear_can_tx_dsp_timestamp();
  double can_tx_dsp_timestamp() const;
  void set_can_tx_dsp_timestamp(double value);
  private:
  double _internal_can_tx_dsp_timestamp() const;
  void _internal_set_can_tx_dsp_timestamp(double value);
  public:

  // optional double can_tx_yaw_rate_calc = 3;
  bool has_can_tx_yaw_rate_calc() const;
  private:
  bool _internal_has_can_tx_yaw_rate_calc() const;
  public:
  void clear_can_tx_yaw_rate_calc();
  double can_tx_yaw_rate_calc() const;
  void set_can_tx_yaw_rate_calc(double value);
  private:
  double _internal_can_tx_yaw_rate_calc() const;
  void _internal_set_can_tx_yaw_rate_calc(double value);
  public:

  // optional bool can_tx_comm_error = 2;
  bool has_can_tx_comm_error() const;
  private:
  bool _internal_has_can_tx_comm_error() const;
  public:
  void clear_can_tx_comm_error();
  bool can_tx_comm_error() const;
  void set_can_tx_comm_error(bool value);
  private:
  bool _internal_can_tx_comm_error() const;
  void _internal_set_can_tx_comm_error(bool value);
  public:

  // optional int32 can_tx_scan_index = 5;
  bool has_can_tx_scan_index() const;
  private:
  bool _internal_has_can_tx_scan_index() const;
  public:
  void clear_can_tx_scan_index();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_scan_index() const;
  void set_can_tx_scan_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_scan_index() const;
  void _internal_set_can_tx_scan_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double can_tx_vehicle_speed_calc = 4;
  bool has_can_tx_vehicle_speed_calc() const;
  private:
  bool _internal_has_can_tx_vehicle_speed_calc() const;
  public:
  void clear_can_tx_vehicle_speed_calc();
  double can_tx_vehicle_speed_calc() const;
  void set_can_tx_vehicle_speed_calc(double value);
  private:
  double _internal_can_tx_vehicle_speed_calc() const;
  void _internal_set_can_tx_vehicle_speed_calc(double value);
  public:

  // optional int32 can_tx_rolling_count_1 = 6;
  bool has_can_tx_rolling_count_1() const;
  private:
  bool _internal_has_can_tx_rolling_count_1() const;
  public:
  void clear_can_tx_rolling_count_1();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_rolling_count_1() const;
  void set_can_tx_rolling_count_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_rolling_count_1() const;
  void _internal_set_can_tx_rolling_count_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_radius_curvature_calc = 7;
  bool has_can_tx_radius_curvature_calc() const;
  private:
  bool _internal_has_can_tx_radius_curvature_calc() const;
  public:
  void clear_can_tx_radius_curvature_calc();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_radius_curvature_calc() const;
  void set_can_tx_radius_curvature_calc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_radius_curvature_calc() const;
  void _internal_set_can_tx_radius_curvature_calc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status1_4e0)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double can_tx_dsp_timestamp_;
  double can_tx_yaw_rate_calc_;
  bool can_tx_comm_error_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_scan_index_;
  double can_tx_vehicle_speed_calc_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_rolling_count_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_radius_curvature_calc_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_status2_4e1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status2_4e1) */ {
 public:
  Esr_status2_4e1();
  virtual ~Esr_status2_4e1();

  Esr_status2_4e1(const Esr_status2_4e1& from);
  Esr_status2_4e1(Esr_status2_4e1&& from) noexcept
    : Esr_status2_4e1() {
    *this = ::std::move(from);
  }

  inline Esr_status2_4e1& operator=(const Esr_status2_4e1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status2_4e1& operator=(Esr_status2_4e1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status2_4e1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status2_4e1* internal_default_instance() {
    return reinterpret_cast<const Esr_status2_4e1*>(
               &_Esr_status2_4e1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Esr_status2_4e1& a, Esr_status2_4e1& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status2_4e1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status2_4e1* New() const final {
    return CreateMaybeMessage<Esr_status2_4e1>(nullptr);
  }

  Esr_status2_4e1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status2_4e1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status2_4e1& from);
  void MergeFrom(const Esr_status2_4e1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status2_4e1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status2_4e1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Esr_status2_4e1_Can_tx_raw_data_modeType Can_tx_raw_data_modeType;
  static constexpr Can_tx_raw_data_modeType CAN_TX_RAW_DATA_MODE_FILTERED =
    Esr_status2_4e1_Can_tx_raw_data_modeType_CAN_TX_RAW_DATA_MODE_FILTERED;
  static constexpr Can_tx_raw_data_modeType CAN_TX_RAW_DATA_MODE_RAW =
    Esr_status2_4e1_Can_tx_raw_data_modeType_CAN_TX_RAW_DATA_MODE_RAW;
  static inline bool Can_tx_raw_data_modeType_IsValid(int value) {
    return Esr_status2_4e1_Can_tx_raw_data_modeType_IsValid(value);
  }
  static constexpr Can_tx_raw_data_modeType Can_tx_raw_data_modeType_MIN =
    Esr_status2_4e1_Can_tx_raw_data_modeType_Can_tx_raw_data_modeType_MIN;
  static constexpr Can_tx_raw_data_modeType Can_tx_raw_data_modeType_MAX =
    Esr_status2_4e1_Can_tx_raw_data_modeType_Can_tx_raw_data_modeType_MAX;
  static constexpr int Can_tx_raw_data_modeType_ARRAYSIZE =
    Esr_status2_4e1_Can_tx_raw_data_modeType_Can_tx_raw_data_modeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_raw_data_modeType_descriptor() {
    return Esr_status2_4e1_Can_tx_raw_data_modeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_raw_data_modeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_raw_data_modeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_raw_data_modeType_Name.");
    return Esr_status2_4e1_Can_tx_raw_data_modeType_Name(enum_t_value);
  }
  static inline bool Can_tx_raw_data_modeType_Parse(const std::string& name,
      Can_tx_raw_data_modeType* value) {
    return Esr_status2_4e1_Can_tx_raw_data_modeType_Parse(name, value);
  }

  typedef Esr_status2_4e1_Can_tx_range_perf_errorType Can_tx_range_perf_errorType;
  static constexpr Can_tx_range_perf_errorType CAN_TX_RANGE_PERF_ERROR_NOT_BLOCKED =
    Esr_status2_4e1_Can_tx_range_perf_errorType_CAN_TX_RANGE_PERF_ERROR_NOT_BLOCKED;
  static constexpr Can_tx_range_perf_errorType CAN_TX_RANGE_PERF_ERROR_BLOCKED =
    Esr_status2_4e1_Can_tx_range_perf_errorType_CAN_TX_RANGE_PERF_ERROR_BLOCKED;
  static inline bool Can_tx_range_perf_errorType_IsValid(int value) {
    return Esr_status2_4e1_Can_tx_range_perf_errorType_IsValid(value);
  }
  static constexpr Can_tx_range_perf_errorType Can_tx_range_perf_errorType_MIN =
    Esr_status2_4e1_Can_tx_range_perf_errorType_Can_tx_range_perf_errorType_MIN;
  static constexpr Can_tx_range_perf_errorType Can_tx_range_perf_errorType_MAX =
    Esr_status2_4e1_Can_tx_range_perf_errorType_Can_tx_range_perf_errorType_MAX;
  static constexpr int Can_tx_range_perf_errorType_ARRAYSIZE =
    Esr_status2_4e1_Can_tx_range_perf_errorType_Can_tx_range_perf_errorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_range_perf_errorType_descriptor() {
    return Esr_status2_4e1_Can_tx_range_perf_errorType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_range_perf_errorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_range_perf_errorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_range_perf_errorType_Name.");
    return Esr_status2_4e1_Can_tx_range_perf_errorType_Name(enum_t_value);
  }
  static inline bool Can_tx_range_perf_errorType_Parse(const std::string& name,
      Can_tx_range_perf_errorType* value) {
    return Esr_status2_4e1_Can_tx_range_perf_errorType_Parse(name, value);
  }

  typedef Esr_status2_4e1_Can_tx_overheat_errorType Can_tx_overheat_errorType;
  static constexpr Can_tx_overheat_errorType CAN_TX_OVERHEAT_ERROR_NOT_OVERTEMP =
    Esr_status2_4e1_Can_tx_overheat_errorType_CAN_TX_OVERHEAT_ERROR_NOT_OVERTEMP;
  static constexpr Can_tx_overheat_errorType CAN_TX_OVERHEAT_ERROR_OVERTEMP =
    Esr_status2_4e1_Can_tx_overheat_errorType_CAN_TX_OVERHEAT_ERROR_OVERTEMP;
  static inline bool Can_tx_overheat_errorType_IsValid(int value) {
    return Esr_status2_4e1_Can_tx_overheat_errorType_IsValid(value);
  }
  static constexpr Can_tx_overheat_errorType Can_tx_overheat_errorType_MIN =
    Esr_status2_4e1_Can_tx_overheat_errorType_Can_tx_overheat_errorType_MIN;
  static constexpr Can_tx_overheat_errorType Can_tx_overheat_errorType_MAX =
    Esr_status2_4e1_Can_tx_overheat_errorType_Can_tx_overheat_errorType_MAX;
  static constexpr int Can_tx_overheat_errorType_ARRAYSIZE =
    Esr_status2_4e1_Can_tx_overheat_errorType_Can_tx_overheat_errorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_overheat_errorType_descriptor() {
    return Esr_status2_4e1_Can_tx_overheat_errorType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_overheat_errorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_overheat_errorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_overheat_errorType_Name.");
    return Esr_status2_4e1_Can_tx_overheat_errorType_Name(enum_t_value);
  }
  static inline bool Can_tx_overheat_errorType_Parse(const std::string& name,
      Can_tx_overheat_errorType* value) {
    return Esr_status2_4e1_Can_tx_overheat_errorType_Parse(name, value);
  }

  typedef Esr_status2_4e1_Can_tx_internal_errorType Can_tx_internal_errorType;
  static constexpr Can_tx_internal_errorType CAN_TX_INTERNAL_ERROR_NOT_FAILED =
    Esr_status2_4e1_Can_tx_internal_errorType_CAN_TX_INTERNAL_ERROR_NOT_FAILED;
  static constexpr Can_tx_internal_errorType CAN_TX_INTERNAL_ERROR_FAILED =
    Esr_status2_4e1_Can_tx_internal_errorType_CAN_TX_INTERNAL_ERROR_FAILED;
  static inline bool Can_tx_internal_errorType_IsValid(int value) {
    return Esr_status2_4e1_Can_tx_internal_errorType_IsValid(value);
  }
  static constexpr Can_tx_internal_errorType Can_tx_internal_errorType_MIN =
    Esr_status2_4e1_Can_tx_internal_errorType_Can_tx_internal_errorType_MIN;
  static constexpr Can_tx_internal_errorType Can_tx_internal_errorType_MAX =
    Esr_status2_4e1_Can_tx_internal_errorType_Can_tx_internal_errorType_MAX;
  static constexpr int Can_tx_internal_errorType_ARRAYSIZE =
    Esr_status2_4e1_Can_tx_internal_errorType_Can_tx_internal_errorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_internal_errorType_descriptor() {
    return Esr_status2_4e1_Can_tx_internal_errorType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_internal_errorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_internal_errorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_internal_errorType_Name.");
    return Esr_status2_4e1_Can_tx_internal_errorType_Name(enum_t_value);
  }
  static inline bool Can_tx_internal_errorType_Parse(const std::string& name,
      Can_tx_internal_errorType* value) {
    return Esr_status2_4e1_Can_tx_internal_errorType_Parse(name, value);
  }

  typedef Esr_status2_4e1_Can_tx_grouping_modeType Can_tx_grouping_modeType;
  static constexpr Can_tx_grouping_modeType CAN_TX_GROUPING_MODE_NO_GROUPING =
    Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_NO_GROUPING;
  static constexpr Can_tx_grouping_modeType CAN_TX_GROUPING_MODE_GROUP_MOVING_ONLY =
    Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_GROUP_MOVING_ONLY;
  static constexpr Can_tx_grouping_modeType CAN_TX_GROUPING_MODE_GROUP_STATIONARY_ONLY =
    Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_GROUP_STATIONARY_ONLY;
  static constexpr Can_tx_grouping_modeType CAN_TX_GROUPING_MODE_GROUP_MOVING_STATIONARY =
    Esr_status2_4e1_Can_tx_grouping_modeType_CAN_TX_GROUPING_MODE_GROUP_MOVING_STATIONARY;
  static inline bool Can_tx_grouping_modeType_IsValid(int value) {
    return Esr_status2_4e1_Can_tx_grouping_modeType_IsValid(value);
  }
  static constexpr Can_tx_grouping_modeType Can_tx_grouping_modeType_MIN =
    Esr_status2_4e1_Can_tx_grouping_modeType_Can_tx_grouping_modeType_MIN;
  static constexpr Can_tx_grouping_modeType Can_tx_grouping_modeType_MAX =
    Esr_status2_4e1_Can_tx_grouping_modeType_Can_tx_grouping_modeType_MAX;
  static constexpr int Can_tx_grouping_modeType_ARRAYSIZE =
    Esr_status2_4e1_Can_tx_grouping_modeType_Can_tx_grouping_modeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_grouping_modeType_descriptor() {
    return Esr_status2_4e1_Can_tx_grouping_modeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_grouping_modeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_grouping_modeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_grouping_modeType_Name.");
    return Esr_status2_4e1_Can_tx_grouping_modeType_Name(enum_t_value);
  }
  static inline bool Can_tx_grouping_modeType_Parse(const std::string& name,
      Can_tx_grouping_modeType* value) {
    return Esr_status2_4e1_Can_tx_grouping_modeType_Parse(name, value);
  }

  typedef Esr_status2_4e1_Can_tx_xcvr_operationalType Can_tx_xcvr_operationalType;
  static constexpr Can_tx_xcvr_operationalType CAN_TX_XCVR_OPERATIONAL_OFF =
    Esr_status2_4e1_Can_tx_xcvr_operationalType_CAN_TX_XCVR_OPERATIONAL_OFF;
  static constexpr Can_tx_xcvr_operationalType CAN_TX_XCVR_OPERATIONAL_ON =
    Esr_status2_4e1_Can_tx_xcvr_operationalType_CAN_TX_XCVR_OPERATIONAL_ON;
  static inline bool Can_tx_xcvr_operationalType_IsValid(int value) {
    return Esr_status2_4e1_Can_tx_xcvr_operationalType_IsValid(value);
  }
  static constexpr Can_tx_xcvr_operationalType Can_tx_xcvr_operationalType_MIN =
    Esr_status2_4e1_Can_tx_xcvr_operationalType_Can_tx_xcvr_operationalType_MIN;
  static constexpr Can_tx_xcvr_operationalType Can_tx_xcvr_operationalType_MAX =
    Esr_status2_4e1_Can_tx_xcvr_operationalType_Can_tx_xcvr_operationalType_MAX;
  static constexpr int Can_tx_xcvr_operationalType_ARRAYSIZE =
    Esr_status2_4e1_Can_tx_xcvr_operationalType_Can_tx_xcvr_operationalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_tx_xcvr_operationalType_descriptor() {
    return Esr_status2_4e1_Can_tx_xcvr_operationalType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_tx_xcvr_operationalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_tx_xcvr_operationalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_tx_xcvr_operationalType_Name.");
    return Esr_status2_4e1_Can_tx_xcvr_operationalType_Name(enum_t_value);
  }
  static inline bool Can_tx_xcvr_operationalType_Parse(const std::string& name,
      Can_tx_xcvr_operationalType* value) {
    return Esr_status2_4e1_Can_tx_xcvr_operationalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxYawRateBiasFieldNumber = 1,
    kCanTxVehSpdCompFactorFieldNumber = 2,
    kCanTxSwVersionDspFieldNumber = 3,
    kCanTxTemperatureFieldNumber = 4,
    kCanTxRawDataModeFieldNumber = 5,
    kCanTxRangePerfErrorFieldNumber = 6,
    kCanTxOverheatErrorFieldNumber = 7,
    kCanTxMaximumTracksAckFieldNumber = 8,
    kCanTxInternalErrorFieldNumber = 9,
    kCanTxGroupingModeFieldNumber = 10,
    kCanTxXcvrOperationalFieldNumber = 11,
    kCanTxSteeringAngleAckFieldNumber = 12,
    kCanTxRollingCount2FieldNumber = 13,
  };
  // optional double can_tx_yaw_rate_bias = 1;
  bool has_can_tx_yaw_rate_bias() const;
  private:
  bool _internal_has_can_tx_yaw_rate_bias() const;
  public:
  void clear_can_tx_yaw_rate_bias();
  double can_tx_yaw_rate_bias() const;
  void set_can_tx_yaw_rate_bias(double value);
  private:
  double _internal_can_tx_yaw_rate_bias() const;
  void _internal_set_can_tx_yaw_rate_bias(double value);
  public:

  // optional double can_tx_veh_spd_comp_factor = 2;
  bool has_can_tx_veh_spd_comp_factor() const;
  private:
  bool _internal_has_can_tx_veh_spd_comp_factor() const;
  public:
  void clear_can_tx_veh_spd_comp_factor();
  double can_tx_veh_spd_comp_factor() const;
  void set_can_tx_veh_spd_comp_factor(double value);
  private:
  double _internal_can_tx_veh_spd_comp_factor() const;
  void _internal_set_can_tx_veh_spd_comp_factor(double value);
  public:

  // optional int32 can_tx_sw_version_dsp = 3;
  bool has_can_tx_sw_version_dsp() const;
  private:
  bool _internal_has_can_tx_sw_version_dsp() const;
  public:
  void clear_can_tx_sw_version_dsp();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_sw_version_dsp() const;
  void set_can_tx_sw_version_dsp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_sw_version_dsp() const;
  void _internal_set_can_tx_sw_version_dsp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_temperature = 4;
  bool has_can_tx_temperature() const;
  private:
  bool _internal_has_can_tx_temperature() const;
  public:
  void clear_can_tx_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_temperature() const;
  void set_can_tx_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_temperature() const;
  void _internal_set_can_tx_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_raw_data_modeType can_tx_raw_data_mode = 5;
  bool has_can_tx_raw_data_mode() const;
  private:
  bool _internal_has_can_tx_raw_data_mode() const;
  public:
  void clear_can_tx_raw_data_mode();
  ::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType can_tx_raw_data_mode() const;
  void set_can_tx_raw_data_mode(::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType value);
  private:
  ::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType _internal_can_tx_raw_data_mode() const;
  void _internal_set_can_tx_raw_data_mode(::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType value);
  public:

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_range_perf_errorType can_tx_range_perf_error = 6;
  bool has_can_tx_range_perf_error() const;
  private:
  bool _internal_has_can_tx_range_perf_error() const;
  public:
  void clear_can_tx_range_perf_error();
  ::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType can_tx_range_perf_error() const;
  void set_can_tx_range_perf_error(::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType value);
  private:
  ::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType _internal_can_tx_range_perf_error() const;
  void _internal_set_can_tx_range_perf_error(::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType value);
  public:

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_overheat_errorType can_tx_overheat_error = 7;
  bool has_can_tx_overheat_error() const;
  private:
  bool _internal_has_can_tx_overheat_error() const;
  public:
  void clear_can_tx_overheat_error();
  ::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType can_tx_overheat_error() const;
  void set_can_tx_overheat_error(::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType value);
  private:
  ::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType _internal_can_tx_overheat_error() const;
  void _internal_set_can_tx_overheat_error(::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType value);
  public:

  // optional int32 can_tx_maximum_tracks_ack = 8;
  bool has_can_tx_maximum_tracks_ack() const;
  private:
  bool _internal_has_can_tx_maximum_tracks_ack() const;
  public:
  void clear_can_tx_maximum_tracks_ack();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_maximum_tracks_ack() const;
  void set_can_tx_maximum_tracks_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_maximum_tracks_ack() const;
  void _internal_set_can_tx_maximum_tracks_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_internal_errorType can_tx_internal_error = 9;
  bool has_can_tx_internal_error() const;
  private:
  bool _internal_has_can_tx_internal_error() const;
  public:
  void clear_can_tx_internal_error();
  ::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType can_tx_internal_error() const;
  void set_can_tx_internal_error(::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType value);
  private:
  ::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType _internal_can_tx_internal_error() const;
  void _internal_set_can_tx_internal_error(::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType value);
  public:

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_grouping_modeType can_tx_grouping_mode = 10;
  bool has_can_tx_grouping_mode() const;
  private:
  bool _internal_has_can_tx_grouping_mode() const;
  public:
  void clear_can_tx_grouping_mode();
  ::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType can_tx_grouping_mode() const;
  void set_can_tx_grouping_mode(::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType value);
  private:
  ::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType _internal_can_tx_grouping_mode() const;
  void _internal_set_can_tx_grouping_mode(::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType value);
  public:

  // optional .apollo.drivers.Esr_status2_4e1.Can_tx_xcvr_operationalType can_tx_xcvr_operational = 11;
  bool has_can_tx_xcvr_operational() const;
  private:
  bool _internal_has_can_tx_xcvr_operational() const;
  public:
  void clear_can_tx_xcvr_operational();
  ::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType can_tx_xcvr_operational() const;
  void set_can_tx_xcvr_operational(::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType value);
  private:
  ::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType _internal_can_tx_xcvr_operational() const;
  void _internal_set_can_tx_xcvr_operational(::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType value);
  public:

  // optional int32 can_tx_steering_angle_ack = 12;
  bool has_can_tx_steering_angle_ack() const;
  private:
  bool _internal_has_can_tx_steering_angle_ack() const;
  public:
  void clear_can_tx_steering_angle_ack();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_steering_angle_ack() const;
  void set_can_tx_steering_angle_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_steering_angle_ack() const;
  void _internal_set_can_tx_steering_angle_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_rolling_count_2 = 13;
  bool has_can_tx_rolling_count_2() const;
  private:
  bool _internal_has_can_tx_rolling_count_2() const;
  public:
  void clear_can_tx_rolling_count_2();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_rolling_count_2() const;
  void set_can_tx_rolling_count_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_rolling_count_2() const;
  void _internal_set_can_tx_rolling_count_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status2_4e1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double can_tx_yaw_rate_bias_;
  double can_tx_veh_spd_comp_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_sw_version_dsp_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_temperature_;
  int can_tx_raw_data_mode_;
  int can_tx_range_perf_error_;
  int can_tx_overheat_error_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_maximum_tracks_ack_;
  int can_tx_internal_error_;
  int can_tx_grouping_mode_;
  int can_tx_xcvr_operational_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_steering_angle_ack_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_rolling_count_2_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_status8_5e7 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status8_5e7) */ {
 public:
  Esr_status8_5e7();
  virtual ~Esr_status8_5e7();

  Esr_status8_5e7(const Esr_status8_5e7& from);
  Esr_status8_5e7(Esr_status8_5e7&& from) noexcept
    : Esr_status8_5e7() {
    *this = ::std::move(from);
  }

  inline Esr_status8_5e7& operator=(const Esr_status8_5e7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status8_5e7& operator=(Esr_status8_5e7&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status8_5e7& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status8_5e7* internal_default_instance() {
    return reinterpret_cast<const Esr_status8_5e7*>(
               &_Esr_status8_5e7_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Esr_status8_5e7& a, Esr_status8_5e7& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status8_5e7* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status8_5e7* New() const final {
    return CreateMaybeMessage<Esr_status8_5e7>(nullptr);
  }

  Esr_status8_5e7* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status8_5e7>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status8_5e7& from);
  void MergeFrom(const Esr_status8_5e7& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status8_5e7* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status8_5e7";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxHistoryFault7FieldNumber = 1,
    kCanTxHistoryFault6FieldNumber = 2,
    kCanTxHistoryFault5FieldNumber = 3,
    kCanTxHistoryFault4FieldNumber = 4,
    kCanTxHistoryFault3FieldNumber = 5,
    kCanTxHistoryFault2FieldNumber = 6,
    kCanTxHistoryFault1FieldNumber = 7,
    kCanTxHistoryFault0FieldNumber = 8,
  };
  // optional int32 can_tx_history_fault_7 = 1;
  bool has_can_tx_history_fault_7() const;
  private:
  bool _internal_has_can_tx_history_fault_7() const;
  public:
  void clear_can_tx_history_fault_7();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_7() const;
  void set_can_tx_history_fault_7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_history_fault_7() const;
  void _internal_set_can_tx_history_fault_7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_history_fault_6 = 2;
  bool has_can_tx_history_fault_6() const;
  private:
  bool _internal_has_can_tx_history_fault_6() const;
  public:
  void clear_can_tx_history_fault_6();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_6() const;
  void set_can_tx_history_fault_6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_history_fault_6() const;
  void _internal_set_can_tx_history_fault_6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_history_fault_5 = 3;
  bool has_can_tx_history_fault_5() const;
  private:
  bool _internal_has_can_tx_history_fault_5() const;
  public:
  void clear_can_tx_history_fault_5();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_5() const;
  void set_can_tx_history_fault_5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_history_fault_5() const;
  void _internal_set_can_tx_history_fault_5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_history_fault_4 = 4;
  bool has_can_tx_history_fault_4() const;
  private:
  bool _internal_has_can_tx_history_fault_4() const;
  public:
  void clear_can_tx_history_fault_4();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_4() const;
  void set_can_tx_history_fault_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_history_fault_4() const;
  void _internal_set_can_tx_history_fault_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_history_fault_3 = 5;
  bool has_can_tx_history_fault_3() const;
  private:
  bool _internal_has_can_tx_history_fault_3() const;
  public:
  void clear_can_tx_history_fault_3();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_3() const;
  void set_can_tx_history_fault_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_history_fault_3() const;
  void _internal_set_can_tx_history_fault_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_history_fault_2 = 6;
  bool has_can_tx_history_fault_2() const;
  private:
  bool _internal_has_can_tx_history_fault_2() const;
  public:
  void clear_can_tx_history_fault_2();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_2() const;
  void set_can_tx_history_fault_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_history_fault_2() const;
  void _internal_set_can_tx_history_fault_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_history_fault_1 = 7;
  bool has_can_tx_history_fault_1() const;
  private:
  bool _internal_has_can_tx_history_fault_1() const;
  public:
  void clear_can_tx_history_fault_1();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_1() const;
  void set_can_tx_history_fault_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_history_fault_1() const;
  void _internal_set_can_tx_history_fault_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_history_fault_0 = 8;
  bool has_can_tx_history_fault_0() const;
  private:
  bool _internal_has_can_tx_history_fault_0() const;
  public:
  void clear_can_tx_history_fault_0();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_0() const;
  void set_can_tx_history_fault_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_history_fault_0() const;
  void _internal_set_can_tx_history_fault_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status8_5e7)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_7_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_6_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_5_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_4_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_3_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_history_fault_0_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Esr_status7_5e6 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Esr_status7_5e6) */ {
 public:
  Esr_status7_5e6();
  virtual ~Esr_status7_5e6();

  Esr_status7_5e6(const Esr_status7_5e6& from);
  Esr_status7_5e6(Esr_status7_5e6&& from) noexcept
    : Esr_status7_5e6() {
    *this = ::std::move(from);
  }

  inline Esr_status7_5e6& operator=(const Esr_status7_5e6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Esr_status7_5e6& operator=(Esr_status7_5e6&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Esr_status7_5e6& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Esr_status7_5e6* internal_default_instance() {
    return reinterpret_cast<const Esr_status7_5e6*>(
               &_Esr_status7_5e6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Esr_status7_5e6& a, Esr_status7_5e6& b) {
    a.Swap(&b);
  }
  inline void Swap(Esr_status7_5e6* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Esr_status7_5e6* New() const final {
    return CreateMaybeMessage<Esr_status7_5e6>(nullptr);
  }

  Esr_status7_5e6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Esr_status7_5e6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Esr_status7_5e6& from);
  void MergeFrom(const Esr_status7_5e6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Esr_status7_5e6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Esr_status7_5e6";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanTxActiveFault7FieldNumber = 1,
    kCanTxActiveFault6FieldNumber = 2,
    kCanTxActiveFault5FieldNumber = 3,
    kCanTxActiveFault4FieldNumber = 4,
    kCanTxActiveFault3FieldNumber = 5,
    kCanTxActiveFault2FieldNumber = 6,
    kCanTxActiveFault0FieldNumber = 7,
    kCanTxActiveFault1FieldNumber = 8,
  };
  // optional int32 can_tx_active_fault_7 = 1;
  bool has_can_tx_active_fault_7() const;
  private:
  bool _internal_has_can_tx_active_fault_7() const;
  public:
  void clear_can_tx_active_fault_7();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_7() const;
  void set_can_tx_active_fault_7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_active_fault_7() const;
  void _internal_set_can_tx_active_fault_7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_active_fault_6 = 2;
  bool has_can_tx_active_fault_6() const;
  private:
  bool _internal_has_can_tx_active_fault_6() const;
  public:
  void clear_can_tx_active_fault_6();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_6() const;
  void set_can_tx_active_fault_6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_active_fault_6() const;
  void _internal_set_can_tx_active_fault_6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_active_fault_5 = 3;
  bool has_can_tx_active_fault_5() const;
  private:
  bool _internal_has_can_tx_active_fault_5() const;
  public:
  void clear_can_tx_active_fault_5();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_5() const;
  void set_can_tx_active_fault_5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_active_fault_5() const;
  void _internal_set_can_tx_active_fault_5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_active_fault_4 = 4;
  bool has_can_tx_active_fault_4() const;
  private:
  bool _internal_has_can_tx_active_fault_4() const;
  public:
  void clear_can_tx_active_fault_4();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_4() const;
  void set_can_tx_active_fault_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_active_fault_4() const;
  void _internal_set_can_tx_active_fault_4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_active_fault_3 = 5;
  bool has_can_tx_active_fault_3() const;
  private:
  bool _internal_has_can_tx_active_fault_3() const;
  public:
  void clear_can_tx_active_fault_3();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_3() const;
  void set_can_tx_active_fault_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_active_fault_3() const;
  void _internal_set_can_tx_active_fault_3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_active_fault_2 = 6;
  bool has_can_tx_active_fault_2() const;
  private:
  bool _internal_has_can_tx_active_fault_2() const;
  public:
  void clear_can_tx_active_fault_2();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_2() const;
  void set_can_tx_active_fault_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_active_fault_2() const;
  void _internal_set_can_tx_active_fault_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_active_fault_0 = 7;
  bool has_can_tx_active_fault_0() const;
  private:
  bool _internal_has_can_tx_active_fault_0() const;
  public:
  void clear_can_tx_active_fault_0();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_0() const;
  void set_can_tx_active_fault_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_active_fault_0() const;
  void _internal_set_can_tx_active_fault_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_tx_active_fault_1 = 8;
  bool has_can_tx_active_fault_1() const;
  private:
  bool _internal_has_can_tx_active_fault_1() const;
  public:
  void clear_can_tx_active_fault_1();
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_1() const;
  void set_can_tx_active_fault_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_tx_active_fault_1() const;
  void _internal_set_can_tx_active_fault_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Esr_status7_5e6)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_7_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_6_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_5_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_4_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_3_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_0_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_tx_active_fault_1_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Vehicle3_5f2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Vehicle3_5f2) */ {
 public:
  Vehicle3_5f2();
  virtual ~Vehicle3_5f2();

  Vehicle3_5f2(const Vehicle3_5f2& from);
  Vehicle3_5f2(Vehicle3_5f2&& from) noexcept
    : Vehicle3_5f2() {
    *this = ::std::move(from);
  }

  inline Vehicle3_5f2& operator=(const Vehicle3_5f2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle3_5f2& operator=(Vehicle3_5f2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle3_5f2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle3_5f2* internal_default_instance() {
    return reinterpret_cast<const Vehicle3_5f2*>(
               &_Vehicle3_5f2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Vehicle3_5f2& a, Vehicle3_5f2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle3_5f2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle3_5f2* New() const final {
    return CreateMaybeMessage<Vehicle3_5f2>(nullptr);
  }

  Vehicle3_5f2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle3_5f2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle3_5f2& from);
  void MergeFrom(const Vehicle3_5f2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle3_5f2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Vehicle3_5f2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehicle3_5f2_Can_rx_serv_align_typeType Can_rx_serv_align_typeType;
  static constexpr Can_rx_serv_align_typeType CAN_RX_SERV_ALIGN_TYPE_AUTO_OR_DEALER =
    Vehicle3_5f2_Can_rx_serv_align_typeType_CAN_RX_SERV_ALIGN_TYPE_AUTO_OR_DEALER;
  static constexpr Can_rx_serv_align_typeType CAN_RX_SERV_ALIGN_TYPE_VOLVO_SHORT_TRACK =
    Vehicle3_5f2_Can_rx_serv_align_typeType_CAN_RX_SERV_ALIGN_TYPE_VOLVO_SHORT_TRACK;
  static inline bool Can_rx_serv_align_typeType_IsValid(int value) {
    return Vehicle3_5f2_Can_rx_serv_align_typeType_IsValid(value);
  }
  static constexpr Can_rx_serv_align_typeType Can_rx_serv_align_typeType_MIN =
    Vehicle3_5f2_Can_rx_serv_align_typeType_Can_rx_serv_align_typeType_MIN;
  static constexpr Can_rx_serv_align_typeType Can_rx_serv_align_typeType_MAX =
    Vehicle3_5f2_Can_rx_serv_align_typeType_Can_rx_serv_align_typeType_MAX;
  static constexpr int Can_rx_serv_align_typeType_ARRAYSIZE =
    Vehicle3_5f2_Can_rx_serv_align_typeType_Can_rx_serv_align_typeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_serv_align_typeType_descriptor() {
    return Vehicle3_5f2_Can_rx_serv_align_typeType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_serv_align_typeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_serv_align_typeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_serv_align_typeType_Name.");
    return Vehicle3_5f2_Can_rx_serv_align_typeType_Name(enum_t_value);
  }
  static inline bool Can_rx_serv_align_typeType_Parse(const std::string& name,
      Can_rx_serv_align_typeType* value) {
    return Vehicle3_5f2_Can_rx_serv_align_typeType_Parse(name, value);
  }

  typedef Vehicle3_5f2_Can_rx_serv_align_enableType Can_rx_serv_align_enableType;
  static constexpr Can_rx_serv_align_enableType CAN_RX_SERV_ALIGN_ENABLE_DISABLED =
    Vehicle3_5f2_Can_rx_serv_align_enableType_CAN_RX_SERV_ALIGN_ENABLE_DISABLED;
  static constexpr Can_rx_serv_align_enableType CAN_RX_SERV_ALIGN_ENABLE_ENABLED =
    Vehicle3_5f2_Can_rx_serv_align_enableType_CAN_RX_SERV_ALIGN_ENABLE_ENABLED;
  static inline bool Can_rx_serv_align_enableType_IsValid(int value) {
    return Vehicle3_5f2_Can_rx_serv_align_enableType_IsValid(value);
  }
  static constexpr Can_rx_serv_align_enableType Can_rx_serv_align_enableType_MIN =
    Vehicle3_5f2_Can_rx_serv_align_enableType_Can_rx_serv_align_enableType_MIN;
  static constexpr Can_rx_serv_align_enableType Can_rx_serv_align_enableType_MAX =
    Vehicle3_5f2_Can_rx_serv_align_enableType_Can_rx_serv_align_enableType_MAX;
  static constexpr int Can_rx_serv_align_enableType_ARRAYSIZE =
    Vehicle3_5f2_Can_rx_serv_align_enableType_Can_rx_serv_align_enableType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_serv_align_enableType_descriptor() {
    return Vehicle3_5f2_Can_rx_serv_align_enableType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_serv_align_enableType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_serv_align_enableType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_serv_align_enableType_Name.");
    return Vehicle3_5f2_Can_rx_serv_align_enableType_Name(enum_t_value);
  }
  static inline bool Can_rx_serv_align_enableType_Parse(const std::string& name,
      Can_rx_serv_align_enableType* value) {
    return Vehicle3_5f2_Can_rx_serv_align_enableType_Parse(name, value);
  }

  typedef Vehicle3_5f2_Can_rx_auto_align_convergedType Can_rx_auto_align_convergedType;
  static constexpr Can_rx_auto_align_convergedType CAN_RX_AUTO_ALIGN_CONVERGED_NOT_CONVERGED =
    Vehicle3_5f2_Can_rx_auto_align_convergedType_CAN_RX_AUTO_ALIGN_CONVERGED_NOT_CONVERGED;
  static constexpr Can_rx_auto_align_convergedType CAN_RX_AUTO_ALIGN_CONVERGED_CONVERGED =
    Vehicle3_5f2_Can_rx_auto_align_convergedType_CAN_RX_AUTO_ALIGN_CONVERGED_CONVERGED;
  static inline bool Can_rx_auto_align_convergedType_IsValid(int value) {
    return Vehicle3_5f2_Can_rx_auto_align_convergedType_IsValid(value);
  }
  static constexpr Can_rx_auto_align_convergedType Can_rx_auto_align_convergedType_MIN =
    Vehicle3_5f2_Can_rx_auto_align_convergedType_Can_rx_auto_align_convergedType_MIN;
  static constexpr Can_rx_auto_align_convergedType Can_rx_auto_align_convergedType_MAX =
    Vehicle3_5f2_Can_rx_auto_align_convergedType_Can_rx_auto_align_convergedType_MAX;
  static constexpr int Can_rx_auto_align_convergedType_ARRAYSIZE =
    Vehicle3_5f2_Can_rx_auto_align_convergedType_Can_rx_auto_align_convergedType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_auto_align_convergedType_descriptor() {
    return Vehicle3_5f2_Can_rx_auto_align_convergedType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_auto_align_convergedType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_auto_align_convergedType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_auto_align_convergedType_Name.");
    return Vehicle3_5f2_Can_rx_auto_align_convergedType_Name(enum_t_value);
  }
  static inline bool Can_rx_auto_align_convergedType_Parse(const std::string& name,
      Can_rx_auto_align_convergedType* value) {
    return Vehicle3_5f2_Can_rx_auto_align_convergedType_Parse(name, value);
  }

  typedef Vehicle3_5f2_Can_rx_auto_align_disableType Can_rx_auto_align_disableType;
  static constexpr Can_rx_auto_align_disableType CAN_RX_AUTO_ALIGN_DISABLE_ENABLED =
    Vehicle3_5f2_Can_rx_auto_align_disableType_CAN_RX_AUTO_ALIGN_DISABLE_ENABLED;
  static constexpr Can_rx_auto_align_disableType CAN_RX_AUTO_ALIGN_DISABLE_DISABLED =
    Vehicle3_5f2_Can_rx_auto_align_disableType_CAN_RX_AUTO_ALIGN_DISABLE_DISABLED;
  static inline bool Can_rx_auto_align_disableType_IsValid(int value) {
    return Vehicle3_5f2_Can_rx_auto_align_disableType_IsValid(value);
  }
  static constexpr Can_rx_auto_align_disableType Can_rx_auto_align_disableType_MIN =
    Vehicle3_5f2_Can_rx_auto_align_disableType_Can_rx_auto_align_disableType_MIN;
  static constexpr Can_rx_auto_align_disableType Can_rx_auto_align_disableType_MAX =
    Vehicle3_5f2_Can_rx_auto_align_disableType_Can_rx_auto_align_disableType_MAX;
  static constexpr int Can_rx_auto_align_disableType_ARRAYSIZE =
    Vehicle3_5f2_Can_rx_auto_align_disableType_Can_rx_auto_align_disableType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_auto_align_disableType_descriptor() {
    return Vehicle3_5f2_Can_rx_auto_align_disableType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_auto_align_disableType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_auto_align_disableType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_auto_align_disableType_Name.");
    return Vehicle3_5f2_Can_rx_auto_align_disableType_Name(enum_t_value);
  }
  static inline bool Can_rx_auto_align_disableType_Parse(const std::string& name,
      Can_rx_auto_align_disableType* value) {
    return Vehicle3_5f2_Can_rx_auto_align_disableType_Parse(name, value);
  }

  typedef Vehicle3_5f2_Can_rx_wheel_slipType Can_rx_wheel_slipType;
  static constexpr Can_rx_wheel_slipType CAN_RX_WHEEL_SLIP_NO_CONTROL =
    Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_NO_CONTROL;
  static constexpr Can_rx_wheel_slipType CAN_RX_WHEEL_SLIP_BRAKE_SLIP_CONTROL =
    Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_BRAKE_SLIP_CONTROL;
  static constexpr Can_rx_wheel_slipType CAN_RX_WHEEL_SLIP_TRACTION_SLIP_CONTROL =
    Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_TRACTION_SLIP_CONTROL;
  static constexpr Can_rx_wheel_slipType CAN_RX_WHEEL_SLIP_INVALID_3 =
    Vehicle3_5f2_Can_rx_wheel_slipType_CAN_RX_WHEEL_SLIP_INVALID_3;
  static inline bool Can_rx_wheel_slipType_IsValid(int value) {
    return Vehicle3_5f2_Can_rx_wheel_slipType_IsValid(value);
  }
  static constexpr Can_rx_wheel_slipType Can_rx_wheel_slipType_MIN =
    Vehicle3_5f2_Can_rx_wheel_slipType_Can_rx_wheel_slipType_MIN;
  static constexpr Can_rx_wheel_slipType Can_rx_wheel_slipType_MAX =
    Vehicle3_5f2_Can_rx_wheel_slipType_Can_rx_wheel_slipType_MAX;
  static constexpr int Can_rx_wheel_slipType_ARRAYSIZE =
    Vehicle3_5f2_Can_rx_wheel_slipType_Can_rx_wheel_slipType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_wheel_slipType_descriptor() {
    return Vehicle3_5f2_Can_rx_wheel_slipType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_wheel_slipType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_wheel_slipType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_wheel_slipType_Name.");
    return Vehicle3_5f2_Can_rx_wheel_slipType_Name(enum_t_value);
  }
  static inline bool Can_rx_wheel_slipType_Parse(const std::string& name,
      Can_rx_wheel_slipType* value) {
    return Vehicle3_5f2_Can_rx_wheel_slipType_Parse(name, value);
  }

  typedef Vehicle3_5f2_Can_rx_long_accel_validityType Can_rx_long_accel_validityType;
  static constexpr Can_rx_long_accel_validityType CAN_RX_LONG_ACCEL_VALIDITY_INVALID =
    Vehicle3_5f2_Can_rx_long_accel_validityType_CAN_RX_LONG_ACCEL_VALIDITY_INVALID;
  static constexpr Can_rx_long_accel_validityType CAN_RX_LONG_ACCEL_VALIDITY_VALID =
    Vehicle3_5f2_Can_rx_long_accel_validityType_CAN_RX_LONG_ACCEL_VALIDITY_VALID;
  static inline bool Can_rx_long_accel_validityType_IsValid(int value) {
    return Vehicle3_5f2_Can_rx_long_accel_validityType_IsValid(value);
  }
  static constexpr Can_rx_long_accel_validityType Can_rx_long_accel_validityType_MIN =
    Vehicle3_5f2_Can_rx_long_accel_validityType_Can_rx_long_accel_validityType_MIN;
  static constexpr Can_rx_long_accel_validityType Can_rx_long_accel_validityType_MAX =
    Vehicle3_5f2_Can_rx_long_accel_validityType_Can_rx_long_accel_validityType_MAX;
  static constexpr int Can_rx_long_accel_validityType_ARRAYSIZE =
    Vehicle3_5f2_Can_rx_long_accel_validityType_Can_rx_long_accel_validityType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_long_accel_validityType_descriptor() {
    return Vehicle3_5f2_Can_rx_long_accel_validityType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_long_accel_validityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_long_accel_validityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_long_accel_validityType_Name.");
    return Vehicle3_5f2_Can_rx_long_accel_validityType_Name(enum_t_value);
  }
  static inline bool Can_rx_long_accel_validityType_Parse(const std::string& name,
      Can_rx_long_accel_validityType* value) {
    return Vehicle3_5f2_Can_rx_long_accel_validityType_Parse(name, value);
  }

  typedef Vehicle3_5f2_Can_rx_lat_accel_validityType Can_rx_lat_accel_validityType;
  static constexpr Can_rx_lat_accel_validityType CAN_RX_LAT_ACCEL_VALIDITY_INVALID =
    Vehicle3_5f2_Can_rx_lat_accel_validityType_CAN_RX_LAT_ACCEL_VALIDITY_INVALID;
  static constexpr Can_rx_lat_accel_validityType CAN_RX_LAT_ACCEL_VALIDITY_VALID =
    Vehicle3_5f2_Can_rx_lat_accel_validityType_CAN_RX_LAT_ACCEL_VALIDITY_VALID;
  static inline bool Can_rx_lat_accel_validityType_IsValid(int value) {
    return Vehicle3_5f2_Can_rx_lat_accel_validityType_IsValid(value);
  }
  static constexpr Can_rx_lat_accel_validityType Can_rx_lat_accel_validityType_MIN =
    Vehicle3_5f2_Can_rx_lat_accel_validityType_Can_rx_lat_accel_validityType_MIN;
  static constexpr Can_rx_lat_accel_validityType Can_rx_lat_accel_validityType_MAX =
    Vehicle3_5f2_Can_rx_lat_accel_validityType_Can_rx_lat_accel_validityType_MAX;
  static constexpr int Can_rx_lat_accel_validityType_ARRAYSIZE =
    Vehicle3_5f2_Can_rx_lat_accel_validityType_Can_rx_lat_accel_validityType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_lat_accel_validityType_descriptor() {
    return Vehicle3_5f2_Can_rx_lat_accel_validityType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_lat_accel_validityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_lat_accel_validityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_lat_accel_validityType_Name.");
    return Vehicle3_5f2_Can_rx_lat_accel_validityType_Name(enum_t_value);
  }
  static inline bool Can_rx_lat_accel_validityType_Parse(const std::string& name,
      Can_rx_lat_accel_validityType* value) {
    return Vehicle3_5f2_Can_rx_lat_accel_validityType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanRxServAlignUpdatesNeedFieldNumber = 1,
    kCanRxServAlignTypeFieldNumber = 2,
    kCanRxAalignAvgCtrTotalFieldNumber = 4,
    kCanRxServAlignEnableFieldNumber = 3,
    kCanRxAutoAlignConvergedFieldNumber = 5,
    kCanRxAngleMountingOffsetFieldNumber = 7,
    kCanRxAutoAlignDisableFieldNumber = 6,
    kCanRxWheelSlipFieldNumber = 8,
    kCanRxRadarHeightFieldNumber = 9,
    kCanRxRadarFovMrFieldNumber = 10,
    kCanRxRadarFovLrFieldNumber = 11,
    kCanRxLongAccelValidityFieldNumber = 12,
    kCanRxLongAccelFieldNumber = 13,
    kCanRxLatAccelFieldNumber = 15,
    kCanRxLatAccelValidityFieldNumber = 14,
  };
  // optional int32 can_rx_serv_align_updates_need = 1;
  bool has_can_rx_serv_align_updates_need() const;
  private:
  bool _internal_has_can_rx_serv_align_updates_need() const;
  public:
  void clear_can_rx_serv_align_updates_need();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_serv_align_updates_need() const;
  void set_can_rx_serv_align_updates_need(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_serv_align_updates_need() const;
  void _internal_set_can_rx_serv_align_updates_need(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_typeType can_rx_serv_align_type = 2;
  bool has_can_rx_serv_align_type() const;
  private:
  bool _internal_has_can_rx_serv_align_type() const;
  public:
  void clear_can_rx_serv_align_type();
  ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType can_rx_serv_align_type() const;
  void set_can_rx_serv_align_type(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType value);
  private:
  ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType _internal_can_rx_serv_align_type() const;
  void _internal_set_can_rx_serv_align_type(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType value);
  public:

  // optional double can_rx_aalign_avg_ctr_total = 4;
  bool has_can_rx_aalign_avg_ctr_total() const;
  private:
  bool _internal_has_can_rx_aalign_avg_ctr_total() const;
  public:
  void clear_can_rx_aalign_avg_ctr_total();
  double can_rx_aalign_avg_ctr_total() const;
  void set_can_rx_aalign_avg_ctr_total(double value);
  private:
  double _internal_can_rx_aalign_avg_ctr_total() const;
  void _internal_set_can_rx_aalign_avg_ctr_total(double value);
  public:

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_enableType can_rx_serv_align_enable = 3;
  bool has_can_rx_serv_align_enable() const;
  private:
  bool _internal_has_can_rx_serv_align_enable() const;
  public:
  void clear_can_rx_serv_align_enable();
  ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType can_rx_serv_align_enable() const;
  void set_can_rx_serv_align_enable(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType value);
  private:
  ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType _internal_can_rx_serv_align_enable() const;
  void _internal_set_can_rx_serv_align_enable(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType value);
  public:

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_convergedType can_rx_auto_align_converged = 5;
  bool has_can_rx_auto_align_converged() const;
  private:
  bool _internal_has_can_rx_auto_align_converged() const;
  public:
  void clear_can_rx_auto_align_converged();
  ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType can_rx_auto_align_converged() const;
  void set_can_rx_auto_align_converged(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType value);
  private:
  ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType _internal_can_rx_auto_align_converged() const;
  void _internal_set_can_rx_auto_align_converged(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType value);
  public:

  // optional double can_rx_angle_mounting_offset = 7;
  bool has_can_rx_angle_mounting_offset() const;
  private:
  bool _internal_has_can_rx_angle_mounting_offset() const;
  public:
  void clear_can_rx_angle_mounting_offset();
  double can_rx_angle_mounting_offset() const;
  void set_can_rx_angle_mounting_offset(double value);
  private:
  double _internal_can_rx_angle_mounting_offset() const;
  void _internal_set_can_rx_angle_mounting_offset(double value);
  public:

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_disableType can_rx_auto_align_disable = 6;
  bool has_can_rx_auto_align_disable() const;
  private:
  bool _internal_has_can_rx_auto_align_disable() const;
  public:
  void clear_can_rx_auto_align_disable();
  ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType can_rx_auto_align_disable() const;
  void set_can_rx_auto_align_disable(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType value);
  private:
  ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType _internal_can_rx_auto_align_disable() const;
  void _internal_set_can_rx_auto_align_disable(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType value);
  public:

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_wheel_slipType can_rx_wheel_slip = 8;
  bool has_can_rx_wheel_slip() const;
  private:
  bool _internal_has_can_rx_wheel_slip() const;
  public:
  void clear_can_rx_wheel_slip();
  ::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType can_rx_wheel_slip() const;
  void set_can_rx_wheel_slip(::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType value);
  private:
  ::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType _internal_can_rx_wheel_slip() const;
  void _internal_set_can_rx_wheel_slip(::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType value);
  public:

  // optional int32 can_rx_radar_height = 9;
  bool has_can_rx_radar_height() const;
  private:
  bool _internal_has_can_rx_radar_height() const;
  public:
  void clear_can_rx_radar_height();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_radar_height() const;
  void set_can_rx_radar_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_radar_height() const;
  void _internal_set_can_rx_radar_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_rx_radar_fov_mr = 10;
  bool has_can_rx_radar_fov_mr() const;
  private:
  bool _internal_has_can_rx_radar_fov_mr() const;
  public:
  void clear_can_rx_radar_fov_mr();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_radar_fov_mr() const;
  void set_can_rx_radar_fov_mr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_radar_fov_mr() const;
  void _internal_set_can_rx_radar_fov_mr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_rx_radar_fov_lr = 11;
  bool has_can_rx_radar_fov_lr() const;
  private:
  bool _internal_has_can_rx_radar_fov_lr() const;
  public:
  void clear_can_rx_radar_fov_lr();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_radar_fov_lr() const;
  void set_can_rx_radar_fov_lr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_radar_fov_lr() const;
  void _internal_set_can_rx_radar_fov_lr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_long_accel_validityType can_rx_long_accel_validity = 12;
  bool has_can_rx_long_accel_validity() const;
  private:
  bool _internal_has_can_rx_long_accel_validity() const;
  public:
  void clear_can_rx_long_accel_validity();
  ::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType can_rx_long_accel_validity() const;
  void set_can_rx_long_accel_validity(::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType value);
  private:
  ::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType _internal_can_rx_long_accel_validity() const;
  void _internal_set_can_rx_long_accel_validity(::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType value);
  public:

  // optional double can_rx_long_accel = 13;
  bool has_can_rx_long_accel() const;
  private:
  bool _internal_has_can_rx_long_accel() const;
  public:
  void clear_can_rx_long_accel();
  double can_rx_long_accel() const;
  void set_can_rx_long_accel(double value);
  private:
  double _internal_can_rx_long_accel() const;
  void _internal_set_can_rx_long_accel(double value);
  public:

  // optional double can_rx_lat_accel = 15;
  bool has_can_rx_lat_accel() const;
  private:
  bool _internal_has_can_rx_lat_accel() const;
  public:
  void clear_can_rx_lat_accel();
  double can_rx_lat_accel() const;
  void set_can_rx_lat_accel(double value);
  private:
  double _internal_can_rx_lat_accel() const;
  void _internal_set_can_rx_lat_accel(double value);
  public:

  // optional .apollo.drivers.Vehicle3_5f2.Can_rx_lat_accel_validityType can_rx_lat_accel_validity = 14;
  bool has_can_rx_lat_accel_validity() const;
  private:
  bool _internal_has_can_rx_lat_accel_validity() const;
  public:
  void clear_can_rx_lat_accel_validity();
  ::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType can_rx_lat_accel_validity() const;
  void set_can_rx_lat_accel_validity(::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType value);
  private:
  ::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType _internal_can_rx_lat_accel_validity() const;
  void _internal_set_can_rx_lat_accel_validity(::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Vehicle3_5f2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_serv_align_updates_need_;
  int can_rx_serv_align_type_;
  double can_rx_aalign_avg_ctr_total_;
  int can_rx_serv_align_enable_;
  int can_rx_auto_align_converged_;
  double can_rx_angle_mounting_offset_;
  int can_rx_auto_align_disable_;
  int can_rx_wheel_slip_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_radar_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_radar_fov_mr_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_radar_fov_lr_;
  int can_rx_long_accel_validity_;
  double can_rx_long_accel_;
  double can_rx_lat_accel_;
  int can_rx_lat_accel_validity_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Vehicle4_5f3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Vehicle4_5f3) */ {
 public:
  Vehicle4_5f3();
  virtual ~Vehicle4_5f3();

  Vehicle4_5f3(const Vehicle4_5f3& from);
  Vehicle4_5f3(Vehicle4_5f3&& from) noexcept
    : Vehicle4_5f3() {
    *this = ::std::move(from);
  }

  inline Vehicle4_5f3& operator=(const Vehicle4_5f3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle4_5f3& operator=(Vehicle4_5f3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle4_5f3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle4_5f3* internal_default_instance() {
    return reinterpret_cast<const Vehicle4_5f3*>(
               &_Vehicle4_5f3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Vehicle4_5f3& a, Vehicle4_5f3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle4_5f3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle4_5f3* New() const final {
    return CreateMaybeMessage<Vehicle4_5f3>(nullptr);
  }

  Vehicle4_5f3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle4_5f3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle4_5f3& from);
  void MergeFrom(const Vehicle4_5f3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle4_5f3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Vehicle4_5f3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Can_rx_fac_align_cmd_2Type;
  static constexpr Can_rx_fac_align_cmd_2Type CAN_RX_FAC_ALIGN_CMD_2_OFF =
    Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_CAN_RX_FAC_ALIGN_CMD_2_OFF;
  static constexpr Can_rx_fac_align_cmd_2Type CAN_RX_FAC_ALIGN_CMD_2_ON =
    Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_CAN_RX_FAC_ALIGN_CMD_2_ON;
  static inline bool Can_rx_fac_align_cmd_2Type_IsValid(int value) {
    return Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_IsValid(value);
  }
  static constexpr Can_rx_fac_align_cmd_2Type Can_rx_fac_align_cmd_2Type_MIN =
    Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Can_rx_fac_align_cmd_2Type_MIN;
  static constexpr Can_rx_fac_align_cmd_2Type Can_rx_fac_align_cmd_2Type_MAX =
    Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Can_rx_fac_align_cmd_2Type_MAX;
  static constexpr int Can_rx_fac_align_cmd_2Type_ARRAYSIZE =
    Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Can_rx_fac_align_cmd_2Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_fac_align_cmd_2Type_descriptor() {
    return Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_fac_align_cmd_2Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_fac_align_cmd_2Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_fac_align_cmd_2Type_Name.");
    return Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Name(enum_t_value);
  }
  static inline bool Can_rx_fac_align_cmd_2Type_Parse(const std::string& name,
      Can_rx_fac_align_cmd_2Type* value) {
    return Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_Parse(name, value);
  }

  typedef Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Can_rx_fac_align_cmd_1Type;
  static constexpr Can_rx_fac_align_cmd_1Type CAN_RX_FAC_ALIGN_CMD_1_OFF =
    Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_CAN_RX_FAC_ALIGN_CMD_1_OFF;
  static constexpr Can_rx_fac_align_cmd_1Type CAN_RX_FAC_ALIGN_CMD_1_ON =
    Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_CAN_RX_FAC_ALIGN_CMD_1_ON;
  static inline bool Can_rx_fac_align_cmd_1Type_IsValid(int value) {
    return Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_IsValid(value);
  }
  static constexpr Can_rx_fac_align_cmd_1Type Can_rx_fac_align_cmd_1Type_MIN =
    Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Can_rx_fac_align_cmd_1Type_MIN;
  static constexpr Can_rx_fac_align_cmd_1Type Can_rx_fac_align_cmd_1Type_MAX =
    Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Can_rx_fac_align_cmd_1Type_MAX;
  static constexpr int Can_rx_fac_align_cmd_1Type_ARRAYSIZE =
    Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Can_rx_fac_align_cmd_1Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_fac_align_cmd_1Type_descriptor() {
    return Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_fac_align_cmd_1Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_fac_align_cmd_1Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_fac_align_cmd_1Type_Name.");
    return Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Name(enum_t_value);
  }
  static inline bool Can_rx_fac_align_cmd_1Type_Parse(const std::string& name,
      Can_rx_fac_align_cmd_1Type* value) {
    return Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanRxFacTgtRangeR2MFieldNumber = 1,
    kCanRxFacTgtRangeM2TFieldNumber = 2,
    kCanRxFacTgtRange1FieldNumber = 3,
    kCanRxFacTgtMtgSpaceVerFieldNumber = 4,
    kCanRxFacTgtMtgSpaceHorFieldNumber = 5,
    kCanRxFacTgtMtgOffsetFieldNumber = 6,
    kCanRxFacAlignSampReqFieldNumber = 7,
    kCanRxFacAlignMaxNtFieldNumber = 8,
    kCanRxFacAlignCmd2FieldNumber = 9,
    kCanRxFacAlignCmd1FieldNumber = 10,
  };
  // optional double can_rx_fac_tgt_range_r2m = 1;
  bool has_can_rx_fac_tgt_range_r2m() const;
  private:
  bool _internal_has_can_rx_fac_tgt_range_r2m() const;
  public:
  void clear_can_rx_fac_tgt_range_r2m();
  double can_rx_fac_tgt_range_r2m() const;
  void set_can_rx_fac_tgt_range_r2m(double value);
  private:
  double _internal_can_rx_fac_tgt_range_r2m() const;
  void _internal_set_can_rx_fac_tgt_range_r2m(double value);
  public:

  // optional double can_rx_fac_tgt_range_m2t = 2;
  bool has_can_rx_fac_tgt_range_m2t() const;
  private:
  bool _internal_has_can_rx_fac_tgt_range_m2t() const;
  public:
  void clear_can_rx_fac_tgt_range_m2t();
  double can_rx_fac_tgt_range_m2t() const;
  void set_can_rx_fac_tgt_range_m2t(double value);
  private:
  double _internal_can_rx_fac_tgt_range_m2t() const;
  void _internal_set_can_rx_fac_tgt_range_m2t(double value);
  public:

  // optional double can_rx_fac_tgt_range_1 = 3;
  bool has_can_rx_fac_tgt_range_1() const;
  private:
  bool _internal_has_can_rx_fac_tgt_range_1() const;
  public:
  void clear_can_rx_fac_tgt_range_1();
  double can_rx_fac_tgt_range_1() const;
  void set_can_rx_fac_tgt_range_1(double value);
  private:
  double _internal_can_rx_fac_tgt_range_1() const;
  void _internal_set_can_rx_fac_tgt_range_1(double value);
  public:

  // optional int32 can_rx_fac_tgt_mtg_space_ver = 4;
  bool has_can_rx_fac_tgt_mtg_space_ver() const;
  private:
  bool _internal_has_can_rx_fac_tgt_mtg_space_ver() const;
  public:
  void clear_can_rx_fac_tgt_mtg_space_ver();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_tgt_mtg_space_ver() const;
  void set_can_rx_fac_tgt_mtg_space_ver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_fac_tgt_mtg_space_ver() const;
  void _internal_set_can_rx_fac_tgt_mtg_space_ver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_rx_fac_tgt_mtg_space_hor = 5;
  bool has_can_rx_fac_tgt_mtg_space_hor() const;
  private:
  bool _internal_has_can_rx_fac_tgt_mtg_space_hor() const;
  public:
  void clear_can_rx_fac_tgt_mtg_space_hor();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_tgt_mtg_space_hor() const;
  void set_can_rx_fac_tgt_mtg_space_hor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_fac_tgt_mtg_space_hor() const;
  void _internal_set_can_rx_fac_tgt_mtg_space_hor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_rx_fac_tgt_mtg_offset = 6;
  bool has_can_rx_fac_tgt_mtg_offset() const;
  private:
  bool _internal_has_can_rx_fac_tgt_mtg_offset() const;
  public:
  void clear_can_rx_fac_tgt_mtg_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_tgt_mtg_offset() const;
  void set_can_rx_fac_tgt_mtg_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_fac_tgt_mtg_offset() const;
  void _internal_set_can_rx_fac_tgt_mtg_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_rx_fac_align_samp_req = 7;
  bool has_can_rx_fac_align_samp_req() const;
  private:
  bool _internal_has_can_rx_fac_align_samp_req() const;
  public:
  void clear_can_rx_fac_align_samp_req();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_align_samp_req() const;
  void set_can_rx_fac_align_samp_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_fac_align_samp_req() const;
  void _internal_set_can_rx_fac_align_samp_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 can_rx_fac_align_max_nt = 8;
  bool has_can_rx_fac_align_max_nt() const;
  private:
  bool _internal_has_can_rx_fac_align_max_nt() const;
  public:
  void clear_can_rx_fac_align_max_nt();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_align_max_nt() const;
  void set_can_rx_fac_align_max_nt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_fac_align_max_nt() const;
  void _internal_set_can_rx_fac_align_max_nt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_2Type can_rx_fac_align_cmd_2 = 9;
  bool has_can_rx_fac_align_cmd_2() const;
  private:
  bool _internal_has_can_rx_fac_align_cmd_2() const;
  public:
  void clear_can_rx_fac_align_cmd_2();
  ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type can_rx_fac_align_cmd_2() const;
  void set_can_rx_fac_align_cmd_2(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type value);
  private:
  ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type _internal_can_rx_fac_align_cmd_2() const;
  void _internal_set_can_rx_fac_align_cmd_2(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type value);
  public:

  // optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_1Type can_rx_fac_align_cmd_1 = 10;
  bool has_can_rx_fac_align_cmd_1() const;
  private:
  bool _internal_has_can_rx_fac_align_cmd_1() const;
  public:
  void clear_can_rx_fac_align_cmd_1();
  ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type can_rx_fac_align_cmd_1() const;
  void set_can_rx_fac_align_cmd_1(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type value);
  private:
  ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type _internal_can_rx_fac_align_cmd_1() const;
  void _internal_set_can_rx_fac_align_cmd_1(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Vehicle4_5f3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double can_rx_fac_tgt_range_r2m_;
  double can_rx_fac_tgt_range_m2t_;
  double can_rx_fac_tgt_range_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_tgt_mtg_space_ver_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_tgt_mtg_space_hor_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_tgt_mtg_offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_align_samp_req_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_fac_align_max_nt_;
  int can_rx_fac_align_cmd_2_;
  int can_rx_fac_align_cmd_1_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Vehicle5_5f4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Vehicle5_5f4) */ {
 public:
  Vehicle5_5f4();
  virtual ~Vehicle5_5f4();

  Vehicle5_5f4(const Vehicle5_5f4& from);
  Vehicle5_5f4(Vehicle5_5f4&& from) noexcept
    : Vehicle5_5f4() {
    *this = ::std::move(from);
  }

  inline Vehicle5_5f4& operator=(const Vehicle5_5f4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle5_5f4& operator=(Vehicle5_5f4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle5_5f4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle5_5f4* internal_default_instance() {
    return reinterpret_cast<const Vehicle5_5f4*>(
               &_Vehicle5_5f4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Vehicle5_5f4& a, Vehicle5_5f4& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle5_5f4* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle5_5f4* New() const final {
    return CreateMaybeMessage<Vehicle5_5f4>(nullptr);
  }

  Vehicle5_5f4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle5_5f4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle5_5f4& from);
  void MergeFrom(const Vehicle5_5f4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle5_5f4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Vehicle5_5f4";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Can_rx_yaw_rate_bias_shiftType;
  static constexpr Can_rx_yaw_rate_bias_shiftType CAN_RX_YAW_RATE_BIAS_SHIFT_NO_DETECT =
    Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_CAN_RX_YAW_RATE_BIAS_SHIFT_NO_DETECT;
  static constexpr Can_rx_yaw_rate_bias_shiftType CAN_RX_YAW_RATE_BIAS_SHIFT_DETECT =
    Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_CAN_RX_YAW_RATE_BIAS_SHIFT_DETECT;
  static inline bool Can_rx_yaw_rate_bias_shiftType_IsValid(int value) {
    return Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_IsValid(value);
  }
  static constexpr Can_rx_yaw_rate_bias_shiftType Can_rx_yaw_rate_bias_shiftType_MIN =
    Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Can_rx_yaw_rate_bias_shiftType_MIN;
  static constexpr Can_rx_yaw_rate_bias_shiftType Can_rx_yaw_rate_bias_shiftType_MAX =
    Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Can_rx_yaw_rate_bias_shiftType_MAX;
  static constexpr int Can_rx_yaw_rate_bias_shiftType_ARRAYSIZE =
    Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Can_rx_yaw_rate_bias_shiftType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Can_rx_yaw_rate_bias_shiftType_descriptor() {
    return Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_descriptor();
  }
  template<typename T>
  static inline const std::string& Can_rx_yaw_rate_bias_shiftType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Can_rx_yaw_rate_bias_shiftType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Can_rx_yaw_rate_bias_shiftType_Name.");
    return Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Name(enum_t_value);
  }
  static inline bool Can_rx_yaw_rate_bias_shiftType_Parse(const std::string& name,
      Can_rx_yaw_rate_bias_shiftType* value) {
    return Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCanRxSteeringGearRatioFieldNumber = 2,
    kCanRxWheelbaseFieldNumber = 3,
    kCanRxDistanceRearAxleFieldNumber = 4,
    kCanRxCwBlockageThresholdFieldNumber = 5,
    kCanRxYawRateBiasShiftFieldNumber = 1,
    kCanRxOversteerUndersteerFieldNumber = 9,
    kCanRxFunnelOffsetRightFieldNumber = 6,
    kCanRxFunnelOffsetLeftFieldNumber = 7,
    kCanRxBeamwidthVertFieldNumber = 8,
  };
  // optional double can_rx_steering_gear_ratio = 2;
  bool has_can_rx_steering_gear_ratio() const;
  private:
  bool _internal_has_can_rx_steering_gear_ratio() const;
  public:
  void clear_can_rx_steering_gear_ratio();
  double can_rx_steering_gear_ratio() const;
  void set_can_rx_steering_gear_ratio(double value);
  private:
  double _internal_can_rx_steering_gear_ratio() const;
  void _internal_set_can_rx_steering_gear_ratio(double value);
  public:

  // optional double can_rx_wheelbase = 3;
  bool has_can_rx_wheelbase() const;
  private:
  bool _internal_has_can_rx_wheelbase() const;
  public:
  void clear_can_rx_wheelbase();
  double can_rx_wheelbase() const;
  void set_can_rx_wheelbase(double value);
  private:
  double _internal_can_rx_wheelbase() const;
  void _internal_set_can_rx_wheelbase(double value);
  public:

  // optional double can_rx_distance_rear_axle = 4;
  bool has_can_rx_distance_rear_axle() const;
  private:
  bool _internal_has_can_rx_distance_rear_axle() const;
  public:
  void clear_can_rx_distance_rear_axle();
  double can_rx_distance_rear_axle() const;
  void set_can_rx_distance_rear_axle(double value);
  private:
  double _internal_can_rx_distance_rear_axle() const;
  void _internal_set_can_rx_distance_rear_axle(double value);
  public:

  // optional double can_rx_cw_blockage_threshold = 5;
  bool has_can_rx_cw_blockage_threshold() const;
  private:
  bool _internal_has_can_rx_cw_blockage_threshold() const;
  public:
  void clear_can_rx_cw_blockage_threshold();
  double can_rx_cw_blockage_threshold() const;
  void set_can_rx_cw_blockage_threshold(double value);
  private:
  double _internal_can_rx_cw_blockage_threshold() const;
  void _internal_set_can_rx_cw_blockage_threshold(double value);
  public:

  // optional .apollo.drivers.Vehicle5_5f4.Can_rx_yaw_rate_bias_shiftType can_rx_yaw_rate_bias_shift = 1;
  bool has_can_rx_yaw_rate_bias_shift() const;
  private:
  bool _internal_has_can_rx_yaw_rate_bias_shift() const;
  public:
  void clear_can_rx_yaw_rate_bias_shift();
  ::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType can_rx_yaw_rate_bias_shift() const;
  void set_can_rx_yaw_rate_bias_shift(::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType value);
  private:
  ::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType _internal_can_rx_yaw_rate_bias_shift() const;
  void _internal_set_can_rx_yaw_rate_bias_shift(::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType value);
  public:

  // optional int32 can_rx_oversteer_understeer = 9;
  bool has_can_rx_oversteer_understeer() const;
  private:
  bool _internal_has_can_rx_oversteer_understeer() const;
  public:
  void clear_can_rx_oversteer_understeer();
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_oversteer_understeer() const;
  void set_can_rx_oversteer_understeer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_rx_oversteer_understeer() const;
  void _internal_set_can_rx_oversteer_understeer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double can_rx_funnel_offset_right = 6;
  bool has_can_rx_funnel_offset_right() const;
  private:
  bool _internal_has_can_rx_funnel_offset_right() const;
  public:
  void clear_can_rx_funnel_offset_right();
  double can_rx_funnel_offset_right() const;
  void set_can_rx_funnel_offset_right(double value);
  private:
  double _internal_can_rx_funnel_offset_right() const;
  void _internal_set_can_rx_funnel_offset_right(double value);
  public:

  // optional double can_rx_funnel_offset_left = 7;
  bool has_can_rx_funnel_offset_left() const;
  private:
  bool _internal_has_can_rx_funnel_offset_left() const;
  public:
  void clear_can_rx_funnel_offset_left();
  double can_rx_funnel_offset_left() const;
  void set_can_rx_funnel_offset_left(double value);
  private:
  double _internal_can_rx_funnel_offset_left() const;
  void _internal_set_can_rx_funnel_offset_left(double value);
  public:

  // optional double can_rx_beamwidth_vert = 8;
  bool has_can_rx_beamwidth_vert() const;
  private:
  bool _internal_has_can_rx_beamwidth_vert() const;
  public:
  void clear_can_rx_beamwidth_vert();
  double can_rx_beamwidth_vert() const;
  void set_can_rx_beamwidth_vert(double value);
  private:
  double _internal_can_rx_beamwidth_vert() const;
  void _internal_set_can_rx_beamwidth_vert(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Vehicle5_5f4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double can_rx_steering_gear_ratio_;
  double can_rx_wheelbase_;
  double can_rx_distance_rear_axle_;
  double can_rx_cw_blockage_threshold_;
  int can_rx_yaw_rate_bias_shift_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_rx_oversteer_understeer_;
  double can_rx_funnel_offset_right_;
  double can_rx_funnel_offset_left_;
  double can_rx_beamwidth_vert_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class Vehicle6_5f5 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Vehicle6_5f5) */ {
 public:
  Vehicle6_5f5();
  virtual ~Vehicle6_5f5();

  Vehicle6_5f5(const Vehicle6_5f5& from);
  Vehicle6_5f5(Vehicle6_5f5&& from) noexcept
    : Vehicle6_5f5() {
    *this = ::std::move(from);
  }

  inline Vehicle6_5f5& operator=(const Vehicle6_5f5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehicle6_5f5& operator=(Vehicle6_5f5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehicle6_5f5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle6_5f5* internal_default_instance() {
    return reinterpret_cast<const Vehicle6_5f5*>(
               &_Vehicle6_5f5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Vehicle6_5f5& a, Vehicle6_5f5& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehicle6_5f5* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehicle6_5f5* New() const final {
    return CreateMaybeMessage<Vehicle6_5f5>(nullptr);
  }

  Vehicle6_5f5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehicle6_5f5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehicle6_5f5& from);
  void MergeFrom(const Vehicle6_5f5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehicle6_5f5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.Vehicle6_5f5";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanRxInnerFunnelOffsetRightFieldNumber = 1,
    kCanRxInnerFunnelOffsetLeftFieldNumber = 2,
    kCanVolvoFaMinVspeedShortFieldNumber = 4,
    kCanVolvoFaAalignEstimateFieldNumber = 5,
    kCanVolvoFaRangeMaxShortFieldNumber = 3,
  };
  // optional double can_rx_inner_funnel_offset_right = 1;
  bool has_can_rx_inner_funnel_offset_right() const;
  private:
  bool _internal_has_can_rx_inner_funnel_offset_right() const;
  public:
  void clear_can_rx_inner_funnel_offset_right();
  double can_rx_inner_funnel_offset_right() const;
  void set_can_rx_inner_funnel_offset_right(double value);
  private:
  double _internal_can_rx_inner_funnel_offset_right() const;
  void _internal_set_can_rx_inner_funnel_offset_right(double value);
  public:

  // optional double can_rx_inner_funnel_offset_left = 2;
  bool has_can_rx_inner_funnel_offset_left() const;
  private:
  bool _internal_has_can_rx_inner_funnel_offset_left() const;
  public:
  void clear_can_rx_inner_funnel_offset_left();
  double can_rx_inner_funnel_offset_left() const;
  void set_can_rx_inner_funnel_offset_left(double value);
  private:
  double _internal_can_rx_inner_funnel_offset_left() const;
  void _internal_set_can_rx_inner_funnel_offset_left(double value);
  public:

  // optional double can_volvo_fa_min_vspeed_short = 4;
  bool has_can_volvo_fa_min_vspeed_short() const;
  private:
  bool _internal_has_can_volvo_fa_min_vspeed_short() const;
  public:
  void clear_can_volvo_fa_min_vspeed_short();
  double can_volvo_fa_min_vspeed_short() const;
  void set_can_volvo_fa_min_vspeed_short(double value);
  private:
  double _internal_can_volvo_fa_min_vspeed_short() const;
  void _internal_set_can_volvo_fa_min_vspeed_short(double value);
  public:

  // optional double can_volvo_fa_aalign_estimate = 5;
  bool has_can_volvo_fa_aalign_estimate() const;
  private:
  bool _internal_has_can_volvo_fa_aalign_estimate() const;
  public:
  void clear_can_volvo_fa_aalign_estimate();
  double can_volvo_fa_aalign_estimate() const;
  void set_can_volvo_fa_aalign_estimate(double value);
  private:
  double _internal_can_volvo_fa_aalign_estimate() const;
  void _internal_set_can_volvo_fa_aalign_estimate(double value);
  public:

  // optional int32 can_volvo_fa_range_max_short = 3;
  bool has_can_volvo_fa_range_max_short() const;
  private:
  bool _internal_has_can_volvo_fa_range_max_short() const;
  public:
  void clear_can_volvo_fa_range_max_short();
  ::PROTOBUF_NAMESPACE_ID::int32 can_volvo_fa_range_max_short() const;
  void set_can_volvo_fa_range_max_short(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_can_volvo_fa_range_max_short() const;
  void _internal_set_can_volvo_fa_range_max_short(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.Vehicle6_5f5)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double can_rx_inner_funnel_offset_right_;
  double can_rx_inner_funnel_offset_left_;
  double can_volvo_fa_min_vspeed_short_;
  double can_volvo_fa_aalign_estimate_;
  ::PROTOBUF_NAMESPACE_ID::int32 can_volvo_fa_range_max_short_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// -------------------------------------------------------------------

class DelphiESR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.DelphiESR) */ {
 public:
  DelphiESR();
  virtual ~DelphiESR();

  DelphiESR(const DelphiESR& from);
  DelphiESR(DelphiESR&& from) noexcept
    : DelphiESR() {
    *this = ::std::move(from);
  }

  inline DelphiESR& operator=(const DelphiESR& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelphiESR& operator=(DelphiESR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelphiESR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelphiESR* internal_default_instance() {
    return reinterpret_cast<const DelphiESR*>(
               &_DelphiESR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DelphiESR& a, DelphiESR& b) {
    a.Swap(&b);
  }
  inline void Swap(DelphiESR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelphiESR* New() const final {
    return CreateMaybeMessage<DelphiESR>(nullptr);
  }

  DelphiESR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelphiESR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelphiESR& from);
  void MergeFrom(const DelphiESR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelphiESR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.DelphiESR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEsrTrackmotionpower540FieldNumber = 7,
    kEsrTrack01500FieldNumber = 9,
    kHeaderFieldNumber = 1,
    kEsrStatus95E8FieldNumber = 2,
    kEsrStatus65E5FieldNumber = 3,
    kEsrStatus55E4FieldNumber = 4,
    kEsrStatus34E2FieldNumber = 5,
    kEsrStatus44E3FieldNumber = 6,
    kAcmInstReq7E0FieldNumber = 8,
    kEsrValid15D0FieldNumber = 10,
    kEsrValid25D1FieldNumber = 11,
    kAcmInstResp7E4FieldNumber = 12,
    kVehicle24F1FieldNumber = 13,
    kVehicle14F0FieldNumber = 14,
    kEsrSim15C0FieldNumber = 15,
    kEsrStatus14E0FieldNumber = 16,
    kEsrStatus24E1FieldNumber = 17,
    kEsrStatus85E7FieldNumber = 18,
    kEsrStatus75E6FieldNumber = 19,
    kVehicle35F2FieldNumber = 20,
    kVehicle45F3FieldNumber = 21,
    kVehicle55F4FieldNumber = 22,
    kVehicle65F5FieldNumber = 23,
  };
  // repeated .apollo.drivers.Esr_trackmotionpower_540 esr_trackmotionpower_540 = 7;
  int esr_trackmotionpower_540_size() const;
  private:
  int _internal_esr_trackmotionpower_540_size() const;
  public:
  void clear_esr_trackmotionpower_540();
  ::apollo::drivers::Esr_trackmotionpower_540* mutable_esr_trackmotionpower_540(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540 >*
      mutable_esr_trackmotionpower_540();
  private:
  const ::apollo::drivers::Esr_trackmotionpower_540& _internal_esr_trackmotionpower_540(int index) const;
  ::apollo::drivers::Esr_trackmotionpower_540* _internal_add_esr_trackmotionpower_540();
  public:
  const ::apollo::drivers::Esr_trackmotionpower_540& esr_trackmotionpower_540(int index) const;
  ::apollo::drivers::Esr_trackmotionpower_540* add_esr_trackmotionpower_540();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540 >&
      esr_trackmotionpower_540() const;

  // repeated .apollo.drivers.Esr_track01_500 esr_track01_500 = 9;
  int esr_track01_500_size() const;
  private:
  int _internal_esr_track01_500_size() const;
  public:
  void clear_esr_track01_500();
  ::apollo::drivers::Esr_track01_500* mutable_esr_track01_500(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_track01_500 >*
      mutable_esr_track01_500();
  private:
  const ::apollo::drivers::Esr_track01_500& _internal_esr_track01_500(int index) const;
  ::apollo::drivers::Esr_track01_500* _internal_add_esr_track01_500();
  public:
  const ::apollo::drivers::Esr_track01_500& esr_track01_500(int index) const;
  ::apollo::drivers::Esr_track01_500* add_esr_track01_500();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_track01_500 >&
      esr_track01_500() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.drivers.Esr_status9_5e8 esr_status9_5e8 = 2;
  bool has_esr_status9_5e8() const;
  private:
  bool _internal_has_esr_status9_5e8() const;
  public:
  void clear_esr_status9_5e8();
  const ::apollo::drivers::Esr_status9_5e8& esr_status9_5e8() const;
  ::apollo::drivers::Esr_status9_5e8* release_esr_status9_5e8();
  ::apollo::drivers::Esr_status9_5e8* mutable_esr_status9_5e8();
  void set_allocated_esr_status9_5e8(::apollo::drivers::Esr_status9_5e8* esr_status9_5e8);
  private:
  const ::apollo::drivers::Esr_status9_5e8& _internal_esr_status9_5e8() const;
  ::apollo::drivers::Esr_status9_5e8* _internal_mutable_esr_status9_5e8();
  public:

  // optional .apollo.drivers.Esr_status6_5e5 esr_status6_5e5 = 3;
  bool has_esr_status6_5e5() const;
  private:
  bool _internal_has_esr_status6_5e5() const;
  public:
  void clear_esr_status6_5e5();
  const ::apollo::drivers::Esr_status6_5e5& esr_status6_5e5() const;
  ::apollo::drivers::Esr_status6_5e5* release_esr_status6_5e5();
  ::apollo::drivers::Esr_status6_5e5* mutable_esr_status6_5e5();
  void set_allocated_esr_status6_5e5(::apollo::drivers::Esr_status6_5e5* esr_status6_5e5);
  private:
  const ::apollo::drivers::Esr_status6_5e5& _internal_esr_status6_5e5() const;
  ::apollo::drivers::Esr_status6_5e5* _internal_mutable_esr_status6_5e5();
  public:

  // optional .apollo.drivers.Esr_status5_5e4 esr_status5_5e4 = 4;
  bool has_esr_status5_5e4() const;
  private:
  bool _internal_has_esr_status5_5e4() const;
  public:
  void clear_esr_status5_5e4();
  const ::apollo::drivers::Esr_status5_5e4& esr_status5_5e4() const;
  ::apollo::drivers::Esr_status5_5e4* release_esr_status5_5e4();
  ::apollo::drivers::Esr_status5_5e4* mutable_esr_status5_5e4();
  void set_allocated_esr_status5_5e4(::apollo::drivers::Esr_status5_5e4* esr_status5_5e4);
  private:
  const ::apollo::drivers::Esr_status5_5e4& _internal_esr_status5_5e4() const;
  ::apollo::drivers::Esr_status5_5e4* _internal_mutable_esr_status5_5e4();
  public:

  // optional .apollo.drivers.Esr_status3_4e2 esr_status3_4e2 = 5;
  bool has_esr_status3_4e2() const;
  private:
  bool _internal_has_esr_status3_4e2() const;
  public:
  void clear_esr_status3_4e2();
  const ::apollo::drivers::Esr_status3_4e2& esr_status3_4e2() const;
  ::apollo::drivers::Esr_status3_4e2* release_esr_status3_4e2();
  ::apollo::drivers::Esr_status3_4e2* mutable_esr_status3_4e2();
  void set_allocated_esr_status3_4e2(::apollo::drivers::Esr_status3_4e2* esr_status3_4e2);
  private:
  const ::apollo::drivers::Esr_status3_4e2& _internal_esr_status3_4e2() const;
  ::apollo::drivers::Esr_status3_4e2* _internal_mutable_esr_status3_4e2();
  public:

  // optional .apollo.drivers.Esr_status4_4e3 esr_status4_4e3 = 6;
  bool has_esr_status4_4e3() const;
  private:
  bool _internal_has_esr_status4_4e3() const;
  public:
  void clear_esr_status4_4e3();
  const ::apollo::drivers::Esr_status4_4e3& esr_status4_4e3() const;
  ::apollo::drivers::Esr_status4_4e3* release_esr_status4_4e3();
  ::apollo::drivers::Esr_status4_4e3* mutable_esr_status4_4e3();
  void set_allocated_esr_status4_4e3(::apollo::drivers::Esr_status4_4e3* esr_status4_4e3);
  private:
  const ::apollo::drivers::Esr_status4_4e3& _internal_esr_status4_4e3() const;
  ::apollo::drivers::Esr_status4_4e3* _internal_mutable_esr_status4_4e3();
  public:

  // optional .apollo.drivers.Acm_inst_req_7e0 acm_inst_req_7e0 = 8;
  bool has_acm_inst_req_7e0() const;
  private:
  bool _internal_has_acm_inst_req_7e0() const;
  public:
  void clear_acm_inst_req_7e0();
  const ::apollo::drivers::Acm_inst_req_7e0& acm_inst_req_7e0() const;
  ::apollo::drivers::Acm_inst_req_7e0* release_acm_inst_req_7e0();
  ::apollo::drivers::Acm_inst_req_7e0* mutable_acm_inst_req_7e0();
  void set_allocated_acm_inst_req_7e0(::apollo::drivers::Acm_inst_req_7e0* acm_inst_req_7e0);
  private:
  const ::apollo::drivers::Acm_inst_req_7e0& _internal_acm_inst_req_7e0() const;
  ::apollo::drivers::Acm_inst_req_7e0* _internal_mutable_acm_inst_req_7e0();
  public:

  // optional .apollo.drivers.Esr_valid1_5d0 esr_valid1_5d0 = 10;
  bool has_esr_valid1_5d0() const;
  private:
  bool _internal_has_esr_valid1_5d0() const;
  public:
  void clear_esr_valid1_5d0();
  const ::apollo::drivers::Esr_valid1_5d0& esr_valid1_5d0() const;
  ::apollo::drivers::Esr_valid1_5d0* release_esr_valid1_5d0();
  ::apollo::drivers::Esr_valid1_5d0* mutable_esr_valid1_5d0();
  void set_allocated_esr_valid1_5d0(::apollo::drivers::Esr_valid1_5d0* esr_valid1_5d0);
  private:
  const ::apollo::drivers::Esr_valid1_5d0& _internal_esr_valid1_5d0() const;
  ::apollo::drivers::Esr_valid1_5d0* _internal_mutable_esr_valid1_5d0();
  public:

  // optional .apollo.drivers.Esr_valid2_5d1 esr_valid2_5d1 = 11;
  bool has_esr_valid2_5d1() const;
  private:
  bool _internal_has_esr_valid2_5d1() const;
  public:
  void clear_esr_valid2_5d1();
  const ::apollo::drivers::Esr_valid2_5d1& esr_valid2_5d1() const;
  ::apollo::drivers::Esr_valid2_5d1* release_esr_valid2_5d1();
  ::apollo::drivers::Esr_valid2_5d1* mutable_esr_valid2_5d1();
  void set_allocated_esr_valid2_5d1(::apollo::drivers::Esr_valid2_5d1* esr_valid2_5d1);
  private:
  const ::apollo::drivers::Esr_valid2_5d1& _internal_esr_valid2_5d1() const;
  ::apollo::drivers::Esr_valid2_5d1* _internal_mutable_esr_valid2_5d1();
  public:

  // optional .apollo.drivers.Acm_inst_resp_7e4 acm_inst_resp_7e4 = 12;
  bool has_acm_inst_resp_7e4() const;
  private:
  bool _internal_has_acm_inst_resp_7e4() const;
  public:
  void clear_acm_inst_resp_7e4();
  const ::apollo::drivers::Acm_inst_resp_7e4& acm_inst_resp_7e4() const;
  ::apollo::drivers::Acm_inst_resp_7e4* release_acm_inst_resp_7e4();
  ::apollo::drivers::Acm_inst_resp_7e4* mutable_acm_inst_resp_7e4();
  void set_allocated_acm_inst_resp_7e4(::apollo::drivers::Acm_inst_resp_7e4* acm_inst_resp_7e4);
  private:
  const ::apollo::drivers::Acm_inst_resp_7e4& _internal_acm_inst_resp_7e4() const;
  ::apollo::drivers::Acm_inst_resp_7e4* _internal_mutable_acm_inst_resp_7e4();
  public:

  // optional .apollo.drivers.Vehicle2_4f1 vehicle2_4f1 = 13;
  bool has_vehicle2_4f1() const;
  private:
  bool _internal_has_vehicle2_4f1() const;
  public:
  void clear_vehicle2_4f1();
  const ::apollo::drivers::Vehicle2_4f1& vehicle2_4f1() const;
  ::apollo::drivers::Vehicle2_4f1* release_vehicle2_4f1();
  ::apollo::drivers::Vehicle2_4f1* mutable_vehicle2_4f1();
  void set_allocated_vehicle2_4f1(::apollo::drivers::Vehicle2_4f1* vehicle2_4f1);
  private:
  const ::apollo::drivers::Vehicle2_4f1& _internal_vehicle2_4f1() const;
  ::apollo::drivers::Vehicle2_4f1* _internal_mutable_vehicle2_4f1();
  public:

  // optional .apollo.drivers.Vehicle1_4f0 vehicle1_4f0 = 14;
  bool has_vehicle1_4f0() const;
  private:
  bool _internal_has_vehicle1_4f0() const;
  public:
  void clear_vehicle1_4f0();
  const ::apollo::drivers::Vehicle1_4f0& vehicle1_4f0() const;
  ::apollo::drivers::Vehicle1_4f0* release_vehicle1_4f0();
  ::apollo::drivers::Vehicle1_4f0* mutable_vehicle1_4f0();
  void set_allocated_vehicle1_4f0(::apollo::drivers::Vehicle1_4f0* vehicle1_4f0);
  private:
  const ::apollo::drivers::Vehicle1_4f0& _internal_vehicle1_4f0() const;
  ::apollo::drivers::Vehicle1_4f0* _internal_mutable_vehicle1_4f0();
  public:

  // optional .apollo.drivers.Esr_sim1_5c0 esr_sim1_5c0 = 15;
  bool has_esr_sim1_5c0() const;
  private:
  bool _internal_has_esr_sim1_5c0() const;
  public:
  void clear_esr_sim1_5c0();
  const ::apollo::drivers::Esr_sim1_5c0& esr_sim1_5c0() const;
  ::apollo::drivers::Esr_sim1_5c0* release_esr_sim1_5c0();
  ::apollo::drivers::Esr_sim1_5c0* mutable_esr_sim1_5c0();
  void set_allocated_esr_sim1_5c0(::apollo::drivers::Esr_sim1_5c0* esr_sim1_5c0);
  private:
  const ::apollo::drivers::Esr_sim1_5c0& _internal_esr_sim1_5c0() const;
  ::apollo::drivers::Esr_sim1_5c0* _internal_mutable_esr_sim1_5c0();
  public:

  // optional .apollo.drivers.Esr_status1_4e0 esr_status1_4e0 = 16;
  bool has_esr_status1_4e0() const;
  private:
  bool _internal_has_esr_status1_4e0() const;
  public:
  void clear_esr_status1_4e0();
  const ::apollo::drivers::Esr_status1_4e0& esr_status1_4e0() const;
  ::apollo::drivers::Esr_status1_4e0* release_esr_status1_4e0();
  ::apollo::drivers::Esr_status1_4e0* mutable_esr_status1_4e0();
  void set_allocated_esr_status1_4e0(::apollo::drivers::Esr_status1_4e0* esr_status1_4e0);
  private:
  const ::apollo::drivers::Esr_status1_4e0& _internal_esr_status1_4e0() const;
  ::apollo::drivers::Esr_status1_4e0* _internal_mutable_esr_status1_4e0();
  public:

  // optional .apollo.drivers.Esr_status2_4e1 esr_status2_4e1 = 17;
  bool has_esr_status2_4e1() const;
  private:
  bool _internal_has_esr_status2_4e1() const;
  public:
  void clear_esr_status2_4e1();
  const ::apollo::drivers::Esr_status2_4e1& esr_status2_4e1() const;
  ::apollo::drivers::Esr_status2_4e1* release_esr_status2_4e1();
  ::apollo::drivers::Esr_status2_4e1* mutable_esr_status2_4e1();
  void set_allocated_esr_status2_4e1(::apollo::drivers::Esr_status2_4e1* esr_status2_4e1);
  private:
  const ::apollo::drivers::Esr_status2_4e1& _internal_esr_status2_4e1() const;
  ::apollo::drivers::Esr_status2_4e1* _internal_mutable_esr_status2_4e1();
  public:

  // optional .apollo.drivers.Esr_status8_5e7 esr_status8_5e7 = 18;
  bool has_esr_status8_5e7() const;
  private:
  bool _internal_has_esr_status8_5e7() const;
  public:
  void clear_esr_status8_5e7();
  const ::apollo::drivers::Esr_status8_5e7& esr_status8_5e7() const;
  ::apollo::drivers::Esr_status8_5e7* release_esr_status8_5e7();
  ::apollo::drivers::Esr_status8_5e7* mutable_esr_status8_5e7();
  void set_allocated_esr_status8_5e7(::apollo::drivers::Esr_status8_5e7* esr_status8_5e7);
  private:
  const ::apollo::drivers::Esr_status8_5e7& _internal_esr_status8_5e7() const;
  ::apollo::drivers::Esr_status8_5e7* _internal_mutable_esr_status8_5e7();
  public:

  // optional .apollo.drivers.Esr_status7_5e6 esr_status7_5e6 = 19;
  bool has_esr_status7_5e6() const;
  private:
  bool _internal_has_esr_status7_5e6() const;
  public:
  void clear_esr_status7_5e6();
  const ::apollo::drivers::Esr_status7_5e6& esr_status7_5e6() const;
  ::apollo::drivers::Esr_status7_5e6* release_esr_status7_5e6();
  ::apollo::drivers::Esr_status7_5e6* mutable_esr_status7_5e6();
  void set_allocated_esr_status7_5e6(::apollo::drivers::Esr_status7_5e6* esr_status7_5e6);
  private:
  const ::apollo::drivers::Esr_status7_5e6& _internal_esr_status7_5e6() const;
  ::apollo::drivers::Esr_status7_5e6* _internal_mutable_esr_status7_5e6();
  public:

  // optional .apollo.drivers.Vehicle3_5f2 vehicle3_5f2 = 20;
  bool has_vehicle3_5f2() const;
  private:
  bool _internal_has_vehicle3_5f2() const;
  public:
  void clear_vehicle3_5f2();
  const ::apollo::drivers::Vehicle3_5f2& vehicle3_5f2() const;
  ::apollo::drivers::Vehicle3_5f2* release_vehicle3_5f2();
  ::apollo::drivers::Vehicle3_5f2* mutable_vehicle3_5f2();
  void set_allocated_vehicle3_5f2(::apollo::drivers::Vehicle3_5f2* vehicle3_5f2);
  private:
  const ::apollo::drivers::Vehicle3_5f2& _internal_vehicle3_5f2() const;
  ::apollo::drivers::Vehicle3_5f2* _internal_mutable_vehicle3_5f2();
  public:

  // optional .apollo.drivers.Vehicle4_5f3 vehicle4_5f3 = 21;
  bool has_vehicle4_5f3() const;
  private:
  bool _internal_has_vehicle4_5f3() const;
  public:
  void clear_vehicle4_5f3();
  const ::apollo::drivers::Vehicle4_5f3& vehicle4_5f3() const;
  ::apollo::drivers::Vehicle4_5f3* release_vehicle4_5f3();
  ::apollo::drivers::Vehicle4_5f3* mutable_vehicle4_5f3();
  void set_allocated_vehicle4_5f3(::apollo::drivers::Vehicle4_5f3* vehicle4_5f3);
  private:
  const ::apollo::drivers::Vehicle4_5f3& _internal_vehicle4_5f3() const;
  ::apollo::drivers::Vehicle4_5f3* _internal_mutable_vehicle4_5f3();
  public:

  // optional .apollo.drivers.Vehicle5_5f4 vehicle5_5f4 = 22;
  bool has_vehicle5_5f4() const;
  private:
  bool _internal_has_vehicle5_5f4() const;
  public:
  void clear_vehicle5_5f4();
  const ::apollo::drivers::Vehicle5_5f4& vehicle5_5f4() const;
  ::apollo::drivers::Vehicle5_5f4* release_vehicle5_5f4();
  ::apollo::drivers::Vehicle5_5f4* mutable_vehicle5_5f4();
  void set_allocated_vehicle5_5f4(::apollo::drivers::Vehicle5_5f4* vehicle5_5f4);
  private:
  const ::apollo::drivers::Vehicle5_5f4& _internal_vehicle5_5f4() const;
  ::apollo::drivers::Vehicle5_5f4* _internal_mutable_vehicle5_5f4();
  public:

  // optional .apollo.drivers.Vehicle6_5f5 vehicle6_5f5 = 23;
  bool has_vehicle6_5f5() const;
  private:
  bool _internal_has_vehicle6_5f5() const;
  public:
  void clear_vehicle6_5f5();
  const ::apollo::drivers::Vehicle6_5f5& vehicle6_5f5() const;
  ::apollo::drivers::Vehicle6_5f5* release_vehicle6_5f5();
  ::apollo::drivers::Vehicle6_5f5* mutable_vehicle6_5f5();
  void set_allocated_vehicle6_5f5(::apollo::drivers::Vehicle6_5f5* vehicle6_5f5);
  private:
  const ::apollo::drivers::Vehicle6_5f5& _internal_vehicle6_5f5() const;
  ::apollo::drivers::Vehicle6_5f5* _internal_mutable_vehicle6_5f5();
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.DelphiESR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540 > esr_trackmotionpower_540_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_track01_500 > esr_track01_500_;
  ::apollo::common::Header* header_;
  ::apollo::drivers::Esr_status9_5e8* esr_status9_5e8_;
  ::apollo::drivers::Esr_status6_5e5* esr_status6_5e5_;
  ::apollo::drivers::Esr_status5_5e4* esr_status5_5e4_;
  ::apollo::drivers::Esr_status3_4e2* esr_status3_4e2_;
  ::apollo::drivers::Esr_status4_4e3* esr_status4_4e3_;
  ::apollo::drivers::Acm_inst_req_7e0* acm_inst_req_7e0_;
  ::apollo::drivers::Esr_valid1_5d0* esr_valid1_5d0_;
  ::apollo::drivers::Esr_valid2_5d1* esr_valid2_5d1_;
  ::apollo::drivers::Acm_inst_resp_7e4* acm_inst_resp_7e4_;
  ::apollo::drivers::Vehicle2_4f1* vehicle2_4f1_;
  ::apollo::drivers::Vehicle1_4f0* vehicle1_4f0_;
  ::apollo::drivers::Esr_sim1_5c0* esr_sim1_5c0_;
  ::apollo::drivers::Esr_status1_4e0* esr_status1_4e0_;
  ::apollo::drivers::Esr_status2_4e1* esr_status2_4e1_;
  ::apollo::drivers::Esr_status8_5e7* esr_status8_5e7_;
  ::apollo::drivers::Esr_status7_5e6* esr_status7_5e6_;
  ::apollo::drivers::Vehicle3_5f2* vehicle3_5f2_;
  ::apollo::drivers::Vehicle4_5f3* vehicle4_5f3_;
  ::apollo::drivers::Vehicle5_5f4* vehicle5_5f4_;
  ::apollo::drivers::Vehicle6_5f5* vehicle6_5f5_;
  friend struct ::TableStruct_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Esr_status9_5e8

// optional int32 can_tx_path_id_acc_3 = 1;
inline bool Esr_status9_5e8::_internal_has_can_tx_path_id_acc_3() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status9_5e8::has_can_tx_path_id_acc_3() const {
  return _internal_has_can_tx_path_id_acc_3();
}
inline void Esr_status9_5e8::clear_can_tx_path_id_acc_3() {
  can_tx_path_id_acc_3_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::_internal_can_tx_path_id_acc_3() const {
  return can_tx_path_id_acc_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::can_tx_path_id_acc_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_path_id_acc_3)
  return _internal_can_tx_path_id_acc_3();
}
inline void Esr_status9_5e8::_internal_set_can_tx_path_id_acc_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_path_id_acc_3_ = value;
}
inline void Esr_status9_5e8::set_can_tx_path_id_acc_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_path_id_acc_3(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_path_id_acc_3)
}

// optional int32 can_tx_path_id_acc_2 = 2;
inline bool Esr_status9_5e8::_internal_has_can_tx_path_id_acc_2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status9_5e8::has_can_tx_path_id_acc_2() const {
  return _internal_has_can_tx_path_id_acc_2();
}
inline void Esr_status9_5e8::clear_can_tx_path_id_acc_2() {
  can_tx_path_id_acc_2_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::_internal_can_tx_path_id_acc_2() const {
  return can_tx_path_id_acc_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::can_tx_path_id_acc_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_path_id_acc_2)
  return _internal_can_tx_path_id_acc_2();
}
inline void Esr_status9_5e8::_internal_set_can_tx_path_id_acc_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_path_id_acc_2_ = value;
}
inline void Esr_status9_5e8::set_can_tx_path_id_acc_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_path_id_acc_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_path_id_acc_2)
}

// optional double can_tx_filtered_xohp_acc_cipv = 3;
inline bool Esr_status9_5e8::_internal_has_can_tx_filtered_xohp_acc_cipv() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status9_5e8::has_can_tx_filtered_xohp_acc_cipv() const {
  return _internal_has_can_tx_filtered_xohp_acc_cipv();
}
inline void Esr_status9_5e8::clear_can_tx_filtered_xohp_acc_cipv() {
  can_tx_filtered_xohp_acc_cipv_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Esr_status9_5e8::_internal_can_tx_filtered_xohp_acc_cipv() const {
  return can_tx_filtered_xohp_acc_cipv_;
}
inline double Esr_status9_5e8::can_tx_filtered_xohp_acc_cipv() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_filtered_xohp_acc_cipv)
  return _internal_can_tx_filtered_xohp_acc_cipv();
}
inline void Esr_status9_5e8::_internal_set_can_tx_filtered_xohp_acc_cipv(double value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_filtered_xohp_acc_cipv_ = value;
}
inline void Esr_status9_5e8::set_can_tx_filtered_xohp_acc_cipv(double value) {
  _internal_set_can_tx_filtered_xohp_acc_cipv(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_filtered_xohp_acc_cipv)
}

// optional int32 can_tx_water_spray_target_id = 4;
inline bool Esr_status9_5e8::_internal_has_can_tx_water_spray_target_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status9_5e8::has_can_tx_water_spray_target_id() const {
  return _internal_has_can_tx_water_spray_target_id();
}
inline void Esr_status9_5e8::clear_can_tx_water_spray_target_id() {
  can_tx_water_spray_target_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::_internal_can_tx_water_spray_target_id() const {
  return can_tx_water_spray_target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::can_tx_water_spray_target_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_water_spray_target_id)
  return _internal_can_tx_water_spray_target_id();
}
inline void Esr_status9_5e8::_internal_set_can_tx_water_spray_target_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_water_spray_target_id_ = value;
}
inline void Esr_status9_5e8::set_can_tx_water_spray_target_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_water_spray_target_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_water_spray_target_id)
}

// optional int32 can_tx_serial_num_3rd_byte = 5;
inline bool Esr_status9_5e8::_internal_has_can_tx_serial_num_3rd_byte() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status9_5e8::has_can_tx_serial_num_3rd_byte() const {
  return _internal_has_can_tx_serial_num_3rd_byte();
}
inline void Esr_status9_5e8::clear_can_tx_serial_num_3rd_byte() {
  can_tx_serial_num_3rd_byte_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::_internal_can_tx_serial_num_3rd_byte() const {
  return can_tx_serial_num_3rd_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::can_tx_serial_num_3rd_byte() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_serial_num_3rd_byte)
  return _internal_can_tx_serial_num_3rd_byte();
}
inline void Esr_status9_5e8::_internal_set_can_tx_serial_num_3rd_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_serial_num_3rd_byte_ = value;
}
inline void Esr_status9_5e8::set_can_tx_serial_num_3rd_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_serial_num_3rd_byte(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_serial_num_3rd_byte)
}

// optional double can_tx_sideslip_angle = 6;
inline bool Esr_status9_5e8::_internal_has_can_tx_sideslip_angle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_status9_5e8::has_can_tx_sideslip_angle() const {
  return _internal_has_can_tx_sideslip_angle();
}
inline void Esr_status9_5e8::clear_can_tx_sideslip_angle() {
  can_tx_sideslip_angle_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Esr_status9_5e8::_internal_can_tx_sideslip_angle() const {
  return can_tx_sideslip_angle_;
}
inline double Esr_status9_5e8::can_tx_sideslip_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_sideslip_angle)
  return _internal_can_tx_sideslip_angle();
}
inline void Esr_status9_5e8::_internal_set_can_tx_sideslip_angle(double value) {
  _has_bits_[0] |= 0x00000020u;
  can_tx_sideslip_angle_ = value;
}
inline void Esr_status9_5e8::set_can_tx_sideslip_angle(double value) {
  _internal_set_can_tx_sideslip_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_sideslip_angle)
}

// optional int32 can_tx_avg_pwr_cwblkg = 7;
inline bool Esr_status9_5e8::_internal_has_can_tx_avg_pwr_cwblkg() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_status9_5e8::has_can_tx_avg_pwr_cwblkg() const {
  return _internal_has_can_tx_avg_pwr_cwblkg();
}
inline void Esr_status9_5e8::clear_can_tx_avg_pwr_cwblkg() {
  can_tx_avg_pwr_cwblkg_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::_internal_can_tx_avg_pwr_cwblkg() const {
  return can_tx_avg_pwr_cwblkg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status9_5e8::can_tx_avg_pwr_cwblkg() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status9_5e8.can_tx_avg_pwr_cwblkg)
  return _internal_can_tx_avg_pwr_cwblkg();
}
inline void Esr_status9_5e8::_internal_set_can_tx_avg_pwr_cwblkg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  can_tx_avg_pwr_cwblkg_ = value;
}
inline void Esr_status9_5e8::set_can_tx_avg_pwr_cwblkg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_avg_pwr_cwblkg(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status9_5e8.can_tx_avg_pwr_cwblkg)
}

// -------------------------------------------------------------------

// Esr_status6_5e5

// optional int32 can_tx_sw_version_dsp_3rd_byte = 1;
inline bool Esr_status6_5e5::_internal_has_can_tx_sw_version_dsp_3rd_byte() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_sw_version_dsp_3rd_byte() const {
  return _internal_has_can_tx_sw_version_dsp_3rd_byte();
}
inline void Esr_status6_5e5::clear_can_tx_sw_version_dsp_3rd_byte() {
  can_tx_sw_version_dsp_3rd_byte_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::_internal_can_tx_sw_version_dsp_3rd_byte() const {
  return can_tx_sw_version_dsp_3rd_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::can_tx_sw_version_dsp_3rd_byte() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_sw_version_dsp_3rd_byte)
  return _internal_can_tx_sw_version_dsp_3rd_byte();
}
inline void Esr_status6_5e5::_internal_set_can_tx_sw_version_dsp_3rd_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_sw_version_dsp_3rd_byte_ = value;
}
inline void Esr_status6_5e5::set_can_tx_sw_version_dsp_3rd_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_sw_version_dsp_3rd_byte(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_sw_version_dsp_3rd_byte)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_vertical_align_updatedType can_tx_vertical_align_updated = 2;
inline bool Esr_status6_5e5::_internal_has_can_tx_vertical_align_updated() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_vertical_align_updated() const {
  return _internal_has_can_tx_vertical_align_updated();
}
inline void Esr_status6_5e5::clear_can_tx_vertical_align_updated() {
  can_tx_vertical_align_updated_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::_internal_can_tx_vertical_align_updated() const {
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType >(can_tx_vertical_align_updated_);
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType Esr_status6_5e5::can_tx_vertical_align_updated() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_vertical_align_updated)
  return _internal_can_tx_vertical_align_updated();
}
inline void Esr_status6_5e5::_internal_set_can_tx_vertical_align_updated(::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  can_tx_vertical_align_updated_ = value;
}
inline void Esr_status6_5e5::set_can_tx_vertical_align_updated(::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType value) {
  _internal_set_can_tx_vertical_align_updated(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_vertical_align_updated)
}

// optional double can_tx_vertical_misalignment = 3;
inline bool Esr_status6_5e5::_internal_has_can_tx_vertical_misalignment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_vertical_misalignment() const {
  return _internal_has_can_tx_vertical_misalignment();
}
inline void Esr_status6_5e5::clear_can_tx_vertical_misalignment() {
  can_tx_vertical_misalignment_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Esr_status6_5e5::_internal_can_tx_vertical_misalignment() const {
  return can_tx_vertical_misalignment_;
}
inline double Esr_status6_5e5::can_tx_vertical_misalignment() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_vertical_misalignment)
  return _internal_can_tx_vertical_misalignment();
}
inline void Esr_status6_5e5::_internal_set_can_tx_vertical_misalignment(double value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_vertical_misalignment_ = value;
}
inline void Esr_status6_5e5::set_can_tx_vertical_misalignment(double value) {
  _internal_set_can_tx_vertical_misalignment(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_vertical_misalignment)
}

// optional int32 can_tx_serv_align_updates_done = 4;
inline bool Esr_status6_5e5::_internal_has_can_tx_serv_align_updates_done() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_serv_align_updates_done() const {
  return _internal_has_can_tx_serv_align_updates_done();
}
inline void Esr_status6_5e5::clear_can_tx_serv_align_updates_done() {
  can_tx_serv_align_updates_done_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::_internal_can_tx_serv_align_updates_done() const {
  return can_tx_serv_align_updates_done_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::can_tx_serv_align_updates_done() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_serv_align_updates_done)
  return _internal_can_tx_serv_align_updates_done();
}
inline void Esr_status6_5e5::_internal_set_can_tx_serv_align_updates_done(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_serv_align_updates_done_ = value;
}
inline void Esr_status6_5e5::set_can_tx_serv_align_updates_done(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_serv_align_updates_done(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_serv_align_updates_done)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_found_targetType can_tx_found_target = 5;
inline bool Esr_status6_5e5::_internal_has_can_tx_found_target() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_found_target() const {
  return _internal_has_can_tx_found_target();
}
inline void Esr_status6_5e5::clear_can_tx_found_target() {
  can_tx_found_target_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::_internal_can_tx_found_target() const {
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType >(can_tx_found_target_);
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType Esr_status6_5e5::can_tx_found_target() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_found_target)
  return _internal_can_tx_found_target();
}
inline void Esr_status6_5e5::_internal_set_can_tx_found_target(::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  can_tx_found_target_ = value;
}
inline void Esr_status6_5e5::set_can_tx_found_target(::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType value) {
  _internal_set_can_tx_found_target(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_found_target)
}

// optional double can_tx_factory_misalignment = 6;
inline bool Esr_status6_5e5::_internal_has_can_tx_factory_misalignment() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_factory_misalignment() const {
  return _internal_has_can_tx_factory_misalignment();
}
inline void Esr_status6_5e5::clear_can_tx_factory_misalignment() {
  can_tx_factory_misalignment_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Esr_status6_5e5::_internal_can_tx_factory_misalignment() const {
  return can_tx_factory_misalignment_;
}
inline double Esr_status6_5e5::can_tx_factory_misalignment() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_factory_misalignment)
  return _internal_can_tx_factory_misalignment();
}
inline void Esr_status6_5e5::_internal_set_can_tx_factory_misalignment(double value) {
  _has_bits_[0] |= 0x00000020u;
  can_tx_factory_misalignment_ = value;
}
inline void Esr_status6_5e5::set_can_tx_factory_misalignment(double value) {
  _internal_set_can_tx_factory_misalignment(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_factory_misalignment)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_2Type can_tx_factory_align_status_2 = 7;
inline bool Esr_status6_5e5::_internal_has_can_tx_factory_align_status_2() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_factory_align_status_2() const {
  return _internal_has_can_tx_factory_align_status_2();
}
inline void Esr_status6_5e5::clear_can_tx_factory_align_status_2() {
  can_tx_factory_align_status_2_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::_internal_can_tx_factory_align_status_2() const {
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type >(can_tx_factory_align_status_2_);
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type Esr_status6_5e5::can_tx_factory_align_status_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_factory_align_status_2)
  return _internal_can_tx_factory_align_status_2();
}
inline void Esr_status6_5e5::_internal_set_can_tx_factory_align_status_2(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  can_tx_factory_align_status_2_ = value;
}
inline void Esr_status6_5e5::set_can_tx_factory_align_status_2(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type value) {
  _internal_set_can_tx_factory_align_status_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_factory_align_status_2)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_factory_align_status_1Type can_tx_factory_align_status_1 = 8;
inline bool Esr_status6_5e5::_internal_has_can_tx_factory_align_status_1() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_factory_align_status_1() const {
  return _internal_has_can_tx_factory_align_status_1();
}
inline void Esr_status6_5e5::clear_can_tx_factory_align_status_1() {
  can_tx_factory_align_status_1_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::_internal_can_tx_factory_align_status_1() const {
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type >(can_tx_factory_align_status_1_);
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type Esr_status6_5e5::can_tx_factory_align_status_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_factory_align_status_1)
  return _internal_can_tx_factory_align_status_1();
}
inline void Esr_status6_5e5::_internal_set_can_tx_factory_align_status_1(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  can_tx_factory_align_status_1_ = value;
}
inline void Esr_status6_5e5::set_can_tx_factory_align_status_1(::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type value) {
  _internal_set_can_tx_factory_align_status_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_factory_align_status_1)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_recommend_unconvergeType can_tx_recommend_unconverge = 9;
inline bool Esr_status6_5e5::_internal_has_can_tx_recommend_unconverge() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_recommend_unconverge() const {
  return _internal_has_can_tx_recommend_unconverge();
}
inline void Esr_status6_5e5::clear_can_tx_recommend_unconverge() {
  can_tx_recommend_unconverge_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::_internal_can_tx_recommend_unconverge() const {
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType >(can_tx_recommend_unconverge_);
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType Esr_status6_5e5::can_tx_recommend_unconverge() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_recommend_unconverge)
  return _internal_can_tx_recommend_unconverge();
}
inline void Esr_status6_5e5::_internal_set_can_tx_recommend_unconverge(::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  can_tx_recommend_unconverge_ = value;
}
inline void Esr_status6_5e5::set_can_tx_recommend_unconverge(::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType value) {
  _internal_set_can_tx_recommend_unconverge(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_recommend_unconverge)
}

// optional int32 can_tx_wave_diff_a2d = 10;
inline bool Esr_status6_5e5::_internal_has_can_tx_wave_diff_a2d() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_wave_diff_a2d() const {
  return _internal_has_can_tx_wave_diff_a2d();
}
inline void Esr_status6_5e5::clear_can_tx_wave_diff_a2d() {
  can_tx_wave_diff_a2d_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::_internal_can_tx_wave_diff_a2d() const {
  return can_tx_wave_diff_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::can_tx_wave_diff_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_wave_diff_a2d)
  return _internal_can_tx_wave_diff_a2d();
}
inline void Esr_status6_5e5::_internal_set_can_tx_wave_diff_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  can_tx_wave_diff_a2d_ = value;
}
inline void Esr_status6_5e5::set_can_tx_wave_diff_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_wave_diff_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_wave_diff_a2d)
}

// optional .apollo.drivers.Esr_status6_5e5.Can_tx_system_power_modeType can_tx_system_power_mode = 11;
inline bool Esr_status6_5e5::_internal_has_can_tx_system_power_mode() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_system_power_mode() const {
  return _internal_has_can_tx_system_power_mode();
}
inline void Esr_status6_5e5::clear_can_tx_system_power_mode() {
  can_tx_system_power_mode_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::_internal_can_tx_system_power_mode() const {
  return static_cast< ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType >(can_tx_system_power_mode_);
}
inline ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType Esr_status6_5e5::can_tx_system_power_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_system_power_mode)
  return _internal_can_tx_system_power_mode();
}
inline void Esr_status6_5e5::_internal_set_can_tx_system_power_mode(::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType value) {
  assert(::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  can_tx_system_power_mode_ = value;
}
inline void Esr_status6_5e5::set_can_tx_system_power_mode(::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType value) {
  _internal_set_can_tx_system_power_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_system_power_mode)
}

// optional int32 can_tx_supply_n5v_a2d = 12;
inline bool Esr_status6_5e5::_internal_has_can_tx_supply_n5v_a2d() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_supply_n5v_a2d() const {
  return _internal_has_can_tx_supply_n5v_a2d();
}
inline void Esr_status6_5e5::clear_can_tx_supply_n5v_a2d() {
  can_tx_supply_n5v_a2d_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::_internal_can_tx_supply_n5v_a2d() const {
  return can_tx_supply_n5v_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::can_tx_supply_n5v_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_supply_n5v_a2d)
  return _internal_can_tx_supply_n5v_a2d();
}
inline void Esr_status6_5e5::_internal_set_can_tx_supply_n5v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  can_tx_supply_n5v_a2d_ = value;
}
inline void Esr_status6_5e5::set_can_tx_supply_n5v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_supply_n5v_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_supply_n5v_a2d)
}

// optional int32 can_tx_supply_1p8v_a2d = 13;
inline bool Esr_status6_5e5::_internal_has_can_tx_supply_1p8v_a2d() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Esr_status6_5e5::has_can_tx_supply_1p8v_a2d() const {
  return _internal_has_can_tx_supply_1p8v_a2d();
}
inline void Esr_status6_5e5::clear_can_tx_supply_1p8v_a2d() {
  can_tx_supply_1p8v_a2d_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::_internal_can_tx_supply_1p8v_a2d() const {
  return can_tx_supply_1p8v_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status6_5e5::can_tx_supply_1p8v_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status6_5e5.can_tx_supply_1p8v_a2d)
  return _internal_can_tx_supply_1p8v_a2d();
}
inline void Esr_status6_5e5::_internal_set_can_tx_supply_1p8v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  can_tx_supply_1p8v_a2d_ = value;
}
inline void Esr_status6_5e5::set_can_tx_supply_1p8v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_supply_1p8v_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status6_5e5.can_tx_supply_1p8v_a2d)
}

// -------------------------------------------------------------------

// Esr_status5_5e4

// optional int32 can_tx_supply_10v_a2d = 1;
inline bool Esr_status5_5e4::_internal_has_can_tx_supply_10v_a2d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status5_5e4::has_can_tx_supply_10v_a2d() const {
  return _internal_has_can_tx_supply_10v_a2d();
}
inline void Esr_status5_5e4::clear_can_tx_supply_10v_a2d() {
  can_tx_supply_10v_a2d_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::_internal_can_tx_supply_10v_a2d() const {
  return can_tx_supply_10v_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::can_tx_supply_10v_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_supply_10v_a2d)
  return _internal_can_tx_supply_10v_a2d();
}
inline void Esr_status5_5e4::_internal_set_can_tx_supply_10v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_supply_10v_a2d_ = value;
}
inline void Esr_status5_5e4::set_can_tx_supply_10v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_supply_10v_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_supply_10v_a2d)
}

// optional int32 can_tx_temp2_a2d = 2;
inline bool Esr_status5_5e4::_internal_has_can_tx_temp2_a2d() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status5_5e4::has_can_tx_temp2_a2d() const {
  return _internal_has_can_tx_temp2_a2d();
}
inline void Esr_status5_5e4::clear_can_tx_temp2_a2d() {
  can_tx_temp2_a2d_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::_internal_can_tx_temp2_a2d() const {
  return can_tx_temp2_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::can_tx_temp2_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_temp2_a2d)
  return _internal_can_tx_temp2_a2d();
}
inline void Esr_status5_5e4::_internal_set_can_tx_temp2_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_temp2_a2d_ = value;
}
inline void Esr_status5_5e4::set_can_tx_temp2_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_temp2_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_temp2_a2d)
}

// optional int32 can_tx_temp1_a2d = 3;
inline bool Esr_status5_5e4::_internal_has_can_tx_temp1_a2d() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status5_5e4::has_can_tx_temp1_a2d() const {
  return _internal_has_can_tx_temp1_a2d();
}
inline void Esr_status5_5e4::clear_can_tx_temp1_a2d() {
  can_tx_temp1_a2d_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::_internal_can_tx_temp1_a2d() const {
  return can_tx_temp1_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::can_tx_temp1_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_temp1_a2d)
  return _internal_can_tx_temp1_a2d();
}
inline void Esr_status5_5e4::_internal_set_can_tx_temp1_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_temp1_a2d_ = value;
}
inline void Esr_status5_5e4::set_can_tx_temp1_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_temp1_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_temp1_a2d)
}

// optional int32 can_tx_swbatt_a2d = 4;
inline bool Esr_status5_5e4::_internal_has_can_tx_swbatt_a2d() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status5_5e4::has_can_tx_swbatt_a2d() const {
  return _internal_has_can_tx_swbatt_a2d();
}
inline void Esr_status5_5e4::clear_can_tx_swbatt_a2d() {
  can_tx_swbatt_a2d_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::_internal_can_tx_swbatt_a2d() const {
  return can_tx_swbatt_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::can_tx_swbatt_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_swbatt_a2d)
  return _internal_can_tx_swbatt_a2d();
}
inline void Esr_status5_5e4::_internal_set_can_tx_swbatt_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_swbatt_a2d_ = value;
}
inline void Esr_status5_5e4::set_can_tx_swbatt_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_swbatt_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_swbatt_a2d)
}

// optional int32 can_tx_supply_5vdx_a2d = 5;
inline bool Esr_status5_5e4::_internal_has_can_tx_supply_5vdx_a2d() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status5_5e4::has_can_tx_supply_5vdx_a2d() const {
  return _internal_has_can_tx_supply_5vdx_a2d();
}
inline void Esr_status5_5e4::clear_can_tx_supply_5vdx_a2d() {
  can_tx_supply_5vdx_a2d_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::_internal_can_tx_supply_5vdx_a2d() const {
  return can_tx_supply_5vdx_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::can_tx_supply_5vdx_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_supply_5vdx_a2d)
  return _internal_can_tx_supply_5vdx_a2d();
}
inline void Esr_status5_5e4::_internal_set_can_tx_supply_5vdx_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_supply_5vdx_a2d_ = value;
}
inline void Esr_status5_5e4::set_can_tx_supply_5vdx_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_supply_5vdx_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_supply_5vdx_a2d)
}

// optional int32 can_tx_supply_5va_a2d = 6;
inline bool Esr_status5_5e4::_internal_has_can_tx_supply_5va_a2d() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_status5_5e4::has_can_tx_supply_5va_a2d() const {
  return _internal_has_can_tx_supply_5va_a2d();
}
inline void Esr_status5_5e4::clear_can_tx_supply_5va_a2d() {
  can_tx_supply_5va_a2d_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::_internal_can_tx_supply_5va_a2d() const {
  return can_tx_supply_5va_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::can_tx_supply_5va_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_supply_5va_a2d)
  return _internal_can_tx_supply_5va_a2d();
}
inline void Esr_status5_5e4::_internal_set_can_tx_supply_5va_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  can_tx_supply_5va_a2d_ = value;
}
inline void Esr_status5_5e4::set_can_tx_supply_5va_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_supply_5va_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_supply_5va_a2d)
}

// optional int32 can_tx_supply_3p3v_a2d = 7;
inline bool Esr_status5_5e4::_internal_has_can_tx_supply_3p3v_a2d() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_status5_5e4::has_can_tx_supply_3p3v_a2d() const {
  return _internal_has_can_tx_supply_3p3v_a2d();
}
inline void Esr_status5_5e4::clear_can_tx_supply_3p3v_a2d() {
  can_tx_supply_3p3v_a2d_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::_internal_can_tx_supply_3p3v_a2d() const {
  return can_tx_supply_3p3v_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::can_tx_supply_3p3v_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_supply_3p3v_a2d)
  return _internal_can_tx_supply_3p3v_a2d();
}
inline void Esr_status5_5e4::_internal_set_can_tx_supply_3p3v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  can_tx_supply_3p3v_a2d_ = value;
}
inline void Esr_status5_5e4::set_can_tx_supply_3p3v_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_supply_3p3v_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_supply_3p3v_a2d)
}

// optional int32 can_tx_ignp_a2d = 8;
inline bool Esr_status5_5e4::_internal_has_can_tx_ignp_a2d() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Esr_status5_5e4::has_can_tx_ignp_a2d() const {
  return _internal_has_can_tx_ignp_a2d();
}
inline void Esr_status5_5e4::clear_can_tx_ignp_a2d() {
  can_tx_ignp_a2d_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::_internal_can_tx_ignp_a2d() const {
  return can_tx_ignp_a2d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status5_5e4::can_tx_ignp_a2d() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status5_5e4.can_tx_ignp_a2d)
  return _internal_can_tx_ignp_a2d();
}
inline void Esr_status5_5e4::_internal_set_can_tx_ignp_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  can_tx_ignp_a2d_ = value;
}
inline void Esr_status5_5e4::set_can_tx_ignp_a2d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_ignp_a2d(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status5_5e4.can_tx_ignp_a2d)
}

// -------------------------------------------------------------------

// Esr_status3_4e2

// optional int32 can_tx_sw_version_pld = 1;
inline bool Esr_status3_4e2::_internal_has_can_tx_sw_version_pld() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status3_4e2::has_can_tx_sw_version_pld() const {
  return _internal_has_can_tx_sw_version_pld();
}
inline void Esr_status3_4e2::clear_can_tx_sw_version_pld() {
  can_tx_sw_version_pld_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::_internal_can_tx_sw_version_pld() const {
  return can_tx_sw_version_pld_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::can_tx_sw_version_pld() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_sw_version_pld)
  return _internal_can_tx_sw_version_pld();
}
inline void Esr_status3_4e2::_internal_set_can_tx_sw_version_pld(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_sw_version_pld_ = value;
}
inline void Esr_status3_4e2::set_can_tx_sw_version_pld(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_sw_version_pld(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_sw_version_pld)
}

// optional int32 can_tx_sw_version_host = 2;
inline bool Esr_status3_4e2::_internal_has_can_tx_sw_version_host() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status3_4e2::has_can_tx_sw_version_host() const {
  return _internal_has_can_tx_sw_version_host();
}
inline void Esr_status3_4e2::clear_can_tx_sw_version_host() {
  can_tx_sw_version_host_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::_internal_can_tx_sw_version_host() const {
  return can_tx_sw_version_host_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::can_tx_sw_version_host() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_sw_version_host)
  return _internal_can_tx_sw_version_host();
}
inline void Esr_status3_4e2::_internal_set_can_tx_sw_version_host(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_sw_version_host_ = value;
}
inline void Esr_status3_4e2::set_can_tx_sw_version_host(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_sw_version_host(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_sw_version_host)
}

// optional int32 can_tx_hw_version = 3;
inline bool Esr_status3_4e2::_internal_has_can_tx_hw_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status3_4e2::has_can_tx_hw_version() const {
  return _internal_has_can_tx_hw_version();
}
inline void Esr_status3_4e2::clear_can_tx_hw_version() {
  can_tx_hw_version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::_internal_can_tx_hw_version() const {
  return can_tx_hw_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::can_tx_hw_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_hw_version)
  return _internal_can_tx_hw_version();
}
inline void Esr_status3_4e2::_internal_set_can_tx_hw_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_hw_version_ = value;
}
inline void Esr_status3_4e2::set_can_tx_hw_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_hw_version(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_hw_version)
}

// optional int32 can_tx_interface_version = 4;
inline bool Esr_status3_4e2::_internal_has_can_tx_interface_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status3_4e2::has_can_tx_interface_version() const {
  return _internal_has_can_tx_interface_version();
}
inline void Esr_status3_4e2::clear_can_tx_interface_version() {
  can_tx_interface_version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::_internal_can_tx_interface_version() const {
  return can_tx_interface_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::can_tx_interface_version() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_interface_version)
  return _internal_can_tx_interface_version();
}
inline void Esr_status3_4e2::_internal_set_can_tx_interface_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_interface_version_ = value;
}
inline void Esr_status3_4e2::set_can_tx_interface_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_interface_version(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_interface_version)
}

// optional int32 can_tx_serial_num = 5;
inline bool Esr_status3_4e2::_internal_has_can_tx_serial_num() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status3_4e2::has_can_tx_serial_num() const {
  return _internal_has_can_tx_serial_num();
}
inline void Esr_status3_4e2::clear_can_tx_serial_num() {
  can_tx_serial_num_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::_internal_can_tx_serial_num() const {
  return can_tx_serial_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status3_4e2::can_tx_serial_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status3_4e2.can_tx_serial_num)
  return _internal_can_tx_serial_num();
}
inline void Esr_status3_4e2::_internal_set_can_tx_serial_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_serial_num_ = value;
}
inline void Esr_status3_4e2::set_can_tx_serial_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_serial_num(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status3_4e2.can_tx_serial_num)
}

// -------------------------------------------------------------------

// Esr_status4_4e3

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_truck_target_detType can_tx_truck_target_det = 1;
inline bool Esr_status4_4e3::_internal_has_can_tx_truck_target_det() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_truck_target_det() const {
  return _internal_has_can_tx_truck_target_det();
}
inline void Esr_status4_4e3::clear_can_tx_truck_target_det() {
  can_tx_truck_target_det_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::_internal_can_tx_truck_target_det() const {
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType >(can_tx_truck_target_det_);
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType Esr_status4_4e3::can_tx_truck_target_det() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_truck_target_det)
  return _internal_can_tx_truck_target_det();
}
inline void Esr_status4_4e3::_internal_set_can_tx_truck_target_det(::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  can_tx_truck_target_det_ = value;
}
inline void Esr_status4_4e3::set_can_tx_truck_target_det(::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType value) {
  _internal_set_can_tx_truck_target_det(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_truck_target_det)
}

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_lr_only_grating_lobe_detType can_tx_lr_only_grating_lobe_det = 2;
inline bool Esr_status4_4e3::_internal_has_can_tx_lr_only_grating_lobe_det() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_lr_only_grating_lobe_det() const {
  return _internal_has_can_tx_lr_only_grating_lobe_det();
}
inline void Esr_status4_4e3::clear_can_tx_lr_only_grating_lobe_det() {
  can_tx_lr_only_grating_lobe_det_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::_internal_can_tx_lr_only_grating_lobe_det() const {
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType >(can_tx_lr_only_grating_lobe_det_);
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType Esr_status4_4e3::can_tx_lr_only_grating_lobe_det() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_lr_only_grating_lobe_det)
  return _internal_can_tx_lr_only_grating_lobe_det();
}
inline void Esr_status4_4e3::_internal_set_can_tx_lr_only_grating_lobe_det(::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  can_tx_lr_only_grating_lobe_det_ = value;
}
inline void Esr_status4_4e3::set_can_tx_lr_only_grating_lobe_det(::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType value) {
  _internal_set_can_tx_lr_only_grating_lobe_det(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_lr_only_grating_lobe_det)
}

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_sidelobe_blockageType can_tx_sidelobe_blockage = 3;
inline bool Esr_status4_4e3::_internal_has_can_tx_sidelobe_blockage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_sidelobe_blockage() const {
  return _internal_has_can_tx_sidelobe_blockage();
}
inline void Esr_status4_4e3::clear_can_tx_sidelobe_blockage() {
  can_tx_sidelobe_blockage_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::_internal_can_tx_sidelobe_blockage() const {
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType >(can_tx_sidelobe_blockage_);
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType Esr_status4_4e3::can_tx_sidelobe_blockage() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_sidelobe_blockage)
  return _internal_can_tx_sidelobe_blockage();
}
inline void Esr_status4_4e3::_internal_set_can_tx_sidelobe_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  can_tx_sidelobe_blockage_ = value;
}
inline void Esr_status4_4e3::set_can_tx_sidelobe_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType value) {
  _internal_set_can_tx_sidelobe_blockage(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_sidelobe_blockage)
}

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_partial_blockageType can_tx_partial_blockage = 4;
inline bool Esr_status4_4e3::_internal_has_can_tx_partial_blockage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_partial_blockage() const {
  return _internal_has_can_tx_partial_blockage();
}
inline void Esr_status4_4e3::clear_can_tx_partial_blockage() {
  can_tx_partial_blockage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::_internal_can_tx_partial_blockage() const {
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType >(can_tx_partial_blockage_);
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType Esr_status4_4e3::can_tx_partial_blockage() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_partial_blockage)
  return _internal_can_tx_partial_blockage();
}
inline void Esr_status4_4e3::_internal_set_can_tx_partial_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  can_tx_partial_blockage_ = value;
}
inline void Esr_status4_4e3::set_can_tx_partial_blockage(::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType value) {
  _internal_set_can_tx_partial_blockage(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_partial_blockage)
}

// optional int32 can_tx_path_id_acc_stat = 5;
inline bool Esr_status4_4e3::_internal_has_can_tx_path_id_acc_stat() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_path_id_acc_stat() const {
  return _internal_has_can_tx_path_id_acc_stat();
}
inline void Esr_status4_4e3::clear_can_tx_path_id_acc_stat() {
  can_tx_path_id_acc_stat_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::_internal_can_tx_path_id_acc_stat() const {
  return can_tx_path_id_acc_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::can_tx_path_id_acc_stat() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_acc_stat)
  return _internal_can_tx_path_id_acc_stat();
}
inline void Esr_status4_4e3::_internal_set_can_tx_path_id_acc_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_path_id_acc_stat_ = value;
}
inline void Esr_status4_4e3::set_can_tx_path_id_acc_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_path_id_acc_stat(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_acc_stat)
}

// optional .apollo.drivers.Esr_status4_4e3.Can_tx_mr_lr_modeType can_tx_mr_lr_mode = 6;
inline bool Esr_status4_4e3::_internal_has_can_tx_mr_lr_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_mr_lr_mode() const {
  return _internal_has_can_tx_mr_lr_mode();
}
inline void Esr_status4_4e3::clear_can_tx_mr_lr_mode() {
  can_tx_mr_lr_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::_internal_can_tx_mr_lr_mode() const {
  return static_cast< ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType >(can_tx_mr_lr_mode_);
}
inline ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType Esr_status4_4e3::can_tx_mr_lr_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_mr_lr_mode)
  return _internal_can_tx_mr_lr_mode();
}
inline void Esr_status4_4e3::_internal_set_can_tx_mr_lr_mode(::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType value) {
  assert(::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  can_tx_mr_lr_mode_ = value;
}
inline void Esr_status4_4e3::set_can_tx_mr_lr_mode(::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType value) {
  _internal_set_can_tx_mr_lr_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_mr_lr_mode)
}

// optional double can_tx_auto_align_angle = 7;
inline bool Esr_status4_4e3::_internal_has_can_tx_auto_align_angle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_auto_align_angle() const {
  return _internal_has_can_tx_auto_align_angle();
}
inline void Esr_status4_4e3::clear_can_tx_auto_align_angle() {
  can_tx_auto_align_angle_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Esr_status4_4e3::_internal_can_tx_auto_align_angle() const {
  return can_tx_auto_align_angle_;
}
inline double Esr_status4_4e3::can_tx_auto_align_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_auto_align_angle)
  return _internal_can_tx_auto_align_angle();
}
inline void Esr_status4_4e3::_internal_set_can_tx_auto_align_angle(double value) {
  _has_bits_[0] |= 0x00000040u;
  can_tx_auto_align_angle_ = value;
}
inline void Esr_status4_4e3::set_can_tx_auto_align_angle(double value) {
  _internal_set_can_tx_auto_align_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_auto_align_angle)
}

// optional int32 can_tx_rolling_count_3 = 8;
inline bool Esr_status4_4e3::_internal_has_can_tx_rolling_count_3() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_rolling_count_3() const {
  return _internal_has_can_tx_rolling_count_3();
}
inline void Esr_status4_4e3::clear_can_tx_rolling_count_3() {
  can_tx_rolling_count_3_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::_internal_can_tx_rolling_count_3() const {
  return can_tx_rolling_count_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::can_tx_rolling_count_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_rolling_count_3)
  return _internal_can_tx_rolling_count_3();
}
inline void Esr_status4_4e3::_internal_set_can_tx_rolling_count_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  can_tx_rolling_count_3_ = value;
}
inline void Esr_status4_4e3::set_can_tx_rolling_count_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_rolling_count_3(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_rolling_count_3)
}

// optional int32 can_tx_path_id_fcw_stat = 9;
inline bool Esr_status4_4e3::_internal_has_can_tx_path_id_fcw_stat() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_path_id_fcw_stat() const {
  return _internal_has_can_tx_path_id_fcw_stat();
}
inline void Esr_status4_4e3::clear_can_tx_path_id_fcw_stat() {
  can_tx_path_id_fcw_stat_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::_internal_can_tx_path_id_fcw_stat() const {
  return can_tx_path_id_fcw_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::can_tx_path_id_fcw_stat() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_fcw_stat)
  return _internal_can_tx_path_id_fcw_stat();
}
inline void Esr_status4_4e3::_internal_set_can_tx_path_id_fcw_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  can_tx_path_id_fcw_stat_ = value;
}
inline void Esr_status4_4e3::set_can_tx_path_id_fcw_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_path_id_fcw_stat(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_fcw_stat)
}

// optional int32 can_tx_path_id_fcw_move = 10;
inline bool Esr_status4_4e3::_internal_has_can_tx_path_id_fcw_move() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_path_id_fcw_move() const {
  return _internal_has_can_tx_path_id_fcw_move();
}
inline void Esr_status4_4e3::clear_can_tx_path_id_fcw_move() {
  can_tx_path_id_fcw_move_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::_internal_can_tx_path_id_fcw_move() const {
  return can_tx_path_id_fcw_move_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::can_tx_path_id_fcw_move() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_fcw_move)
  return _internal_can_tx_path_id_fcw_move();
}
inline void Esr_status4_4e3::_internal_set_can_tx_path_id_fcw_move(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  can_tx_path_id_fcw_move_ = value;
}
inline void Esr_status4_4e3::set_can_tx_path_id_fcw_move(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_path_id_fcw_move(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_fcw_move)
}

// optional int32 can_tx_path_id_cmbb_stat = 11;
inline bool Esr_status4_4e3::_internal_has_can_tx_path_id_cmbb_stat() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_path_id_cmbb_stat() const {
  return _internal_has_can_tx_path_id_cmbb_stat();
}
inline void Esr_status4_4e3::clear_can_tx_path_id_cmbb_stat() {
  can_tx_path_id_cmbb_stat_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::_internal_can_tx_path_id_cmbb_stat() const {
  return can_tx_path_id_cmbb_stat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::can_tx_path_id_cmbb_stat() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_cmbb_stat)
  return _internal_can_tx_path_id_cmbb_stat();
}
inline void Esr_status4_4e3::_internal_set_can_tx_path_id_cmbb_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  can_tx_path_id_cmbb_stat_ = value;
}
inline void Esr_status4_4e3::set_can_tx_path_id_cmbb_stat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_path_id_cmbb_stat(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_cmbb_stat)
}

// optional int32 can_tx_path_id_cmbb_move = 12;
inline bool Esr_status4_4e3::_internal_has_can_tx_path_id_cmbb_move() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_path_id_cmbb_move() const {
  return _internal_has_can_tx_path_id_cmbb_move();
}
inline void Esr_status4_4e3::clear_can_tx_path_id_cmbb_move() {
  can_tx_path_id_cmbb_move_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::_internal_can_tx_path_id_cmbb_move() const {
  return can_tx_path_id_cmbb_move_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::can_tx_path_id_cmbb_move() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_cmbb_move)
  return _internal_can_tx_path_id_cmbb_move();
}
inline void Esr_status4_4e3::_internal_set_can_tx_path_id_cmbb_move(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  can_tx_path_id_cmbb_move_ = value;
}
inline void Esr_status4_4e3::set_can_tx_path_id_cmbb_move(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_path_id_cmbb_move(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_cmbb_move)
}

// optional int32 can_tx_path_id_acc = 13;
inline bool Esr_status4_4e3::_internal_has_can_tx_path_id_acc() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Esr_status4_4e3::has_can_tx_path_id_acc() const {
  return _internal_has_can_tx_path_id_acc();
}
inline void Esr_status4_4e3::clear_can_tx_path_id_acc() {
  can_tx_path_id_acc_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::_internal_can_tx_path_id_acc() const {
  return can_tx_path_id_acc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status4_4e3::can_tx_path_id_acc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status4_4e3.can_tx_path_id_acc)
  return _internal_can_tx_path_id_acc();
}
inline void Esr_status4_4e3::_internal_set_can_tx_path_id_acc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  can_tx_path_id_acc_ = value;
}
inline void Esr_status4_4e3::set_can_tx_path_id_acc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_path_id_acc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status4_4e3.can_tx_path_id_acc)
}

// -------------------------------------------------------------------

// Esr_trackmotionpower_540_Motionpower

// optional bool can_tx_track_moving = 1;
inline bool Esr_trackmotionpower_540_Motionpower::_internal_has_can_tx_track_moving() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_trackmotionpower_540_Motionpower::has_can_tx_track_moving() const {
  return _internal_has_can_tx_track_moving();
}
inline void Esr_trackmotionpower_540_Motionpower::clear_can_tx_track_moving() {
  can_tx_track_moving_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Esr_trackmotionpower_540_Motionpower::_internal_can_tx_track_moving() const {
  return can_tx_track_moving_;
}
inline bool Esr_trackmotionpower_540_Motionpower::can_tx_track_moving() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving)
  return _internal_can_tx_track_moving();
}
inline void Esr_trackmotionpower_540_Motionpower::_internal_set_can_tx_track_moving(bool value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_track_moving_ = value;
}
inline void Esr_trackmotionpower_540_Motionpower::set_can_tx_track_moving(bool value) {
  _internal_set_can_tx_track_moving(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving)
}

// optional bool can_tx_track_moving_fast = 2;
inline bool Esr_trackmotionpower_540_Motionpower::_internal_has_can_tx_track_moving_fast() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_trackmotionpower_540_Motionpower::has_can_tx_track_moving_fast() const {
  return _internal_has_can_tx_track_moving_fast();
}
inline void Esr_trackmotionpower_540_Motionpower::clear_can_tx_track_moving_fast() {
  can_tx_track_moving_fast_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Esr_trackmotionpower_540_Motionpower::_internal_can_tx_track_moving_fast() const {
  return can_tx_track_moving_fast_;
}
inline bool Esr_trackmotionpower_540_Motionpower::can_tx_track_moving_fast() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving_fast)
  return _internal_can_tx_track_moving_fast();
}
inline void Esr_trackmotionpower_540_Motionpower::_internal_set_can_tx_track_moving_fast(bool value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_track_moving_fast_ = value;
}
inline void Esr_trackmotionpower_540_Motionpower::set_can_tx_track_moving_fast(bool value) {
  _internal_set_can_tx_track_moving_fast(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving_fast)
}

// optional bool can_tx_track_moving_slow = 3;
inline bool Esr_trackmotionpower_540_Motionpower::_internal_has_can_tx_track_moving_slow() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_trackmotionpower_540_Motionpower::has_can_tx_track_moving_slow() const {
  return _internal_has_can_tx_track_moving_slow();
}
inline void Esr_trackmotionpower_540_Motionpower::clear_can_tx_track_moving_slow() {
  can_tx_track_moving_slow_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Esr_trackmotionpower_540_Motionpower::_internal_can_tx_track_moving_slow() const {
  return can_tx_track_moving_slow_;
}
inline bool Esr_trackmotionpower_540_Motionpower::can_tx_track_moving_slow() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving_slow)
  return _internal_can_tx_track_moving_slow();
}
inline void Esr_trackmotionpower_540_Motionpower::_internal_set_can_tx_track_moving_slow(bool value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_track_moving_slow_ = value;
}
inline void Esr_trackmotionpower_540_Motionpower::set_can_tx_track_moving_slow(bool value) {
  _internal_set_can_tx_track_moving_slow(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_moving_slow)
}

// optional int32 can_tx_track_power = 4;
inline bool Esr_trackmotionpower_540_Motionpower::_internal_has_can_tx_track_power() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_trackmotionpower_540_Motionpower::has_can_tx_track_power() const {
  return _internal_has_can_tx_track_power();
}
inline void Esr_trackmotionpower_540_Motionpower::clear_can_tx_track_power() {
  can_tx_track_power_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_trackmotionpower_540_Motionpower::_internal_can_tx_track_power() const {
  return can_tx_track_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_trackmotionpower_540_Motionpower::can_tx_track_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_power)
  return _internal_can_tx_track_power();
}
inline void Esr_trackmotionpower_540_Motionpower::_internal_set_can_tx_track_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_track_power_ = value;
}
inline void Esr_trackmotionpower_540_Motionpower::set_can_tx_track_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_track_power(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.Motionpower.can_tx_track_power)
}

// -------------------------------------------------------------------

// Esr_trackmotionpower_540

// optional bool can_tx_track_rolling_count_2 = 1;
inline bool Esr_trackmotionpower_540::_internal_has_can_tx_track_rolling_count_2() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_trackmotionpower_540::has_can_tx_track_rolling_count_2() const {
  return _internal_has_can_tx_track_rolling_count_2();
}
inline void Esr_trackmotionpower_540::clear_can_tx_track_rolling_count_2() {
  can_tx_track_rolling_count_2_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Esr_trackmotionpower_540::_internal_can_tx_track_rolling_count_2() const {
  return can_tx_track_rolling_count_2_;
}
inline bool Esr_trackmotionpower_540::can_tx_track_rolling_count_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_rolling_count_2)
  return _internal_can_tx_track_rolling_count_2();
}
inline void Esr_trackmotionpower_540::_internal_set_can_tx_track_rolling_count_2(bool value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_track_rolling_count_2_ = value;
}
inline void Esr_trackmotionpower_540::set_can_tx_track_rolling_count_2(bool value) {
  _internal_set_can_tx_track_rolling_count_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_rolling_count_2)
}

// optional int32 can_tx_track_can_id_group = 2;
inline bool Esr_trackmotionpower_540::_internal_has_can_tx_track_can_id_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_trackmotionpower_540::has_can_tx_track_can_id_group() const {
  return _internal_has_can_tx_track_can_id_group();
}
inline void Esr_trackmotionpower_540::clear_can_tx_track_can_id_group() {
  can_tx_track_can_id_group_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_trackmotionpower_540::_internal_can_tx_track_can_id_group() const {
  return can_tx_track_can_id_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_trackmotionpower_540::can_tx_track_can_id_group() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_can_id_group)
  return _internal_can_tx_track_can_id_group();
}
inline void Esr_trackmotionpower_540::_internal_set_can_tx_track_can_id_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_track_can_id_group_ = value;
}
inline void Esr_trackmotionpower_540::set_can_tx_track_can_id_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_track_can_id_group(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_can_id_group)
}

// repeated .apollo.drivers.Esr_trackmotionpower_540.Motionpower can_tx_track_motion_power = 3;
inline int Esr_trackmotionpower_540::_internal_can_tx_track_motion_power_size() const {
  return can_tx_track_motion_power_.size();
}
inline int Esr_trackmotionpower_540::can_tx_track_motion_power_size() const {
  return _internal_can_tx_track_motion_power_size();
}
inline void Esr_trackmotionpower_540::clear_can_tx_track_motion_power() {
  can_tx_track_motion_power_.Clear();
}
inline ::apollo::drivers::Esr_trackmotionpower_540_Motionpower* Esr_trackmotionpower_540::mutable_can_tx_track_motion_power(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return can_tx_track_motion_power_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower >*
Esr_trackmotionpower_540::mutable_can_tx_track_motion_power() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return &can_tx_track_motion_power_;
}
inline const ::apollo::drivers::Esr_trackmotionpower_540_Motionpower& Esr_trackmotionpower_540::_internal_can_tx_track_motion_power(int index) const {
  return can_tx_track_motion_power_.Get(index);
}
inline const ::apollo::drivers::Esr_trackmotionpower_540_Motionpower& Esr_trackmotionpower_540::can_tx_track_motion_power(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return _internal_can_tx_track_motion_power(index);
}
inline ::apollo::drivers::Esr_trackmotionpower_540_Motionpower* Esr_trackmotionpower_540::_internal_add_can_tx_track_motion_power() {
  return can_tx_track_motion_power_.Add();
}
inline ::apollo::drivers::Esr_trackmotionpower_540_Motionpower* Esr_trackmotionpower_540::add_can_tx_track_motion_power() {
  // @@protoc_insertion_point(field_add:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return _internal_add_can_tx_track_motion_power();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540_Motionpower >&
Esr_trackmotionpower_540::can_tx_track_motion_power() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Esr_trackmotionpower_540.can_tx_track_motion_power)
  return can_tx_track_motion_power_;
}

// -------------------------------------------------------------------

// Acm_inst_req_7e0

// optional int32 command_ctr = 1;
inline bool Acm_inst_req_7e0::_internal_has_command_ctr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Acm_inst_req_7e0::has_command_ctr() const {
  return _internal_has_command_ctr();
}
inline void Acm_inst_req_7e0::clear_command_ctr() {
  command_ctr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::_internal_command_ctr() const {
  return command_ctr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::command_ctr() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.command_ctr)
  return _internal_command_ctr();
}
inline void Acm_inst_req_7e0::_internal_set_command_ctr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  command_ctr_ = value;
}
inline void Acm_inst_req_7e0::set_command_ctr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_command_ctr(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.command_ctr)
}

// optional int32 command_code = 2;
inline bool Acm_inst_req_7e0::_internal_has_command_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Acm_inst_req_7e0::has_command_code() const {
  return _internal_has_command_code();
}
inline void Acm_inst_req_7e0::clear_command_code() {
  command_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::_internal_command_code() const {
  return command_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::command_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.command_code)
  return _internal_command_code();
}
inline void Acm_inst_req_7e0::_internal_set_command_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  command_code_ = value;
}
inline void Acm_inst_req_7e0::set_command_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_command_code(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.command_code)
}

// optional int32 cc_word_2 = 3;
inline bool Acm_inst_req_7e0::_internal_has_cc_word_2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Acm_inst_req_7e0::has_cc_word_2() const {
  return _internal_has_cc_word_2();
}
inline void Acm_inst_req_7e0::clear_cc_word_2() {
  cc_word_2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::_internal_cc_word_2() const {
  return cc_word_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::cc_word_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.cc_word_2)
  return _internal_cc_word_2();
}
inline void Acm_inst_req_7e0::_internal_set_cc_word_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cc_word_2_ = value;
}
inline void Acm_inst_req_7e0::set_cc_word_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cc_word_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.cc_word_2)
}

// optional int32 cc_word_1 = 4;
inline bool Acm_inst_req_7e0::_internal_has_cc_word_1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Acm_inst_req_7e0::has_cc_word_1() const {
  return _internal_has_cc_word_1();
}
inline void Acm_inst_req_7e0::clear_cc_word_1() {
  cc_word_1_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::_internal_cc_word_1() const {
  return cc_word_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::cc_word_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.cc_word_1)
  return _internal_cc_word_1();
}
inline void Acm_inst_req_7e0::_internal_set_cc_word_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  cc_word_1_ = value;
}
inline void Acm_inst_req_7e0::set_cc_word_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cc_word_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.cc_word_1)
}

// optional int32 cc_byte_2 = 5;
inline bool Acm_inst_req_7e0::_internal_has_cc_byte_2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Acm_inst_req_7e0::has_cc_byte_2() const {
  return _internal_has_cc_byte_2();
}
inline void Acm_inst_req_7e0::clear_cc_byte_2() {
  cc_byte_2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::_internal_cc_byte_2() const {
  return cc_byte_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::cc_byte_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.cc_byte_2)
  return _internal_cc_byte_2();
}
inline void Acm_inst_req_7e0::_internal_set_cc_byte_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  cc_byte_2_ = value;
}
inline void Acm_inst_req_7e0::set_cc_byte_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cc_byte_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.cc_byte_2)
}

// optional int32 cc_byte_1 = 6;
inline bool Acm_inst_req_7e0::_internal_has_cc_byte_1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Acm_inst_req_7e0::has_cc_byte_1() const {
  return _internal_has_cc_byte_1();
}
inline void Acm_inst_req_7e0::clear_cc_byte_1() {
  cc_byte_1_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::_internal_cc_byte_1() const {
  return cc_byte_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_req_7e0::cc_byte_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_req_7e0.cc_byte_1)
  return _internal_cc_byte_1();
}
inline void Acm_inst_req_7e0::_internal_set_cc_byte_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  cc_byte_1_ = value;
}
inline void Acm_inst_req_7e0::set_cc_byte_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cc_byte_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_req_7e0.cc_byte_1)
}

// -------------------------------------------------------------------

// Esr_track01_500

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_grouping_changedType can_tx_track_grouping_changed = 1;
inline bool Esr_track01_500::_internal_has_can_tx_track_grouping_changed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_grouping_changed() const {
  return _internal_has_can_tx_track_grouping_changed();
}
inline void Esr_track01_500::clear_can_tx_track_grouping_changed() {
  can_tx_track_grouping_changed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::_internal_can_tx_track_grouping_changed() const {
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType >(can_tx_track_grouping_changed_);
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType Esr_track01_500::can_tx_track_grouping_changed() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_grouping_changed)
  return _internal_can_tx_track_grouping_changed();
}
inline void Esr_track01_500::_internal_set_can_tx_track_grouping_changed(::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  can_tx_track_grouping_changed_ = value;
}
inline void Esr_track01_500::set_can_tx_track_grouping_changed(::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType value) {
  _internal_set_can_tx_track_grouping_changed(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_grouping_changed)
}

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_oncomingType can_tx_track_oncoming = 2;
inline bool Esr_track01_500::_internal_has_can_tx_track_oncoming() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_oncoming() const {
  return _internal_has_can_tx_track_oncoming();
}
inline void Esr_track01_500::clear_can_tx_track_oncoming() {
  can_tx_track_oncoming_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::_internal_can_tx_track_oncoming() const {
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType >(can_tx_track_oncoming_);
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType Esr_track01_500::can_tx_track_oncoming() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_oncoming)
  return _internal_can_tx_track_oncoming();
}
inline void Esr_track01_500::_internal_set_can_tx_track_oncoming(::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  can_tx_track_oncoming_ = value;
}
inline void Esr_track01_500::set_can_tx_track_oncoming(::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType value) {
  _internal_set_can_tx_track_oncoming(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_oncoming)
}

// optional double can_tx_track_lat_rate = 3;
inline bool Esr_track01_500::_internal_has_can_tx_track_lat_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_lat_rate() const {
  return _internal_has_can_tx_track_lat_rate();
}
inline void Esr_track01_500::clear_can_tx_track_lat_rate() {
  can_tx_track_lat_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Esr_track01_500::_internal_can_tx_track_lat_rate() const {
  return can_tx_track_lat_rate_;
}
inline double Esr_track01_500::can_tx_track_lat_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_lat_rate)
  return _internal_can_tx_track_lat_rate();
}
inline void Esr_track01_500::_internal_set_can_tx_track_lat_rate(double value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_track_lat_rate_ = value;
}
inline void Esr_track01_500::set_can_tx_track_lat_rate(double value) {
  _internal_set_can_tx_track_lat_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_lat_rate)
}

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_bridge_objectType can_tx_track_bridge_object = 4;
inline bool Esr_track01_500::_internal_has_can_tx_track_bridge_object() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_bridge_object() const {
  return _internal_has_can_tx_track_bridge_object();
}
inline void Esr_track01_500::clear_can_tx_track_bridge_object() {
  can_tx_track_bridge_object_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::_internal_can_tx_track_bridge_object() const {
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType >(can_tx_track_bridge_object_);
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType Esr_track01_500::can_tx_track_bridge_object() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_bridge_object)
  return _internal_can_tx_track_bridge_object();
}
inline void Esr_track01_500::_internal_set_can_tx_track_bridge_object(::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  can_tx_track_bridge_object_ = value;
}
inline void Esr_track01_500::set_can_tx_track_bridge_object(::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType value) {
  _internal_set_can_tx_track_bridge_object(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_bridge_object)
}

// optional double can_tx_track_width = 5;
inline bool Esr_track01_500::_internal_has_can_tx_track_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_width() const {
  return _internal_has_can_tx_track_width();
}
inline void Esr_track01_500::clear_can_tx_track_width() {
  can_tx_track_width_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Esr_track01_500::_internal_can_tx_track_width() const {
  return can_tx_track_width_;
}
inline double Esr_track01_500::can_tx_track_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_width)
  return _internal_can_tx_track_width();
}
inline void Esr_track01_500::_internal_set_can_tx_track_width(double value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_track_width_ = value;
}
inline void Esr_track01_500::set_can_tx_track_width(double value) {
  _internal_set_can_tx_track_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_width)
}

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_statusType can_tx_track_status = 6;
inline bool Esr_track01_500::_internal_has_can_tx_track_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_status() const {
  return _internal_has_can_tx_track_status();
}
inline void Esr_track01_500::clear_can_tx_track_status() {
  can_tx_track_status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType Esr_track01_500::_internal_can_tx_track_status() const {
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType >(can_tx_track_status_);
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType Esr_track01_500::can_tx_track_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_status)
  return _internal_can_tx_track_status();
}
inline void Esr_track01_500::_internal_set_can_tx_track_status(::apollo::drivers::Esr_track01_500_Can_tx_track_statusType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_statusType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  can_tx_track_status_ = value;
}
inline void Esr_track01_500::set_can_tx_track_status(::apollo::drivers::Esr_track01_500_Can_tx_track_statusType value) {
  _internal_set_can_tx_track_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_status)
}

// optional bool can_tx_track_rolling_count = 7;
inline bool Esr_track01_500::_internal_has_can_tx_track_rolling_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_rolling_count() const {
  return _internal_has_can_tx_track_rolling_count();
}
inline void Esr_track01_500::clear_can_tx_track_rolling_count() {
  can_tx_track_rolling_count_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Esr_track01_500::_internal_can_tx_track_rolling_count() const {
  return can_tx_track_rolling_count_;
}
inline bool Esr_track01_500::can_tx_track_rolling_count() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_rolling_count)
  return _internal_can_tx_track_rolling_count();
}
inline void Esr_track01_500::_internal_set_can_tx_track_rolling_count(bool value) {
  _has_bits_[0] |= 0x00000100u;
  can_tx_track_rolling_count_ = value;
}
inline void Esr_track01_500::set_can_tx_track_rolling_count(bool value) {
  _internal_set_can_tx_track_rolling_count(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_rolling_count)
}

// optional double can_tx_track_range_rate = 8;
inline bool Esr_track01_500::_internal_has_can_tx_track_range_rate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_range_rate() const {
  return _internal_has_can_tx_track_range_rate();
}
inline void Esr_track01_500::clear_can_tx_track_range_rate() {
  can_tx_track_range_rate_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Esr_track01_500::_internal_can_tx_track_range_rate() const {
  return can_tx_track_range_rate_;
}
inline double Esr_track01_500::can_tx_track_range_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_range_rate)
  return _internal_can_tx_track_range_rate();
}
inline void Esr_track01_500::_internal_set_can_tx_track_range_rate(double value) {
  _has_bits_[0] |= 0x00000040u;
  can_tx_track_range_rate_ = value;
}
inline void Esr_track01_500::set_can_tx_track_range_rate(double value) {
  _internal_set_can_tx_track_range_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_range_rate)
}

// optional double can_tx_track_range_accel = 9;
inline bool Esr_track01_500::_internal_has_can_tx_track_range_accel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_range_accel() const {
  return _internal_has_can_tx_track_range_accel();
}
inline void Esr_track01_500::clear_can_tx_track_range_accel() {
  can_tx_track_range_accel_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Esr_track01_500::_internal_can_tx_track_range_accel() const {
  return can_tx_track_range_accel_;
}
inline double Esr_track01_500::can_tx_track_range_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_range_accel)
  return _internal_can_tx_track_range_accel();
}
inline void Esr_track01_500::_internal_set_can_tx_track_range_accel(double value) {
  _has_bits_[0] |= 0x00000080u;
  can_tx_track_range_accel_ = value;
}
inline void Esr_track01_500::set_can_tx_track_range_accel(double value) {
  _internal_set_can_tx_track_range_accel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_range_accel)
}

// optional double can_tx_track_range = 10;
inline bool Esr_track01_500::_internal_has_can_tx_track_range() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_range() const {
  return _internal_has_can_tx_track_range();
}
inline void Esr_track01_500::clear_can_tx_track_range() {
  can_tx_track_range_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Esr_track01_500::_internal_can_tx_track_range() const {
  return can_tx_track_range_;
}
inline double Esr_track01_500::can_tx_track_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_range)
  return _internal_can_tx_track_range();
}
inline void Esr_track01_500::_internal_set_can_tx_track_range(double value) {
  _has_bits_[0] |= 0x00000400u;
  can_tx_track_range_ = value;
}
inline void Esr_track01_500::set_can_tx_track_range(double value) {
  _internal_set_can_tx_track_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_range)
}

// optional .apollo.drivers.Esr_track01_500.Can_tx_track_med_range_modeType can_tx_track_med_range_mode = 11;
inline bool Esr_track01_500::_internal_has_can_tx_track_med_range_mode() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_med_range_mode() const {
  return _internal_has_can_tx_track_med_range_mode();
}
inline void Esr_track01_500::clear_can_tx_track_med_range_mode() {
  can_tx_track_med_range_mode_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::_internal_can_tx_track_med_range_mode() const {
  return static_cast< ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType >(can_tx_track_med_range_mode_);
}
inline ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType Esr_track01_500::can_tx_track_med_range_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_med_range_mode)
  return _internal_can_tx_track_med_range_mode();
}
inline void Esr_track01_500::_internal_set_can_tx_track_med_range_mode(::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType value) {
  assert(::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  can_tx_track_med_range_mode_ = value;
}
inline void Esr_track01_500::set_can_tx_track_med_range_mode(::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType value) {
  _internal_set_can_tx_track_med_range_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_med_range_mode)
}

// optional double can_tx_track_angle = 12;
inline bool Esr_track01_500::_internal_has_can_tx_track_angle() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Esr_track01_500::has_can_tx_track_angle() const {
  return _internal_has_can_tx_track_angle();
}
inline void Esr_track01_500::clear_can_tx_track_angle() {
  can_tx_track_angle_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Esr_track01_500::_internal_can_tx_track_angle() const {
  return can_tx_track_angle_;
}
inline double Esr_track01_500::can_tx_track_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_track01_500.can_tx_track_angle)
  return _internal_can_tx_track_angle();
}
inline void Esr_track01_500::_internal_set_can_tx_track_angle(double value) {
  _has_bits_[0] |= 0x00000800u;
  can_tx_track_angle_ = value;
}
inline void Esr_track01_500::set_can_tx_track_angle(double value) {
  _internal_set_can_tx_track_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_track01_500.can_tx_track_angle)
}

// -------------------------------------------------------------------

// Esr_valid1_5d0

// optional int32 can_tx_valid_lr_sn = 1;
inline bool Esr_valid1_5d0::_internal_has_can_tx_valid_lr_sn() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_valid1_5d0::has_can_tx_valid_lr_sn() const {
  return _internal_has_can_tx_valid_lr_sn();
}
inline void Esr_valid1_5d0::clear_can_tx_valid_lr_sn() {
  can_tx_valid_lr_sn_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_valid1_5d0::_internal_can_tx_valid_lr_sn() const {
  return can_tx_valid_lr_sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_valid1_5d0::can_tx_valid_lr_sn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_sn)
  return _internal_can_tx_valid_lr_sn();
}
inline void Esr_valid1_5d0::_internal_set_can_tx_valid_lr_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_valid_lr_sn_ = value;
}
inline void Esr_valid1_5d0::set_can_tx_valid_lr_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_valid_lr_sn(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_sn)
}

// optional double can_tx_valid_lr_range_rate = 2;
inline bool Esr_valid1_5d0::_internal_has_can_tx_valid_lr_range_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_valid1_5d0::has_can_tx_valid_lr_range_rate() const {
  return _internal_has_can_tx_valid_lr_range_rate();
}
inline void Esr_valid1_5d0::clear_can_tx_valid_lr_range_rate() {
  can_tx_valid_lr_range_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Esr_valid1_5d0::_internal_can_tx_valid_lr_range_rate() const {
  return can_tx_valid_lr_range_rate_;
}
inline double Esr_valid1_5d0::can_tx_valid_lr_range_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_range_rate)
  return _internal_can_tx_valid_lr_range_rate();
}
inline void Esr_valid1_5d0::_internal_set_can_tx_valid_lr_range_rate(double value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_valid_lr_range_rate_ = value;
}
inline void Esr_valid1_5d0::set_can_tx_valid_lr_range_rate(double value) {
  _internal_set_can_tx_valid_lr_range_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_range_rate)
}

// optional double can_tx_valid_lr_range = 3;
inline bool Esr_valid1_5d0::_internal_has_can_tx_valid_lr_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_valid1_5d0::has_can_tx_valid_lr_range() const {
  return _internal_has_can_tx_valid_lr_range();
}
inline void Esr_valid1_5d0::clear_can_tx_valid_lr_range() {
  can_tx_valid_lr_range_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Esr_valid1_5d0::_internal_can_tx_valid_lr_range() const {
  return can_tx_valid_lr_range_;
}
inline double Esr_valid1_5d0::can_tx_valid_lr_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_range)
  return _internal_can_tx_valid_lr_range();
}
inline void Esr_valid1_5d0::_internal_set_can_tx_valid_lr_range(double value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_valid_lr_range_ = value;
}
inline void Esr_valid1_5d0::set_can_tx_valid_lr_range(double value) {
  _internal_set_can_tx_valid_lr_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_range)
}

// optional int32 can_tx_valid_lr_power = 4;
inline bool Esr_valid1_5d0::_internal_has_can_tx_valid_lr_power() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_valid1_5d0::has_can_tx_valid_lr_power() const {
  return _internal_has_can_tx_valid_lr_power();
}
inline void Esr_valid1_5d0::clear_can_tx_valid_lr_power() {
  can_tx_valid_lr_power_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_valid1_5d0::_internal_can_tx_valid_lr_power() const {
  return can_tx_valid_lr_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_valid1_5d0::can_tx_valid_lr_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_power)
  return _internal_can_tx_valid_lr_power();
}
inline void Esr_valid1_5d0::_internal_set_can_tx_valid_lr_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_valid_lr_power_ = value;
}
inline void Esr_valid1_5d0::set_can_tx_valid_lr_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_valid_lr_power(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_power)
}

// optional double can_tx_valid_lr_angle = 5;
inline bool Esr_valid1_5d0::_internal_has_can_tx_valid_lr_angle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_valid1_5d0::has_can_tx_valid_lr_angle() const {
  return _internal_has_can_tx_valid_lr_angle();
}
inline void Esr_valid1_5d0::clear_can_tx_valid_lr_angle() {
  can_tx_valid_lr_angle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Esr_valid1_5d0::_internal_can_tx_valid_lr_angle() const {
  return can_tx_valid_lr_angle_;
}
inline double Esr_valid1_5d0::can_tx_valid_lr_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_angle)
  return _internal_can_tx_valid_lr_angle();
}
inline void Esr_valid1_5d0::_internal_set_can_tx_valid_lr_angle(double value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_valid_lr_angle_ = value;
}
inline void Esr_valid1_5d0::set_can_tx_valid_lr_angle(double value) {
  _internal_set_can_tx_valid_lr_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid1_5d0.can_tx_valid_lr_angle)
}

// -------------------------------------------------------------------

// Esr_valid2_5d1

// optional int32 can_tx_valid_mr_sn = 1;
inline bool Esr_valid2_5d1::_internal_has_can_tx_valid_mr_sn() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_valid2_5d1::has_can_tx_valid_mr_sn() const {
  return _internal_has_can_tx_valid_mr_sn();
}
inline void Esr_valid2_5d1::clear_can_tx_valid_mr_sn() {
  can_tx_valid_mr_sn_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_valid2_5d1::_internal_can_tx_valid_mr_sn() const {
  return can_tx_valid_mr_sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_valid2_5d1::can_tx_valid_mr_sn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_sn)
  return _internal_can_tx_valid_mr_sn();
}
inline void Esr_valid2_5d1::_internal_set_can_tx_valid_mr_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_valid_mr_sn_ = value;
}
inline void Esr_valid2_5d1::set_can_tx_valid_mr_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_valid_mr_sn(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_sn)
}

// optional double can_tx_valid_mr_range_rate = 2;
inline bool Esr_valid2_5d1::_internal_has_can_tx_valid_mr_range_rate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_valid2_5d1::has_can_tx_valid_mr_range_rate() const {
  return _internal_has_can_tx_valid_mr_range_rate();
}
inline void Esr_valid2_5d1::clear_can_tx_valid_mr_range_rate() {
  can_tx_valid_mr_range_rate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Esr_valid2_5d1::_internal_can_tx_valid_mr_range_rate() const {
  return can_tx_valid_mr_range_rate_;
}
inline double Esr_valid2_5d1::can_tx_valid_mr_range_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_range_rate)
  return _internal_can_tx_valid_mr_range_rate();
}
inline void Esr_valid2_5d1::_internal_set_can_tx_valid_mr_range_rate(double value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_valid_mr_range_rate_ = value;
}
inline void Esr_valid2_5d1::set_can_tx_valid_mr_range_rate(double value) {
  _internal_set_can_tx_valid_mr_range_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_range_rate)
}

// optional double can_tx_valid_mr_range = 3;
inline bool Esr_valid2_5d1::_internal_has_can_tx_valid_mr_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_valid2_5d1::has_can_tx_valid_mr_range() const {
  return _internal_has_can_tx_valid_mr_range();
}
inline void Esr_valid2_5d1::clear_can_tx_valid_mr_range() {
  can_tx_valid_mr_range_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Esr_valid2_5d1::_internal_can_tx_valid_mr_range() const {
  return can_tx_valid_mr_range_;
}
inline double Esr_valid2_5d1::can_tx_valid_mr_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_range)
  return _internal_can_tx_valid_mr_range();
}
inline void Esr_valid2_5d1::_internal_set_can_tx_valid_mr_range(double value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_valid_mr_range_ = value;
}
inline void Esr_valid2_5d1::set_can_tx_valid_mr_range(double value) {
  _internal_set_can_tx_valid_mr_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_range)
}

// optional int32 can_tx_valid_mr_power = 4;
inline bool Esr_valid2_5d1::_internal_has_can_tx_valid_mr_power() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_valid2_5d1::has_can_tx_valid_mr_power() const {
  return _internal_has_can_tx_valid_mr_power();
}
inline void Esr_valid2_5d1::clear_can_tx_valid_mr_power() {
  can_tx_valid_mr_power_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_valid2_5d1::_internal_can_tx_valid_mr_power() const {
  return can_tx_valid_mr_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_valid2_5d1::can_tx_valid_mr_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_power)
  return _internal_can_tx_valid_mr_power();
}
inline void Esr_valid2_5d1::_internal_set_can_tx_valid_mr_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_valid_mr_power_ = value;
}
inline void Esr_valid2_5d1::set_can_tx_valid_mr_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_valid_mr_power(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_power)
}

// optional double can_tx_valid_mr_angle = 5;
inline bool Esr_valid2_5d1::_internal_has_can_tx_valid_mr_angle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_valid2_5d1::has_can_tx_valid_mr_angle() const {
  return _internal_has_can_tx_valid_mr_angle();
}
inline void Esr_valid2_5d1::clear_can_tx_valid_mr_angle() {
  can_tx_valid_mr_angle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Esr_valid2_5d1::_internal_can_tx_valid_mr_angle() const {
  return can_tx_valid_mr_angle_;
}
inline double Esr_valid2_5d1::can_tx_valid_mr_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_angle)
  return _internal_can_tx_valid_mr_angle();
}
inline void Esr_valid2_5d1::_internal_set_can_tx_valid_mr_angle(double value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_valid_mr_angle_ = value;
}
inline void Esr_valid2_5d1::set_can_tx_valid_mr_angle(double value) {
  _internal_set_can_tx_valid_mr_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_valid2_5d1.can_tx_valid_mr_angle)
}

// -------------------------------------------------------------------

// Acm_inst_resp_7e4

// optional int32 data_7 = 1;
inline bool Acm_inst_resp_7e4::_internal_has_data_7() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Acm_inst_resp_7e4::has_data_7() const {
  return _internal_has_data_7();
}
inline void Acm_inst_resp_7e4::clear_data_7() {
  data_7_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::_internal_data_7() const {
  return data_7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::data_7() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_7)
  return _internal_data_7();
}
inline void Acm_inst_resp_7e4::_internal_set_data_7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  data_7_ = value;
}
inline void Acm_inst_resp_7e4::set_data_7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_7(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_7)
}

// optional int32 data_6 = 2;
inline bool Acm_inst_resp_7e4::_internal_has_data_6() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Acm_inst_resp_7e4::has_data_6() const {
  return _internal_has_data_6();
}
inline void Acm_inst_resp_7e4::clear_data_6() {
  data_6_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::_internal_data_6() const {
  return data_6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::data_6() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_6)
  return _internal_data_6();
}
inline void Acm_inst_resp_7e4::_internal_set_data_6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  data_6_ = value;
}
inline void Acm_inst_resp_7e4::set_data_6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_6(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_6)
}

// optional int32 data_5 = 3;
inline bool Acm_inst_resp_7e4::_internal_has_data_5() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Acm_inst_resp_7e4::has_data_5() const {
  return _internal_has_data_5();
}
inline void Acm_inst_resp_7e4::clear_data_5() {
  data_5_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::_internal_data_5() const {
  return data_5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::data_5() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_5)
  return _internal_data_5();
}
inline void Acm_inst_resp_7e4::_internal_set_data_5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  data_5_ = value;
}
inline void Acm_inst_resp_7e4::set_data_5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_5(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_5)
}

// optional int32 data_4 = 4;
inline bool Acm_inst_resp_7e4::_internal_has_data_4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Acm_inst_resp_7e4::has_data_4() const {
  return _internal_has_data_4();
}
inline void Acm_inst_resp_7e4::clear_data_4() {
  data_4_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::_internal_data_4() const {
  return data_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::data_4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_4)
  return _internal_data_4();
}
inline void Acm_inst_resp_7e4::_internal_set_data_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  data_4_ = value;
}
inline void Acm_inst_resp_7e4::set_data_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_4(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_4)
}

// optional int32 data_3 = 5;
inline bool Acm_inst_resp_7e4::_internal_has_data_3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Acm_inst_resp_7e4::has_data_3() const {
  return _internal_has_data_3();
}
inline void Acm_inst_resp_7e4::clear_data_3() {
  data_3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::_internal_data_3() const {
  return data_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::data_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.data_3)
  return _internal_data_3();
}
inline void Acm_inst_resp_7e4::_internal_set_data_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  data_3_ = value;
}
inline void Acm_inst_resp_7e4::set_data_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_3(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.data_3)
}

// optional int32 rtn_cmd_counter = 6;
inline bool Acm_inst_resp_7e4::_internal_has_rtn_cmd_counter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Acm_inst_resp_7e4::has_rtn_cmd_counter() const {
  return _internal_has_rtn_cmd_counter();
}
inline void Acm_inst_resp_7e4::clear_rtn_cmd_counter() {
  rtn_cmd_counter_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::_internal_rtn_cmd_counter() const {
  return rtn_cmd_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::rtn_cmd_counter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.rtn_cmd_counter)
  return _internal_rtn_cmd_counter();
}
inline void Acm_inst_resp_7e4::_internal_set_rtn_cmd_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  rtn_cmd_counter_ = value;
}
inline void Acm_inst_resp_7e4::set_rtn_cmd_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rtn_cmd_counter(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.rtn_cmd_counter)
}

// optional int32 command_return_code = 7;
inline bool Acm_inst_resp_7e4::_internal_has_command_return_code() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Acm_inst_resp_7e4::has_command_return_code() const {
  return _internal_has_command_return_code();
}
inline void Acm_inst_resp_7e4::clear_command_return_code() {
  command_return_code_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::_internal_command_return_code() const {
  return command_return_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::command_return_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.command_return_code)
  return _internal_command_return_code();
}
inline void Acm_inst_resp_7e4::_internal_set_command_return_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  command_return_code_ = value;
}
inline void Acm_inst_resp_7e4::set_command_return_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_command_return_code(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.command_return_code)
}

// optional int32 pid = 8;
inline bool Acm_inst_resp_7e4::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Acm_inst_resp_7e4::has_pid() const {
  return _internal_has_pid();
}
inline void Acm_inst_resp_7e4::clear_pid() {
  pid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acm_inst_resp_7e4::pid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Acm_inst_resp_7e4.pid)
  return _internal_pid();
}
inline void Acm_inst_resp_7e4::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  pid_ = value;
}
inline void Acm_inst_resp_7e4::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Acm_inst_resp_7e4.pid)
}

// -------------------------------------------------------------------

// Vehicle2_4f1

// optional double can_rx_volvo_short_track_roc = 1;
inline bool Vehicle2_4f1::_internal_has_can_rx_volvo_short_track_roc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_volvo_short_track_roc() const {
  return _internal_has_can_rx_volvo_short_track_roc();
}
inline void Vehicle2_4f1::clear_can_rx_volvo_short_track_roc() {
  can_rx_volvo_short_track_roc_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vehicle2_4f1::_internal_can_rx_volvo_short_track_roc() const {
  return can_rx_volvo_short_track_roc_;
}
inline double Vehicle2_4f1::can_rx_volvo_short_track_roc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_volvo_short_track_roc)
  return _internal_can_rx_volvo_short_track_roc();
}
inline void Vehicle2_4f1::_internal_set_can_rx_volvo_short_track_roc(double value) {
  _has_bits_[0] |= 0x00000001u;
  can_rx_volvo_short_track_roc_ = value;
}
inline void Vehicle2_4f1::set_can_rx_volvo_short_track_roc(double value) {
  _internal_set_can_rx_volvo_short_track_roc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_volvo_short_track_roc)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_mr_only_transmitType can_rx_mr_only_transmit = 2;
inline bool Vehicle2_4f1::_internal_has_can_rx_mr_only_transmit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_mr_only_transmit() const {
  return _internal_has_can_rx_mr_only_transmit();
}
inline void Vehicle2_4f1::clear_can_rx_mr_only_transmit() {
  can_rx_mr_only_transmit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::_internal_can_rx_mr_only_transmit() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType >(can_rx_mr_only_transmit_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType Vehicle2_4f1::can_rx_mr_only_transmit() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_mr_only_transmit)
  return _internal_can_rx_mr_only_transmit();
}
inline void Vehicle2_4f1::_internal_set_can_rx_mr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  can_rx_mr_only_transmit_ = value;
}
inline void Vehicle2_4f1::set_can_rx_mr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType value) {
  _internal_set_can_rx_mr_only_transmit(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_mr_only_transmit)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_lr_only_transmitType can_rx_lr_only_transmit = 3;
inline bool Vehicle2_4f1::_internal_has_can_rx_lr_only_transmit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_lr_only_transmit() const {
  return _internal_has_can_rx_lr_only_transmit();
}
inline void Vehicle2_4f1::clear_can_rx_lr_only_transmit() {
  can_rx_lr_only_transmit_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::_internal_can_rx_lr_only_transmit() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType >(can_rx_lr_only_transmit_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType Vehicle2_4f1::can_rx_lr_only_transmit() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_lr_only_transmit)
  return _internal_can_rx_lr_only_transmit();
}
inline void Vehicle2_4f1::_internal_set_can_rx_lr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  can_rx_lr_only_transmit_ = value;
}
inline void Vehicle2_4f1::set_can_rx_lr_only_transmit(::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType value) {
  _internal_set_can_rx_lr_only_transmit(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_lr_only_transmit)
}

// optional int32 can_rx_high_yaw_angle = 4;
inline bool Vehicle2_4f1::_internal_has_can_rx_high_yaw_angle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_high_yaw_angle() const {
  return _internal_has_can_rx_high_yaw_angle();
}
inline void Vehicle2_4f1::clear_can_rx_high_yaw_angle() {
  can_rx_high_yaw_angle_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle2_4f1::_internal_can_rx_high_yaw_angle() const {
  return can_rx_high_yaw_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle2_4f1::can_rx_high_yaw_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_high_yaw_angle)
  return _internal_can_rx_high_yaw_angle();
}
inline void Vehicle2_4f1::_internal_set_can_rx_high_yaw_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_rx_high_yaw_angle_ = value;
}
inline void Vehicle2_4f1::set_can_rx_high_yaw_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_high_yaw_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_high_yaw_angle)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_clear_faultsType can_rx_clear_faults = 5;
inline bool Vehicle2_4f1::_internal_has_can_rx_clear_faults() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_clear_faults() const {
  return _internal_has_can_rx_clear_faults();
}
inline void Vehicle2_4f1::clear_can_rx_clear_faults() {
  can_rx_clear_faults_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::_internal_can_rx_clear_faults() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType >(can_rx_clear_faults_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType Vehicle2_4f1::can_rx_clear_faults() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_clear_faults)
  return _internal_can_rx_clear_faults();
}
inline void Vehicle2_4f1::_internal_set_can_rx_clear_faults(::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  can_rx_clear_faults_ = value;
}
inline void Vehicle2_4f1::set_can_rx_clear_faults(::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType value) {
  _internal_set_can_rx_clear_faults(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_clear_faults)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_use_angle_misalignmentType can_rx_use_angle_misalignment = 6;
inline bool Vehicle2_4f1::_internal_has_can_rx_use_angle_misalignment() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_use_angle_misalignment() const {
  return _internal_has_can_rx_use_angle_misalignment();
}
inline void Vehicle2_4f1::clear_can_rx_use_angle_misalignment() {
  can_rx_use_angle_misalignment_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::_internal_can_rx_use_angle_misalignment() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType >(can_rx_use_angle_misalignment_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType Vehicle2_4f1::can_rx_use_angle_misalignment() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_use_angle_misalignment)
  return _internal_can_rx_use_angle_misalignment();
}
inline void Vehicle2_4f1::_internal_set_can_rx_use_angle_misalignment(::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  can_rx_use_angle_misalignment_ = value;
}
inline void Vehicle2_4f1::set_can_rx_use_angle_misalignment(::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType value) {
  _internal_set_can_rx_use_angle_misalignment(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_use_angle_misalignment)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_turn_signal_statusType can_rx_turn_signal_status = 7;
inline bool Vehicle2_4f1::_internal_has_can_rx_turn_signal_status() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_turn_signal_status() const {
  return _internal_has_can_rx_turn_signal_status();
}
inline void Vehicle2_4f1::clear_can_rx_turn_signal_status() {
  can_rx_turn_signal_status_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::_internal_can_rx_turn_signal_status() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType >(can_rx_turn_signal_status_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType Vehicle2_4f1::can_rx_turn_signal_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_turn_signal_status)
  return _internal_can_rx_turn_signal_status();
}
inline void Vehicle2_4f1::_internal_set_can_rx_turn_signal_status(::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  can_rx_turn_signal_status_ = value;
}
inline void Vehicle2_4f1::set_can_rx_turn_signal_status(::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType value) {
  _internal_set_can_rx_turn_signal_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_turn_signal_status)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_blockage_disableType can_rx_blockage_disable = 8;
inline bool Vehicle2_4f1::_internal_has_can_rx_blockage_disable() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_blockage_disable() const {
  return _internal_has_can_rx_blockage_disable();
}
inline void Vehicle2_4f1::clear_can_rx_blockage_disable() {
  can_rx_blockage_disable_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::_internal_can_rx_blockage_disable() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType >(can_rx_blockage_disable_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType Vehicle2_4f1::can_rx_blockage_disable() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_blockage_disable)
  return _internal_can_rx_blockage_disable();
}
inline void Vehicle2_4f1::_internal_set_can_rx_blockage_disable(::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  can_rx_blockage_disable_ = value;
}
inline void Vehicle2_4f1::set_can_rx_blockage_disable(::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType value) {
  _internal_set_can_rx_blockage_disable(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_blockage_disable)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_vehicle_speed_validityType can_rx_vehicle_speed_validity = 9;
inline bool Vehicle2_4f1::_internal_has_can_rx_vehicle_speed_validity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_vehicle_speed_validity() const {
  return _internal_has_can_rx_vehicle_speed_validity();
}
inline void Vehicle2_4f1::clear_can_rx_vehicle_speed_validity() {
  can_rx_vehicle_speed_validity_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::_internal_can_rx_vehicle_speed_validity() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType >(can_rx_vehicle_speed_validity_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType Vehicle2_4f1::can_rx_vehicle_speed_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_vehicle_speed_validity)
  return _internal_can_rx_vehicle_speed_validity();
}
inline void Vehicle2_4f1::_internal_set_can_rx_vehicle_speed_validity(::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  can_rx_vehicle_speed_validity_ = value;
}
inline void Vehicle2_4f1::set_can_rx_vehicle_speed_validity(::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType value) {
  _internal_set_can_rx_vehicle_speed_validity(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_vehicle_speed_validity)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_mmr_upside_downType can_rx_mmr_upside_down = 10;
inline bool Vehicle2_4f1::_internal_has_can_rx_mmr_upside_down() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_mmr_upside_down() const {
  return _internal_has_can_rx_mmr_upside_down();
}
inline void Vehicle2_4f1::clear_can_rx_mmr_upside_down() {
  can_rx_mmr_upside_down_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::_internal_can_rx_mmr_upside_down() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType >(can_rx_mmr_upside_down_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType Vehicle2_4f1::can_rx_mmr_upside_down() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_mmr_upside_down)
  return _internal_can_rx_mmr_upside_down();
}
inline void Vehicle2_4f1::_internal_set_can_rx_mmr_upside_down(::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  can_rx_mmr_upside_down_ = value;
}
inline void Vehicle2_4f1::set_can_rx_mmr_upside_down(::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType value) {
  _internal_set_can_rx_mmr_upside_down(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_mmr_upside_down)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_wiper_statusType can_rx_wiper_status = 11;
inline bool Vehicle2_4f1::_internal_has_can_rx_wiper_status() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_wiper_status() const {
  return _internal_has_can_rx_wiper_status();
}
inline void Vehicle2_4f1::clear_can_rx_wiper_status() {
  can_rx_wiper_status_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::_internal_can_rx_wiper_status() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType >(can_rx_wiper_status_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType Vehicle2_4f1::can_rx_wiper_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_wiper_status)
  return _internal_can_rx_wiper_status();
}
inline void Vehicle2_4f1::_internal_set_can_rx_wiper_status(::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  can_rx_wiper_status_ = value;
}
inline void Vehicle2_4f1::set_can_rx_wiper_status(::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType value) {
  _internal_set_can_rx_wiper_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_wiper_status)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_raw_data_enableType can_rx_raw_data_enable = 12;
inline bool Vehicle2_4f1::_internal_has_can_rx_raw_data_enable() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_raw_data_enable() const {
  return _internal_has_can_rx_raw_data_enable();
}
inline void Vehicle2_4f1::clear_can_rx_raw_data_enable() {
  can_rx_raw_data_enable_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::_internal_can_rx_raw_data_enable() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType >(can_rx_raw_data_enable_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType Vehicle2_4f1::can_rx_raw_data_enable() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_raw_data_enable)
  return _internal_can_rx_raw_data_enable();
}
inline void Vehicle2_4f1::_internal_set_can_rx_raw_data_enable(::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  can_rx_raw_data_enable_ = value;
}
inline void Vehicle2_4f1::set_can_rx_raw_data_enable(::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType value) {
  _internal_set_can_rx_raw_data_enable(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_raw_data_enable)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_radar_cmd_radiateType can_rx_radar_cmd_radiate = 13;
inline bool Vehicle2_4f1::_internal_has_can_rx_radar_cmd_radiate() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_radar_cmd_radiate() const {
  return _internal_has_can_rx_radar_cmd_radiate();
}
inline void Vehicle2_4f1::clear_can_rx_radar_cmd_radiate() {
  can_rx_radar_cmd_radiate_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::_internal_can_rx_radar_cmd_radiate() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType >(can_rx_radar_cmd_radiate_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType Vehicle2_4f1::can_rx_radar_cmd_radiate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_radar_cmd_radiate)
  return _internal_can_rx_radar_cmd_radiate();
}
inline void Vehicle2_4f1::_internal_set_can_rx_radar_cmd_radiate(::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  can_rx_radar_cmd_radiate_ = value;
}
inline void Vehicle2_4f1::set_can_rx_radar_cmd_radiate(::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType value) {
  _internal_set_can_rx_radar_cmd_radiate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_radar_cmd_radiate)
}

// optional .apollo.drivers.Vehicle2_4f1.Can_rx_grouping_modeType can_rx_grouping_mode = 14;
inline bool Vehicle2_4f1::_internal_has_can_rx_grouping_mode() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_grouping_mode() const {
  return _internal_has_can_rx_grouping_mode();
}
inline void Vehicle2_4f1::clear_can_rx_grouping_mode() {
  can_rx_grouping_mode_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::_internal_can_rx_grouping_mode() const {
  return static_cast< ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType >(can_rx_grouping_mode_);
}
inline ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType Vehicle2_4f1::can_rx_grouping_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_grouping_mode)
  return _internal_can_rx_grouping_mode();
}
inline void Vehicle2_4f1::_internal_set_can_rx_grouping_mode(::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType value) {
  assert(::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  can_rx_grouping_mode_ = value;
}
inline void Vehicle2_4f1::set_can_rx_grouping_mode(::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType value) {
  _internal_set_can_rx_grouping_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_grouping_mode)
}

// optional int32 can_rx_maximum_tracks = 15;
inline bool Vehicle2_4f1::_internal_has_can_rx_maximum_tracks() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_maximum_tracks() const {
  return _internal_has_can_rx_maximum_tracks();
}
inline void Vehicle2_4f1::clear_can_rx_maximum_tracks() {
  can_rx_maximum_tracks_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle2_4f1::_internal_can_rx_maximum_tracks() const {
  return can_rx_maximum_tracks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle2_4f1::can_rx_maximum_tracks() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_maximum_tracks)
  return _internal_can_rx_maximum_tracks();
}
inline void Vehicle2_4f1::_internal_set_can_rx_maximum_tracks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  can_rx_maximum_tracks_ = value;
}
inline void Vehicle2_4f1::set_can_rx_maximum_tracks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_maximum_tracks(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_maximum_tracks)
}

// optional double can_rx_lateral_mounting_offset = 16;
inline bool Vehicle2_4f1::_internal_has_can_rx_lateral_mounting_offset() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_lateral_mounting_offset() const {
  return _internal_has_can_rx_lateral_mounting_offset();
}
inline void Vehicle2_4f1::clear_can_rx_lateral_mounting_offset() {
  can_rx_lateral_mounting_offset_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double Vehicle2_4f1::_internal_can_rx_lateral_mounting_offset() const {
  return can_rx_lateral_mounting_offset_;
}
inline double Vehicle2_4f1::can_rx_lateral_mounting_offset() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_lateral_mounting_offset)
  return _internal_can_rx_lateral_mounting_offset();
}
inline void Vehicle2_4f1::_internal_set_can_rx_lateral_mounting_offset(double value) {
  _has_bits_[0] |= 0x00008000u;
  can_rx_lateral_mounting_offset_ = value;
}
inline void Vehicle2_4f1::set_can_rx_lateral_mounting_offset(double value) {
  _internal_set_can_rx_lateral_mounting_offset(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_lateral_mounting_offset)
}

// optional double can_rx_angle_misalignment = 17;
inline bool Vehicle2_4f1::_internal_has_can_rx_angle_misalignment() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_angle_misalignment() const {
  return _internal_has_can_rx_angle_misalignment();
}
inline void Vehicle2_4f1::clear_can_rx_angle_misalignment() {
  can_rx_angle_misalignment_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double Vehicle2_4f1::_internal_can_rx_angle_misalignment() const {
  return can_rx_angle_misalignment_;
}
inline double Vehicle2_4f1::can_rx_angle_misalignment() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_angle_misalignment)
  return _internal_can_rx_angle_misalignment();
}
inline void Vehicle2_4f1::_internal_set_can_rx_angle_misalignment(double value) {
  _has_bits_[0] |= 0x00010000u;
  can_rx_angle_misalignment_ = value;
}
inline void Vehicle2_4f1::set_can_rx_angle_misalignment(double value) {
  _internal_set_can_rx_angle_misalignment(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_angle_misalignment)
}

// optional int32 can_rx_scan_index_ack = 18;
inline bool Vehicle2_4f1::_internal_has_can_rx_scan_index_ack() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Vehicle2_4f1::has_can_rx_scan_index_ack() const {
  return _internal_has_can_rx_scan_index_ack();
}
inline void Vehicle2_4f1::clear_can_rx_scan_index_ack() {
  can_rx_scan_index_ack_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle2_4f1::_internal_can_rx_scan_index_ack() const {
  return can_rx_scan_index_ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle2_4f1::can_rx_scan_index_ack() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle2_4f1.can_rx_scan_index_ack)
  return _internal_can_rx_scan_index_ack();
}
inline void Vehicle2_4f1::_internal_set_can_rx_scan_index_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  can_rx_scan_index_ack_ = value;
}
inline void Vehicle2_4f1::set_can_rx_scan_index_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_scan_index_ack(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle2_4f1.can_rx_scan_index_ack)
}

// -------------------------------------------------------------------

// Vehicle1_4f0

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_validityType can_rx_steering_angle_validity = 1;
inline bool Vehicle1_4f0::_internal_has_can_rx_steering_angle_validity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_steering_angle_validity() const {
  return _internal_has_can_rx_steering_angle_validity();
}
inline void Vehicle1_4f0::clear_can_rx_steering_angle_validity() {
  can_rx_steering_angle_validity_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::_internal_can_rx_steering_angle_validity() const {
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType >(can_rx_steering_angle_validity_);
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType Vehicle1_4f0::can_rx_steering_angle_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_validity)
  return _internal_can_rx_steering_angle_validity();
}
inline void Vehicle1_4f0::_internal_set_can_rx_steering_angle_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  can_rx_steering_angle_validity_ = value;
}
inline void Vehicle1_4f0::set_can_rx_steering_angle_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType value) {
  _internal_set_can_rx_steering_angle_validity(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_validity)
}

// optional int32 can_rx_steering_angle_rate = 2;
inline bool Vehicle1_4f0::_internal_has_can_rx_steering_angle_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_steering_angle_rate() const {
  return _internal_has_can_rx_steering_angle_rate();
}
inline void Vehicle1_4f0::clear_can_rx_steering_angle_rate() {
  can_rx_steering_angle_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle1_4f0::_internal_can_rx_steering_angle_rate() const {
  return can_rx_steering_angle_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle1_4f0::can_rx_steering_angle_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_rate)
  return _internal_can_rx_steering_angle_rate();
}
inline void Vehicle1_4f0::_internal_set_can_rx_steering_angle_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_rx_steering_angle_rate_ = value;
}
inline void Vehicle1_4f0::set_can_rx_steering_angle_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_steering_angle_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_rate)
}

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_signType can_rx_steering_angle_sign = 3;
inline bool Vehicle1_4f0::_internal_has_can_rx_steering_angle_sign() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_steering_angle_sign() const {
  return _internal_has_can_rx_steering_angle_sign();
}
inline void Vehicle1_4f0::clear_can_rx_steering_angle_sign() {
  can_rx_steering_angle_sign_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::_internal_can_rx_steering_angle_sign() const {
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType >(can_rx_steering_angle_sign_);
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType Vehicle1_4f0::can_rx_steering_angle_sign() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_sign)
  return _internal_can_rx_steering_angle_sign();
}
inline void Vehicle1_4f0::_internal_set_can_rx_steering_angle_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  can_rx_steering_angle_sign_ = value;
}
inline void Vehicle1_4f0::set_can_rx_steering_angle_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType value) {
  _internal_set_can_rx_steering_angle_sign(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_sign)
}

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_steering_angle_rate_signType can_rx_steering_angle_rate_sign = 4;
inline bool Vehicle1_4f0::_internal_has_can_rx_steering_angle_rate_sign() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_steering_angle_rate_sign() const {
  return _internal_has_can_rx_steering_angle_rate_sign();
}
inline void Vehicle1_4f0::clear_can_rx_steering_angle_rate_sign() {
  can_rx_steering_angle_rate_sign_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::_internal_can_rx_steering_angle_rate_sign() const {
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType >(can_rx_steering_angle_rate_sign_);
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType Vehicle1_4f0::can_rx_steering_angle_rate_sign() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_rate_sign)
  return _internal_can_rx_steering_angle_rate_sign();
}
inline void Vehicle1_4f0::_internal_set_can_rx_steering_angle_rate_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  can_rx_steering_angle_rate_sign_ = value;
}
inline void Vehicle1_4f0::set_can_rx_steering_angle_rate_sign(::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType value) {
  _internal_set_can_rx_steering_angle_rate_sign(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle_rate_sign)
}

// optional int32 can_rx_steering_angle = 5;
inline bool Vehicle1_4f0::_internal_has_can_rx_steering_angle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_steering_angle() const {
  return _internal_has_can_rx_steering_angle();
}
inline void Vehicle1_4f0::clear_can_rx_steering_angle() {
  can_rx_steering_angle_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle1_4f0::_internal_can_rx_steering_angle() const {
  return can_rx_steering_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle1_4f0::can_rx_steering_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle)
  return _internal_can_rx_steering_angle();
}
inline void Vehicle1_4f0::_internal_set_can_rx_steering_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_rx_steering_angle_ = value;
}
inline void Vehicle1_4f0::set_can_rx_steering_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_steering_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_steering_angle)
}

// optional int32 can_rx_radius_curvature = 6;
inline bool Vehicle1_4f0::_internal_has_can_rx_radius_curvature() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_radius_curvature() const {
  return _internal_has_can_rx_radius_curvature();
}
inline void Vehicle1_4f0::clear_can_rx_radius_curvature() {
  can_rx_radius_curvature_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle1_4f0::_internal_can_rx_radius_curvature() const {
  return can_rx_radius_curvature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle1_4f0::can_rx_radius_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_radius_curvature)
  return _internal_can_rx_radius_curvature();
}
inline void Vehicle1_4f0::_internal_set_can_rx_radius_curvature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  can_rx_radius_curvature_ = value;
}
inline void Vehicle1_4f0::set_can_rx_radius_curvature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_radius_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_radius_curvature)
}

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_yaw_rate_validityType can_rx_yaw_rate_validity = 7;
inline bool Vehicle1_4f0::_internal_has_can_rx_yaw_rate_validity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_yaw_rate_validity() const {
  return _internal_has_can_rx_yaw_rate_validity();
}
inline void Vehicle1_4f0::clear_can_rx_yaw_rate_validity() {
  can_rx_yaw_rate_validity_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::_internal_can_rx_yaw_rate_validity() const {
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType >(can_rx_yaw_rate_validity_);
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType Vehicle1_4f0::can_rx_yaw_rate_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_yaw_rate_validity)
  return _internal_can_rx_yaw_rate_validity();
}
inline void Vehicle1_4f0::_internal_set_can_rx_yaw_rate_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  can_rx_yaw_rate_validity_ = value;
}
inline void Vehicle1_4f0::set_can_rx_yaw_rate_validity(::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType value) {
  _internal_set_can_rx_yaw_rate_validity(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_yaw_rate_validity)
}

// optional double can_rx_yaw_rate = 8;
inline bool Vehicle1_4f0::_internal_has_can_rx_yaw_rate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_yaw_rate() const {
  return _internal_has_can_rx_yaw_rate();
}
inline void Vehicle1_4f0::clear_can_rx_yaw_rate() {
  can_rx_yaw_rate_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Vehicle1_4f0::_internal_can_rx_yaw_rate() const {
  return can_rx_yaw_rate_;
}
inline double Vehicle1_4f0::can_rx_yaw_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_yaw_rate)
  return _internal_can_rx_yaw_rate();
}
inline void Vehicle1_4f0::_internal_set_can_rx_yaw_rate(double value) {
  _has_bits_[0] |= 0x00000040u;
  can_rx_yaw_rate_ = value;
}
inline void Vehicle1_4f0::set_can_rx_yaw_rate(double value) {
  _internal_set_can_rx_yaw_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_yaw_rate)
}

// optional .apollo.drivers.Vehicle1_4f0.Can_rx_vehicle_speed_directionType can_rx_vehicle_speed_direction = 9;
inline bool Vehicle1_4f0::_internal_has_can_rx_vehicle_speed_direction() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_vehicle_speed_direction() const {
  return _internal_has_can_rx_vehicle_speed_direction();
}
inline void Vehicle1_4f0::clear_can_rx_vehicle_speed_direction() {
  can_rx_vehicle_speed_direction_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::_internal_can_rx_vehicle_speed_direction() const {
  return static_cast< ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType >(can_rx_vehicle_speed_direction_);
}
inline ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType Vehicle1_4f0::can_rx_vehicle_speed_direction() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_vehicle_speed_direction)
  return _internal_can_rx_vehicle_speed_direction();
}
inline void Vehicle1_4f0::_internal_set_can_rx_vehicle_speed_direction(::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType value) {
  assert(::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  can_rx_vehicle_speed_direction_ = value;
}
inline void Vehicle1_4f0::set_can_rx_vehicle_speed_direction(::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType value) {
  _internal_set_can_rx_vehicle_speed_direction(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_vehicle_speed_direction)
}

// optional double can_rx_vehicle_speed = 10;
inline bool Vehicle1_4f0::_internal_has_can_rx_vehicle_speed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vehicle1_4f0::has_can_rx_vehicle_speed() const {
  return _internal_has_can_rx_vehicle_speed();
}
inline void Vehicle1_4f0::clear_can_rx_vehicle_speed() {
  can_rx_vehicle_speed_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Vehicle1_4f0::_internal_can_rx_vehicle_speed() const {
  return can_rx_vehicle_speed_;
}
inline double Vehicle1_4f0::can_rx_vehicle_speed() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle1_4f0.can_rx_vehicle_speed)
  return _internal_can_rx_vehicle_speed();
}
inline void Vehicle1_4f0::_internal_set_can_rx_vehicle_speed(double value) {
  _has_bits_[0] |= 0x00000200u;
  can_rx_vehicle_speed_ = value;
}
inline void Vehicle1_4f0::set_can_rx_vehicle_speed(double value) {
  _internal_set_can_rx_vehicle_speed(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle1_4f0.can_rx_vehicle_speed)
}

// -------------------------------------------------------------------

// Esr_sim1_5c0

// optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_track_idType can_rx_sim_track_id = 1;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_track_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_track_id() const {
  return _internal_has_can_rx_sim_track_id();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_track_id() {
  can_rx_sim_track_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::_internal_can_rx_sim_track_id() const {
  return static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType >(can_rx_sim_track_id_);
}
inline ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType Esr_sim1_5c0::can_rx_sim_track_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_track_id)
  return _internal_can_rx_sim_track_id();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_track_id(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType value) {
  assert(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  can_rx_sim_track_id_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_track_id(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType value) {
  _internal_set_can_rx_sim_track_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_track_id)
}

// optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_statusType can_rx_sim_status = 2;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_status() const {
  return _internal_has_can_rx_sim_status();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_status() {
  can_rx_sim_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::_internal_can_rx_sim_status() const {
  return static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType >(can_rx_sim_status_);
}
inline ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType Esr_sim1_5c0::can_rx_sim_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_status)
  return _internal_can_rx_sim_status();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_status(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType value) {
  assert(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  can_rx_sim_status_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_status(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType value) {
  _internal_set_can_rx_sim_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_status)
}

// optional double can_rx_sim_range_rate = 3;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_range_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_range_rate() const {
  return _internal_has_can_rx_sim_range_rate();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_range_rate() {
  can_rx_sim_range_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Esr_sim1_5c0::_internal_can_rx_sim_range_rate() const {
  return can_rx_sim_range_rate_;
}
inline double Esr_sim1_5c0::can_rx_sim_range_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range_rate)
  return _internal_can_rx_sim_range_rate();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_range_rate(double value) {
  _has_bits_[0] |= 0x00000004u;
  can_rx_sim_range_rate_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_range_rate(double value) {
  _internal_set_can_rx_sim_range_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range_rate)
}

// optional double can_rx_sim_range_accel = 4;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_range_accel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_range_accel() const {
  return _internal_has_can_rx_sim_range_accel();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_range_accel() {
  can_rx_sim_range_accel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Esr_sim1_5c0::_internal_can_rx_sim_range_accel() const {
  return can_rx_sim_range_accel_;
}
inline double Esr_sim1_5c0::can_rx_sim_range_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range_accel)
  return _internal_can_rx_sim_range_accel();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_range_accel(double value) {
  _has_bits_[0] |= 0x00000008u;
  can_rx_sim_range_accel_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_range_accel(double value) {
  _internal_set_can_rx_sim_range_accel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range_accel)
}

// optional int32 can_rx_sim_range = 5;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_range() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_range() const {
  return _internal_has_can_rx_sim_range();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_range() {
  can_rx_sim_range_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_sim1_5c0::_internal_can_rx_sim_range() const {
  return can_rx_sim_range_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_sim1_5c0::can_rx_sim_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range)
  return _internal_can_rx_sim_range();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  can_rx_sim_range_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_sim_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_range)
}

// optional double can_rx_sim_lat_rate = 6;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_lat_rate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_lat_rate() const {
  return _internal_has_can_rx_sim_lat_rate();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_lat_rate() {
  can_rx_sim_lat_rate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Esr_sim1_5c0::_internal_can_rx_sim_lat_rate() const {
  return can_rx_sim_lat_rate_;
}
inline double Esr_sim1_5c0::can_rx_sim_lat_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_lat_rate)
  return _internal_can_rx_sim_lat_rate();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_lat_rate(double value) {
  _has_bits_[0] |= 0x00000010u;
  can_rx_sim_lat_rate_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_lat_rate(double value) {
  _internal_set_can_rx_sim_lat_rate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_lat_rate)
}

// optional double can_rx_sim_lat_pos = 7;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_lat_pos() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_lat_pos() const {
  return _internal_has_can_rx_sim_lat_pos();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_lat_pos() {
  can_rx_sim_lat_pos_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Esr_sim1_5c0::_internal_can_rx_sim_lat_pos() const {
  return can_rx_sim_lat_pos_;
}
inline double Esr_sim1_5c0::can_rx_sim_lat_pos() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_lat_pos)
  return _internal_can_rx_sim_lat_pos();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_lat_pos(double value) {
  _has_bits_[0] |= 0x00000080u;
  can_rx_sim_lat_pos_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_lat_pos(double value) {
  _internal_set_can_rx_sim_lat_pos(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_lat_pos)
}

// optional .apollo.drivers.Esr_sim1_5c0.Can_rx_sim_functionType can_rx_sim_function = 8;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_function() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_function() const {
  return _internal_has_can_rx_sim_function();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_function() {
  can_rx_sim_function_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::_internal_can_rx_sim_function() const {
  return static_cast< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType >(can_rx_sim_function_);
}
inline ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType Esr_sim1_5c0::can_rx_sim_function() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_function)
  return _internal_can_rx_sim_function();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_function(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType value) {
  assert(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  can_rx_sim_function_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_function(::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType value) {
  _internal_set_can_rx_sim_function(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_function)
}

// optional double can_rx_sim_angle = 9;
inline bool Esr_sim1_5c0::_internal_has_can_rx_sim_angle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Esr_sim1_5c0::has_can_rx_sim_angle() const {
  return _internal_has_can_rx_sim_angle();
}
inline void Esr_sim1_5c0::clear_can_rx_sim_angle() {
  can_rx_sim_angle_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Esr_sim1_5c0::_internal_can_rx_sim_angle() const {
  return can_rx_sim_angle_;
}
inline double Esr_sim1_5c0::can_rx_sim_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_sim1_5c0.can_rx_sim_angle)
  return _internal_can_rx_sim_angle();
}
inline void Esr_sim1_5c0::_internal_set_can_rx_sim_angle(double value) {
  _has_bits_[0] |= 0x00000100u;
  can_rx_sim_angle_ = value;
}
inline void Esr_sim1_5c0::set_can_rx_sim_angle(double value) {
  _internal_set_can_rx_sim_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_sim1_5c0.can_rx_sim_angle)
}

// -------------------------------------------------------------------

// Esr_status1_4e0

// optional double can_tx_dsp_timestamp = 1;
inline bool Esr_status1_4e0::_internal_has_can_tx_dsp_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status1_4e0::has_can_tx_dsp_timestamp() const {
  return _internal_has_can_tx_dsp_timestamp();
}
inline void Esr_status1_4e0::clear_can_tx_dsp_timestamp() {
  can_tx_dsp_timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Esr_status1_4e0::_internal_can_tx_dsp_timestamp() const {
  return can_tx_dsp_timestamp_;
}
inline double Esr_status1_4e0::can_tx_dsp_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status1_4e0.can_tx_dsp_timestamp)
  return _internal_can_tx_dsp_timestamp();
}
inline void Esr_status1_4e0::_internal_set_can_tx_dsp_timestamp(double value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_dsp_timestamp_ = value;
}
inline void Esr_status1_4e0::set_can_tx_dsp_timestamp(double value) {
  _internal_set_can_tx_dsp_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status1_4e0.can_tx_dsp_timestamp)
}

// optional bool can_tx_comm_error = 2;
inline bool Esr_status1_4e0::_internal_has_can_tx_comm_error() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status1_4e0::has_can_tx_comm_error() const {
  return _internal_has_can_tx_comm_error();
}
inline void Esr_status1_4e0::clear_can_tx_comm_error() {
  can_tx_comm_error_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Esr_status1_4e0::_internal_can_tx_comm_error() const {
  return can_tx_comm_error_;
}
inline bool Esr_status1_4e0::can_tx_comm_error() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status1_4e0.can_tx_comm_error)
  return _internal_can_tx_comm_error();
}
inline void Esr_status1_4e0::_internal_set_can_tx_comm_error(bool value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_comm_error_ = value;
}
inline void Esr_status1_4e0::set_can_tx_comm_error(bool value) {
  _internal_set_can_tx_comm_error(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status1_4e0.can_tx_comm_error)
}

// optional double can_tx_yaw_rate_calc = 3;
inline bool Esr_status1_4e0::_internal_has_can_tx_yaw_rate_calc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status1_4e0::has_can_tx_yaw_rate_calc() const {
  return _internal_has_can_tx_yaw_rate_calc();
}
inline void Esr_status1_4e0::clear_can_tx_yaw_rate_calc() {
  can_tx_yaw_rate_calc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Esr_status1_4e0::_internal_can_tx_yaw_rate_calc() const {
  return can_tx_yaw_rate_calc_;
}
inline double Esr_status1_4e0::can_tx_yaw_rate_calc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status1_4e0.can_tx_yaw_rate_calc)
  return _internal_can_tx_yaw_rate_calc();
}
inline void Esr_status1_4e0::_internal_set_can_tx_yaw_rate_calc(double value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_yaw_rate_calc_ = value;
}
inline void Esr_status1_4e0::set_can_tx_yaw_rate_calc(double value) {
  _internal_set_can_tx_yaw_rate_calc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status1_4e0.can_tx_yaw_rate_calc)
}

// optional double can_tx_vehicle_speed_calc = 4;
inline bool Esr_status1_4e0::_internal_has_can_tx_vehicle_speed_calc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status1_4e0::has_can_tx_vehicle_speed_calc() const {
  return _internal_has_can_tx_vehicle_speed_calc();
}
inline void Esr_status1_4e0::clear_can_tx_vehicle_speed_calc() {
  can_tx_vehicle_speed_calc_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Esr_status1_4e0::_internal_can_tx_vehicle_speed_calc() const {
  return can_tx_vehicle_speed_calc_;
}
inline double Esr_status1_4e0::can_tx_vehicle_speed_calc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status1_4e0.can_tx_vehicle_speed_calc)
  return _internal_can_tx_vehicle_speed_calc();
}
inline void Esr_status1_4e0::_internal_set_can_tx_vehicle_speed_calc(double value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_vehicle_speed_calc_ = value;
}
inline void Esr_status1_4e0::set_can_tx_vehicle_speed_calc(double value) {
  _internal_set_can_tx_vehicle_speed_calc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status1_4e0.can_tx_vehicle_speed_calc)
}

// optional int32 can_tx_scan_index = 5;
inline bool Esr_status1_4e0::_internal_has_can_tx_scan_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status1_4e0::has_can_tx_scan_index() const {
  return _internal_has_can_tx_scan_index();
}
inline void Esr_status1_4e0::clear_can_tx_scan_index() {
  can_tx_scan_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status1_4e0::_internal_can_tx_scan_index() const {
  return can_tx_scan_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status1_4e0::can_tx_scan_index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status1_4e0.can_tx_scan_index)
  return _internal_can_tx_scan_index();
}
inline void Esr_status1_4e0::_internal_set_can_tx_scan_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_scan_index_ = value;
}
inline void Esr_status1_4e0::set_can_tx_scan_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_scan_index(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status1_4e0.can_tx_scan_index)
}

// optional int32 can_tx_rolling_count_1 = 6;
inline bool Esr_status1_4e0::_internal_has_can_tx_rolling_count_1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_status1_4e0::has_can_tx_rolling_count_1() const {
  return _internal_has_can_tx_rolling_count_1();
}
inline void Esr_status1_4e0::clear_can_tx_rolling_count_1() {
  can_tx_rolling_count_1_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status1_4e0::_internal_can_tx_rolling_count_1() const {
  return can_tx_rolling_count_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status1_4e0::can_tx_rolling_count_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status1_4e0.can_tx_rolling_count_1)
  return _internal_can_tx_rolling_count_1();
}
inline void Esr_status1_4e0::_internal_set_can_tx_rolling_count_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  can_tx_rolling_count_1_ = value;
}
inline void Esr_status1_4e0::set_can_tx_rolling_count_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_rolling_count_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status1_4e0.can_tx_rolling_count_1)
}

// optional int32 can_tx_radius_curvature_calc = 7;
inline bool Esr_status1_4e0::_internal_has_can_tx_radius_curvature_calc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_status1_4e0::has_can_tx_radius_curvature_calc() const {
  return _internal_has_can_tx_radius_curvature_calc();
}
inline void Esr_status1_4e0::clear_can_tx_radius_curvature_calc() {
  can_tx_radius_curvature_calc_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status1_4e0::_internal_can_tx_radius_curvature_calc() const {
  return can_tx_radius_curvature_calc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status1_4e0::can_tx_radius_curvature_calc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status1_4e0.can_tx_radius_curvature_calc)
  return _internal_can_tx_radius_curvature_calc();
}
inline void Esr_status1_4e0::_internal_set_can_tx_radius_curvature_calc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  can_tx_radius_curvature_calc_ = value;
}
inline void Esr_status1_4e0::set_can_tx_radius_curvature_calc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_radius_curvature_calc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status1_4e0.can_tx_radius_curvature_calc)
}

// -------------------------------------------------------------------

// Esr_status2_4e1

// optional double can_tx_yaw_rate_bias = 1;
inline bool Esr_status2_4e1::_internal_has_can_tx_yaw_rate_bias() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_yaw_rate_bias() const {
  return _internal_has_can_tx_yaw_rate_bias();
}
inline void Esr_status2_4e1::clear_can_tx_yaw_rate_bias() {
  can_tx_yaw_rate_bias_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Esr_status2_4e1::_internal_can_tx_yaw_rate_bias() const {
  return can_tx_yaw_rate_bias_;
}
inline double Esr_status2_4e1::can_tx_yaw_rate_bias() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_yaw_rate_bias)
  return _internal_can_tx_yaw_rate_bias();
}
inline void Esr_status2_4e1::_internal_set_can_tx_yaw_rate_bias(double value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_yaw_rate_bias_ = value;
}
inline void Esr_status2_4e1::set_can_tx_yaw_rate_bias(double value) {
  _internal_set_can_tx_yaw_rate_bias(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_yaw_rate_bias)
}

// optional double can_tx_veh_spd_comp_factor = 2;
inline bool Esr_status2_4e1::_internal_has_can_tx_veh_spd_comp_factor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_veh_spd_comp_factor() const {
  return _internal_has_can_tx_veh_spd_comp_factor();
}
inline void Esr_status2_4e1::clear_can_tx_veh_spd_comp_factor() {
  can_tx_veh_spd_comp_factor_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Esr_status2_4e1::_internal_can_tx_veh_spd_comp_factor() const {
  return can_tx_veh_spd_comp_factor_;
}
inline double Esr_status2_4e1::can_tx_veh_spd_comp_factor() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_veh_spd_comp_factor)
  return _internal_can_tx_veh_spd_comp_factor();
}
inline void Esr_status2_4e1::_internal_set_can_tx_veh_spd_comp_factor(double value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_veh_spd_comp_factor_ = value;
}
inline void Esr_status2_4e1::set_can_tx_veh_spd_comp_factor(double value) {
  _internal_set_can_tx_veh_spd_comp_factor(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_veh_spd_comp_factor)
}

// optional int32 can_tx_sw_version_dsp = 3;
inline bool Esr_status2_4e1::_internal_has_can_tx_sw_version_dsp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_sw_version_dsp() const {
  return _internal_has_can_tx_sw_version_dsp();
}
inline void Esr_status2_4e1::clear_can_tx_sw_version_dsp() {
  can_tx_sw_version_dsp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::_internal_can_tx_sw_version_dsp() const {
  return can_tx_sw_version_dsp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::can_tx_sw_version_dsp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_sw_version_dsp)
  return _internal_can_tx_sw_version_dsp();
}
inline void Esr_status2_4e1::_internal_set_can_tx_sw_version_dsp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_sw_version_dsp_ = value;
}
inline void Esr_status2_4e1::set_can_tx_sw_version_dsp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_sw_version_dsp(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_sw_version_dsp)
}

// optional int32 can_tx_temperature = 4;
inline bool Esr_status2_4e1::_internal_has_can_tx_temperature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_temperature() const {
  return _internal_has_can_tx_temperature();
}
inline void Esr_status2_4e1::clear_can_tx_temperature() {
  can_tx_temperature_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::_internal_can_tx_temperature() const {
  return can_tx_temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::can_tx_temperature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_temperature)
  return _internal_can_tx_temperature();
}
inline void Esr_status2_4e1::_internal_set_can_tx_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_temperature_ = value;
}
inline void Esr_status2_4e1::set_can_tx_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_temperature(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_temperature)
}

// optional .apollo.drivers.Esr_status2_4e1.Can_tx_raw_data_modeType can_tx_raw_data_mode = 5;
inline bool Esr_status2_4e1::_internal_has_can_tx_raw_data_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_raw_data_mode() const {
  return _internal_has_can_tx_raw_data_mode();
}
inline void Esr_status2_4e1::clear_can_tx_raw_data_mode() {
  can_tx_raw_data_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::_internal_can_tx_raw_data_mode() const {
  return static_cast< ::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType >(can_tx_raw_data_mode_);
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType Esr_status2_4e1::can_tx_raw_data_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_raw_data_mode)
  return _internal_can_tx_raw_data_mode();
}
inline void Esr_status2_4e1::_internal_set_can_tx_raw_data_mode(::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType value) {
  assert(::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  can_tx_raw_data_mode_ = value;
}
inline void Esr_status2_4e1::set_can_tx_raw_data_mode(::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType value) {
  _internal_set_can_tx_raw_data_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_raw_data_mode)
}

// optional .apollo.drivers.Esr_status2_4e1.Can_tx_range_perf_errorType can_tx_range_perf_error = 6;
inline bool Esr_status2_4e1::_internal_has_can_tx_range_perf_error() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_range_perf_error() const {
  return _internal_has_can_tx_range_perf_error();
}
inline void Esr_status2_4e1::clear_can_tx_range_perf_error() {
  can_tx_range_perf_error_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::_internal_can_tx_range_perf_error() const {
  return static_cast< ::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType >(can_tx_range_perf_error_);
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType Esr_status2_4e1::can_tx_range_perf_error() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_range_perf_error)
  return _internal_can_tx_range_perf_error();
}
inline void Esr_status2_4e1::_internal_set_can_tx_range_perf_error(::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType value) {
  assert(::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  can_tx_range_perf_error_ = value;
}
inline void Esr_status2_4e1::set_can_tx_range_perf_error(::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType value) {
  _internal_set_can_tx_range_perf_error(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_range_perf_error)
}

// optional .apollo.drivers.Esr_status2_4e1.Can_tx_overheat_errorType can_tx_overheat_error = 7;
inline bool Esr_status2_4e1::_internal_has_can_tx_overheat_error() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_overheat_error() const {
  return _internal_has_can_tx_overheat_error();
}
inline void Esr_status2_4e1::clear_can_tx_overheat_error() {
  can_tx_overheat_error_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::_internal_can_tx_overheat_error() const {
  return static_cast< ::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType >(can_tx_overheat_error_);
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType Esr_status2_4e1::can_tx_overheat_error() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_overheat_error)
  return _internal_can_tx_overheat_error();
}
inline void Esr_status2_4e1::_internal_set_can_tx_overheat_error(::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType value) {
  assert(::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  can_tx_overheat_error_ = value;
}
inline void Esr_status2_4e1::set_can_tx_overheat_error(::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType value) {
  _internal_set_can_tx_overheat_error(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_overheat_error)
}

// optional int32 can_tx_maximum_tracks_ack = 8;
inline bool Esr_status2_4e1::_internal_has_can_tx_maximum_tracks_ack() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_maximum_tracks_ack() const {
  return _internal_has_can_tx_maximum_tracks_ack();
}
inline void Esr_status2_4e1::clear_can_tx_maximum_tracks_ack() {
  can_tx_maximum_tracks_ack_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::_internal_can_tx_maximum_tracks_ack() const {
  return can_tx_maximum_tracks_ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::can_tx_maximum_tracks_ack() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_maximum_tracks_ack)
  return _internal_can_tx_maximum_tracks_ack();
}
inline void Esr_status2_4e1::_internal_set_can_tx_maximum_tracks_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  can_tx_maximum_tracks_ack_ = value;
}
inline void Esr_status2_4e1::set_can_tx_maximum_tracks_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_maximum_tracks_ack(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_maximum_tracks_ack)
}

// optional .apollo.drivers.Esr_status2_4e1.Can_tx_internal_errorType can_tx_internal_error = 9;
inline bool Esr_status2_4e1::_internal_has_can_tx_internal_error() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_internal_error() const {
  return _internal_has_can_tx_internal_error();
}
inline void Esr_status2_4e1::clear_can_tx_internal_error() {
  can_tx_internal_error_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::_internal_can_tx_internal_error() const {
  return static_cast< ::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType >(can_tx_internal_error_);
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType Esr_status2_4e1::can_tx_internal_error() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_internal_error)
  return _internal_can_tx_internal_error();
}
inline void Esr_status2_4e1::_internal_set_can_tx_internal_error(::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType value) {
  assert(::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  can_tx_internal_error_ = value;
}
inline void Esr_status2_4e1::set_can_tx_internal_error(::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType value) {
  _internal_set_can_tx_internal_error(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_internal_error)
}

// optional .apollo.drivers.Esr_status2_4e1.Can_tx_grouping_modeType can_tx_grouping_mode = 10;
inline bool Esr_status2_4e1::_internal_has_can_tx_grouping_mode() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_grouping_mode() const {
  return _internal_has_can_tx_grouping_mode();
}
inline void Esr_status2_4e1::clear_can_tx_grouping_mode() {
  can_tx_grouping_mode_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::_internal_can_tx_grouping_mode() const {
  return static_cast< ::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType >(can_tx_grouping_mode_);
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType Esr_status2_4e1::can_tx_grouping_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_grouping_mode)
  return _internal_can_tx_grouping_mode();
}
inline void Esr_status2_4e1::_internal_set_can_tx_grouping_mode(::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType value) {
  assert(::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  can_tx_grouping_mode_ = value;
}
inline void Esr_status2_4e1::set_can_tx_grouping_mode(::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType value) {
  _internal_set_can_tx_grouping_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_grouping_mode)
}

// optional .apollo.drivers.Esr_status2_4e1.Can_tx_xcvr_operationalType can_tx_xcvr_operational = 11;
inline bool Esr_status2_4e1::_internal_has_can_tx_xcvr_operational() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_xcvr_operational() const {
  return _internal_has_can_tx_xcvr_operational();
}
inline void Esr_status2_4e1::clear_can_tx_xcvr_operational() {
  can_tx_xcvr_operational_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::_internal_can_tx_xcvr_operational() const {
  return static_cast< ::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType >(can_tx_xcvr_operational_);
}
inline ::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType Esr_status2_4e1::can_tx_xcvr_operational() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_xcvr_operational)
  return _internal_can_tx_xcvr_operational();
}
inline void Esr_status2_4e1::_internal_set_can_tx_xcvr_operational(::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType value) {
  assert(::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  can_tx_xcvr_operational_ = value;
}
inline void Esr_status2_4e1::set_can_tx_xcvr_operational(::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType value) {
  _internal_set_can_tx_xcvr_operational(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_xcvr_operational)
}

// optional int32 can_tx_steering_angle_ack = 12;
inline bool Esr_status2_4e1::_internal_has_can_tx_steering_angle_ack() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_steering_angle_ack() const {
  return _internal_has_can_tx_steering_angle_ack();
}
inline void Esr_status2_4e1::clear_can_tx_steering_angle_ack() {
  can_tx_steering_angle_ack_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::_internal_can_tx_steering_angle_ack() const {
  return can_tx_steering_angle_ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::can_tx_steering_angle_ack() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_steering_angle_ack)
  return _internal_can_tx_steering_angle_ack();
}
inline void Esr_status2_4e1::_internal_set_can_tx_steering_angle_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  can_tx_steering_angle_ack_ = value;
}
inline void Esr_status2_4e1::set_can_tx_steering_angle_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_steering_angle_ack(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_steering_angle_ack)
}

// optional int32 can_tx_rolling_count_2 = 13;
inline bool Esr_status2_4e1::_internal_has_can_tx_rolling_count_2() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Esr_status2_4e1::has_can_tx_rolling_count_2() const {
  return _internal_has_can_tx_rolling_count_2();
}
inline void Esr_status2_4e1::clear_can_tx_rolling_count_2() {
  can_tx_rolling_count_2_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::_internal_can_tx_rolling_count_2() const {
  return can_tx_rolling_count_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status2_4e1::can_tx_rolling_count_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status2_4e1.can_tx_rolling_count_2)
  return _internal_can_tx_rolling_count_2();
}
inline void Esr_status2_4e1::_internal_set_can_tx_rolling_count_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  can_tx_rolling_count_2_ = value;
}
inline void Esr_status2_4e1::set_can_tx_rolling_count_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_rolling_count_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status2_4e1.can_tx_rolling_count_2)
}

// -------------------------------------------------------------------

// Esr_status8_5e7

// optional int32 can_tx_history_fault_7 = 1;
inline bool Esr_status8_5e7::_internal_has_can_tx_history_fault_7() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status8_5e7::has_can_tx_history_fault_7() const {
  return _internal_has_can_tx_history_fault_7();
}
inline void Esr_status8_5e7::clear_can_tx_history_fault_7() {
  can_tx_history_fault_7_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::_internal_can_tx_history_fault_7() const {
  return can_tx_history_fault_7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::can_tx_history_fault_7() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_7)
  return _internal_can_tx_history_fault_7();
}
inline void Esr_status8_5e7::_internal_set_can_tx_history_fault_7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_history_fault_7_ = value;
}
inline void Esr_status8_5e7::set_can_tx_history_fault_7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_history_fault_7(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_7)
}

// optional int32 can_tx_history_fault_6 = 2;
inline bool Esr_status8_5e7::_internal_has_can_tx_history_fault_6() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status8_5e7::has_can_tx_history_fault_6() const {
  return _internal_has_can_tx_history_fault_6();
}
inline void Esr_status8_5e7::clear_can_tx_history_fault_6() {
  can_tx_history_fault_6_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::_internal_can_tx_history_fault_6() const {
  return can_tx_history_fault_6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::can_tx_history_fault_6() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_6)
  return _internal_can_tx_history_fault_6();
}
inline void Esr_status8_5e7::_internal_set_can_tx_history_fault_6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_history_fault_6_ = value;
}
inline void Esr_status8_5e7::set_can_tx_history_fault_6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_history_fault_6(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_6)
}

// optional int32 can_tx_history_fault_5 = 3;
inline bool Esr_status8_5e7::_internal_has_can_tx_history_fault_5() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status8_5e7::has_can_tx_history_fault_5() const {
  return _internal_has_can_tx_history_fault_5();
}
inline void Esr_status8_5e7::clear_can_tx_history_fault_5() {
  can_tx_history_fault_5_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::_internal_can_tx_history_fault_5() const {
  return can_tx_history_fault_5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::can_tx_history_fault_5() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_5)
  return _internal_can_tx_history_fault_5();
}
inline void Esr_status8_5e7::_internal_set_can_tx_history_fault_5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_history_fault_5_ = value;
}
inline void Esr_status8_5e7::set_can_tx_history_fault_5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_history_fault_5(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_5)
}

// optional int32 can_tx_history_fault_4 = 4;
inline bool Esr_status8_5e7::_internal_has_can_tx_history_fault_4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status8_5e7::has_can_tx_history_fault_4() const {
  return _internal_has_can_tx_history_fault_4();
}
inline void Esr_status8_5e7::clear_can_tx_history_fault_4() {
  can_tx_history_fault_4_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::_internal_can_tx_history_fault_4() const {
  return can_tx_history_fault_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::can_tx_history_fault_4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_4)
  return _internal_can_tx_history_fault_4();
}
inline void Esr_status8_5e7::_internal_set_can_tx_history_fault_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_history_fault_4_ = value;
}
inline void Esr_status8_5e7::set_can_tx_history_fault_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_history_fault_4(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_4)
}

// optional int32 can_tx_history_fault_3 = 5;
inline bool Esr_status8_5e7::_internal_has_can_tx_history_fault_3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status8_5e7::has_can_tx_history_fault_3() const {
  return _internal_has_can_tx_history_fault_3();
}
inline void Esr_status8_5e7::clear_can_tx_history_fault_3() {
  can_tx_history_fault_3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::_internal_can_tx_history_fault_3() const {
  return can_tx_history_fault_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::can_tx_history_fault_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_3)
  return _internal_can_tx_history_fault_3();
}
inline void Esr_status8_5e7::_internal_set_can_tx_history_fault_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_history_fault_3_ = value;
}
inline void Esr_status8_5e7::set_can_tx_history_fault_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_history_fault_3(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_3)
}

// optional int32 can_tx_history_fault_2 = 6;
inline bool Esr_status8_5e7::_internal_has_can_tx_history_fault_2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_status8_5e7::has_can_tx_history_fault_2() const {
  return _internal_has_can_tx_history_fault_2();
}
inline void Esr_status8_5e7::clear_can_tx_history_fault_2() {
  can_tx_history_fault_2_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::_internal_can_tx_history_fault_2() const {
  return can_tx_history_fault_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::can_tx_history_fault_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_2)
  return _internal_can_tx_history_fault_2();
}
inline void Esr_status8_5e7::_internal_set_can_tx_history_fault_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  can_tx_history_fault_2_ = value;
}
inline void Esr_status8_5e7::set_can_tx_history_fault_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_history_fault_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_2)
}

// optional int32 can_tx_history_fault_1 = 7;
inline bool Esr_status8_5e7::_internal_has_can_tx_history_fault_1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_status8_5e7::has_can_tx_history_fault_1() const {
  return _internal_has_can_tx_history_fault_1();
}
inline void Esr_status8_5e7::clear_can_tx_history_fault_1() {
  can_tx_history_fault_1_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::_internal_can_tx_history_fault_1() const {
  return can_tx_history_fault_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::can_tx_history_fault_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_1)
  return _internal_can_tx_history_fault_1();
}
inline void Esr_status8_5e7::_internal_set_can_tx_history_fault_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  can_tx_history_fault_1_ = value;
}
inline void Esr_status8_5e7::set_can_tx_history_fault_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_history_fault_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_1)
}

// optional int32 can_tx_history_fault_0 = 8;
inline bool Esr_status8_5e7::_internal_has_can_tx_history_fault_0() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Esr_status8_5e7::has_can_tx_history_fault_0() const {
  return _internal_has_can_tx_history_fault_0();
}
inline void Esr_status8_5e7::clear_can_tx_history_fault_0() {
  can_tx_history_fault_0_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::_internal_can_tx_history_fault_0() const {
  return can_tx_history_fault_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status8_5e7::can_tx_history_fault_0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_0)
  return _internal_can_tx_history_fault_0();
}
inline void Esr_status8_5e7::_internal_set_can_tx_history_fault_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  can_tx_history_fault_0_ = value;
}
inline void Esr_status8_5e7::set_can_tx_history_fault_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_history_fault_0(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status8_5e7.can_tx_history_fault_0)
}

// -------------------------------------------------------------------

// Esr_status7_5e6

// optional int32 can_tx_active_fault_7 = 1;
inline bool Esr_status7_5e6::_internal_has_can_tx_active_fault_7() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Esr_status7_5e6::has_can_tx_active_fault_7() const {
  return _internal_has_can_tx_active_fault_7();
}
inline void Esr_status7_5e6::clear_can_tx_active_fault_7() {
  can_tx_active_fault_7_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::_internal_can_tx_active_fault_7() const {
  return can_tx_active_fault_7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::can_tx_active_fault_7() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_7)
  return _internal_can_tx_active_fault_7();
}
inline void Esr_status7_5e6::_internal_set_can_tx_active_fault_7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  can_tx_active_fault_7_ = value;
}
inline void Esr_status7_5e6::set_can_tx_active_fault_7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_active_fault_7(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_7)
}

// optional int32 can_tx_active_fault_6 = 2;
inline bool Esr_status7_5e6::_internal_has_can_tx_active_fault_6() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Esr_status7_5e6::has_can_tx_active_fault_6() const {
  return _internal_has_can_tx_active_fault_6();
}
inline void Esr_status7_5e6::clear_can_tx_active_fault_6() {
  can_tx_active_fault_6_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::_internal_can_tx_active_fault_6() const {
  return can_tx_active_fault_6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::can_tx_active_fault_6() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_6)
  return _internal_can_tx_active_fault_6();
}
inline void Esr_status7_5e6::_internal_set_can_tx_active_fault_6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  can_tx_active_fault_6_ = value;
}
inline void Esr_status7_5e6::set_can_tx_active_fault_6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_active_fault_6(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_6)
}

// optional int32 can_tx_active_fault_5 = 3;
inline bool Esr_status7_5e6::_internal_has_can_tx_active_fault_5() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Esr_status7_5e6::has_can_tx_active_fault_5() const {
  return _internal_has_can_tx_active_fault_5();
}
inline void Esr_status7_5e6::clear_can_tx_active_fault_5() {
  can_tx_active_fault_5_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::_internal_can_tx_active_fault_5() const {
  return can_tx_active_fault_5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::can_tx_active_fault_5() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_5)
  return _internal_can_tx_active_fault_5();
}
inline void Esr_status7_5e6::_internal_set_can_tx_active_fault_5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  can_tx_active_fault_5_ = value;
}
inline void Esr_status7_5e6::set_can_tx_active_fault_5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_active_fault_5(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_5)
}

// optional int32 can_tx_active_fault_4 = 4;
inline bool Esr_status7_5e6::_internal_has_can_tx_active_fault_4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Esr_status7_5e6::has_can_tx_active_fault_4() const {
  return _internal_has_can_tx_active_fault_4();
}
inline void Esr_status7_5e6::clear_can_tx_active_fault_4() {
  can_tx_active_fault_4_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::_internal_can_tx_active_fault_4() const {
  return can_tx_active_fault_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::can_tx_active_fault_4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_4)
  return _internal_can_tx_active_fault_4();
}
inline void Esr_status7_5e6::_internal_set_can_tx_active_fault_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_tx_active_fault_4_ = value;
}
inline void Esr_status7_5e6::set_can_tx_active_fault_4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_active_fault_4(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_4)
}

// optional int32 can_tx_active_fault_3 = 5;
inline bool Esr_status7_5e6::_internal_has_can_tx_active_fault_3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Esr_status7_5e6::has_can_tx_active_fault_3() const {
  return _internal_has_can_tx_active_fault_3();
}
inline void Esr_status7_5e6::clear_can_tx_active_fault_3() {
  can_tx_active_fault_3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::_internal_can_tx_active_fault_3() const {
  return can_tx_active_fault_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::can_tx_active_fault_3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_3)
  return _internal_can_tx_active_fault_3();
}
inline void Esr_status7_5e6::_internal_set_can_tx_active_fault_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_tx_active_fault_3_ = value;
}
inline void Esr_status7_5e6::set_can_tx_active_fault_3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_active_fault_3(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_3)
}

// optional int32 can_tx_active_fault_2 = 6;
inline bool Esr_status7_5e6::_internal_has_can_tx_active_fault_2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Esr_status7_5e6::has_can_tx_active_fault_2() const {
  return _internal_has_can_tx_active_fault_2();
}
inline void Esr_status7_5e6::clear_can_tx_active_fault_2() {
  can_tx_active_fault_2_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::_internal_can_tx_active_fault_2() const {
  return can_tx_active_fault_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::can_tx_active_fault_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_2)
  return _internal_can_tx_active_fault_2();
}
inline void Esr_status7_5e6::_internal_set_can_tx_active_fault_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  can_tx_active_fault_2_ = value;
}
inline void Esr_status7_5e6::set_can_tx_active_fault_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_active_fault_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_2)
}

// optional int32 can_tx_active_fault_0 = 7;
inline bool Esr_status7_5e6::_internal_has_can_tx_active_fault_0() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Esr_status7_5e6::has_can_tx_active_fault_0() const {
  return _internal_has_can_tx_active_fault_0();
}
inline void Esr_status7_5e6::clear_can_tx_active_fault_0() {
  can_tx_active_fault_0_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::_internal_can_tx_active_fault_0() const {
  return can_tx_active_fault_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::can_tx_active_fault_0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_0)
  return _internal_can_tx_active_fault_0();
}
inline void Esr_status7_5e6::_internal_set_can_tx_active_fault_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  can_tx_active_fault_0_ = value;
}
inline void Esr_status7_5e6::set_can_tx_active_fault_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_active_fault_0(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_0)
}

// optional int32 can_tx_active_fault_1 = 8;
inline bool Esr_status7_5e6::_internal_has_can_tx_active_fault_1() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Esr_status7_5e6::has_can_tx_active_fault_1() const {
  return _internal_has_can_tx_active_fault_1();
}
inline void Esr_status7_5e6::clear_can_tx_active_fault_1() {
  can_tx_active_fault_1_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::_internal_can_tx_active_fault_1() const {
  return can_tx_active_fault_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Esr_status7_5e6::can_tx_active_fault_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_1)
  return _internal_can_tx_active_fault_1();
}
inline void Esr_status7_5e6::_internal_set_can_tx_active_fault_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  can_tx_active_fault_1_ = value;
}
inline void Esr_status7_5e6::set_can_tx_active_fault_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_tx_active_fault_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Esr_status7_5e6.can_tx_active_fault_1)
}

// -------------------------------------------------------------------

// Vehicle3_5f2

// optional int32 can_rx_serv_align_updates_need = 1;
inline bool Vehicle3_5f2::_internal_has_can_rx_serv_align_updates_need() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_serv_align_updates_need() const {
  return _internal_has_can_rx_serv_align_updates_need();
}
inline void Vehicle3_5f2::clear_can_rx_serv_align_updates_need() {
  can_rx_serv_align_updates_need_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle3_5f2::_internal_can_rx_serv_align_updates_need() const {
  return can_rx_serv_align_updates_need_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle3_5f2::can_rx_serv_align_updates_need() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_serv_align_updates_need)
  return _internal_can_rx_serv_align_updates_need();
}
inline void Vehicle3_5f2::_internal_set_can_rx_serv_align_updates_need(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  can_rx_serv_align_updates_need_ = value;
}
inline void Vehicle3_5f2::set_can_rx_serv_align_updates_need(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_serv_align_updates_need(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_serv_align_updates_need)
}

// optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_typeType can_rx_serv_align_type = 2;
inline bool Vehicle3_5f2::_internal_has_can_rx_serv_align_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_serv_align_type() const {
  return _internal_has_can_rx_serv_align_type();
}
inline void Vehicle3_5f2::clear_can_rx_serv_align_type() {
  can_rx_serv_align_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::_internal_can_rx_serv_align_type() const {
  return static_cast< ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType >(can_rx_serv_align_type_);
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType Vehicle3_5f2::can_rx_serv_align_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_serv_align_type)
  return _internal_can_rx_serv_align_type();
}
inline void Vehicle3_5f2::_internal_set_can_rx_serv_align_type(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType value) {
  assert(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  can_rx_serv_align_type_ = value;
}
inline void Vehicle3_5f2::set_can_rx_serv_align_type(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType value) {
  _internal_set_can_rx_serv_align_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_serv_align_type)
}

// optional .apollo.drivers.Vehicle3_5f2.Can_rx_serv_align_enableType can_rx_serv_align_enable = 3;
inline bool Vehicle3_5f2::_internal_has_can_rx_serv_align_enable() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_serv_align_enable() const {
  return _internal_has_can_rx_serv_align_enable();
}
inline void Vehicle3_5f2::clear_can_rx_serv_align_enable() {
  can_rx_serv_align_enable_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::_internal_can_rx_serv_align_enable() const {
  return static_cast< ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType >(can_rx_serv_align_enable_);
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType Vehicle3_5f2::can_rx_serv_align_enable() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_serv_align_enable)
  return _internal_can_rx_serv_align_enable();
}
inline void Vehicle3_5f2::_internal_set_can_rx_serv_align_enable(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType value) {
  assert(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  can_rx_serv_align_enable_ = value;
}
inline void Vehicle3_5f2::set_can_rx_serv_align_enable(::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType value) {
  _internal_set_can_rx_serv_align_enable(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_serv_align_enable)
}

// optional double can_rx_aalign_avg_ctr_total = 4;
inline bool Vehicle3_5f2::_internal_has_can_rx_aalign_avg_ctr_total() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_aalign_avg_ctr_total() const {
  return _internal_has_can_rx_aalign_avg_ctr_total();
}
inline void Vehicle3_5f2::clear_can_rx_aalign_avg_ctr_total() {
  can_rx_aalign_avg_ctr_total_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Vehicle3_5f2::_internal_can_rx_aalign_avg_ctr_total() const {
  return can_rx_aalign_avg_ctr_total_;
}
inline double Vehicle3_5f2::can_rx_aalign_avg_ctr_total() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_aalign_avg_ctr_total)
  return _internal_can_rx_aalign_avg_ctr_total();
}
inline void Vehicle3_5f2::_internal_set_can_rx_aalign_avg_ctr_total(double value) {
  _has_bits_[0] |= 0x00000004u;
  can_rx_aalign_avg_ctr_total_ = value;
}
inline void Vehicle3_5f2::set_can_rx_aalign_avg_ctr_total(double value) {
  _internal_set_can_rx_aalign_avg_ctr_total(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_aalign_avg_ctr_total)
}

// optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_convergedType can_rx_auto_align_converged = 5;
inline bool Vehicle3_5f2::_internal_has_can_rx_auto_align_converged() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_auto_align_converged() const {
  return _internal_has_can_rx_auto_align_converged();
}
inline void Vehicle3_5f2::clear_can_rx_auto_align_converged() {
  can_rx_auto_align_converged_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::_internal_can_rx_auto_align_converged() const {
  return static_cast< ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType >(can_rx_auto_align_converged_);
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType Vehicle3_5f2::can_rx_auto_align_converged() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_auto_align_converged)
  return _internal_can_rx_auto_align_converged();
}
inline void Vehicle3_5f2::_internal_set_can_rx_auto_align_converged(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType value) {
  assert(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  can_rx_auto_align_converged_ = value;
}
inline void Vehicle3_5f2::set_can_rx_auto_align_converged(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType value) {
  _internal_set_can_rx_auto_align_converged(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_auto_align_converged)
}

// optional .apollo.drivers.Vehicle3_5f2.Can_rx_auto_align_disableType can_rx_auto_align_disable = 6;
inline bool Vehicle3_5f2::_internal_has_can_rx_auto_align_disable() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_auto_align_disable() const {
  return _internal_has_can_rx_auto_align_disable();
}
inline void Vehicle3_5f2::clear_can_rx_auto_align_disable() {
  can_rx_auto_align_disable_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::_internal_can_rx_auto_align_disable() const {
  return static_cast< ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType >(can_rx_auto_align_disable_);
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType Vehicle3_5f2::can_rx_auto_align_disable() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_auto_align_disable)
  return _internal_can_rx_auto_align_disable();
}
inline void Vehicle3_5f2::_internal_set_can_rx_auto_align_disable(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType value) {
  assert(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  can_rx_auto_align_disable_ = value;
}
inline void Vehicle3_5f2::set_can_rx_auto_align_disable(::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType value) {
  _internal_set_can_rx_auto_align_disable(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_auto_align_disable)
}

// optional double can_rx_angle_mounting_offset = 7;
inline bool Vehicle3_5f2::_internal_has_can_rx_angle_mounting_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_angle_mounting_offset() const {
  return _internal_has_can_rx_angle_mounting_offset();
}
inline void Vehicle3_5f2::clear_can_rx_angle_mounting_offset() {
  can_rx_angle_mounting_offset_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Vehicle3_5f2::_internal_can_rx_angle_mounting_offset() const {
  return can_rx_angle_mounting_offset_;
}
inline double Vehicle3_5f2::can_rx_angle_mounting_offset() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_angle_mounting_offset)
  return _internal_can_rx_angle_mounting_offset();
}
inline void Vehicle3_5f2::_internal_set_can_rx_angle_mounting_offset(double value) {
  _has_bits_[0] |= 0x00000020u;
  can_rx_angle_mounting_offset_ = value;
}
inline void Vehicle3_5f2::set_can_rx_angle_mounting_offset(double value) {
  _internal_set_can_rx_angle_mounting_offset(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_angle_mounting_offset)
}

// optional .apollo.drivers.Vehicle3_5f2.Can_rx_wheel_slipType can_rx_wheel_slip = 8;
inline bool Vehicle3_5f2::_internal_has_can_rx_wheel_slip() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_wheel_slip() const {
  return _internal_has_can_rx_wheel_slip();
}
inline void Vehicle3_5f2::clear_can_rx_wheel_slip() {
  can_rx_wheel_slip_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::_internal_can_rx_wheel_slip() const {
  return static_cast< ::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType >(can_rx_wheel_slip_);
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType Vehicle3_5f2::can_rx_wheel_slip() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_wheel_slip)
  return _internal_can_rx_wheel_slip();
}
inline void Vehicle3_5f2::_internal_set_can_rx_wheel_slip(::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType value) {
  assert(::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  can_rx_wheel_slip_ = value;
}
inline void Vehicle3_5f2::set_can_rx_wheel_slip(::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType value) {
  _internal_set_can_rx_wheel_slip(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_wheel_slip)
}

// optional int32 can_rx_radar_height = 9;
inline bool Vehicle3_5f2::_internal_has_can_rx_radar_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_radar_height() const {
  return _internal_has_can_rx_radar_height();
}
inline void Vehicle3_5f2::clear_can_rx_radar_height() {
  can_rx_radar_height_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle3_5f2::_internal_can_rx_radar_height() const {
  return can_rx_radar_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle3_5f2::can_rx_radar_height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_radar_height)
  return _internal_can_rx_radar_height();
}
inline void Vehicle3_5f2::_internal_set_can_rx_radar_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  can_rx_radar_height_ = value;
}
inline void Vehicle3_5f2::set_can_rx_radar_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_radar_height(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_radar_height)
}

// optional int32 can_rx_radar_fov_mr = 10;
inline bool Vehicle3_5f2::_internal_has_can_rx_radar_fov_mr() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_radar_fov_mr() const {
  return _internal_has_can_rx_radar_fov_mr();
}
inline void Vehicle3_5f2::clear_can_rx_radar_fov_mr() {
  can_rx_radar_fov_mr_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle3_5f2::_internal_can_rx_radar_fov_mr() const {
  return can_rx_radar_fov_mr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle3_5f2::can_rx_radar_fov_mr() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_radar_fov_mr)
  return _internal_can_rx_radar_fov_mr();
}
inline void Vehicle3_5f2::_internal_set_can_rx_radar_fov_mr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  can_rx_radar_fov_mr_ = value;
}
inline void Vehicle3_5f2::set_can_rx_radar_fov_mr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_radar_fov_mr(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_radar_fov_mr)
}

// optional int32 can_rx_radar_fov_lr = 11;
inline bool Vehicle3_5f2::_internal_has_can_rx_radar_fov_lr() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_radar_fov_lr() const {
  return _internal_has_can_rx_radar_fov_lr();
}
inline void Vehicle3_5f2::clear_can_rx_radar_fov_lr() {
  can_rx_radar_fov_lr_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle3_5f2::_internal_can_rx_radar_fov_lr() const {
  return can_rx_radar_fov_lr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle3_5f2::can_rx_radar_fov_lr() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_radar_fov_lr)
  return _internal_can_rx_radar_fov_lr();
}
inline void Vehicle3_5f2::_internal_set_can_rx_radar_fov_lr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  can_rx_radar_fov_lr_ = value;
}
inline void Vehicle3_5f2::set_can_rx_radar_fov_lr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_radar_fov_lr(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_radar_fov_lr)
}

// optional .apollo.drivers.Vehicle3_5f2.Can_rx_long_accel_validityType can_rx_long_accel_validity = 12;
inline bool Vehicle3_5f2::_internal_has_can_rx_long_accel_validity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_long_accel_validity() const {
  return _internal_has_can_rx_long_accel_validity();
}
inline void Vehicle3_5f2::clear_can_rx_long_accel_validity() {
  can_rx_long_accel_validity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType Vehicle3_5f2::_internal_can_rx_long_accel_validity() const {
  return static_cast< ::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType >(can_rx_long_accel_validity_);
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType Vehicle3_5f2::can_rx_long_accel_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_long_accel_validity)
  return _internal_can_rx_long_accel_validity();
}
inline void Vehicle3_5f2::_internal_set_can_rx_long_accel_validity(::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType value) {
  assert(::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  can_rx_long_accel_validity_ = value;
}
inline void Vehicle3_5f2::set_can_rx_long_accel_validity(::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType value) {
  _internal_set_can_rx_long_accel_validity(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_long_accel_validity)
}

// optional double can_rx_long_accel = 13;
inline bool Vehicle3_5f2::_internal_has_can_rx_long_accel() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_long_accel() const {
  return _internal_has_can_rx_long_accel();
}
inline void Vehicle3_5f2::clear_can_rx_long_accel() {
  can_rx_long_accel_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Vehicle3_5f2::_internal_can_rx_long_accel() const {
  return can_rx_long_accel_;
}
inline double Vehicle3_5f2::can_rx_long_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_long_accel)
  return _internal_can_rx_long_accel();
}
inline void Vehicle3_5f2::_internal_set_can_rx_long_accel(double value) {
  _has_bits_[0] |= 0x00001000u;
  can_rx_long_accel_ = value;
}
inline void Vehicle3_5f2::set_can_rx_long_accel(double value) {
  _internal_set_can_rx_long_accel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_long_accel)
}

// optional .apollo.drivers.Vehicle3_5f2.Can_rx_lat_accel_validityType can_rx_lat_accel_validity = 14;
inline bool Vehicle3_5f2::_internal_has_can_rx_lat_accel_validity() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_lat_accel_validity() const {
  return _internal_has_can_rx_lat_accel_validity();
}
inline void Vehicle3_5f2::clear_can_rx_lat_accel_validity() {
  can_rx_lat_accel_validity_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType Vehicle3_5f2::_internal_can_rx_lat_accel_validity() const {
  return static_cast< ::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType >(can_rx_lat_accel_validity_);
}
inline ::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType Vehicle3_5f2::can_rx_lat_accel_validity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_lat_accel_validity)
  return _internal_can_rx_lat_accel_validity();
}
inline void Vehicle3_5f2::_internal_set_can_rx_lat_accel_validity(::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType value) {
  assert(::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  can_rx_lat_accel_validity_ = value;
}
inline void Vehicle3_5f2::set_can_rx_lat_accel_validity(::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType value) {
  _internal_set_can_rx_lat_accel_validity(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_lat_accel_validity)
}

// optional double can_rx_lat_accel = 15;
inline bool Vehicle3_5f2::_internal_has_can_rx_lat_accel() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Vehicle3_5f2::has_can_rx_lat_accel() const {
  return _internal_has_can_rx_lat_accel();
}
inline void Vehicle3_5f2::clear_can_rx_lat_accel() {
  can_rx_lat_accel_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double Vehicle3_5f2::_internal_can_rx_lat_accel() const {
  return can_rx_lat_accel_;
}
inline double Vehicle3_5f2::can_rx_lat_accel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle3_5f2.can_rx_lat_accel)
  return _internal_can_rx_lat_accel();
}
inline void Vehicle3_5f2::_internal_set_can_rx_lat_accel(double value) {
  _has_bits_[0] |= 0x00002000u;
  can_rx_lat_accel_ = value;
}
inline void Vehicle3_5f2::set_can_rx_lat_accel(double value) {
  _internal_set_can_rx_lat_accel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle3_5f2.can_rx_lat_accel)
}

// -------------------------------------------------------------------

// Vehicle4_5f3

// optional double can_rx_fac_tgt_range_r2m = 1;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_tgt_range_r2m() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_tgt_range_r2m() const {
  return _internal_has_can_rx_fac_tgt_range_r2m();
}
inline void Vehicle4_5f3::clear_can_rx_fac_tgt_range_r2m() {
  can_rx_fac_tgt_range_r2m_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vehicle4_5f3::_internal_can_rx_fac_tgt_range_r2m() const {
  return can_rx_fac_tgt_range_r2m_;
}
inline double Vehicle4_5f3::can_rx_fac_tgt_range_r2m() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_range_r2m)
  return _internal_can_rx_fac_tgt_range_r2m();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_tgt_range_r2m(double value) {
  _has_bits_[0] |= 0x00000001u;
  can_rx_fac_tgt_range_r2m_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_tgt_range_r2m(double value) {
  _internal_set_can_rx_fac_tgt_range_r2m(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_range_r2m)
}

// optional double can_rx_fac_tgt_range_m2t = 2;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_tgt_range_m2t() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_tgt_range_m2t() const {
  return _internal_has_can_rx_fac_tgt_range_m2t();
}
inline void Vehicle4_5f3::clear_can_rx_fac_tgt_range_m2t() {
  can_rx_fac_tgt_range_m2t_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Vehicle4_5f3::_internal_can_rx_fac_tgt_range_m2t() const {
  return can_rx_fac_tgt_range_m2t_;
}
inline double Vehicle4_5f3::can_rx_fac_tgt_range_m2t() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_range_m2t)
  return _internal_can_rx_fac_tgt_range_m2t();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_tgt_range_m2t(double value) {
  _has_bits_[0] |= 0x00000002u;
  can_rx_fac_tgt_range_m2t_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_tgt_range_m2t(double value) {
  _internal_set_can_rx_fac_tgt_range_m2t(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_range_m2t)
}

// optional double can_rx_fac_tgt_range_1 = 3;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_tgt_range_1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_tgt_range_1() const {
  return _internal_has_can_rx_fac_tgt_range_1();
}
inline void Vehicle4_5f3::clear_can_rx_fac_tgt_range_1() {
  can_rx_fac_tgt_range_1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Vehicle4_5f3::_internal_can_rx_fac_tgt_range_1() const {
  return can_rx_fac_tgt_range_1_;
}
inline double Vehicle4_5f3::can_rx_fac_tgt_range_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_range_1)
  return _internal_can_rx_fac_tgt_range_1();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_tgt_range_1(double value) {
  _has_bits_[0] |= 0x00000004u;
  can_rx_fac_tgt_range_1_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_tgt_range_1(double value) {
  _internal_set_can_rx_fac_tgt_range_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_range_1)
}

// optional int32 can_rx_fac_tgt_mtg_space_ver = 4;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_tgt_mtg_space_ver() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_tgt_mtg_space_ver() const {
  return _internal_has_can_rx_fac_tgt_mtg_space_ver();
}
inline void Vehicle4_5f3::clear_can_rx_fac_tgt_mtg_space_ver() {
  can_rx_fac_tgt_mtg_space_ver_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::_internal_can_rx_fac_tgt_mtg_space_ver() const {
  return can_rx_fac_tgt_mtg_space_ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::can_rx_fac_tgt_mtg_space_ver() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_mtg_space_ver)
  return _internal_can_rx_fac_tgt_mtg_space_ver();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_tgt_mtg_space_ver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  can_rx_fac_tgt_mtg_space_ver_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_tgt_mtg_space_ver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_fac_tgt_mtg_space_ver(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_mtg_space_ver)
}

// optional int32 can_rx_fac_tgt_mtg_space_hor = 5;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_tgt_mtg_space_hor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_tgt_mtg_space_hor() const {
  return _internal_has_can_rx_fac_tgt_mtg_space_hor();
}
inline void Vehicle4_5f3::clear_can_rx_fac_tgt_mtg_space_hor() {
  can_rx_fac_tgt_mtg_space_hor_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::_internal_can_rx_fac_tgt_mtg_space_hor() const {
  return can_rx_fac_tgt_mtg_space_hor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::can_rx_fac_tgt_mtg_space_hor() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_mtg_space_hor)
  return _internal_can_rx_fac_tgt_mtg_space_hor();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_tgt_mtg_space_hor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_rx_fac_tgt_mtg_space_hor_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_tgt_mtg_space_hor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_fac_tgt_mtg_space_hor(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_mtg_space_hor)
}

// optional int32 can_rx_fac_tgt_mtg_offset = 6;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_tgt_mtg_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_tgt_mtg_offset() const {
  return _internal_has_can_rx_fac_tgt_mtg_offset();
}
inline void Vehicle4_5f3::clear_can_rx_fac_tgt_mtg_offset() {
  can_rx_fac_tgt_mtg_offset_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::_internal_can_rx_fac_tgt_mtg_offset() const {
  return can_rx_fac_tgt_mtg_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::can_rx_fac_tgt_mtg_offset() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_mtg_offset)
  return _internal_can_rx_fac_tgt_mtg_offset();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_tgt_mtg_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  can_rx_fac_tgt_mtg_offset_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_tgt_mtg_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_fac_tgt_mtg_offset(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_tgt_mtg_offset)
}

// optional int32 can_rx_fac_align_samp_req = 7;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_align_samp_req() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_align_samp_req() const {
  return _internal_has_can_rx_fac_align_samp_req();
}
inline void Vehicle4_5f3::clear_can_rx_fac_align_samp_req() {
  can_rx_fac_align_samp_req_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::_internal_can_rx_fac_align_samp_req() const {
  return can_rx_fac_align_samp_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::can_rx_fac_align_samp_req() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_align_samp_req)
  return _internal_can_rx_fac_align_samp_req();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_align_samp_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  can_rx_fac_align_samp_req_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_align_samp_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_fac_align_samp_req(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_align_samp_req)
}

// optional int32 can_rx_fac_align_max_nt = 8;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_align_max_nt() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_align_max_nt() const {
  return _internal_has_can_rx_fac_align_max_nt();
}
inline void Vehicle4_5f3::clear_can_rx_fac_align_max_nt() {
  can_rx_fac_align_max_nt_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::_internal_can_rx_fac_align_max_nt() const {
  return can_rx_fac_align_max_nt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle4_5f3::can_rx_fac_align_max_nt() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_align_max_nt)
  return _internal_can_rx_fac_align_max_nt();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_align_max_nt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  can_rx_fac_align_max_nt_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_align_max_nt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_fac_align_max_nt(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_align_max_nt)
}

// optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_2Type can_rx_fac_align_cmd_2 = 9;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_align_cmd_2() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_align_cmd_2() const {
  return _internal_has_can_rx_fac_align_cmd_2();
}
inline void Vehicle4_5f3::clear_can_rx_fac_align_cmd_2() {
  can_rx_fac_align_cmd_2_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::_internal_can_rx_fac_align_cmd_2() const {
  return static_cast< ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type >(can_rx_fac_align_cmd_2_);
}
inline ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type Vehicle4_5f3::can_rx_fac_align_cmd_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_align_cmd_2)
  return _internal_can_rx_fac_align_cmd_2();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_align_cmd_2(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type value) {
  assert(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  can_rx_fac_align_cmd_2_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_align_cmd_2(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type value) {
  _internal_set_can_rx_fac_align_cmd_2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_align_cmd_2)
}

// optional .apollo.drivers.Vehicle4_5f3.Can_rx_fac_align_cmd_1Type can_rx_fac_align_cmd_1 = 10;
inline bool Vehicle4_5f3::_internal_has_can_rx_fac_align_cmd_1() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vehicle4_5f3::has_can_rx_fac_align_cmd_1() const {
  return _internal_has_can_rx_fac_align_cmd_1();
}
inline void Vehicle4_5f3::clear_can_rx_fac_align_cmd_1() {
  can_rx_fac_align_cmd_1_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::_internal_can_rx_fac_align_cmd_1() const {
  return static_cast< ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type >(can_rx_fac_align_cmd_1_);
}
inline ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type Vehicle4_5f3::can_rx_fac_align_cmd_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle4_5f3.can_rx_fac_align_cmd_1)
  return _internal_can_rx_fac_align_cmd_1();
}
inline void Vehicle4_5f3::_internal_set_can_rx_fac_align_cmd_1(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type value) {
  assert(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  can_rx_fac_align_cmd_1_ = value;
}
inline void Vehicle4_5f3::set_can_rx_fac_align_cmd_1(::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type value) {
  _internal_set_can_rx_fac_align_cmd_1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle4_5f3.can_rx_fac_align_cmd_1)
}

// -------------------------------------------------------------------

// Vehicle5_5f4

// optional .apollo.drivers.Vehicle5_5f4.Can_rx_yaw_rate_bias_shiftType can_rx_yaw_rate_bias_shift = 1;
inline bool Vehicle5_5f4::_internal_has_can_rx_yaw_rate_bias_shift() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_yaw_rate_bias_shift() const {
  return _internal_has_can_rx_yaw_rate_bias_shift();
}
inline void Vehicle5_5f4::clear_can_rx_yaw_rate_bias_shift() {
  can_rx_yaw_rate_bias_shift_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::_internal_can_rx_yaw_rate_bias_shift() const {
  return static_cast< ::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType >(can_rx_yaw_rate_bias_shift_);
}
inline ::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType Vehicle5_5f4::can_rx_yaw_rate_bias_shift() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_yaw_rate_bias_shift)
  return _internal_can_rx_yaw_rate_bias_shift();
}
inline void Vehicle5_5f4::_internal_set_can_rx_yaw_rate_bias_shift(::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType value) {
  assert(::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  can_rx_yaw_rate_bias_shift_ = value;
}
inline void Vehicle5_5f4::set_can_rx_yaw_rate_bias_shift(::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType value) {
  _internal_set_can_rx_yaw_rate_bias_shift(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_yaw_rate_bias_shift)
}

// optional double can_rx_steering_gear_ratio = 2;
inline bool Vehicle5_5f4::_internal_has_can_rx_steering_gear_ratio() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_steering_gear_ratio() const {
  return _internal_has_can_rx_steering_gear_ratio();
}
inline void Vehicle5_5f4::clear_can_rx_steering_gear_ratio() {
  can_rx_steering_gear_ratio_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vehicle5_5f4::_internal_can_rx_steering_gear_ratio() const {
  return can_rx_steering_gear_ratio_;
}
inline double Vehicle5_5f4::can_rx_steering_gear_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_steering_gear_ratio)
  return _internal_can_rx_steering_gear_ratio();
}
inline void Vehicle5_5f4::_internal_set_can_rx_steering_gear_ratio(double value) {
  _has_bits_[0] |= 0x00000001u;
  can_rx_steering_gear_ratio_ = value;
}
inline void Vehicle5_5f4::set_can_rx_steering_gear_ratio(double value) {
  _internal_set_can_rx_steering_gear_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_steering_gear_ratio)
}

// optional double can_rx_wheelbase = 3;
inline bool Vehicle5_5f4::_internal_has_can_rx_wheelbase() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_wheelbase() const {
  return _internal_has_can_rx_wheelbase();
}
inline void Vehicle5_5f4::clear_can_rx_wheelbase() {
  can_rx_wheelbase_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Vehicle5_5f4::_internal_can_rx_wheelbase() const {
  return can_rx_wheelbase_;
}
inline double Vehicle5_5f4::can_rx_wheelbase() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_wheelbase)
  return _internal_can_rx_wheelbase();
}
inline void Vehicle5_5f4::_internal_set_can_rx_wheelbase(double value) {
  _has_bits_[0] |= 0x00000002u;
  can_rx_wheelbase_ = value;
}
inline void Vehicle5_5f4::set_can_rx_wheelbase(double value) {
  _internal_set_can_rx_wheelbase(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_wheelbase)
}

// optional double can_rx_distance_rear_axle = 4;
inline bool Vehicle5_5f4::_internal_has_can_rx_distance_rear_axle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_distance_rear_axle() const {
  return _internal_has_can_rx_distance_rear_axle();
}
inline void Vehicle5_5f4::clear_can_rx_distance_rear_axle() {
  can_rx_distance_rear_axle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Vehicle5_5f4::_internal_can_rx_distance_rear_axle() const {
  return can_rx_distance_rear_axle_;
}
inline double Vehicle5_5f4::can_rx_distance_rear_axle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_distance_rear_axle)
  return _internal_can_rx_distance_rear_axle();
}
inline void Vehicle5_5f4::_internal_set_can_rx_distance_rear_axle(double value) {
  _has_bits_[0] |= 0x00000004u;
  can_rx_distance_rear_axle_ = value;
}
inline void Vehicle5_5f4::set_can_rx_distance_rear_axle(double value) {
  _internal_set_can_rx_distance_rear_axle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_distance_rear_axle)
}

// optional double can_rx_cw_blockage_threshold = 5;
inline bool Vehicle5_5f4::_internal_has_can_rx_cw_blockage_threshold() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_cw_blockage_threshold() const {
  return _internal_has_can_rx_cw_blockage_threshold();
}
inline void Vehicle5_5f4::clear_can_rx_cw_blockage_threshold() {
  can_rx_cw_blockage_threshold_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Vehicle5_5f4::_internal_can_rx_cw_blockage_threshold() const {
  return can_rx_cw_blockage_threshold_;
}
inline double Vehicle5_5f4::can_rx_cw_blockage_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_cw_blockage_threshold)
  return _internal_can_rx_cw_blockage_threshold();
}
inline void Vehicle5_5f4::_internal_set_can_rx_cw_blockage_threshold(double value) {
  _has_bits_[0] |= 0x00000008u;
  can_rx_cw_blockage_threshold_ = value;
}
inline void Vehicle5_5f4::set_can_rx_cw_blockage_threshold(double value) {
  _internal_set_can_rx_cw_blockage_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_cw_blockage_threshold)
}

// optional double can_rx_funnel_offset_right = 6;
inline bool Vehicle5_5f4::_internal_has_can_rx_funnel_offset_right() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_funnel_offset_right() const {
  return _internal_has_can_rx_funnel_offset_right();
}
inline void Vehicle5_5f4::clear_can_rx_funnel_offset_right() {
  can_rx_funnel_offset_right_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Vehicle5_5f4::_internal_can_rx_funnel_offset_right() const {
  return can_rx_funnel_offset_right_;
}
inline double Vehicle5_5f4::can_rx_funnel_offset_right() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_funnel_offset_right)
  return _internal_can_rx_funnel_offset_right();
}
inline void Vehicle5_5f4::_internal_set_can_rx_funnel_offset_right(double value) {
  _has_bits_[0] |= 0x00000040u;
  can_rx_funnel_offset_right_ = value;
}
inline void Vehicle5_5f4::set_can_rx_funnel_offset_right(double value) {
  _internal_set_can_rx_funnel_offset_right(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_funnel_offset_right)
}

// optional double can_rx_funnel_offset_left = 7;
inline bool Vehicle5_5f4::_internal_has_can_rx_funnel_offset_left() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_funnel_offset_left() const {
  return _internal_has_can_rx_funnel_offset_left();
}
inline void Vehicle5_5f4::clear_can_rx_funnel_offset_left() {
  can_rx_funnel_offset_left_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Vehicle5_5f4::_internal_can_rx_funnel_offset_left() const {
  return can_rx_funnel_offset_left_;
}
inline double Vehicle5_5f4::can_rx_funnel_offset_left() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_funnel_offset_left)
  return _internal_can_rx_funnel_offset_left();
}
inline void Vehicle5_5f4::_internal_set_can_rx_funnel_offset_left(double value) {
  _has_bits_[0] |= 0x00000080u;
  can_rx_funnel_offset_left_ = value;
}
inline void Vehicle5_5f4::set_can_rx_funnel_offset_left(double value) {
  _internal_set_can_rx_funnel_offset_left(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_funnel_offset_left)
}

// optional double can_rx_beamwidth_vert = 8;
inline bool Vehicle5_5f4::_internal_has_can_rx_beamwidth_vert() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_beamwidth_vert() const {
  return _internal_has_can_rx_beamwidth_vert();
}
inline void Vehicle5_5f4::clear_can_rx_beamwidth_vert() {
  can_rx_beamwidth_vert_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Vehicle5_5f4::_internal_can_rx_beamwidth_vert() const {
  return can_rx_beamwidth_vert_;
}
inline double Vehicle5_5f4::can_rx_beamwidth_vert() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_beamwidth_vert)
  return _internal_can_rx_beamwidth_vert();
}
inline void Vehicle5_5f4::_internal_set_can_rx_beamwidth_vert(double value) {
  _has_bits_[0] |= 0x00000100u;
  can_rx_beamwidth_vert_ = value;
}
inline void Vehicle5_5f4::set_can_rx_beamwidth_vert(double value) {
  _internal_set_can_rx_beamwidth_vert(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_beamwidth_vert)
}

// optional int32 can_rx_oversteer_understeer = 9;
inline bool Vehicle5_5f4::_internal_has_can_rx_oversteer_understeer() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vehicle5_5f4::has_can_rx_oversteer_understeer() const {
  return _internal_has_can_rx_oversteer_understeer();
}
inline void Vehicle5_5f4::clear_can_rx_oversteer_understeer() {
  can_rx_oversteer_understeer_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle5_5f4::_internal_can_rx_oversteer_understeer() const {
  return can_rx_oversteer_understeer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle5_5f4::can_rx_oversteer_understeer() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle5_5f4.can_rx_oversteer_understeer)
  return _internal_can_rx_oversteer_understeer();
}
inline void Vehicle5_5f4::_internal_set_can_rx_oversteer_understeer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  can_rx_oversteer_understeer_ = value;
}
inline void Vehicle5_5f4::set_can_rx_oversteer_understeer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_rx_oversteer_understeer(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle5_5f4.can_rx_oversteer_understeer)
}

// -------------------------------------------------------------------

// Vehicle6_5f5

// optional double can_rx_inner_funnel_offset_right = 1;
inline bool Vehicle6_5f5::_internal_has_can_rx_inner_funnel_offset_right() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vehicle6_5f5::has_can_rx_inner_funnel_offset_right() const {
  return _internal_has_can_rx_inner_funnel_offset_right();
}
inline void Vehicle6_5f5::clear_can_rx_inner_funnel_offset_right() {
  can_rx_inner_funnel_offset_right_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vehicle6_5f5::_internal_can_rx_inner_funnel_offset_right() const {
  return can_rx_inner_funnel_offset_right_;
}
inline double Vehicle6_5f5::can_rx_inner_funnel_offset_right() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle6_5f5.can_rx_inner_funnel_offset_right)
  return _internal_can_rx_inner_funnel_offset_right();
}
inline void Vehicle6_5f5::_internal_set_can_rx_inner_funnel_offset_right(double value) {
  _has_bits_[0] |= 0x00000001u;
  can_rx_inner_funnel_offset_right_ = value;
}
inline void Vehicle6_5f5::set_can_rx_inner_funnel_offset_right(double value) {
  _internal_set_can_rx_inner_funnel_offset_right(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle6_5f5.can_rx_inner_funnel_offset_right)
}

// optional double can_rx_inner_funnel_offset_left = 2;
inline bool Vehicle6_5f5::_internal_has_can_rx_inner_funnel_offset_left() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vehicle6_5f5::has_can_rx_inner_funnel_offset_left() const {
  return _internal_has_can_rx_inner_funnel_offset_left();
}
inline void Vehicle6_5f5::clear_can_rx_inner_funnel_offset_left() {
  can_rx_inner_funnel_offset_left_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Vehicle6_5f5::_internal_can_rx_inner_funnel_offset_left() const {
  return can_rx_inner_funnel_offset_left_;
}
inline double Vehicle6_5f5::can_rx_inner_funnel_offset_left() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle6_5f5.can_rx_inner_funnel_offset_left)
  return _internal_can_rx_inner_funnel_offset_left();
}
inline void Vehicle6_5f5::_internal_set_can_rx_inner_funnel_offset_left(double value) {
  _has_bits_[0] |= 0x00000002u;
  can_rx_inner_funnel_offset_left_ = value;
}
inline void Vehicle6_5f5::set_can_rx_inner_funnel_offset_left(double value) {
  _internal_set_can_rx_inner_funnel_offset_left(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle6_5f5.can_rx_inner_funnel_offset_left)
}

// optional int32 can_volvo_fa_range_max_short = 3;
inline bool Vehicle6_5f5::_internal_has_can_volvo_fa_range_max_short() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vehicle6_5f5::has_can_volvo_fa_range_max_short() const {
  return _internal_has_can_volvo_fa_range_max_short();
}
inline void Vehicle6_5f5::clear_can_volvo_fa_range_max_short() {
  can_volvo_fa_range_max_short_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle6_5f5::_internal_can_volvo_fa_range_max_short() const {
  return can_volvo_fa_range_max_short_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vehicle6_5f5::can_volvo_fa_range_max_short() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle6_5f5.can_volvo_fa_range_max_short)
  return _internal_can_volvo_fa_range_max_short();
}
inline void Vehicle6_5f5::_internal_set_can_volvo_fa_range_max_short(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  can_volvo_fa_range_max_short_ = value;
}
inline void Vehicle6_5f5::set_can_volvo_fa_range_max_short(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_can_volvo_fa_range_max_short(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle6_5f5.can_volvo_fa_range_max_short)
}

// optional double can_volvo_fa_min_vspeed_short = 4;
inline bool Vehicle6_5f5::_internal_has_can_volvo_fa_min_vspeed_short() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vehicle6_5f5::has_can_volvo_fa_min_vspeed_short() const {
  return _internal_has_can_volvo_fa_min_vspeed_short();
}
inline void Vehicle6_5f5::clear_can_volvo_fa_min_vspeed_short() {
  can_volvo_fa_min_vspeed_short_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Vehicle6_5f5::_internal_can_volvo_fa_min_vspeed_short() const {
  return can_volvo_fa_min_vspeed_short_;
}
inline double Vehicle6_5f5::can_volvo_fa_min_vspeed_short() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle6_5f5.can_volvo_fa_min_vspeed_short)
  return _internal_can_volvo_fa_min_vspeed_short();
}
inline void Vehicle6_5f5::_internal_set_can_volvo_fa_min_vspeed_short(double value) {
  _has_bits_[0] |= 0x00000004u;
  can_volvo_fa_min_vspeed_short_ = value;
}
inline void Vehicle6_5f5::set_can_volvo_fa_min_vspeed_short(double value) {
  _internal_set_can_volvo_fa_min_vspeed_short(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle6_5f5.can_volvo_fa_min_vspeed_short)
}

// optional double can_volvo_fa_aalign_estimate = 5;
inline bool Vehicle6_5f5::_internal_has_can_volvo_fa_aalign_estimate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vehicle6_5f5::has_can_volvo_fa_aalign_estimate() const {
  return _internal_has_can_volvo_fa_aalign_estimate();
}
inline void Vehicle6_5f5::clear_can_volvo_fa_aalign_estimate() {
  can_volvo_fa_aalign_estimate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Vehicle6_5f5::_internal_can_volvo_fa_aalign_estimate() const {
  return can_volvo_fa_aalign_estimate_;
}
inline double Vehicle6_5f5::can_volvo_fa_aalign_estimate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Vehicle6_5f5.can_volvo_fa_aalign_estimate)
  return _internal_can_volvo_fa_aalign_estimate();
}
inline void Vehicle6_5f5::_internal_set_can_volvo_fa_aalign_estimate(double value) {
  _has_bits_[0] |= 0x00000008u;
  can_volvo_fa_aalign_estimate_ = value;
}
inline void Vehicle6_5f5::set_can_volvo_fa_aalign_estimate(double value) {
  _internal_set_can_volvo_fa_aalign_estimate(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Vehicle6_5f5.can_volvo_fa_aalign_estimate)
}

// -------------------------------------------------------------------

// DelphiESR

// optional .apollo.common.Header header = 1;
inline bool DelphiESR::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool DelphiESR::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& DelphiESR::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& DelphiESR::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.header)
  return _internal_header();
}
inline ::apollo::common::Header* DelphiESR::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* DelphiESR::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* DelphiESR::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.header)
  return _internal_mutable_header();
}
inline void DelphiESR::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.header)
}

// optional .apollo.drivers.Esr_status9_5e8 esr_status9_5e8 = 2;
inline bool DelphiESR::_internal_has_esr_status9_5e8() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || esr_status9_5e8_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status9_5e8() const {
  return _internal_has_esr_status9_5e8();
}
inline void DelphiESR::clear_esr_status9_5e8() {
  if (esr_status9_5e8_ != nullptr) esr_status9_5e8_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::drivers::Esr_status9_5e8& DelphiESR::_internal_esr_status9_5e8() const {
  const ::apollo::drivers::Esr_status9_5e8* p = esr_status9_5e8_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status9_5e8*>(
      &::apollo::drivers::_Esr_status9_5e8_default_instance_);
}
inline const ::apollo::drivers::Esr_status9_5e8& DelphiESR::esr_status9_5e8() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status9_5e8)
  return _internal_esr_status9_5e8();
}
inline ::apollo::drivers::Esr_status9_5e8* DelphiESR::release_esr_status9_5e8() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status9_5e8)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::drivers::Esr_status9_5e8* temp = esr_status9_5e8_;
  esr_status9_5e8_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status9_5e8* DelphiESR::_internal_mutable_esr_status9_5e8() {
  _has_bits_[0] |= 0x00000002u;
  if (esr_status9_5e8_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status9_5e8>(GetArenaNoVirtual());
    esr_status9_5e8_ = p;
  }
  return esr_status9_5e8_;
}
inline ::apollo::drivers::Esr_status9_5e8* DelphiESR::mutable_esr_status9_5e8() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status9_5e8)
  return _internal_mutable_esr_status9_5e8();
}
inline void DelphiESR::set_allocated_esr_status9_5e8(::apollo::drivers::Esr_status9_5e8* esr_status9_5e8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status9_5e8_;
  }
  if (esr_status9_5e8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status9_5e8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status9_5e8, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  esr_status9_5e8_ = esr_status9_5e8;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status9_5e8)
}

// optional .apollo.drivers.Esr_status6_5e5 esr_status6_5e5 = 3;
inline bool DelphiESR::_internal_has_esr_status6_5e5() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || esr_status6_5e5_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status6_5e5() const {
  return _internal_has_esr_status6_5e5();
}
inline void DelphiESR::clear_esr_status6_5e5() {
  if (esr_status6_5e5_ != nullptr) esr_status6_5e5_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::drivers::Esr_status6_5e5& DelphiESR::_internal_esr_status6_5e5() const {
  const ::apollo::drivers::Esr_status6_5e5* p = esr_status6_5e5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status6_5e5*>(
      &::apollo::drivers::_Esr_status6_5e5_default_instance_);
}
inline const ::apollo::drivers::Esr_status6_5e5& DelphiESR::esr_status6_5e5() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status6_5e5)
  return _internal_esr_status6_5e5();
}
inline ::apollo::drivers::Esr_status6_5e5* DelphiESR::release_esr_status6_5e5() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status6_5e5)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::drivers::Esr_status6_5e5* temp = esr_status6_5e5_;
  esr_status6_5e5_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status6_5e5* DelphiESR::_internal_mutable_esr_status6_5e5() {
  _has_bits_[0] |= 0x00000004u;
  if (esr_status6_5e5_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status6_5e5>(GetArenaNoVirtual());
    esr_status6_5e5_ = p;
  }
  return esr_status6_5e5_;
}
inline ::apollo::drivers::Esr_status6_5e5* DelphiESR::mutable_esr_status6_5e5() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status6_5e5)
  return _internal_mutable_esr_status6_5e5();
}
inline void DelphiESR::set_allocated_esr_status6_5e5(::apollo::drivers::Esr_status6_5e5* esr_status6_5e5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status6_5e5_;
  }
  if (esr_status6_5e5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status6_5e5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status6_5e5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  esr_status6_5e5_ = esr_status6_5e5;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status6_5e5)
}

// optional .apollo.drivers.Esr_status5_5e4 esr_status5_5e4 = 4;
inline bool DelphiESR::_internal_has_esr_status5_5e4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || esr_status5_5e4_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status5_5e4() const {
  return _internal_has_esr_status5_5e4();
}
inline void DelphiESR::clear_esr_status5_5e4() {
  if (esr_status5_5e4_ != nullptr) esr_status5_5e4_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::drivers::Esr_status5_5e4& DelphiESR::_internal_esr_status5_5e4() const {
  const ::apollo::drivers::Esr_status5_5e4* p = esr_status5_5e4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status5_5e4*>(
      &::apollo::drivers::_Esr_status5_5e4_default_instance_);
}
inline const ::apollo::drivers::Esr_status5_5e4& DelphiESR::esr_status5_5e4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status5_5e4)
  return _internal_esr_status5_5e4();
}
inline ::apollo::drivers::Esr_status5_5e4* DelphiESR::release_esr_status5_5e4() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status5_5e4)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::drivers::Esr_status5_5e4* temp = esr_status5_5e4_;
  esr_status5_5e4_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status5_5e4* DelphiESR::_internal_mutable_esr_status5_5e4() {
  _has_bits_[0] |= 0x00000008u;
  if (esr_status5_5e4_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status5_5e4>(GetArenaNoVirtual());
    esr_status5_5e4_ = p;
  }
  return esr_status5_5e4_;
}
inline ::apollo::drivers::Esr_status5_5e4* DelphiESR::mutable_esr_status5_5e4() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status5_5e4)
  return _internal_mutable_esr_status5_5e4();
}
inline void DelphiESR::set_allocated_esr_status5_5e4(::apollo::drivers::Esr_status5_5e4* esr_status5_5e4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status5_5e4_;
  }
  if (esr_status5_5e4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status5_5e4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status5_5e4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  esr_status5_5e4_ = esr_status5_5e4;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status5_5e4)
}

// optional .apollo.drivers.Esr_status3_4e2 esr_status3_4e2 = 5;
inline bool DelphiESR::_internal_has_esr_status3_4e2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || esr_status3_4e2_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status3_4e2() const {
  return _internal_has_esr_status3_4e2();
}
inline void DelphiESR::clear_esr_status3_4e2() {
  if (esr_status3_4e2_ != nullptr) esr_status3_4e2_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::drivers::Esr_status3_4e2& DelphiESR::_internal_esr_status3_4e2() const {
  const ::apollo::drivers::Esr_status3_4e2* p = esr_status3_4e2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status3_4e2*>(
      &::apollo::drivers::_Esr_status3_4e2_default_instance_);
}
inline const ::apollo::drivers::Esr_status3_4e2& DelphiESR::esr_status3_4e2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status3_4e2)
  return _internal_esr_status3_4e2();
}
inline ::apollo::drivers::Esr_status3_4e2* DelphiESR::release_esr_status3_4e2() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status3_4e2)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::drivers::Esr_status3_4e2* temp = esr_status3_4e2_;
  esr_status3_4e2_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status3_4e2* DelphiESR::_internal_mutable_esr_status3_4e2() {
  _has_bits_[0] |= 0x00000010u;
  if (esr_status3_4e2_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status3_4e2>(GetArenaNoVirtual());
    esr_status3_4e2_ = p;
  }
  return esr_status3_4e2_;
}
inline ::apollo::drivers::Esr_status3_4e2* DelphiESR::mutable_esr_status3_4e2() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status3_4e2)
  return _internal_mutable_esr_status3_4e2();
}
inline void DelphiESR::set_allocated_esr_status3_4e2(::apollo::drivers::Esr_status3_4e2* esr_status3_4e2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status3_4e2_;
  }
  if (esr_status3_4e2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status3_4e2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status3_4e2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  esr_status3_4e2_ = esr_status3_4e2;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status3_4e2)
}

// optional .apollo.drivers.Esr_status4_4e3 esr_status4_4e3 = 6;
inline bool DelphiESR::_internal_has_esr_status4_4e3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || esr_status4_4e3_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status4_4e3() const {
  return _internal_has_esr_status4_4e3();
}
inline void DelphiESR::clear_esr_status4_4e3() {
  if (esr_status4_4e3_ != nullptr) esr_status4_4e3_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::drivers::Esr_status4_4e3& DelphiESR::_internal_esr_status4_4e3() const {
  const ::apollo::drivers::Esr_status4_4e3* p = esr_status4_4e3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status4_4e3*>(
      &::apollo::drivers::_Esr_status4_4e3_default_instance_);
}
inline const ::apollo::drivers::Esr_status4_4e3& DelphiESR::esr_status4_4e3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status4_4e3)
  return _internal_esr_status4_4e3();
}
inline ::apollo::drivers::Esr_status4_4e3* DelphiESR::release_esr_status4_4e3() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status4_4e3)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::drivers::Esr_status4_4e3* temp = esr_status4_4e3_;
  esr_status4_4e3_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status4_4e3* DelphiESR::_internal_mutable_esr_status4_4e3() {
  _has_bits_[0] |= 0x00000020u;
  if (esr_status4_4e3_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status4_4e3>(GetArenaNoVirtual());
    esr_status4_4e3_ = p;
  }
  return esr_status4_4e3_;
}
inline ::apollo::drivers::Esr_status4_4e3* DelphiESR::mutable_esr_status4_4e3() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status4_4e3)
  return _internal_mutable_esr_status4_4e3();
}
inline void DelphiESR::set_allocated_esr_status4_4e3(::apollo::drivers::Esr_status4_4e3* esr_status4_4e3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status4_4e3_;
  }
  if (esr_status4_4e3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status4_4e3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status4_4e3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  esr_status4_4e3_ = esr_status4_4e3;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status4_4e3)
}

// repeated .apollo.drivers.Esr_trackmotionpower_540 esr_trackmotionpower_540 = 7;
inline int DelphiESR::_internal_esr_trackmotionpower_540_size() const {
  return esr_trackmotionpower_540_.size();
}
inline int DelphiESR::esr_trackmotionpower_540_size() const {
  return _internal_esr_trackmotionpower_540_size();
}
inline void DelphiESR::clear_esr_trackmotionpower_540() {
  esr_trackmotionpower_540_.Clear();
}
inline ::apollo::drivers::Esr_trackmotionpower_540* DelphiESR::mutable_esr_trackmotionpower_540(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_trackmotionpower_540)
  return esr_trackmotionpower_540_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540 >*
DelphiESR::mutable_esr_trackmotionpower_540() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.DelphiESR.esr_trackmotionpower_540)
  return &esr_trackmotionpower_540_;
}
inline const ::apollo::drivers::Esr_trackmotionpower_540& DelphiESR::_internal_esr_trackmotionpower_540(int index) const {
  return esr_trackmotionpower_540_.Get(index);
}
inline const ::apollo::drivers::Esr_trackmotionpower_540& DelphiESR::esr_trackmotionpower_540(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_trackmotionpower_540)
  return _internal_esr_trackmotionpower_540(index);
}
inline ::apollo::drivers::Esr_trackmotionpower_540* DelphiESR::_internal_add_esr_trackmotionpower_540() {
  return esr_trackmotionpower_540_.Add();
}
inline ::apollo::drivers::Esr_trackmotionpower_540* DelphiESR::add_esr_trackmotionpower_540() {
  // @@protoc_insertion_point(field_add:apollo.drivers.DelphiESR.esr_trackmotionpower_540)
  return _internal_add_esr_trackmotionpower_540();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_trackmotionpower_540 >&
DelphiESR::esr_trackmotionpower_540() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.DelphiESR.esr_trackmotionpower_540)
  return esr_trackmotionpower_540_;
}

// optional .apollo.drivers.Acm_inst_req_7e0 acm_inst_req_7e0 = 8;
inline bool DelphiESR::_internal_has_acm_inst_req_7e0() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || acm_inst_req_7e0_ != nullptr);
  return value;
}
inline bool DelphiESR::has_acm_inst_req_7e0() const {
  return _internal_has_acm_inst_req_7e0();
}
inline void DelphiESR::clear_acm_inst_req_7e0() {
  if (acm_inst_req_7e0_ != nullptr) acm_inst_req_7e0_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::drivers::Acm_inst_req_7e0& DelphiESR::_internal_acm_inst_req_7e0() const {
  const ::apollo::drivers::Acm_inst_req_7e0* p = acm_inst_req_7e0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Acm_inst_req_7e0*>(
      &::apollo::drivers::_Acm_inst_req_7e0_default_instance_);
}
inline const ::apollo::drivers::Acm_inst_req_7e0& DelphiESR::acm_inst_req_7e0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.acm_inst_req_7e0)
  return _internal_acm_inst_req_7e0();
}
inline ::apollo::drivers::Acm_inst_req_7e0* DelphiESR::release_acm_inst_req_7e0() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.acm_inst_req_7e0)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::drivers::Acm_inst_req_7e0* temp = acm_inst_req_7e0_;
  acm_inst_req_7e0_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Acm_inst_req_7e0* DelphiESR::_internal_mutable_acm_inst_req_7e0() {
  _has_bits_[0] |= 0x00000040u;
  if (acm_inst_req_7e0_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Acm_inst_req_7e0>(GetArenaNoVirtual());
    acm_inst_req_7e0_ = p;
  }
  return acm_inst_req_7e0_;
}
inline ::apollo::drivers::Acm_inst_req_7e0* DelphiESR::mutable_acm_inst_req_7e0() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.acm_inst_req_7e0)
  return _internal_mutable_acm_inst_req_7e0();
}
inline void DelphiESR::set_allocated_acm_inst_req_7e0(::apollo::drivers::Acm_inst_req_7e0* acm_inst_req_7e0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acm_inst_req_7e0_;
  }
  if (acm_inst_req_7e0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acm_inst_req_7e0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acm_inst_req_7e0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  acm_inst_req_7e0_ = acm_inst_req_7e0;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.acm_inst_req_7e0)
}

// repeated .apollo.drivers.Esr_track01_500 esr_track01_500 = 9;
inline int DelphiESR::_internal_esr_track01_500_size() const {
  return esr_track01_500_.size();
}
inline int DelphiESR::esr_track01_500_size() const {
  return _internal_esr_track01_500_size();
}
inline void DelphiESR::clear_esr_track01_500() {
  esr_track01_500_.Clear();
}
inline ::apollo::drivers::Esr_track01_500* DelphiESR::mutable_esr_track01_500(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_track01_500)
  return esr_track01_500_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_track01_500 >*
DelphiESR::mutable_esr_track01_500() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.DelphiESR.esr_track01_500)
  return &esr_track01_500_;
}
inline const ::apollo::drivers::Esr_track01_500& DelphiESR::_internal_esr_track01_500(int index) const {
  return esr_track01_500_.Get(index);
}
inline const ::apollo::drivers::Esr_track01_500& DelphiESR::esr_track01_500(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_track01_500)
  return _internal_esr_track01_500(index);
}
inline ::apollo::drivers::Esr_track01_500* DelphiESR::_internal_add_esr_track01_500() {
  return esr_track01_500_.Add();
}
inline ::apollo::drivers::Esr_track01_500* DelphiESR::add_esr_track01_500() {
  // @@protoc_insertion_point(field_add:apollo.drivers.DelphiESR.esr_track01_500)
  return _internal_add_esr_track01_500();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::Esr_track01_500 >&
DelphiESR::esr_track01_500() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.DelphiESR.esr_track01_500)
  return esr_track01_500_;
}

// optional .apollo.drivers.Esr_valid1_5d0 esr_valid1_5d0 = 10;
inline bool DelphiESR::_internal_has_esr_valid1_5d0() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || esr_valid1_5d0_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_valid1_5d0() const {
  return _internal_has_esr_valid1_5d0();
}
inline void DelphiESR::clear_esr_valid1_5d0() {
  if (esr_valid1_5d0_ != nullptr) esr_valid1_5d0_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::drivers::Esr_valid1_5d0& DelphiESR::_internal_esr_valid1_5d0() const {
  const ::apollo::drivers::Esr_valid1_5d0* p = esr_valid1_5d0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_valid1_5d0*>(
      &::apollo::drivers::_Esr_valid1_5d0_default_instance_);
}
inline const ::apollo::drivers::Esr_valid1_5d0& DelphiESR::esr_valid1_5d0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_valid1_5d0)
  return _internal_esr_valid1_5d0();
}
inline ::apollo::drivers::Esr_valid1_5d0* DelphiESR::release_esr_valid1_5d0() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_valid1_5d0)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::drivers::Esr_valid1_5d0* temp = esr_valid1_5d0_;
  esr_valid1_5d0_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_valid1_5d0* DelphiESR::_internal_mutable_esr_valid1_5d0() {
  _has_bits_[0] |= 0x00000080u;
  if (esr_valid1_5d0_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_valid1_5d0>(GetArenaNoVirtual());
    esr_valid1_5d0_ = p;
  }
  return esr_valid1_5d0_;
}
inline ::apollo::drivers::Esr_valid1_5d0* DelphiESR::mutable_esr_valid1_5d0() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_valid1_5d0)
  return _internal_mutable_esr_valid1_5d0();
}
inline void DelphiESR::set_allocated_esr_valid1_5d0(::apollo::drivers::Esr_valid1_5d0* esr_valid1_5d0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_valid1_5d0_;
  }
  if (esr_valid1_5d0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_valid1_5d0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_valid1_5d0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  esr_valid1_5d0_ = esr_valid1_5d0;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_valid1_5d0)
}

// optional .apollo.drivers.Esr_valid2_5d1 esr_valid2_5d1 = 11;
inline bool DelphiESR::_internal_has_esr_valid2_5d1() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || esr_valid2_5d1_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_valid2_5d1() const {
  return _internal_has_esr_valid2_5d1();
}
inline void DelphiESR::clear_esr_valid2_5d1() {
  if (esr_valid2_5d1_ != nullptr) esr_valid2_5d1_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::drivers::Esr_valid2_5d1& DelphiESR::_internal_esr_valid2_5d1() const {
  const ::apollo::drivers::Esr_valid2_5d1* p = esr_valid2_5d1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_valid2_5d1*>(
      &::apollo::drivers::_Esr_valid2_5d1_default_instance_);
}
inline const ::apollo::drivers::Esr_valid2_5d1& DelphiESR::esr_valid2_5d1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_valid2_5d1)
  return _internal_esr_valid2_5d1();
}
inline ::apollo::drivers::Esr_valid2_5d1* DelphiESR::release_esr_valid2_5d1() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_valid2_5d1)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::drivers::Esr_valid2_5d1* temp = esr_valid2_5d1_;
  esr_valid2_5d1_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_valid2_5d1* DelphiESR::_internal_mutable_esr_valid2_5d1() {
  _has_bits_[0] |= 0x00000100u;
  if (esr_valid2_5d1_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_valid2_5d1>(GetArenaNoVirtual());
    esr_valid2_5d1_ = p;
  }
  return esr_valid2_5d1_;
}
inline ::apollo::drivers::Esr_valid2_5d1* DelphiESR::mutable_esr_valid2_5d1() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_valid2_5d1)
  return _internal_mutable_esr_valid2_5d1();
}
inline void DelphiESR::set_allocated_esr_valid2_5d1(::apollo::drivers::Esr_valid2_5d1* esr_valid2_5d1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_valid2_5d1_;
  }
  if (esr_valid2_5d1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_valid2_5d1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_valid2_5d1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  esr_valid2_5d1_ = esr_valid2_5d1;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_valid2_5d1)
}

// optional .apollo.drivers.Acm_inst_resp_7e4 acm_inst_resp_7e4 = 12;
inline bool DelphiESR::_internal_has_acm_inst_resp_7e4() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || acm_inst_resp_7e4_ != nullptr);
  return value;
}
inline bool DelphiESR::has_acm_inst_resp_7e4() const {
  return _internal_has_acm_inst_resp_7e4();
}
inline void DelphiESR::clear_acm_inst_resp_7e4() {
  if (acm_inst_resp_7e4_ != nullptr) acm_inst_resp_7e4_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::drivers::Acm_inst_resp_7e4& DelphiESR::_internal_acm_inst_resp_7e4() const {
  const ::apollo::drivers::Acm_inst_resp_7e4* p = acm_inst_resp_7e4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Acm_inst_resp_7e4*>(
      &::apollo::drivers::_Acm_inst_resp_7e4_default_instance_);
}
inline const ::apollo::drivers::Acm_inst_resp_7e4& DelphiESR::acm_inst_resp_7e4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.acm_inst_resp_7e4)
  return _internal_acm_inst_resp_7e4();
}
inline ::apollo::drivers::Acm_inst_resp_7e4* DelphiESR::release_acm_inst_resp_7e4() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.acm_inst_resp_7e4)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::drivers::Acm_inst_resp_7e4* temp = acm_inst_resp_7e4_;
  acm_inst_resp_7e4_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Acm_inst_resp_7e4* DelphiESR::_internal_mutable_acm_inst_resp_7e4() {
  _has_bits_[0] |= 0x00000200u;
  if (acm_inst_resp_7e4_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Acm_inst_resp_7e4>(GetArenaNoVirtual());
    acm_inst_resp_7e4_ = p;
  }
  return acm_inst_resp_7e4_;
}
inline ::apollo::drivers::Acm_inst_resp_7e4* DelphiESR::mutable_acm_inst_resp_7e4() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.acm_inst_resp_7e4)
  return _internal_mutable_acm_inst_resp_7e4();
}
inline void DelphiESR::set_allocated_acm_inst_resp_7e4(::apollo::drivers::Acm_inst_resp_7e4* acm_inst_resp_7e4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acm_inst_resp_7e4_;
  }
  if (acm_inst_resp_7e4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acm_inst_resp_7e4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acm_inst_resp_7e4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  acm_inst_resp_7e4_ = acm_inst_resp_7e4;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.acm_inst_resp_7e4)
}

// optional .apollo.drivers.Vehicle2_4f1 vehicle2_4f1 = 13;
inline bool DelphiESR::_internal_has_vehicle2_4f1() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || vehicle2_4f1_ != nullptr);
  return value;
}
inline bool DelphiESR::has_vehicle2_4f1() const {
  return _internal_has_vehicle2_4f1();
}
inline void DelphiESR::clear_vehicle2_4f1() {
  if (vehicle2_4f1_ != nullptr) vehicle2_4f1_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::drivers::Vehicle2_4f1& DelphiESR::_internal_vehicle2_4f1() const {
  const ::apollo::drivers::Vehicle2_4f1* p = vehicle2_4f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Vehicle2_4f1*>(
      &::apollo::drivers::_Vehicle2_4f1_default_instance_);
}
inline const ::apollo::drivers::Vehicle2_4f1& DelphiESR::vehicle2_4f1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.vehicle2_4f1)
  return _internal_vehicle2_4f1();
}
inline ::apollo::drivers::Vehicle2_4f1* DelphiESR::release_vehicle2_4f1() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.vehicle2_4f1)
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::drivers::Vehicle2_4f1* temp = vehicle2_4f1_;
  vehicle2_4f1_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Vehicle2_4f1* DelphiESR::_internal_mutable_vehicle2_4f1() {
  _has_bits_[0] |= 0x00000400u;
  if (vehicle2_4f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Vehicle2_4f1>(GetArenaNoVirtual());
    vehicle2_4f1_ = p;
  }
  return vehicle2_4f1_;
}
inline ::apollo::drivers::Vehicle2_4f1* DelphiESR::mutable_vehicle2_4f1() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.vehicle2_4f1)
  return _internal_mutable_vehicle2_4f1();
}
inline void DelphiESR::set_allocated_vehicle2_4f1(::apollo::drivers::Vehicle2_4f1* vehicle2_4f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle2_4f1_;
  }
  if (vehicle2_4f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle2_4f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle2_4f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  vehicle2_4f1_ = vehicle2_4f1;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.vehicle2_4f1)
}

// optional .apollo.drivers.Vehicle1_4f0 vehicle1_4f0 = 14;
inline bool DelphiESR::_internal_has_vehicle1_4f0() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || vehicle1_4f0_ != nullptr);
  return value;
}
inline bool DelphiESR::has_vehicle1_4f0() const {
  return _internal_has_vehicle1_4f0();
}
inline void DelphiESR::clear_vehicle1_4f0() {
  if (vehicle1_4f0_ != nullptr) vehicle1_4f0_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::drivers::Vehicle1_4f0& DelphiESR::_internal_vehicle1_4f0() const {
  const ::apollo::drivers::Vehicle1_4f0* p = vehicle1_4f0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Vehicle1_4f0*>(
      &::apollo::drivers::_Vehicle1_4f0_default_instance_);
}
inline const ::apollo::drivers::Vehicle1_4f0& DelphiESR::vehicle1_4f0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.vehicle1_4f0)
  return _internal_vehicle1_4f0();
}
inline ::apollo::drivers::Vehicle1_4f0* DelphiESR::release_vehicle1_4f0() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.vehicle1_4f0)
  _has_bits_[0] &= ~0x00000800u;
  ::apollo::drivers::Vehicle1_4f0* temp = vehicle1_4f0_;
  vehicle1_4f0_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Vehicle1_4f0* DelphiESR::_internal_mutable_vehicle1_4f0() {
  _has_bits_[0] |= 0x00000800u;
  if (vehicle1_4f0_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Vehicle1_4f0>(GetArenaNoVirtual());
    vehicle1_4f0_ = p;
  }
  return vehicle1_4f0_;
}
inline ::apollo::drivers::Vehicle1_4f0* DelphiESR::mutable_vehicle1_4f0() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.vehicle1_4f0)
  return _internal_mutable_vehicle1_4f0();
}
inline void DelphiESR::set_allocated_vehicle1_4f0(::apollo::drivers::Vehicle1_4f0* vehicle1_4f0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle1_4f0_;
  }
  if (vehicle1_4f0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle1_4f0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle1_4f0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  vehicle1_4f0_ = vehicle1_4f0;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.vehicle1_4f0)
}

// optional .apollo.drivers.Esr_sim1_5c0 esr_sim1_5c0 = 15;
inline bool DelphiESR::_internal_has_esr_sim1_5c0() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || esr_sim1_5c0_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_sim1_5c0() const {
  return _internal_has_esr_sim1_5c0();
}
inline void DelphiESR::clear_esr_sim1_5c0() {
  if (esr_sim1_5c0_ != nullptr) esr_sim1_5c0_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::drivers::Esr_sim1_5c0& DelphiESR::_internal_esr_sim1_5c0() const {
  const ::apollo::drivers::Esr_sim1_5c0* p = esr_sim1_5c0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_sim1_5c0*>(
      &::apollo::drivers::_Esr_sim1_5c0_default_instance_);
}
inline const ::apollo::drivers::Esr_sim1_5c0& DelphiESR::esr_sim1_5c0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_sim1_5c0)
  return _internal_esr_sim1_5c0();
}
inline ::apollo::drivers::Esr_sim1_5c0* DelphiESR::release_esr_sim1_5c0() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_sim1_5c0)
  _has_bits_[0] &= ~0x00001000u;
  ::apollo::drivers::Esr_sim1_5c0* temp = esr_sim1_5c0_;
  esr_sim1_5c0_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_sim1_5c0* DelphiESR::_internal_mutable_esr_sim1_5c0() {
  _has_bits_[0] |= 0x00001000u;
  if (esr_sim1_5c0_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_sim1_5c0>(GetArenaNoVirtual());
    esr_sim1_5c0_ = p;
  }
  return esr_sim1_5c0_;
}
inline ::apollo::drivers::Esr_sim1_5c0* DelphiESR::mutable_esr_sim1_5c0() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_sim1_5c0)
  return _internal_mutable_esr_sim1_5c0();
}
inline void DelphiESR::set_allocated_esr_sim1_5c0(::apollo::drivers::Esr_sim1_5c0* esr_sim1_5c0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_sim1_5c0_;
  }
  if (esr_sim1_5c0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_sim1_5c0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_sim1_5c0, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  esr_sim1_5c0_ = esr_sim1_5c0;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_sim1_5c0)
}

// optional .apollo.drivers.Esr_status1_4e0 esr_status1_4e0 = 16;
inline bool DelphiESR::_internal_has_esr_status1_4e0() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || esr_status1_4e0_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status1_4e0() const {
  return _internal_has_esr_status1_4e0();
}
inline void DelphiESR::clear_esr_status1_4e0() {
  if (esr_status1_4e0_ != nullptr) esr_status1_4e0_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::drivers::Esr_status1_4e0& DelphiESR::_internal_esr_status1_4e0() const {
  const ::apollo::drivers::Esr_status1_4e0* p = esr_status1_4e0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status1_4e0*>(
      &::apollo::drivers::_Esr_status1_4e0_default_instance_);
}
inline const ::apollo::drivers::Esr_status1_4e0& DelphiESR::esr_status1_4e0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status1_4e0)
  return _internal_esr_status1_4e0();
}
inline ::apollo::drivers::Esr_status1_4e0* DelphiESR::release_esr_status1_4e0() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status1_4e0)
  _has_bits_[0] &= ~0x00002000u;
  ::apollo::drivers::Esr_status1_4e0* temp = esr_status1_4e0_;
  esr_status1_4e0_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status1_4e0* DelphiESR::_internal_mutable_esr_status1_4e0() {
  _has_bits_[0] |= 0x00002000u;
  if (esr_status1_4e0_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status1_4e0>(GetArenaNoVirtual());
    esr_status1_4e0_ = p;
  }
  return esr_status1_4e0_;
}
inline ::apollo::drivers::Esr_status1_4e0* DelphiESR::mutable_esr_status1_4e0() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status1_4e0)
  return _internal_mutable_esr_status1_4e0();
}
inline void DelphiESR::set_allocated_esr_status1_4e0(::apollo::drivers::Esr_status1_4e0* esr_status1_4e0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status1_4e0_;
  }
  if (esr_status1_4e0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status1_4e0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status1_4e0, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  esr_status1_4e0_ = esr_status1_4e0;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status1_4e0)
}

// optional .apollo.drivers.Esr_status2_4e1 esr_status2_4e1 = 17;
inline bool DelphiESR::_internal_has_esr_status2_4e1() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || esr_status2_4e1_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status2_4e1() const {
  return _internal_has_esr_status2_4e1();
}
inline void DelphiESR::clear_esr_status2_4e1() {
  if (esr_status2_4e1_ != nullptr) esr_status2_4e1_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::apollo::drivers::Esr_status2_4e1& DelphiESR::_internal_esr_status2_4e1() const {
  const ::apollo::drivers::Esr_status2_4e1* p = esr_status2_4e1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status2_4e1*>(
      &::apollo::drivers::_Esr_status2_4e1_default_instance_);
}
inline const ::apollo::drivers::Esr_status2_4e1& DelphiESR::esr_status2_4e1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status2_4e1)
  return _internal_esr_status2_4e1();
}
inline ::apollo::drivers::Esr_status2_4e1* DelphiESR::release_esr_status2_4e1() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status2_4e1)
  _has_bits_[0] &= ~0x00004000u;
  ::apollo::drivers::Esr_status2_4e1* temp = esr_status2_4e1_;
  esr_status2_4e1_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status2_4e1* DelphiESR::_internal_mutable_esr_status2_4e1() {
  _has_bits_[0] |= 0x00004000u;
  if (esr_status2_4e1_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status2_4e1>(GetArenaNoVirtual());
    esr_status2_4e1_ = p;
  }
  return esr_status2_4e1_;
}
inline ::apollo::drivers::Esr_status2_4e1* DelphiESR::mutable_esr_status2_4e1() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status2_4e1)
  return _internal_mutable_esr_status2_4e1();
}
inline void DelphiESR::set_allocated_esr_status2_4e1(::apollo::drivers::Esr_status2_4e1* esr_status2_4e1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status2_4e1_;
  }
  if (esr_status2_4e1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status2_4e1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status2_4e1, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  esr_status2_4e1_ = esr_status2_4e1;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status2_4e1)
}

// optional .apollo.drivers.Esr_status8_5e7 esr_status8_5e7 = 18;
inline bool DelphiESR::_internal_has_esr_status8_5e7() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || esr_status8_5e7_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status8_5e7() const {
  return _internal_has_esr_status8_5e7();
}
inline void DelphiESR::clear_esr_status8_5e7() {
  if (esr_status8_5e7_ != nullptr) esr_status8_5e7_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::apollo::drivers::Esr_status8_5e7& DelphiESR::_internal_esr_status8_5e7() const {
  const ::apollo::drivers::Esr_status8_5e7* p = esr_status8_5e7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status8_5e7*>(
      &::apollo::drivers::_Esr_status8_5e7_default_instance_);
}
inline const ::apollo::drivers::Esr_status8_5e7& DelphiESR::esr_status8_5e7() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status8_5e7)
  return _internal_esr_status8_5e7();
}
inline ::apollo::drivers::Esr_status8_5e7* DelphiESR::release_esr_status8_5e7() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status8_5e7)
  _has_bits_[0] &= ~0x00008000u;
  ::apollo::drivers::Esr_status8_5e7* temp = esr_status8_5e7_;
  esr_status8_5e7_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status8_5e7* DelphiESR::_internal_mutable_esr_status8_5e7() {
  _has_bits_[0] |= 0x00008000u;
  if (esr_status8_5e7_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status8_5e7>(GetArenaNoVirtual());
    esr_status8_5e7_ = p;
  }
  return esr_status8_5e7_;
}
inline ::apollo::drivers::Esr_status8_5e7* DelphiESR::mutable_esr_status8_5e7() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status8_5e7)
  return _internal_mutable_esr_status8_5e7();
}
inline void DelphiESR::set_allocated_esr_status8_5e7(::apollo::drivers::Esr_status8_5e7* esr_status8_5e7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status8_5e7_;
  }
  if (esr_status8_5e7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status8_5e7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status8_5e7, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  esr_status8_5e7_ = esr_status8_5e7;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status8_5e7)
}

// optional .apollo.drivers.Esr_status7_5e6 esr_status7_5e6 = 19;
inline bool DelphiESR::_internal_has_esr_status7_5e6() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || esr_status7_5e6_ != nullptr);
  return value;
}
inline bool DelphiESR::has_esr_status7_5e6() const {
  return _internal_has_esr_status7_5e6();
}
inline void DelphiESR::clear_esr_status7_5e6() {
  if (esr_status7_5e6_ != nullptr) esr_status7_5e6_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::apollo::drivers::Esr_status7_5e6& DelphiESR::_internal_esr_status7_5e6() const {
  const ::apollo::drivers::Esr_status7_5e6* p = esr_status7_5e6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Esr_status7_5e6*>(
      &::apollo::drivers::_Esr_status7_5e6_default_instance_);
}
inline const ::apollo::drivers::Esr_status7_5e6& DelphiESR::esr_status7_5e6() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.esr_status7_5e6)
  return _internal_esr_status7_5e6();
}
inline ::apollo::drivers::Esr_status7_5e6* DelphiESR::release_esr_status7_5e6() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.esr_status7_5e6)
  _has_bits_[0] &= ~0x00010000u;
  ::apollo::drivers::Esr_status7_5e6* temp = esr_status7_5e6_;
  esr_status7_5e6_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Esr_status7_5e6* DelphiESR::_internal_mutable_esr_status7_5e6() {
  _has_bits_[0] |= 0x00010000u;
  if (esr_status7_5e6_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Esr_status7_5e6>(GetArenaNoVirtual());
    esr_status7_5e6_ = p;
  }
  return esr_status7_5e6_;
}
inline ::apollo::drivers::Esr_status7_5e6* DelphiESR::mutable_esr_status7_5e6() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.esr_status7_5e6)
  return _internal_mutable_esr_status7_5e6();
}
inline void DelphiESR::set_allocated_esr_status7_5e6(::apollo::drivers::Esr_status7_5e6* esr_status7_5e6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete esr_status7_5e6_;
  }
  if (esr_status7_5e6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      esr_status7_5e6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, esr_status7_5e6, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  esr_status7_5e6_ = esr_status7_5e6;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.esr_status7_5e6)
}

// optional .apollo.drivers.Vehicle3_5f2 vehicle3_5f2 = 20;
inline bool DelphiESR::_internal_has_vehicle3_5f2() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || vehicle3_5f2_ != nullptr);
  return value;
}
inline bool DelphiESR::has_vehicle3_5f2() const {
  return _internal_has_vehicle3_5f2();
}
inline void DelphiESR::clear_vehicle3_5f2() {
  if (vehicle3_5f2_ != nullptr) vehicle3_5f2_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::apollo::drivers::Vehicle3_5f2& DelphiESR::_internal_vehicle3_5f2() const {
  const ::apollo::drivers::Vehicle3_5f2* p = vehicle3_5f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Vehicle3_5f2*>(
      &::apollo::drivers::_Vehicle3_5f2_default_instance_);
}
inline const ::apollo::drivers::Vehicle3_5f2& DelphiESR::vehicle3_5f2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.vehicle3_5f2)
  return _internal_vehicle3_5f2();
}
inline ::apollo::drivers::Vehicle3_5f2* DelphiESR::release_vehicle3_5f2() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.vehicle3_5f2)
  _has_bits_[0] &= ~0x00020000u;
  ::apollo::drivers::Vehicle3_5f2* temp = vehicle3_5f2_;
  vehicle3_5f2_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Vehicle3_5f2* DelphiESR::_internal_mutable_vehicle3_5f2() {
  _has_bits_[0] |= 0x00020000u;
  if (vehicle3_5f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Vehicle3_5f2>(GetArenaNoVirtual());
    vehicle3_5f2_ = p;
  }
  return vehicle3_5f2_;
}
inline ::apollo::drivers::Vehicle3_5f2* DelphiESR::mutable_vehicle3_5f2() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.vehicle3_5f2)
  return _internal_mutable_vehicle3_5f2();
}
inline void DelphiESR::set_allocated_vehicle3_5f2(::apollo::drivers::Vehicle3_5f2* vehicle3_5f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle3_5f2_;
  }
  if (vehicle3_5f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle3_5f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle3_5f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  vehicle3_5f2_ = vehicle3_5f2;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.vehicle3_5f2)
}

// optional .apollo.drivers.Vehicle4_5f3 vehicle4_5f3 = 21;
inline bool DelphiESR::_internal_has_vehicle4_5f3() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || vehicle4_5f3_ != nullptr);
  return value;
}
inline bool DelphiESR::has_vehicle4_5f3() const {
  return _internal_has_vehicle4_5f3();
}
inline void DelphiESR::clear_vehicle4_5f3() {
  if (vehicle4_5f3_ != nullptr) vehicle4_5f3_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::apollo::drivers::Vehicle4_5f3& DelphiESR::_internal_vehicle4_5f3() const {
  const ::apollo::drivers::Vehicle4_5f3* p = vehicle4_5f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Vehicle4_5f3*>(
      &::apollo::drivers::_Vehicle4_5f3_default_instance_);
}
inline const ::apollo::drivers::Vehicle4_5f3& DelphiESR::vehicle4_5f3() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.vehicle4_5f3)
  return _internal_vehicle4_5f3();
}
inline ::apollo::drivers::Vehicle4_5f3* DelphiESR::release_vehicle4_5f3() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.vehicle4_5f3)
  _has_bits_[0] &= ~0x00040000u;
  ::apollo::drivers::Vehicle4_5f3* temp = vehicle4_5f3_;
  vehicle4_5f3_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Vehicle4_5f3* DelphiESR::_internal_mutable_vehicle4_5f3() {
  _has_bits_[0] |= 0x00040000u;
  if (vehicle4_5f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Vehicle4_5f3>(GetArenaNoVirtual());
    vehicle4_5f3_ = p;
  }
  return vehicle4_5f3_;
}
inline ::apollo::drivers::Vehicle4_5f3* DelphiESR::mutable_vehicle4_5f3() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.vehicle4_5f3)
  return _internal_mutable_vehicle4_5f3();
}
inline void DelphiESR::set_allocated_vehicle4_5f3(::apollo::drivers::Vehicle4_5f3* vehicle4_5f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle4_5f3_;
  }
  if (vehicle4_5f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle4_5f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle4_5f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  vehicle4_5f3_ = vehicle4_5f3;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.vehicle4_5f3)
}

// optional .apollo.drivers.Vehicle5_5f4 vehicle5_5f4 = 22;
inline bool DelphiESR::_internal_has_vehicle5_5f4() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || vehicle5_5f4_ != nullptr);
  return value;
}
inline bool DelphiESR::has_vehicle5_5f4() const {
  return _internal_has_vehicle5_5f4();
}
inline void DelphiESR::clear_vehicle5_5f4() {
  if (vehicle5_5f4_ != nullptr) vehicle5_5f4_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::apollo::drivers::Vehicle5_5f4& DelphiESR::_internal_vehicle5_5f4() const {
  const ::apollo::drivers::Vehicle5_5f4* p = vehicle5_5f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Vehicle5_5f4*>(
      &::apollo::drivers::_Vehicle5_5f4_default_instance_);
}
inline const ::apollo::drivers::Vehicle5_5f4& DelphiESR::vehicle5_5f4() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.vehicle5_5f4)
  return _internal_vehicle5_5f4();
}
inline ::apollo::drivers::Vehicle5_5f4* DelphiESR::release_vehicle5_5f4() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.vehicle5_5f4)
  _has_bits_[0] &= ~0x00080000u;
  ::apollo::drivers::Vehicle5_5f4* temp = vehicle5_5f4_;
  vehicle5_5f4_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Vehicle5_5f4* DelphiESR::_internal_mutable_vehicle5_5f4() {
  _has_bits_[0] |= 0x00080000u;
  if (vehicle5_5f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Vehicle5_5f4>(GetArenaNoVirtual());
    vehicle5_5f4_ = p;
  }
  return vehicle5_5f4_;
}
inline ::apollo::drivers::Vehicle5_5f4* DelphiESR::mutable_vehicle5_5f4() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.vehicle5_5f4)
  return _internal_mutable_vehicle5_5f4();
}
inline void DelphiESR::set_allocated_vehicle5_5f4(::apollo::drivers::Vehicle5_5f4* vehicle5_5f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle5_5f4_;
  }
  if (vehicle5_5f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle5_5f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle5_5f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  vehicle5_5f4_ = vehicle5_5f4;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.vehicle5_5f4)
}

// optional .apollo.drivers.Vehicle6_5f5 vehicle6_5f5 = 23;
inline bool DelphiESR::_internal_has_vehicle6_5f5() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || vehicle6_5f5_ != nullptr);
  return value;
}
inline bool DelphiESR::has_vehicle6_5f5() const {
  return _internal_has_vehicle6_5f5();
}
inline void DelphiESR::clear_vehicle6_5f5() {
  if (vehicle6_5f5_ != nullptr) vehicle6_5f5_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::apollo::drivers::Vehicle6_5f5& DelphiESR::_internal_vehicle6_5f5() const {
  const ::apollo::drivers::Vehicle6_5f5* p = vehicle6_5f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::Vehicle6_5f5*>(
      &::apollo::drivers::_Vehicle6_5f5_default_instance_);
}
inline const ::apollo::drivers::Vehicle6_5f5& DelphiESR::vehicle6_5f5() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.DelphiESR.vehicle6_5f5)
  return _internal_vehicle6_5f5();
}
inline ::apollo::drivers::Vehicle6_5f5* DelphiESR::release_vehicle6_5f5() {
  // @@protoc_insertion_point(field_release:apollo.drivers.DelphiESR.vehicle6_5f5)
  _has_bits_[0] &= ~0x00100000u;
  ::apollo::drivers::Vehicle6_5f5* temp = vehicle6_5f5_;
  vehicle6_5f5_ = nullptr;
  return temp;
}
inline ::apollo::drivers::Vehicle6_5f5* DelphiESR::_internal_mutable_vehicle6_5f5() {
  _has_bits_[0] |= 0x00100000u;
  if (vehicle6_5f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::Vehicle6_5f5>(GetArenaNoVirtual());
    vehicle6_5f5_ = p;
  }
  return vehicle6_5f5_;
}
inline ::apollo::drivers::Vehicle6_5f5* DelphiESR::mutable_vehicle6_5f5() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.DelphiESR.vehicle6_5f5)
  return _internal_mutable_vehicle6_5f5();
}
inline void DelphiESR::set_allocated_vehicle6_5f5(::apollo::drivers::Vehicle6_5f5* vehicle6_5f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle6_5f5_;
  }
  if (vehicle6_5f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle6_5f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle6_5f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  vehicle6_5f5_ = vehicle6_5f5;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.DelphiESR.vehicle6_5f5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType>() {
  return ::apollo::drivers::Esr_status6_5e5_Can_tx_vertical_align_updatedType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType>() {
  return ::apollo::drivers::Esr_status6_5e5_Can_tx_found_targetType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type>() {
  return ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_2Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type>() {
  return ::apollo::drivers::Esr_status6_5e5_Can_tx_factory_align_status_1Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType>() {
  return ::apollo::drivers::Esr_status6_5e5_Can_tx_recommend_unconvergeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType>() {
  return ::apollo::drivers::Esr_status6_5e5_Can_tx_system_power_modeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType>() {
  return ::apollo::drivers::Esr_status4_4e3_Can_tx_truck_target_detType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType>() {
  return ::apollo::drivers::Esr_status4_4e3_Can_tx_lr_only_grating_lobe_detType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType>() {
  return ::apollo::drivers::Esr_status4_4e3_Can_tx_sidelobe_blockageType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType>() {
  return ::apollo::drivers::Esr_status4_4e3_Can_tx_partial_blockageType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType>() {
  return ::apollo::drivers::Esr_status4_4e3_Can_tx_mr_lr_modeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType>() {
  return ::apollo::drivers::Esr_track01_500_Can_tx_track_grouping_changedType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType>() {
  return ::apollo::drivers::Esr_track01_500_Can_tx_track_oncomingType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType>() {
  return ::apollo::drivers::Esr_track01_500_Can_tx_track_bridge_objectType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType>() {
  return ::apollo::drivers::Esr_track01_500_Can_tx_track_statusType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType>() {
  return ::apollo::drivers::Esr_track01_500_Can_tx_track_med_range_modeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_mr_only_transmitType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_lr_only_transmitType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_clear_faultsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_use_angle_misalignmentType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_turn_signal_statusType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_blockage_disableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_vehicle_speed_validityType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_mmr_upside_downType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_wiper_statusType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_raw_data_enableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_radar_cmd_radiateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType>() {
  return ::apollo::drivers::Vehicle2_4f1_Can_rx_grouping_modeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType>() {
  return ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_validityType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType>() {
  return ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_signType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType>() {
  return ::apollo::drivers::Vehicle1_4f0_Can_rx_steering_angle_rate_signType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType>() {
  return ::apollo::drivers::Vehicle1_4f0_Can_rx_yaw_rate_validityType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType>() {
  return ::apollo::drivers::Vehicle1_4f0_Can_rx_vehicle_speed_directionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType>() {
  return ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_track_idType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType>() {
  return ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_statusType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType>() {
  return ::apollo::drivers::Esr_sim1_5c0_Can_rx_sim_functionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType>() {
  return ::apollo::drivers::Esr_status2_4e1_Can_tx_raw_data_modeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType>() {
  return ::apollo::drivers::Esr_status2_4e1_Can_tx_range_perf_errorType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType>() {
  return ::apollo::drivers::Esr_status2_4e1_Can_tx_overheat_errorType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType>() {
  return ::apollo::drivers::Esr_status2_4e1_Can_tx_internal_errorType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType>() {
  return ::apollo::drivers::Esr_status2_4e1_Can_tx_grouping_modeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType>() {
  return ::apollo::drivers::Esr_status2_4e1_Can_tx_xcvr_operationalType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType>() {
  return ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_typeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType>() {
  return ::apollo::drivers::Vehicle3_5f2_Can_rx_serv_align_enableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType>() {
  return ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_convergedType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType>() {
  return ::apollo::drivers::Vehicle3_5f2_Can_rx_auto_align_disableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType>() {
  return ::apollo::drivers::Vehicle3_5f2_Can_rx_wheel_slipType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType>() {
  return ::apollo::drivers::Vehicle3_5f2_Can_rx_long_accel_validityType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType>() {
  return ::apollo::drivers::Vehicle3_5f2_Can_rx_lat_accel_validityType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type>() {
  return ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_2Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type>() {
  return ::apollo::drivers::Vehicle4_5f3_Can_rx_fac_align_cmd_1Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType>() {
  return ::apollo::drivers::Vehicle5_5f4_Can_rx_yaw_rate_bias_shiftType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fdelphi_5fesr_2eproto
