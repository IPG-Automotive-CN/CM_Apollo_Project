// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/velodyne/proto/velodyne.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto;
namespace apollo {
namespace drivers {
namespace velodyne {
class VelodynePacket;
class VelodynePacketDefaultTypeInternal;
extern VelodynePacketDefaultTypeInternal _VelodynePacket_default_instance_;
class VelodyneScan;
class VelodyneScanDefaultTypeInternal;
extern VelodyneScanDefaultTypeInternal _VelodyneScan_default_instance_;
}  // namespace velodyne
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::velodyne::VelodynePacket* Arena::CreateMaybeMessage<::apollo::drivers::velodyne::VelodynePacket>(Arena*);
template<> ::apollo::drivers::velodyne::VelodyneScan* Arena::CreateMaybeMessage<::apollo::drivers::velodyne::VelodyneScan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace velodyne {

enum Model : int {
  UNKOWN = 0,
  HDL64E_S3S = 1,
  HDL64E_S3D = 2,
  HDL64E_S2 = 3,
  HDL32E = 4,
  VLP16 = 5,
  VLP32C = 6,
  VLS128 = 7
};
bool Model_IsValid(int value);
constexpr Model Model_MIN = UNKOWN;
constexpr Model Model_MAX = VLS128;
constexpr int Model_ARRAYSIZE = Model_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Model_descriptor();
template<typename T>
inline const std::string& Model_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Model>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Model_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Model_descriptor(), enum_t_value);
}
inline bool Model_Parse(
    const std::string& name, Model* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Model>(
    Model_descriptor(), name, value);
}
enum Mode : int {
  STRONGEST = 1,
  LAST = 2,
  DUAL = 3
};
bool Mode_IsValid(int value);
constexpr Mode Mode_MIN = STRONGEST;
constexpr Mode Mode_MAX = DUAL;
constexpr int Mode_ARRAYSIZE = Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mode_descriptor();
template<typename T>
inline const std::string& Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mode_descriptor(), enum_t_value);
}
inline bool Mode_Parse(
    const std::string& name, Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mode>(
    Mode_descriptor(), name, value);
}
// ===================================================================

class VelodynePacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.velodyne.VelodynePacket) */ {
 public:
  VelodynePacket();
  virtual ~VelodynePacket();

  VelodynePacket(const VelodynePacket& from);
  VelodynePacket(VelodynePacket&& from) noexcept
    : VelodynePacket() {
    *this = ::std::move(from);
  }

  inline VelodynePacket& operator=(const VelodynePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelodynePacket& operator=(VelodynePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelodynePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelodynePacket* internal_default_instance() {
    return reinterpret_cast<const VelodynePacket*>(
               &_VelodynePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VelodynePacket& a, VelodynePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(VelodynePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelodynePacket* New() const final {
    return CreateMaybeMessage<VelodynePacket>(nullptr);
  }

  VelodynePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelodynePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelodynePacket& from);
  void MergeFrom(const VelodynePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelodynePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.velodyne.VelodynePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kStampFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint64 stamp = 1;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.velodyne.VelodynePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_;
  friend struct ::TableStruct_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto;
};
// -------------------------------------------------------------------

class VelodyneScan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.velodyne.VelodyneScan) */ {
 public:
  VelodyneScan();
  virtual ~VelodyneScan();

  VelodyneScan(const VelodyneScan& from);
  VelodyneScan(VelodyneScan&& from) noexcept
    : VelodyneScan() {
    *this = ::std::move(from);
  }

  inline VelodyneScan& operator=(const VelodyneScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelodyneScan& operator=(VelodyneScan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelodyneScan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelodyneScan* internal_default_instance() {
    return reinterpret_cast<const VelodyneScan*>(
               &_VelodyneScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VelodyneScan& a, VelodyneScan& b) {
    a.Swap(&b);
  }
  inline void Swap(VelodyneScan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelodyneScan* New() const final {
    return CreateMaybeMessage<VelodyneScan>(nullptr);
  }

  VelodyneScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelodyneScan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelodyneScan& from);
  void MergeFrom(const VelodyneScan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelodyneScan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.velodyne.VelodyneScan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiringPktsFieldNumber = 4,
    kPositioningPktsFieldNumber = 5,
    kSnFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kBasetimeFieldNumber = 7,
    kModelFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // repeated .apollo.drivers.velodyne.VelodynePacket firing_pkts = 4;
  int firing_pkts_size() const;
  private:
  int _internal_firing_pkts_size() const;
  public:
  void clear_firing_pkts();
  ::apollo::drivers::velodyne::VelodynePacket* mutable_firing_pkts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket >*
      mutable_firing_pkts();
  private:
  const ::apollo::drivers::velodyne::VelodynePacket& _internal_firing_pkts(int index) const;
  ::apollo::drivers::velodyne::VelodynePacket* _internal_add_firing_pkts();
  public:
  const ::apollo::drivers::velodyne::VelodynePacket& firing_pkts(int index) const;
  ::apollo::drivers::velodyne::VelodynePacket* add_firing_pkts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket >&
      firing_pkts() const;

  // repeated .apollo.drivers.velodyne.VelodynePacket positioning_pkts = 5;
  int positioning_pkts_size() const;
  private:
  int _internal_positioning_pkts_size() const;
  public:
  void clear_positioning_pkts();
  ::apollo::drivers::velodyne::VelodynePacket* mutable_positioning_pkts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket >*
      mutable_positioning_pkts();
  private:
  const ::apollo::drivers::velodyne::VelodynePacket& _internal_positioning_pkts(int index) const;
  ::apollo::drivers::velodyne::VelodynePacket* _internal_add_positioning_pkts();
  public:
  const ::apollo::drivers::velodyne::VelodynePacket& positioning_pkts(int index) const;
  ::apollo::drivers::velodyne::VelodynePacket* add_positioning_pkts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket >&
      positioning_pkts() const;

  // optional string sn = 6;
  bool has_sn() const;
  private:
  bool _internal_has_sn() const;
  public:
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);
  private:
  const std::string& _internal_sn() const;
  void _internal_set_sn(const std::string& value);
  std::string* _internal_mutable_sn();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional uint64 basetime = 7 [default = 0];
  bool has_basetime() const;
  private:
  bool _internal_has_basetime() const;
  public:
  void clear_basetime();
  ::PROTOBUF_NAMESPACE_ID::uint64 basetime() const;
  void set_basetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_basetime() const;
  void _internal_set_basetime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .apollo.drivers.velodyne.Model model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  ::apollo::drivers::velodyne::Model model() const;
  void set_model(::apollo::drivers::velodyne::Model value);
  private:
  ::apollo::drivers::velodyne::Model _internal_model() const;
  void _internal_set_model(::apollo::drivers::velodyne::Model value);
  public:

  // optional .apollo.drivers.velodyne.Mode mode = 3;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::apollo::drivers::velodyne::Mode mode() const;
  void set_mode(::apollo::drivers::velodyne::Mode value);
  private:
  ::apollo::drivers::velodyne::Mode _internal_mode() const;
  void _internal_set_mode(::apollo::drivers::velodyne::Mode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.velodyne.VelodyneScan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket > firing_pkts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket > positioning_pkts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::apollo::common::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint64 basetime_;
  int model_;
  int mode_;
  friend struct ::TableStruct_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VelodynePacket

// optional uint64 stamp = 1;
inline bool VelodynePacket::_internal_has_stamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VelodynePacket::has_stamp() const {
  return _internal_has_stamp();
}
inline void VelodynePacket::clear_stamp() {
  stamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VelodynePacket::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VelodynePacket::stamp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodynePacket.stamp)
  return _internal_stamp();
}
inline void VelodynePacket::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  stamp_ = value;
}
inline void VelodynePacket::set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.VelodynePacket.stamp)
}

// optional bytes data = 2;
inline bool VelodynePacket::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VelodynePacket::has_data() const {
  return _internal_has_data();
}
inline void VelodynePacket::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VelodynePacket::data() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodynePacket.data)
  return _internal_data();
}
inline void VelodynePacket::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.VelodynePacket.data)
}
inline std::string* VelodynePacket::mutable_data() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.VelodynePacket.data)
  return _internal_mutable_data();
}
inline const std::string& VelodynePacket::_internal_data() const {
  return data_.GetNoArena();
}
inline void VelodynePacket::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VelodynePacket::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.VelodynePacket.data)
}
inline void VelodynePacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.VelodynePacket.data)
}
inline void VelodynePacket::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.VelodynePacket.data)
}
inline std::string* VelodynePacket::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VelodynePacket::release_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.VelodynePacket.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VelodynePacket::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.VelodynePacket.data)
}

// -------------------------------------------------------------------

// VelodyneScan

// optional .apollo.common.Header header = 1;
inline bool VelodyneScan::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool VelodyneScan::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& VelodyneScan::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& VelodyneScan::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodyneScan.header)
  return _internal_header();
}
inline ::apollo::common::Header* VelodyneScan::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.VelodyneScan.header)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* VelodyneScan::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* VelodyneScan::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.VelodyneScan.header)
  return _internal_mutable_header();
}
inline void VelodyneScan::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.VelodyneScan.header)
}

// optional .apollo.drivers.velodyne.Model model = 2;
inline bool VelodyneScan::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VelodyneScan::has_model() const {
  return _internal_has_model();
}
inline void VelodyneScan::clear_model() {
  model_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::velodyne::Model VelodyneScan::_internal_model() const {
  return static_cast< ::apollo::drivers::velodyne::Model >(model_);
}
inline ::apollo::drivers::velodyne::Model VelodyneScan::model() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodyneScan.model)
  return _internal_model();
}
inline void VelodyneScan::_internal_set_model(::apollo::drivers::velodyne::Model value) {
  assert(::apollo::drivers::velodyne::Model_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  model_ = value;
}
inline void VelodyneScan::set_model(::apollo::drivers::velodyne::Model value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.VelodyneScan.model)
}

// optional .apollo.drivers.velodyne.Mode mode = 3;
inline bool VelodyneScan::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VelodyneScan::has_mode() const {
  return _internal_has_mode();
}
inline void VelodyneScan::clear_mode() {
  mode_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::velodyne::Mode VelodyneScan::_internal_mode() const {
  return static_cast< ::apollo::drivers::velodyne::Mode >(mode_);
}
inline ::apollo::drivers::velodyne::Mode VelodyneScan::mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodyneScan.mode)
  return _internal_mode();
}
inline void VelodyneScan::_internal_set_mode(::apollo::drivers::velodyne::Mode value) {
  assert(::apollo::drivers::velodyne::Mode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
}
inline void VelodyneScan::set_mode(::apollo::drivers::velodyne::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.VelodyneScan.mode)
}

// repeated .apollo.drivers.velodyne.VelodynePacket firing_pkts = 4;
inline int VelodyneScan::_internal_firing_pkts_size() const {
  return firing_pkts_.size();
}
inline int VelodyneScan::firing_pkts_size() const {
  return _internal_firing_pkts_size();
}
inline void VelodyneScan::clear_firing_pkts() {
  firing_pkts_.Clear();
}
inline ::apollo::drivers::velodyne::VelodynePacket* VelodyneScan::mutable_firing_pkts(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.VelodyneScan.firing_pkts)
  return firing_pkts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket >*
VelodyneScan::mutable_firing_pkts() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.velodyne.VelodyneScan.firing_pkts)
  return &firing_pkts_;
}
inline const ::apollo::drivers::velodyne::VelodynePacket& VelodyneScan::_internal_firing_pkts(int index) const {
  return firing_pkts_.Get(index);
}
inline const ::apollo::drivers::velodyne::VelodynePacket& VelodyneScan::firing_pkts(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodyneScan.firing_pkts)
  return _internal_firing_pkts(index);
}
inline ::apollo::drivers::velodyne::VelodynePacket* VelodyneScan::_internal_add_firing_pkts() {
  return firing_pkts_.Add();
}
inline ::apollo::drivers::velodyne::VelodynePacket* VelodyneScan::add_firing_pkts() {
  // @@protoc_insertion_point(field_add:apollo.drivers.velodyne.VelodyneScan.firing_pkts)
  return _internal_add_firing_pkts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket >&
VelodyneScan::firing_pkts() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.velodyne.VelodyneScan.firing_pkts)
  return firing_pkts_;
}

// repeated .apollo.drivers.velodyne.VelodynePacket positioning_pkts = 5;
inline int VelodyneScan::_internal_positioning_pkts_size() const {
  return positioning_pkts_.size();
}
inline int VelodyneScan::positioning_pkts_size() const {
  return _internal_positioning_pkts_size();
}
inline void VelodyneScan::clear_positioning_pkts() {
  positioning_pkts_.Clear();
}
inline ::apollo::drivers::velodyne::VelodynePacket* VelodyneScan::mutable_positioning_pkts(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.VelodyneScan.positioning_pkts)
  return positioning_pkts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket >*
VelodyneScan::mutable_positioning_pkts() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.velodyne.VelodyneScan.positioning_pkts)
  return &positioning_pkts_;
}
inline const ::apollo::drivers::velodyne::VelodynePacket& VelodyneScan::_internal_positioning_pkts(int index) const {
  return positioning_pkts_.Get(index);
}
inline const ::apollo::drivers::velodyne::VelodynePacket& VelodyneScan::positioning_pkts(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodyneScan.positioning_pkts)
  return _internal_positioning_pkts(index);
}
inline ::apollo::drivers::velodyne::VelodynePacket* VelodyneScan::_internal_add_positioning_pkts() {
  return positioning_pkts_.Add();
}
inline ::apollo::drivers::velodyne::VelodynePacket* VelodyneScan::add_positioning_pkts() {
  // @@protoc_insertion_point(field_add:apollo.drivers.velodyne.VelodyneScan.positioning_pkts)
  return _internal_add_positioning_pkts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::velodyne::VelodynePacket >&
VelodyneScan::positioning_pkts() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.velodyne.VelodyneScan.positioning_pkts)
  return positioning_pkts_;
}

// optional string sn = 6;
inline bool VelodyneScan::_internal_has_sn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VelodyneScan::has_sn() const {
  return _internal_has_sn();
}
inline void VelodyneScan::clear_sn() {
  sn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VelodyneScan::sn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodyneScan.sn)
  return _internal_sn();
}
inline void VelodyneScan::set_sn(const std::string& value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.VelodyneScan.sn)
}
inline std::string* VelodyneScan::mutable_sn() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.VelodyneScan.sn)
  return _internal_mutable_sn();
}
inline const std::string& VelodyneScan::_internal_sn() const {
  return sn_.GetNoArena();
}
inline void VelodyneScan::_internal_set_sn(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VelodyneScan::set_sn(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.VelodyneScan.sn)
}
inline void VelodyneScan::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.VelodyneScan.sn)
}
inline void VelodyneScan::set_sn(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.VelodyneScan.sn)
}
inline std::string* VelodyneScan::_internal_mutable_sn() {
  _has_bits_[0] |= 0x00000001u;
  return sn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VelodyneScan::release_sn() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.VelodyneScan.sn)
  if (!_internal_has_sn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sn_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VelodyneScan::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.VelodyneScan.sn)
}

// optional uint64 basetime = 7 [default = 0];
inline bool VelodyneScan::_internal_has_basetime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VelodyneScan::has_basetime() const {
  return _internal_has_basetime();
}
inline void VelodyneScan::clear_basetime() {
  basetime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VelodyneScan::_internal_basetime() const {
  return basetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VelodyneScan::basetime() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.VelodyneScan.basetime)
  return _internal_basetime();
}
inline void VelodyneScan::_internal_set_basetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  basetime_ = value;
}
inline void VelodyneScan::set_basetime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_basetime(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.VelodyneScan.basetime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace velodyne
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::velodyne::Model> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::velodyne::Model>() {
  return ::apollo::drivers::velodyne::Model_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::velodyne::Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::velodyne::Mode>() {
  return ::apollo::drivers::velodyne::Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvelodyne_2fproto_2fvelodyne_2eproto
