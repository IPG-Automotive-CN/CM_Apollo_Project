// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/velodyne/proto/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/drivers/velodyne/proto/velodyne.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto;
namespace apollo {
namespace drivers {
namespace velodyne {
class CompensatorConfig;
class CompensatorConfigDefaultTypeInternal;
extern CompensatorConfigDefaultTypeInternal _CompensatorConfig_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class FusionConfig;
class FusionConfigDefaultTypeInternal;
extern FusionConfigDefaultTypeInternal _FusionConfig_default_instance_;
}  // namespace velodyne
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::velodyne::CompensatorConfig* Arena::CreateMaybeMessage<::apollo::drivers::velodyne::CompensatorConfig>(Arena*);
template<> ::apollo::drivers::velodyne::Config* Arena::CreateMaybeMessage<::apollo::drivers::velodyne::Config>(Arena*);
template<> ::apollo::drivers::velodyne::FusionConfig* Arena::CreateMaybeMessage<::apollo::drivers::velodyne::FusionConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace velodyne {

// ===================================================================

class Config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.velodyne.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.velodyne.Config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 1,
    kScanChannelFieldNumber = 2,
    kPcapFieldNumber = 5,
    kCalibrationFileFieldNumber = 17,
    kConvertChannelNameFieldNumber = 19,
    kModelFieldNumber = 4,
    kPrefixAngleFieldNumber = 6,
    kFiringDataPortFieldNumber = 7,
    kPositioningDataPortFieldNumber = 8,
    kMaxRangeFieldNumber = 10,
    kMinRangeFieldNumber = 11,
    kMaxAngleFieldNumber = 12,
    kMinAngleFieldNumber = 13,
    kViewDirectionFieldNumber = 14,
    kViewWidthFieldNumber = 15,
    kUseSensorSyncFieldNumber = 9,
    kCalibrationOnlineFieldNumber = 16,
    kOrganizedFieldNumber = 18,
    kUseGpsTimeFieldNumber = 23,
    kNpacketsFieldNumber = 20,
    kUsePollSyncFieldNumber = 24,
    kIsMainFrameFieldNumber = 25,
    kModeFieldNumber = 21,
    kRpmFieldNumber = 3,
  };
  // optional string frame_id = 1;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // optional string scan_channel = 2;
  bool has_scan_channel() const;
  private:
  bool _internal_has_scan_channel() const;
  public:
  void clear_scan_channel();
  const std::string& scan_channel() const;
  void set_scan_channel(const std::string& value);
  void set_scan_channel(std::string&& value);
  void set_scan_channel(const char* value);
  void set_scan_channel(const char* value, size_t size);
  std::string* mutable_scan_channel();
  std::string* release_scan_channel();
  void set_allocated_scan_channel(std::string* scan_channel);
  private:
  const std::string& _internal_scan_channel() const;
  void _internal_set_scan_channel(const std::string& value);
  std::string* _internal_mutable_scan_channel();
  public:

  // optional string pcap = 5;
  bool has_pcap() const;
  private:
  bool _internal_has_pcap() const;
  public:
  void clear_pcap();
  const std::string& pcap() const;
  void set_pcap(const std::string& value);
  void set_pcap(std::string&& value);
  void set_pcap(const char* value);
  void set_pcap(const char* value, size_t size);
  std::string* mutable_pcap();
  std::string* release_pcap();
  void set_allocated_pcap(std::string* pcap);
  private:
  const std::string& _internal_pcap() const;
  void _internal_set_pcap(const std::string& value);
  std::string* _internal_mutable_pcap();
  public:

  // optional string calibration_file = 17;
  bool has_calibration_file() const;
  private:
  bool _internal_has_calibration_file() const;
  public:
  void clear_calibration_file();
  const std::string& calibration_file() const;
  void set_calibration_file(const std::string& value);
  void set_calibration_file(std::string&& value);
  void set_calibration_file(const char* value);
  void set_calibration_file(const char* value, size_t size);
  std::string* mutable_calibration_file();
  std::string* release_calibration_file();
  void set_allocated_calibration_file(std::string* calibration_file);
  private:
  const std::string& _internal_calibration_file() const;
  void _internal_set_calibration_file(const std::string& value);
  std::string* _internal_mutable_calibration_file();
  public:

  // optional string convert_channel_name = 19;
  bool has_convert_channel_name() const;
  private:
  bool _internal_has_convert_channel_name() const;
  public:
  void clear_convert_channel_name();
  const std::string& convert_channel_name() const;
  void set_convert_channel_name(const std::string& value);
  void set_convert_channel_name(std::string&& value);
  void set_convert_channel_name(const char* value);
  void set_convert_channel_name(const char* value, size_t size);
  std::string* mutable_convert_channel_name();
  std::string* release_convert_channel_name();
  void set_allocated_convert_channel_name(std::string* convert_channel_name);
  private:
  const std::string& _internal_convert_channel_name() const;
  void _internal_set_convert_channel_name(const std::string& value);
  std::string* _internal_mutable_convert_channel_name();
  public:

  // optional .apollo.drivers.velodyne.Model model = 4;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  ::apollo::drivers::velodyne::Model model() const;
  void set_model(::apollo::drivers::velodyne::Model value);
  private:
  ::apollo::drivers::velodyne::Model _internal_model() const;
  void _internal_set_model(::apollo::drivers::velodyne::Model value);
  public:

  // optional int32 prefix_angle = 6;
  bool has_prefix_angle() const;
  private:
  bool _internal_has_prefix_angle() const;
  public:
  void clear_prefix_angle();
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_angle() const;
  void set_prefix_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prefix_angle() const;
  void _internal_set_prefix_angle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 firing_data_port = 7;
  bool has_firing_data_port() const;
  private:
  bool _internal_has_firing_data_port() const;
  public:
  void clear_firing_data_port();
  ::PROTOBUF_NAMESPACE_ID::int32 firing_data_port() const;
  void set_firing_data_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_firing_data_port() const;
  void _internal_set_firing_data_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 positioning_data_port = 8;
  bool has_positioning_data_port() const;
  private:
  bool _internal_has_positioning_data_port() const;
  public:
  void clear_positioning_data_port();
  ::PROTOBUF_NAMESPACE_ID::int32 positioning_data_port() const;
  void set_positioning_data_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positioning_data_port() const;
  void _internal_set_positioning_data_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double max_range = 10;
  bool has_max_range() const;
  private:
  bool _internal_has_max_range() const;
  public:
  void clear_max_range();
  double max_range() const;
  void set_max_range(double value);
  private:
  double _internal_max_range() const;
  void _internal_set_max_range(double value);
  public:

  // optional double min_range = 11;
  bool has_min_range() const;
  private:
  bool _internal_has_min_range() const;
  public:
  void clear_min_range();
  double min_range() const;
  void set_min_range(double value);
  private:
  double _internal_min_range() const;
  void _internal_set_min_range(double value);
  public:

  // optional double max_angle = 12;
  bool has_max_angle() const;
  private:
  bool _internal_has_max_angle() const;
  public:
  void clear_max_angle();
  double max_angle() const;
  void set_max_angle(double value);
  private:
  double _internal_max_angle() const;
  void _internal_set_max_angle(double value);
  public:

  // optional double min_angle = 13;
  bool has_min_angle() const;
  private:
  bool _internal_has_min_angle() const;
  public:
  void clear_min_angle();
  double min_angle() const;
  void set_min_angle(double value);
  private:
  double _internal_min_angle() const;
  void _internal_set_min_angle(double value);
  public:

  // optional double view_direction = 14;
  bool has_view_direction() const;
  private:
  bool _internal_has_view_direction() const;
  public:
  void clear_view_direction();
  double view_direction() const;
  void set_view_direction(double value);
  private:
  double _internal_view_direction() const;
  void _internal_set_view_direction(double value);
  public:

  // optional double view_width = 15;
  bool has_view_width() const;
  private:
  bool _internal_has_view_width() const;
  public:
  void clear_view_width();
  double view_width() const;
  void set_view_width(double value);
  private:
  double _internal_view_width() const;
  void _internal_set_view_width(double value);
  public:

  // optional bool use_sensor_sync = 9;
  bool has_use_sensor_sync() const;
  private:
  bool _internal_has_use_sensor_sync() const;
  public:
  void clear_use_sensor_sync();
  bool use_sensor_sync() const;
  void set_use_sensor_sync(bool value);
  private:
  bool _internal_use_sensor_sync() const;
  void _internal_set_use_sensor_sync(bool value);
  public:

  // optional bool calibration_online = 16;
  bool has_calibration_online() const;
  private:
  bool _internal_has_calibration_online() const;
  public:
  void clear_calibration_online();
  bool calibration_online() const;
  void set_calibration_online(bool value);
  private:
  bool _internal_calibration_online() const;
  void _internal_set_calibration_online(bool value);
  public:

  // optional bool organized = 18;
  bool has_organized() const;
  private:
  bool _internal_has_organized() const;
  public:
  void clear_organized();
  bool organized() const;
  void set_organized(bool value);
  private:
  bool _internal_organized() const;
  void _internal_set_organized(bool value);
  public:

  // optional bool use_gps_time = 23;
  bool has_use_gps_time() const;
  private:
  bool _internal_has_use_gps_time() const;
  public:
  void clear_use_gps_time();
  bool use_gps_time() const;
  void set_use_gps_time(bool value);
  private:
  bool _internal_use_gps_time() const;
  void _internal_set_use_gps_time(bool value);
  public:

  // optional int32 npackets = 20;
  bool has_npackets() const;
  private:
  bool _internal_has_npackets() const;
  public:
  void clear_npackets();
  ::PROTOBUF_NAMESPACE_ID::int32 npackets() const;
  void set_npackets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_npackets() const;
  void _internal_set_npackets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool use_poll_sync = 24;
  bool has_use_poll_sync() const;
  private:
  bool _internal_has_use_poll_sync() const;
  public:
  void clear_use_poll_sync();
  bool use_poll_sync() const;
  void set_use_poll_sync(bool value);
  private:
  bool _internal_use_poll_sync() const;
  void _internal_set_use_poll_sync(bool value);
  public:

  // optional bool is_main_frame = 25;
  bool has_is_main_frame() const;
  private:
  bool _internal_has_is_main_frame() const;
  public:
  void clear_is_main_frame();
  bool is_main_frame() const;
  void set_is_main_frame(bool value);
  private:
  bool _internal_is_main_frame() const;
  void _internal_set_is_main_frame(bool value);
  public:

  // optional .apollo.drivers.velodyne.Mode mode = 21;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::apollo::drivers::velodyne::Mode mode() const;
  void set_mode(::apollo::drivers::velodyne::Mode value);
  private:
  ::apollo::drivers::velodyne::Mode _internal_mode() const;
  void _internal_set_mode(::apollo::drivers::velodyne::Mode value);
  public:

  // optional double rpm = 3 [default = 600];
  bool has_rpm() const;
  private:
  bool _internal_has_rpm() const;
  public:
  void clear_rpm();
  double rpm() const;
  void set_rpm(double value);
  private:
  double _internal_rpm() const;
  void _internal_set_rpm(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.velodyne.Config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scan_channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calibration_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr convert_channel_name_;
  int model_;
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 firing_data_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 positioning_data_port_;
  double max_range_;
  double min_range_;
  double max_angle_;
  double min_angle_;
  double view_direction_;
  double view_width_;
  bool use_sensor_sync_;
  bool calibration_online_;
  bool organized_;
  bool use_gps_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 npackets_;
  bool use_poll_sync_;
  bool is_main_frame_;
  int mode_;
  double rpm_;
  friend struct ::TableStruct_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class FusionConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.velodyne.FusionConfig) */ {
 public:
  FusionConfig();
  virtual ~FusionConfig();

  FusionConfig(const FusionConfig& from);
  FusionConfig(FusionConfig&& from) noexcept
    : FusionConfig() {
    *this = ::std::move(from);
  }

  inline FusionConfig& operator=(const FusionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionConfig& operator=(FusionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FusionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FusionConfig* internal_default_instance() {
    return reinterpret_cast<const FusionConfig*>(
               &_FusionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FusionConfig& a, FusionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FusionConfig* New() const final {
    return CreateMaybeMessage<FusionConfig>(nullptr);
  }

  FusionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FusionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FusionConfig& from);
  void MergeFrom(const FusionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.velodyne.FusionConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputChannelFieldNumber = 4,
    kFusionChannelFieldNumber = 3,
    kMaxIntervalMsFieldNumber = 1,
    kDropExpiredDataFieldNumber = 2,
    kWaitTimeSFieldNumber = 5,
  };
  // repeated string input_channel = 4;
  int input_channel_size() const;
  private:
  int _internal_input_channel_size() const;
  public:
  void clear_input_channel();
  const std::string& input_channel(int index) const;
  std::string* mutable_input_channel(int index);
  void set_input_channel(int index, const std::string& value);
  void set_input_channel(int index, std::string&& value);
  void set_input_channel(int index, const char* value);
  void set_input_channel(int index, const char* value, size_t size);
  std::string* add_input_channel();
  void add_input_channel(const std::string& value);
  void add_input_channel(std::string&& value);
  void add_input_channel(const char* value);
  void add_input_channel(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_channel() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_channel();
  private:
  const std::string& _internal_input_channel(int index) const;
  std::string* _internal_add_input_channel();
  public:

  // optional string fusion_channel = 3;
  bool has_fusion_channel() const;
  private:
  bool _internal_has_fusion_channel() const;
  public:
  void clear_fusion_channel();
  const std::string& fusion_channel() const;
  void set_fusion_channel(const std::string& value);
  void set_fusion_channel(std::string&& value);
  void set_fusion_channel(const char* value);
  void set_fusion_channel(const char* value, size_t size);
  std::string* mutable_fusion_channel();
  std::string* release_fusion_channel();
  void set_allocated_fusion_channel(std::string* fusion_channel);
  private:
  const std::string& _internal_fusion_channel() const;
  void _internal_set_fusion_channel(const std::string& value);
  std::string* _internal_mutable_fusion_channel();
  public:

  // optional uint32 max_interval_ms = 1;
  bool has_max_interval_ms() const;
  private:
  bool _internal_has_max_interval_ms() const;
  public:
  void clear_max_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_interval_ms() const;
  void set_max_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_interval_ms() const;
  void _internal_set_max_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool drop_expired_data = 2;
  bool has_drop_expired_data() const;
  private:
  bool _internal_has_drop_expired_data() const;
  public:
  void clear_drop_expired_data();
  bool drop_expired_data() const;
  void set_drop_expired_data(bool value);
  private:
  bool _internal_drop_expired_data() const;
  void _internal_set_drop_expired_data(bool value);
  public:

  // optional float wait_time_s = 5;
  bool has_wait_time_s() const;
  private:
  bool _internal_has_wait_time_s() const;
  public:
  void clear_wait_time_s();
  float wait_time_s() const;
  void set_wait_time_s(float value);
  private:
  float _internal_wait_time_s() const;
  void _internal_set_wait_time_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.velodyne.FusionConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fusion_channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_interval_ms_;
  bool drop_expired_data_;
  float wait_time_s_;
  friend struct ::TableStruct_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class CompensatorConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.velodyne.CompensatorConfig) */ {
 public:
  CompensatorConfig();
  virtual ~CompensatorConfig();

  CompensatorConfig(const CompensatorConfig& from);
  CompensatorConfig(CompensatorConfig&& from) noexcept
    : CompensatorConfig() {
    *this = ::std::move(from);
  }

  inline CompensatorConfig& operator=(const CompensatorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompensatorConfig& operator=(CompensatorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompensatorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompensatorConfig* internal_default_instance() {
    return reinterpret_cast<const CompensatorConfig*>(
               &_CompensatorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompensatorConfig& a, CompensatorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CompensatorConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompensatorConfig* New() const final {
    return CreateMaybeMessage<CompensatorConfig>(nullptr);
  }

  CompensatorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompensatorConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompensatorConfig& from);
  void MergeFrom(const CompensatorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompensatorConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.velodyne.CompensatorConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputChannelFieldNumber = 1,
    kWorldFrameIdFieldNumber = 3,
    kTargetFrameIdFieldNumber = 4,
    kPointCloudSizeFieldNumber = 5,
    kTransformQueryTimeoutFieldNumber = 2,
  };
  // optional string output_channel = 1;
  bool has_output_channel() const;
  private:
  bool _internal_has_output_channel() const;
  public:
  void clear_output_channel();
  const std::string& output_channel() const;
  void set_output_channel(const std::string& value);
  void set_output_channel(std::string&& value);
  void set_output_channel(const char* value);
  void set_output_channel(const char* value, size_t size);
  std::string* mutable_output_channel();
  std::string* release_output_channel();
  void set_allocated_output_channel(std::string* output_channel);
  private:
  const std::string& _internal_output_channel() const;
  void _internal_set_output_channel(const std::string& value);
  std::string* _internal_mutable_output_channel();
  public:

  // optional string world_frame_id = 3 [default = "world"];
  bool has_world_frame_id() const;
  private:
  bool _internal_has_world_frame_id() const;
  public:
  void clear_world_frame_id();
  const std::string& world_frame_id() const;
  void set_world_frame_id(const std::string& value);
  void set_world_frame_id(std::string&& value);
  void set_world_frame_id(const char* value);
  void set_world_frame_id(const char* value, size_t size);
  std::string* mutable_world_frame_id();
  std::string* release_world_frame_id();
  void set_allocated_world_frame_id(std::string* world_frame_id);
  private:
  const std::string& _internal_world_frame_id() const;
  void _internal_set_world_frame_id(const std::string& value);
  std::string* _internal_mutable_world_frame_id();
  public:

  // optional string target_frame_id = 4;
  bool has_target_frame_id() const;
  private:
  bool _internal_has_target_frame_id() const;
  public:
  void clear_target_frame_id();
  const std::string& target_frame_id() const;
  void set_target_frame_id(const std::string& value);
  void set_target_frame_id(std::string&& value);
  void set_target_frame_id(const char* value);
  void set_target_frame_id(const char* value, size_t size);
  std::string* mutable_target_frame_id();
  std::string* release_target_frame_id();
  void set_allocated_target_frame_id(std::string* target_frame_id);
  private:
  const std::string& _internal_target_frame_id() const;
  void _internal_set_target_frame_id(const std::string& value);
  std::string* _internal_mutable_target_frame_id();
  public:

  // optional uint32 point_cloud_size = 5;
  bool has_point_cloud_size() const;
  private:
  bool _internal_has_point_cloud_size() const;
  public:
  void clear_point_cloud_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 point_cloud_size() const;
  void set_point_cloud_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_cloud_size() const;
  void _internal_set_point_cloud_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float transform_query_timeout = 2 [default = 0.02];
  bool has_transform_query_timeout() const;
  private:
  bool _internal_has_transform_query_timeout() const;
  public:
  void clear_transform_query_timeout();
  float transform_query_timeout() const;
  void set_transform_query_timeout(float value);
  private:
  float _internal_transform_query_timeout() const;
  void _internal_set_transform_query_timeout(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.velodyne.CompensatorConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_channel_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_world_frame_id_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_frame_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 point_cloud_size_;
  float transform_query_timeout_;
  friend struct ::TableStruct_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// optional string frame_id = 1;
inline bool Config::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Config::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void Config::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Config::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.frame_id)
  return _internal_frame_id();
}
inline void Config::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.frame_id)
}
inline std::string* Config::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.Config.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& Config::_internal_frame_id() const {
  return frame_id_.GetNoArena();
}
inline void Config::_internal_set_frame_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_frame_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.Config.frame_id)
}
inline void Config::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.Config.frame_id)
}
inline void Config::set_frame_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.Config.frame_id)
}
inline std::string* Config::_internal_mutable_frame_id() {
  _has_bits_[0] |= 0x00000001u;
  return frame_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.Config.frame_id)
  if (!_internal_has_frame_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return frame_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.Config.frame_id)
}

// optional string scan_channel = 2;
inline bool Config::_internal_has_scan_channel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Config::has_scan_channel() const {
  return _internal_has_scan_channel();
}
inline void Config::clear_scan_channel() {
  scan_channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Config::scan_channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.scan_channel)
  return _internal_scan_channel();
}
inline void Config::set_scan_channel(const std::string& value) {
  _internal_set_scan_channel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.scan_channel)
}
inline std::string* Config::mutable_scan_channel() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.Config.scan_channel)
  return _internal_mutable_scan_channel();
}
inline const std::string& Config::_internal_scan_channel() const {
  return scan_channel_.GetNoArena();
}
inline void Config::_internal_set_scan_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  scan_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_scan_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  scan_channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.Config.scan_channel)
}
inline void Config::set_scan_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  scan_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.Config.scan_channel)
}
inline void Config::set_scan_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  scan_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.Config.scan_channel)
}
inline std::string* Config::_internal_mutable_scan_channel() {
  _has_bits_[0] |= 0x00000002u;
  return scan_channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_scan_channel() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.Config.scan_channel)
  if (!_internal_has_scan_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return scan_channel_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_scan_channel(std::string* scan_channel) {
  if (scan_channel != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scan_channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scan_channel);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.Config.scan_channel)
}

// optional double rpm = 3 [default = 600];
inline bool Config::_internal_has_rpm() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Config::has_rpm() const {
  return _internal_has_rpm();
}
inline void Config::clear_rpm() {
  rpm_ = 600;
  _has_bits_[0] &= ~0x00800000u;
}
inline double Config::_internal_rpm() const {
  return rpm_;
}
inline double Config::rpm() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.rpm)
  return _internal_rpm();
}
inline void Config::_internal_set_rpm(double value) {
  _has_bits_[0] |= 0x00800000u;
  rpm_ = value;
}
inline void Config::set_rpm(double value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.rpm)
}

// optional .apollo.drivers.velodyne.Model model = 4;
inline bool Config::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Config::has_model() const {
  return _internal_has_model();
}
inline void Config::clear_model() {
  model_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::drivers::velodyne::Model Config::_internal_model() const {
  return static_cast< ::apollo::drivers::velodyne::Model >(model_);
}
inline ::apollo::drivers::velodyne::Model Config::model() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.model)
  return _internal_model();
}
inline void Config::_internal_set_model(::apollo::drivers::velodyne::Model value) {
  assert(::apollo::drivers::velodyne::Model_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  model_ = value;
}
inline void Config::set_model(::apollo::drivers::velodyne::Model value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.model)
}

// optional .apollo.drivers.velodyne.Mode mode = 21;
inline bool Config::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Config::has_mode() const {
  return _internal_has_mode();
}
inline void Config::clear_mode() {
  mode_ = 1;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::apollo::drivers::velodyne::Mode Config::_internal_mode() const {
  return static_cast< ::apollo::drivers::velodyne::Mode >(mode_);
}
inline ::apollo::drivers::velodyne::Mode Config::mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.mode)
  return _internal_mode();
}
inline void Config::_internal_set_mode(::apollo::drivers::velodyne::Mode value) {
  assert(::apollo::drivers::velodyne::Mode_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  mode_ = value;
}
inline void Config::set_mode(::apollo::drivers::velodyne::Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.mode)
}

// optional string pcap = 5;
inline bool Config::_internal_has_pcap() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Config::has_pcap() const {
  return _internal_has_pcap();
}
inline void Config::clear_pcap() {
  pcap_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Config::pcap() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.pcap)
  return _internal_pcap();
}
inline void Config::set_pcap(const std::string& value) {
  _internal_set_pcap(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.pcap)
}
inline std::string* Config::mutable_pcap() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.Config.pcap)
  return _internal_mutable_pcap();
}
inline const std::string& Config::_internal_pcap() const {
  return pcap_.GetNoArena();
}
inline void Config::_internal_set_pcap(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pcap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_pcap(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pcap_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.Config.pcap)
}
inline void Config::set_pcap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pcap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.Config.pcap)
}
inline void Config::set_pcap(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pcap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.Config.pcap)
}
inline std::string* Config::_internal_mutable_pcap() {
  _has_bits_[0] |= 0x00000004u;
  return pcap_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_pcap() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.Config.pcap)
  if (!_internal_has_pcap()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pcap_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_pcap(std::string* pcap) {
  if (pcap != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pcap_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pcap);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.Config.pcap)
}

// optional int32 prefix_angle = 6;
inline bool Config::_internal_has_prefix_angle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Config::has_prefix_angle() const {
  return _internal_has_prefix_angle();
}
inline void Config::clear_prefix_angle() {
  prefix_angle_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_prefix_angle() const {
  return prefix_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::prefix_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.prefix_angle)
  return _internal_prefix_angle();
}
inline void Config::_internal_set_prefix_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  prefix_angle_ = value;
}
inline void Config::set_prefix_angle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prefix_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.prefix_angle)
}

// optional int32 firing_data_port = 7;
inline bool Config::_internal_has_firing_data_port() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Config::has_firing_data_port() const {
  return _internal_has_firing_data_port();
}
inline void Config::clear_firing_data_port() {
  firing_data_port_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_firing_data_port() const {
  return firing_data_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::firing_data_port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.firing_data_port)
  return _internal_firing_data_port();
}
inline void Config::_internal_set_firing_data_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  firing_data_port_ = value;
}
inline void Config::set_firing_data_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_firing_data_port(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.firing_data_port)
}

// optional int32 positioning_data_port = 8;
inline bool Config::_internal_has_positioning_data_port() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Config::has_positioning_data_port() const {
  return _internal_has_positioning_data_port();
}
inline void Config::clear_positioning_data_port() {
  positioning_data_port_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_positioning_data_port() const {
  return positioning_data_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::positioning_data_port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.positioning_data_port)
  return _internal_positioning_data_port();
}
inline void Config::_internal_set_positioning_data_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  positioning_data_port_ = value;
}
inline void Config::set_positioning_data_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positioning_data_port(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.positioning_data_port)
}

// optional bool use_sensor_sync = 9;
inline bool Config::_internal_has_use_sensor_sync() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Config::has_use_sensor_sync() const {
  return _internal_has_use_sensor_sync();
}
inline void Config::clear_use_sensor_sync() {
  use_sensor_sync_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Config::_internal_use_sensor_sync() const {
  return use_sensor_sync_;
}
inline bool Config::use_sensor_sync() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.use_sensor_sync)
  return _internal_use_sensor_sync();
}
inline void Config::_internal_set_use_sensor_sync(bool value) {
  _has_bits_[0] |= 0x00008000u;
  use_sensor_sync_ = value;
}
inline void Config::set_use_sensor_sync(bool value) {
  _internal_set_use_sensor_sync(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.use_sensor_sync)
}

// optional double max_range = 10;
inline bool Config::_internal_has_max_range() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Config::has_max_range() const {
  return _internal_has_max_range();
}
inline void Config::clear_max_range() {
  max_range_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double Config::_internal_max_range() const {
  return max_range_;
}
inline double Config::max_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.max_range)
  return _internal_max_range();
}
inline void Config::_internal_set_max_range(double value) {
  _has_bits_[0] |= 0x00000200u;
  max_range_ = value;
}
inline void Config::set_max_range(double value) {
  _internal_set_max_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.max_range)
}

// optional double min_range = 11;
inline bool Config::_internal_has_min_range() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Config::has_min_range() const {
  return _internal_has_min_range();
}
inline void Config::clear_min_range() {
  min_range_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Config::_internal_min_range() const {
  return min_range_;
}
inline double Config::min_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.min_range)
  return _internal_min_range();
}
inline void Config::_internal_set_min_range(double value) {
  _has_bits_[0] |= 0x00000400u;
  min_range_ = value;
}
inline void Config::set_min_range(double value) {
  _internal_set_min_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.min_range)
}

// optional double max_angle = 12;
inline bool Config::_internal_has_max_angle() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Config::has_max_angle() const {
  return _internal_has_max_angle();
}
inline void Config::clear_max_angle() {
  max_angle_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Config::_internal_max_angle() const {
  return max_angle_;
}
inline double Config::max_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.max_angle)
  return _internal_max_angle();
}
inline void Config::_internal_set_max_angle(double value) {
  _has_bits_[0] |= 0x00000800u;
  max_angle_ = value;
}
inline void Config::set_max_angle(double value) {
  _internal_set_max_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.max_angle)
}

// optional double min_angle = 13;
inline bool Config::_internal_has_min_angle() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Config::has_min_angle() const {
  return _internal_has_min_angle();
}
inline void Config::clear_min_angle() {
  min_angle_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Config::_internal_min_angle() const {
  return min_angle_;
}
inline double Config::min_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.min_angle)
  return _internal_min_angle();
}
inline void Config::_internal_set_min_angle(double value) {
  _has_bits_[0] |= 0x00001000u;
  min_angle_ = value;
}
inline void Config::set_min_angle(double value) {
  _internal_set_min_angle(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.min_angle)
}

// optional double view_direction = 14;
inline bool Config::_internal_has_view_direction() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Config::has_view_direction() const {
  return _internal_has_view_direction();
}
inline void Config::clear_view_direction() {
  view_direction_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double Config::_internal_view_direction() const {
  return view_direction_;
}
inline double Config::view_direction() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.view_direction)
  return _internal_view_direction();
}
inline void Config::_internal_set_view_direction(double value) {
  _has_bits_[0] |= 0x00002000u;
  view_direction_ = value;
}
inline void Config::set_view_direction(double value) {
  _internal_set_view_direction(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.view_direction)
}

// optional double view_width = 15;
inline bool Config::_internal_has_view_width() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Config::has_view_width() const {
  return _internal_has_view_width();
}
inline void Config::clear_view_width() {
  view_width_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Config::_internal_view_width() const {
  return view_width_;
}
inline double Config::view_width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.view_width)
  return _internal_view_width();
}
inline void Config::_internal_set_view_width(double value) {
  _has_bits_[0] |= 0x00004000u;
  view_width_ = value;
}
inline void Config::set_view_width(double value) {
  _internal_set_view_width(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.view_width)
}

// optional bool calibration_online = 16;
inline bool Config::_internal_has_calibration_online() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Config::has_calibration_online() const {
  return _internal_has_calibration_online();
}
inline void Config::clear_calibration_online() {
  calibration_online_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Config::_internal_calibration_online() const {
  return calibration_online_;
}
inline bool Config::calibration_online() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.calibration_online)
  return _internal_calibration_online();
}
inline void Config::_internal_set_calibration_online(bool value) {
  _has_bits_[0] |= 0x00010000u;
  calibration_online_ = value;
}
inline void Config::set_calibration_online(bool value) {
  _internal_set_calibration_online(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.calibration_online)
}

// optional string calibration_file = 17;
inline bool Config::_internal_has_calibration_file() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Config::has_calibration_file() const {
  return _internal_has_calibration_file();
}
inline void Config::clear_calibration_file() {
  calibration_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Config::calibration_file() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.calibration_file)
  return _internal_calibration_file();
}
inline void Config::set_calibration_file(const std::string& value) {
  _internal_set_calibration_file(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.calibration_file)
}
inline std::string* Config::mutable_calibration_file() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.Config.calibration_file)
  return _internal_mutable_calibration_file();
}
inline const std::string& Config::_internal_calibration_file() const {
  return calibration_file_.GetNoArena();
}
inline void Config::_internal_set_calibration_file(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  calibration_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_calibration_file(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  calibration_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.Config.calibration_file)
}
inline void Config::set_calibration_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  calibration_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.Config.calibration_file)
}
inline void Config::set_calibration_file(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  calibration_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.Config.calibration_file)
}
inline std::string* Config::_internal_mutable_calibration_file() {
  _has_bits_[0] |= 0x00000008u;
  return calibration_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_calibration_file() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.Config.calibration_file)
  if (!_internal_has_calibration_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return calibration_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_calibration_file(std::string* calibration_file) {
  if (calibration_file != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  calibration_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calibration_file);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.Config.calibration_file)
}

// optional bool organized = 18;
inline bool Config::_internal_has_organized() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Config::has_organized() const {
  return _internal_has_organized();
}
inline void Config::clear_organized() {
  organized_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool Config::_internal_organized() const {
  return organized_;
}
inline bool Config::organized() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.organized)
  return _internal_organized();
}
inline void Config::_internal_set_organized(bool value) {
  _has_bits_[0] |= 0x00020000u;
  organized_ = value;
}
inline void Config::set_organized(bool value) {
  _internal_set_organized(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.organized)
}

// optional string convert_channel_name = 19;
inline bool Config::_internal_has_convert_channel_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Config::has_convert_channel_name() const {
  return _internal_has_convert_channel_name();
}
inline void Config::clear_convert_channel_name() {
  convert_channel_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Config::convert_channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.convert_channel_name)
  return _internal_convert_channel_name();
}
inline void Config::set_convert_channel_name(const std::string& value) {
  _internal_set_convert_channel_name(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.convert_channel_name)
}
inline std::string* Config::mutable_convert_channel_name() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.Config.convert_channel_name)
  return _internal_mutable_convert_channel_name();
}
inline const std::string& Config::_internal_convert_channel_name() const {
  return convert_channel_name_.GetNoArena();
}
inline void Config::_internal_set_convert_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  convert_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_convert_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  convert_channel_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.Config.convert_channel_name)
}
inline void Config::set_convert_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  convert_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.Config.convert_channel_name)
}
inline void Config::set_convert_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  convert_channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.Config.convert_channel_name)
}
inline std::string* Config::_internal_mutable_convert_channel_name() {
  _has_bits_[0] |= 0x00000010u;
  return convert_channel_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_convert_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.Config.convert_channel_name)
  if (!_internal_has_convert_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return convert_channel_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_convert_channel_name(std::string* convert_channel_name) {
  if (convert_channel_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  convert_channel_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), convert_channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.Config.convert_channel_name)
}

// optional int32 npackets = 20;
inline bool Config::_internal_has_npackets() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Config::has_npackets() const {
  return _internal_has_npackets();
}
inline void Config::clear_npackets() {
  npackets_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_npackets() const {
  return npackets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::npackets() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.npackets)
  return _internal_npackets();
}
inline void Config::_internal_set_npackets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  npackets_ = value;
}
inline void Config::set_npackets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_npackets(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.npackets)
}

// optional bool use_gps_time = 23;
inline bool Config::_internal_has_use_gps_time() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Config::has_use_gps_time() const {
  return _internal_has_use_gps_time();
}
inline void Config::clear_use_gps_time() {
  use_gps_time_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool Config::_internal_use_gps_time() const {
  return use_gps_time_;
}
inline bool Config::use_gps_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.use_gps_time)
  return _internal_use_gps_time();
}
inline void Config::_internal_set_use_gps_time(bool value) {
  _has_bits_[0] |= 0x00040000u;
  use_gps_time_ = value;
}
inline void Config::set_use_gps_time(bool value) {
  _internal_set_use_gps_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.use_gps_time)
}

// optional bool use_poll_sync = 24;
inline bool Config::_internal_has_use_poll_sync() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Config::has_use_poll_sync() const {
  return _internal_has_use_poll_sync();
}
inline void Config::clear_use_poll_sync() {
  use_poll_sync_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool Config::_internal_use_poll_sync() const {
  return use_poll_sync_;
}
inline bool Config::use_poll_sync() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.use_poll_sync)
  return _internal_use_poll_sync();
}
inline void Config::_internal_set_use_poll_sync(bool value) {
  _has_bits_[0] |= 0x00100000u;
  use_poll_sync_ = value;
}
inline void Config::set_use_poll_sync(bool value) {
  _internal_set_use_poll_sync(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.use_poll_sync)
}

// optional bool is_main_frame = 25;
inline bool Config::_internal_has_is_main_frame() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Config::has_is_main_frame() const {
  return _internal_has_is_main_frame();
}
inline void Config::clear_is_main_frame() {
  is_main_frame_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool Config::_internal_is_main_frame() const {
  return is_main_frame_;
}
inline bool Config::is_main_frame() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.Config.is_main_frame)
  return _internal_is_main_frame();
}
inline void Config::_internal_set_is_main_frame(bool value) {
  _has_bits_[0] |= 0x00200000u;
  is_main_frame_ = value;
}
inline void Config::set_is_main_frame(bool value) {
  _internal_set_is_main_frame(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.Config.is_main_frame)
}

// -------------------------------------------------------------------

// FusionConfig

// optional uint32 max_interval_ms = 1;
inline bool FusionConfig::_internal_has_max_interval_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FusionConfig::has_max_interval_ms() const {
  return _internal_has_max_interval_ms();
}
inline void FusionConfig::clear_max_interval_ms() {
  max_interval_ms_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FusionConfig::_internal_max_interval_ms() const {
  return max_interval_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FusionConfig::max_interval_ms() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.FusionConfig.max_interval_ms)
  return _internal_max_interval_ms();
}
inline void FusionConfig::_internal_set_max_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_interval_ms_ = value;
}
inline void FusionConfig::set_max_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_interval_ms(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.FusionConfig.max_interval_ms)
}

// optional bool drop_expired_data = 2;
inline bool FusionConfig::_internal_has_drop_expired_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FusionConfig::has_drop_expired_data() const {
  return _internal_has_drop_expired_data();
}
inline void FusionConfig::clear_drop_expired_data() {
  drop_expired_data_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FusionConfig::_internal_drop_expired_data() const {
  return drop_expired_data_;
}
inline bool FusionConfig::drop_expired_data() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.FusionConfig.drop_expired_data)
  return _internal_drop_expired_data();
}
inline void FusionConfig::_internal_set_drop_expired_data(bool value) {
  _has_bits_[0] |= 0x00000004u;
  drop_expired_data_ = value;
}
inline void FusionConfig::set_drop_expired_data(bool value) {
  _internal_set_drop_expired_data(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.FusionConfig.drop_expired_data)
}

// optional string fusion_channel = 3;
inline bool FusionConfig::_internal_has_fusion_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FusionConfig::has_fusion_channel() const {
  return _internal_has_fusion_channel();
}
inline void FusionConfig::clear_fusion_channel() {
  fusion_channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FusionConfig::fusion_channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.FusionConfig.fusion_channel)
  return _internal_fusion_channel();
}
inline void FusionConfig::set_fusion_channel(const std::string& value) {
  _internal_set_fusion_channel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.FusionConfig.fusion_channel)
}
inline std::string* FusionConfig::mutable_fusion_channel() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.FusionConfig.fusion_channel)
  return _internal_mutable_fusion_channel();
}
inline const std::string& FusionConfig::_internal_fusion_channel() const {
  return fusion_channel_.GetNoArena();
}
inline void FusionConfig::_internal_set_fusion_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fusion_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FusionConfig::set_fusion_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fusion_channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.FusionConfig.fusion_channel)
}
inline void FusionConfig::set_fusion_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fusion_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.FusionConfig.fusion_channel)
}
inline void FusionConfig::set_fusion_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fusion_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.FusionConfig.fusion_channel)
}
inline std::string* FusionConfig::_internal_mutable_fusion_channel() {
  _has_bits_[0] |= 0x00000001u;
  return fusion_channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FusionConfig::release_fusion_channel() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.FusionConfig.fusion_channel)
  if (!_internal_has_fusion_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fusion_channel_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FusionConfig::set_allocated_fusion_channel(std::string* fusion_channel) {
  if (fusion_channel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fusion_channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fusion_channel);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.FusionConfig.fusion_channel)
}

// repeated string input_channel = 4;
inline int FusionConfig::_internal_input_channel_size() const {
  return input_channel_.size();
}
inline int FusionConfig::input_channel_size() const {
  return _internal_input_channel_size();
}
inline void FusionConfig::clear_input_channel() {
  input_channel_.Clear();
}
inline std::string* FusionConfig::add_input_channel() {
  // @@protoc_insertion_point(field_add_mutable:apollo.drivers.velodyne.FusionConfig.input_channel)
  return _internal_add_input_channel();
}
inline const std::string& FusionConfig::_internal_input_channel(int index) const {
  return input_channel_.Get(index);
}
inline const std::string& FusionConfig::input_channel(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.FusionConfig.input_channel)
  return _internal_input_channel(index);
}
inline std::string* FusionConfig::mutable_input_channel(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.FusionConfig.input_channel)
  return input_channel_.Mutable(index);
}
inline void FusionConfig::set_input_channel(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.FusionConfig.input_channel)
  input_channel_.Mutable(index)->assign(value);
}
inline void FusionConfig::set_input_channel(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.FusionConfig.input_channel)
  input_channel_.Mutable(index)->assign(std::move(value));
}
inline void FusionConfig::set_input_channel(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.FusionConfig.input_channel)
}
inline void FusionConfig::set_input_channel(int index, const char* value, size_t size) {
  input_channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.FusionConfig.input_channel)
}
inline std::string* FusionConfig::_internal_add_input_channel() {
  return input_channel_.Add();
}
inline void FusionConfig::add_input_channel(const std::string& value) {
  input_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.velodyne.FusionConfig.input_channel)
}
inline void FusionConfig::add_input_channel(std::string&& value) {
  input_channel_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.drivers.velodyne.FusionConfig.input_channel)
}
inline void FusionConfig::add_input_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.drivers.velodyne.FusionConfig.input_channel)
}
inline void FusionConfig::add_input_channel(const char* value, size_t size) {
  input_channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.drivers.velodyne.FusionConfig.input_channel)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FusionConfig::input_channel() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.velodyne.FusionConfig.input_channel)
  return input_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FusionConfig::mutable_input_channel() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.velodyne.FusionConfig.input_channel)
  return &input_channel_;
}

// optional float wait_time_s = 5;
inline bool FusionConfig::_internal_has_wait_time_s() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FusionConfig::has_wait_time_s() const {
  return _internal_has_wait_time_s();
}
inline void FusionConfig::clear_wait_time_s() {
  wait_time_s_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float FusionConfig::_internal_wait_time_s() const {
  return wait_time_s_;
}
inline float FusionConfig::wait_time_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.FusionConfig.wait_time_s)
  return _internal_wait_time_s();
}
inline void FusionConfig::_internal_set_wait_time_s(float value) {
  _has_bits_[0] |= 0x00000008u;
  wait_time_s_ = value;
}
inline void FusionConfig::set_wait_time_s(float value) {
  _internal_set_wait_time_s(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.FusionConfig.wait_time_s)
}

// -------------------------------------------------------------------

// CompensatorConfig

// optional string output_channel = 1;
inline bool CompensatorConfig::_internal_has_output_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CompensatorConfig::has_output_channel() const {
  return _internal_has_output_channel();
}
inline void CompensatorConfig::clear_output_channel() {
  output_channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CompensatorConfig::output_channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.CompensatorConfig.output_channel)
  return _internal_output_channel();
}
inline void CompensatorConfig::set_output_channel(const std::string& value) {
  _internal_set_output_channel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.CompensatorConfig.output_channel)
}
inline std::string* CompensatorConfig::mutable_output_channel() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.CompensatorConfig.output_channel)
  return _internal_mutable_output_channel();
}
inline const std::string& CompensatorConfig::_internal_output_channel() const {
  return output_channel_.GetNoArena();
}
inline void CompensatorConfig::_internal_set_output_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  output_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompensatorConfig::set_output_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  output_channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.CompensatorConfig.output_channel)
}
inline void CompensatorConfig::set_output_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  output_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.CompensatorConfig.output_channel)
}
inline void CompensatorConfig::set_output_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  output_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.CompensatorConfig.output_channel)
}
inline std::string* CompensatorConfig::_internal_mutable_output_channel() {
  _has_bits_[0] |= 0x00000001u;
  return output_channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompensatorConfig::release_output_channel() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.CompensatorConfig.output_channel)
  if (!_internal_has_output_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return output_channel_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompensatorConfig::set_allocated_output_channel(std::string* output_channel) {
  if (output_channel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_channel);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.CompensatorConfig.output_channel)
}

// optional float transform_query_timeout = 2 [default = 0.02];
inline bool CompensatorConfig::_internal_has_transform_query_timeout() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CompensatorConfig::has_transform_query_timeout() const {
  return _internal_has_transform_query_timeout();
}
inline void CompensatorConfig::clear_transform_query_timeout() {
  transform_query_timeout_ = 0.02f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CompensatorConfig::_internal_transform_query_timeout() const {
  return transform_query_timeout_;
}
inline float CompensatorConfig::transform_query_timeout() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.CompensatorConfig.transform_query_timeout)
  return _internal_transform_query_timeout();
}
inline void CompensatorConfig::_internal_set_transform_query_timeout(float value) {
  _has_bits_[0] |= 0x00000010u;
  transform_query_timeout_ = value;
}
inline void CompensatorConfig::set_transform_query_timeout(float value) {
  _internal_set_transform_query_timeout(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.CompensatorConfig.transform_query_timeout)
}

// optional string world_frame_id = 3 [default = "world"];
inline bool CompensatorConfig::_internal_has_world_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CompensatorConfig::has_world_frame_id() const {
  return _internal_has_world_frame_id();
}
inline void CompensatorConfig::clear_world_frame_id() {
  world_frame_id_.ClearToDefaultNoArena(&::apollo::drivers::velodyne::CompensatorConfig::_i_give_permission_to_break_this_code_default_world_frame_id_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CompensatorConfig::world_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.CompensatorConfig.world_frame_id)
  return _internal_world_frame_id();
}
inline void CompensatorConfig::set_world_frame_id(const std::string& value) {
  _internal_set_world_frame_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.CompensatorConfig.world_frame_id)
}
inline std::string* CompensatorConfig::mutable_world_frame_id() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.CompensatorConfig.world_frame_id)
  return _internal_mutable_world_frame_id();
}
inline const std::string& CompensatorConfig::_internal_world_frame_id() const {
  return world_frame_id_.GetNoArena();
}
inline void CompensatorConfig::_internal_set_world_frame_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  world_frame_id_.SetNoArena(&::apollo::drivers::velodyne::CompensatorConfig::_i_give_permission_to_break_this_code_default_world_frame_id_.get(), value);
}
inline void CompensatorConfig::set_world_frame_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  world_frame_id_.SetNoArena(
    &::apollo::drivers::velodyne::CompensatorConfig::_i_give_permission_to_break_this_code_default_world_frame_id_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.CompensatorConfig.world_frame_id)
}
inline void CompensatorConfig::set_world_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  world_frame_id_.SetNoArena(&::apollo::drivers::velodyne::CompensatorConfig::_i_give_permission_to_break_this_code_default_world_frame_id_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.CompensatorConfig.world_frame_id)
}
inline void CompensatorConfig::set_world_frame_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  world_frame_id_.SetNoArena(&::apollo::drivers::velodyne::CompensatorConfig::_i_give_permission_to_break_this_code_default_world_frame_id_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.CompensatorConfig.world_frame_id)
}
inline std::string* CompensatorConfig::_internal_mutable_world_frame_id() {
  _has_bits_[0] |= 0x00000002u;
  return world_frame_id_.MutableNoArena(&::apollo::drivers::velodyne::CompensatorConfig::_i_give_permission_to_break_this_code_default_world_frame_id_.get());
}
inline std::string* CompensatorConfig::release_world_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.CompensatorConfig.world_frame_id)
  if (!_internal_has_world_frame_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return world_frame_id_.ReleaseNonDefaultNoArena(&::apollo::drivers::velodyne::CompensatorConfig::_i_give_permission_to_break_this_code_default_world_frame_id_.get());
}
inline void CompensatorConfig::set_allocated_world_frame_id(std::string* world_frame_id) {
  if (world_frame_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  world_frame_id_.SetAllocatedNoArena(&::apollo::drivers::velodyne::CompensatorConfig::_i_give_permission_to_break_this_code_default_world_frame_id_.get(), world_frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.CompensatorConfig.world_frame_id)
}

// optional string target_frame_id = 4;
inline bool CompensatorConfig::_internal_has_target_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CompensatorConfig::has_target_frame_id() const {
  return _internal_has_target_frame_id();
}
inline void CompensatorConfig::clear_target_frame_id() {
  target_frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CompensatorConfig::target_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.CompensatorConfig.target_frame_id)
  return _internal_target_frame_id();
}
inline void CompensatorConfig::set_target_frame_id(const std::string& value) {
  _internal_set_target_frame_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.CompensatorConfig.target_frame_id)
}
inline std::string* CompensatorConfig::mutable_target_frame_id() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.velodyne.CompensatorConfig.target_frame_id)
  return _internal_mutable_target_frame_id();
}
inline const std::string& CompensatorConfig::_internal_target_frame_id() const {
  return target_frame_id_.GetNoArena();
}
inline void CompensatorConfig::_internal_set_target_frame_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  target_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompensatorConfig::set_target_frame_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  target_frame_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.velodyne.CompensatorConfig.target_frame_id)
}
inline void CompensatorConfig::set_target_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  target_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.velodyne.CompensatorConfig.target_frame_id)
}
inline void CompensatorConfig::set_target_frame_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  target_frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.velodyne.CompensatorConfig.target_frame_id)
}
inline std::string* CompensatorConfig::_internal_mutable_target_frame_id() {
  _has_bits_[0] |= 0x00000004u;
  return target_frame_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompensatorConfig::release_target_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.velodyne.CompensatorConfig.target_frame_id)
  if (!_internal_has_target_frame_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return target_frame_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompensatorConfig::set_allocated_target_frame_id(std::string* target_frame_id) {
  if (target_frame_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  target_frame_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.velodyne.CompensatorConfig.target_frame_id)
}

// optional uint32 point_cloud_size = 5;
inline bool CompensatorConfig::_internal_has_point_cloud_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CompensatorConfig::has_point_cloud_size() const {
  return _internal_has_point_cloud_size();
}
inline void CompensatorConfig::clear_point_cloud_size() {
  point_cloud_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompensatorConfig::_internal_point_cloud_size() const {
  return point_cloud_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompensatorConfig::point_cloud_size() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.velodyne.CompensatorConfig.point_cloud_size)
  return _internal_point_cloud_size();
}
inline void CompensatorConfig::_internal_set_point_cloud_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  point_cloud_size_ = value;
}
inline void CompensatorConfig::set_point_cloud_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_point_cloud_size(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.velodyne.CompensatorConfig.point_cloud_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace velodyne
}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fvelodyne_2fproto_2fconfig_2eproto
