// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/radar/conti_radar/proto/conti_radar_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/drivers/canbus/proto/can_card_parameter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto;
namespace apollo {
namespace drivers {
namespace conti_radar {
class CanConf;
class CanConfDefaultTypeInternal;
extern CanConfDefaultTypeInternal _CanConf_default_instance_;
class ContiRadarConf;
class ContiRadarConfDefaultTypeInternal;
extern ContiRadarConfDefaultTypeInternal _ContiRadarConf_default_instance_;
class RadarConf;
class RadarConfDefaultTypeInternal;
extern RadarConfDefaultTypeInternal _RadarConf_default_instance_;
}  // namespace conti_radar
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::conti_radar::CanConf* Arena::CreateMaybeMessage<::apollo::drivers::conti_radar::CanConf>(Arena*);
template<> ::apollo::drivers::conti_radar::ContiRadarConf* Arena::CreateMaybeMessage<::apollo::drivers::conti_radar::ContiRadarConf>(Arena*);
template<> ::apollo::drivers::conti_radar::RadarConf* Arena::CreateMaybeMessage<::apollo::drivers::conti_radar::RadarConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace conti_radar {

enum OutputType : int {
  OUTPUT_TYPE_NONE = 0,
  OUTPUT_TYPE_OBJECTS = 1,
  OUTPUT_TYPE_CLUSTERS = 2,
  OUTPUT_TYPE_ERROR = 3
};
bool OutputType_IsValid(int value);
constexpr OutputType OutputType_MIN = OUTPUT_TYPE_NONE;
constexpr OutputType OutputType_MAX = OUTPUT_TYPE_ERROR;
constexpr int OutputType_ARRAYSIZE = OutputType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputType_descriptor();
template<typename T>
inline const std::string& OutputType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OutputType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OutputType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OutputType_descriptor(), enum_t_value);
}
inline bool OutputType_Parse(
    const std::string& name, OutputType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OutputType>(
    OutputType_descriptor(), name, value);
}
enum RcsThreshold : int {
  RCS_THRESHOLD_STANDARD = 0,
  RCS_THRESHOLD_HIGH_SENSITIVITY = 1,
  RCS_THRESHOLD_ERROR = 2
};
bool RcsThreshold_IsValid(int value);
constexpr RcsThreshold RcsThreshold_MIN = RCS_THRESHOLD_STANDARD;
constexpr RcsThreshold RcsThreshold_MAX = RCS_THRESHOLD_ERROR;
constexpr int RcsThreshold_ARRAYSIZE = RcsThreshold_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RcsThreshold_descriptor();
template<typename T>
inline const std::string& RcsThreshold_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RcsThreshold>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RcsThreshold_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RcsThreshold_descriptor(), enum_t_value);
}
inline bool RcsThreshold_Parse(
    const std::string& name, RcsThreshold* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RcsThreshold>(
    RcsThreshold_descriptor(), name, value);
}
// ===================================================================

class CanConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.conti_radar.CanConf) */ {
 public:
  CanConf();
  virtual ~CanConf();

  CanConf(const CanConf& from);
  CanConf(CanConf&& from) noexcept
    : CanConf() {
    *this = ::std::move(from);
  }

  inline CanConf& operator=(const CanConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanConf& operator=(CanConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanConf* internal_default_instance() {
    return reinterpret_cast<const CanConf*>(
               &_CanConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CanConf& a, CanConf& b) {
    a.Swap(&b);
  }
  inline void Swap(CanConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanConf* New() const final {
    return CreateMaybeMessage<CanConf>(nullptr);
  }

  CanConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanConf& from);
  void MergeFrom(const CanConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.conti_radar.CanConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanCardParameterFieldNumber = 1,
    kEnableDebugModeFieldNumber = 2,
    kEnableReceiverLogFieldNumber = 3,
    kEnableSenderLogFieldNumber = 4,
  };
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  bool has_can_card_parameter() const;
  private:
  bool _internal_has_can_card_parameter() const;
  public:
  void clear_can_card_parameter();
  const ::apollo::drivers::canbus::CANCardParameter& can_card_parameter() const;
  ::apollo::drivers::canbus::CANCardParameter* release_can_card_parameter();
  ::apollo::drivers::canbus::CANCardParameter* mutable_can_card_parameter();
  void set_allocated_can_card_parameter(::apollo::drivers::canbus::CANCardParameter* can_card_parameter);
  private:
  const ::apollo::drivers::canbus::CANCardParameter& _internal_can_card_parameter() const;
  ::apollo::drivers::canbus::CANCardParameter* _internal_mutable_can_card_parameter();
  public:

  // optional bool enable_debug_mode = 2 [default = false];
  bool has_enable_debug_mode() const;
  private:
  bool _internal_has_enable_debug_mode() const;
  public:
  void clear_enable_debug_mode();
  bool enable_debug_mode() const;
  void set_enable_debug_mode(bool value);
  private:
  bool _internal_enable_debug_mode() const;
  void _internal_set_enable_debug_mode(bool value);
  public:

  // optional bool enable_receiver_log = 3 [default = false];
  bool has_enable_receiver_log() const;
  private:
  bool _internal_has_enable_receiver_log() const;
  public:
  void clear_enable_receiver_log();
  bool enable_receiver_log() const;
  void set_enable_receiver_log(bool value);
  private:
  bool _internal_enable_receiver_log() const;
  void _internal_set_enable_receiver_log(bool value);
  public:

  // optional bool enable_sender_log = 4 [default = false];
  bool has_enable_sender_log() const;
  private:
  bool _internal_has_enable_sender_log() const;
  public:
  void clear_enable_sender_log();
  bool enable_sender_log() const;
  void set_enable_sender_log(bool value);
  private:
  bool _internal_enable_sender_log() const;
  void _internal_set_enable_sender_log(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.conti_radar.CanConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::drivers::canbus::CANCardParameter* can_card_parameter_;
  bool enable_debug_mode_;
  bool enable_receiver_log_;
  bool enable_sender_log_;
  friend struct ::TableStruct_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto;
};
// -------------------------------------------------------------------

class RadarConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.conti_radar.RadarConf) */ {
 public:
  RadarConf();
  virtual ~RadarConf();

  RadarConf(const RadarConf& from);
  RadarConf(RadarConf&& from) noexcept
    : RadarConf() {
    *this = ::std::move(from);
  }

  inline RadarConf& operator=(const RadarConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarConf& operator=(RadarConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarConf* internal_default_instance() {
    return reinterpret_cast<const RadarConf*>(
               &_RadarConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RadarConf& a, RadarConf& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarConf* New() const final {
    return CreateMaybeMessage<RadarConf>(nullptr);
  }

  RadarConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarConf& from);
  void MergeFrom(const RadarConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.conti_radar.RadarConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxDistanceValidFieldNumber = 1,
    kSensorIdValidFieldNumber = 2,
    kRadarPowerValidFieldNumber = 3,
    kSortIndexValidFieldNumber = 7,
    kCtrlRelayValidFieldNumber = 9,
    kSensorIdFieldNumber = 12,
    kRadarPowerFieldNumber = 14,
    kCtrlRelayFieldNumber = 15,
    kSortIndexFieldNumber = 18,
    kInputSendIntervalFieldNumber = 21,
    kRcsThresholdFieldNumber = 20,
    kStoreInNvmFieldNumber = 19,
    kOutputTypeValidFieldNumber = 4,
    kSendQualityValidFieldNumber = 5,
    kSendExtInfoValidFieldNumber = 6,
    kStoreInNvmValidFieldNumber = 8,
    kMaxDistanceFieldNumber = 11,
    kOutputTypeFieldNumber = 13,
    kRcsThresholdValidFieldNumber = 10,
    kSendExtInfoFieldNumber = 16,
    kSendQualityFieldNumber = 17,
  };
  // optional bool max_distance_valid = 1 [default = false];
  bool has_max_distance_valid() const;
  private:
  bool _internal_has_max_distance_valid() const;
  public:
  void clear_max_distance_valid();
  bool max_distance_valid() const;
  void set_max_distance_valid(bool value);
  private:
  bool _internal_max_distance_valid() const;
  void _internal_set_max_distance_valid(bool value);
  public:

  // optional bool sensor_id_valid = 2 [default = false];
  bool has_sensor_id_valid() const;
  private:
  bool _internal_has_sensor_id_valid() const;
  public:
  void clear_sensor_id_valid();
  bool sensor_id_valid() const;
  void set_sensor_id_valid(bool value);
  private:
  bool _internal_sensor_id_valid() const;
  void _internal_set_sensor_id_valid(bool value);
  public:

  // optional bool radar_power_valid = 3 [default = false];
  bool has_radar_power_valid() const;
  private:
  bool _internal_has_radar_power_valid() const;
  public:
  void clear_radar_power_valid();
  bool radar_power_valid() const;
  void set_radar_power_valid(bool value);
  private:
  bool _internal_radar_power_valid() const;
  void _internal_set_radar_power_valid(bool value);
  public:

  // optional bool sort_index_valid = 7 [default = false];
  bool has_sort_index_valid() const;
  private:
  bool _internal_has_sort_index_valid() const;
  public:
  void clear_sort_index_valid();
  bool sort_index_valid() const;
  void set_sort_index_valid(bool value);
  private:
  bool _internal_sort_index_valid() const;
  void _internal_set_sort_index_valid(bool value);
  public:

  // optional bool ctrl_relay_valid = 9 [default = false];
  bool has_ctrl_relay_valid() const;
  private:
  bool _internal_has_ctrl_relay_valid() const;
  public:
  void clear_ctrl_relay_valid();
  bool ctrl_relay_valid() const;
  void set_ctrl_relay_valid(bool value);
  private:
  bool _internal_ctrl_relay_valid() const;
  void _internal_set_ctrl_relay_valid(bool value);
  public:

  // optional uint32 sensor_id = 12 [default = 0];
  bool has_sensor_id() const;
  private:
  bool _internal_has_sensor_id() const;
  public:
  void clear_sensor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_id() const;
  void set_sensor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_id() const;
  void _internal_set_sensor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 radar_power = 14 [default = 0];
  bool has_radar_power() const;
  private:
  bool _internal_has_radar_power() const;
  public:
  void clear_radar_power();
  ::PROTOBUF_NAMESPACE_ID::uint32 radar_power() const;
  void set_radar_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radar_power() const;
  void _internal_set_radar_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ctrl_relay = 15 [default = 0];
  bool has_ctrl_relay() const;
  private:
  bool _internal_has_ctrl_relay() const;
  public:
  void clear_ctrl_relay();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctrl_relay() const;
  void set_ctrl_relay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctrl_relay() const;
  void _internal_set_ctrl_relay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sort_index = 18 [default = 0];
  bool has_sort_index() const;
  private:
  bool _internal_has_sort_index() const;
  public:
  void clear_sort_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_index() const;
  void set_sort_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sort_index() const;
  void _internal_set_sort_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 input_send_interval = 21;
  bool has_input_send_interval() const;
  private:
  bool _internal_has_input_send_interval() const;
  public:
  void clear_input_send_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_send_interval() const;
  void set_input_send_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_input_send_interval() const;
  void _internal_set_input_send_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  bool has_rcs_threshold() const;
  private:
  bool _internal_has_rcs_threshold() const;
  public:
  void clear_rcs_threshold();
  ::apollo::drivers::conti_radar::RcsThreshold rcs_threshold() const;
  void set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value);
  private:
  ::apollo::drivers::conti_radar::RcsThreshold _internal_rcs_threshold() const;
  void _internal_set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value);
  public:

  // optional uint32 store_in_nvm = 19 [default = 1];
  bool has_store_in_nvm() const;
  private:
  bool _internal_has_store_in_nvm() const;
  public:
  void clear_store_in_nvm();
  ::PROTOBUF_NAMESPACE_ID::uint32 store_in_nvm() const;
  void set_store_in_nvm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_store_in_nvm() const;
  void _internal_set_store_in_nvm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool output_type_valid = 4 [default = true];
  bool has_output_type_valid() const;
  private:
  bool _internal_has_output_type_valid() const;
  public:
  void clear_output_type_valid();
  bool output_type_valid() const;
  void set_output_type_valid(bool value);
  private:
  bool _internal_output_type_valid() const;
  void _internal_set_output_type_valid(bool value);
  public:

  // optional bool send_quality_valid = 5 [default = true];
  bool has_send_quality_valid() const;
  private:
  bool _internal_has_send_quality_valid() const;
  public:
  void clear_send_quality_valid();
  bool send_quality_valid() const;
  void set_send_quality_valid(bool value);
  private:
  bool _internal_send_quality_valid() const;
  void _internal_set_send_quality_valid(bool value);
  public:

  // optional bool send_ext_info_valid = 6 [default = true];
  bool has_send_ext_info_valid() const;
  private:
  bool _internal_has_send_ext_info_valid() const;
  public:
  void clear_send_ext_info_valid();
  bool send_ext_info_valid() const;
  void set_send_ext_info_valid(bool value);
  private:
  bool _internal_send_ext_info_valid() const;
  void _internal_set_send_ext_info_valid(bool value);
  public:

  // optional bool store_in_nvm_valid = 8 [default = true];
  bool has_store_in_nvm_valid() const;
  private:
  bool _internal_has_store_in_nvm_valid() const;
  public:
  void clear_store_in_nvm_valid();
  bool store_in_nvm_valid() const;
  void set_store_in_nvm_valid(bool value);
  private:
  bool _internal_store_in_nvm_valid() const;
  void _internal_set_store_in_nvm_valid(bool value);
  public:

  // optional uint32 max_distance = 11 [default = 248];
  bool has_max_distance() const;
  private:
  bool _internal_has_max_distance() const;
  public:
  void clear_max_distance();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance() const;
  void set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_distance() const;
  void _internal_set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  bool has_output_type() const;
  private:
  bool _internal_has_output_type() const;
  public:
  void clear_output_type();
  ::apollo::drivers::conti_radar::OutputType output_type() const;
  void set_output_type(::apollo::drivers::conti_radar::OutputType value);
  private:
  ::apollo::drivers::conti_radar::OutputType _internal_output_type() const;
  void _internal_set_output_type(::apollo::drivers::conti_radar::OutputType value);
  public:

  // optional bool rcs_threshold_valid = 10 [default = true];
  bool has_rcs_threshold_valid() const;
  private:
  bool _internal_has_rcs_threshold_valid() const;
  public:
  void clear_rcs_threshold_valid();
  bool rcs_threshold_valid() const;
  void set_rcs_threshold_valid(bool value);
  private:
  bool _internal_rcs_threshold_valid() const;
  void _internal_set_rcs_threshold_valid(bool value);
  public:

  // optional bool send_ext_info = 16 [default = true];
  bool has_send_ext_info() const;
  private:
  bool _internal_has_send_ext_info() const;
  public:
  void clear_send_ext_info();
  bool send_ext_info() const;
  void set_send_ext_info(bool value);
  private:
  bool _internal_send_ext_info() const;
  void _internal_set_send_ext_info(bool value);
  public:

  // optional bool send_quality = 17 [default = true];
  bool has_send_quality() const;
  private:
  bool _internal_has_send_quality() const;
  public:
  void clear_send_quality();
  bool send_quality() const;
  void set_send_quality(bool value);
  private:
  bool _internal_send_quality() const;
  void _internal_set_send_quality(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.conti_radar.RadarConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool max_distance_valid_;
  bool sensor_id_valid_;
  bool radar_power_valid_;
  bool sort_index_valid_;
  bool ctrl_relay_valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radar_power_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctrl_relay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sort_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_send_interval_;
  int rcs_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 store_in_nvm_;
  bool output_type_valid_;
  bool send_quality_valid_;
  bool send_ext_info_valid_;
  bool store_in_nvm_valid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_distance_;
  int output_type_;
  bool rcs_threshold_valid_;
  bool send_ext_info_;
  bool send_quality_;
  friend struct ::TableStruct_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ContiRadarConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.conti_radar.ContiRadarConf) */ {
 public:
  ContiRadarConf();
  virtual ~ContiRadarConf();

  ContiRadarConf(const ContiRadarConf& from);
  ContiRadarConf(ContiRadarConf&& from) noexcept
    : ContiRadarConf() {
    *this = ::std::move(from);
  }

  inline ContiRadarConf& operator=(const ContiRadarConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContiRadarConf& operator=(ContiRadarConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContiRadarConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContiRadarConf* internal_default_instance() {
    return reinterpret_cast<const ContiRadarConf*>(
               &_ContiRadarConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContiRadarConf& a, ContiRadarConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ContiRadarConf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContiRadarConf* New() const final {
    return CreateMaybeMessage<ContiRadarConf>(nullptr);
  }

  ContiRadarConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContiRadarConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContiRadarConf& from);
  void MergeFrom(const ContiRadarConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContiRadarConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.conti_radar.ContiRadarConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadarChannelFieldNumber = 3,
    kCanConfFieldNumber = 1,
    kRadarConfFieldNumber = 2,
  };
  // optional string radar_channel = 3;
  bool has_radar_channel() const;
  private:
  bool _internal_has_radar_channel() const;
  public:
  void clear_radar_channel();
  const std::string& radar_channel() const;
  void set_radar_channel(const std::string& value);
  void set_radar_channel(std::string&& value);
  void set_radar_channel(const char* value);
  void set_radar_channel(const char* value, size_t size);
  std::string* mutable_radar_channel();
  std::string* release_radar_channel();
  void set_allocated_radar_channel(std::string* radar_channel);
  private:
  const std::string& _internal_radar_channel() const;
  void _internal_set_radar_channel(const std::string& value);
  std::string* _internal_mutable_radar_channel();
  public:

  // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
  bool has_can_conf() const;
  private:
  bool _internal_has_can_conf() const;
  public:
  void clear_can_conf();
  const ::apollo::drivers::conti_radar::CanConf& can_conf() const;
  ::apollo::drivers::conti_radar::CanConf* release_can_conf();
  ::apollo::drivers::conti_radar::CanConf* mutable_can_conf();
  void set_allocated_can_conf(::apollo::drivers::conti_radar::CanConf* can_conf);
  private:
  const ::apollo::drivers::conti_radar::CanConf& _internal_can_conf() const;
  ::apollo::drivers::conti_radar::CanConf* _internal_mutable_can_conf();
  public:

  // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
  bool has_radar_conf() const;
  private:
  bool _internal_has_radar_conf() const;
  public:
  void clear_radar_conf();
  const ::apollo::drivers::conti_radar::RadarConf& radar_conf() const;
  ::apollo::drivers::conti_radar::RadarConf* release_radar_conf();
  ::apollo::drivers::conti_radar::RadarConf* mutable_radar_conf();
  void set_allocated_radar_conf(::apollo::drivers::conti_radar::RadarConf* radar_conf);
  private:
  const ::apollo::drivers::conti_radar::RadarConf& _internal_radar_conf() const;
  ::apollo::drivers::conti_radar::RadarConf* _internal_mutable_radar_conf();
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.conti_radar.ContiRadarConf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radar_channel_;
  ::apollo::drivers::conti_radar::CanConf* can_conf_;
  ::apollo::drivers::conti_radar::RadarConf* radar_conf_;
  friend struct ::TableStruct_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CanConf

// optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
inline bool CanConf::_internal_has_can_card_parameter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || can_card_parameter_ != nullptr);
  return value;
}
inline bool CanConf::has_can_card_parameter() const {
  return _internal_has_can_card_parameter();
}
inline const ::apollo::drivers::canbus::CANCardParameter& CanConf::_internal_can_card_parameter() const {
  const ::apollo::drivers::canbus::CANCardParameter* p = can_card_parameter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::canbus::CANCardParameter*>(
      &::apollo::drivers::canbus::_CANCardParameter_default_instance_);
}
inline const ::apollo::drivers::canbus::CANCardParameter& CanConf::can_card_parameter() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  return _internal_can_card_parameter();
}
inline ::apollo::drivers::canbus::CANCardParameter* CanConf::release_can_card_parameter() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::drivers::canbus::CANCardParameter* temp = can_card_parameter_;
  can_card_parameter_ = nullptr;
  return temp;
}
inline ::apollo::drivers::canbus::CANCardParameter* CanConf::_internal_mutable_can_card_parameter() {
  _has_bits_[0] |= 0x00000001u;
  if (can_card_parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::canbus::CANCardParameter>(GetArenaNoVirtual());
    can_card_parameter_ = p;
  }
  return can_card_parameter_;
}
inline ::apollo::drivers::canbus::CANCardParameter* CanConf::mutable_can_card_parameter() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.CanConf.can_card_parameter)
  return _internal_mutable_can_card_parameter();
}
inline void CanConf::set_allocated_can_card_parameter(::apollo::drivers::canbus::CANCardParameter* can_card_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(can_card_parameter_);
  }
  if (can_card_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      can_card_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_card_parameter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  can_card_parameter_ = can_card_parameter;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.CanConf.can_card_parameter)
}

// optional bool enable_debug_mode = 2 [default = false];
inline bool CanConf::_internal_has_enable_debug_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CanConf::has_enable_debug_mode() const {
  return _internal_has_enable_debug_mode();
}
inline void CanConf::clear_enable_debug_mode() {
  enable_debug_mode_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CanConf::_internal_enable_debug_mode() const {
  return enable_debug_mode_;
}
inline bool CanConf::enable_debug_mode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_debug_mode)
  return _internal_enable_debug_mode();
}
inline void CanConf::_internal_set_enable_debug_mode(bool value) {
  _has_bits_[0] |= 0x00000002u;
  enable_debug_mode_ = value;
}
inline void CanConf::set_enable_debug_mode(bool value) {
  _internal_set_enable_debug_mode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_debug_mode)
}

// optional bool enable_receiver_log = 3 [default = false];
inline bool CanConf::_internal_has_enable_receiver_log() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CanConf::has_enable_receiver_log() const {
  return _internal_has_enable_receiver_log();
}
inline void CanConf::clear_enable_receiver_log() {
  enable_receiver_log_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CanConf::_internal_enable_receiver_log() const {
  return enable_receiver_log_;
}
inline bool CanConf::enable_receiver_log() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_receiver_log)
  return _internal_enable_receiver_log();
}
inline void CanConf::_internal_set_enable_receiver_log(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_receiver_log_ = value;
}
inline void CanConf::set_enable_receiver_log(bool value) {
  _internal_set_enable_receiver_log(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_receiver_log)
}

// optional bool enable_sender_log = 4 [default = false];
inline bool CanConf::_internal_has_enable_sender_log() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CanConf::has_enable_sender_log() const {
  return _internal_has_enable_sender_log();
}
inline void CanConf::clear_enable_sender_log() {
  enable_sender_log_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CanConf::_internal_enable_sender_log() const {
  return enable_sender_log_;
}
inline bool CanConf::enable_sender_log() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.CanConf.enable_sender_log)
  return _internal_enable_sender_log();
}
inline void CanConf::_internal_set_enable_sender_log(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enable_sender_log_ = value;
}
inline void CanConf::set_enable_sender_log(bool value) {
  _internal_set_enable_sender_log(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.CanConf.enable_sender_log)
}

// -------------------------------------------------------------------

// RadarConf

// optional bool max_distance_valid = 1 [default = false];
inline bool RadarConf::_internal_has_max_distance_valid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarConf::has_max_distance_valid() const {
  return _internal_has_max_distance_valid();
}
inline void RadarConf::clear_max_distance_valid() {
  max_distance_valid_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool RadarConf::_internal_max_distance_valid() const {
  return max_distance_valid_;
}
inline bool RadarConf::max_distance_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.max_distance_valid)
  return _internal_max_distance_valid();
}
inline void RadarConf::_internal_set_max_distance_valid(bool value) {
  _has_bits_[0] |= 0x00000001u;
  max_distance_valid_ = value;
}
inline void RadarConf::set_max_distance_valid(bool value) {
  _internal_set_max_distance_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.max_distance_valid)
}

// optional bool sensor_id_valid = 2 [default = false];
inline bool RadarConf::_internal_has_sensor_id_valid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarConf::has_sensor_id_valid() const {
  return _internal_has_sensor_id_valid();
}
inline void RadarConf::clear_sensor_id_valid() {
  sensor_id_valid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RadarConf::_internal_sensor_id_valid() const {
  return sensor_id_valid_;
}
inline bool RadarConf::sensor_id_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sensor_id_valid)
  return _internal_sensor_id_valid();
}
inline void RadarConf::_internal_set_sensor_id_valid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  sensor_id_valid_ = value;
}
inline void RadarConf::set_sensor_id_valid(bool value) {
  _internal_set_sensor_id_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sensor_id_valid)
}

// optional bool radar_power_valid = 3 [default = false];
inline bool RadarConf::_internal_has_radar_power_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarConf::has_radar_power_valid() const {
  return _internal_has_radar_power_valid();
}
inline void RadarConf::clear_radar_power_valid() {
  radar_power_valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RadarConf::_internal_radar_power_valid() const {
  return radar_power_valid_;
}
inline bool RadarConf::radar_power_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.radar_power_valid)
  return _internal_radar_power_valid();
}
inline void RadarConf::_internal_set_radar_power_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  radar_power_valid_ = value;
}
inline void RadarConf::set_radar_power_valid(bool value) {
  _internal_set_radar_power_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.radar_power_valid)
}

// optional bool output_type_valid = 4 [default = true];
inline bool RadarConf::_internal_has_output_type_valid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RadarConf::has_output_type_valid() const {
  return _internal_has_output_type_valid();
}
inline void RadarConf::clear_output_type_valid() {
  output_type_valid_ = true;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool RadarConf::_internal_output_type_valid() const {
  return output_type_valid_;
}
inline bool RadarConf::output_type_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.output_type_valid)
  return _internal_output_type_valid();
}
inline void RadarConf::_internal_set_output_type_valid(bool value) {
  _has_bits_[0] |= 0x00001000u;
  output_type_valid_ = value;
}
inline void RadarConf::set_output_type_valid(bool value) {
  _internal_set_output_type_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.output_type_valid)
}

// optional bool send_quality_valid = 5 [default = true];
inline bool RadarConf::_internal_has_send_quality_valid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RadarConf::has_send_quality_valid() const {
  return _internal_has_send_quality_valid();
}
inline void RadarConf::clear_send_quality_valid() {
  send_quality_valid_ = true;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool RadarConf::_internal_send_quality_valid() const {
  return send_quality_valid_;
}
inline bool RadarConf::send_quality_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_quality_valid)
  return _internal_send_quality_valid();
}
inline void RadarConf::_internal_set_send_quality_valid(bool value) {
  _has_bits_[0] |= 0x00002000u;
  send_quality_valid_ = value;
}
inline void RadarConf::set_send_quality_valid(bool value) {
  _internal_set_send_quality_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_quality_valid)
}

// optional bool send_ext_info_valid = 6 [default = true];
inline bool RadarConf::_internal_has_send_ext_info_valid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RadarConf::has_send_ext_info_valid() const {
  return _internal_has_send_ext_info_valid();
}
inline void RadarConf::clear_send_ext_info_valid() {
  send_ext_info_valid_ = true;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool RadarConf::_internal_send_ext_info_valid() const {
  return send_ext_info_valid_;
}
inline bool RadarConf::send_ext_info_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_ext_info_valid)
  return _internal_send_ext_info_valid();
}
inline void RadarConf::_internal_set_send_ext_info_valid(bool value) {
  _has_bits_[0] |= 0x00004000u;
  send_ext_info_valid_ = value;
}
inline void RadarConf::set_send_ext_info_valid(bool value) {
  _internal_set_send_ext_info_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_ext_info_valid)
}

// optional bool sort_index_valid = 7 [default = false];
inline bool RadarConf::_internal_has_sort_index_valid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarConf::has_sort_index_valid() const {
  return _internal_has_sort_index_valid();
}
inline void RadarConf::clear_sort_index_valid() {
  sort_index_valid_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool RadarConf::_internal_sort_index_valid() const {
  return sort_index_valid_;
}
inline bool RadarConf::sort_index_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sort_index_valid)
  return _internal_sort_index_valid();
}
inline void RadarConf::_internal_set_sort_index_valid(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sort_index_valid_ = value;
}
inline void RadarConf::set_sort_index_valid(bool value) {
  _internal_set_sort_index_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sort_index_valid)
}

// optional bool store_in_nvm_valid = 8 [default = true];
inline bool RadarConf::_internal_has_store_in_nvm_valid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RadarConf::has_store_in_nvm_valid() const {
  return _internal_has_store_in_nvm_valid();
}
inline void RadarConf::clear_store_in_nvm_valid() {
  store_in_nvm_valid_ = true;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool RadarConf::_internal_store_in_nvm_valid() const {
  return store_in_nvm_valid_;
}
inline bool RadarConf::store_in_nvm_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.store_in_nvm_valid)
  return _internal_store_in_nvm_valid();
}
inline void RadarConf::_internal_set_store_in_nvm_valid(bool value) {
  _has_bits_[0] |= 0x00008000u;
  store_in_nvm_valid_ = value;
}
inline void RadarConf::set_store_in_nvm_valid(bool value) {
  _internal_set_store_in_nvm_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.store_in_nvm_valid)
}

// optional bool ctrl_relay_valid = 9 [default = false];
inline bool RadarConf::_internal_has_ctrl_relay_valid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarConf::has_ctrl_relay_valid() const {
  return _internal_has_ctrl_relay_valid();
}
inline void RadarConf::clear_ctrl_relay_valid() {
  ctrl_relay_valid_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RadarConf::_internal_ctrl_relay_valid() const {
  return ctrl_relay_valid_;
}
inline bool RadarConf::ctrl_relay_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.ctrl_relay_valid)
  return _internal_ctrl_relay_valid();
}
inline void RadarConf::_internal_set_ctrl_relay_valid(bool value) {
  _has_bits_[0] |= 0x00000010u;
  ctrl_relay_valid_ = value;
}
inline void RadarConf::set_ctrl_relay_valid(bool value) {
  _internal_set_ctrl_relay_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.ctrl_relay_valid)
}

// optional bool rcs_threshold_valid = 10 [default = true];
inline bool RadarConf::_internal_has_rcs_threshold_valid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool RadarConf::has_rcs_threshold_valid() const {
  return _internal_has_rcs_threshold_valid();
}
inline void RadarConf::clear_rcs_threshold_valid() {
  rcs_threshold_valid_ = true;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool RadarConf::_internal_rcs_threshold_valid() const {
  return rcs_threshold_valid_;
}
inline bool RadarConf::rcs_threshold_valid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.rcs_threshold_valid)
  return _internal_rcs_threshold_valid();
}
inline void RadarConf::_internal_set_rcs_threshold_valid(bool value) {
  _has_bits_[0] |= 0x00040000u;
  rcs_threshold_valid_ = value;
}
inline void RadarConf::set_rcs_threshold_valid(bool value) {
  _internal_set_rcs_threshold_valid(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.rcs_threshold_valid)
}

// optional uint32 max_distance = 11 [default = 248];
inline bool RadarConf::_internal_has_max_distance() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool RadarConf::has_max_distance() const {
  return _internal_has_max_distance();
}
inline void RadarConf::clear_max_distance() {
  max_distance_ = 248u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::_internal_max_distance() const {
  return max_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.max_distance)
  return _internal_max_distance();
}
inline void RadarConf::_internal_set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  max_distance_ = value;
}
inline void RadarConf::set_max_distance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.max_distance)
}

// optional uint32 sensor_id = 12 [default = 0];
inline bool RadarConf::_internal_has_sensor_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarConf::has_sensor_id() const {
  return _internal_has_sensor_id();
}
inline void RadarConf::clear_sensor_id() {
  sensor_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::_internal_sensor_id() const {
  return sensor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::sensor_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sensor_id)
  return _internal_sensor_id();
}
inline void RadarConf::_internal_set_sensor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  sensor_id_ = value;
}
inline void RadarConf::set_sensor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sensor_id)
}

// optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
inline bool RadarConf::_internal_has_output_type() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool RadarConf::has_output_type() const {
  return _internal_has_output_type();
}
inline void RadarConf::clear_output_type() {
  output_type_ = 1;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::apollo::drivers::conti_radar::OutputType RadarConf::_internal_output_type() const {
  return static_cast< ::apollo::drivers::conti_radar::OutputType >(output_type_);
}
inline ::apollo::drivers::conti_radar::OutputType RadarConf::output_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.output_type)
  return _internal_output_type();
}
inline void RadarConf::_internal_set_output_type(::apollo::drivers::conti_radar::OutputType value) {
  assert(::apollo::drivers::conti_radar::OutputType_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  output_type_ = value;
}
inline void RadarConf::set_output_type(::apollo::drivers::conti_radar::OutputType value) {
  _internal_set_output_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.output_type)
}

// optional uint32 radar_power = 14 [default = 0];
inline bool RadarConf::_internal_has_radar_power() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarConf::has_radar_power() const {
  return _internal_has_radar_power();
}
inline void RadarConf::clear_radar_power() {
  radar_power_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::_internal_radar_power() const {
  return radar_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::radar_power() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.radar_power)
  return _internal_radar_power();
}
inline void RadarConf::_internal_set_radar_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  radar_power_ = value;
}
inline void RadarConf::set_radar_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radar_power(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.radar_power)
}

// optional uint32 ctrl_relay = 15 [default = 0];
inline bool RadarConf::_internal_has_ctrl_relay() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarConf::has_ctrl_relay() const {
  return _internal_has_ctrl_relay();
}
inline void RadarConf::clear_ctrl_relay() {
  ctrl_relay_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::_internal_ctrl_relay() const {
  return ctrl_relay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::ctrl_relay() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.ctrl_relay)
  return _internal_ctrl_relay();
}
inline void RadarConf::_internal_set_ctrl_relay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  ctrl_relay_ = value;
}
inline void RadarConf::set_ctrl_relay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctrl_relay(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.ctrl_relay)
}

// optional bool send_ext_info = 16 [default = true];
inline bool RadarConf::_internal_has_send_ext_info() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool RadarConf::has_send_ext_info() const {
  return _internal_has_send_ext_info();
}
inline void RadarConf::clear_send_ext_info() {
  send_ext_info_ = true;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool RadarConf::_internal_send_ext_info() const {
  return send_ext_info_;
}
inline bool RadarConf::send_ext_info() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_ext_info)
  return _internal_send_ext_info();
}
inline void RadarConf::_internal_set_send_ext_info(bool value) {
  _has_bits_[0] |= 0x00080000u;
  send_ext_info_ = value;
}
inline void RadarConf::set_send_ext_info(bool value) {
  _internal_set_send_ext_info(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_ext_info)
}

// optional bool send_quality = 17 [default = true];
inline bool RadarConf::_internal_has_send_quality() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool RadarConf::has_send_quality() const {
  return _internal_has_send_quality();
}
inline void RadarConf::clear_send_quality() {
  send_quality_ = true;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool RadarConf::_internal_send_quality() const {
  return send_quality_;
}
inline bool RadarConf::send_quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.send_quality)
  return _internal_send_quality();
}
inline void RadarConf::_internal_set_send_quality(bool value) {
  _has_bits_[0] |= 0x00100000u;
  send_quality_ = value;
}
inline void RadarConf::set_send_quality(bool value) {
  _internal_set_send_quality(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.send_quality)
}

// optional uint32 sort_index = 18 [default = 0];
inline bool RadarConf::_internal_has_sort_index() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarConf::has_sort_index() const {
  return _internal_has_sort_index();
}
inline void RadarConf::clear_sort_index() {
  sort_index_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::_internal_sort_index() const {
  return sort_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::sort_index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.sort_index)
  return _internal_sort_index();
}
inline void RadarConf::_internal_set_sort_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  sort_index_ = value;
}
inline void RadarConf::set_sort_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sort_index(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.sort_index)
}

// optional uint32 store_in_nvm = 19 [default = 1];
inline bool RadarConf::_internal_has_store_in_nvm() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RadarConf::has_store_in_nvm() const {
  return _internal_has_store_in_nvm();
}
inline void RadarConf::clear_store_in_nvm() {
  store_in_nvm_ = 1u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::_internal_store_in_nvm() const {
  return store_in_nvm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarConf::store_in_nvm() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.store_in_nvm)
  return _internal_store_in_nvm();
}
inline void RadarConf::_internal_set_store_in_nvm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  store_in_nvm_ = value;
}
inline void RadarConf::set_store_in_nvm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_store_in_nvm(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.store_in_nvm)
}

// optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
inline bool RadarConf::_internal_has_rcs_threshold() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RadarConf::has_rcs_threshold() const {
  return _internal_has_rcs_threshold();
}
inline void RadarConf::clear_rcs_threshold() {
  rcs_threshold_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::drivers::conti_radar::RcsThreshold RadarConf::_internal_rcs_threshold() const {
  return static_cast< ::apollo::drivers::conti_radar::RcsThreshold >(rcs_threshold_);
}
inline ::apollo::drivers::conti_radar::RcsThreshold RadarConf::rcs_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.rcs_threshold)
  return _internal_rcs_threshold();
}
inline void RadarConf::_internal_set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value) {
  assert(::apollo::drivers::conti_radar::RcsThreshold_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  rcs_threshold_ = value;
}
inline void RadarConf::set_rcs_threshold(::apollo::drivers::conti_radar::RcsThreshold value) {
  _internal_set_rcs_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.rcs_threshold)
}

// optional uint64 input_send_interval = 21;
inline bool RadarConf::_internal_has_input_send_interval() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarConf::has_input_send_interval() const {
  return _internal_has_input_send_interval();
}
inline void RadarConf::clear_input_send_interval() {
  input_send_interval_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarConf::_internal_input_send_interval() const {
  return input_send_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarConf::input_send_interval() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.RadarConf.input_send_interval)
  return _internal_input_send_interval();
}
inline void RadarConf::_internal_set_input_send_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  input_send_interval_ = value;
}
inline void RadarConf::set_input_send_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_input_send_interval(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.RadarConf.input_send_interval)
}

// -------------------------------------------------------------------

// ContiRadarConf

// optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
inline bool ContiRadarConf::_internal_has_can_conf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || can_conf_ != nullptr);
  return value;
}
inline bool ContiRadarConf::has_can_conf() const {
  return _internal_has_can_conf();
}
inline void ContiRadarConf::clear_can_conf() {
  if (can_conf_ != nullptr) can_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::drivers::conti_radar::CanConf& ContiRadarConf::_internal_can_conf() const {
  const ::apollo::drivers::conti_radar::CanConf* p = can_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::conti_radar::CanConf*>(
      &::apollo::drivers::conti_radar::_CanConf_default_instance_);
}
inline const ::apollo::drivers::conti_radar::CanConf& ContiRadarConf::can_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  return _internal_can_conf();
}
inline ::apollo::drivers::conti_radar::CanConf* ContiRadarConf::release_can_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::drivers::conti_radar::CanConf* temp = can_conf_;
  can_conf_ = nullptr;
  return temp;
}
inline ::apollo::drivers::conti_radar::CanConf* ContiRadarConf::_internal_mutable_can_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (can_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::conti_radar::CanConf>(GetArenaNoVirtual());
    can_conf_ = p;
  }
  return can_conf_;
}
inline ::apollo::drivers::conti_radar::CanConf* ContiRadarConf::mutable_can_conf() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
  return _internal_mutable_can_conf();
}
inline void ContiRadarConf::set_allocated_can_conf(::apollo::drivers::conti_radar::CanConf* can_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete can_conf_;
  }
  if (can_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      can_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  can_conf_ = can_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.ContiRadarConf.can_conf)
}

// optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
inline bool ContiRadarConf::_internal_has_radar_conf() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || radar_conf_ != nullptr);
  return value;
}
inline bool ContiRadarConf::has_radar_conf() const {
  return _internal_has_radar_conf();
}
inline void ContiRadarConf::clear_radar_conf() {
  if (radar_conf_ != nullptr) radar_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::drivers::conti_radar::RadarConf& ContiRadarConf::_internal_radar_conf() const {
  const ::apollo::drivers::conti_radar::RadarConf* p = radar_conf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::conti_radar::RadarConf*>(
      &::apollo::drivers::conti_radar::_RadarConf_default_instance_);
}
inline const ::apollo::drivers::conti_radar::RadarConf& ContiRadarConf::radar_conf() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  return _internal_radar_conf();
}
inline ::apollo::drivers::conti_radar::RadarConf* ContiRadarConf::release_radar_conf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::drivers::conti_radar::RadarConf* temp = radar_conf_;
  radar_conf_ = nullptr;
  return temp;
}
inline ::apollo::drivers::conti_radar::RadarConf* ContiRadarConf::_internal_mutable_radar_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (radar_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::conti_radar::RadarConf>(GetArenaNoVirtual());
    radar_conf_ = p;
  }
  return radar_conf_;
}
inline ::apollo::drivers::conti_radar::RadarConf* ContiRadarConf::mutable_radar_conf() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
  return _internal_mutable_radar_conf();
}
inline void ContiRadarConf::set_allocated_radar_conf(::apollo::drivers::conti_radar::RadarConf* radar_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete radar_conf_;
  }
  if (radar_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      radar_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radar_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  radar_conf_ = radar_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.ContiRadarConf.radar_conf)
}

// optional string radar_channel = 3;
inline bool ContiRadarConf::_internal_has_radar_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContiRadarConf::has_radar_channel() const {
  return _internal_has_radar_channel();
}
inline void ContiRadarConf::clear_radar_channel() {
  radar_channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContiRadarConf::radar_channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.conti_radar.ContiRadarConf.radar_channel)
  return _internal_radar_channel();
}
inline void ContiRadarConf::set_radar_channel(const std::string& value) {
  _internal_set_radar_channel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.conti_radar.ContiRadarConf.radar_channel)
}
inline std::string* ContiRadarConf::mutable_radar_channel() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.conti_radar.ContiRadarConf.radar_channel)
  return _internal_mutable_radar_channel();
}
inline const std::string& ContiRadarConf::_internal_radar_channel() const {
  return radar_channel_.GetNoArena();
}
inline void ContiRadarConf::_internal_set_radar_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radar_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContiRadarConf::set_radar_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radar_channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.conti_radar.ContiRadarConf.radar_channel)
}
inline void ContiRadarConf::set_radar_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radar_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.conti_radar.ContiRadarConf.radar_channel)
}
inline void ContiRadarConf::set_radar_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radar_channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.conti_radar.ContiRadarConf.radar_channel)
}
inline std::string* ContiRadarConf::_internal_mutable_radar_channel() {
  _has_bits_[0] |= 0x00000001u;
  return radar_channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContiRadarConf::release_radar_channel() {
  // @@protoc_insertion_point(field_release:apollo.drivers.conti_radar.ContiRadarConf.radar_channel)
  if (!_internal_has_radar_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radar_channel_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContiRadarConf::set_allocated_radar_channel(std::string* radar_channel) {
  if (radar_channel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radar_channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radar_channel);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.conti_radar.ContiRadarConf.radar_channel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace conti_radar
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::conti_radar::OutputType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::conti_radar::OutputType>() {
  return ::apollo::drivers::conti_radar::OutputType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::conti_radar::RcsThreshold> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::conti_radar::RcsThreshold>() {
  return ::apollo::drivers::conti_radar::RcsThreshold_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto
