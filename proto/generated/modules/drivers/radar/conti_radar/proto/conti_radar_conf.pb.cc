// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/radar/conti_radar/proto/conti_radar_conf.proto

#include "modules/drivers/radar/conti_radar/proto/conti_radar_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CANCardParameter_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CanConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto;
namespace apollo {
namespace drivers {
namespace conti_radar {
class CanConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanConf> _instance;
} _CanConf_default_instance_;
class RadarConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarConf> _instance;
} _RadarConf_default_instance_;
class ContiRadarConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContiRadarConf> _instance;
} _ContiRadarConf_default_instance_;
}  // namespace conti_radar
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_CanConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::conti_radar::_CanConf_default_instance_;
    new (ptr) ::apollo::drivers::conti_radar::CanConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::conti_radar::CanConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CanConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CanConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto}, {
      &scc_info_CANCardParameter_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto.base,}};

static void InitDefaultsscc_info_ContiRadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::conti_radar::_ContiRadarConf_default_instance_;
    new (ptr) ::apollo::drivers::conti_radar::ContiRadarConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::conti_radar::ContiRadarConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContiRadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContiRadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto}, {
      &scc_info_CanConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base,
      &scc_info_RadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base,}};

static void InitDefaultsscc_info_RadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::conti_radar::_RadarConf_default_instance_;
    new (ptr) ::apollo::drivers::conti_radar::RadarConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::conti_radar::RadarConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::CanConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::CanConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::CanConf, can_card_parameter_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::CanConf, enable_debug_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::CanConf, enable_receiver_log_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::CanConf, enable_sender_log_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, max_distance_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, sensor_id_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, radar_power_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, output_type_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, send_quality_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, send_ext_info_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, sort_index_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, store_in_nvm_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, ctrl_relay_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, rcs_threshold_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, output_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, radar_power_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, ctrl_relay_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, send_ext_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, send_quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, sort_index_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, store_in_nvm_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, rcs_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::RadarConf, input_send_interval_),
  0,
  1,
  2,
  12,
  13,
  14,
  3,
  15,
  4,
  18,
  16,
  5,
  17,
  6,
  7,
  19,
  20,
  8,
  11,
  10,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::ContiRadarConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::ContiRadarConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::ContiRadarConf, can_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::ContiRadarConf, radar_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::conti_radar::ContiRadarConf, radar_channel_),
  1,
  2,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::drivers::conti_radar::CanConf)},
  { 13, 39, sizeof(::apollo::drivers::conti_radar::RadarConf)},
  { 60, 68, sizeof(::apollo::drivers::conti_radar::ContiRadarConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::conti_radar::_CanConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::conti_radar::_RadarConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::conti_radar::_ContiRadarConf_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n>modules/drivers/radar/conti_radar/prot"
  "o/conti_radar_conf.proto\022\032apollo.drivers"
  ".conti_radar\0325modules/drivers/canbus/pro"
  "to/can_card_parameter.proto\"\266\001\n\007CanConf\022"
  "C\n\022can_card_parameter\030\001 \001(\0132\'.apollo.dri"
  "vers.canbus.CANCardParameter\022 \n\021enable_d"
  "ebug_mode\030\002 \001(\010:\005false\022\"\n\023enable_receive"
  "r_log\030\003 \001(\010:\005false\022 \n\021enable_sender_log\030"
  "\004 \001(\010:\005false\"\356\005\n\tRadarConf\022!\n\022max_distan"
  "ce_valid\030\001 \001(\010:\005false\022\036\n\017sensor_id_valid"
  "\030\002 \001(\010:\005false\022 \n\021radar_power_valid\030\003 \001(\010"
  ":\005false\022\037\n\021output_type_valid\030\004 \001(\010:\004true"
  "\022 \n\022send_quality_valid\030\005 \001(\010:\004true\022!\n\023se"
  "nd_ext_info_valid\030\006 \001(\010:\004true\022\037\n\020sort_in"
  "dex_valid\030\007 \001(\010:\005false\022 \n\022store_in_nvm_v"
  "alid\030\010 \001(\010:\004true\022\037\n\020ctrl_relay_valid\030\t \001"
  "(\010:\005false\022!\n\023rcs_threshold_valid\030\n \001(\010:\004"
  "true\022\031\n\014max_distance\030\013 \001(\r:\003248\022\024\n\tsenso"
  "r_id\030\014 \001(\r:\0010\022P\n\013output_type\030\r \001(\0162&.apo"
  "llo.drivers.conti_radar.OutputType:\023OUTP"
  "UT_TYPE_OBJECTS\022\026\n\013radar_power\030\016 \001(\r:\0010\022"
  "\025\n\nctrl_relay\030\017 \001(\r:\0010\022\033\n\rsend_ext_info\030"
  "\020 \001(\010:\004true\022\032\n\014send_quality\030\021 \001(\010:\004true\022"
  "\025\n\nsort_index\030\022 \001(\r:\0010\022\027\n\014store_in_nvm\030\023"
  " \001(\r:\0011\022W\n\rrcs_threshold\030\024 \001(\0162(.apollo."
  "drivers.conti_radar.RcsThreshold:\026RCS_TH"
  "RESHOLD_STANDARD\022\033\n\023input_send_interval\030"
  "\025 \001(\004\"\231\001\n\016ContiRadarConf\0225\n\010can_conf\030\001 \001"
  "(\0132#.apollo.drivers.conti_radar.CanConf\022"
  "9\n\nradar_conf\030\002 \001(\0132%.apollo.drivers.con"
  "ti_radar.RadarConf\022\025\n\rradar_channel\030\003 \001("
  "\t*l\n\nOutputType\022\024\n\020OUTPUT_TYPE_NONE\020\000\022\027\n"
  "\023OUTPUT_TYPE_OBJECTS\020\001\022\030\n\024OUTPUT_TYPE_CL"
  "USTERS\020\002\022\025\n\021OUTPUT_TYPE_ERROR\020\003*g\n\014RcsTh"
  "reshold\022\032\n\026RCS_THRESHOLD_STANDARD\020\000\022\"\n\036R"
  "CS_THRESHOLD_HIGH_SENSITIVITY\020\001\022\027\n\023RCS_T"
  "HRESHOLD_ERROR\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto_sccs[3] = {
  &scc_info_CanConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base,
  &scc_info_ContiRadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base,
  &scc_info_RadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto = {
  &descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto, "modules/drivers/radar/conti_radar/proto/conti_radar_conf.proto", 1456,
  &descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto_once, descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto_sccs, descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto, 3, file_level_enum_descriptors_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto, file_level_service_descriptors_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto), true);
namespace apollo {
namespace drivers {
namespace conti_radar {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto[0];
}
bool OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RcsThreshold_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto[1];
}
bool RcsThreshold_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CanConf::InitAsDefaultInstance() {
  ::apollo::drivers::conti_radar::_CanConf_default_instance_._instance.get_mutable()->can_card_parameter_ = const_cast< ::apollo::drivers::canbus::CANCardParameter*>(
      ::apollo::drivers::canbus::CANCardParameter::internal_default_instance());
}
class CanConf::_Internal {
 public:
  using HasBits = decltype(std::declval<CanConf>()._has_bits_);
  static const ::apollo::drivers::canbus::CANCardParameter& can_card_parameter(const CanConf* msg);
  static void set_has_can_card_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_debug_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_receiver_log(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enable_sender_log(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::drivers::canbus::CANCardParameter&
CanConf::_Internal::can_card_parameter(const CanConf* msg) {
  return *msg->can_card_parameter_;
}
void CanConf::clear_can_card_parameter() {
  if (can_card_parameter_ != nullptr) can_card_parameter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CanConf::CanConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.CanConf)
}
CanConf::CanConf(const CanConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_can_card_parameter()) {
    can_card_parameter_ = new ::apollo::drivers::canbus::CANCardParameter(*from.can_card_parameter_);
  } else {
    can_card_parameter_ = nullptr;
  }
  ::memcpy(&enable_debug_mode_, &from.enable_debug_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_sender_log_) -
    reinterpret_cast<char*>(&enable_debug_mode_)) + sizeof(enable_sender_log_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.CanConf)
}

void CanConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CanConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base);
  ::memset(&can_card_parameter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_sender_log_) -
      reinterpret_cast<char*>(&can_card_parameter_)) + sizeof(enable_sender_log_));
}

CanConf::~CanConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.CanConf)
  SharedDtor();
}

void CanConf::SharedDtor() {
  if (this != internal_default_instance()) delete can_card_parameter_;
}

void CanConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanConf& CanConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base);
  return *internal_default_instance();
}


void CanConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.conti_radar.CanConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(can_card_parameter_ != nullptr);
    can_card_parameter_->Clear();
  }
  ::memset(&enable_debug_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_sender_log_) -
      reinterpret_cast<char*>(&enable_debug_mode_)) + sizeof(enable_sender_log_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CanConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_card_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_debug_mode = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enable_debug_mode(&has_bits);
          enable_debug_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_receiver_log = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable_receiver_log(&has_bits);
          enable_receiver_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_sender_log = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enable_sender_log(&has_bits);
          enable_sender_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.CanConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::can_card_parameter(this), target, stream);
  }

  // optional bool enable_debug_mode = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_debug_mode(), target);
  }

  // optional bool enable_receiver_log = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_receiver_log(), target);
  }

  // optional bool enable_sender_log = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_sender_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.CanConf)
  return target;
}

size_t CanConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.conti_radar.CanConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *can_card_parameter_);
    }

    // optional bool enable_debug_mode = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool enable_receiver_log = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool enable_sender_log = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.conti_radar.CanConf)
  GOOGLE_DCHECK_NE(&from, this);
  const CanConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.conti_radar.CanConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.conti_radar.CanConf)
    MergeFrom(*source);
  }
}

void CanConf::MergeFrom(const CanConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.conti_radar.CanConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_can_card_parameter()->::apollo::drivers::canbus::CANCardParameter::MergeFrom(from._internal_can_card_parameter());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_debug_mode_ = from.enable_debug_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_receiver_log_ = from.enable_receiver_log_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_sender_log_ = from.enable_sender_log_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.conti_radar.CanConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanConf::CopyFrom(const CanConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.conti_radar.CanConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanConf::IsInitialized() const {
  return true;
}

void CanConf::InternalSwap(CanConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(can_card_parameter_, other->can_card_parameter_);
  swap(enable_debug_mode_, other->enable_debug_mode_);
  swap(enable_receiver_log_, other->enable_receiver_log_);
  swap(enable_sender_log_, other->enable_sender_log_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarConf::InitAsDefaultInstance() {
}
class RadarConf::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarConf>()._has_bits_);
  static void set_has_max_distance_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_id_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radar_power_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_output_type_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_send_quality_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_send_ext_info_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sort_index_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_store_in_nvm_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ctrl_relay_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rcs_threshold_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_radar_power(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ctrl_relay(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_send_ext_info(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_send_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_sort_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_store_in_nvm(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_rcs_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_input_send_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

RadarConf::RadarConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.RadarConf)
}
RadarConf::RadarConf(const RadarConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_distance_valid_, &from.max_distance_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_quality_) -
    reinterpret_cast<char*>(&max_distance_valid_)) + sizeof(send_quality_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.RadarConf)
}

void RadarConf::SharedCtor() {
  ::memset(&max_distance_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rcs_threshold_) -
      reinterpret_cast<char*>(&max_distance_valid_)) + sizeof(rcs_threshold_));
  store_in_nvm_ = 1u;
  output_type_valid_ = true;
  send_quality_valid_ = true;
  send_ext_info_valid_ = true;
  store_in_nvm_valid_ = true;
  max_distance_ = 248u;
  output_type_ = 1;
  rcs_threshold_valid_ = true;
  send_ext_info_ = true;
  send_quality_ = true;
}

RadarConf::~RadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.RadarConf)
  SharedDtor();
}

void RadarConf::SharedDtor() {
}

void RadarConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarConf& RadarConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base);
  return *internal_default_instance();
}


void RadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.conti_radar.RadarConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&max_distance_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctrl_relay_) -
        reinterpret_cast<char*>(&max_distance_valid_)) + sizeof(ctrl_relay_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&sort_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rcs_threshold_) -
        reinterpret_cast<char*>(&sort_index_)) + sizeof(rcs_threshold_));
    store_in_nvm_ = 1u;
    output_type_valid_ = true;
    send_quality_valid_ = true;
    send_ext_info_valid_ = true;
    store_in_nvm_valid_ = true;
  }
  if (cached_has_bits & 0x001f0000u) {
    max_distance_ = 248u;
    output_type_ = 1;
    rcs_threshold_valid_ = true;
    send_ext_info_ = true;
    send_quality_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RadarConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool max_distance_valid = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_distance_valid(&has_bits);
          max_distance_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sensor_id_valid = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sensor_id_valid(&has_bits);
          sensor_id_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool radar_power_valid = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_radar_power_valid(&has_bits);
          radar_power_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool output_type_valid = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_output_type_valid(&has_bits);
          output_type_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_quality_valid = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_send_quality_valid(&has_bits);
          send_quality_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_ext_info_valid = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_send_ext_info_valid(&has_bits);
          send_ext_info_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sort_index_valid = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sort_index_valid(&has_bits);
          sort_index_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool store_in_nvm_valid = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_store_in_nvm_valid(&has_bits);
          store_in_nvm_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ctrl_relay_valid = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ctrl_relay_valid(&has_bits);
          ctrl_relay_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rcs_threshold_valid = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_rcs_threshold_valid(&has_bits);
          rcs_threshold_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_distance = 11 [default = 248];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_distance(&has_bits);
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sensor_id = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sensor_id(&has_bits);
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::conti_radar::OutputType_IsValid(val))) {
            _internal_set_output_type(static_cast<::apollo::drivers::conti_radar::OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 radar_power = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_radar_power(&has_bits);
          radar_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ctrl_relay = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_ctrl_relay(&has_bits);
          ctrl_relay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_ext_info = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_send_ext_info(&has_bits);
          send_ext_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_quality = 17 [default = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_send_quality(&has_bits);
          send_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sort_index = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_sort_index(&has_bits);
          sort_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 store_in_nvm = 19 [default = 1];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_store_in_nvm(&has_bits);
          store_in_nvm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::conti_radar::RcsThreshold_IsValid(val))) {
            _internal_set_rcs_threshold(static_cast<::apollo::drivers::conti_radar::RcsThreshold>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 input_send_interval = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_input_send_interval(&has_bits);
          input_send_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.RadarConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool max_distance_valid = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_max_distance_valid(), target);
  }

  // optional bool sensor_id_valid = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_sensor_id_valid(), target);
  }

  // optional bool radar_power_valid = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_radar_power_valid(), target);
  }

  // optional bool output_type_valid = 4 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_output_type_valid(), target);
  }

  // optional bool send_quality_valid = 5 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_send_quality_valid(), target);
  }

  // optional bool send_ext_info_valid = 6 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_send_ext_info_valid(), target);
  }

  // optional bool sort_index_valid = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sort_index_valid(), target);
  }

  // optional bool store_in_nvm_valid = 8 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_store_in_nvm_valid(), target);
  }

  // optional bool ctrl_relay_valid = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ctrl_relay_valid(), target);
  }

  // optional bool rcs_threshold_valid = 10 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_rcs_threshold_valid(), target);
  }

  // optional uint32 max_distance = 11 [default = 248];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_distance(), target);
  }

  // optional uint32 sensor_id = 12 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sensor_id(), target);
  }

  // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_output_type(), target);
  }

  // optional uint32 radar_power = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_radar_power(), target);
  }

  // optional uint32 ctrl_relay = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ctrl_relay(), target);
  }

  // optional bool send_ext_info = 16 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_send_ext_info(), target);
  }

  // optional bool send_quality = 17 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_send_quality(), target);
  }

  // optional uint32 sort_index = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_sort_index(), target);
  }

  // optional uint32 store_in_nvm = 19 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_store_in_nvm(), target);
  }

  // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_rcs_threshold(), target);
  }

  // optional uint64 input_send_interval = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_input_send_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.RadarConf)
  return target;
}

size_t RadarConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.conti_radar.RadarConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool max_distance_valid = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool sensor_id_valid = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool radar_power_valid = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool sort_index_valid = 7 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool ctrl_relay_valid = 9 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 sensor_id = 12 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sensor_id());
    }

    // optional uint32 radar_power = 14 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radar_power());
    }

    // optional uint32 ctrl_relay = 15 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ctrl_relay());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 sort_index = 18 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sort_index());
    }

    // optional uint64 input_send_interval = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_input_send_interval());
    }

    // optional .apollo.drivers.conti_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rcs_threshold());
    }

    // optional uint32 store_in_nvm = 19 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_store_in_nvm());
    }

    // optional bool output_type_valid = 4 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool send_quality_valid = 5 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info_valid = 6 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool store_in_nvm_valid = 8 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 max_distance = 11 [default = 248];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_distance());
    }

    // optional .apollo.drivers.conti_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_type());
    }

    // optional bool rcs_threshold_valid = 10 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info = 16 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool send_quality = 17 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.conti_radar.RadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.conti_radar.RadarConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.conti_radar.RadarConf)
    MergeFrom(*source);
  }
}

void RadarConf::MergeFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.conti_radar.RadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_distance_valid_ = from.max_distance_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_id_valid_ = from.sensor_id_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      radar_power_valid_ = from.radar_power_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      sort_index_valid_ = from.sort_index_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      ctrl_relay_valid_ = from.ctrl_relay_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      radar_power_ = from.radar_power_;
    }
    if (cached_has_bits & 0x00000080u) {
      ctrl_relay_ = from.ctrl_relay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      sort_index_ = from.sort_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      input_send_interval_ = from.input_send_interval_;
    }
    if (cached_has_bits & 0x00000400u) {
      rcs_threshold_ = from.rcs_threshold_;
    }
    if (cached_has_bits & 0x00000800u) {
      store_in_nvm_ = from.store_in_nvm_;
    }
    if (cached_has_bits & 0x00001000u) {
      output_type_valid_ = from.output_type_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      send_quality_valid_ = from.send_quality_valid_;
    }
    if (cached_has_bits & 0x00004000u) {
      send_ext_info_valid_ = from.send_ext_info_valid_;
    }
    if (cached_has_bits & 0x00008000u) {
      store_in_nvm_valid_ = from.store_in_nvm_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_distance_ = from.max_distance_;
    }
    if (cached_has_bits & 0x00020000u) {
      output_type_ = from.output_type_;
    }
    if (cached_has_bits & 0x00040000u) {
      rcs_threshold_valid_ = from.rcs_threshold_valid_;
    }
    if (cached_has_bits & 0x00080000u) {
      send_ext_info_ = from.send_ext_info_;
    }
    if (cached_has_bits & 0x00100000u) {
      send_quality_ = from.send_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.conti_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarConf::CopyFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.conti_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarConf::IsInitialized() const {
  return true;
}

void RadarConf::InternalSwap(RadarConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_distance_valid_, other->max_distance_valid_);
  swap(sensor_id_valid_, other->sensor_id_valid_);
  swap(radar_power_valid_, other->radar_power_valid_);
  swap(sort_index_valid_, other->sort_index_valid_);
  swap(ctrl_relay_valid_, other->ctrl_relay_valid_);
  swap(sensor_id_, other->sensor_id_);
  swap(radar_power_, other->radar_power_);
  swap(ctrl_relay_, other->ctrl_relay_);
  swap(sort_index_, other->sort_index_);
  swap(input_send_interval_, other->input_send_interval_);
  swap(rcs_threshold_, other->rcs_threshold_);
  swap(store_in_nvm_, other->store_in_nvm_);
  swap(output_type_valid_, other->output_type_valid_);
  swap(send_quality_valid_, other->send_quality_valid_);
  swap(send_ext_info_valid_, other->send_ext_info_valid_);
  swap(store_in_nvm_valid_, other->store_in_nvm_valid_);
  swap(max_distance_, other->max_distance_);
  swap(output_type_, other->output_type_);
  swap(rcs_threshold_valid_, other->rcs_threshold_valid_);
  swap(send_ext_info_, other->send_ext_info_);
  swap(send_quality_, other->send_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContiRadarConf::InitAsDefaultInstance() {
  ::apollo::drivers::conti_radar::_ContiRadarConf_default_instance_._instance.get_mutable()->can_conf_ = const_cast< ::apollo::drivers::conti_radar::CanConf*>(
      ::apollo::drivers::conti_radar::CanConf::internal_default_instance());
  ::apollo::drivers::conti_radar::_ContiRadarConf_default_instance_._instance.get_mutable()->radar_conf_ = const_cast< ::apollo::drivers::conti_radar::RadarConf*>(
      ::apollo::drivers::conti_radar::RadarConf::internal_default_instance());
}
class ContiRadarConf::_Internal {
 public:
  using HasBits = decltype(std::declval<ContiRadarConf>()._has_bits_);
  static const ::apollo::drivers::conti_radar::CanConf& can_conf(const ContiRadarConf* msg);
  static void set_has_can_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::drivers::conti_radar::RadarConf& radar_conf(const ContiRadarConf* msg);
  static void set_has_radar_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_radar_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::drivers::conti_radar::CanConf&
ContiRadarConf::_Internal::can_conf(const ContiRadarConf* msg) {
  return *msg->can_conf_;
}
const ::apollo::drivers::conti_radar::RadarConf&
ContiRadarConf::_Internal::radar_conf(const ContiRadarConf* msg) {
  return *msg->radar_conf_;
}
ContiRadarConf::ContiRadarConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.conti_radar.ContiRadarConf)
}
ContiRadarConf::ContiRadarConf(const ContiRadarConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radar_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radar_channel()) {
    radar_channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.radar_channel_);
  }
  if (from._internal_has_can_conf()) {
    can_conf_ = new ::apollo::drivers::conti_radar::CanConf(*from.can_conf_);
  } else {
    can_conf_ = nullptr;
  }
  if (from._internal_has_radar_conf()) {
    radar_conf_ = new ::apollo::drivers::conti_radar::RadarConf(*from.radar_conf_);
  } else {
    radar_conf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.conti_radar.ContiRadarConf)
}

void ContiRadarConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContiRadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base);
  radar_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&can_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radar_conf_) -
      reinterpret_cast<char*>(&can_conf_)) + sizeof(radar_conf_));
}

ContiRadarConf::~ContiRadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.conti_radar.ContiRadarConf)
  SharedDtor();
}

void ContiRadarConf::SharedDtor() {
  radar_channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete can_conf_;
  if (this != internal_default_instance()) delete radar_conf_;
}

void ContiRadarConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContiRadarConf& ContiRadarConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContiRadarConf_modules_2fdrivers_2fradar_2fconti_5fradar_2fproto_2fconti_5fradar_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ContiRadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.conti_radar.ContiRadarConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      radar_channel_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(can_conf_ != nullptr);
      can_conf_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(radar_conf_ != nullptr);
      radar_conf_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContiRadarConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radar_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radar_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_radar_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.conti_radar.ContiRadarConf.radar_channel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContiRadarConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.conti_radar.ContiRadarConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::can_conf(this), target, stream);
  }

  // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::radar_conf(this), target, stream);
  }

  // optional string radar_channel = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radar_channel().data(), static_cast<int>(this->_internal_radar_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.conti_radar.ContiRadarConf.radar_channel");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_radar_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.conti_radar.ContiRadarConf)
  return target;
}

size_t ContiRadarConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.conti_radar.ContiRadarConf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string radar_channel = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radar_channel());
    }

    // optional .apollo.drivers.conti_radar.CanConf can_conf = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *can_conf_);
    }

    // optional .apollo.drivers.conti_radar.RadarConf radar_conf = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radar_conf_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContiRadarConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.conti_radar.ContiRadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ContiRadarConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContiRadarConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.conti_radar.ContiRadarConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.conti_radar.ContiRadarConf)
    MergeFrom(*source);
  }
}

void ContiRadarConf::MergeFrom(const ContiRadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.conti_radar.ContiRadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      radar_channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.radar_channel_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_can_conf()->::apollo::drivers::conti_radar::CanConf::MergeFrom(from._internal_can_conf());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_radar_conf()->::apollo::drivers::conti_radar::RadarConf::MergeFrom(from._internal_radar_conf());
    }
  }
}

void ContiRadarConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.conti_radar.ContiRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContiRadarConf::CopyFrom(const ContiRadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.conti_radar.ContiRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContiRadarConf::IsInitialized() const {
  return true;
}

void ContiRadarConf::InternalSwap(ContiRadarConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radar_channel_.Swap(&other->radar_channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(can_conf_, other->can_conf_);
  swap(radar_conf_, other->radar_conf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContiRadarConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace conti_radar
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::conti_radar::CanConf* Arena::CreateMaybeMessage< ::apollo::drivers::conti_radar::CanConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::conti_radar::CanConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::conti_radar::RadarConf* Arena::CreateMaybeMessage< ::apollo::drivers::conti_radar::RadarConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::conti_radar::RadarConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::conti_radar::ContiRadarConf* Arena::CreateMaybeMessage< ::apollo::drivers::conti_radar::ContiRadarConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::conti_radar::ContiRadarConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
