// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/camera/proto/config.proto

#include "modules/drivers/camera/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_CompressConfig_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto;
namespace apollo {
namespace drivers {
namespace camera {
namespace config {
class Config_CompressConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_CompressConfig> _instance;
} _Config_CompressConfig_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
}  // namespace config
}  // namespace camera
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_Config_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.DefaultConstruct();
  *::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get_mutable() = std::string("yuyv", 4);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get_mutable());
  {
    void* ptr = &::apollo::drivers::camera::config::_Config_default_instance_;
    new (ptr) ::apollo::drivers::camera::config::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::camera::config::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Config_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Config_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto}, {
      &scc_info_Config_CompressConfig_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Config_CompressConfig_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::camera::config::_Config_CompressConfig_default_instance_;
    new (ptr) ::apollo::drivers::camera::config::Config_CompressConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::camera::config::Config_CompressConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_CompressConfig_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_CompressConfig_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config_CompressConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config_CompressConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config_CompressConfig, output_channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config_CompressConfig, image_pool_size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, camera_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, pixel_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, io_method_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, width_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, height_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, frame_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, monochrome_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, brightness_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, contrast_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, saturation_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, sharpness_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, auto_focus_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, focus_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, auto_exposure_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, exposure_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, auto_white_balance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, white_balance_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, bytes_per_pixel_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, trigger_internal_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, trigger_fps_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, channel_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, device_wait_ms_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, spin_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, output_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::camera::config::Config, compress_conf_),
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  14,
  15,
  16,
  17,
  18,
  10,
  19,
  21,
  20,
  22,
  23,
  24,
  11,
  25,
  3,
  26,
  13,
  12,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::drivers::camera::config::Config_CompressConfig)},
  { 9, 41, sizeof(::apollo::drivers::camera::config::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::camera::config::_Config_CompressConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::camera::config::_Config_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/drivers/camera/proto/config.pr"
  "oto\022\034apollo.drivers.camera.config\"\323\006\n\006Co"
  "nfig\022\022\n\ncamera_dev\030\001 \001(\t\022\020\n\010frame_id\030\002 \001"
  "(\t\022\032\n\014pixel_format\030\003 \001(\t:\004yuyv\0229\n\tio_met"
  "hod\030\004 \001(\0162&.apollo.drivers.camera.config"
  ".IOMethod\022\r\n\005width\030\005 \001(\r\022\016\n\006height\030\006 \001(\r"
  "\022\022\n\nframe_rate\030\007 \001(\r\022\031\n\nmonochrome\030\010 \001(\010"
  ":\005false\022\026\n\nbrightness\030\t \001(\005:\002-1\022\024\n\010contr"
  "ast\030\n \001(\005:\002-1\022\026\n\nsaturation\030\013 \001(\005:\002-1\022\025\n"
  "\tsharpness\030\014 \001(\005:\002-1\022\020\n\004gain\030\r \001(\005:\002-1\022\031"
  "\n\nauto_focus\030\016 \001(\010:\005false\022\021\n\005focus\030\017 \001(\005"
  ":\002-1\022\033\n\rauto_exposure\030\020 \001(\010:\004true\022\025\n\010exp"
  "osure\030\021 \001(\005:\003100\022 \n\022auto_white_balance\030\022"
  " \001(\010:\004true\022\033\n\rwhite_balance\030\023 \001(\005:\0044000\022"
  "\032\n\017bytes_per_pixel\030\024 \001(\r:\0013\022\033\n\020trigger_i"
  "nternal\030\025 \001(\r:\0010\022\027\n\013trigger_fps\030\026 \001(\r:\0023"
  "0\022\024\n\014channel_name\030\027 \001(\t\022\034\n\016device_wait_m"
  "s\030\030 \001(\r:\0042000\022\026\n\tspin_rate\030\031 \001(\r:\003200\022=\n"
  "\013output_type\030\032 \001(\0162(.apollo.drivers.came"
  "ra.config.OutputType\022J\n\rcompress_conf\030\033 "
  "\001(\01323.apollo.drivers.camera.config.Confi"
  "g.CompressConfig\032E\n\016CompressConfig\022\026\n\016ou"
  "tput_channel\030\001 \001(\t\022\033\n\017image_pool_size\030\002 "
  "\001(\r:\00220*`\n\010IOMethod\022\025\n\021IO_METHOD_UNKNOWN"
  "\020\000\022\022\n\016IO_METHOD_READ\020\001\022\022\n\016IO_METHOD_MMAP"
  "\020\002\022\025\n\021IO_METHOD_USERPTR\020\003*\037\n\nOutputType\022"
  "\010\n\004YUYV\020\000\022\007\n\003RGB\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto_sccs[2] = {
  &scc_info_Config_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto.base,
  &scc_info_Config_CompressConfig_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto = {
  &descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto, "modules/drivers/camera/proto/config.proto", 1058,
  &descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto_once, descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto_sccs, descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto, 2, file_level_enum_descriptors_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto, file_level_service_descriptors_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto), true);
namespace apollo {
namespace drivers {
namespace camera {
namespace config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IOMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto[0];
}
bool IOMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto[1];
}
bool OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Config_CompressConfig::InitAsDefaultInstance() {
}
class Config_CompressConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<Config_CompressConfig>()._has_bits_);
  static void set_has_output_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Config_CompressConfig::Config_CompressConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.camera.config.Config.CompressConfig)
}
Config_CompressConfig::Config_CompressConfig(const Config_CompressConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_channel()) {
    output_channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_channel_);
  }
  image_pool_size_ = from.image_pool_size_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.camera.config.Config.CompressConfig)
}

void Config_CompressConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_CompressConfig_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto.base);
  output_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_pool_size_ = 20u;
}

Config_CompressConfig::~Config_CompressConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.camera.config.Config.CompressConfig)
  SharedDtor();
}

void Config_CompressConfig::SharedDtor() {
  output_channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config_CompressConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_CompressConfig& Config_CompressConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_CompressConfig_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config_CompressConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.camera.config.Config.CompressConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      output_channel_.ClearNonDefaultToEmptyNoArena();
    }
    image_pool_size_ = 20u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Config_CompressConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string output_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_output_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.camera.config.Config.CompressConfig.output_channel");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 image_pool_size = 2 [default = 20];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_image_pool_size(&has_bits);
          image_pool_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_CompressConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.camera.config.Config.CompressConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string output_channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_channel().data(), static_cast<int>(this->_internal_output_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.camera.config.Config.CompressConfig.output_channel");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_channel(), target);
  }

  // optional uint32 image_pool_size = 2 [default = 20];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_image_pool_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.camera.config.Config.CompressConfig)
  return target;
}

size_t Config_CompressConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.camera.config.Config.CompressConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string output_channel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_channel());
    }

    // optional uint32 image_pool_size = 2 [default = 20];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_pool_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_CompressConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.camera.config.Config.CompressConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_CompressConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_CompressConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.camera.config.Config.CompressConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.camera.config.Config.CompressConfig)
    MergeFrom(*source);
  }
}

void Config_CompressConfig::MergeFrom(const Config_CompressConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.camera.config.Config.CompressConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      output_channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_channel_);
    }
    if (cached_has_bits & 0x00000002u) {
      image_pool_size_ = from.image_pool_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config_CompressConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.camera.config.Config.CompressConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_CompressConfig::CopyFrom(const Config_CompressConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.camera.config.Config.CompressConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_CompressConfig::IsInitialized() const {
  return true;
}

void Config_CompressConfig::InternalSwap(Config_CompressConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  output_channel_.Swap(&other->output_channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_pool_size_, other->image_pool_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_CompressConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::apollo::drivers::camera::config::_Config_default_instance_._instance.get_mutable()->compress_conf_ = const_cast< ::apollo::drivers::camera::config::Config_CompressConfig*>(
      ::apollo::drivers::camera::config::Config_CompressConfig::internal_default_instance());
}
class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static void set_has_camera_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pixel_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_io_method(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_monochrome(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_contrast(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_saturation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sharpness(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_auto_focus(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_focus(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_auto_exposure(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_exposure(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_auto_white_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_white_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_bytes_per_pixel(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_trigger_internal(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_trigger_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_wait_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_spin_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_output_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::drivers::camera::config::Config_CompressConfig& compress_conf(const Config* msg);
  static void set_has_compress_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::drivers::camera::config::Config_CompressConfig&
Config::_Internal::compress_conf(const Config* msg) {
  return *msg->compress_conf_;
}
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Config::_i_give_permission_to_break_this_code_default_pixel_format_;
Config::Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.camera.config.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_dev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_camera_dev()) {
    camera_dev_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.camera_dev_);
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_frame_id()) {
    frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  pixel_format_.UnsafeSetDefault(&::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get());
  if (from._internal_has_pixel_format()) {
    pixel_format_.AssignWithDefault(&::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get(), from.pixel_format_);
  }
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from._internal_has_compress_conf()) {
    compress_conf_ = new ::apollo::drivers::camera::config::Config_CompressConfig(*from.compress_conf_);
  } else {
    compress_conf_ = nullptr;
  }
  ::memcpy(&io_method_, &from.io_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_wait_ms_) -
    reinterpret_cast<char*>(&io_method_)) + sizeof(device_wait_ms_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.camera.config.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto.base);
  camera_dev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pixel_format_.UnsafeSetDefault(&::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get());
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&compress_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_type_) -
      reinterpret_cast<char*>(&compress_conf_)) + sizeof(output_type_));
  spin_rate_ = 200u;
  brightness_ = -1;
  contrast_ = -1;
  saturation_ = -1;
  sharpness_ = -1;
  gain_ = -1;
  focus_ = -1;
  exposure_ = 100;
  auto_exposure_ = true;
  auto_white_balance_ = true;
  white_balance_ = 4000;
  bytes_per_pixel_ = 3u;
  trigger_fps_ = 30u;
  device_wait_ms_ = 2000u;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.camera.config.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  camera_dev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pixel_format_.DestroyNoArena(&::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get());
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete compress_conf_;
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_modules_2fdrivers_2fcamera_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.camera.config.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      camera_dev_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      frame_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pixel_format_.UnsafeMutablePointer()->assign(*&::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      channel_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(compress_conf_ != nullptr);
      compress_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&io_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&io_method_)) + sizeof(height_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&frame_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_type_) -
        reinterpret_cast<char*>(&frame_rate_)) + sizeof(output_type_));
    spin_rate_ = 200u;
    brightness_ = -1;
    contrast_ = -1;
  }
  if (cached_has_bits & 0x00ff0000u) {
    saturation_ = -1;
    sharpness_ = -1;
    gain_ = -1;
    focus_ = -1;
    exposure_ = 100;
    auto_exposure_ = true;
    auto_white_balance_ = true;
    white_balance_ = 4000;
  }
  if (cached_has_bits & 0x07000000u) {
    bytes_per_pixel_ = 3u;
    trigger_fps_ = 30u;
    device_wait_ms_ = 2000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string camera_dev = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_camera_dev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.camera.config.Config.camera_dev");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.camera.config.Config.frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pixel_format = 3 [default = "yuyv"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pixel_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.camera.config.Config.pixel_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.camera.config.IOMethod io_method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::camera::config::IOMethod_IsValid(val))) {
            _internal_set_io_method(static_cast<::apollo::drivers::camera::config::IOMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 frame_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_frame_rate(&has_bits);
          frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool monochrome = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_monochrome(&has_bits);
          monochrome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 brightness = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_brightness(&has_bits);
          brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 contrast = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_contrast(&has_bits);
          contrast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 saturation = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_saturation(&has_bits);
          saturation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sharpness = 12 [default = -1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sharpness(&has_bits);
          sharpness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gain = 13 [default = -1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_gain(&has_bits);
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_focus = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_auto_focus(&has_bits);
          auto_focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 focus = 15 [default = -1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_focus(&has_bits);
          focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_exposure = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_auto_exposure(&has_bits);
          auto_exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exposure = 17 [default = 100];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_exposure(&has_bits);
          exposure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_white_balance = 18 [default = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_auto_white_balance(&has_bits);
          auto_white_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 white_balance = 19 [default = 4000];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_white_balance(&has_bits);
          white_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bytes_per_pixel = 20 [default = 3];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_bytes_per_pixel(&has_bits);
          bytes_per_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trigger_internal = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_trigger_internal(&has_bits);
          trigger_internal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trigger_fps = 22 [default = 30];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_trigger_fps(&has_bits);
          trigger_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string channel_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.camera.config.Config.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 device_wait_ms = 24 [default = 2000];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_device_wait_ms(&has_bits);
          device_wait_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spin_rate = 25 [default = 200];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_spin_rate(&has_bits);
          spin_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.camera.config.OutputType output_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::camera::config::OutputType_IsValid(val))) {
            _internal_set_output_type(static_cast<::apollo::drivers::camera::config::OutputType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.camera.config.Config.CompressConfig compress_conf = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_compress_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.camera.config.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string camera_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_camera_dev().data(), static_cast<int>(this->_internal_camera_dev().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.camera.config.Config.camera_dev");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camera_dev(), target);
  }

  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.camera.config.Config.frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_id(), target);
  }

  // optional string pixel_format = 3 [default = "yuyv"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pixel_format().data(), static_cast<int>(this->_internal_pixel_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.camera.config.Config.pixel_format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pixel_format(), target);
  }

  // optional .apollo.drivers.camera.config.IOMethod io_method = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_io_method(), target);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // optional uint32 height = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_height(), target);
  }

  // optional uint32 frame_rate = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_frame_rate(), target);
  }

  // optional bool monochrome = 8 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_monochrome(), target);
  }

  // optional int32 brightness = 9 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_brightness(), target);
  }

  // optional int32 contrast = 10 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_contrast(), target);
  }

  // optional int32 saturation = 11 [default = -1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_saturation(), target);
  }

  // optional int32 sharpness = 12 [default = -1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sharpness(), target);
  }

  // optional int32 gain = 13 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_gain(), target);
  }

  // optional bool auto_focus = 14 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_auto_focus(), target);
  }

  // optional int32 focus = 15 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_focus(), target);
  }

  // optional bool auto_exposure = 16 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_auto_exposure(), target);
  }

  // optional int32 exposure = 17 [default = 100];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_exposure(), target);
  }

  // optional bool auto_white_balance = 18 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_auto_white_balance(), target);
  }

  // optional int32 white_balance = 19 [default = 4000];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_white_balance(), target);
  }

  // optional uint32 bytes_per_pixel = 20 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_bytes_per_pixel(), target);
  }

  // optional uint32 trigger_internal = 21 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_trigger_internal(), target);
  }

  // optional uint32 trigger_fps = 22 [default = 30];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_trigger_fps(), target);
  }

  // optional string channel_name = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.camera.config.Config.channel_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_channel_name(), target);
  }

  // optional uint32 device_wait_ms = 24 [default = 2000];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_device_wait_ms(), target);
  }

  // optional uint32 spin_rate = 25 [default = 200];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_spin_rate(), target);
  }

  // optional .apollo.drivers.camera.config.OutputType output_type = 26;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_output_type(), target);
  }

  // optional .apollo.drivers.camera.config.Config.CompressConfig compress_conf = 27;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::compress_conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.camera.config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.camera.config.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string camera_dev = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_camera_dev());
    }

    // optional string frame_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional string pixel_format = 3 [default = "yuyv"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pixel_format());
    }

    // optional string channel_name = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional .apollo.drivers.camera.config.Config.CompressConfig compress_conf = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compress_conf_);
    }

    // optional .apollo.drivers.camera.config.IOMethod io_method = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_io_method());
    }

    // optional uint32 width = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 frame_rate = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_frame_rate());
    }

    // optional bool monochrome = 8 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool auto_focus = 14 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 trigger_internal = 21 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trigger_internal());
    }

    // optional .apollo.drivers.camera.config.OutputType output_type = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_type());
    }

    // optional uint32 spin_rate = 25 [default = 200];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spin_rate());
    }

    // optional int32 brightness = 9 [default = -1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_brightness());
    }

    // optional int32 contrast = 10 [default = -1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_contrast());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 saturation = 11 [default = -1];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_saturation());
    }

    // optional int32 sharpness = 12 [default = -1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sharpness());
    }

    // optional int32 gain = 13 [default = -1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gain());
    }

    // optional int32 focus = 15 [default = -1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_focus());
    }

    // optional int32 exposure = 17 [default = 100];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_exposure());
    }

    // optional bool auto_exposure = 16 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool auto_white_balance = 18 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional int32 white_balance = 19 [default = 4000];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_white_balance());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional uint32 bytes_per_pixel = 20 [default = 3];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bytes_per_pixel());
    }

    // optional uint32 trigger_fps = 22 [default = 30];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trigger_fps());
    }

    // optional uint32 device_wait_ms = 24 [default = 2000];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_device_wait_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.camera.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.camera.config.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.camera.config.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.camera.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      camera_dev_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.camera_dev_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      pixel_format_.AssignWithDefault(&::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get(), from.pixel_format_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      channel_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_compress_conf()->::apollo::drivers::camera::config::Config_CompressConfig::MergeFrom(from._internal_compress_conf());
    }
    if (cached_has_bits & 0x00000020u) {
      io_method_ = from.io_method_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      frame_rate_ = from.frame_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      monochrome_ = from.monochrome_;
    }
    if (cached_has_bits & 0x00000400u) {
      auto_focus_ = from.auto_focus_;
    }
    if (cached_has_bits & 0x00000800u) {
      trigger_internal_ = from.trigger_internal_;
    }
    if (cached_has_bits & 0x00001000u) {
      output_type_ = from.output_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      spin_rate_ = from.spin_rate_;
    }
    if (cached_has_bits & 0x00004000u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00008000u) {
      contrast_ = from.contrast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      saturation_ = from.saturation_;
    }
    if (cached_has_bits & 0x00020000u) {
      sharpness_ = from.sharpness_;
    }
    if (cached_has_bits & 0x00040000u) {
      gain_ = from.gain_;
    }
    if (cached_has_bits & 0x00080000u) {
      focus_ = from.focus_;
    }
    if (cached_has_bits & 0x00100000u) {
      exposure_ = from.exposure_;
    }
    if (cached_has_bits & 0x00200000u) {
      auto_exposure_ = from.auto_exposure_;
    }
    if (cached_has_bits & 0x00400000u) {
      auto_white_balance_ = from.auto_white_balance_;
    }
    if (cached_has_bits & 0x00800000u) {
      white_balance_ = from.white_balance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      bytes_per_pixel_ = from.bytes_per_pixel_;
    }
    if (cached_has_bits & 0x02000000u) {
      trigger_fps_ = from.trigger_fps_;
    }
    if (cached_has_bits & 0x04000000u) {
      device_wait_ms_ = from.device_wait_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.camera.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.camera.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  camera_dev_.Swap(&other->camera_dev_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pixel_format_.Swap(&other->pixel_format_, &::apollo::drivers::camera::config::Config::_i_give_permission_to_break_this_code_default_pixel_format_.get(),
    GetArenaNoVirtual());
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(compress_conf_, other->compress_conf_);
  swap(io_method_, other->io_method_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(frame_rate_, other->frame_rate_);
  swap(monochrome_, other->monochrome_);
  swap(auto_focus_, other->auto_focus_);
  swap(trigger_internal_, other->trigger_internal_);
  swap(output_type_, other->output_type_);
  swap(spin_rate_, other->spin_rate_);
  swap(brightness_, other->brightness_);
  swap(contrast_, other->contrast_);
  swap(saturation_, other->saturation_);
  swap(sharpness_, other->sharpness_);
  swap(gain_, other->gain_);
  swap(focus_, other->focus_);
  swap(exposure_, other->exposure_);
  swap(auto_exposure_, other->auto_exposure_);
  swap(auto_white_balance_, other->auto_white_balance_);
  swap(white_balance_, other->white_balance_);
  swap(bytes_per_pixel_, other->bytes_per_pixel_);
  swap(trigger_fps_, other->trigger_fps_);
  swap(device_wait_ms_, other->device_wait_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace camera
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::camera::config::Config_CompressConfig* Arena::CreateMaybeMessage< ::apollo::drivers::camera::config::Config_CompressConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::camera::config::Config_CompressConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::camera::config::Config* Arena::CreateMaybeMessage< ::apollo::drivers::camera::config::Config >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::camera::config::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
