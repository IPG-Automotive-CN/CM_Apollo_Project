// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/canbus/proto/can_card_parameter.proto

#include "modules/drivers/canbus/proto/can_card_parameter.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace apollo {
namespace drivers {
namespace canbus {
class CANCardParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CANCardParameter> _instance;
} _CANCardParameter_default_instance_;
}  // namespace canbus
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_CANCardParameter_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::canbus::_CANCardParameter_default_instance_;
    new (ptr) ::apollo::drivers::canbus::CANCardParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::canbus::CANCardParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CANCardParameter_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CANCardParameter_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::canbus::CANCardParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::canbus::CANCardParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::canbus::CANCardParameter, brand_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::canbus::CANCardParameter, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::canbus::CANCardParameter, channel_id_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::drivers::canbus::CANCardParameter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::canbus::_CANCardParameter_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5modules/drivers/canbus/proto/can_card_"
  "parameter.proto\022\025apollo.drivers.canbus\"\301"
  "\003\n\020CANCardParameter\022C\n\005brand\030\001 \001(\01624.apo"
  "llo.drivers.canbus.CANCardParameter.CANC"
  "ardBrand\022A\n\004type\030\002 \001(\01623.apollo.drivers."
  "canbus.CANCardParameter.CANCardType\022H\n\nc"
  "hannel_id\030\003 \001(\01624.apollo.drivers.canbus."
  "CANCardParameter.CANChannelId\"M\n\014CANCard"
  "Brand\022\014\n\010FAKE_CAN\020\000\022\013\n\007ESD_CAN\020\001\022\022\n\016SOCK"
  "ET_CAN_RAW\020\002\022\016\n\nHERMES_CAN\020\003\")\n\013CANCardT"
  "ype\022\014\n\010PCI_CARD\020\000\022\014\n\010USB_CARD\020\001\"a\n\014CANCh"
  "annelId\022\023\n\017CHANNEL_ID_ZERO\020\000\022\022\n\016CHANNEL_"
  "ID_ONE\020\001\022\022\n\016CHANNEL_ID_TWO\020\002\022\024\n\020CHANNEL_"
  "ID_THREE\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto_sccs[1] = {
  &scc_info_CANCardParameter_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto = {
  &descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto, "modules/drivers/canbus/proto/can_card_parameter.proto", 530,
  &descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto_once, descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto_sccs, descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto, 1, file_level_enum_descriptors_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto, file_level_service_descriptors_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto), true);
namespace apollo {
namespace drivers {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CANCardParameter_CANCardBrand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto[0];
}
bool CANCardParameter_CANCardBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CANCardParameter_CANCardBrand CANCardParameter::FAKE_CAN;
constexpr CANCardParameter_CANCardBrand CANCardParameter::ESD_CAN;
constexpr CANCardParameter_CANCardBrand CANCardParameter::SOCKET_CAN_RAW;
constexpr CANCardParameter_CANCardBrand CANCardParameter::HERMES_CAN;
constexpr CANCardParameter_CANCardBrand CANCardParameter::CANCardBrand_MIN;
constexpr CANCardParameter_CANCardBrand CANCardParameter::CANCardBrand_MAX;
constexpr int CANCardParameter::CANCardBrand_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CANCardParameter_CANCardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto[1];
}
bool CANCardParameter_CANCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CANCardParameter_CANCardType CANCardParameter::PCI_CARD;
constexpr CANCardParameter_CANCardType CANCardParameter::USB_CARD;
constexpr CANCardParameter_CANCardType CANCardParameter::CANCardType_MIN;
constexpr CANCardParameter_CANCardType CANCardParameter::CANCardType_MAX;
constexpr int CANCardParameter::CANCardType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CANCardParameter_CANChannelId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto[2];
}
bool CANCardParameter_CANChannelId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CANCardParameter_CANChannelId CANCardParameter::CHANNEL_ID_ZERO;
constexpr CANCardParameter_CANChannelId CANCardParameter::CHANNEL_ID_ONE;
constexpr CANCardParameter_CANChannelId CANCardParameter::CHANNEL_ID_TWO;
constexpr CANCardParameter_CANChannelId CANCardParameter::CHANNEL_ID_THREE;
constexpr CANCardParameter_CANChannelId CANCardParameter::CANChannelId_MIN;
constexpr CANCardParameter_CANChannelId CANCardParameter::CANChannelId_MAX;
constexpr int CANCardParameter::CANChannelId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CANCardParameter::InitAsDefaultInstance() {
}
class CANCardParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<CANCardParameter>()._has_bits_);
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CANCardParameter::CANCardParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.canbus.CANCardParameter)
}
CANCardParameter::CANCardParameter(const CANCardParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brand_, &from.brand_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&brand_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.canbus.CANCardParameter)
}

void CANCardParameter::SharedCtor() {
  ::memset(&brand_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&brand_)) + sizeof(channel_id_));
}

CANCardParameter::~CANCardParameter() {
  // @@protoc_insertion_point(destructor:apollo.drivers.canbus.CANCardParameter)
  SharedDtor();
}

void CANCardParameter::SharedDtor() {
}

void CANCardParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CANCardParameter& CANCardParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CANCardParameter_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto.base);
  return *internal_default_instance();
}


void CANCardParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.canbus.CANCardParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&brand_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_id_) -
        reinterpret_cast<char*>(&brand_)) + sizeof(channel_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CANCardParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::canbus::CANCardParameter_CANCardBrand_IsValid(val))) {
            _internal_set_brand(static_cast<::apollo::drivers::canbus::CANCardParameter_CANCardBrand>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.canbus.CANCardParameter.CANCardType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::canbus::CANCardParameter_CANCardType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::drivers::canbus::CANCardParameter_CANCardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::canbus::CANCardParameter_CANChannelId_IsValid(val))) {
            _internal_set_channel_id(static_cast<::apollo::drivers::canbus::CANCardParameter_CANChannelId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CANCardParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.canbus.CANCardParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brand(), target);
  }

  // optional .apollo.drivers.canbus.CANCardParameter.CANCardType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .apollo.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.canbus.CANCardParameter)
  return target;
}

size_t CANCardParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.canbus.CANCardParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brand());
    }

    // optional .apollo.drivers.canbus.CANCardParameter.CANCardType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .apollo.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CANCardParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.canbus.CANCardParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CANCardParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CANCardParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.canbus.CANCardParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.canbus.CANCardParameter)
    MergeFrom(*source);
  }
}

void CANCardParameter::MergeFrom(const CANCardParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.canbus.CANCardParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      brand_ = from.brand_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CANCardParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.canbus.CANCardParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANCardParameter::CopyFrom(const CANCardParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.canbus.CANCardParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANCardParameter::IsInitialized() const {
  return true;
}

void CANCardParameter::InternalSwap(CANCardParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(brand_, other->brand_);
  swap(type_, other->type_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CANCardParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::canbus::CANCardParameter* Arena::CreateMaybeMessage< ::apollo::drivers::canbus::CANCardParameter >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::canbus::CANCardParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
