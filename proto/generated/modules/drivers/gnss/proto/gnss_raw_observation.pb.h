// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_raw_observation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class BandObservation;
class BandObservationDefaultTypeInternal;
extern BandObservationDefaultTypeInternal _BandObservation_default_instance_;
class EpochObservation;
class EpochObservationDefaultTypeInternal;
extern EpochObservationDefaultTypeInternal _EpochObservation_default_instance_;
class GlonassOrbit;
class GlonassOrbitDefaultTypeInternal;
extern GlonassOrbitDefaultTypeInternal _GlonassOrbit_default_instance_;
class GnssEphemeris;
class GnssEphemerisDefaultTypeInternal;
extern GnssEphemerisDefaultTypeInternal _GnssEphemeris_default_instance_;
class KepplerOrbit;
class KepplerOrbitDefaultTypeInternal;
extern KepplerOrbitDefaultTypeInternal _KepplerOrbit_default_instance_;
class SatelliteObservation;
class SatelliteObservationDefaultTypeInternal;
extern SatelliteObservationDefaultTypeInternal _SatelliteObservation_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::gnss::BandObservation* Arena::CreateMaybeMessage<::apollo::drivers::gnss::BandObservation>(Arena*);
template<> ::apollo::drivers::gnss::EpochObservation* Arena::CreateMaybeMessage<::apollo::drivers::gnss::EpochObservation>(Arena*);
template<> ::apollo::drivers::gnss::GlonassOrbit* Arena::CreateMaybeMessage<::apollo::drivers::gnss::GlonassOrbit>(Arena*);
template<> ::apollo::drivers::gnss::GnssEphemeris* Arena::CreateMaybeMessage<::apollo::drivers::gnss::GnssEphemeris>(Arena*);
template<> ::apollo::drivers::gnss::KepplerOrbit* Arena::CreateMaybeMessage<::apollo::drivers::gnss::KepplerOrbit>(Arena*);
template<> ::apollo::drivers::gnss::SatelliteObservation* Arena::CreateMaybeMessage<::apollo::drivers::gnss::SatelliteObservation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace gnss {

enum GnssBandID : int {
  BAND_UNKNOWN = 0,
  GPS_L1 = 1,
  GPS_L2 = 2,
  GPS_L5 = 3,
  BDS_B1 = 4,
  BDS_B2 = 5,
  BDS_B3 = 6,
  GLO_G1 = 7,
  GLO_G2 = 8,
  GLO_G3 = 9
};
bool GnssBandID_IsValid(int value);
constexpr GnssBandID GnssBandID_MIN = BAND_UNKNOWN;
constexpr GnssBandID GnssBandID_MAX = GLO_G3;
constexpr int GnssBandID_ARRAYSIZE = GnssBandID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssBandID_descriptor();
template<typename T>
inline const std::string& GnssBandID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GnssBandID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GnssBandID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GnssBandID_descriptor(), enum_t_value);
}
inline bool GnssBandID_Parse(
    const std::string& name, GnssBandID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GnssBandID>(
    GnssBandID_descriptor(), name, value);
}
enum GnssTimeType : int {
  TIME_UNKNOWN = 0,
  GPS_TIME = 1,
  BDS_TIME = 2,
  GLO_TIME = 3,
  GAL_TIME = 4
};
bool GnssTimeType_IsValid(int value);
constexpr GnssTimeType GnssTimeType_MIN = TIME_UNKNOWN;
constexpr GnssTimeType GnssTimeType_MAX = GAL_TIME;
constexpr int GnssTimeType_ARRAYSIZE = GnssTimeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssTimeType_descriptor();
template<typename T>
inline const std::string& GnssTimeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GnssTimeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GnssTimeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GnssTimeType_descriptor(), enum_t_value);
}
inline bool GnssTimeType_Parse(
    const std::string& name, GnssTimeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GnssTimeType>(
    GnssTimeType_descriptor(), name, value);
}
enum GnssType : int {
  SYS_UNKNOWN = 0,
  GPS_SYS = 1,
  BDS_SYS = 2,
  GLO_SYS = 3,
  GAL_SYS = 4
};
bool GnssType_IsValid(int value);
constexpr GnssType GnssType_MIN = SYS_UNKNOWN;
constexpr GnssType GnssType_MAX = GAL_SYS;
constexpr int GnssType_ARRAYSIZE = GnssType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GnssType_descriptor();
template<typename T>
inline const std::string& GnssType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GnssType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GnssType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GnssType_descriptor(), enum_t_value);
}
inline bool GnssType_Parse(
    const std::string& name, GnssType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GnssType>(
    GnssType_descriptor(), name, value);
}
enum PseudoType : int {
  CODE_UNKNOWN = 0,
  CORSE_CODE = 1,
  PRECISION_CODE = 2
};
bool PseudoType_IsValid(int value);
constexpr PseudoType PseudoType_MIN = CODE_UNKNOWN;
constexpr PseudoType PseudoType_MAX = PRECISION_CODE;
constexpr int PseudoType_ARRAYSIZE = PseudoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PseudoType_descriptor();
template<typename T>
inline const std::string& PseudoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PseudoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PseudoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PseudoType_descriptor(), enum_t_value);
}
inline bool PseudoType_Parse(
    const std::string& name, PseudoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PseudoType>(
    PseudoType_descriptor(), name, value);
}
// ===================================================================

class BandObservation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.BandObservation) */ {
 public:
  BandObservation();
  virtual ~BandObservation();

  BandObservation(const BandObservation& from);
  BandObservation(BandObservation&& from) noexcept
    : BandObservation() {
    *this = ::std::move(from);
  }

  inline BandObservation& operator=(const BandObservation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BandObservation& operator=(BandObservation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BandObservation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BandObservation* internal_default_instance() {
    return reinterpret_cast<const BandObservation*>(
               &_BandObservation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BandObservation& a, BandObservation& b) {
    a.Swap(&b);
  }
  inline void Swap(BandObservation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BandObservation* New() const final {
    return CreateMaybeMessage<BandObservation>(nullptr);
  }

  BandObservation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BandObservation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BandObservation& from);
  void MergeFrom(const BandObservation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BandObservation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.BandObservation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyValueFieldNumber = 2,
    kBandIdFieldNumber = 1,
    kPseudoTypeFieldNumber = 3,
    kPseudoRangeFieldNumber = 4,
    kCarrierPhaseFieldNumber = 5,
    kDopplerFieldNumber = 7,
    kLossLockIndexFieldNumber = 6,
    kSnrFieldNumber = 8,
  };
  // optional double frequency_value = 2;
  bool has_frequency_value() const;
  private:
  bool _internal_has_frequency_value() const;
  public:
  void clear_frequency_value();
  double frequency_value() const;
  void set_frequency_value(double value);
  private:
  double _internal_frequency_value() const;
  void _internal_set_frequency_value(double value);
  public:

  // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  bool has_band_id() const;
  private:
  bool _internal_has_band_id() const;
  public:
  void clear_band_id();
  ::apollo::drivers::gnss::GnssBandID band_id() const;
  void set_band_id(::apollo::drivers::gnss::GnssBandID value);
  private:
  ::apollo::drivers::gnss::GnssBandID _internal_band_id() const;
  void _internal_set_band_id(::apollo::drivers::gnss::GnssBandID value);
  public:

  // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  bool has_pseudo_type() const;
  private:
  bool _internal_has_pseudo_type() const;
  public:
  void clear_pseudo_type();
  ::apollo::drivers::gnss::PseudoType pseudo_type() const;
  void set_pseudo_type(::apollo::drivers::gnss::PseudoType value);
  private:
  ::apollo::drivers::gnss::PseudoType _internal_pseudo_type() const;
  void _internal_set_pseudo_type(::apollo::drivers::gnss::PseudoType value);
  public:

  // optional double pseudo_range = 4;
  bool has_pseudo_range() const;
  private:
  bool _internal_has_pseudo_range() const;
  public:
  void clear_pseudo_range();
  double pseudo_range() const;
  void set_pseudo_range(double value);
  private:
  double _internal_pseudo_range() const;
  void _internal_set_pseudo_range(double value);
  public:

  // optional double carrier_phase = 5;
  bool has_carrier_phase() const;
  private:
  bool _internal_has_carrier_phase() const;
  public:
  void clear_carrier_phase();
  double carrier_phase() const;
  void set_carrier_phase(double value);
  private:
  double _internal_carrier_phase() const;
  void _internal_set_carrier_phase(double value);
  public:

  // optional double doppler = 7;
  bool has_doppler() const;
  private:
  bool _internal_has_doppler() const;
  public:
  void clear_doppler();
  double doppler() const;
  void set_doppler(double value);
  private:
  double _internal_doppler() const;
  void _internal_set_doppler(double value);
  public:

  // optional uint32 loss_lock_index = 6;
  bool has_loss_lock_index() const;
  private:
  bool _internal_has_loss_lock_index() const;
  public:
  void clear_loss_lock_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 loss_lock_index() const;
  void set_loss_lock_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loss_lock_index() const;
  void _internal_set_loss_lock_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float snr = 8;
  bool has_snr() const;
  private:
  bool _internal_has_snr() const;
  public:
  void clear_snr();
  float snr() const;
  void set_snr(float value);
  private:
  float _internal_snr() const;
  void _internal_set_snr(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.BandObservation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double frequency_value_;
  int band_id_;
  int pseudo_type_;
  double pseudo_range_;
  double carrier_phase_;
  double doppler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loss_lock_index_;
  float snr_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto;
};
// -------------------------------------------------------------------

class SatelliteObservation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.SatelliteObservation) */ {
 public:
  SatelliteObservation();
  virtual ~SatelliteObservation();

  SatelliteObservation(const SatelliteObservation& from);
  SatelliteObservation(SatelliteObservation&& from) noexcept
    : SatelliteObservation() {
    *this = ::std::move(from);
  }

  inline SatelliteObservation& operator=(const SatelliteObservation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SatelliteObservation& operator=(SatelliteObservation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SatelliteObservation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SatelliteObservation* internal_default_instance() {
    return reinterpret_cast<const SatelliteObservation*>(
               &_SatelliteObservation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SatelliteObservation& a, SatelliteObservation& b) {
    a.Swap(&b);
  }
  inline void Swap(SatelliteObservation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SatelliteObservation* New() const final {
    return CreateMaybeMessage<SatelliteObservation>(nullptr);
  }

  SatelliteObservation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SatelliteObservation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SatelliteObservation& from);
  void MergeFrom(const SatelliteObservation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SatelliteObservation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.SatelliteObservation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandObsFieldNumber = 4,
    kSatPrnFieldNumber = 1,
    kBandObsNumFieldNumber = 3,
    kSatSysFieldNumber = 2,
  };
  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  int band_obs_size() const;
  private:
  int _internal_band_obs_size() const;
  public:
  void clear_band_obs();
  ::apollo::drivers::gnss::BandObservation* mutable_band_obs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::BandObservation >*
      mutable_band_obs();
  private:
  const ::apollo::drivers::gnss::BandObservation& _internal_band_obs(int index) const;
  ::apollo::drivers::gnss::BandObservation* _internal_add_band_obs();
  public:
  const ::apollo::drivers::gnss::BandObservation& band_obs(int index) const;
  ::apollo::drivers::gnss::BandObservation* add_band_obs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::BandObservation >&
      band_obs() const;

  // optional uint32 sat_prn = 1;
  bool has_sat_prn() const;
  private:
  bool _internal_has_sat_prn() const;
  public:
  void clear_sat_prn();
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_prn() const;
  void set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sat_prn() const;
  void _internal_set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 band_obs_num = 3;
  bool has_band_obs_num() const;
  private:
  bool _internal_has_band_obs_num() const;
  public:
  void clear_band_obs_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 band_obs_num() const;
  void set_band_obs_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_band_obs_num() const;
  void _internal_set_band_obs_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  bool has_sat_sys() const;
  private:
  bool _internal_has_sat_sys() const;
  public:
  void clear_sat_sys();
  ::apollo::drivers::gnss::GnssType sat_sys() const;
  void set_sat_sys(::apollo::drivers::gnss::GnssType value);
  private:
  ::apollo::drivers::gnss::GnssType _internal_sat_sys() const;
  void _internal_set_sat_sys(::apollo::drivers::gnss::GnssType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.SatelliteObservation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::BandObservation > band_obs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_prn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 band_obs_num_;
  int sat_sys_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto;
};
// -------------------------------------------------------------------

class EpochObservation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.EpochObservation) */ {
 public:
  EpochObservation();
  virtual ~EpochObservation();

  EpochObservation(const EpochObservation& from);
  EpochObservation(EpochObservation&& from) noexcept
    : EpochObservation() {
    *this = ::std::move(from);
  }

  inline EpochObservation& operator=(const EpochObservation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochObservation& operator=(EpochObservation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EpochObservation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EpochObservation* internal_default_instance() {
    return reinterpret_cast<const EpochObservation*>(
               &_EpochObservation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EpochObservation& a, EpochObservation& b) {
    a.Swap(&b);
  }
  inline void Swap(EpochObservation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EpochObservation* New() const final {
    return CreateMaybeMessage<EpochObservation>(nullptr);
  }

  EpochObservation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EpochObservation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EpochObservation& from);
  void MergeFrom(const EpochObservation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpochObservation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.EpochObservation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSatObsFieldNumber = 10,
    kReceiverIdFieldNumber = 1,
    kGnssWeekFieldNumber = 3,
    kGnssSecondSFieldNumber = 4,
    kPositionXFieldNumber = 5,
    kPositionYFieldNumber = 6,
    kPositionZFieldNumber = 7,
    kHealthFlagFieldNumber = 8,
    kSatObsNumFieldNumber = 9,
    kGnssTimeTypeFieldNumber = 2,
  };
  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  int sat_obs_size() const;
  private:
  int _internal_sat_obs_size() const;
  public:
  void clear_sat_obs();
  ::apollo::drivers::gnss::SatelliteObservation* mutable_sat_obs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::SatelliteObservation >*
      mutable_sat_obs();
  private:
  const ::apollo::drivers::gnss::SatelliteObservation& _internal_sat_obs(int index) const;
  ::apollo::drivers::gnss::SatelliteObservation* _internal_add_sat_obs();
  public:
  const ::apollo::drivers::gnss::SatelliteObservation& sat_obs(int index) const;
  ::apollo::drivers::gnss::SatelliteObservation* add_sat_obs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::SatelliteObservation >&
      sat_obs() const;

  // optional uint32 receiver_id = 1;
  bool has_receiver_id() const;
  private:
  bool _internal_has_receiver_id() const;
  public:
  void clear_receiver_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_id() const;
  void set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_receiver_id() const;
  void _internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gnss_week = 3;
  bool has_gnss_week() const;
  private:
  bool _internal_has_gnss_week() const;
  public:
  void clear_gnss_week();
  ::PROTOBUF_NAMESPACE_ID::uint32 gnss_week() const;
  void set_gnss_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gnss_week() const;
  void _internal_set_gnss_week(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double gnss_second_s = 4;
  bool has_gnss_second_s() const;
  private:
  bool _internal_has_gnss_second_s() const;
  public:
  void clear_gnss_second_s();
  double gnss_second_s() const;
  void set_gnss_second_s(double value);
  private:
  double _internal_gnss_second_s() const;
  void _internal_set_gnss_second_s(double value);
  public:

  // optional double position_x = 5;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  double position_x() const;
  void set_position_x(double value);
  private:
  double _internal_position_x() const;
  void _internal_set_position_x(double value);
  public:

  // optional double position_y = 6;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  double position_y() const;
  void set_position_y(double value);
  private:
  double _internal_position_y() const;
  void _internal_set_position_y(double value);
  public:

  // optional double position_z = 7;
  bool has_position_z() const;
  private:
  bool _internal_has_position_z() const;
  public:
  void clear_position_z();
  double position_z() const;
  void set_position_z(double value);
  private:
  double _internal_position_z() const;
  void _internal_set_position_z(double value);
  public:

  // optional uint32 health_flag = 8 [default = 0];
  bool has_health_flag() const;
  private:
  bool _internal_has_health_flag() const;
  public:
  void clear_health_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 health_flag() const;
  void set_health_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_health_flag() const;
  void _internal_set_health_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sat_obs_num = 9;
  bool has_sat_obs_num() const;
  private:
  bool _internal_has_sat_obs_num() const;
  public:
  void clear_sat_obs_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_obs_num() const;
  void set_sat_obs_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sat_obs_num() const;
  void _internal_set_sat_obs_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  bool has_gnss_time_type() const;
  private:
  bool _internal_has_gnss_time_type() const;
  public:
  void clear_gnss_time_type();
  ::apollo::drivers::gnss::GnssTimeType gnss_time_type() const;
  void set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value);
  private:
  ::apollo::drivers::gnss::GnssTimeType _internal_gnss_time_type() const;
  void _internal_set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.EpochObservation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::SatelliteObservation > sat_obs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gnss_week_;
  double gnss_second_s_;
  double position_x_;
  double position_y_;
  double position_z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 health_flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_obs_num_;
  int gnss_time_type_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto;
};
// -------------------------------------------------------------------

class KepplerOrbit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.KepplerOrbit) */ {
 public:
  KepplerOrbit();
  virtual ~KepplerOrbit();

  KepplerOrbit(const KepplerOrbit& from);
  KepplerOrbit(KepplerOrbit&& from) noexcept
    : KepplerOrbit() {
    *this = ::std::move(from);
  }

  inline KepplerOrbit& operator=(const KepplerOrbit& from) {
    CopyFrom(from);
    return *this;
  }
  inline KepplerOrbit& operator=(KepplerOrbit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KepplerOrbit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KepplerOrbit* internal_default_instance() {
    return reinterpret_cast<const KepplerOrbit*>(
               &_KepplerOrbit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KepplerOrbit& a, KepplerOrbit& b) {
    a.Swap(&b);
  }
  inline void Swap(KepplerOrbit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KepplerOrbit* New() const final {
    return CreateMaybeMessage<KepplerOrbit>(nullptr);
  }

  KepplerOrbit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KepplerOrbit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KepplerOrbit& from);
  void MergeFrom(const KepplerOrbit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KepplerOrbit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.KepplerOrbit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSatPrnFieldNumber = 2,
    kYearFieldNumber = 4,
    kMonthFieldNumber = 5,
    kDayFieldNumber = 6,
    kHourFieldNumber = 7,
    kMinuteFieldNumber = 8,
    kSecondSFieldNumber = 9,
    kReservedFieldNumber = 11,
    kAf0FieldNumber = 12,
    kAf1FieldNumber = 13,
    kAf2FieldNumber = 14,
    kIodeFieldNumber = 15,
    kDeltanFieldNumber = 16,
    kM0FieldNumber = 17,
    kEFieldNumber = 18,
    kRootaFieldNumber = 19,
    kToeFieldNumber = 20,
    kTocFieldNumber = 21,
    kCicFieldNumber = 22,
    kWeekNumFieldNumber = 10,
    kL2PdataflagFieldNumber = 34,
    kCrcFieldNumber = 23,
    kCisFieldNumber = 24,
    kCrsFieldNumber = 25,
    kCucFieldNumber = 26,
    kCusFieldNumber = 27,
    kOmega0FieldNumber = 28,
    kOmegaFieldNumber = 29,
    kI0FieldNumber = 30,
    kOmegadotFieldNumber = 31,
    kIdotFieldNumber = 32,
    kCodesonL2ChannelFieldNumber = 33,
    kAccuracyFieldNumber = 35,
    kHealthFieldNumber = 36,
    kTgdFieldNumber = 37,
    kIodcFieldNumber = 38,
    kGnssTypeFieldNumber = 1,
    kGnssTimeTypeFieldNumber = 3,
  };
  // optional uint32 sat_prn = 2;
  bool has_sat_prn() const;
  private:
  bool _internal_has_sat_prn() const;
  public:
  void clear_sat_prn();
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_prn() const;
  void set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sat_prn() const;
  void _internal_set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 year = 4;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 month = 5;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::uint32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 day = 6;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hour = 7;
  bool has_hour() const;
  private:
  bool _internal_has_hour() const;
  public:
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::uint32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minute = 8;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::uint32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double second_s = 9;
  bool has_second_s() const;
  private:
  bool _internal_has_second_s() const;
  public:
  void clear_second_s();
  double second_s() const;
  void set_second_s(double value);
  private:
  double _internal_second_s() const;
  void _internal_set_second_s(double value);
  public:

  // optional double reserved = 11;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  double reserved() const;
  void set_reserved(double value);
  private:
  double _internal_reserved() const;
  void _internal_set_reserved(double value);
  public:

  // optional double af0 = 12;
  bool has_af0() const;
  private:
  bool _internal_has_af0() const;
  public:
  void clear_af0();
  double af0() const;
  void set_af0(double value);
  private:
  double _internal_af0() const;
  void _internal_set_af0(double value);
  public:

  // optional double af1 = 13;
  bool has_af1() const;
  private:
  bool _internal_has_af1() const;
  public:
  void clear_af1();
  double af1() const;
  void set_af1(double value);
  private:
  double _internal_af1() const;
  void _internal_set_af1(double value);
  public:

  // optional double af2 = 14;
  bool has_af2() const;
  private:
  bool _internal_has_af2() const;
  public:
  void clear_af2();
  double af2() const;
  void set_af2(double value);
  private:
  double _internal_af2() const;
  void _internal_set_af2(double value);
  public:

  // optional double iode = 15;
  bool has_iode() const;
  private:
  bool _internal_has_iode() const;
  public:
  void clear_iode();
  double iode() const;
  void set_iode(double value);
  private:
  double _internal_iode() const;
  void _internal_set_iode(double value);
  public:

  // optional double deltan = 16;
  bool has_deltan() const;
  private:
  bool _internal_has_deltan() const;
  public:
  void clear_deltan();
  double deltan() const;
  void set_deltan(double value);
  private:
  double _internal_deltan() const;
  void _internal_set_deltan(double value);
  public:

  // optional double m0 = 17;
  bool has_m0() const;
  private:
  bool _internal_has_m0() const;
  public:
  void clear_m0();
  double m0() const;
  void set_m0(double value);
  private:
  double _internal_m0() const;
  void _internal_set_m0(double value);
  public:

  // optional double e = 18;
  bool has_e() const;
  private:
  bool _internal_has_e() const;
  public:
  void clear_e();
  double e() const;
  void set_e(double value);
  private:
  double _internal_e() const;
  void _internal_set_e(double value);
  public:

  // optional double roota = 19;
  bool has_roota() const;
  private:
  bool _internal_has_roota() const;
  public:
  void clear_roota();
  double roota() const;
  void set_roota(double value);
  private:
  double _internal_roota() const;
  void _internal_set_roota(double value);
  public:

  // optional double toe = 20;
  bool has_toe() const;
  private:
  bool _internal_has_toe() const;
  public:
  void clear_toe();
  double toe() const;
  void set_toe(double value);
  private:
  double _internal_toe() const;
  void _internal_set_toe(double value);
  public:

  // optional double toc = 21;
  bool has_toc() const;
  private:
  bool _internal_has_toc() const;
  public:
  void clear_toc();
  double toc() const;
  void set_toc(double value);
  private:
  double _internal_toc() const;
  void _internal_set_toc(double value);
  public:

  // optional double cic = 22;
  bool has_cic() const;
  private:
  bool _internal_has_cic() const;
  public:
  void clear_cic();
  double cic() const;
  void set_cic(double value);
  private:
  double _internal_cic() const;
  void _internal_set_cic(double value);
  public:

  // optional uint32 week_num = 10;
  bool has_week_num() const;
  private:
  bool _internal_has_week_num() const;
  public:
  void clear_week_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 week_num() const;
  void set_week_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week_num() const;
  void _internal_set_week_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 L2Pdataflag = 34;
  bool has_l2pdataflag() const;
  private:
  bool _internal_has_l2pdataflag() const;
  public:
  void clear_l2pdataflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 l2pdataflag() const;
  void set_l2pdataflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l2pdataflag() const;
  void _internal_set_l2pdataflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double crc = 23;
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  double crc() const;
  void set_crc(double value);
  private:
  double _internal_crc() const;
  void _internal_set_crc(double value);
  public:

  // optional double cis = 24;
  bool has_cis() const;
  private:
  bool _internal_has_cis() const;
  public:
  void clear_cis();
  double cis() const;
  void set_cis(double value);
  private:
  double _internal_cis() const;
  void _internal_set_cis(double value);
  public:

  // optional double crs = 25;
  bool has_crs() const;
  private:
  bool _internal_has_crs() const;
  public:
  void clear_crs();
  double crs() const;
  void set_crs(double value);
  private:
  double _internal_crs() const;
  void _internal_set_crs(double value);
  public:

  // optional double cuc = 26;
  bool has_cuc() const;
  private:
  bool _internal_has_cuc() const;
  public:
  void clear_cuc();
  double cuc() const;
  void set_cuc(double value);
  private:
  double _internal_cuc() const;
  void _internal_set_cuc(double value);
  public:

  // optional double cus = 27;
  bool has_cus() const;
  private:
  bool _internal_has_cus() const;
  public:
  void clear_cus();
  double cus() const;
  void set_cus(double value);
  private:
  double _internal_cus() const;
  void _internal_set_cus(double value);
  public:

  // optional double omega0 = 28;
  bool has_omega0() const;
  private:
  bool _internal_has_omega0() const;
  public:
  void clear_omega0();
  double omega0() const;
  void set_omega0(double value);
  private:
  double _internal_omega0() const;
  void _internal_set_omega0(double value);
  public:

  // optional double omega = 29;
  bool has_omega() const;
  private:
  bool _internal_has_omega() const;
  public:
  void clear_omega();
  double omega() const;
  void set_omega(double value);
  private:
  double _internal_omega() const;
  void _internal_set_omega(double value);
  public:

  // optional double i0 = 30;
  bool has_i0() const;
  private:
  bool _internal_has_i0() const;
  public:
  void clear_i0();
  double i0() const;
  void set_i0(double value);
  private:
  double _internal_i0() const;
  void _internal_set_i0(double value);
  public:

  // optional double omegadot = 31;
  bool has_omegadot() const;
  private:
  bool _internal_has_omegadot() const;
  public:
  void clear_omegadot();
  double omegadot() const;
  void set_omegadot(double value);
  private:
  double _internal_omegadot() const;
  void _internal_set_omegadot(double value);
  public:

  // optional double idot = 32;
  bool has_idot() const;
  private:
  bool _internal_has_idot() const;
  public:
  void clear_idot();
  double idot() const;
  void set_idot(double value);
  private:
  double _internal_idot() const;
  void _internal_set_idot(double value);
  public:

  // optional double codesonL2channel = 33;
  bool has_codesonl2channel() const;
  private:
  bool _internal_has_codesonl2channel() const;
  public:
  void clear_codesonl2channel();
  double codesonl2channel() const;
  void set_codesonl2channel(double value);
  private:
  double _internal_codesonl2channel() const;
  void _internal_set_codesonl2channel(double value);
  public:

  // optional uint32 accuracy = 35;
  bool has_accuracy() const;
  private:
  bool _internal_has_accuracy() const;
  public:
  void clear_accuracy();
  ::PROTOBUF_NAMESPACE_ID::uint32 accuracy() const;
  void set_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accuracy() const;
  void _internal_set_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 health = 36;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::uint32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_health() const;
  void _internal_set_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double tgd = 37;
  bool has_tgd() const;
  private:
  bool _internal_has_tgd() const;
  public:
  void clear_tgd();
  double tgd() const;
  void set_tgd(double value);
  private:
  double _internal_tgd() const;
  void _internal_set_tgd(double value);
  public:

  // optional double iodc = 38;
  bool has_iodc() const;
  private:
  bool _internal_has_iodc() const;
  public:
  void clear_iodc();
  double iodc() const;
  void set_iodc(double value);
  private:
  double _internal_iodc() const;
  void _internal_set_iodc(double value);
  public:

  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
  bool has_gnss_type() const;
  private:
  bool _internal_has_gnss_type() const;
  public:
  void clear_gnss_type();
  ::apollo::drivers::gnss::GnssType gnss_type() const;
  void set_gnss_type(::apollo::drivers::gnss::GnssType value);
  private:
  ::apollo::drivers::gnss::GnssType _internal_gnss_type() const;
  void _internal_set_gnss_type(::apollo::drivers::gnss::GnssType value);
  public:

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
  bool has_gnss_time_type() const;
  private:
  bool _internal_has_gnss_time_type() const;
  public:
  void clear_gnss_time_type();
  ::apollo::drivers::gnss::GnssTimeType gnss_time_type() const;
  void set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value);
  private:
  ::apollo::drivers::gnss::GnssTimeType _internal_gnss_time_type() const;
  void _internal_set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.KepplerOrbit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_prn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  ::PROTOBUF_NAMESPACE_ID::uint32 month_;
  ::PROTOBUF_NAMESPACE_ID::uint32 day_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hour_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minute_;
  double second_s_;
  double reserved_;
  double af0_;
  double af1_;
  double af2_;
  double iode_;
  double deltan_;
  double m0_;
  double e_;
  double roota_;
  double toe_;
  double toc_;
  double cic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 l2pdataflag_;
  double crc_;
  double cis_;
  double crs_;
  double cuc_;
  double cus_;
  double omega0_;
  double omega_;
  double i0_;
  double omegadot_;
  double idot_;
  double codesonl2channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accuracy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 health_;
  double tgd_;
  double iodc_;
  int gnss_type_;
  int gnss_time_type_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto;
};
// -------------------------------------------------------------------

class GlonassOrbit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.GlonassOrbit) */ {
 public:
  GlonassOrbit();
  virtual ~GlonassOrbit();

  GlonassOrbit(const GlonassOrbit& from);
  GlonassOrbit(GlonassOrbit&& from) noexcept
    : GlonassOrbit() {
    *this = ::std::move(from);
  }

  inline GlonassOrbit& operator=(const GlonassOrbit& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlonassOrbit& operator=(GlonassOrbit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlonassOrbit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlonassOrbit* internal_default_instance() {
    return reinterpret_cast<const GlonassOrbit*>(
               &_GlonassOrbit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GlonassOrbit& a, GlonassOrbit& b) {
    a.Swap(&b);
  }
  inline void Swap(GlonassOrbit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlonassOrbit* New() const final {
    return CreateMaybeMessage<GlonassOrbit>(nullptr);
  }

  GlonassOrbit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlonassOrbit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlonassOrbit& from);
  void MergeFrom(const GlonassOrbit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlonassOrbit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.GlonassOrbit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotPrnFieldNumber = 2,
    kYearFieldNumber = 5,
    kToeFieldNumber = 4,
    kMonthFieldNumber = 6,
    kDayFieldNumber = 7,
    kHourFieldNumber = 8,
    kMinuteFieldNumber = 9,
    kSecondSFieldNumber = 10,
    kFrequencyNoFieldNumber = 11,
    kWeekNumFieldNumber = 12,
    kWeekSecondSFieldNumber = 13,
    kTkFieldNumber = 14,
    kClockOffsetFieldNumber = 15,
    kClockDriftFieldNumber = 16,
    kPositionXFieldNumber = 18,
    kPositionYFieldNumber = 19,
    kPositionZFieldNumber = 20,
    kVelocityXFieldNumber = 21,
    kVelocityYFieldNumber = 22,
    kHealthFieldNumber = 17,
    kSatPrnFieldNumber = 28,
    kVelocityZFieldNumber = 23,
    kAccelerateXFieldNumber = 24,
    kAccelerateYFieldNumber = 25,
    kAccelerateZFieldNumber = 26,
    kInforAgeFieldNumber = 27,
    kGnssTypeFieldNumber = 1,
    kGnssTimeTypeFieldNumber = 3,
  };
  // optional uint32 slot_prn = 2;
  bool has_slot_prn() const;
  private:
  bool _internal_has_slot_prn() const;
  public:
  void clear_slot_prn();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_prn() const;
  void set_slot_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_prn() const;
  void _internal_set_slot_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 year = 5;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double toe = 4;
  bool has_toe() const;
  private:
  bool _internal_has_toe() const;
  public:
  void clear_toe();
  double toe() const;
  void set_toe(double value);
  private:
  double _internal_toe() const;
  void _internal_set_toe(double value);
  public:

  // optional uint32 month = 6;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::uint32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 day = 7;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hour = 8;
  bool has_hour() const;
  private:
  bool _internal_has_hour() const;
  public:
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::uint32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minute = 9;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::uint32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double second_s = 10;
  bool has_second_s() const;
  private:
  bool _internal_has_second_s() const;
  public:
  void clear_second_s();
  double second_s() const;
  void set_second_s(double value);
  private:
  double _internal_second_s() const;
  void _internal_set_second_s(double value);
  public:

  // optional int32 frequency_no = 11;
  bool has_frequency_no() const;
  private:
  bool _internal_has_frequency_no() const;
  public:
  void clear_frequency_no();
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_no() const;
  void set_frequency_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frequency_no() const;
  void _internal_set_frequency_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 week_num = 12;
  bool has_week_num() const;
  private:
  bool _internal_has_week_num() const;
  public:
  void clear_week_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 week_num() const;
  void set_week_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week_num() const;
  void _internal_set_week_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double week_second_s = 13;
  bool has_week_second_s() const;
  private:
  bool _internal_has_week_second_s() const;
  public:
  void clear_week_second_s();
  double week_second_s() const;
  void set_week_second_s(double value);
  private:
  double _internal_week_second_s() const;
  void _internal_set_week_second_s(double value);
  public:

  // optional double tk = 14;
  bool has_tk() const;
  private:
  bool _internal_has_tk() const;
  public:
  void clear_tk();
  double tk() const;
  void set_tk(double value);
  private:
  double _internal_tk() const;
  void _internal_set_tk(double value);
  public:

  // optional double clock_offset = 15;
  bool has_clock_offset() const;
  private:
  bool _internal_has_clock_offset() const;
  public:
  void clear_clock_offset();
  double clock_offset() const;
  void set_clock_offset(double value);
  private:
  double _internal_clock_offset() const;
  void _internal_set_clock_offset(double value);
  public:

  // optional double clock_drift = 16;
  bool has_clock_drift() const;
  private:
  bool _internal_has_clock_drift() const;
  public:
  void clear_clock_drift();
  double clock_drift() const;
  void set_clock_drift(double value);
  private:
  double _internal_clock_drift() const;
  void _internal_set_clock_drift(double value);
  public:

  // optional double position_x = 18;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  double position_x() const;
  void set_position_x(double value);
  private:
  double _internal_position_x() const;
  void _internal_set_position_x(double value);
  public:

  // optional double position_y = 19;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  double position_y() const;
  void set_position_y(double value);
  private:
  double _internal_position_y() const;
  void _internal_set_position_y(double value);
  public:

  // optional double position_z = 20;
  bool has_position_z() const;
  private:
  bool _internal_has_position_z() const;
  public:
  void clear_position_z();
  double position_z() const;
  void set_position_z(double value);
  private:
  double _internal_position_z() const;
  void _internal_set_position_z(double value);
  public:

  // optional double velocity_x = 21;
  bool has_velocity_x() const;
  private:
  bool _internal_has_velocity_x() const;
  public:
  void clear_velocity_x();
  double velocity_x() const;
  void set_velocity_x(double value);
  private:
  double _internal_velocity_x() const;
  void _internal_set_velocity_x(double value);
  public:

  // optional double velocity_y = 22;
  bool has_velocity_y() const;
  private:
  bool _internal_has_velocity_y() const;
  public:
  void clear_velocity_y();
  double velocity_y() const;
  void set_velocity_y(double value);
  private:
  double _internal_velocity_y() const;
  void _internal_set_velocity_y(double value);
  public:

  // optional uint32 health = 17;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::uint32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_health() const;
  void _internal_set_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sat_prn = 28;
  bool has_sat_prn() const;
  private:
  bool _internal_has_sat_prn() const;
  public:
  void clear_sat_prn();
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_prn() const;
  void set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sat_prn() const;
  void _internal_set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double velocity_z = 23;
  bool has_velocity_z() const;
  private:
  bool _internal_has_velocity_z() const;
  public:
  void clear_velocity_z();
  double velocity_z() const;
  void set_velocity_z(double value);
  private:
  double _internal_velocity_z() const;
  void _internal_set_velocity_z(double value);
  public:

  // optional double accelerate_x = 24;
  bool has_accelerate_x() const;
  private:
  bool _internal_has_accelerate_x() const;
  public:
  void clear_accelerate_x();
  double accelerate_x() const;
  void set_accelerate_x(double value);
  private:
  double _internal_accelerate_x() const;
  void _internal_set_accelerate_x(double value);
  public:

  // optional double accelerate_y = 25;
  bool has_accelerate_y() const;
  private:
  bool _internal_has_accelerate_y() const;
  public:
  void clear_accelerate_y();
  double accelerate_y() const;
  void set_accelerate_y(double value);
  private:
  double _internal_accelerate_y() const;
  void _internal_set_accelerate_y(double value);
  public:

  // optional double accelerate_z = 26;
  bool has_accelerate_z() const;
  private:
  bool _internal_has_accelerate_z() const;
  public:
  void clear_accelerate_z();
  double accelerate_z() const;
  void set_accelerate_z(double value);
  private:
  double _internal_accelerate_z() const;
  void _internal_set_accelerate_z(double value);
  public:

  // optional double infor_age = 27;
  bool has_infor_age() const;
  private:
  bool _internal_has_infor_age() const;
  public:
  void clear_infor_age();
  double infor_age() const;
  void set_infor_age(double value);
  private:
  double _internal_infor_age() const;
  void _internal_set_infor_age(double value);
  public:

  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  bool has_gnss_type() const;
  private:
  bool _internal_has_gnss_type() const;
  public:
  void clear_gnss_type();
  ::apollo::drivers::gnss::GnssType gnss_type() const;
  void set_gnss_type(::apollo::drivers::gnss::GnssType value);
  private:
  ::apollo::drivers::gnss::GnssType _internal_gnss_type() const;
  void _internal_set_gnss_type(::apollo::drivers::gnss::GnssType value);
  public:

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
  bool has_gnss_time_type() const;
  private:
  bool _internal_has_gnss_time_type() const;
  public:
  void clear_gnss_time_type();
  ::apollo::drivers::gnss::GnssTimeType gnss_time_type() const;
  void set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value);
  private:
  ::apollo::drivers::gnss::GnssTimeType _internal_gnss_time_type() const;
  void _internal_set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.GlonassOrbit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_prn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  double toe_;
  ::PROTOBUF_NAMESPACE_ID::uint32 month_;
  ::PROTOBUF_NAMESPACE_ID::uint32 day_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hour_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minute_;
  double second_s_;
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_no_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_num_;
  double week_second_s_;
  double tk_;
  double clock_offset_;
  double clock_drift_;
  double position_x_;
  double position_y_;
  double position_z_;
  double velocity_x_;
  double velocity_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 health_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sat_prn_;
  double velocity_z_;
  double accelerate_x_;
  double accelerate_y_;
  double accelerate_z_;
  double infor_age_;
  int gnss_type_;
  int gnss_time_type_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto;
};
// -------------------------------------------------------------------

class GnssEphemeris :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.GnssEphemeris) */ {
 public:
  GnssEphemeris();
  virtual ~GnssEphemeris();

  GnssEphemeris(const GnssEphemeris& from);
  GnssEphemeris(GnssEphemeris&& from) noexcept
    : GnssEphemeris() {
    *this = ::std::move(from);
  }

  inline GnssEphemeris& operator=(const GnssEphemeris& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssEphemeris& operator=(GnssEphemeris&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssEphemeris& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssEphemeris* internal_default_instance() {
    return reinterpret_cast<const GnssEphemeris*>(
               &_GnssEphemeris_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GnssEphemeris& a, GnssEphemeris& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssEphemeris* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssEphemeris* New() const final {
    return CreateMaybeMessage<GnssEphemeris>(nullptr);
  }

  GnssEphemeris* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssEphemeris>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssEphemeris& from);
  void MergeFrom(const GnssEphemeris& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssEphemeris* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.GnssEphemeris";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKepplerOrbitFieldNumber = 2,
    kGlonassOrbitFieldNumber = 3,
    kGnssTypeFieldNumber = 1,
  };
  // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
  bool has_keppler_orbit() const;
  private:
  bool _internal_has_keppler_orbit() const;
  public:
  void clear_keppler_orbit();
  const ::apollo::drivers::gnss::KepplerOrbit& keppler_orbit() const;
  ::apollo::drivers::gnss::KepplerOrbit* release_keppler_orbit();
  ::apollo::drivers::gnss::KepplerOrbit* mutable_keppler_orbit();
  void set_allocated_keppler_orbit(::apollo::drivers::gnss::KepplerOrbit* keppler_orbit);
  private:
  const ::apollo::drivers::gnss::KepplerOrbit& _internal_keppler_orbit() const;
  ::apollo::drivers::gnss::KepplerOrbit* _internal_mutable_keppler_orbit();
  public:

  // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
  bool has_glonass_orbit() const;
  private:
  bool _internal_has_glonass_orbit() const;
  public:
  void clear_glonass_orbit();
  const ::apollo::drivers::gnss::GlonassOrbit& glonass_orbit() const;
  ::apollo::drivers::gnss::GlonassOrbit* release_glonass_orbit();
  ::apollo::drivers::gnss::GlonassOrbit* mutable_glonass_orbit();
  void set_allocated_glonass_orbit(::apollo::drivers::gnss::GlonassOrbit* glonass_orbit);
  private:
  const ::apollo::drivers::gnss::GlonassOrbit& _internal_glonass_orbit() const;
  ::apollo::drivers::gnss::GlonassOrbit* _internal_mutable_glonass_orbit();
  public:

  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  bool has_gnss_type() const;
  private:
  bool _internal_has_gnss_type() const;
  public:
  void clear_gnss_type();
  ::apollo::drivers::gnss::GnssType gnss_type() const;
  void set_gnss_type(::apollo::drivers::gnss::GnssType value);
  private:
  ::apollo::drivers::gnss::GnssType _internal_gnss_type() const;
  void _internal_set_gnss_type(::apollo::drivers::gnss::GnssType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.GnssEphemeris)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::drivers::gnss::KepplerOrbit* keppler_orbit_;
  ::apollo::drivers::gnss::GlonassOrbit* glonass_orbit_;
  int gnss_type_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BandObservation

// optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
inline bool BandObservation::_internal_has_band_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BandObservation::has_band_id() const {
  return _internal_has_band_id();
}
inline void BandObservation::clear_band_id() {
  band_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::gnss::GnssBandID BandObservation::_internal_band_id() const {
  return static_cast< ::apollo::drivers::gnss::GnssBandID >(band_id_);
}
inline ::apollo::drivers::gnss::GnssBandID BandObservation::band_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.band_id)
  return _internal_band_id();
}
inline void BandObservation::_internal_set_band_id(::apollo::drivers::gnss::GnssBandID value) {
  assert(::apollo::drivers::gnss::GnssBandID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  band_id_ = value;
}
inline void BandObservation::set_band_id(::apollo::drivers::gnss::GnssBandID value) {
  _internal_set_band_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.band_id)
}

// optional double frequency_value = 2;
inline bool BandObservation::_internal_has_frequency_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BandObservation::has_frequency_value() const {
  return _internal_has_frequency_value();
}
inline void BandObservation::clear_frequency_value() {
  frequency_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double BandObservation::_internal_frequency_value() const {
  return frequency_value_;
}
inline double BandObservation::frequency_value() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.frequency_value)
  return _internal_frequency_value();
}
inline void BandObservation::_internal_set_frequency_value(double value) {
  _has_bits_[0] |= 0x00000001u;
  frequency_value_ = value;
}
inline void BandObservation::set_frequency_value(double value) {
  _internal_set_frequency_value(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.frequency_value)
}

// optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
inline bool BandObservation::_internal_has_pseudo_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BandObservation::has_pseudo_type() const {
  return _internal_has_pseudo_type();
}
inline void BandObservation::clear_pseudo_type() {
  pseudo_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::gnss::PseudoType BandObservation::_internal_pseudo_type() const {
  return static_cast< ::apollo::drivers::gnss::PseudoType >(pseudo_type_);
}
inline ::apollo::drivers::gnss::PseudoType BandObservation::pseudo_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.pseudo_type)
  return _internal_pseudo_type();
}
inline void BandObservation::_internal_set_pseudo_type(::apollo::drivers::gnss::PseudoType value) {
  assert(::apollo::drivers::gnss::PseudoType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  pseudo_type_ = value;
}
inline void BandObservation::set_pseudo_type(::apollo::drivers::gnss::PseudoType value) {
  _internal_set_pseudo_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.pseudo_type)
}

// optional double pseudo_range = 4;
inline bool BandObservation::_internal_has_pseudo_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BandObservation::has_pseudo_range() const {
  return _internal_has_pseudo_range();
}
inline void BandObservation::clear_pseudo_range() {
  pseudo_range_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double BandObservation::_internal_pseudo_range() const {
  return pseudo_range_;
}
inline double BandObservation::pseudo_range() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.pseudo_range)
  return _internal_pseudo_range();
}
inline void BandObservation::_internal_set_pseudo_range(double value) {
  _has_bits_[0] |= 0x00000008u;
  pseudo_range_ = value;
}
inline void BandObservation::set_pseudo_range(double value) {
  _internal_set_pseudo_range(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.pseudo_range)
}

// optional double carrier_phase = 5;
inline bool BandObservation::_internal_has_carrier_phase() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BandObservation::has_carrier_phase() const {
  return _internal_has_carrier_phase();
}
inline void BandObservation::clear_carrier_phase() {
  carrier_phase_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double BandObservation::_internal_carrier_phase() const {
  return carrier_phase_;
}
inline double BandObservation::carrier_phase() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.carrier_phase)
  return _internal_carrier_phase();
}
inline void BandObservation::_internal_set_carrier_phase(double value) {
  _has_bits_[0] |= 0x00000010u;
  carrier_phase_ = value;
}
inline void BandObservation::set_carrier_phase(double value) {
  _internal_set_carrier_phase(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.carrier_phase)
}

// optional uint32 loss_lock_index = 6;
inline bool BandObservation::_internal_has_loss_lock_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BandObservation::has_loss_lock_index() const {
  return _internal_has_loss_lock_index();
}
inline void BandObservation::clear_loss_lock_index() {
  loss_lock_index_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BandObservation::_internal_loss_lock_index() const {
  return loss_lock_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BandObservation::loss_lock_index() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.loss_lock_index)
  return _internal_loss_lock_index();
}
inline void BandObservation::_internal_set_loss_lock_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  loss_lock_index_ = value;
}
inline void BandObservation::set_loss_lock_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loss_lock_index(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.loss_lock_index)
}

// optional double doppler = 7;
inline bool BandObservation::_internal_has_doppler() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BandObservation::has_doppler() const {
  return _internal_has_doppler();
}
inline void BandObservation::clear_doppler() {
  doppler_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double BandObservation::_internal_doppler() const {
  return doppler_;
}
inline double BandObservation::doppler() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.doppler)
  return _internal_doppler();
}
inline void BandObservation::_internal_set_doppler(double value) {
  _has_bits_[0] |= 0x00000020u;
  doppler_ = value;
}
inline void BandObservation::set_doppler(double value) {
  _internal_set_doppler(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.doppler)
}

// optional float snr = 8;
inline bool BandObservation::_internal_has_snr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BandObservation::has_snr() const {
  return _internal_has_snr();
}
inline void BandObservation::clear_snr() {
  snr_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float BandObservation::_internal_snr() const {
  return snr_;
}
inline float BandObservation::snr() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.BandObservation.snr)
  return _internal_snr();
}
inline void BandObservation::_internal_set_snr(float value) {
  _has_bits_[0] |= 0x00000080u;
  snr_ = value;
}
inline void BandObservation::set_snr(float value) {
  _internal_set_snr(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.BandObservation.snr)
}

// -------------------------------------------------------------------

// SatelliteObservation

// optional uint32 sat_prn = 1;
inline bool SatelliteObservation::_internal_has_sat_prn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SatelliteObservation::has_sat_prn() const {
  return _internal_has_sat_prn();
}
inline void SatelliteObservation::clear_sat_prn() {
  sat_prn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatelliteObservation::_internal_sat_prn() const {
  return sat_prn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatelliteObservation::sat_prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.SatelliteObservation.sat_prn)
  return _internal_sat_prn();
}
inline void SatelliteObservation::_internal_set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sat_prn_ = value;
}
inline void SatelliteObservation::set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sat_prn(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.SatelliteObservation.sat_prn)
}

// optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
inline bool SatelliteObservation::_internal_has_sat_sys() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SatelliteObservation::has_sat_sys() const {
  return _internal_has_sat_sys();
}
inline void SatelliteObservation::clear_sat_sys() {
  sat_sys_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::gnss::GnssType SatelliteObservation::_internal_sat_sys() const {
  return static_cast< ::apollo::drivers::gnss::GnssType >(sat_sys_);
}
inline ::apollo::drivers::gnss::GnssType SatelliteObservation::sat_sys() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.SatelliteObservation.sat_sys)
  return _internal_sat_sys();
}
inline void SatelliteObservation::_internal_set_sat_sys(::apollo::drivers::gnss::GnssType value) {
  assert(::apollo::drivers::gnss::GnssType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  sat_sys_ = value;
}
inline void SatelliteObservation::set_sat_sys(::apollo::drivers::gnss::GnssType value) {
  _internal_set_sat_sys(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.SatelliteObservation.sat_sys)
}

// optional uint32 band_obs_num = 3;
inline bool SatelliteObservation::_internal_has_band_obs_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SatelliteObservation::has_band_obs_num() const {
  return _internal_has_band_obs_num();
}
inline void SatelliteObservation::clear_band_obs_num() {
  band_obs_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatelliteObservation::_internal_band_obs_num() const {
  return band_obs_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SatelliteObservation::band_obs_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.SatelliteObservation.band_obs_num)
  return _internal_band_obs_num();
}
inline void SatelliteObservation::_internal_set_band_obs_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  band_obs_num_ = value;
}
inline void SatelliteObservation::set_band_obs_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_band_obs_num(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.SatelliteObservation.band_obs_num)
}

// repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
inline int SatelliteObservation::_internal_band_obs_size() const {
  return band_obs_.size();
}
inline int SatelliteObservation::band_obs_size() const {
  return _internal_band_obs_size();
}
inline void SatelliteObservation::clear_band_obs() {
  band_obs_.Clear();
}
inline ::apollo::drivers::gnss::BandObservation* SatelliteObservation::mutable_band_obs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::BandObservation >*
SatelliteObservation::mutable_band_obs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return &band_obs_;
}
inline const ::apollo::drivers::gnss::BandObservation& SatelliteObservation::_internal_band_obs(int index) const {
  return band_obs_.Get(index);
}
inline const ::apollo::drivers::gnss::BandObservation& SatelliteObservation::band_obs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return _internal_band_obs(index);
}
inline ::apollo::drivers::gnss::BandObservation* SatelliteObservation::_internal_add_band_obs() {
  return band_obs_.Add();
}
inline ::apollo::drivers::gnss::BandObservation* SatelliteObservation::add_band_obs() {
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return _internal_add_band_obs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::BandObservation >&
SatelliteObservation::band_obs() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_;
}

// -------------------------------------------------------------------

// EpochObservation

// optional uint32 receiver_id = 1;
inline bool EpochObservation::_internal_has_receiver_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EpochObservation::has_receiver_id() const {
  return _internal_has_receiver_id();
}
inline void EpochObservation::clear_receiver_id() {
  receiver_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EpochObservation::_internal_receiver_id() const {
  return receiver_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EpochObservation::receiver_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.receiver_id)
  return _internal_receiver_id();
}
inline void EpochObservation::_internal_set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_id_ = value;
}
inline void EpochObservation::set_receiver_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_receiver_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.receiver_id)
}

// optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
inline bool EpochObservation::_internal_has_gnss_time_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool EpochObservation::has_gnss_time_type() const {
  return _internal_has_gnss_time_type();
}
inline void EpochObservation::clear_gnss_time_type() {
  gnss_time_type_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::drivers::gnss::GnssTimeType EpochObservation::_internal_gnss_time_type() const {
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
inline ::apollo::drivers::gnss::GnssTimeType EpochObservation::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.gnss_time_type)
  return _internal_gnss_time_type();
}
inline void EpochObservation::_internal_set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  gnss_time_type_ = value;
}
inline void EpochObservation::set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  _internal_set_gnss_time_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.gnss_time_type)
}

// optional uint32 gnss_week = 3;
inline bool EpochObservation::_internal_has_gnss_week() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EpochObservation::has_gnss_week() const {
  return _internal_has_gnss_week();
}
inline void EpochObservation::clear_gnss_week() {
  gnss_week_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EpochObservation::_internal_gnss_week() const {
  return gnss_week_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EpochObservation::gnss_week() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.gnss_week)
  return _internal_gnss_week();
}
inline void EpochObservation::_internal_set_gnss_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gnss_week_ = value;
}
inline void EpochObservation::set_gnss_week(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gnss_week(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.gnss_week)
}

// optional double gnss_second_s = 4;
inline bool EpochObservation::_internal_has_gnss_second_s() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EpochObservation::has_gnss_second_s() const {
  return _internal_has_gnss_second_s();
}
inline void EpochObservation::clear_gnss_second_s() {
  gnss_second_s_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double EpochObservation::_internal_gnss_second_s() const {
  return gnss_second_s_;
}
inline double EpochObservation::gnss_second_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.gnss_second_s)
  return _internal_gnss_second_s();
}
inline void EpochObservation::_internal_set_gnss_second_s(double value) {
  _has_bits_[0] |= 0x00000004u;
  gnss_second_s_ = value;
}
inline void EpochObservation::set_gnss_second_s(double value) {
  _internal_set_gnss_second_s(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.gnss_second_s)
}

// optional double position_x = 5;
inline bool EpochObservation::_internal_has_position_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EpochObservation::has_position_x() const {
  return _internal_has_position_x();
}
inline void EpochObservation::clear_position_x() {
  position_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double EpochObservation::_internal_position_x() const {
  return position_x_;
}
inline double EpochObservation::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.position_x)
  return _internal_position_x();
}
inline void EpochObservation::_internal_set_position_x(double value) {
  _has_bits_[0] |= 0x00000008u;
  position_x_ = value;
}
inline void EpochObservation::set_position_x(double value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.position_x)
}

// optional double position_y = 6;
inline bool EpochObservation::_internal_has_position_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EpochObservation::has_position_y() const {
  return _internal_has_position_y();
}
inline void EpochObservation::clear_position_y() {
  position_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double EpochObservation::_internal_position_y() const {
  return position_y_;
}
inline double EpochObservation::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.position_y)
  return _internal_position_y();
}
inline void EpochObservation::_internal_set_position_y(double value) {
  _has_bits_[0] |= 0x00000010u;
  position_y_ = value;
}
inline void EpochObservation::set_position_y(double value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.position_y)
}

// optional double position_z = 7;
inline bool EpochObservation::_internal_has_position_z() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EpochObservation::has_position_z() const {
  return _internal_has_position_z();
}
inline void EpochObservation::clear_position_z() {
  position_z_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double EpochObservation::_internal_position_z() const {
  return position_z_;
}
inline double EpochObservation::position_z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.position_z)
  return _internal_position_z();
}
inline void EpochObservation::_internal_set_position_z(double value) {
  _has_bits_[0] |= 0x00000020u;
  position_z_ = value;
}
inline void EpochObservation::set_position_z(double value) {
  _internal_set_position_z(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.position_z)
}

// optional uint32 health_flag = 8 [default = 0];
inline bool EpochObservation::_internal_has_health_flag() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EpochObservation::has_health_flag() const {
  return _internal_has_health_flag();
}
inline void EpochObservation::clear_health_flag() {
  health_flag_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EpochObservation::_internal_health_flag() const {
  return health_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EpochObservation::health_flag() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.health_flag)
  return _internal_health_flag();
}
inline void EpochObservation::_internal_set_health_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  health_flag_ = value;
}
inline void EpochObservation::set_health_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_health_flag(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.health_flag)
}

// optional uint32 sat_obs_num = 9;
inline bool EpochObservation::_internal_has_sat_obs_num() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool EpochObservation::has_sat_obs_num() const {
  return _internal_has_sat_obs_num();
}
inline void EpochObservation::clear_sat_obs_num() {
  sat_obs_num_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EpochObservation::_internal_sat_obs_num() const {
  return sat_obs_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EpochObservation::sat_obs_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.sat_obs_num)
  return _internal_sat_obs_num();
}
inline void EpochObservation::_internal_set_sat_obs_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  sat_obs_num_ = value;
}
inline void EpochObservation::set_sat_obs_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sat_obs_num(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.EpochObservation.sat_obs_num)
}

// repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
inline int EpochObservation::_internal_sat_obs_size() const {
  return sat_obs_.size();
}
inline int EpochObservation::sat_obs_size() const {
  return _internal_sat_obs_size();
}
inline void EpochObservation::clear_sat_obs() {
  sat_obs_.Clear();
}
inline ::apollo::drivers::gnss::SatelliteObservation* EpochObservation::mutable_sat_obs(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::SatelliteObservation >*
EpochObservation::mutable_sat_obs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.EpochObservation.sat_obs)
  return &sat_obs_;
}
inline const ::apollo::drivers::gnss::SatelliteObservation& EpochObservation::_internal_sat_obs(int index) const {
  return sat_obs_.Get(index);
}
inline const ::apollo::drivers::gnss::SatelliteObservation& EpochObservation::sat_obs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.EpochObservation.sat_obs)
  return _internal_sat_obs(index);
}
inline ::apollo::drivers::gnss::SatelliteObservation* EpochObservation::_internal_add_sat_obs() {
  return sat_obs_.Add();
}
inline ::apollo::drivers::gnss::SatelliteObservation* EpochObservation::add_sat_obs() {
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.EpochObservation.sat_obs)
  return _internal_add_sat_obs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::drivers::gnss::SatelliteObservation >&
EpochObservation::sat_obs() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_;
}

// -------------------------------------------------------------------

// KepplerOrbit

// optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
inline bool KepplerOrbit::_internal_has_gnss_type() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool KepplerOrbit::has_gnss_type() const {
  return _internal_has_gnss_type();
}
inline void KepplerOrbit::clear_gnss_type() {
  gnss_type_ = 1;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::apollo::drivers::gnss::GnssType KepplerOrbit::_internal_gnss_type() const {
  return static_cast< ::apollo::drivers::gnss::GnssType >(gnss_type_);
}
inline ::apollo::drivers::gnss::GnssType KepplerOrbit::gnss_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.gnss_type)
  return _internal_gnss_type();
}
inline void KepplerOrbit::_internal_set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  assert(::apollo::drivers::gnss::GnssType_IsValid(value));
  _has_bits_[1] |= 0x00000010u;
  gnss_type_ = value;
}
inline void KepplerOrbit::set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  _internal_set_gnss_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.gnss_type)
}

// optional uint32 sat_prn = 2;
inline bool KepplerOrbit::_internal_has_sat_prn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KepplerOrbit::has_sat_prn() const {
  return _internal_has_sat_prn();
}
inline void KepplerOrbit::clear_sat_prn() {
  sat_prn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_sat_prn() const {
  return sat_prn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::sat_prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.sat_prn)
  return _internal_sat_prn();
}
inline void KepplerOrbit::_internal_set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sat_prn_ = value;
}
inline void KepplerOrbit::set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sat_prn(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.sat_prn)
}

// optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
inline bool KepplerOrbit::_internal_has_gnss_time_type() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool KepplerOrbit::has_gnss_time_type() const {
  return _internal_has_gnss_time_type();
}
inline void KepplerOrbit::clear_gnss_time_type() {
  gnss_time_type_ = 1;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::apollo::drivers::gnss::GnssTimeType KepplerOrbit::_internal_gnss_time_type() const {
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
inline ::apollo::drivers::gnss::GnssTimeType KepplerOrbit::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.gnss_time_type)
  return _internal_gnss_time_type();
}
inline void KepplerOrbit::_internal_set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  _has_bits_[1] |= 0x00000020u;
  gnss_time_type_ = value;
}
inline void KepplerOrbit::set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  _internal_set_gnss_time_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.gnss_time_type)
}

// optional uint32 year = 4;
inline bool KepplerOrbit::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KepplerOrbit::has_year() const {
  return _internal_has_year();
}
inline void KepplerOrbit::clear_year() {
  year_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::year() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.year)
  return _internal_year();
}
inline void KepplerOrbit::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  year_ = value;
}
inline void KepplerOrbit::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.year)
}

// optional uint32 month = 5;
inline bool KepplerOrbit::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KepplerOrbit::has_month() const {
  return _internal_has_month();
}
inline void KepplerOrbit::clear_month() {
  month_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::month() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.month)
  return _internal_month();
}
inline void KepplerOrbit::_internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  month_ = value;
}
inline void KepplerOrbit::set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.month)
}

// optional uint32 day = 6;
inline bool KepplerOrbit::_internal_has_day() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool KepplerOrbit::has_day() const {
  return _internal_has_day();
}
inline void KepplerOrbit::clear_day() {
  day_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::day() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.day)
  return _internal_day();
}
inline void KepplerOrbit::_internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  day_ = value;
}
inline void KepplerOrbit::set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.day)
}

// optional uint32 hour = 7;
inline bool KepplerOrbit::_internal_has_hour() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KepplerOrbit::has_hour() const {
  return _internal_has_hour();
}
inline void KepplerOrbit::clear_hour() {
  hour_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::hour() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.hour)
  return _internal_hour();
}
inline void KepplerOrbit::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hour_ = value;
}
inline void KepplerOrbit::set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.hour)
}

// optional uint32 minute = 8;
inline bool KepplerOrbit::_internal_has_minute() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KepplerOrbit::has_minute() const {
  return _internal_has_minute();
}
inline void KepplerOrbit::clear_minute() {
  minute_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::minute() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.minute)
  return _internal_minute();
}
inline void KepplerOrbit::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  minute_ = value;
}
inline void KepplerOrbit::set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.minute)
}

// optional double second_s = 9;
inline bool KepplerOrbit::_internal_has_second_s() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool KepplerOrbit::has_second_s() const {
  return _internal_has_second_s();
}
inline void KepplerOrbit::clear_second_s() {
  second_s_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double KepplerOrbit::_internal_second_s() const {
  return second_s_;
}
inline double KepplerOrbit::second_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.second_s)
  return _internal_second_s();
}
inline void KepplerOrbit::_internal_set_second_s(double value) {
  _has_bits_[0] |= 0x00000040u;
  second_s_ = value;
}
inline void KepplerOrbit::set_second_s(double value) {
  _internal_set_second_s(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.second_s)
}

// optional uint32 week_num = 10;
inline bool KepplerOrbit::_internal_has_week_num() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_week_num() const {
  return _internal_has_week_num();
}
inline void KepplerOrbit::clear_week_num() {
  week_num_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_week_num() const {
  return week_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::week_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.week_num)
  return _internal_week_num();
}
inline void KepplerOrbit::_internal_set_week_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  week_num_ = value;
}
inline void KepplerOrbit::set_week_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week_num(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.week_num)
}

// optional double reserved = 11;
inline bool KepplerOrbit::_internal_has_reserved() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool KepplerOrbit::has_reserved() const {
  return _internal_has_reserved();
}
inline void KepplerOrbit::clear_reserved() {
  reserved_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double KepplerOrbit::_internal_reserved() const {
  return reserved_;
}
inline double KepplerOrbit::reserved() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.reserved)
  return _internal_reserved();
}
inline void KepplerOrbit::_internal_set_reserved(double value) {
  _has_bits_[0] |= 0x00000080u;
  reserved_ = value;
}
inline void KepplerOrbit::set_reserved(double value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.reserved)
}

// optional double af0 = 12;
inline bool KepplerOrbit::_internal_has_af0() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool KepplerOrbit::has_af0() const {
  return _internal_has_af0();
}
inline void KepplerOrbit::clear_af0() {
  af0_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double KepplerOrbit::_internal_af0() const {
  return af0_;
}
inline double KepplerOrbit::af0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.af0)
  return _internal_af0();
}
inline void KepplerOrbit::_internal_set_af0(double value) {
  _has_bits_[0] |= 0x00000100u;
  af0_ = value;
}
inline void KepplerOrbit::set_af0(double value) {
  _internal_set_af0(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.af0)
}

// optional double af1 = 13;
inline bool KepplerOrbit::_internal_has_af1() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool KepplerOrbit::has_af1() const {
  return _internal_has_af1();
}
inline void KepplerOrbit::clear_af1() {
  af1_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double KepplerOrbit::_internal_af1() const {
  return af1_;
}
inline double KepplerOrbit::af1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.af1)
  return _internal_af1();
}
inline void KepplerOrbit::_internal_set_af1(double value) {
  _has_bits_[0] |= 0x00000200u;
  af1_ = value;
}
inline void KepplerOrbit::set_af1(double value) {
  _internal_set_af1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.af1)
}

// optional double af2 = 14;
inline bool KepplerOrbit::_internal_has_af2() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool KepplerOrbit::has_af2() const {
  return _internal_has_af2();
}
inline void KepplerOrbit::clear_af2() {
  af2_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double KepplerOrbit::_internal_af2() const {
  return af2_;
}
inline double KepplerOrbit::af2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.af2)
  return _internal_af2();
}
inline void KepplerOrbit::_internal_set_af2(double value) {
  _has_bits_[0] |= 0x00000400u;
  af2_ = value;
}
inline void KepplerOrbit::set_af2(double value) {
  _internal_set_af2(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.af2)
}

// optional double iode = 15;
inline bool KepplerOrbit::_internal_has_iode() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool KepplerOrbit::has_iode() const {
  return _internal_has_iode();
}
inline void KepplerOrbit::clear_iode() {
  iode_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double KepplerOrbit::_internal_iode() const {
  return iode_;
}
inline double KepplerOrbit::iode() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.iode)
  return _internal_iode();
}
inline void KepplerOrbit::_internal_set_iode(double value) {
  _has_bits_[0] |= 0x00000800u;
  iode_ = value;
}
inline void KepplerOrbit::set_iode(double value) {
  _internal_set_iode(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.iode)
}

// optional double deltan = 16;
inline bool KepplerOrbit::_internal_has_deltan() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_deltan() const {
  return _internal_has_deltan();
}
inline void KepplerOrbit::clear_deltan() {
  deltan_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double KepplerOrbit::_internal_deltan() const {
  return deltan_;
}
inline double KepplerOrbit::deltan() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.deltan)
  return _internal_deltan();
}
inline void KepplerOrbit::_internal_set_deltan(double value) {
  _has_bits_[0] |= 0x00001000u;
  deltan_ = value;
}
inline void KepplerOrbit::set_deltan(double value) {
  _internal_set_deltan(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.deltan)
}

// optional double m0 = 17;
inline bool KepplerOrbit::_internal_has_m0() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_m0() const {
  return _internal_has_m0();
}
inline void KepplerOrbit::clear_m0() {
  m0_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double KepplerOrbit::_internal_m0() const {
  return m0_;
}
inline double KepplerOrbit::m0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.m0)
  return _internal_m0();
}
inline void KepplerOrbit::_internal_set_m0(double value) {
  _has_bits_[0] |= 0x00002000u;
  m0_ = value;
}
inline void KepplerOrbit::set_m0(double value) {
  _internal_set_m0(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.m0)
}

// optional double e = 18;
inline bool KepplerOrbit::_internal_has_e() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_e() const {
  return _internal_has_e();
}
inline void KepplerOrbit::clear_e() {
  e_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double KepplerOrbit::_internal_e() const {
  return e_;
}
inline double KepplerOrbit::e() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.e)
  return _internal_e();
}
inline void KepplerOrbit::_internal_set_e(double value) {
  _has_bits_[0] |= 0x00004000u;
  e_ = value;
}
inline void KepplerOrbit::set_e(double value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.e)
}

// optional double roota = 19;
inline bool KepplerOrbit::_internal_has_roota() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_roota() const {
  return _internal_has_roota();
}
inline void KepplerOrbit::clear_roota() {
  roota_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double KepplerOrbit::_internal_roota() const {
  return roota_;
}
inline double KepplerOrbit::roota() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.roota)
  return _internal_roota();
}
inline void KepplerOrbit::_internal_set_roota(double value) {
  _has_bits_[0] |= 0x00008000u;
  roota_ = value;
}
inline void KepplerOrbit::set_roota(double value) {
  _internal_set_roota(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.roota)
}

// optional double toe = 20;
inline bool KepplerOrbit::_internal_has_toe() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_toe() const {
  return _internal_has_toe();
}
inline void KepplerOrbit::clear_toe() {
  toe_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double KepplerOrbit::_internal_toe() const {
  return toe_;
}
inline double KepplerOrbit::toe() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.toe)
  return _internal_toe();
}
inline void KepplerOrbit::_internal_set_toe(double value) {
  _has_bits_[0] |= 0x00010000u;
  toe_ = value;
}
inline void KepplerOrbit::set_toe(double value) {
  _internal_set_toe(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.toe)
}

// optional double toc = 21;
inline bool KepplerOrbit::_internal_has_toc() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_toc() const {
  return _internal_has_toc();
}
inline void KepplerOrbit::clear_toc() {
  toc_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double KepplerOrbit::_internal_toc() const {
  return toc_;
}
inline double KepplerOrbit::toc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.toc)
  return _internal_toc();
}
inline void KepplerOrbit::_internal_set_toc(double value) {
  _has_bits_[0] |= 0x00020000u;
  toc_ = value;
}
inline void KepplerOrbit::set_toc(double value) {
  _internal_set_toc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.toc)
}

// optional double cic = 22;
inline bool KepplerOrbit::_internal_has_cic() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_cic() const {
  return _internal_has_cic();
}
inline void KepplerOrbit::clear_cic() {
  cic_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double KepplerOrbit::_internal_cic() const {
  return cic_;
}
inline double KepplerOrbit::cic() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.cic)
  return _internal_cic();
}
inline void KepplerOrbit::_internal_set_cic(double value) {
  _has_bits_[0] |= 0x00040000u;
  cic_ = value;
}
inline void KepplerOrbit::set_cic(double value) {
  _internal_set_cic(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.cic)
}

// optional double crc = 23;
inline bool KepplerOrbit::_internal_has_crc() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_crc() const {
  return _internal_has_crc();
}
inline void KepplerOrbit::clear_crc() {
  crc_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double KepplerOrbit::_internal_crc() const {
  return crc_;
}
inline double KepplerOrbit::crc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.crc)
  return _internal_crc();
}
inline void KepplerOrbit::_internal_set_crc(double value) {
  _has_bits_[0] |= 0x00200000u;
  crc_ = value;
}
inline void KepplerOrbit::set_crc(double value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.crc)
}

// optional double cis = 24;
inline bool KepplerOrbit::_internal_has_cis() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_cis() const {
  return _internal_has_cis();
}
inline void KepplerOrbit::clear_cis() {
  cis_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double KepplerOrbit::_internal_cis() const {
  return cis_;
}
inline double KepplerOrbit::cis() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.cis)
  return _internal_cis();
}
inline void KepplerOrbit::_internal_set_cis(double value) {
  _has_bits_[0] |= 0x00400000u;
  cis_ = value;
}
inline void KepplerOrbit::set_cis(double value) {
  _internal_set_cis(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.cis)
}

// optional double crs = 25;
inline bool KepplerOrbit::_internal_has_crs() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_crs() const {
  return _internal_has_crs();
}
inline void KepplerOrbit::clear_crs() {
  crs_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double KepplerOrbit::_internal_crs() const {
  return crs_;
}
inline double KepplerOrbit::crs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.crs)
  return _internal_crs();
}
inline void KepplerOrbit::_internal_set_crs(double value) {
  _has_bits_[0] |= 0x00800000u;
  crs_ = value;
}
inline void KepplerOrbit::set_crs(double value) {
  _internal_set_crs(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.crs)
}

// optional double cuc = 26;
inline bool KepplerOrbit::_internal_has_cuc() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_cuc() const {
  return _internal_has_cuc();
}
inline void KepplerOrbit::clear_cuc() {
  cuc_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double KepplerOrbit::_internal_cuc() const {
  return cuc_;
}
inline double KepplerOrbit::cuc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.cuc)
  return _internal_cuc();
}
inline void KepplerOrbit::_internal_set_cuc(double value) {
  _has_bits_[0] |= 0x01000000u;
  cuc_ = value;
}
inline void KepplerOrbit::set_cuc(double value) {
  _internal_set_cuc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.cuc)
}

// optional double cus = 27;
inline bool KepplerOrbit::_internal_has_cus() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_cus() const {
  return _internal_has_cus();
}
inline void KepplerOrbit::clear_cus() {
  cus_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double KepplerOrbit::_internal_cus() const {
  return cus_;
}
inline double KepplerOrbit::cus() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.cus)
  return _internal_cus();
}
inline void KepplerOrbit::_internal_set_cus(double value) {
  _has_bits_[0] |= 0x02000000u;
  cus_ = value;
}
inline void KepplerOrbit::set_cus(double value) {
  _internal_set_cus(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.cus)
}

// optional double omega0 = 28;
inline bool KepplerOrbit::_internal_has_omega0() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_omega0() const {
  return _internal_has_omega0();
}
inline void KepplerOrbit::clear_omega0() {
  omega0_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline double KepplerOrbit::_internal_omega0() const {
  return omega0_;
}
inline double KepplerOrbit::omega0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.omega0)
  return _internal_omega0();
}
inline void KepplerOrbit::_internal_set_omega0(double value) {
  _has_bits_[0] |= 0x04000000u;
  omega0_ = value;
}
inline void KepplerOrbit::set_omega0(double value) {
  _internal_set_omega0(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.omega0)
}

// optional double omega = 29;
inline bool KepplerOrbit::_internal_has_omega() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_omega() const {
  return _internal_has_omega();
}
inline void KepplerOrbit::clear_omega() {
  omega_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline double KepplerOrbit::_internal_omega() const {
  return omega_;
}
inline double KepplerOrbit::omega() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.omega)
  return _internal_omega();
}
inline void KepplerOrbit::_internal_set_omega(double value) {
  _has_bits_[0] |= 0x08000000u;
  omega_ = value;
}
inline void KepplerOrbit::set_omega(double value) {
  _internal_set_omega(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.omega)
}

// optional double i0 = 30;
inline bool KepplerOrbit::_internal_has_i0() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_i0() const {
  return _internal_has_i0();
}
inline void KepplerOrbit::clear_i0() {
  i0_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline double KepplerOrbit::_internal_i0() const {
  return i0_;
}
inline double KepplerOrbit::i0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.i0)
  return _internal_i0();
}
inline void KepplerOrbit::_internal_set_i0(double value) {
  _has_bits_[0] |= 0x10000000u;
  i0_ = value;
}
inline void KepplerOrbit::set_i0(double value) {
  _internal_set_i0(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.i0)
}

// optional double omegadot = 31;
inline bool KepplerOrbit::_internal_has_omegadot() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_omegadot() const {
  return _internal_has_omegadot();
}
inline void KepplerOrbit::clear_omegadot() {
  omegadot_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double KepplerOrbit::_internal_omegadot() const {
  return omegadot_;
}
inline double KepplerOrbit::omegadot() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.omegadot)
  return _internal_omegadot();
}
inline void KepplerOrbit::_internal_set_omegadot(double value) {
  _has_bits_[0] |= 0x20000000u;
  omegadot_ = value;
}
inline void KepplerOrbit::set_omegadot(double value) {
  _internal_set_omegadot(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.omegadot)
}

// optional double idot = 32;
inline bool KepplerOrbit::_internal_has_idot() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_idot() const {
  return _internal_has_idot();
}
inline void KepplerOrbit::clear_idot() {
  idot_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline double KepplerOrbit::_internal_idot() const {
  return idot_;
}
inline double KepplerOrbit::idot() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.idot)
  return _internal_idot();
}
inline void KepplerOrbit::_internal_set_idot(double value) {
  _has_bits_[0] |= 0x40000000u;
  idot_ = value;
}
inline void KepplerOrbit::set_idot(double value) {
  _internal_set_idot(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.idot)
}

// optional double codesonL2channel = 33;
inline bool KepplerOrbit::_internal_has_codesonl2channel() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_codesonl2channel() const {
  return _internal_has_codesonl2channel();
}
inline void KepplerOrbit::clear_codesonl2channel() {
  codesonl2channel_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline double KepplerOrbit::_internal_codesonl2channel() const {
  return codesonl2channel_;
}
inline double KepplerOrbit::codesonl2channel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.codesonL2channel)
  return _internal_codesonl2channel();
}
inline void KepplerOrbit::_internal_set_codesonl2channel(double value) {
  _has_bits_[0] |= 0x80000000u;
  codesonl2channel_ = value;
}
inline void KepplerOrbit::set_codesonl2channel(double value) {
  _internal_set_codesonl2channel(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.codesonL2channel)
}

// optional uint32 L2Pdataflag = 34;
inline bool KepplerOrbit::_internal_has_l2pdataflag() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool KepplerOrbit::has_l2pdataflag() const {
  return _internal_has_l2pdataflag();
}
inline void KepplerOrbit::clear_l2pdataflag() {
  l2pdataflag_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_l2pdataflag() const {
  return l2pdataflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::l2pdataflag() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.L2Pdataflag)
  return _internal_l2pdataflag();
}
inline void KepplerOrbit::_internal_set_l2pdataflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  l2pdataflag_ = value;
}
inline void KepplerOrbit::set_l2pdataflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_l2pdataflag(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.L2Pdataflag)
}

// optional uint32 accuracy = 35;
inline bool KepplerOrbit::_internal_has_accuracy() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool KepplerOrbit::has_accuracy() const {
  return _internal_has_accuracy();
}
inline void KepplerOrbit::clear_accuracy() {
  accuracy_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_accuracy() const {
  return accuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::accuracy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.accuracy)
  return _internal_accuracy();
}
inline void KepplerOrbit::_internal_set_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  accuracy_ = value;
}
inline void KepplerOrbit::set_accuracy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.accuracy)
}

// optional uint32 health = 36;
inline bool KepplerOrbit::_internal_has_health() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool KepplerOrbit::has_health() const {
  return _internal_has_health();
}
inline void KepplerOrbit::clear_health() {
  health_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::_internal_health() const {
  return health_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KepplerOrbit::health() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.health)
  return _internal_health();
}
inline void KepplerOrbit::_internal_set_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  health_ = value;
}
inline void KepplerOrbit::set_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.health)
}

// optional double tgd = 37;
inline bool KepplerOrbit::_internal_has_tgd() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool KepplerOrbit::has_tgd() const {
  return _internal_has_tgd();
}
inline void KepplerOrbit::clear_tgd() {
  tgd_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline double KepplerOrbit::_internal_tgd() const {
  return tgd_;
}
inline double KepplerOrbit::tgd() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.tgd)
  return _internal_tgd();
}
inline void KepplerOrbit::_internal_set_tgd(double value) {
  _has_bits_[1] |= 0x00000004u;
  tgd_ = value;
}
inline void KepplerOrbit::set_tgd(double value) {
  _internal_set_tgd(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.tgd)
}

// optional double iodc = 38;
inline bool KepplerOrbit::_internal_has_iodc() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool KepplerOrbit::has_iodc() const {
  return _internal_has_iodc();
}
inline void KepplerOrbit::clear_iodc() {
  iodc_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline double KepplerOrbit::_internal_iodc() const {
  return iodc_;
}
inline double KepplerOrbit::iodc() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.KepplerOrbit.iodc)
  return _internal_iodc();
}
inline void KepplerOrbit::_internal_set_iodc(double value) {
  _has_bits_[1] |= 0x00000008u;
  iodc_ = value;
}
inline void KepplerOrbit::set_iodc(double value) {
  _internal_set_iodc(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.KepplerOrbit.iodc)
}

// -------------------------------------------------------------------

// GlonassOrbit

// optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
inline bool GlonassOrbit::_internal_has_gnss_type() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_gnss_type() const {
  return _internal_has_gnss_type();
}
inline void GlonassOrbit::clear_gnss_type() {
  gnss_type_ = 3;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::apollo::drivers::gnss::GnssType GlonassOrbit::_internal_gnss_type() const {
  return static_cast< ::apollo::drivers::gnss::GnssType >(gnss_type_);
}
inline ::apollo::drivers::gnss::GnssType GlonassOrbit::gnss_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.gnss_type)
  return _internal_gnss_type();
}
inline void GlonassOrbit::_internal_set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  assert(::apollo::drivers::gnss::GnssType_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  gnss_type_ = value;
}
inline void GlonassOrbit::set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  _internal_set_gnss_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.gnss_type)
}

// optional uint32 slot_prn = 2;
inline bool GlonassOrbit::_internal_has_slot_prn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GlonassOrbit::has_slot_prn() const {
  return _internal_has_slot_prn();
}
inline void GlonassOrbit::clear_slot_prn() {
  slot_prn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_slot_prn() const {
  return slot_prn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::slot_prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.slot_prn)
  return _internal_slot_prn();
}
inline void GlonassOrbit::_internal_set_slot_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_prn_ = value;
}
inline void GlonassOrbit::set_slot_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_prn(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.slot_prn)
}

// optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
inline bool GlonassOrbit::_internal_has_gnss_time_type() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_gnss_time_type() const {
  return _internal_has_gnss_time_type();
}
inline void GlonassOrbit::clear_gnss_time_type() {
  gnss_time_type_ = 3;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::apollo::drivers::gnss::GnssTimeType GlonassOrbit::_internal_gnss_time_type() const {
  return static_cast< ::apollo::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
inline ::apollo::drivers::gnss::GnssTimeType GlonassOrbit::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.gnss_time_type)
  return _internal_gnss_time_type();
}
inline void GlonassOrbit::_internal_set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  assert(::apollo::drivers::gnss::GnssTimeType_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  gnss_time_type_ = value;
}
inline void GlonassOrbit::set_gnss_time_type(::apollo::drivers::gnss::GnssTimeType value) {
  _internal_set_gnss_time_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.gnss_time_type)
}

// optional double toe = 4;
inline bool GlonassOrbit::_internal_has_toe() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GlonassOrbit::has_toe() const {
  return _internal_has_toe();
}
inline void GlonassOrbit::clear_toe() {
  toe_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GlonassOrbit::_internal_toe() const {
  return toe_;
}
inline double GlonassOrbit::toe() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.toe)
  return _internal_toe();
}
inline void GlonassOrbit::_internal_set_toe(double value) {
  _has_bits_[0] |= 0x00000004u;
  toe_ = value;
}
inline void GlonassOrbit::set_toe(double value) {
  _internal_set_toe(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.toe)
}

// optional uint32 year = 5;
inline bool GlonassOrbit::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GlonassOrbit::has_year() const {
  return _internal_has_year();
}
inline void GlonassOrbit::clear_year() {
  year_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::year() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.year)
  return _internal_year();
}
inline void GlonassOrbit::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  year_ = value;
}
inline void GlonassOrbit::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.year)
}

// optional uint32 month = 6;
inline bool GlonassOrbit::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GlonassOrbit::has_month() const {
  return _internal_has_month();
}
inline void GlonassOrbit::clear_month() {
  month_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::month() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.month)
  return _internal_month();
}
inline void GlonassOrbit::_internal_set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  month_ = value;
}
inline void GlonassOrbit::set_month(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.month)
}

// optional uint32 day = 7;
inline bool GlonassOrbit::_internal_has_day() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GlonassOrbit::has_day() const {
  return _internal_has_day();
}
inline void GlonassOrbit::clear_day() {
  day_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::day() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.day)
  return _internal_day();
}
inline void GlonassOrbit::_internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  day_ = value;
}
inline void GlonassOrbit::set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.day)
}

// optional uint32 hour = 8;
inline bool GlonassOrbit::_internal_has_hour() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GlonassOrbit::has_hour() const {
  return _internal_has_hour();
}
inline void GlonassOrbit::clear_hour() {
  hour_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::hour() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.hour)
  return _internal_hour();
}
inline void GlonassOrbit::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  hour_ = value;
}
inline void GlonassOrbit::set_hour(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.hour)
}

// optional uint32 minute = 9;
inline bool GlonassOrbit::_internal_has_minute() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GlonassOrbit::has_minute() const {
  return _internal_has_minute();
}
inline void GlonassOrbit::clear_minute() {
  minute_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::minute() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.minute)
  return _internal_minute();
}
inline void GlonassOrbit::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  minute_ = value;
}
inline void GlonassOrbit::set_minute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.minute)
}

// optional double second_s = 10;
inline bool GlonassOrbit::_internal_has_second_s() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GlonassOrbit::has_second_s() const {
  return _internal_has_second_s();
}
inline void GlonassOrbit::clear_second_s() {
  second_s_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double GlonassOrbit::_internal_second_s() const {
  return second_s_;
}
inline double GlonassOrbit::second_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.second_s)
  return _internal_second_s();
}
inline void GlonassOrbit::_internal_set_second_s(double value) {
  _has_bits_[0] |= 0x00000080u;
  second_s_ = value;
}
inline void GlonassOrbit::set_second_s(double value) {
  _internal_set_second_s(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.second_s)
}

// optional int32 frequency_no = 11;
inline bool GlonassOrbit::_internal_has_frequency_no() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GlonassOrbit::has_frequency_no() const {
  return _internal_has_frequency_no();
}
inline void GlonassOrbit::clear_frequency_no() {
  frequency_no_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlonassOrbit::_internal_frequency_no() const {
  return frequency_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GlonassOrbit::frequency_no() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.frequency_no)
  return _internal_frequency_no();
}
inline void GlonassOrbit::_internal_set_frequency_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  frequency_no_ = value;
}
inline void GlonassOrbit::set_frequency_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frequency_no(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.frequency_no)
}

// optional uint32 week_num = 12;
inline bool GlonassOrbit::_internal_has_week_num() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GlonassOrbit::has_week_num() const {
  return _internal_has_week_num();
}
inline void GlonassOrbit::clear_week_num() {
  week_num_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_week_num() const {
  return week_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::week_num() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.week_num)
  return _internal_week_num();
}
inline void GlonassOrbit::_internal_set_week_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  week_num_ = value;
}
inline void GlonassOrbit::set_week_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week_num(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.week_num)
}

// optional double week_second_s = 13;
inline bool GlonassOrbit::_internal_has_week_second_s() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GlonassOrbit::has_week_second_s() const {
  return _internal_has_week_second_s();
}
inline void GlonassOrbit::clear_week_second_s() {
  week_second_s_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double GlonassOrbit::_internal_week_second_s() const {
  return week_second_s_;
}
inline double GlonassOrbit::week_second_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.week_second_s)
  return _internal_week_second_s();
}
inline void GlonassOrbit::_internal_set_week_second_s(double value) {
  _has_bits_[0] |= 0x00000400u;
  week_second_s_ = value;
}
inline void GlonassOrbit::set_week_second_s(double value) {
  _internal_set_week_second_s(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.week_second_s)
}

// optional double tk = 14;
inline bool GlonassOrbit::_internal_has_tk() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GlonassOrbit::has_tk() const {
  return _internal_has_tk();
}
inline void GlonassOrbit::clear_tk() {
  tk_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double GlonassOrbit::_internal_tk() const {
  return tk_;
}
inline double GlonassOrbit::tk() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.tk)
  return _internal_tk();
}
inline void GlonassOrbit::_internal_set_tk(double value) {
  _has_bits_[0] |= 0x00000800u;
  tk_ = value;
}
inline void GlonassOrbit::set_tk(double value) {
  _internal_set_tk(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.tk)
}

// optional double clock_offset = 15;
inline bool GlonassOrbit::_internal_has_clock_offset() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_clock_offset() const {
  return _internal_has_clock_offset();
}
inline void GlonassOrbit::clear_clock_offset() {
  clock_offset_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double GlonassOrbit::_internal_clock_offset() const {
  return clock_offset_;
}
inline double GlonassOrbit::clock_offset() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.clock_offset)
  return _internal_clock_offset();
}
inline void GlonassOrbit::_internal_set_clock_offset(double value) {
  _has_bits_[0] |= 0x00001000u;
  clock_offset_ = value;
}
inline void GlonassOrbit::set_clock_offset(double value) {
  _internal_set_clock_offset(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.clock_offset)
}

// optional double clock_drift = 16;
inline bool GlonassOrbit::_internal_has_clock_drift() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_clock_drift() const {
  return _internal_has_clock_drift();
}
inline void GlonassOrbit::clear_clock_drift() {
  clock_drift_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double GlonassOrbit::_internal_clock_drift() const {
  return clock_drift_;
}
inline double GlonassOrbit::clock_drift() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.clock_drift)
  return _internal_clock_drift();
}
inline void GlonassOrbit::_internal_set_clock_drift(double value) {
  _has_bits_[0] |= 0x00002000u;
  clock_drift_ = value;
}
inline void GlonassOrbit::set_clock_drift(double value) {
  _internal_set_clock_drift(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.clock_drift)
}

// optional uint32 health = 17;
inline bool GlonassOrbit::_internal_has_health() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_health() const {
  return _internal_has_health();
}
inline void GlonassOrbit::clear_health() {
  health_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_health() const {
  return health_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::health() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.health)
  return _internal_health();
}
inline void GlonassOrbit::_internal_set_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  health_ = value;
}
inline void GlonassOrbit::set_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.health)
}

// optional double position_x = 18;
inline bool GlonassOrbit::_internal_has_position_x() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_position_x() const {
  return _internal_has_position_x();
}
inline void GlonassOrbit::clear_position_x() {
  position_x_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double GlonassOrbit::_internal_position_x() const {
  return position_x_;
}
inline double GlonassOrbit::position_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.position_x)
  return _internal_position_x();
}
inline void GlonassOrbit::_internal_set_position_x(double value) {
  _has_bits_[0] |= 0x00004000u;
  position_x_ = value;
}
inline void GlonassOrbit::set_position_x(double value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.position_x)
}

// optional double position_y = 19;
inline bool GlonassOrbit::_internal_has_position_y() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_position_y() const {
  return _internal_has_position_y();
}
inline void GlonassOrbit::clear_position_y() {
  position_y_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double GlonassOrbit::_internal_position_y() const {
  return position_y_;
}
inline double GlonassOrbit::position_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.position_y)
  return _internal_position_y();
}
inline void GlonassOrbit::_internal_set_position_y(double value) {
  _has_bits_[0] |= 0x00008000u;
  position_y_ = value;
}
inline void GlonassOrbit::set_position_y(double value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.position_y)
}

// optional double position_z = 20;
inline bool GlonassOrbit::_internal_has_position_z() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_position_z() const {
  return _internal_has_position_z();
}
inline void GlonassOrbit::clear_position_z() {
  position_z_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double GlonassOrbit::_internal_position_z() const {
  return position_z_;
}
inline double GlonassOrbit::position_z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.position_z)
  return _internal_position_z();
}
inline void GlonassOrbit::_internal_set_position_z(double value) {
  _has_bits_[0] |= 0x00010000u;
  position_z_ = value;
}
inline void GlonassOrbit::set_position_z(double value) {
  _internal_set_position_z(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.position_z)
}

// optional double velocity_x = 21;
inline bool GlonassOrbit::_internal_has_velocity_x() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_velocity_x() const {
  return _internal_has_velocity_x();
}
inline void GlonassOrbit::clear_velocity_x() {
  velocity_x_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double GlonassOrbit::_internal_velocity_x() const {
  return velocity_x_;
}
inline double GlonassOrbit::velocity_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.velocity_x)
  return _internal_velocity_x();
}
inline void GlonassOrbit::_internal_set_velocity_x(double value) {
  _has_bits_[0] |= 0x00020000u;
  velocity_x_ = value;
}
inline void GlonassOrbit::set_velocity_x(double value) {
  _internal_set_velocity_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.velocity_x)
}

// optional double velocity_y = 22;
inline bool GlonassOrbit::_internal_has_velocity_y() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_velocity_y() const {
  return _internal_has_velocity_y();
}
inline void GlonassOrbit::clear_velocity_y() {
  velocity_y_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double GlonassOrbit::_internal_velocity_y() const {
  return velocity_y_;
}
inline double GlonassOrbit::velocity_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.velocity_y)
  return _internal_velocity_y();
}
inline void GlonassOrbit::_internal_set_velocity_y(double value) {
  _has_bits_[0] |= 0x00040000u;
  velocity_y_ = value;
}
inline void GlonassOrbit::set_velocity_y(double value) {
  _internal_set_velocity_y(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.velocity_y)
}

// optional double velocity_z = 23;
inline bool GlonassOrbit::_internal_has_velocity_z() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_velocity_z() const {
  return _internal_has_velocity_z();
}
inline void GlonassOrbit::clear_velocity_z() {
  velocity_z_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double GlonassOrbit::_internal_velocity_z() const {
  return velocity_z_;
}
inline double GlonassOrbit::velocity_z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.velocity_z)
  return _internal_velocity_z();
}
inline void GlonassOrbit::_internal_set_velocity_z(double value) {
  _has_bits_[0] |= 0x00200000u;
  velocity_z_ = value;
}
inline void GlonassOrbit::set_velocity_z(double value) {
  _internal_set_velocity_z(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.velocity_z)
}

// optional double accelerate_x = 24;
inline bool GlonassOrbit::_internal_has_accelerate_x() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_accelerate_x() const {
  return _internal_has_accelerate_x();
}
inline void GlonassOrbit::clear_accelerate_x() {
  accelerate_x_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double GlonassOrbit::_internal_accelerate_x() const {
  return accelerate_x_;
}
inline double GlonassOrbit::accelerate_x() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.accelerate_x)
  return _internal_accelerate_x();
}
inline void GlonassOrbit::_internal_set_accelerate_x(double value) {
  _has_bits_[0] |= 0x00400000u;
  accelerate_x_ = value;
}
inline void GlonassOrbit::set_accelerate_x(double value) {
  _internal_set_accelerate_x(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.accelerate_x)
}

// optional double accelerate_y = 25;
inline bool GlonassOrbit::_internal_has_accelerate_y() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_accelerate_y() const {
  return _internal_has_accelerate_y();
}
inline void GlonassOrbit::clear_accelerate_y() {
  accelerate_y_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double GlonassOrbit::_internal_accelerate_y() const {
  return accelerate_y_;
}
inline double GlonassOrbit::accelerate_y() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.accelerate_y)
  return _internal_accelerate_y();
}
inline void GlonassOrbit::_internal_set_accelerate_y(double value) {
  _has_bits_[0] |= 0x00800000u;
  accelerate_y_ = value;
}
inline void GlonassOrbit::set_accelerate_y(double value) {
  _internal_set_accelerate_y(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.accelerate_y)
}

// optional double accelerate_z = 26;
inline bool GlonassOrbit::_internal_has_accelerate_z() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_accelerate_z() const {
  return _internal_has_accelerate_z();
}
inline void GlonassOrbit::clear_accelerate_z() {
  accelerate_z_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double GlonassOrbit::_internal_accelerate_z() const {
  return accelerate_z_;
}
inline double GlonassOrbit::accelerate_z() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.accelerate_z)
  return _internal_accelerate_z();
}
inline void GlonassOrbit::_internal_set_accelerate_z(double value) {
  _has_bits_[0] |= 0x01000000u;
  accelerate_z_ = value;
}
inline void GlonassOrbit::set_accelerate_z(double value) {
  _internal_set_accelerate_z(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.accelerate_z)
}

// optional double infor_age = 27;
inline bool GlonassOrbit::_internal_has_infor_age() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_infor_age() const {
  return _internal_has_infor_age();
}
inline void GlonassOrbit::clear_infor_age() {
  infor_age_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline double GlonassOrbit::_internal_infor_age() const {
  return infor_age_;
}
inline double GlonassOrbit::infor_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.infor_age)
  return _internal_infor_age();
}
inline void GlonassOrbit::_internal_set_infor_age(double value) {
  _has_bits_[0] |= 0x02000000u;
  infor_age_ = value;
}
inline void GlonassOrbit::set_infor_age(double value) {
  _internal_set_infor_age(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.infor_age)
}

// optional uint32 sat_prn = 28;
inline bool GlonassOrbit::_internal_has_sat_prn() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool GlonassOrbit::has_sat_prn() const {
  return _internal_has_sat_prn();
}
inline void GlonassOrbit::clear_sat_prn() {
  sat_prn_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::_internal_sat_prn() const {
  return sat_prn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlonassOrbit::sat_prn() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GlonassOrbit.sat_prn)
  return _internal_sat_prn();
}
inline void GlonassOrbit::_internal_set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  sat_prn_ = value;
}
inline void GlonassOrbit::set_sat_prn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sat_prn(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GlonassOrbit.sat_prn)
}

// -------------------------------------------------------------------

// GnssEphemeris

// optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
inline bool GnssEphemeris::_internal_has_gnss_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GnssEphemeris::has_gnss_type() const {
  return _internal_has_gnss_type();
}
inline void GnssEphemeris::clear_gnss_type() {
  gnss_type_ = 3;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::gnss::GnssType GnssEphemeris::_internal_gnss_type() const {
  return static_cast< ::apollo::drivers::gnss::GnssType >(gnss_type_);
}
inline ::apollo::drivers::gnss::GnssType GnssEphemeris::gnss_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssEphemeris.gnss_type)
  return _internal_gnss_type();
}
inline void GnssEphemeris::_internal_set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  assert(::apollo::drivers::gnss::GnssType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  gnss_type_ = value;
}
inline void GnssEphemeris::set_gnss_type(::apollo::drivers::gnss::GnssType value) {
  _internal_set_gnss_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssEphemeris.gnss_type)
}

// optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
inline bool GnssEphemeris::_internal_has_keppler_orbit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || keppler_orbit_ != nullptr);
  return value;
}
inline bool GnssEphemeris::has_keppler_orbit() const {
  return _internal_has_keppler_orbit();
}
inline void GnssEphemeris::clear_keppler_orbit() {
  if (keppler_orbit_ != nullptr) keppler_orbit_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::drivers::gnss::KepplerOrbit& GnssEphemeris::_internal_keppler_orbit() const {
  const ::apollo::drivers::gnss::KepplerOrbit* p = keppler_orbit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::gnss::KepplerOrbit*>(
      &::apollo::drivers::gnss::_KepplerOrbit_default_instance_);
}
inline const ::apollo::drivers::gnss::KepplerOrbit& GnssEphemeris::keppler_orbit() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssEphemeris.keppler_orbit)
  return _internal_keppler_orbit();
}
inline ::apollo::drivers::gnss::KepplerOrbit* GnssEphemeris::release_keppler_orbit() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssEphemeris.keppler_orbit)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::drivers::gnss::KepplerOrbit* temp = keppler_orbit_;
  keppler_orbit_ = nullptr;
  return temp;
}
inline ::apollo::drivers::gnss::KepplerOrbit* GnssEphemeris::_internal_mutable_keppler_orbit() {
  _has_bits_[0] |= 0x00000001u;
  if (keppler_orbit_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::gnss::KepplerOrbit>(GetArenaNoVirtual());
    keppler_orbit_ = p;
  }
  return keppler_orbit_;
}
inline ::apollo::drivers::gnss::KepplerOrbit* GnssEphemeris::mutable_keppler_orbit() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssEphemeris.keppler_orbit)
  return _internal_mutable_keppler_orbit();
}
inline void GnssEphemeris::set_allocated_keppler_orbit(::apollo::drivers::gnss::KepplerOrbit* keppler_orbit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keppler_orbit_;
  }
  if (keppler_orbit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keppler_orbit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keppler_orbit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keppler_orbit_ = keppler_orbit;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssEphemeris.keppler_orbit)
}

// optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
inline bool GnssEphemeris::_internal_has_glonass_orbit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || glonass_orbit_ != nullptr);
  return value;
}
inline bool GnssEphemeris::has_glonass_orbit() const {
  return _internal_has_glonass_orbit();
}
inline void GnssEphemeris::clear_glonass_orbit() {
  if (glonass_orbit_ != nullptr) glonass_orbit_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::drivers::gnss::GlonassOrbit& GnssEphemeris::_internal_glonass_orbit() const {
  const ::apollo::drivers::gnss::GlonassOrbit* p = glonass_orbit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::drivers::gnss::GlonassOrbit*>(
      &::apollo::drivers::gnss::_GlonassOrbit_default_instance_);
}
inline const ::apollo::drivers::gnss::GlonassOrbit& GnssEphemeris::glonass_orbit() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssEphemeris.glonass_orbit)
  return _internal_glonass_orbit();
}
inline ::apollo::drivers::gnss::GlonassOrbit* GnssEphemeris::release_glonass_orbit() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssEphemeris.glonass_orbit)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::drivers::gnss::GlonassOrbit* temp = glonass_orbit_;
  glonass_orbit_ = nullptr;
  return temp;
}
inline ::apollo::drivers::gnss::GlonassOrbit* GnssEphemeris::_internal_mutable_glonass_orbit() {
  _has_bits_[0] |= 0x00000002u;
  if (glonass_orbit_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::drivers::gnss::GlonassOrbit>(GetArenaNoVirtual());
    glonass_orbit_ = p;
  }
  return glonass_orbit_;
}
inline ::apollo::drivers::gnss::GlonassOrbit* GnssEphemeris::mutable_glonass_orbit() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssEphemeris.glonass_orbit)
  return _internal_mutable_glonass_orbit();
}
inline void GnssEphemeris::set_allocated_glonass_orbit(::apollo::drivers::gnss::GlonassOrbit* glonass_orbit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete glonass_orbit_;
  }
  if (glonass_orbit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      glonass_orbit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, glonass_orbit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  glonass_orbit_ = glonass_orbit;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssEphemeris.glonass_orbit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::gnss::GnssBandID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::GnssBandID>() {
  return ::apollo::drivers::gnss::GnssBandID_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::GnssTimeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::GnssTimeType>() {
  return ::apollo::drivers::gnss::GnssTimeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::GnssType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::GnssType>() {
  return ::apollo::drivers::gnss::GnssType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::PseudoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::PseudoType>() {
  return ::apollo::drivers::gnss::PseudoType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto
