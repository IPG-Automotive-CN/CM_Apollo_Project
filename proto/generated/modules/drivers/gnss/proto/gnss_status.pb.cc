// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_status.proto

#include "modules/drivers/gnss/proto/gnss_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class StreamStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamStatus> _instance;
} _StreamStatus_default_instance_;
class InsStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsStatus> _instance;
} _InsStatus_default_instance_;
class GnssStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssStatus> _instance;
} _GnssStatus_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_GnssStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_GnssStatus_default_instance_;
    new (ptr) ::apollo::drivers::gnss::GnssStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::GnssStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GnssStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_InsStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_InsStatus_default_instance_;
    new (ptr) ::apollo::drivers::gnss::InsStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::InsStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_StreamStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_StreamStatus_default_instance_;
    new (ptr) ::apollo::drivers::gnss::StreamStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::StreamStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::StreamStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::StreamStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::StreamStatus, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::StreamStatus, ins_stream_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::StreamStatus, rtk_stream_in_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::StreamStatus, rtk_stream_out_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStatus, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::InsStatus, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssStatus, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssStatus, solution_completed_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssStatus, solution_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssStatus, position_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssStatus, num_sats_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::drivers::gnss::StreamStatus)},
  { 13, 20, sizeof(::apollo::drivers::gnss::InsStatus)},
  { 22, 32, sizeof(::apollo::drivers::gnss::GnssStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::_StreamStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::_InsStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::_GnssStatus_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/drivers/gnss/proto/gnss_status"
  ".proto\022\023apollo.drivers.gnss\032!modules/com"
  "mon/proto/header.proto\"\322\002\n\014StreamStatus\022"
  "%\n\006header\030\001 \001(\0132\025.apollo.common.Header\022M"
  "\n\017ins_stream_type\030\002 \001(\0162&.apollo.drivers"
  ".gnss.StreamStatus.Type:\014DISCONNECTED\022P\n"
  "\022rtk_stream_in_type\030\003 \001(\0162&.apollo.drive"
  "rs.gnss.StreamStatus.Type:\014DISCONNECTED\022"
  "Q\n\023rtk_stream_out_type\030\004 \001(\0162&.apollo.dr"
  "ivers.gnss.StreamStatus.Type:\014DISCONNECT"
  "ED\"\'\n\004Type\022\020\n\014DISCONNECTED\020\000\022\r\n\tCONNECTE"
  "D\020\001\"\235\001\n\tInsStatus\022%\n\006header\030\001 \001(\0132\025.apol"
  "lo.common.Header\022:\n\004type\030\002 \001(\0162#.apollo."
  "drivers.gnss.InsStatus.Type:\007INVALID\"-\n\004"
  "Type\022\013\n\007INVALID\020\000\022\016\n\nCONVERGING\020\001\022\010\n\004GOO"
  "D\020\002\"\241\001\n\nGnssStatus\022%\n\006header\030\001 \001(\0132\025.apo"
  "llo.common.Header\022!\n\022solution_completed\030"
  "\002 \001(\010:\005false\022\032\n\017solution_status\030\003 \001(\r:\0010"
  "\022\030\n\rposition_type\030\004 \001(\r:\0010\022\023\n\010num_sats\030\005"
  " \001(\005:\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_sccs[3] = {
  &scc_info_GnssStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base,
  &scc_info_InsStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base,
  &scc_info_StreamStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto = {
  &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto, "modules/drivers/gnss/proto/gnss_status.proto", 767,
  &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_once, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_sccs, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto, 3, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto, file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto), true);
namespace apollo {
namespace drivers {
namespace gnss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamStatus_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[0];
}
bool StreamStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamStatus_Type StreamStatus::DISCONNECTED;
constexpr StreamStatus_Type StreamStatus::CONNECTED;
constexpr StreamStatus_Type StreamStatus::Type_MIN;
constexpr StreamStatus_Type StreamStatus::Type_MAX;
constexpr int StreamStatus::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsStatus_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto[1];
}
bool InsStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InsStatus_Type InsStatus::INVALID;
constexpr InsStatus_Type InsStatus::CONVERGING;
constexpr InsStatus_Type InsStatus::GOOD;
constexpr InsStatus_Type InsStatus::Type_MIN;
constexpr InsStatus_Type InsStatus::Type_MAX;
constexpr int InsStatus::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StreamStatus::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_StreamStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class StreamStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamStatus>()._has_bits_);
  static const ::apollo::common::Header& header(const StreamStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ins_stream_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtk_stream_in_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rtk_stream_out_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
StreamStatus::_Internal::header(const StreamStatus* msg) {
  return *msg->header_;
}
void StreamStatus::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
StreamStatus::StreamStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.StreamStatus)
}
StreamStatus::StreamStatus(const StreamStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&ins_stream_type_, &from.ins_stream_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtk_stream_out_type_) -
    reinterpret_cast<char*>(&ins_stream_type_)) + sizeof(rtk_stream_out_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.StreamStatus)
}

void StreamStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtk_stream_out_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(rtk_stream_out_type_));
}

StreamStatus::~StreamStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.StreamStatus)
  SharedDtor();
}

void StreamStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void StreamStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamStatus& StreamStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void StreamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.StreamStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&ins_stream_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rtk_stream_out_type_) -
        reinterpret_cast<char*>(&ins_stream_type_)) + sizeof(rtk_stream_out_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::StreamStatus_Type_IsValid(val))) {
            _internal_set_ins_stream_type(static_cast<::apollo::drivers::gnss::StreamStatus_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::StreamStatus_Type_IsValid(val))) {
            _internal_set_rtk_stream_in_type(static_cast<::apollo::drivers::gnss::StreamStatus_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::StreamStatus_Type_IsValid(val))) {
            _internal_set_rtk_stream_out_type(static_cast<::apollo::drivers::gnss::StreamStatus_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.StreamStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.drivers.gnss.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ins_stream_type(), target);
  }

  // optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rtk_stream_in_type(), target);
  }

  // optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_rtk_stream_out_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.StreamStatus)
  return target;
}

size_t StreamStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.StreamStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.drivers.gnss.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ins_stream_type());
    }

    // optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rtk_stream_in_type());
    }

    // optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rtk_stream_out_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.StreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.StreamStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.StreamStatus)
    MergeFrom(*source);
  }
}

void StreamStatus::MergeFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.StreamStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      ins_stream_type_ = from.ins_stream_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtk_stream_in_type_ = from.rtk_stream_in_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rtk_stream_out_type_ = from.rtk_stream_out_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StreamStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStatus::CopyFrom(const StreamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.StreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStatus::IsInitialized() const {
  return true;
}

void StreamStatus::InternalSwap(StreamStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(ins_stream_type_, other->ins_stream_type_);
  swap(rtk_stream_in_type_, other->rtk_stream_in_type_);
  swap(rtk_stream_out_type_, other->rtk_stream_out_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsStatus::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_InsStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class InsStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<InsStatus>()._has_bits_);
  static const ::apollo::common::Header& header(const InsStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
InsStatus::_Internal::header(const InsStatus* msg) {
  return *msg->header_;
}
void InsStatus::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
InsStatus::InsStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.InsStatus)
}
InsStatus::InsStatus(const InsStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.InsStatus)
}

void InsStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

InsStatus::~InsStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.InsStatus)
  SharedDtor();
}

void InsStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void InsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsStatus& InsStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void InsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.InsStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InsStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.InsStatus.Type type = 2 [default = INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::InsStatus_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::drivers::gnss::InsStatus_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.InsStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .apollo.drivers.gnss.InsStatus.Type type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.InsStatus)
  return target;
}

size_t InsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.InsStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.drivers.gnss.InsStatus.Type type = 2 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.InsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const InsStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.InsStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.InsStatus)
    MergeFrom(*source);
  }
}

void InsStatus::MergeFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.InsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsStatus::CopyFrom(const InsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.InsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStatus::IsInitialized() const {
  return true;
}

void InsStatus::InternalSwap(InsStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GnssStatus::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_GnssStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class GnssStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssStatus>()._has_bits_);
  static const ::apollo::common::Header& header(const GnssStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_solution_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_position_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_sats(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::Header&
GnssStatus::_Internal::header(const GnssStatus* msg) {
  return *msg->header_;
}
void GnssStatus::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GnssStatus::GnssStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GnssStatus)
}
GnssStatus::GnssStatus(const GnssStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&solution_completed_, &from.solution_completed_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sats_) -
    reinterpret_cast<char*>(&solution_completed_)) + sizeof(num_sats_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssStatus)
}

void GnssStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sats_) -
      reinterpret_cast<char*>(&header_)) + sizeof(num_sats_));
}

GnssStatus::~GnssStatus() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssStatus)
  SharedDtor();
}

void GnssStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GnssStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssStatus& GnssStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssStatus_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.base);
  return *internal_default_instance();
}


void GnssStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&solution_completed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sats_) -
        reinterpret_cast<char*>(&solution_completed_)) + sizeof(num_sats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GnssStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool solution_completed = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_solution_completed(&has_bits);
          solution_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 solution_status = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_solution_status(&has_bits);
          solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 position_type = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_position_type(&has_bits);
          position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sats = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_sats(&has_bits);
          num_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional bool solution_completed = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_solution_completed(), target);
  }

  // optional uint32 solution_status = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_solution_status(), target);
  }

  // optional uint32 position_type = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_position_type(), target);
  }

  // optional int32 num_sats = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_sats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssStatus)
  return target;
}

size_t GnssStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional bool solution_completed = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 solution_status = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_solution_status());
    }

    // optional uint32 position_type = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position_type());
    }

    // optional int32 num_sats = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_sats());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GnssStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GnssStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GnssStatus)
    MergeFrom(*source);
  }
}

void GnssStatus::MergeFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      solution_completed_ = from.solution_completed_;
    }
    if (cached_has_bits & 0x00000004u) {
      solution_status_ = from.solution_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_type_ = from.position_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_sats_ = from.num_sats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssStatus::CopyFrom(const GnssStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssStatus::IsInitialized() const {
  return true;
}

void GnssStatus::InternalSwap(GnssStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(solution_completed_, other->solution_completed_);
  swap(solution_status_, other->solution_status_);
  swap(position_type_, other->position_type_);
  swap(num_sats_, other->num_sats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::StreamStatus* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::StreamStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::StreamStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::InsStatus* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::InsStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::InsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::GnssStatus* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GnssStatus >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::GnssStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
