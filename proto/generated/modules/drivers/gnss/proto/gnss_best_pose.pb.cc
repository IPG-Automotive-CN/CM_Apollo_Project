// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_best_pose.proto

#include "modules/drivers/gnss/proto/gnss_best_pose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class GnssBestPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssBestPose> _instance;
} _GnssBestPose_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_GnssBestPose_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_GnssBestPose_default_instance_;
    new (ptr) ::apollo::drivers::gnss::GnssBestPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::GnssBestPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GnssBestPose_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GnssBestPose_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, sol_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, sol_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, height_msl_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, undulation_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, datum_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, latitude_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, longitude_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, height_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, base_station_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, differential_age_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, solution_age_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, num_sats_tracked_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, num_sats_in_solution_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, num_sats_l1_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, num_sats_multi_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, reserved_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, extended_solution_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, galileo_beidou_used_mask_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, gps_glonass_used_mask_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  22,
  9,
  10,
  11,
  0,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::apollo::drivers::gnss::GnssBestPose)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::_GnssBestPose_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/drivers/gnss/proto/gnss_best_p"
  "ose.proto\022\023apollo.drivers.gnss\032!modules/"
  "common/proto/header.proto\"\252\005\n\014GnssBestPo"
  "se\022%\n\006header\030\001 \001(\0132\025.apollo.common.Heade"
  "r\022\030\n\020measurement_time\030\002 \001(\001\0227\n\nsol_statu"
  "s\030\003 \001(\0162#.apollo.drivers.gnss.SolutionSt"
  "atus\0223\n\010sol_type\030\004 \001(\0162!.apollo.drivers."
  "gnss.SolutionType\022\020\n\010latitude\030\005 \001(\001\022\021\n\tl"
  "ongitude\030\006 \001(\001\022\022\n\nheight_msl\030\007 \001(\001\022\022\n\nun"
  "dulation\030\010 \001(\002\022.\n\010datum_id\030\t \001(\0162\034.apoll"
  "o.drivers.gnss.DatumId\022\030\n\020latitude_std_d"
  "ev\030\n \001(\002\022\031\n\021longitude_std_dev\030\013 \001(\002\022\026\n\016h"
  "eight_std_dev\030\014 \001(\002\022\027\n\017base_station_id\030\r"
  " \001(\014\022\030\n\020differential_age\030\016 \001(\002\022\024\n\014soluti"
  "on_age\030\017 \001(\002\022\030\n\020num_sats_tracked\030\020 \001(\r\022\034"
  "\n\024num_sats_in_solution\030\021 \001(\r\022\023\n\013num_sats"
  "_l1\030\022 \001(\r\022\026\n\016num_sats_multi\030\023 \001(\r\022\020\n\010res"
  "erved\030\024 \001(\r\022 \n\030extended_solution_status\030"
  "\025 \001(\r\022 \n\030galileo_beidou_used_mask\030\026 \001(\r\022"
  "\035\n\025gps_glonass_used_mask\030\027 \001(\r*\220\002\n\016Solut"
  "ionStatus\022\020\n\014SOL_COMPUTED\020\000\022\024\n\020INSUFFICI"
  "ENT_OBS\020\001\022\022\n\016NO_CONVERGENCE\020\002\022\017\n\013SINGULA"
  "RITY\020\003\022\r\n\tCOV_TRACE\020\004\022\r\n\tTEST_DIST\020\005\022\016\n\n"
  "COLD_START\020\006\022\r\n\tV_H_LIMIT\020\007\022\014\n\010VARIANCE\020"
  "\010\022\r\n\tRESIDUALS\020\t\022\025\n\021INTEGRITY_WARNING\020\r\022"
  "\013\n\007PENDING\020\022\022\017\n\013INVALID_FIX\020\023\022\020\n\014UNAUTHO"
  "RIZED\020\024\022\020\n\014INVALID_RATE\020\026*\237\004\n\014SolutionTy"
  "pe\022\010\n\004NONE\020\000\022\014\n\010FIXEDPOS\020\001\022\017\n\013FIXEDHEIGH"
  "T\020\002\022\r\n\tFLOATCONV\020\004\022\014\n\010WIDELANE\020\005\022\016\n\nNARR"
  "OWLANE\020\006\022\024\n\020DOPPLER_VELOCITY\020\010\022\n\n\006SINGLE"
  "\020\020\022\013\n\007PSRDIFF\020\021\022\010\n\004WAAS\020\022\022\016\n\nPROPOGATED\020"
  "\023\022\014\n\010OMNISTAR\020\024\022\014\n\010L1_FLOAT\020 \022\022\n\016IONOFRE"
  "E_FLOAT\020!\022\020\n\014NARROW_FLOAT\020\"\022\n\n\006L1_INT\0200\022"
  "\014\n\010WIDE_INT\0201\022\016\n\nNARROW_INT\0202\022\022\n\016RTK_DIR"
  "ECT_INS\0203\022\014\n\010INS_SBAS\0204\022\r\n\tINS_PSRSP\0205\022\017"
  "\n\013INS_PSRDIFF\0206\022\020\n\014INS_RTKFLOAT\0207\022\020\n\014INS"
  "_RTKFIXED\0208\022\020\n\014INS_OMNISTAR\0209\022\023\n\017INS_OMN"
  "ISTAR_HP\020:\022\023\n\017INS_OMNISTAR_XP\020;\022\017\n\013OMNIS"
  "TAR_HP\020@\022\017\n\013OMNISTAR_XP\020A\022\022\n\016PPP_CONVERG"
  "ING\020D\022\007\n\003PPP\020E\022\026\n\022INS_PPP_CONVERGING\020I\022\013"
  "\n\007INS_PPP\020J*\024\n\007DatumId\022\t\n\005WGS84\020="
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto_sccs[1] = {
  &scc_info_GnssBestPose_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto = {
  &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto, "modules/drivers/gnss/proto/gnss_best_pose.proto", 1633,
  &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto_once, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto_sccs, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto, 1, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto, file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto), true);
namespace apollo {
namespace drivers {
namespace gnss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto[0];
}
bool SolutionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 18:
    case 19:
    case 20:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto[1];
}
bool SolutionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 32:
    case 33:
    case 34:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 64:
    case 65:
    case 68:
    case 69:
    case 73:
    case 74:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatumId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto[2];
}
bool DatumId_IsValid(int value) {
  switch (value) {
    case 61:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GnssBestPose::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_GnssBestPose_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class GnssBestPose::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssBestPose>()._has_bits_);
  static const ::apollo::common::Header& header(const GnssBestPose* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sol_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sol_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height_msl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_undulation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_datum_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_latitude_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_longitude_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_height_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base_station_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_differential_age(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_solution_age(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_num_sats_tracked(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_num_sats_in_solution(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_num_sats_l1(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_num_sats_multi(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_extended_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_galileo_beidou_used_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gps_glonass_used_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

const ::apollo::common::Header&
GnssBestPose::_Internal::header(const GnssBestPose* msg) {
  return *msg->header_;
}
void GnssBestPose::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GnssBestPose::GnssBestPose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GnssBestPose)
}
GnssBestPose::GnssBestPose(const GnssBestPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_station_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_base_station_id()) {
    base_station_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_station_id_);
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&datum_id_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(datum_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssBestPose)
}

void GnssBestPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssBestPose_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto.base);
  base_station_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_glonass_used_mask_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gps_glonass_used_mask_));
  datum_id_ = 61;
}

GnssBestPose::~GnssBestPose() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssBestPose)
  SharedDtor();
}

void GnssBestPose::SharedDtor() {
  base_station_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GnssBestPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssBestPose& GnssBestPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssBestPose_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto.base);
  return *internal_default_instance();
}


void GnssBestPose::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssBestPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      base_station_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_msl_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(height_msl_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&undulation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sats_in_solution_) -
        reinterpret_cast<char*>(&undulation_)) + sizeof(num_sats_in_solution_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&num_sats_l1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_glonass_used_mask_) -
        reinterpret_cast<char*>(&num_sats_l1_)) + sizeof(gps_glonass_used_mask_));
    datum_id_ = 61;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GnssBestPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double measurement_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_measurement_time(&has_bits);
          measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::SolutionStatus_IsValid(val))) {
            _internal_set_sol_status(static_cast<::apollo::drivers::gnss::SolutionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::SolutionType_IsValid(val))) {
            _internal_set_sol_type(static_cast<::apollo::drivers::gnss::SolutionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double height_msl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_height_msl(&has_bits);
          height_msl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float undulation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_undulation(&has_bits);
          undulation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.DatumId datum_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::DatumId_IsValid(val))) {
            _internal_set_datum_id(static_cast<::apollo::drivers::gnss::DatumId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float latitude_std_dev = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_latitude_std_dev(&has_bits);
          latitude_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longitude_std_dev = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_longitude_std_dev(&has_bits);
          longitude_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height_std_dev = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_height_std_dev(&has_bits);
          height_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bytes base_station_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_base_station_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float differential_age = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_differential_age(&has_bits);
          differential_age_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float solution_age = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_solution_age(&has_bits);
          solution_age_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_sats_tracked = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_num_sats_tracked(&has_bits);
          num_sats_tracked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_sats_in_solution = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_num_sats_in_solution(&has_bits);
          num_sats_in_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_sats_l1 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_num_sats_l1(&has_bits);
          num_sats_l1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_sats_multi = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_num_sats_multi(&has_bits);
          num_sats_multi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reserved = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_reserved(&has_bits);
          reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extended_solution_status = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_extended_solution_status(&has_bits);
          extended_solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 galileo_beidou_used_mask = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_galileo_beidou_used_mask(&has_bits);
          galileo_beidou_used_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gps_glonass_used_mask = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_gps_glonass_used_mask(&has_bits);
          gps_glonass_used_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssBestPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssBestPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurement_time(), target);
  }

  // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_sol_status(), target);
  }

  // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sol_type(), target);
  }

  // optional double latitude = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_latitude(), target);
  }

  // optional double longitude = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_longitude(), target);
  }

  // optional double height_msl = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_height_msl(), target);
  }

  // optional float undulation = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_undulation(), target);
  }

  // optional .apollo.drivers.gnss.DatumId datum_id = 9;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_datum_id(), target);
  }

  // optional float latitude_std_dev = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_latitude_std_dev(), target);
  }

  // optional float longitude_std_dev = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_longitude_std_dev(), target);
  }

  // optional float height_std_dev = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_height_std_dev(), target);
  }

  // optional bytes base_station_id = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_base_station_id(), target);
  }

  // optional float differential_age = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_differential_age(), target);
  }

  // optional float solution_age = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_solution_age(), target);
  }

  // optional uint32 num_sats_tracked = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_num_sats_tracked(), target);
  }

  // optional uint32 num_sats_in_solution = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_num_sats_in_solution(), target);
  }

  // optional uint32 num_sats_l1 = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_num_sats_l1(), target);
  }

  // optional uint32 num_sats_multi = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_num_sats_multi(), target);
  }

  // optional uint32 reserved = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_reserved(), target);
  }

  // optional uint32 extended_solution_status = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_extended_solution_status(), target);
  }

  // optional uint32 galileo_beidou_used_mask = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_galileo_beidou_used_mask(), target);
  }

  // optional uint32 gps_glonass_used_mask = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_gps_glonass_used_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssBestPose)
  return target;
}

size_t GnssBestPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssBestPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes base_station_id = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_base_station_id());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double measurement_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sol_status());
    }

    // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sol_type());
    }

    // optional double latitude = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double height_msl = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float undulation = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float latitude_std_dev = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float longitude_std_dev = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float height_std_dev = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float differential_age = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float solution_age = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional uint32 num_sats_tracked = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_sats_tracked());
    }

    // optional uint32 num_sats_in_solution = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_sats_in_solution());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint32 num_sats_l1 = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_sats_l1());
    }

    // optional uint32 num_sats_multi = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_sats_multi());
    }

    // optional uint32 reserved = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reserved());
    }

    // optional uint32 extended_solution_status = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extended_solution_status());
    }

    // optional uint32 galileo_beidou_used_mask = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_galileo_beidou_used_mask());
    }

    // optional uint32 gps_glonass_used_mask = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gps_glonass_used_mask());
    }

    // optional .apollo.drivers.gnss.DatumId datum_id = 9;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datum_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssBestPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GnssBestPose)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssBestPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssBestPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GnssBestPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GnssBestPose)
    MergeFrom(*source);
  }
}

void GnssBestPose::MergeFrom(const GnssBestPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssBestPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      base_station_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_station_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sol_status_ = from.sol_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      sol_type_ = from.sol_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_msl_ = from.height_msl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      undulation_ = from.undulation_;
    }
    if (cached_has_bits & 0x00000200u) {
      latitude_std_dev_ = from.latitude_std_dev_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitude_std_dev_ = from.longitude_std_dev_;
    }
    if (cached_has_bits & 0x00000800u) {
      height_std_dev_ = from.height_std_dev_;
    }
    if (cached_has_bits & 0x00001000u) {
      differential_age_ = from.differential_age_;
    }
    if (cached_has_bits & 0x00002000u) {
      solution_age_ = from.solution_age_;
    }
    if (cached_has_bits & 0x00004000u) {
      num_sats_tracked_ = from.num_sats_tracked_;
    }
    if (cached_has_bits & 0x00008000u) {
      num_sats_in_solution_ = from.num_sats_in_solution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      num_sats_l1_ = from.num_sats_l1_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_sats_multi_ = from.num_sats_multi_;
    }
    if (cached_has_bits & 0x00040000u) {
      reserved_ = from.reserved_;
    }
    if (cached_has_bits & 0x00080000u) {
      extended_solution_status_ = from.extended_solution_status_;
    }
    if (cached_has_bits & 0x00100000u) {
      galileo_beidou_used_mask_ = from.galileo_beidou_used_mask_;
    }
    if (cached_has_bits & 0x00200000u) {
      gps_glonass_used_mask_ = from.gps_glonass_used_mask_;
    }
    if (cached_has_bits & 0x00400000u) {
      datum_id_ = from.datum_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssBestPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GnssBestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssBestPose::CopyFrom(const GnssBestPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssBestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssBestPose::IsInitialized() const {
  return true;
}

void GnssBestPose::InternalSwap(GnssBestPose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_station_id_.Swap(&other->base_station_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(measurement_time_, other->measurement_time_);
  swap(sol_status_, other->sol_status_);
  swap(sol_type_, other->sol_type_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(height_msl_, other->height_msl_);
  swap(undulation_, other->undulation_);
  swap(latitude_std_dev_, other->latitude_std_dev_);
  swap(longitude_std_dev_, other->longitude_std_dev_);
  swap(height_std_dev_, other->height_std_dev_);
  swap(differential_age_, other->differential_age_);
  swap(solution_age_, other->solution_age_);
  swap(num_sats_tracked_, other->num_sats_tracked_);
  swap(num_sats_in_solution_, other->num_sats_in_solution_);
  swap(num_sats_l1_, other->num_sats_l1_);
  swap(num_sats_multi_, other->num_sats_multi_);
  swap(reserved_, other->reserved_);
  swap(extended_solution_status_, other->extended_solution_status_);
  swap(galileo_beidou_used_mask_, other->galileo_beidou_used_mask_);
  swap(gps_glonass_used_mask_, other->gps_glonass_used_mask_);
  swap(datum_id_, other->datum_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssBestPose::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::GnssBestPose* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GnssBestPose >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::GnssBestPose >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
