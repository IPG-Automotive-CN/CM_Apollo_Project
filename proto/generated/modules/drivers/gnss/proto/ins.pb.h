// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/ins.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class Ins;
class InsDefaultTypeInternal;
extern InsDefaultTypeInternal _Ins_default_instance_;
class InsStat;
class InsStatDefaultTypeInternal;
extern InsStatDefaultTypeInternal _InsStat_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::gnss::Ins* Arena::CreateMaybeMessage<::apollo::drivers::gnss::Ins>(Arena*);
template<> ::apollo::drivers::gnss::InsStat* Arena::CreateMaybeMessage<::apollo::drivers::gnss::InsStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace gnss {

enum Ins_Type : int {
  Ins_Type_INVALID = 0,
  Ins_Type_CONVERGING = 1,
  Ins_Type_GOOD = 2
};
bool Ins_Type_IsValid(int value);
constexpr Ins_Type Ins_Type_Type_MIN = Ins_Type_INVALID;
constexpr Ins_Type Ins_Type_Type_MAX = Ins_Type_GOOD;
constexpr int Ins_Type_Type_ARRAYSIZE = Ins_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ins_Type_descriptor();
template<typename T>
inline const std::string& Ins_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ins_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ins_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ins_Type_descriptor(), enum_t_value);
}
inline bool Ins_Type_Parse(
    const std::string& name, Ins_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ins_Type>(
    Ins_Type_descriptor(), name, value);
}
// ===================================================================

class InsStat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.InsStat) */ {
 public:
  InsStat();
  virtual ~InsStat();

  InsStat(const InsStat& from);
  InsStat(InsStat&& from) noexcept
    : InsStat() {
    *this = ::std::move(from);
  }

  inline InsStat& operator=(const InsStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsStat& operator=(InsStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsStat* internal_default_instance() {
    return reinterpret_cast<const InsStat*>(
               &_InsStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InsStat& a, InsStat& b) {
    a.Swap(&b);
  }
  inline void Swap(InsStat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsStat* New() const final {
    return CreateMaybeMessage<InsStat>(nullptr);
  }

  InsStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsStat& from);
  void MergeFrom(const InsStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.InsStat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInsStatusFieldNumber = 2,
    kPosTypeFieldNumber = 3,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional uint32 ins_status = 2;
  bool has_ins_status() const;
  private:
  bool _internal_has_ins_status() const;
  public:
  void clear_ins_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 ins_status() const;
  void set_ins_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ins_status() const;
  void _internal_set_ins_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pos_type = 3;
  bool has_pos_type() const;
  private:
  bool _internal_has_pos_type() const;
  public:
  void clear_pos_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_type() const;
  void set_pos_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pos_type() const;
  void _internal_set_pos_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.InsStat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ins_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_type_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto;
};
// -------------------------------------------------------------------

class Ins :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.Ins) */ {
 public:
  Ins();
  virtual ~Ins();

  Ins(const Ins& from);
  Ins(Ins&& from) noexcept
    : Ins() {
    *this = ::std::move(from);
  }

  inline Ins& operator=(const Ins& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ins& operator=(Ins&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ins& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ins* internal_default_instance() {
    return reinterpret_cast<const Ins*>(
               &_Ins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ins& a, Ins& b) {
    a.Swap(&b);
  }
  inline void Swap(Ins* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ins* New() const final {
    return CreateMaybeMessage<Ins>(nullptr);
  }

  Ins* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ins>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ins& from);
  void MergeFrom(const Ins& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ins* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.Ins";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Ins_Type Type;
  static constexpr Type INVALID =
    Ins_Type_INVALID;
  static constexpr Type CONVERGING =
    Ins_Type_CONVERGING;
  static constexpr Type GOOD =
    Ins_Type_GOOD;
  static inline bool Type_IsValid(int value) {
    return Ins_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Ins_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Ins_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Ins_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Ins_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Ins_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Ins_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionCovarianceFieldNumber = 9,
    kEulerAnglesCovarianceFieldNumber = 10,
    kLinearVelocityCovarianceFieldNumber = 11,
    kAngularVelocityCovarianceFieldNumber = 12,
    kLinearAccelerationCovarianceFieldNumber = 13,
    kHeaderFieldNumber = 1,
    kPositionFieldNumber = 4,
    kEulerAnglesFieldNumber = 5,
    kLinearVelocityFieldNumber = 6,
    kAngularVelocityFieldNumber = 7,
    kLinearAccelerationFieldNumber = 8,
    kMeasurementTimeFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated float position_covariance = 9 [packed = true];
  int position_covariance_size() const;
  private:
  int _internal_position_covariance_size() const;
  public:
  void clear_position_covariance();
  private:
  float _internal_position_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_position_covariance() const;
  void _internal_add_position_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_position_covariance();
  public:
  float position_covariance(int index) const;
  void set_position_covariance(int index, float value);
  void add_position_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      position_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_position_covariance();

  // repeated float euler_angles_covariance = 10 [packed = true];
  int euler_angles_covariance_size() const;
  private:
  int _internal_euler_angles_covariance_size() const;
  public:
  void clear_euler_angles_covariance();
  private:
  float _internal_euler_angles_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_euler_angles_covariance() const;
  void _internal_add_euler_angles_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_euler_angles_covariance();
  public:
  float euler_angles_covariance(int index) const;
  void set_euler_angles_covariance(int index, float value);
  void add_euler_angles_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      euler_angles_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_euler_angles_covariance();

  // repeated float linear_velocity_covariance = 11 [packed = true];
  int linear_velocity_covariance_size() const;
  private:
  int _internal_linear_velocity_covariance_size() const;
  public:
  void clear_linear_velocity_covariance();
  private:
  float _internal_linear_velocity_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_linear_velocity_covariance() const;
  void _internal_add_linear_velocity_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_linear_velocity_covariance();
  public:
  float linear_velocity_covariance(int index) const;
  void set_linear_velocity_covariance(int index, float value);
  void add_linear_velocity_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      linear_velocity_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_linear_velocity_covariance();

  // repeated float angular_velocity_covariance = 12 [packed = true];
  int angular_velocity_covariance_size() const;
  private:
  int _internal_angular_velocity_covariance_size() const;
  public:
  void clear_angular_velocity_covariance();
  private:
  float _internal_angular_velocity_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_angular_velocity_covariance() const;
  void _internal_add_angular_velocity_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_angular_velocity_covariance();
  public:
  float angular_velocity_covariance(int index) const;
  void set_angular_velocity_covariance(int index, float value);
  void add_angular_velocity_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      angular_velocity_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_angular_velocity_covariance();

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  int linear_acceleration_covariance_size() const;
  private:
  int _internal_linear_acceleration_covariance_size() const;
  public:
  void clear_linear_acceleration_covariance();
  private:
  float _internal_linear_acceleration_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_linear_acceleration_covariance() const;
  void _internal_add_linear_acceleration_covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_linear_acceleration_covariance();
  public:
  float linear_acceleration_covariance(int index) const;
  void set_linear_acceleration_covariance(int index, float value);
  void add_linear_acceleration_covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      linear_acceleration_covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_linear_acceleration_covariance();

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.common.PointLLH position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::apollo::common::PointLLH& position() const;
  ::apollo::common::PointLLH* release_position();
  ::apollo::common::PointLLH* mutable_position();
  void set_allocated_position(::apollo::common::PointLLH* position);
  private:
  const ::apollo::common::PointLLH& _internal_position() const;
  ::apollo::common::PointLLH* _internal_mutable_position();
  public:

  // optional .apollo.common.Point3D euler_angles = 5;
  bool has_euler_angles() const;
  private:
  bool _internal_has_euler_angles() const;
  public:
  void clear_euler_angles();
  const ::apollo::common::Point3D& euler_angles() const;
  ::apollo::common::Point3D* release_euler_angles();
  ::apollo::common::Point3D* mutable_euler_angles();
  void set_allocated_euler_angles(::apollo::common::Point3D* euler_angles);
  private:
  const ::apollo::common::Point3D& _internal_euler_angles() const;
  ::apollo::common::Point3D* _internal_mutable_euler_angles();
  public:

  // optional .apollo.common.Point3D linear_velocity = 6;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::apollo::common::Point3D& linear_velocity() const;
  ::apollo::common::Point3D* release_linear_velocity();
  ::apollo::common::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity);
  private:
  const ::apollo::common::Point3D& _internal_linear_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_linear_velocity();
  public:

  // optional .apollo.common.Point3D angular_velocity = 7;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::apollo::common::Point3D& angular_velocity() const;
  ::apollo::common::Point3D* release_angular_velocity();
  ::apollo::common::Point3D* mutable_angular_velocity();
  void set_allocated_angular_velocity(::apollo::common::Point3D* angular_velocity);
  private:
  const ::apollo::common::Point3D& _internal_angular_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_angular_velocity();
  public:

  // optional .apollo.common.Point3D linear_acceleration = 8;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::apollo::common::Point3D& linear_acceleration() const;
  ::apollo::common::Point3D* release_linear_acceleration();
  ::apollo::common::Point3D* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::apollo::common::Point3D* linear_acceleration);
  private:
  const ::apollo::common::Point3D& _internal_linear_acceleration() const;
  ::apollo::common::Point3D* _internal_mutable_linear_acceleration();
  public:

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional .apollo.drivers.gnss.Ins.Type type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::drivers::gnss::Ins_Type type() const;
  void set_type(::apollo::drivers::gnss::Ins_Type value);
  private:
  ::apollo::drivers::gnss::Ins_Type _internal_type() const;
  void _internal_set_type(::apollo::drivers::gnss::Ins_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.Ins)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > position_covariance_;
  mutable std::atomic<int> _position_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > euler_angles_covariance_;
  mutable std::atomic<int> _euler_angles_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > linear_velocity_covariance_;
  mutable std::atomic<int> _linear_velocity_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > angular_velocity_covariance_;
  mutable std::atomic<int> _angular_velocity_covariance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > linear_acceleration_covariance_;
  mutable std::atomic<int> _linear_acceleration_covariance_cached_byte_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::PointLLH* position_;
  ::apollo::common::Point3D* euler_angles_;
  ::apollo::common::Point3D* linear_velocity_;
  ::apollo::common::Point3D* angular_velocity_;
  ::apollo::common::Point3D* linear_acceleration_;
  double measurement_time_;
  int type_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InsStat

// optional .apollo.common.Header header = 1;
inline bool InsStat::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool InsStat::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& InsStat::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& InsStat::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.InsStat.header)
  return _internal_header();
}
inline ::apollo::common::Header* InsStat::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.InsStat.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* InsStat::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* InsStat::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.InsStat.header)
  return _internal_mutable_header();
}
inline void InsStat::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.InsStat.header)
}

// optional uint32 ins_status = 2;
inline bool InsStat::_internal_has_ins_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InsStat::has_ins_status() const {
  return _internal_has_ins_status();
}
inline void InsStat::clear_ins_status() {
  ins_status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsStat::_internal_ins_status() const {
  return ins_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsStat::ins_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.InsStat.ins_status)
  return _internal_ins_status();
}
inline void InsStat::_internal_set_ins_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ins_status_ = value;
}
inline void InsStat::set_ins_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ins_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.InsStat.ins_status)
}

// optional uint32 pos_type = 3;
inline bool InsStat::_internal_has_pos_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InsStat::has_pos_type() const {
  return _internal_has_pos_type();
}
inline void InsStat::clear_pos_type() {
  pos_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsStat::_internal_pos_type() const {
  return pos_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsStat::pos_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.InsStat.pos_type)
  return _internal_pos_type();
}
inline void InsStat::_internal_set_pos_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_type_ = value;
}
inline void InsStat::set_pos_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pos_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.InsStat.pos_type)
}

// -------------------------------------------------------------------

// Ins

// optional .apollo.common.Header header = 1;
inline bool Ins::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Ins::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Ins::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Ins::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.header)
  return _internal_header();
}
inline ::apollo::common::Header* Ins::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Ins::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* Ins::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.header)
  return _internal_mutable_header();
}
inline void Ins::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.header)
}

// optional double measurement_time = 2;
inline bool Ins::_internal_has_measurement_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Ins::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void Ins::clear_measurement_time() {
  measurement_time_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double Ins::_internal_measurement_time() const {
  return measurement_time_;
}
inline double Ins::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.measurement_time)
  return _internal_measurement_time();
}
inline void Ins::_internal_set_measurement_time(double value) {
  _has_bits_[0] |= 0x00000040u;
  measurement_time_ = value;
}
inline void Ins::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.measurement_time)
}

// optional .apollo.drivers.gnss.Ins.Type type = 3;
inline bool Ins::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Ins::has_type() const {
  return _internal_has_type();
}
inline void Ins::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::drivers::gnss::Ins_Type Ins::_internal_type() const {
  return static_cast< ::apollo::drivers::gnss::Ins_Type >(type_);
}
inline ::apollo::drivers::gnss::Ins_Type Ins::type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.type)
  return _internal_type();
}
inline void Ins::_internal_set_type(::apollo::drivers::gnss::Ins_Type value) {
  assert(::apollo::drivers::gnss::Ins_Type_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void Ins::set_type(::apollo::drivers::gnss::Ins_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.type)
}

// optional .apollo.common.PointLLH position = 4;
inline bool Ins::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Ins::has_position() const {
  return _internal_has_position();
}
inline const ::apollo::common::PointLLH& Ins::_internal_position() const {
  const ::apollo::common::PointLLH* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::PointLLH*>(
      &::apollo::common::_PointLLH_default_instance_);
}
inline const ::apollo::common::PointLLH& Ins::position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.position)
  return _internal_position();
}
inline ::apollo::common::PointLLH* Ins::release_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.position)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointLLH* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::apollo::common::PointLLH* Ins::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointLLH>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::apollo::common::PointLLH* Ins::mutable_position() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.position)
  return _internal_mutable_position();
}
inline void Ins::set_allocated_position(::apollo::common::PointLLH* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.position)
}

// optional .apollo.common.Point3D euler_angles = 5;
inline bool Ins::_internal_has_euler_angles() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || euler_angles_ != nullptr);
  return value;
}
inline bool Ins::has_euler_angles() const {
  return _internal_has_euler_angles();
}
inline const ::apollo::common::Point3D& Ins::_internal_euler_angles() const {
  const ::apollo::common::Point3D* p = euler_angles_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Ins::euler_angles() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.euler_angles)
  return _internal_euler_angles();
}
inline ::apollo::common::Point3D* Ins::release_euler_angles() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.euler_angles)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = euler_angles_;
  euler_angles_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Ins::_internal_mutable_euler_angles() {
  _has_bits_[0] |= 0x00000004u;
  if (euler_angles_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    euler_angles_ = p;
  }
  return euler_angles_;
}
inline ::apollo::common::Point3D* Ins::mutable_euler_angles() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.euler_angles)
  return _internal_mutable_euler_angles();
}
inline void Ins::set_allocated_euler_angles(::apollo::common::Point3D* euler_angles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_angles_);
  }
  if (euler_angles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      euler_angles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_angles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  euler_angles_ = euler_angles;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.euler_angles)
}

// optional .apollo.common.Point3D linear_velocity = 6;
inline bool Ins::_internal_has_linear_velocity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || linear_velocity_ != nullptr);
  return value;
}
inline bool Ins::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::apollo::common::Point3D& Ins::_internal_linear_velocity() const {
  const ::apollo::common::Point3D* p = linear_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Ins::linear_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.linear_velocity)
  return _internal_linear_velocity();
}
inline ::apollo::common::Point3D* Ins::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.linear_velocity)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Ins::_internal_mutable_linear_velocity() {
  _has_bits_[0] |= 0x00000008u;
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::apollo::common::Point3D* Ins::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void Ins::set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.linear_velocity)
}

// optional .apollo.common.Point3D angular_velocity = 7;
inline bool Ins::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || angular_velocity_ != nullptr);
  return value;
}
inline bool Ins::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::apollo::common::Point3D& Ins::_internal_angular_velocity() const {
  const ::apollo::common::Point3D* p = angular_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Ins::angular_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.angular_velocity)
  return _internal_angular_velocity();
}
inline ::apollo::common::Point3D* Ins::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.angular_velocity)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Ins::_internal_mutable_angular_velocity() {
  _has_bits_[0] |= 0x00000010u;
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::apollo::common::Point3D* Ins::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void Ins::set_allocated_angular_velocity(::apollo::common::Point3D* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.angular_velocity)
}

// optional .apollo.common.Point3D linear_acceleration = 8;
inline bool Ins::_internal_has_linear_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || linear_acceleration_ != nullptr);
  return value;
}
inline bool Ins::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline const ::apollo::common::Point3D& Ins::_internal_linear_acceleration() const {
  const ::apollo::common::Point3D* p = linear_acceleration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& Ins::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.linear_acceleration)
  return _internal_linear_acceleration();
}
inline ::apollo::common::Point3D* Ins::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Ins.linear_acceleration)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* Ins::_internal_mutable_linear_acceleration() {
  _has_bits_[0] |= 0x00000020u;
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::apollo::common::Point3D* Ins::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Ins.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void Ins::set_allocated_linear_acceleration(::apollo::common::Point3D* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Ins.linear_acceleration)
}

// repeated float position_covariance = 9 [packed = true];
inline int Ins::_internal_position_covariance_size() const {
  return position_covariance_.size();
}
inline int Ins::position_covariance_size() const {
  return _internal_position_covariance_size();
}
inline void Ins::clear_position_covariance() {
  position_covariance_.Clear();
}
inline float Ins::_internal_position_covariance(int index) const {
  return position_covariance_.Get(index);
}
inline float Ins::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.position_covariance)
  return _internal_position_covariance(index);
}
inline void Ins::set_position_covariance(int index, float value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.position_covariance)
}
inline void Ins::_internal_add_position_covariance(float value) {
  position_covariance_.Add(value);
}
inline void Ins::add_position_covariance(float value) {
  _internal_add_position_covariance(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.position_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::_internal_position_covariance() const {
  return position_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::position_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.position_covariance)
  return _internal_position_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::_internal_mutable_position_covariance() {
  return &position_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.position_covariance)
  return _internal_mutable_position_covariance();
}

// repeated float euler_angles_covariance = 10 [packed = true];
inline int Ins::_internal_euler_angles_covariance_size() const {
  return euler_angles_covariance_.size();
}
inline int Ins::euler_angles_covariance_size() const {
  return _internal_euler_angles_covariance_size();
}
inline void Ins::clear_euler_angles_covariance() {
  euler_angles_covariance_.Clear();
}
inline float Ins::_internal_euler_angles_covariance(int index) const {
  return euler_angles_covariance_.Get(index);
}
inline float Ins::euler_angles_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.euler_angles_covariance)
  return _internal_euler_angles_covariance(index);
}
inline void Ins::set_euler_angles_covariance(int index, float value) {
  euler_angles_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.euler_angles_covariance)
}
inline void Ins::_internal_add_euler_angles_covariance(float value) {
  euler_angles_covariance_.Add(value);
}
inline void Ins::add_euler_angles_covariance(float value) {
  _internal_add_euler_angles_covariance(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.euler_angles_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::_internal_euler_angles_covariance() const {
  return euler_angles_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::euler_angles_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.euler_angles_covariance)
  return _internal_euler_angles_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::_internal_mutable_euler_angles_covariance() {
  return &euler_angles_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::mutable_euler_angles_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.euler_angles_covariance)
  return _internal_mutable_euler_angles_covariance();
}

// repeated float linear_velocity_covariance = 11 [packed = true];
inline int Ins::_internal_linear_velocity_covariance_size() const {
  return linear_velocity_covariance_.size();
}
inline int Ins::linear_velocity_covariance_size() const {
  return _internal_linear_velocity_covariance_size();
}
inline void Ins::clear_linear_velocity_covariance() {
  linear_velocity_covariance_.Clear();
}
inline float Ins::_internal_linear_velocity_covariance(int index) const {
  return linear_velocity_covariance_.Get(index);
}
inline float Ins::linear_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.linear_velocity_covariance)
  return _internal_linear_velocity_covariance(index);
}
inline void Ins::set_linear_velocity_covariance(int index, float value) {
  linear_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.linear_velocity_covariance)
}
inline void Ins::_internal_add_linear_velocity_covariance(float value) {
  linear_velocity_covariance_.Add(value);
}
inline void Ins::add_linear_velocity_covariance(float value) {
  _internal_add_linear_velocity_covariance(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.linear_velocity_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::_internal_linear_velocity_covariance() const {
  return linear_velocity_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::linear_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.linear_velocity_covariance)
  return _internal_linear_velocity_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::_internal_mutable_linear_velocity_covariance() {
  return &linear_velocity_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::mutable_linear_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.linear_velocity_covariance)
  return _internal_mutable_linear_velocity_covariance();
}

// repeated float angular_velocity_covariance = 12 [packed = true];
inline int Ins::_internal_angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
inline int Ins::angular_velocity_covariance_size() const {
  return _internal_angular_velocity_covariance_size();
}
inline void Ins::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
inline float Ins::_internal_angular_velocity_covariance(int index) const {
  return angular_velocity_covariance_.Get(index);
}
inline float Ins::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.angular_velocity_covariance)
  return _internal_angular_velocity_covariance(index);
}
inline void Ins::set_angular_velocity_covariance(int index, float value) {
  angular_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.angular_velocity_covariance)
}
inline void Ins::_internal_add_angular_velocity_covariance(float value) {
  angular_velocity_covariance_.Add(value);
}
inline void Ins::add_angular_velocity_covariance(float value) {
  _internal_add_angular_velocity_covariance(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.angular_velocity_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::_internal_angular_velocity_covariance() const {
  return angular_velocity_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.angular_velocity_covariance)
  return _internal_angular_velocity_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::_internal_mutable_angular_velocity_covariance() {
  return &angular_velocity_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.angular_velocity_covariance)
  return _internal_mutable_angular_velocity_covariance();
}

// repeated float linear_acceleration_covariance = 13 [packed = true];
inline int Ins::_internal_linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
inline int Ins::linear_acceleration_covariance_size() const {
  return _internal_linear_acceleration_covariance_size();
}
inline void Ins::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
inline float Ins::_internal_linear_acceleration_covariance(int index) const {
  return linear_acceleration_covariance_.Get(index);
}
inline float Ins::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
  return _internal_linear_acceleration_covariance(index);
}
inline void Ins::set_linear_acceleration_covariance(int index, float value) {
  linear_acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
}
inline void Ins::_internal_add_linear_acceleration_covariance(float value) {
  linear_acceleration_covariance_.Add(value);
}
inline void Ins::add_linear_acceleration_covariance(float value) {
  _internal_add_linear_acceleration_covariance(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::_internal_linear_acceleration_covariance() const {
  return linear_acceleration_covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Ins::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
  return _internal_linear_acceleration_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::_internal_mutable_linear_acceleration_covariance() {
  return &linear_acceleration_covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Ins::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.Ins.linear_acceleration_covariance)
  return _internal_mutable_linear_acceleration_covariance();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::gnss::Ins_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::Ins_Type>() {
  return ::apollo::drivers::gnss::Ins_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto
