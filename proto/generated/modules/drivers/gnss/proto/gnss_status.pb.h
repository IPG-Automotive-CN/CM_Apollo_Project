// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_status.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class GnssStatus;
class GnssStatusDefaultTypeInternal;
extern GnssStatusDefaultTypeInternal _GnssStatus_default_instance_;
class InsStatus;
class InsStatusDefaultTypeInternal;
extern InsStatusDefaultTypeInternal _InsStatus_default_instance_;
class StreamStatus;
class StreamStatusDefaultTypeInternal;
extern StreamStatusDefaultTypeInternal _StreamStatus_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::gnss::GnssStatus* Arena::CreateMaybeMessage<::apollo::drivers::gnss::GnssStatus>(Arena*);
template<> ::apollo::drivers::gnss::InsStatus* Arena::CreateMaybeMessage<::apollo::drivers::gnss::InsStatus>(Arena*);
template<> ::apollo::drivers::gnss::StreamStatus* Arena::CreateMaybeMessage<::apollo::drivers::gnss::StreamStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace gnss {

enum StreamStatus_Type : int {
  StreamStatus_Type_DISCONNECTED = 0,
  StreamStatus_Type_CONNECTED = 1
};
bool StreamStatus_Type_IsValid(int value);
constexpr StreamStatus_Type StreamStatus_Type_Type_MIN = StreamStatus_Type_DISCONNECTED;
constexpr StreamStatus_Type StreamStatus_Type_Type_MAX = StreamStatus_Type_CONNECTED;
constexpr int StreamStatus_Type_Type_ARRAYSIZE = StreamStatus_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamStatus_Type_descriptor();
template<typename T>
inline const std::string& StreamStatus_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamStatus_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamStatus_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamStatus_Type_descriptor(), enum_t_value);
}
inline bool StreamStatus_Type_Parse(
    const std::string& name, StreamStatus_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamStatus_Type>(
    StreamStatus_Type_descriptor(), name, value);
}
enum InsStatus_Type : int {
  InsStatus_Type_INVALID = 0,
  InsStatus_Type_CONVERGING = 1,
  InsStatus_Type_GOOD = 2
};
bool InsStatus_Type_IsValid(int value);
constexpr InsStatus_Type InsStatus_Type_Type_MIN = InsStatus_Type_INVALID;
constexpr InsStatus_Type InsStatus_Type_Type_MAX = InsStatus_Type_GOOD;
constexpr int InsStatus_Type_Type_ARRAYSIZE = InsStatus_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InsStatus_Type_descriptor();
template<typename T>
inline const std::string& InsStatus_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InsStatus_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InsStatus_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InsStatus_Type_descriptor(), enum_t_value);
}
inline bool InsStatus_Type_Parse(
    const std::string& name, InsStatus_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InsStatus_Type>(
    InsStatus_Type_descriptor(), name, value);
}
// ===================================================================

class StreamStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.StreamStatus) */ {
 public:
  StreamStatus();
  virtual ~StreamStatus();

  StreamStatus(const StreamStatus& from);
  StreamStatus(StreamStatus&& from) noexcept
    : StreamStatus() {
    *this = ::std::move(from);
  }

  inline StreamStatus& operator=(const StreamStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStatus& operator=(StreamStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamStatus* internal_default_instance() {
    return reinterpret_cast<const StreamStatus*>(
               &_StreamStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamStatus& a, StreamStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamStatus* New() const final {
    return CreateMaybeMessage<StreamStatus>(nullptr);
  }

  StreamStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamStatus& from);
  void MergeFrom(const StreamStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.StreamStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StreamStatus_Type Type;
  static constexpr Type DISCONNECTED =
    StreamStatus_Type_DISCONNECTED;
  static constexpr Type CONNECTED =
    StreamStatus_Type_CONNECTED;
  static inline bool Type_IsValid(int value) {
    return StreamStatus_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    StreamStatus_Type_Type_MIN;
  static constexpr Type Type_MAX =
    StreamStatus_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    StreamStatus_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return StreamStatus_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return StreamStatus_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return StreamStatus_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInsStreamTypeFieldNumber = 2,
    kRtkStreamInTypeFieldNumber = 3,
    kRtkStreamOutTypeFieldNumber = 4,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.drivers.gnss.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
  bool has_ins_stream_type() const;
  private:
  bool _internal_has_ins_stream_type() const;
  public:
  void clear_ins_stream_type();
  ::apollo::drivers::gnss::StreamStatus_Type ins_stream_type() const;
  void set_ins_stream_type(::apollo::drivers::gnss::StreamStatus_Type value);
  private:
  ::apollo::drivers::gnss::StreamStatus_Type _internal_ins_stream_type() const;
  void _internal_set_ins_stream_type(::apollo::drivers::gnss::StreamStatus_Type value);
  public:

  // optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
  bool has_rtk_stream_in_type() const;
  private:
  bool _internal_has_rtk_stream_in_type() const;
  public:
  void clear_rtk_stream_in_type();
  ::apollo::drivers::gnss::StreamStatus_Type rtk_stream_in_type() const;
  void set_rtk_stream_in_type(::apollo::drivers::gnss::StreamStatus_Type value);
  private:
  ::apollo::drivers::gnss::StreamStatus_Type _internal_rtk_stream_in_type() const;
  void _internal_set_rtk_stream_in_type(::apollo::drivers::gnss::StreamStatus_Type value);
  public:

  // optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
  bool has_rtk_stream_out_type() const;
  private:
  bool _internal_has_rtk_stream_out_type() const;
  public:
  void clear_rtk_stream_out_type();
  ::apollo::drivers::gnss::StreamStatus_Type rtk_stream_out_type() const;
  void set_rtk_stream_out_type(::apollo::drivers::gnss::StreamStatus_Type value);
  private:
  ::apollo::drivers::gnss::StreamStatus_Type _internal_rtk_stream_out_type() const;
  void _internal_set_rtk_stream_out_type(::apollo::drivers::gnss::StreamStatus_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.StreamStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  int ins_stream_type_;
  int rtk_stream_in_type_;
  int rtk_stream_out_type_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class InsStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.InsStatus) */ {
 public:
  InsStatus();
  virtual ~InsStatus();

  InsStatus(const InsStatus& from);
  InsStatus(InsStatus&& from) noexcept
    : InsStatus() {
    *this = ::std::move(from);
  }

  inline InsStatus& operator=(const InsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsStatus& operator=(InsStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsStatus* internal_default_instance() {
    return reinterpret_cast<const InsStatus*>(
               &_InsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InsStatus& a, InsStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(InsStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsStatus* New() const final {
    return CreateMaybeMessage<InsStatus>(nullptr);
  }

  InsStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsStatus& from);
  void MergeFrom(const InsStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.InsStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InsStatus_Type Type;
  static constexpr Type INVALID =
    InsStatus_Type_INVALID;
  static constexpr Type CONVERGING =
    InsStatus_Type_CONVERGING;
  static constexpr Type GOOD =
    InsStatus_Type_GOOD;
  static inline bool Type_IsValid(int value) {
    return InsStatus_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    InsStatus_Type_Type_MIN;
  static constexpr Type Type_MAX =
    InsStatus_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    InsStatus_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return InsStatus_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return InsStatus_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return InsStatus_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.drivers.gnss.InsStatus.Type type = 2 [default = INVALID];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::drivers::gnss::InsStatus_Type type() const;
  void set_type(::apollo::drivers::gnss::InsStatus_Type value);
  private:
  ::apollo::drivers::gnss::InsStatus_Type _internal_type() const;
  void _internal_set_type(::apollo::drivers::gnss::InsStatus_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.InsStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  int type_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto;
};
// -------------------------------------------------------------------

class GnssStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.GnssStatus) */ {
 public:
  GnssStatus();
  virtual ~GnssStatus();

  GnssStatus(const GnssStatus& from);
  GnssStatus(GnssStatus&& from) noexcept
    : GnssStatus() {
    *this = ::std::move(from);
  }

  inline GnssStatus& operator=(const GnssStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssStatus& operator=(GnssStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssStatus* internal_default_instance() {
    return reinterpret_cast<const GnssStatus*>(
               &_GnssStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GnssStatus& a, GnssStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssStatus* New() const final {
    return CreateMaybeMessage<GnssStatus>(nullptr);
  }

  GnssStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssStatus& from);
  void MergeFrom(const GnssStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.GnssStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSolutionCompletedFieldNumber = 2,
    kSolutionStatusFieldNumber = 3,
    kPositionTypeFieldNumber = 4,
    kNumSatsFieldNumber = 5,
  };
  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional bool solution_completed = 2 [default = false];
  bool has_solution_completed() const;
  private:
  bool _internal_has_solution_completed() const;
  public:
  void clear_solution_completed();
  bool solution_completed() const;
  void set_solution_completed(bool value);
  private:
  bool _internal_solution_completed() const;
  void _internal_set_solution_completed(bool value);
  public:

  // optional uint32 solution_status = 3 [default = 0];
  bool has_solution_status() const;
  private:
  bool _internal_has_solution_status() const;
  public:
  void clear_solution_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_status() const;
  void set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_solution_status() const;
  void _internal_set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 position_type = 4 [default = 0];
  bool has_position_type() const;
  private:
  bool _internal_has_position_type() const;
  public:
  void clear_position_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type() const;
  void set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position_type() const;
  void _internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 num_sats = 5 [default = 0];
  bool has_num_sats() const;
  private:
  bool _internal_has_num_sats() const;
  public:
  void clear_num_sats();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sats() const;
  void set_num_sats(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_sats() const;
  void _internal_set_num_sats(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.GnssStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  bool solution_completed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solution_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sats_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamStatus

// optional .apollo.common.Header header = 1;
inline bool StreamStatus::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool StreamStatus::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& StreamStatus::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& StreamStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.StreamStatus.header)
  return _internal_header();
}
inline ::apollo::common::Header* StreamStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.StreamStatus.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* StreamStatus::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* StreamStatus::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.StreamStatus.header)
  return _internal_mutable_header();
}
inline void StreamStatus::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.StreamStatus.header)
}

// optional .apollo.drivers.gnss.StreamStatus.Type ins_stream_type = 2 [default = DISCONNECTED];
inline bool StreamStatus::_internal_has_ins_stream_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StreamStatus::has_ins_stream_type() const {
  return _internal_has_ins_stream_type();
}
inline void StreamStatus::clear_ins_stream_type() {
  ins_stream_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::gnss::StreamStatus_Type StreamStatus::_internal_ins_stream_type() const {
  return static_cast< ::apollo::drivers::gnss::StreamStatus_Type >(ins_stream_type_);
}
inline ::apollo::drivers::gnss::StreamStatus_Type StreamStatus::ins_stream_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.StreamStatus.ins_stream_type)
  return _internal_ins_stream_type();
}
inline void StreamStatus::_internal_set_ins_stream_type(::apollo::drivers::gnss::StreamStatus_Type value) {
  assert(::apollo::drivers::gnss::StreamStatus_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ins_stream_type_ = value;
}
inline void StreamStatus::set_ins_stream_type(::apollo::drivers::gnss::StreamStatus_Type value) {
  _internal_set_ins_stream_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.StreamStatus.ins_stream_type)
}

// optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_in_type = 3 [default = DISCONNECTED];
inline bool StreamStatus::_internal_has_rtk_stream_in_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StreamStatus::has_rtk_stream_in_type() const {
  return _internal_has_rtk_stream_in_type();
}
inline void StreamStatus::clear_rtk_stream_in_type() {
  rtk_stream_in_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::drivers::gnss::StreamStatus_Type StreamStatus::_internal_rtk_stream_in_type() const {
  return static_cast< ::apollo::drivers::gnss::StreamStatus_Type >(rtk_stream_in_type_);
}
inline ::apollo::drivers::gnss::StreamStatus_Type StreamStatus::rtk_stream_in_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.StreamStatus.rtk_stream_in_type)
  return _internal_rtk_stream_in_type();
}
inline void StreamStatus::_internal_set_rtk_stream_in_type(::apollo::drivers::gnss::StreamStatus_Type value) {
  assert(::apollo::drivers::gnss::StreamStatus_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  rtk_stream_in_type_ = value;
}
inline void StreamStatus::set_rtk_stream_in_type(::apollo::drivers::gnss::StreamStatus_Type value) {
  _internal_set_rtk_stream_in_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.StreamStatus.rtk_stream_in_type)
}

// optional .apollo.drivers.gnss.StreamStatus.Type rtk_stream_out_type = 4 [default = DISCONNECTED];
inline bool StreamStatus::_internal_has_rtk_stream_out_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StreamStatus::has_rtk_stream_out_type() const {
  return _internal_has_rtk_stream_out_type();
}
inline void StreamStatus::clear_rtk_stream_out_type() {
  rtk_stream_out_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::gnss::StreamStatus_Type StreamStatus::_internal_rtk_stream_out_type() const {
  return static_cast< ::apollo::drivers::gnss::StreamStatus_Type >(rtk_stream_out_type_);
}
inline ::apollo::drivers::gnss::StreamStatus_Type StreamStatus::rtk_stream_out_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.StreamStatus.rtk_stream_out_type)
  return _internal_rtk_stream_out_type();
}
inline void StreamStatus::_internal_set_rtk_stream_out_type(::apollo::drivers::gnss::StreamStatus_Type value) {
  assert(::apollo::drivers::gnss::StreamStatus_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  rtk_stream_out_type_ = value;
}
inline void StreamStatus::set_rtk_stream_out_type(::apollo::drivers::gnss::StreamStatus_Type value) {
  _internal_set_rtk_stream_out_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.StreamStatus.rtk_stream_out_type)
}

// -------------------------------------------------------------------

// InsStatus

// optional .apollo.common.Header header = 1;
inline bool InsStatus::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool InsStatus::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& InsStatus::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& InsStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.InsStatus.header)
  return _internal_header();
}
inline ::apollo::common::Header* InsStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.InsStatus.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* InsStatus::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* InsStatus::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.InsStatus.header)
  return _internal_mutable_header();
}
inline void InsStatus::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.InsStatus.header)
}

// optional .apollo.drivers.gnss.InsStatus.Type type = 2 [default = INVALID];
inline bool InsStatus::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InsStatus::has_type() const {
  return _internal_has_type();
}
inline void InsStatus::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::drivers::gnss::InsStatus_Type InsStatus::_internal_type() const {
  return static_cast< ::apollo::drivers::gnss::InsStatus_Type >(type_);
}
inline ::apollo::drivers::gnss::InsStatus_Type InsStatus::type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.InsStatus.type)
  return _internal_type();
}
inline void InsStatus::_internal_set_type(::apollo::drivers::gnss::InsStatus_Type value) {
  assert(::apollo::drivers::gnss::InsStatus_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void InsStatus::set_type(::apollo::drivers::gnss::InsStatus_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.InsStatus.type)
}

// -------------------------------------------------------------------

// GnssStatus

// optional .apollo.common.Header header = 1;
inline bool GnssStatus::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool GnssStatus::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& GnssStatus::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& GnssStatus::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssStatus.header)
  return _internal_header();
}
inline ::apollo::common::Header* GnssStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssStatus.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* GnssStatus::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* GnssStatus::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssStatus.header)
  return _internal_mutable_header();
}
inline void GnssStatus::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssStatus.header)
}

// optional bool solution_completed = 2 [default = false];
inline bool GnssStatus::_internal_has_solution_completed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GnssStatus::has_solution_completed() const {
  return _internal_has_solution_completed();
}
inline void GnssStatus::clear_solution_completed() {
  solution_completed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GnssStatus::_internal_solution_completed() const {
  return solution_completed_;
}
inline bool GnssStatus::solution_completed() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssStatus.solution_completed)
  return _internal_solution_completed();
}
inline void GnssStatus::_internal_set_solution_completed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  solution_completed_ = value;
}
inline void GnssStatus::set_solution_completed(bool value) {
  _internal_set_solution_completed(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssStatus.solution_completed)
}

// optional uint32 solution_status = 3 [default = 0];
inline bool GnssStatus::_internal_has_solution_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GnssStatus::has_solution_status() const {
  return _internal_has_solution_status();
}
inline void GnssStatus::clear_solution_status() {
  solution_status_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssStatus::_internal_solution_status() const {
  return solution_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssStatus::solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssStatus.solution_status)
  return _internal_solution_status();
}
inline void GnssStatus::_internal_set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  solution_status_ = value;
}
inline void GnssStatus::set_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_solution_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssStatus.solution_status)
}

// optional uint32 position_type = 4 [default = 0];
inline bool GnssStatus::_internal_has_position_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GnssStatus::has_position_type() const {
  return _internal_has_position_type();
}
inline void GnssStatus::clear_position_type() {
  position_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssStatus::_internal_position_type() const {
  return position_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssStatus::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssStatus.position_type)
  return _internal_position_type();
}
inline void GnssStatus::_internal_set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  position_type_ = value;
}
inline void GnssStatus::set_position_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssStatus.position_type)
}

// optional int32 num_sats = 5 [default = 0];
inline bool GnssStatus::_internal_has_num_sats() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GnssStatus::has_num_sats() const {
  return _internal_has_num_sats();
}
inline void GnssStatus::clear_num_sats() {
  num_sats_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GnssStatus::_internal_num_sats() const {
  return num_sats_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GnssStatus::num_sats() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssStatus.num_sats)
  return _internal_num_sats();
}
inline void GnssStatus::_internal_set_num_sats(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_sats_ = value;
}
inline void GnssStatus::set_num_sats(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_sats(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssStatus.num_sats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::gnss::StreamStatus_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::StreamStatus_Type>() {
  return ::apollo::drivers::gnss::StreamStatus_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::InsStatus_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::InsStatus_Type>() {
  return ::apollo::drivers::gnss::InsStatus_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fstatus_2eproto
