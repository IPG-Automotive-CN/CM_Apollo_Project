// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/config.proto

#include "modules/drivers/gnss/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewtonM2Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NovatelConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Stream_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Ntrip_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Serial_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Tcp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Udp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TF_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UbloxConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
namespace config {
class Stream_SerialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stream_Serial> _instance;
} _Stream_Serial_default_instance_;
class Stream_TcpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stream_Tcp> _instance;
} _Stream_Tcp_default_instance_;
class Stream_UdpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stream_Udp> _instance;
} _Stream_Udp_default_instance_;
class Stream_NtripDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stream_Ntrip> _instance;
} _Stream_Ntrip_default_instance_;
class StreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stream> _instance;
  const ::apollo::drivers::gnss::config::Stream_Serial* serial_;
  const ::apollo::drivers::gnss::config::Stream_Tcp* tcp_;
  const ::apollo::drivers::gnss::config::Stream_Udp* udp_;
  const ::apollo::drivers::gnss::config::Stream_Ntrip* ntrip_;
} _Stream_default_instance_;
class NovatelConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NovatelConfig> _instance;
} _NovatelConfig_default_instance_;
class NewtonM2ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewtonM2Config> _instance;
} _NewtonM2Config_default_instance_;
class UbloxConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UbloxConfig> _instance;
} _UbloxConfig_default_instance_;
class TFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TF> _instance;
} _TF_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
  const ::apollo::drivers::gnss::config::NovatelConfig* novatel_config_;
  const ::apollo::drivers::gnss::config::UbloxConfig* ublox_config_;
  const ::apollo::drivers::gnss::config::NewtonM2Config* newtonm2_config_;
} _Config_default_instance_;
}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Config_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {
      &scc_info_Stream_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
      &scc_info_NovatelConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
      &scc_info_UbloxConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
      &scc_info_NewtonM2Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
      &scc_info_TF_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_NewtonM2Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_NewtonM2Config_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::NewtonM2Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::NewtonM2Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewtonM2Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewtonM2Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_NovatelConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_NovatelConfig_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::NovatelConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::NovatelConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NovatelConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NovatelConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Stream_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Stream_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Stream_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {
      &scc_info_Stream_Serial_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
      &scc_info_Stream_Tcp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
      &scc_info_Stream_Udp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
      &scc_info_Stream_Ntrip_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Stream_Ntrip_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_Ntrip_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream_Ntrip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream_Ntrip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Ntrip_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stream_Ntrip_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Stream_Serial_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_Serial_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream_Serial();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream_Serial::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Serial_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stream_Serial_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Stream_Tcp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_Tcp_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream_Tcp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream_Tcp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Tcp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stream_Tcp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Stream_Udp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_Udp_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream_Udp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream_Udp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_Udp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stream_Udp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_TF_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.DefaultConstruct();
  *::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get_mutable() = std::string("world", 5);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get_mutable());
  ::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.DefaultConstruct();
  *::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get_mutable() = std::string("novatel", 7);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get_mutable());
  {
    void* ptr = &::apollo::drivers::gnss::config::_TF_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::TF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::TF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TF_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TF_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_UbloxConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_UbloxConfig_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::UbloxConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::UbloxConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UbloxConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UbloxConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, device_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, baud_rate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, address_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, address_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, address_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, port_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, mount_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, user_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, password_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, timeout_s_),
  0,
  4,
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, format_),
  offsetof(::apollo::drivers::gnss::config::StreamDefaultTypeInternal, serial_),
  offsetof(::apollo::drivers::gnss::config::StreamDefaultTypeInternal, tcp_),
  offsetof(::apollo::drivers::gnss::config::StreamDefaultTypeInternal, udp_),
  offsetof(::apollo::drivers::gnss::config::StreamDefaultTypeInternal, ntrip_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, push_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, imu_orientation_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NewtonM2Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NewtonM2Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::NewtonM2Config, imu_orientation_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::UbloxConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::UbloxConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, enable_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, data_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, command_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, rtk_from_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, rtk_to_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, login_commands_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, logout_commands_),
  offsetof(::apollo::drivers::gnss::config::ConfigDefaultTypeInternal, novatel_config_),
  offsetof(::apollo::drivers::gnss::config::ConfigDefaultTypeInternal, ublox_config_),
  offsetof(::apollo::drivers::gnss::config::ConfigDefaultTypeInternal, newtonm2_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, rtk_solution_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, imu_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, proj4_text_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, tf_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, wheel_parameters_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, gpsbin_folder_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, device_config_),
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  0,
  7,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::drivers::gnss::config::Stream_Serial)},
  { 9, 16, sizeof(::apollo::drivers::gnss::config::Stream_Tcp)},
  { 18, 25, sizeof(::apollo::drivers::gnss::config::Stream_Udp)},
  { 27, 38, sizeof(::apollo::drivers::gnss::config::Stream_Ntrip)},
  { 44, 56, sizeof(::apollo::drivers::gnss::config::Stream)},
  { 62, 68, sizeof(::apollo::drivers::gnss::config::NovatelConfig)},
  { 69, 75, sizeof(::apollo::drivers::gnss::config::NewtonM2Config)},
  { 76, 81, sizeof(::apollo::drivers::gnss::config::UbloxConfig)},
  { 81, 89, sizeof(::apollo::drivers::gnss::config::TF)},
  { 92, 113, sizeof(::apollo::drivers::gnss::config::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_Stream_Serial_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_Stream_Tcp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_Stream_Udp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_Stream_Ntrip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_Stream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_NovatelConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_NewtonM2Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_UbloxConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_TF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::config::_Config_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'modules/drivers/gnss/proto/config.prot"
  "o\022\032apollo.drivers.gnss.config\"\371\005\n\006Stream"
  "\0229\n\006format\030\001 \001(\0162).apollo.drivers.gnss.c"
  "onfig.Stream.Format\022;\n\006serial\030\002 \001(\0132).ap"
  "ollo.drivers.gnss.config.Stream.SerialH\000"
  "\0225\n\003tcp\030\003 \001(\0132&.apollo.drivers.gnss.conf"
  "ig.Stream.TcpH\000\0225\n\003udp\030\004 \001(\0132&.apollo.dr"
  "ivers.gnss.config.Stream.UdpH\000\0229\n\005ntrip\030"
  "\005 \001(\0132(.apollo.drivers.gnss.config.Strea"
  "m.NtripH\000\022\025\n\rpush_location\030\006 \001(\010\0321\n\006Seri"
  "al\022\016\n\006device\030\001 \001(\014\022\027\n\tbaud_rate\030\002 \001(\005:\0049"
  "600\032*\n\003Tcp\022\017\n\007address\030\001 \001(\014\022\022\n\004port\030\002 \001("
  "\005:\0043001\032*\n\003Udp\022\017\n\007address\030\001 \001(\014\022\022\n\004port\030"
  "\002 \001(\005:\0043001\032x\n\005Ntrip\022\017\n\007address\030\001 \001(\014\022\022\n"
  "\004port\030\002 \001(\005:\0042101\022\023\n\013mount_point\030\003 \001(\014\022\014"
  "\n\004user\030\004 \001(\014\022\020\n\010password\030\005 \001(\014\022\025\n\ttimeou"
  "t_s\030\006 \001(\r:\00230\"\251\001\n\006Format\022\013\n\007UNKNOWN\020\000\022\010\n"
  "\004NMEA\020\001\022\013\n\007RTCM_V2\020\002\022\013\n\007RTCM_V3\020\003\022\020\n\014NOV"
  "ATEL_TEXT\020\n\022\022\n\016NOVATEL_BINARY\020\013\022\016\n\nUBLOX"
  "_TEXT\020\024\022\020\n\014UBLOX_BINARY\020\025\022\021\n\rNEWTONM2_TE"
  "XT\020\036\022\023\n\017NEWTONM2_BINARY\020\037B\006\n\004type\"+\n\rNov"
  "atelConfig\022\032\n\017imu_orientation\030\001 \001(\005:\0015\","
  "\n\016NewtonM2Config\022\032\n\017imu_orientation\030\001 \001("
  "\005:\0015\"\r\n\013UbloxConfig\"U\n\002TF\022\027\n\010frame_id\030\001 "
  "\001(\t:\005world\022\037\n\016child_frame_id\030\002 \001(\t:\007nova"
  "tel\022\025\n\006enable\030\003 \001(\010:\005false\"\250\006\n\006Config\0220\n"
  "\004data\030\001 \001(\0132\".apollo.drivers.gnss.config"
  ".Stream\0223\n\007command\030\002 \001(\0132\".apollo.driver"
  "s.gnss.config.Stream\0224\n\010rtk_from\030\003 \001(\0132\""
  ".apollo.drivers.gnss.config.Stream\0222\n\006rt"
  "k_to\030\004 \001(\0132\".apollo.drivers.gnss.config."
  "Stream\022\026\n\016login_commands\030\005 \003(\014\022\027\n\017logout"
  "_commands\030\006 \003(\014\022C\n\016novatel_config\030\007 \001(\0132"
  ").apollo.drivers.gnss.config.NovatelConf"
  "igH\000\022\?\n\014ublox_config\030\010 \001(\0132\'.apollo.driv"
  "ers.gnss.config.UbloxConfigH\000\022E\n\017newtonm"
  "2_config\030\017 \001(\0132*.apollo.drivers.gnss.con"
  "fig.NewtonM2ConfigH\000\022M\n\021rtk_solution_typ"
  "e\030\t \001(\01622.apollo.drivers.gnss.config.Con"
  "fig.RtkSolutionType\0225\n\010imu_type\030\n \001(\0162#."
  "apollo.drivers.gnss.config.ImuType\022\022\n\npr"
  "oj4_text\030\013 \001(\t\022*\n\002tf\030\014 \001(\0132\036.apollo.driv"
  "ers.gnss.config.TF\022\030\n\020wheel_parameters\030\r"
  " \001(\t\022\025\n\rgpsbin_folder\030\016 \001(\t\"G\n\017RtkSoluti"
  "onType\022\031\n\025RTK_RECEIVER_SOLUTION\020\001\022\031\n\025RTK"
  "_SOFTWARE_SOLUTION\020\002B\017\n\rdevice_config*\246\001"
  "\n\007ImuType\022\r\n\tIMAR_FSAS\020\r\022\013\n\007ISA100C\020\032\022\r\n"
  "\tADIS16488\020\037\022\013\n\007STIM300\020 \022\n\n\006ISA100\020\"\022\020\n"
  "\014ISA100_400HZ\020&\022\021\n\rISA100C_400HZ\020\'\022\016\n\nCP"
  "T_XW5651\020(\022\t\n\005G320N\020)\022\t\n\005UM442\020*\022\014\n\010IAM2"
  "0680\0209"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_sccs[10] = {
  &scc_info_Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_NewtonM2Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_NovatelConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_Stream_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_Stream_Ntrip_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_Stream_Serial_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_Stream_Tcp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_Stream_Udp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_TF_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
  &scc_info_UbloxConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto = {
  &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto, "modules/drivers/gnss/proto/config.proto", 2006,
  &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_once, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_sccs, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto, 10, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto, file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto), true);
namespace apollo {
namespace drivers {
namespace gnss {
namespace config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stream_Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[0];
}
bool Stream_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 20:
    case 21:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Stream_Format Stream::UNKNOWN;
constexpr Stream_Format Stream::NMEA;
constexpr Stream_Format Stream::RTCM_V2;
constexpr Stream_Format Stream::RTCM_V3;
constexpr Stream_Format Stream::NOVATEL_TEXT;
constexpr Stream_Format Stream::NOVATEL_BINARY;
constexpr Stream_Format Stream::UBLOX_TEXT;
constexpr Stream_Format Stream::UBLOX_BINARY;
constexpr Stream_Format Stream::NEWTONM2_TEXT;
constexpr Stream_Format Stream::NEWTONM2_BINARY;
constexpr Stream_Format Stream::Format_MIN;
constexpr Stream_Format Stream::Format_MAX;
constexpr int Stream::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_RtkSolutionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[1];
}
bool Config_RtkSolutionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_RtkSolutionType Config::RTK_RECEIVER_SOLUTION;
constexpr Config_RtkSolutionType Config::RTK_SOFTWARE_SOLUTION;
constexpr Config_RtkSolutionType Config::RtkSolutionType_MIN;
constexpr Config_RtkSolutionType Config::RtkSolutionType_MAX;
constexpr int Config::RtkSolutionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImuType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto[2];
}
bool ImuType_IsValid(int value) {
  switch (value) {
    case 13:
    case 26:
    case 31:
    case 32:
    case 34:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 57:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Stream_Serial::InitAsDefaultInstance() {
}
class Stream_Serial::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream_Serial>()._has_bits_);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_baud_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Stream_Serial::Stream_Serial()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream.Serial)
}
Stream_Serial::Stream_Serial(const Stream_Serial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_device()) {
    device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  baud_rate_ = from.baud_rate_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Serial)
}

void Stream_Serial::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stream_Serial_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  baud_rate_ = 9600;
}

Stream_Serial::~Stream_Serial() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Serial)
  SharedDtor();
}

void Stream_Serial::SharedDtor() {
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stream_Serial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream_Serial& Stream_Serial::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stream_Serial_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Stream_Serial::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Serial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      device_.ClearNonDefaultToEmptyNoArena();
    }
    baud_rate_ = 9600;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Stream_Serial::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 baud_rate = 2 [default = 9600];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_baud_rate(&has_bits);
          baud_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stream_Serial::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Serial)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_device(), target);
  }

  // optional int32 baud_rate = 2 [default = 9600];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_baud_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Serial)
  return target;
}

size_t Stream_Serial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Serial)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_device());
    }

    // optional int32 baud_rate = 2 [default = 9600];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_baud_rate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Serial::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream.Serial)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Serial* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stream_Serial>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream.Serial)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream.Serial)
    MergeFrom(*source);
  }
}

void Stream_Serial::MergeFrom(const Stream_Serial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Serial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (cached_has_bits & 0x00000002u) {
      baud_rate_ = from.baud_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Serial::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream.Serial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Serial::CopyFrom(const Stream_Serial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Serial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Serial::IsInitialized() const {
  return true;
}

void Stream_Serial::InternalSwap(Stream_Serial* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(baud_rate_, other->baud_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Serial::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stream_Tcp::InitAsDefaultInstance() {
}
class Stream_Tcp::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream_Tcp>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Stream_Tcp::Stream_Tcp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream.Tcp)
}
Stream_Tcp::Stream_Tcp(const Stream_Tcp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Tcp)
}

void Stream_Tcp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stream_Tcp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 3001;
}

Stream_Tcp::~Stream_Tcp() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Tcp)
  SharedDtor();
}

void Stream_Tcp::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stream_Tcp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream_Tcp& Stream_Tcp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stream_Tcp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Stream_Tcp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Tcp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    port_ = 3001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Stream_Tcp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 2 [default = 3001];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stream_Tcp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Tcp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Tcp)
  return target;
}

size_t Stream_Tcp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Tcp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
    }

    // optional int32 port = 2 [default = 3001];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Tcp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Tcp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stream_Tcp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream.Tcp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream.Tcp)
    MergeFrom(*source);
  }
}

void Stream_Tcp::MergeFrom(const Stream_Tcp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Tcp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Tcp::CopyFrom(const Stream_Tcp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Tcp::IsInitialized() const {
  return true;
}

void Stream_Tcp::InternalSwap(Stream_Tcp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Tcp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stream_Udp::InitAsDefaultInstance() {
}
class Stream_Udp::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream_Udp>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Stream_Udp::Stream_Udp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream.Udp)
}
Stream_Udp::Stream_Udp(const Stream_Udp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Udp)
}

void Stream_Udp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stream_Udp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 3001;
}

Stream_Udp::~Stream_Udp() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Udp)
  SharedDtor();
}

void Stream_Udp::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stream_Udp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream_Udp& Stream_Udp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stream_Udp_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Stream_Udp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Udp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    port_ = 3001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Stream_Udp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 2 [default = 3001];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stream_Udp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Udp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Udp)
  return target;
}

size_t Stream_Udp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Udp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
    }

    // optional int32 port = 2 [default = 3001];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Udp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Udp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stream_Udp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream.Udp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream.Udp)
    MergeFrom(*source);
  }
}

void Stream_Udp::MergeFrom(const Stream_Udp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Udp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Udp::CopyFrom(const Stream_Udp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Udp::IsInitialized() const {
  return true;
}

void Stream_Udp::InternalSwap(Stream_Udp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Udp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stream_Ntrip::InitAsDefaultInstance() {
}
class Stream_Ntrip::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream_Ntrip>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mount_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeout_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Stream_Ntrip::Stream_Ntrip()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream.Ntrip)
}
Stream_Ntrip::Stream_Ntrip(const Stream_Ntrip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  mount_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mount_point()) {
    mount_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mount_point_);
  }
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_s_) -
    reinterpret_cast<char*>(&port_)) + sizeof(timeout_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Ntrip)
}

void Stream_Ntrip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stream_Ntrip_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mount_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 2101;
  timeout_s_ = 30u;
}

Stream_Ntrip::~Stream_Ntrip() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Ntrip)
  SharedDtor();
}

void Stream_Ntrip::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mount_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stream_Ntrip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream_Ntrip& Stream_Ntrip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stream_Ntrip_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Stream_Ntrip::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Ntrip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mount_point_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      user_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    port_ = 2101;
    timeout_s_ = 30u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Stream_Ntrip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 2 [default = 2101];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes mount_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mount_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes user = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout_s = 6 [default = 30];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_timeout_s(&has_bits);
          timeout_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stream_Ntrip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Ntrip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional int32 port = 2 [default = 2101];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // optional bytes mount_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mount_point(), target);
  }

  // optional bytes user = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_user(), target);
  }

  // optional bytes password = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_password(), target);
  }

  // optional uint32 timeout_s = 6 [default = 30];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeout_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Ntrip)
  return target;
}

size_t Stream_Ntrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Ntrip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_address());
    }

    // optional bytes mount_point = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_mount_point());
    }

    // optional bytes user = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_user());
    }

    // optional bytes password = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_password());
    }

    // optional int32 port = 2 [default = 2101];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

    // optional uint32 timeout_s = 6 [default = 30];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeout_s());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Ntrip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Ntrip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stream_Ntrip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream.Ntrip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream.Ntrip)
    MergeFrom(*source);
  }
}

void Stream_Ntrip::MergeFrom(const Stream_Ntrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mount_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mount_point_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000010u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_s_ = from.timeout_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Ntrip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Ntrip::CopyFrom(const Stream_Ntrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Ntrip::IsInitialized() const {
  return true;
}

void Stream_Ntrip::InternalSwap(Stream_Ntrip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mount_point_.Swap(&other->mount_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(timeout_s_, other->timeout_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream_Ntrip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stream::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::config::_Stream_default_instance_.serial_ = const_cast< ::apollo::drivers::gnss::config::Stream_Serial*>(
      ::apollo::drivers::gnss::config::Stream_Serial::internal_default_instance());
  ::apollo::drivers::gnss::config::_Stream_default_instance_.tcp_ = const_cast< ::apollo::drivers::gnss::config::Stream_Tcp*>(
      ::apollo::drivers::gnss::config::Stream_Tcp::internal_default_instance());
  ::apollo::drivers::gnss::config::_Stream_default_instance_.udp_ = const_cast< ::apollo::drivers::gnss::config::Stream_Udp*>(
      ::apollo::drivers::gnss::config::Stream_Udp::internal_default_instance());
  ::apollo::drivers::gnss::config::_Stream_default_instance_.ntrip_ = const_cast< ::apollo::drivers::gnss::config::Stream_Ntrip*>(
      ::apollo::drivers::gnss::config::Stream_Ntrip::internal_default_instance());
}
class Stream::_Internal {
 public:
  using HasBits = decltype(std::declval<Stream>()._has_bits_);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::gnss::config::Stream_Serial& serial(const Stream* msg);
  static const ::apollo::drivers::gnss::config::Stream_Tcp& tcp(const Stream* msg);
  static const ::apollo::drivers::gnss::config::Stream_Udp& udp(const Stream* msg);
  static const ::apollo::drivers::gnss::config::Stream_Ntrip& ntrip(const Stream* msg);
  static void set_has_push_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::drivers::gnss::config::Stream_Serial&
Stream::_Internal::serial(const Stream* msg) {
  return *msg->type_.serial_;
}
const ::apollo::drivers::gnss::config::Stream_Tcp&
Stream::_Internal::tcp(const Stream* msg) {
  return *msg->type_.tcp_;
}
const ::apollo::drivers::gnss::config::Stream_Udp&
Stream::_Internal::udp(const Stream* msg) {
  return *msg->type_.udp_;
}
const ::apollo::drivers::gnss::config::Stream_Ntrip&
Stream::_Internal::ntrip(const Stream* msg) {
  return *msg->type_.ntrip_;
}
void Stream::set_allocated_serial(::apollo::drivers::gnss::config::Stream_Serial* serial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (serial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      serial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serial, submessage_arena);
    }
    set_has_serial();
    type_.serial_ = serial;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.serial)
}
void Stream::set_allocated_tcp(::apollo::drivers::gnss::config::Stream_Tcp* tcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (tcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    set_has_tcp();
    type_.tcp_ = tcp;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.tcp)
}
void Stream::set_allocated_udp(::apollo::drivers::gnss::config::Stream_Udp* udp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (udp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      udp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, udp, submessage_arena);
    }
    set_has_udp();
    type_.udp_ = udp;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.udp)
}
void Stream::set_allocated_ntrip(::apollo::drivers::gnss::config::Stream_Ntrip* ntrip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (ntrip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ntrip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ntrip, submessage_arena);
    }
    set_has_ntrip();
    type_.ntrip_ = ntrip;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.ntrip)
}
Stream::Stream()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream)
}
Stream::Stream(const Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&push_location_) -
    reinterpret_cast<char*>(&format_)) + sizeof(push_location_));
  clear_has_type();
  switch (from.type_case()) {
    case kSerial: {
      _internal_mutable_serial()->::apollo::drivers::gnss::config::Stream_Serial::MergeFrom(from._internal_serial());
      break;
    }
    case kTcp: {
      _internal_mutable_tcp()->::apollo::drivers::gnss::config::Stream_Tcp::MergeFrom(from._internal_tcp());
      break;
    }
    case kUdp: {
      _internal_mutable_udp()->::apollo::drivers::gnss::config::Stream_Udp::MergeFrom(from._internal_udp());
      break;
    }
    case kNtrip: {
      _internal_mutable_ntrip()->::apollo::drivers::gnss::config::Stream_Ntrip::MergeFrom(from._internal_ntrip());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream)
}

void Stream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stream_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&push_location_) -
      reinterpret_cast<char*>(&format_)) + sizeof(push_location_));
  clear_has_type();
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream& Stream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stream_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Stream::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:apollo.drivers.gnss.config.Stream)
  switch (type_case()) {
    case kSerial: {
      delete type_.serial_;
      break;
    }
    case kTcp: {
      delete type_.tcp_;
      break;
    }
    case kUdp: {
      delete type_.udp_;
      break;
    }
    case kNtrip: {
      delete type_.ntrip_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&push_location_) -
        reinterpret_cast<char*>(&format_)) + sizeof(push_location_));
  }
  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Stream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::config::Stream_Format_IsValid(val))) {
            _internal_set_format(static_cast<::apollo::drivers::gnss::config::Stream_Format>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream.Serial serial = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_serial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream.Tcp tcp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream.Udp udp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_udp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream.Ntrip ntrip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ntrip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool push_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_push_location(&has_bits);
          push_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_format(), target);
  }

  switch (type_case()) {
    case kSerial: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::serial(this), target, stream);
      break;
    }
    case kTcp: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::tcp(this), target, stream);
      break;
    }
    case kUdp: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::udp(this), target, stream);
      break;
    }
    case kNtrip: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::ntrip(this), target, stream);
      break;
    }
    default: ;
  }
  // optional bool push_location = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_push_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
    }

    // optional bool push_location = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  switch (type_case()) {
    // optional .apollo.drivers.gnss.config.Stream.Serial serial = 2;
    case kSerial: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.serial_);
      break;
    }
    // optional .apollo.drivers.gnss.config.Stream.Tcp tcp = 3;
    case kTcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.tcp_);
      break;
    }
    // optional .apollo.drivers.gnss.config.Stream.Udp udp = 4;
    case kUdp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.udp_);
      break;
    }
    // optional .apollo.drivers.gnss.config.Stream.Ntrip ntrip = 5;
    case kNtrip: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.ntrip_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream)
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000002u) {
      push_location_ = from.push_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.type_case()) {
    case kSerial: {
      _internal_mutable_serial()->::apollo::drivers::gnss::config::Stream_Serial::MergeFrom(from._internal_serial());
      break;
    }
    case kTcp: {
      _internal_mutable_tcp()->::apollo::drivers::gnss::config::Stream_Tcp::MergeFrom(from._internal_tcp());
      break;
    }
    case kUdp: {
      _internal_mutable_udp()->::apollo::drivers::gnss::config::Stream_Udp::MergeFrom(from._internal_udp());
      break;
    }
    case kNtrip: {
      _internal_mutable_ntrip()->::apollo::drivers::gnss::config::Stream_Ntrip::MergeFrom(from._internal_ntrip());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Stream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::InternalSwap(Stream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(format_, other->format_);
  swap(push_location_, other->push_location_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NovatelConfig::InitAsDefaultInstance() {
}
class NovatelConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NovatelConfig>()._has_bits_);
  static void set_has_imu_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NovatelConfig::NovatelConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.NovatelConfig)
}
NovatelConfig::NovatelConfig(const NovatelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imu_orientation_ = from.imu_orientation_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.NovatelConfig)
}

void NovatelConfig::SharedCtor() {
  imu_orientation_ = 5;
}

NovatelConfig::~NovatelConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.NovatelConfig)
  SharedDtor();
}

void NovatelConfig::SharedDtor() {
}

void NovatelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NovatelConfig& NovatelConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NovatelConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void NovatelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.NovatelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_orientation_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NovatelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 imu_orientation = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_imu_orientation(&has_bits);
          imu_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NovatelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.NovatelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_imu_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.NovatelConfig)
  return target;
}

size_t NovatelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.NovatelConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 imu_orientation = 1 [default = 5];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imu_orientation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NovatelConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.NovatelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NovatelConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NovatelConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.NovatelConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.NovatelConfig)
    MergeFrom(*source);
  }
}

void NovatelConfig::MergeFrom(const NovatelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.NovatelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_imu_orientation()) {
    _internal_set_imu_orientation(from._internal_imu_orientation());
  }
}

void NovatelConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.NovatelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NovatelConfig::CopyFrom(const NovatelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.NovatelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NovatelConfig::IsInitialized() const {
  return true;
}

void NovatelConfig::InternalSwap(NovatelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(imu_orientation_, other->imu_orientation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NovatelConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewtonM2Config::InitAsDefaultInstance() {
}
class NewtonM2Config::_Internal {
 public:
  using HasBits = decltype(std::declval<NewtonM2Config>()._has_bits_);
  static void set_has_imu_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewtonM2Config::NewtonM2Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.NewtonM2Config)
}
NewtonM2Config::NewtonM2Config(const NewtonM2Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imu_orientation_ = from.imu_orientation_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.NewtonM2Config)
}

void NewtonM2Config::SharedCtor() {
  imu_orientation_ = 5;
}

NewtonM2Config::~NewtonM2Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.NewtonM2Config)
  SharedDtor();
}

void NewtonM2Config::SharedDtor() {
}

void NewtonM2Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewtonM2Config& NewtonM2Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewtonM2Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void NewtonM2Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.NewtonM2Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_orientation_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NewtonM2Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 imu_orientation = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_imu_orientation(&has_bits);
          imu_orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewtonM2Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.NewtonM2Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_imu_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.NewtonM2Config)
  return target;
}

size_t NewtonM2Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.NewtonM2Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 imu_orientation = 1 [default = 5];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imu_orientation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewtonM2Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.NewtonM2Config)
  GOOGLE_DCHECK_NE(&from, this);
  const NewtonM2Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewtonM2Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.NewtonM2Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.NewtonM2Config)
    MergeFrom(*source);
  }
}

void NewtonM2Config::MergeFrom(const NewtonM2Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.NewtonM2Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_imu_orientation()) {
    _internal_set_imu_orientation(from._internal_imu_orientation());
  }
}

void NewtonM2Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.NewtonM2Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewtonM2Config::CopyFrom(const NewtonM2Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.NewtonM2Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewtonM2Config::IsInitialized() const {
  return true;
}

void NewtonM2Config::InternalSwap(NewtonM2Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(imu_orientation_, other->imu_orientation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewtonM2Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UbloxConfig::InitAsDefaultInstance() {
}
class UbloxConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<UbloxConfig>()._has_bits_);
};

UbloxConfig::UbloxConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.UbloxConfig)
}
UbloxConfig::UbloxConfig(const UbloxConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.UbloxConfig)
}

void UbloxConfig::SharedCtor() {
}

UbloxConfig::~UbloxConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.UbloxConfig)
  SharedDtor();
}

void UbloxConfig::SharedDtor() {
}

void UbloxConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UbloxConfig& UbloxConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UbloxConfig_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void UbloxConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.UbloxConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UbloxConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UbloxConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.UbloxConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.UbloxConfig)
  return target;
}

size_t UbloxConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.UbloxConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UbloxConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.UbloxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UbloxConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UbloxConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.UbloxConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.UbloxConfig)
    MergeFrom(*source);
  }
}

void UbloxConfig::MergeFrom(const UbloxConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.UbloxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UbloxConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.UbloxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UbloxConfig::CopyFrom(const UbloxConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.UbloxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UbloxConfig::IsInitialized() const {
  return true;
}

void UbloxConfig::InternalSwap(UbloxConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UbloxConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TF::InitAsDefaultInstance() {
}
class TF::_Internal {
 public:
  using HasBits = decltype(std::declval<TF>()._has_bits_);
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_child_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TF::_i_give_permission_to_break_this_code_default_frame_id_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TF::_i_give_permission_to_break_this_code_default_child_frame_id_;
TF::TF()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.TF)
}
TF::TF(const TF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
  if (from._internal_has_frame_id()) {
    frame_id_.AssignWithDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(), from.frame_id_);
  }
  child_frame_id_.UnsafeSetDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
  if (from._internal_has_child_frame_id()) {
    child_frame_id_.AssignWithDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(), from.child_frame_id_);
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.TF)
}

void TF::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TF_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  frame_id_.UnsafeSetDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
  child_frame_id_.UnsafeSetDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
  enable_ = false;
}

TF::~TF() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.TF)
  SharedDtor();
}

void TF::SharedDtor() {
  frame_id_.DestroyNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
  child_frame_id_.DestroyNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
}

void TF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TF& TF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TF_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void TF::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.TF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      frame_id_.UnsafeMutablePointer()->assign(*&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      child_frame_id_.UnsafeMutablePointer()->assign(*&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
    }
  }
  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string frame_id = 1 [default = "world"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.gnss.config.TF.frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string child_frame_id = 2 [default = "novatel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_child_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.gnss.config.TF.child_frame_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enable(&has_bits);
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.TF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_id = 1 [default = "world"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.TF.frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame_id(), target);
  }

  // optional string child_frame_id = 2 [default = "novatel"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_child_frame_id().data(), static_cast<int>(this->_internal_child_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.TF.child_frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_child_frame_id(), target);
  }

  // optional bool enable = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.TF)
  return target;
}

size_t TF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.TF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string frame_id = 1 [default = "world"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frame_id());
    }

    // optional string child_frame_id = 2 [default = "novatel"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_child_frame_id());
    }

    // optional bool enable = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.TF)
  GOOGLE_DCHECK_NE(&from, this);
  const TF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.TF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.TF)
    MergeFrom(*source);
  }
}

void TF::MergeFrom(const TF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.TF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      frame_id_.AssignWithDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      child_frame_id_.AssignWithDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(), from.child_frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      enable_ = from.enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.TF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TF::CopyFrom(const TF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.TF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TF::IsInitialized() const {
  return true;
}

void TF::InternalSwap(TF* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  frame_id_.Swap(&other->frame_id_, &::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(),
    GetArenaNoVirtual());
  child_frame_id_.Swap(&other->child_frame_id_, &::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(),
    GetArenaNoVirtual());
  swap(enable_, other->enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->data_ = const_cast< ::apollo::drivers::gnss::config::Stream*>(
      ::apollo::drivers::gnss::config::Stream::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->command_ = const_cast< ::apollo::drivers::gnss::config::Stream*>(
      ::apollo::drivers::gnss::config::Stream::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->rtk_from_ = const_cast< ::apollo::drivers::gnss::config::Stream*>(
      ::apollo::drivers::gnss::config::Stream::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->rtk_to_ = const_cast< ::apollo::drivers::gnss::config::Stream*>(
      ::apollo::drivers::gnss::config::Stream::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_.novatel_config_ = const_cast< ::apollo::drivers::gnss::config::NovatelConfig*>(
      ::apollo::drivers::gnss::config::NovatelConfig::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_.ublox_config_ = const_cast< ::apollo::drivers::gnss::config::UbloxConfig*>(
      ::apollo::drivers::gnss::config::UbloxConfig::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_.newtonm2_config_ = const_cast< ::apollo::drivers::gnss::config::NewtonM2Config*>(
      ::apollo::drivers::gnss::config::NewtonM2Config::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->tf_ = const_cast< ::apollo::drivers::gnss::config::TF*>(
      ::apollo::drivers::gnss::config::TF::internal_default_instance());
}
class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static const ::apollo::drivers::gnss::config::Stream& data(const Config* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::drivers::gnss::config::Stream& command(const Config* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::drivers::gnss::config::Stream& rtk_from(const Config* msg);
  static void set_has_rtk_from(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::drivers::gnss::config::Stream& rtk_to(const Config* msg);
  static void set_has_rtk_to(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::drivers::gnss::config::NovatelConfig& novatel_config(const Config* msg);
  static const ::apollo::drivers::gnss::config::UbloxConfig& ublox_config(const Config* msg);
  static const ::apollo::drivers::gnss::config::NewtonM2Config& newtonm2_config(const Config* msg);
  static void set_has_rtk_solution_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_imu_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_proj4_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::drivers::gnss::config::TF& tf(const Config* msg);
  static void set_has_tf(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wheel_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gpsbin_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::drivers::gnss::config::Stream&
Config::_Internal::data(const Config* msg) {
  return *msg->data_;
}
const ::apollo::drivers::gnss::config::Stream&
Config::_Internal::command(const Config* msg) {
  return *msg->command_;
}
const ::apollo::drivers::gnss::config::Stream&
Config::_Internal::rtk_from(const Config* msg) {
  return *msg->rtk_from_;
}
const ::apollo::drivers::gnss::config::Stream&
Config::_Internal::rtk_to(const Config* msg) {
  return *msg->rtk_to_;
}
const ::apollo::drivers::gnss::config::NovatelConfig&
Config::_Internal::novatel_config(const Config* msg) {
  return *msg->device_config_.novatel_config_;
}
const ::apollo::drivers::gnss::config::UbloxConfig&
Config::_Internal::ublox_config(const Config* msg) {
  return *msg->device_config_.ublox_config_;
}
const ::apollo::drivers::gnss::config::NewtonM2Config&
Config::_Internal::newtonm2_config(const Config* msg) {
  return *msg->device_config_.newtonm2_config_;
}
const ::apollo::drivers::gnss::config::TF&
Config::_Internal::tf(const Config* msg) {
  return *msg->tf_;
}
void Config::set_allocated_novatel_config(::apollo::drivers::gnss::config::NovatelConfig* novatel_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_device_config();
  if (novatel_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      novatel_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, novatel_config, submessage_arena);
    }
    set_has_novatel_config();
    device_config_.novatel_config_ = novatel_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.novatel_config)
}
void Config::set_allocated_ublox_config(::apollo::drivers::gnss::config::UbloxConfig* ublox_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_device_config();
  if (ublox_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ublox_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ublox_config, submessage_arena);
    }
    set_has_ublox_config();
    device_config_.ublox_config_ = ublox_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.ublox_config)
}
void Config::set_allocated_newtonm2_config(::apollo::drivers::gnss::config::NewtonM2Config* newtonm2_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_device_config();
  if (newtonm2_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newtonm2_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newtonm2_config, submessage_arena);
    }
    set_has_newtonm2_config();
    device_config_.newtonm2_config_ = newtonm2_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.newtonm2_config)
}
Config::Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      login_commands_(from.login_commands_),
      logout_commands_(from.logout_commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proj4_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_proj4_text()) {
    proj4_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proj4_text_);
  }
  wheel_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_wheel_parameters()) {
    wheel_parameters_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wheel_parameters_);
  }
  gpsbin_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gpsbin_folder()) {
    gpsbin_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gpsbin_folder_);
  }
  if (from._internal_has_data()) {
    data_ = new ::apollo::drivers::gnss::config::Stream(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_command()) {
    command_ = new ::apollo::drivers::gnss::config::Stream(*from.command_);
  } else {
    command_ = nullptr;
  }
  if (from._internal_has_rtk_from()) {
    rtk_from_ = new ::apollo::drivers::gnss::config::Stream(*from.rtk_from_);
  } else {
    rtk_from_ = nullptr;
  }
  if (from._internal_has_rtk_to()) {
    rtk_to_ = new ::apollo::drivers::gnss::config::Stream(*from.rtk_to_);
  } else {
    rtk_to_ = nullptr;
  }
  if (from._internal_has_tf()) {
    tf_ = new ::apollo::drivers::gnss::config::TF(*from.tf_);
  } else {
    tf_ = nullptr;
  }
  ::memcpy(&rtk_solution_type_, &from.rtk_solution_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_type_) -
    reinterpret_cast<char*>(&rtk_solution_type_)) + sizeof(imu_type_));
  clear_has_device_config();
  switch (from.device_config_case()) {
    case kNovatelConfig: {
      _internal_mutable_novatel_config()->::apollo::drivers::gnss::config::NovatelConfig::MergeFrom(from._internal_novatel_config());
      break;
    }
    case kUbloxConfig: {
      _internal_mutable_ublox_config()->::apollo::drivers::gnss::config::UbloxConfig::MergeFrom(from._internal_ublox_config());
      break;
    }
    case kNewtonm2Config: {
      _internal_mutable_newtonm2_config()->::apollo::drivers::gnss::config::NewtonM2Config::MergeFrom(from._internal_newtonm2_config());
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  proj4_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wheel_parameters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpsbin_folder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tf_) -
      reinterpret_cast<char*>(&data_)) + sizeof(tf_));
  rtk_solution_type_ = 1;
  imu_type_ = 13;
  clear_has_device_config();
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  proj4_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wheel_parameters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gpsbin_folder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete rtk_from_;
  if (this != internal_default_instance()) delete rtk_to_;
  if (this != internal_default_instance()) delete tf_;
  if (has_device_config()) {
    clear_device_config();
  }
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config::clear_device_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.drivers.gnss.config.Config)
  switch (device_config_case()) {
    case kNovatelConfig: {
      delete device_config_.novatel_config_;
      break;
    }
    case kUbloxConfig: {
      delete device_config_.ublox_config_;
      break;
    }
    case kNewtonm2Config: {
      delete device_config_.newtonm2_config_;
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICE_CONFIG_NOT_SET;
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_commands_.Clear();
  logout_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      proj4_text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_parameters_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gpsbin_folder_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(command_ != nullptr);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rtk_from_ != nullptr);
      rtk_from_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(rtk_to_ != nullptr);
      rtk_to_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tf_ != nullptr);
      tf_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    rtk_solution_type_ = 1;
    imu_type_ = 13;
  }
  clear_device_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.config.Stream data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtk_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtk_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes login_commands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_login_commands();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes logout_commands = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logout_commands();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.NovatelConfig novatel_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_novatel_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.UbloxConfig ublox_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ublox_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::config::Config_RtkSolutionType_IsValid(val))) {
            _internal_set_rtk_solution_type(static_cast<::apollo::drivers::gnss::config::Config_RtkSolutionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::config::ImuType_IsValid(val))) {
            _internal_set_imu_type(static_cast<::apollo::drivers::gnss::config::ImuType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string proj4_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_proj4_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.gnss.config.Config.proj4_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.TF tf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string wheel_parameters = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_wheel_parameters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.gnss.config.Config.wheel_parameters");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gpsbin_folder = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_gpsbin_folder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.drivers.gnss.config.Config.gpsbin_folder");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_newtonm2_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.config.Stream data = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional .apollo.drivers.gnss.config.Stream command = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command(this), target, stream);
  }

  // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rtk_from(this), target, stream);
  }

  // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rtk_to(this), target, stream);
  }

  // repeated bytes login_commands = 5;
  for (int i = 0, n = this->_internal_login_commands_size(); i < n; i++) {
    const auto& s = this->_internal_login_commands(i);
    target = stream->WriteBytes(5, s, target);
  }

  // repeated bytes logout_commands = 6;
  for (int i = 0, n = this->_internal_logout_commands_size(); i < n; i++) {
    const auto& s = this->_internal_logout_commands(i);
    target = stream->WriteBytes(6, s, target);
  }

  switch (device_config_case()) {
    case kNovatelConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::novatel_config(this), target, stream);
      break;
    }
    case kUbloxConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::ublox_config(this), target, stream);
      break;
    }
    default: ;
  }
  // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_rtk_solution_type(), target);
  }

  // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_imu_type(), target);
  }

  // optional string proj4_text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proj4_text().data(), static_cast<int>(this->_internal_proj4_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.proj4_text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_proj4_text(), target);
  }

  // optional .apollo.drivers.gnss.config.TF tf = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::tf(this), target, stream);
  }

  // optional string wheel_parameters = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wheel_parameters().data(), static_cast<int>(this->_internal_wheel_parameters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.wheel_parameters");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_wheel_parameters(), target);
  }

  // optional string gpsbin_folder = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gpsbin_folder().data(), static_cast<int>(this->_internal_gpsbin_folder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.gpsbin_folder");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_gpsbin_folder(), target);
  }

  // optional .apollo.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
  if (_internal_has_newtonm2_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::newtonm2_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes login_commands = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(login_commands_.size());
  for (int i = 0, n = login_commands_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      login_commands_.Get(i));
  }

  // repeated bytes logout_commands = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logout_commands_.size());
  for (int i = 0, n = logout_commands_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      logout_commands_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string proj4_text = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_proj4_text());
    }

    // optional string wheel_parameters = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wheel_parameters());
    }

    // optional string gpsbin_folder = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gpsbin_folder());
    }

    // optional .apollo.drivers.gnss.config.Stream data = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional .apollo.drivers.gnss.config.Stream command = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rtk_from_);
    }

    // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rtk_to_);
    }

    // optional .apollo.drivers.gnss.config.TF tf = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tf_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rtk_solution_type());
    }

    // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imu_type());
    }

  }
  switch (device_config_case()) {
    // optional .apollo.drivers.gnss.config.NovatelConfig novatel_config = 7;
    case kNovatelConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_config_.novatel_config_);
      break;
    }
    // optional .apollo.drivers.gnss.config.UbloxConfig ublox_config = 8;
    case kUbloxConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_config_.ublox_config_);
      break;
    }
    // optional .apollo.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
    case kNewtonm2Config: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_config_.newtonm2_config_);
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  login_commands_.MergeFrom(from.login_commands_);
  logout_commands_.MergeFrom(from.logout_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      proj4_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proj4_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      wheel_parameters_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.wheel_parameters_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      gpsbin_folder_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gpsbin_folder_);
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_data()->::apollo::drivers::gnss::config::Stream::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_command()->::apollo::drivers::gnss::config::Stream::MergeFrom(from._internal_command());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rtk_from()->::apollo::drivers::gnss::config::Stream::MergeFrom(from._internal_rtk_from());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_rtk_to()->::apollo::drivers::gnss::config::Stream::MergeFrom(from._internal_rtk_to());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_tf()->::apollo::drivers::gnss::config::TF::MergeFrom(from._internal_tf());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      rtk_solution_type_ = from.rtk_solution_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      imu_type_ = from.imu_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.device_config_case()) {
    case kNovatelConfig: {
      _internal_mutable_novatel_config()->::apollo::drivers::gnss::config::NovatelConfig::MergeFrom(from._internal_novatel_config());
      break;
    }
    case kUbloxConfig: {
      _internal_mutable_ublox_config()->::apollo::drivers::gnss::config::UbloxConfig::MergeFrom(from._internal_ublox_config());
      break;
    }
    case kNewtonm2Config: {
      _internal_mutable_newtonm2_config()->::apollo::drivers::gnss::config::NewtonM2Config::MergeFrom(from._internal_newtonm2_config());
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  login_commands_.InternalSwap(&other->login_commands_);
  logout_commands_.InternalSwap(&other->logout_commands_);
  proj4_text_.Swap(&other->proj4_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wheel_parameters_.Swap(&other->wheel_parameters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gpsbin_folder_.Swap(&other->gpsbin_folder_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(command_, other->command_);
  swap(rtk_from_, other->rtk_from_);
  swap(rtk_to_, other->rtk_to_);
  swap(tf_, other->tf_);
  swap(rtk_solution_type_, other->rtk_solution_type_);
  swap(imu_type_, other->imu_type_);
  swap(device_config_, other->device_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream_Serial* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Serial >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream_Serial >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream_Tcp* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Tcp >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream_Tcp >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream_Udp* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Udp >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream_Udp >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream_Ntrip* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Ntrip >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream_Ntrip >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Stream* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::NovatelConfig* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::NovatelConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::NovatelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::NewtonM2Config* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::NewtonM2Config >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::NewtonM2Config >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::UbloxConfig* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::UbloxConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::UbloxConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::TF* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::TF >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::TF >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::config::Config* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Config >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
