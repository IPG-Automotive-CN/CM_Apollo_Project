// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss.proto

#include "modules/drivers/gnss/proto/gnss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointLLH_modules_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RangeInfo_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class GnssDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gnss> _instance;
} _Gnss_default_instance_;
class RangeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RangeInfo> _instance;
} _RangeInfo_default_instance_;
class GnssRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GnssRange> _instance;
} _GnssRange_default_instance_;
class RawDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawData> _instance;
} _RawData_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
static void InitDefaultsscc_info_Gnss_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_Gnss_default_instance_;
    new (ptr) ::apollo::drivers::gnss::Gnss();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::Gnss::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Gnss_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Gnss_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_PointLLH_modules_2fcommon_2fproto_2fgeometry_2eproto.base,
      &scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_GnssRange_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_GnssRange_default_instance_;
    new (ptr) ::apollo::drivers::gnss::GnssRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::GnssRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GnssRange_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GnssRange_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_RangeInfo_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base,}};

static void InitDefaultsscc_info_RangeInfo_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_RangeInfo_default_instance_;
    new (ptr) ::apollo::drivers::gnss::RangeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::RangeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RangeInfo_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RangeInfo_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto}, {}};

static void InitDefaultsscc_info_RawData_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_RawData_default_instance_;
    new (ptr) ::apollo::drivers::gnss::RawData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::RawData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawData_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawData_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, velocity_latency_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, position_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, position_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, linear_velocity_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, num_sats_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, solution_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, position_type_),
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, constellation_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, prn_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, carrier_frequency_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, pseudorange_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, pseudorange_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, carrier_phase_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, carrier_phase_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, doppler_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, doppler_std_dev_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, cno_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RangeInfo, lock_time_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::GnssRange, ranges_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RawData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RawData, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::drivers::gnss::RawData, data_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::apollo::drivers::gnss::Gnss)},
  { 27, 43, sizeof(::apollo::drivers::gnss::RangeInfo)},
  { 54, 62, sizeof(::apollo::drivers::gnss::GnssRange)},
  { 65, 72, sizeof(::apollo::drivers::gnss::RawData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::_Gnss_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::_RangeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::_GnssRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::drivers::gnss::_RawData_default_instance_),
};

const char descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/drivers/gnss/proto/gnss.proto\022"
  "\023apollo.drivers.gnss\032!modules/common/pro"
  "to/header.proto\032#modules/common/proto/ge"
  "ometry.proto\"\202\004\n\004Gnss\022%\n\006header\030\001 \001(\0132\025."
  "apollo.common.Header\022\030\n\020measurement_time"
  "\030\002 \001(\001\022\033\n\020velocity_latency\030\003 \001(\002:\0010\022)\n\010p"
  "osition\030\004 \001(\0132\027.apollo.common.PointLLH\0220"
  "\n\020position_std_dev\030\005 \001(\0132\026.apollo.common"
  ".Point3D\022/\n\017linear_velocity\030\006 \001(\0132\026.apol"
  "lo.common.Point3D\0227\n\027linear_velocity_std"
  "_dev\030\007 \001(\0132\026.apollo.common.Point3D\022\020\n\010nu"
  "m_sats\030\010 \001(\005\022,\n\004type\030\t \001(\0162\036.apollo.driv"
  "ers.gnss.Gnss.Type\022\027\n\017solution_status\030\n "
  "\001(\r\022\025\n\rposition_type\030\013 \001(\r\"e\n\004Type\022\013\n\007IN"
  "VALID\020\000\022\016\n\nPROPAGATED\020\001\022\n\n\006SINGLE\020\002\022\013\n\007P"
  "SRDIFF\020\003\022\007\n\003PPP\020\004\022\r\n\tRTK_FLOAT\020\005\022\017\n\013RTK_"
  "INTEGER\020\006\"\251\003\n\tRangeInfo\022H\n\rconstellation"
  "\030\001 \001(\0162,.apollo.drivers.gnss.RangeInfo.C"
  "onstellation:\003GPS\022\013\n\003prn\030\002 \001(\005\022\031\n\021carrie"
  "r_frequency\030\003 \001(\007\022\030\n\013pseudorange\030\004 \001(\001:\003"
  "nan\022 \n\023pseudorange_std_dev\030\005 \001(\002:\003nan\022\032\n"
  "\rcarrier_phase\030\006 \001(\001:\003nan\022\"\n\025carrier_pha"
  "se_std_dev\030\007 \001(\002:\003nan\022\024\n\007doppler\030\010 \001(\002:\003"
  "nan\022\034\n\017doppler_std_dev\030\t \001(\002:\003nan\022\017\n\003cno"
  "\030\n \001(\005:\002-1\022\025\n\tlock_time\030\013 \001(\005:\002-1\"R\n\rCon"
  "stellation\022\007\n\003GPS\020\000\022\013\n\007GLONASS\020\001\022\010\n\004SBAS"
  "\020\002\022\013\n\007GALILEO\020\003\022\n\n\006BEIDOU\020\004\022\010\n\004QZSS\020\005\"|\n"
  "\tGnssRange\022%\n\006header\030\001 \001(\0132\025.apollo.comm"
  "on.Header\022\030\n\020measurement_time\030\002 \001(\001\022.\n\006r"
  "anges\030\003 \003(\0132\036.apollo.drivers.gnss.RangeI"
  "nfo\">\n\007RawData\022%\n\006header\030\001 \001(\0132\025.apollo."
  "common.Header\022\014\n\004data\030\002 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_sccs[4] = {
  &scc_info_Gnss_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base,
  &scc_info_GnssRange_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base,
  &scc_info_RangeInfo_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base,
  &scc_info_RawData_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once;
static bool descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto = {
  &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_initialized, descriptor_table_protodef_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto, "modules/drivers/gnss/proto/gnss.proto", 1267,
  &descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_once, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_sccs, descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::offsets,
  file_level_metadata_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto, 4, file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto, file_level_service_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto), true);
namespace apollo {
namespace drivers {
namespace gnss {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gnss_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[0];
}
bool Gnss_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Gnss_Type Gnss::INVALID;
constexpr Gnss_Type Gnss::PROPAGATED;
constexpr Gnss_Type Gnss::SINGLE;
constexpr Gnss_Type Gnss::PSRDIFF;
constexpr Gnss_Type Gnss::PPP;
constexpr Gnss_Type Gnss::RTK_FLOAT;
constexpr Gnss_Type Gnss::RTK_INTEGER;
constexpr Gnss_Type Gnss::Type_MIN;
constexpr Gnss_Type Gnss::Type_MAX;
constexpr int Gnss::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RangeInfo_Constellation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto);
  return file_level_enum_descriptors_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto[1];
}
bool RangeInfo_Constellation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RangeInfo_Constellation RangeInfo::GPS;
constexpr RangeInfo_Constellation RangeInfo::GLONASS;
constexpr RangeInfo_Constellation RangeInfo::SBAS;
constexpr RangeInfo_Constellation RangeInfo::GALILEO;
constexpr RangeInfo_Constellation RangeInfo::BEIDOU;
constexpr RangeInfo_Constellation RangeInfo::QZSS;
constexpr RangeInfo_Constellation RangeInfo::Constellation_MIN;
constexpr RangeInfo_Constellation RangeInfo::Constellation_MAX;
constexpr int RangeInfo::Constellation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Gnss::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::PointLLH*>(
      ::apollo::common::PointLLH::internal_default_instance());
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->position_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->linear_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
class Gnss::_Internal {
 public:
  using HasBits = decltype(std::declval<Gnss>()._has_bits_);
  static const ::apollo::common::Header& header(const Gnss* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_velocity_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::common::PointLLH& position(const Gnss* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& position_std_dev(const Gnss* msg);
  static void set_has_position_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& linear_velocity(const Gnss* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& linear_velocity_std_dev(const Gnss* msg);
  static void set_has_linear_velocity_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_sats(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_solution_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_position_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::apollo::common::Header&
Gnss::_Internal::header(const Gnss* msg) {
  return *msg->header_;
}
const ::apollo::common::PointLLH&
Gnss::_Internal::position(const Gnss* msg) {
  return *msg->position_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::position_std_dev(const Gnss* msg) {
  return *msg->position_std_dev_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::linear_velocity(const Gnss* msg) {
  return *msg->linear_velocity_;
}
const ::apollo::common::Point3D&
Gnss::_Internal::linear_velocity_std_dev(const Gnss* msg) {
  return *msg->linear_velocity_std_dev_;
}
void Gnss::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Gnss::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Gnss::clear_position_std_dev() {
  if (position_std_dev_ != nullptr) position_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Gnss::clear_linear_velocity() {
  if (linear_velocity_ != nullptr) linear_velocity_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Gnss::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != nullptr) linear_velocity_std_dev_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Gnss::Gnss()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.Gnss)
}
Gnss::Gnss(const Gnss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::apollo::common::PointLLH(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_position_std_dev()) {
    position_std_dev_ = new ::apollo::common::Point3D(*from.position_std_dev_);
  } else {
    position_std_dev_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::apollo::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_linear_velocity_std_dev()) {
    linear_velocity_std_dev_ = new ::apollo::common::Point3D(*from.linear_velocity_std_dev_);
  } else {
    linear_velocity_std_dev_ = nullptr;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_type_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(position_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Gnss)
}

void Gnss::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Gnss_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(position_type_));
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Gnss)
  SharedDtor();
}

void Gnss::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_std_dev_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_velocity_std_dev_;
}

void Gnss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gnss& Gnss::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gnss_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base);
  return *internal_default_instance();
}


void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Gnss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(position_std_dev_ != nullptr);
      position_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linear_velocity_ != nullptr);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(linear_velocity_std_dev_ != nullptr);
      linear_velocity_std_dev_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sats_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(num_sats_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_type_) -
        reinterpret_cast<char*>(&type_)) + sizeof(position_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Gnss::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double measurement_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_measurement_time(&has_bits);
          measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float velocity_latency = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_velocity_latency(&has_bits);
          velocity_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.PointLLH position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position_std_dev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity_std_dev(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_sats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_sats(&has_bits);
          num_sats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.drivers.gnss.Gnss.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::Gnss_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::drivers::gnss::Gnss_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 solution_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_solution_status(&has_bits);
          solution_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 position_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_position_type(&has_bits);
          position_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gnss::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Gnss)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurement_time(), target);
  }

  // optional float velocity_latency = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity_latency(), target);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // optional .apollo.common.Point3D position_std_dev = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::position_std_dev(this), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::linear_velocity(this), target, stream);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::linear_velocity_std_dev(this), target, stream);
  }

  // optional int32 num_sats = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_sats(), target);
  }

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  // optional uint32 solution_status = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_solution_status(), target);
  }

  // optional uint32 position_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_position_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Gnss)
  return target;
}

size_t Gnss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Gnss)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.PointLLH position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D position_std_dev = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_std_dev_);
    }

    // optional .apollo.common.Point3D linear_velocity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_velocity_std_dev_);
    }

    // optional double measurement_time = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional float velocity_latency = 3 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 num_sats = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_sats());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .apollo.drivers.gnss.Gnss.Type type = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 solution_status = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_solution_status());
    }

    // optional uint32 position_type = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gnss>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.Gnss)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.Gnss)
    MergeFrom(*source);
  }
}

void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::apollo::common::PointLLH::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_position_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000020u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      velocity_latency_ = from.velocity_latency_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_sats_ = from.num_sats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      solution_status_ = from.solution_status_;
    }
    if (cached_has_bits & 0x00000400u) {
      position_type_ = from.position_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gnss::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {
  return true;
}

void Gnss::InternalSwap(Gnss* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(position_, other->position_);
  swap(position_std_dev_, other->position_std_dev_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  swap(measurement_time_, other->measurement_time_);
  swap(velocity_latency_, other->velocity_latency_);
  swap(num_sats_, other->num_sats_);
  swap(type_, other->type_);
  swap(solution_status_, other->solution_status_);
  swap(position_type_, other->position_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gnss::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RangeInfo::InitAsDefaultInstance() {
}
class RangeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeInfo>()._has_bits_);
  static void set_has_constellation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_carrier_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pseudorange(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pseudorange_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_carrier_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_carrier_phase_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_doppler(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_doppler_std_dev(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cno(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lock_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

RangeInfo::RangeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.RangeInfo)
}
RangeInfo::RangeInfo(const RangeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&constellation_, &from.constellation_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_time_) -
    reinterpret_cast<char*>(&constellation_)) + sizeof(lock_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.RangeInfo)
}

void RangeInfo::SharedCtor() {
  ::memset(&constellation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&carrier_frequency_) -
      reinterpret_cast<char*>(&constellation_)) + sizeof(carrier_frequency_));
  pseudorange_ = std::numeric_limits<double>::quiet_NaN();
  carrier_phase_ = std::numeric_limits<double>::quiet_NaN();
  pseudorange_std_dev_ = std::numeric_limits<float>::quiet_NaN();
  carrier_phase_std_dev_ = std::numeric_limits<float>::quiet_NaN();
  doppler_ = std::numeric_limits<float>::quiet_NaN();
  doppler_std_dev_ = std::numeric_limits<float>::quiet_NaN();
  cno_ = -1;
  lock_time_ = -1;
}

RangeInfo::~RangeInfo() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.RangeInfo)
  SharedDtor();
}

void RangeInfo::SharedDtor() {
}

void RangeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeInfo& RangeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RangeInfo_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base);
  return *internal_default_instance();
}


void RangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.RangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&constellation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&carrier_frequency_) -
        reinterpret_cast<char*>(&constellation_)) + sizeof(carrier_frequency_));
    pseudorange_ = std::numeric_limits<double>::quiet_NaN();
    carrier_phase_ = std::numeric_limits<double>::quiet_NaN();
    pseudorange_std_dev_ = std::numeric_limits<float>::quiet_NaN();
    carrier_phase_std_dev_ = std::numeric_limits<float>::quiet_NaN();
    doppler_ = std::numeric_limits<float>::quiet_NaN();
  }
  if (cached_has_bits & 0x00000700u) {
    doppler_std_dev_ = std::numeric_limits<float>::quiet_NaN();
    cno_ = -1;
    lock_time_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RangeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::drivers::gnss::RangeInfo_Constellation_IsValid(val))) {
            _internal_set_constellation(static_cast<::apollo::drivers::gnss::RangeInfo_Constellation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 prn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prn(&has_bits);
          prn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 carrier_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_carrier_frequency(&has_bits);
          carrier_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional double pseudorange = 4 [default = nan];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_pseudorange(&has_bits);
          pseudorange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float pseudorange_std_dev = 5 [default = nan];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_pseudorange_std_dev(&has_bits);
          pseudorange_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double carrier_phase = 6 [default = nan];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_carrier_phase(&has_bits);
          carrier_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float carrier_phase_std_dev = 7 [default = nan];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_carrier_phase_std_dev(&has_bits);
          carrier_phase_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float doppler = 8 [default = nan];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_doppler(&has_bits);
          doppler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float doppler_std_dev = 9 [default = nan];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_doppler_std_dev(&has_bits);
          doppler_std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 cno = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cno(&has_bits);
          cno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lock_time = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lock_time(&has_bits);
          lock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.RangeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_constellation(), target);
  }

  // optional int32 prn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_prn(), target);
  }

  // optional fixed32 carrier_frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_carrier_frequency(), target);
  }

  // optional double pseudorange = 4 [default = nan];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_pseudorange(), target);
  }

  // optional float pseudorange_std_dev = 5 [default = nan];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pseudorange_std_dev(), target);
  }

  // optional double carrier_phase = 6 [default = nan];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_carrier_phase(), target);
  }

  // optional float carrier_phase_std_dev = 7 [default = nan];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_carrier_phase_std_dev(), target);
  }

  // optional float doppler = 8 [default = nan];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_doppler(), target);
  }

  // optional float doppler_std_dev = 9 [default = nan];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_doppler_std_dev(), target);
  }

  // optional int32 cno = 10 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_cno(), target);
  }

  // optional int32 lock_time = 11 [default = -1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_lock_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.RangeInfo)
  return target;
}

size_t RangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.RangeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_constellation());
    }

    // optional int32 prn = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_prn());
    }

    // optional fixed32 carrier_frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional double pseudorange = 4 [default = nan];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double carrier_phase = 6 [default = nan];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float pseudorange_std_dev = 5 [default = nan];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float carrier_phase_std_dev = 7 [default = nan];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float doppler = 8 [default = nan];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float doppler_std_dev = 9 [default = nan];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 cno = 10 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cno());
    }

    // optional int32 lock_time = 11 [default = -1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lock_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.RangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.RangeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.RangeInfo)
    MergeFrom(*source);
  }
}

void RangeInfo::MergeFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.RangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      constellation_ = from.constellation_;
    }
    if (cached_has_bits & 0x00000002u) {
      prn_ = from.prn_;
    }
    if (cached_has_bits & 0x00000004u) {
      carrier_frequency_ = from.carrier_frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      pseudorange_ = from.pseudorange_;
    }
    if (cached_has_bits & 0x00000010u) {
      carrier_phase_ = from.carrier_phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      pseudorange_std_dev_ = from.pseudorange_std_dev_;
    }
    if (cached_has_bits & 0x00000040u) {
      carrier_phase_std_dev_ = from.carrier_phase_std_dev_;
    }
    if (cached_has_bits & 0x00000080u) {
      doppler_ = from.doppler_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      doppler_std_dev_ = from.doppler_std_dev_;
    }
    if (cached_has_bits & 0x00000200u) {
      cno_ = from.cno_;
    }
    if (cached_has_bits & 0x00000400u) {
      lock_time_ = from.lock_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RangeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeInfo::CopyFrom(const RangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.RangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeInfo::IsInitialized() const {
  return true;
}

void RangeInfo::InternalSwap(RangeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(constellation_, other->constellation_);
  swap(prn_, other->prn_);
  swap(carrier_frequency_, other->carrier_frequency_);
  swap(pseudorange_, other->pseudorange_);
  swap(carrier_phase_, other->carrier_phase_);
  swap(pseudorange_std_dev_, other->pseudorange_std_dev_);
  swap(carrier_phase_std_dev_, other->carrier_phase_std_dev_);
  swap(doppler_, other->doppler_);
  swap(doppler_std_dev_, other->doppler_std_dev_);
  swap(cno_, other->cno_);
  swap(lock_time_, other->lock_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GnssRange::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_GnssRange_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class GnssRange::_Internal {
 public:
  using HasBits = decltype(std::declval<GnssRange>()._has_bits_);
  static const ::apollo::common::Header& header(const GnssRange* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_measurement_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
GnssRange::_Internal::header(const GnssRange* msg) {
  return *msg->header_;
}
void GnssRange::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GnssRange::GnssRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GnssRange)
}
GnssRange::GnssRange(const GnssRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  measurement_time_ = from.measurement_time_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssRange)
}

void GnssRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GnssRange_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measurement_time_) -
      reinterpret_cast<char*>(&header_)) + sizeof(measurement_time_));
}

GnssRange::~GnssRange() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssRange)
  SharedDtor();
}

void GnssRange::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GnssRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GnssRange& GnssRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GnssRange_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base);
  return *internal_default_instance();
}


void GnssRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  measurement_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GnssRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double measurement_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_measurement_time(&has_bits);
          measurement_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GnssRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_measurement_time(), target);
  }

  // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssRange)
  return target;
}

size_t GnssRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.drivers.gnss.RangeInfo ranges = 3;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double measurement_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GnssRange)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GnssRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GnssRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GnssRange)
    MergeFrom(*source);
  }
}

void GnssRange::MergeFrom(const GnssRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      measurement_time_ = from.measurement_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GnssRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssRange::CopyFrom(const GnssRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssRange::IsInitialized() const {
  return true;
}

void GnssRange::InternalSwap(GnssRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ranges_.InternalSwap(&other->ranges_);
  swap(header_, other->header_);
  swap(measurement_time_, other->measurement_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawData::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_RawData_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
class RawData::_Internal {
 public:
  using HasBits = decltype(std::declval<RawData>()._has_bits_);
  static const ::apollo::common::Header& header(const RawData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
RawData::_Internal::header(const RawData* msg) {
  return *msg->header_;
}
void RawData::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RawData::RawData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.RawData)
}
RawData::RawData(const RawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.RawData)
}

void RawData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawData_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

RawData::~RawData() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.RawData)
  SharedDtor();
}

void RawData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawData& RawData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawData_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto.base);
  return *internal_default_instance();
}


void RawData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.RawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RawData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.RawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.RawData)
  return target;
}

size_t RawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.RawData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  const RawData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.RawData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.RawData)
    MergeFrom(*source);
  }
}

void RawData::MergeFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
  }
}

void RawData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawData::CopyFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawData::IsInitialized() const {
  return true;
}

void RawData::InternalSwap(RawData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::Gnss* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::Gnss >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::Gnss >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::RangeInfo* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::RangeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::RangeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::GnssRange* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GnssRange >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::GnssRange >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::drivers::gnss::RawData* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::RawData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::RawData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
