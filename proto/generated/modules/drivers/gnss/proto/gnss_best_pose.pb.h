// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_best_pose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto;
namespace apollo {
namespace drivers {
namespace gnss {
class GnssBestPose;
class GnssBestPoseDefaultTypeInternal;
extern GnssBestPoseDefaultTypeInternal _GnssBestPose_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::drivers::gnss::GnssBestPose* Arena::CreateMaybeMessage<::apollo::drivers::gnss::GnssBestPose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace drivers {
namespace gnss {

enum SolutionStatus : int {
  SOL_COMPUTED = 0,
  INSUFFICIENT_OBS = 1,
  NO_CONVERGENCE = 2,
  SINGULARITY = 3,
  COV_TRACE = 4,
  TEST_DIST = 5,
  COLD_START = 6,
  V_H_LIMIT = 7,
  VARIANCE = 8,
  RESIDUALS = 9,
  INTEGRITY_WARNING = 13,
  PENDING = 18,
  INVALID_FIX = 19,
  UNAUTHORIZED = 20,
  INVALID_RATE = 22
};
bool SolutionStatus_IsValid(int value);
constexpr SolutionStatus SolutionStatus_MIN = SOL_COMPUTED;
constexpr SolutionStatus SolutionStatus_MAX = INVALID_RATE;
constexpr int SolutionStatus_ARRAYSIZE = SolutionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionStatus_descriptor();
template<typename T>
inline const std::string& SolutionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolutionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolutionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolutionStatus_descriptor(), enum_t_value);
}
inline bool SolutionStatus_Parse(
    const std::string& name, SolutionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolutionStatus>(
    SolutionStatus_descriptor(), name, value);
}
enum SolutionType : int {
  NONE = 0,
  FIXEDPOS = 1,
  FIXEDHEIGHT = 2,
  FLOATCONV = 4,
  WIDELANE = 5,
  NARROWLANE = 6,
  DOPPLER_VELOCITY = 8,
  SINGLE = 16,
  PSRDIFF = 17,
  WAAS = 18,
  PROPOGATED = 19,
  OMNISTAR = 20,
  L1_FLOAT = 32,
  IONOFREE_FLOAT = 33,
  NARROW_FLOAT = 34,
  L1_INT = 48,
  WIDE_INT = 49,
  NARROW_INT = 50,
  RTK_DIRECT_INS = 51,
  INS_SBAS = 52,
  INS_PSRSP = 53,
  INS_PSRDIFF = 54,
  INS_RTKFLOAT = 55,
  INS_RTKFIXED = 56,
  INS_OMNISTAR = 57,
  INS_OMNISTAR_HP = 58,
  INS_OMNISTAR_XP = 59,
  OMNISTAR_HP = 64,
  OMNISTAR_XP = 65,
  PPP_CONVERGING = 68,
  PPP = 69,
  INS_PPP_CONVERGING = 73,
  INS_PPP = 74
};
bool SolutionType_IsValid(int value);
constexpr SolutionType SolutionType_MIN = NONE;
constexpr SolutionType SolutionType_MAX = INS_PPP;
constexpr int SolutionType_ARRAYSIZE = SolutionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SolutionType_descriptor();
template<typename T>
inline const std::string& SolutionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SolutionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SolutionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SolutionType_descriptor(), enum_t_value);
}
inline bool SolutionType_Parse(
    const std::string& name, SolutionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SolutionType>(
    SolutionType_descriptor(), name, value);
}
enum DatumId : int {
  WGS84 = 61
};
bool DatumId_IsValid(int value);
constexpr DatumId DatumId_MIN = WGS84;
constexpr DatumId DatumId_MAX = WGS84;
constexpr int DatumId_ARRAYSIZE = DatumId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DatumId_descriptor();
template<typename T>
inline const std::string& DatumId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DatumId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DatumId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DatumId_descriptor(), enum_t_value);
}
inline bool DatumId_Parse(
    const std::string& name, DatumId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DatumId>(
    DatumId_descriptor(), name, value);
}
// ===================================================================

class GnssBestPose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.GnssBestPose) */ {
 public:
  GnssBestPose();
  virtual ~GnssBestPose();

  GnssBestPose(const GnssBestPose& from);
  GnssBestPose(GnssBestPose&& from) noexcept
    : GnssBestPose() {
    *this = ::std::move(from);
  }

  inline GnssBestPose& operator=(const GnssBestPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline GnssBestPose& operator=(GnssBestPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GnssBestPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GnssBestPose* internal_default_instance() {
    return reinterpret_cast<const GnssBestPose*>(
               &_GnssBestPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GnssBestPose& a, GnssBestPose& b) {
    a.Swap(&b);
  }
  inline void Swap(GnssBestPose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GnssBestPose* New() const final {
    return CreateMaybeMessage<GnssBestPose>(nullptr);
  }

  GnssBestPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GnssBestPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GnssBestPose& from);
  void MergeFrom(const GnssBestPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GnssBestPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.drivers.gnss.GnssBestPose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto);
    return ::descriptor_table_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseStationIdFieldNumber = 13,
    kHeaderFieldNumber = 1,
    kMeasurementTimeFieldNumber = 2,
    kSolStatusFieldNumber = 3,
    kSolTypeFieldNumber = 4,
    kLatitudeFieldNumber = 5,
    kLongitudeFieldNumber = 6,
    kHeightMslFieldNumber = 7,
    kUndulationFieldNumber = 8,
    kLatitudeStdDevFieldNumber = 10,
    kLongitudeStdDevFieldNumber = 11,
    kHeightStdDevFieldNumber = 12,
    kDifferentialAgeFieldNumber = 14,
    kSolutionAgeFieldNumber = 15,
    kNumSatsTrackedFieldNumber = 16,
    kNumSatsInSolutionFieldNumber = 17,
    kNumSatsL1FieldNumber = 18,
    kNumSatsMultiFieldNumber = 19,
    kReservedFieldNumber = 20,
    kExtendedSolutionStatusFieldNumber = 21,
    kGalileoBeidouUsedMaskFieldNumber = 22,
    kGpsGlonassUsedMaskFieldNumber = 23,
    kDatumIdFieldNumber = 9,
  };
  // optional bytes base_station_id = 13;
  bool has_base_station_id() const;
  private:
  bool _internal_has_base_station_id() const;
  public:
  void clear_base_station_id();
  const std::string& base_station_id() const;
  void set_base_station_id(const std::string& value);
  void set_base_station_id(std::string&& value);
  void set_base_station_id(const char* value);
  void set_base_station_id(const void* value, size_t size);
  std::string* mutable_base_station_id();
  std::string* release_base_station_id();
  void set_allocated_base_station_id(std::string* base_station_id);
  private:
  const std::string& _internal_base_station_id() const;
  void _internal_set_base_station_id(const std::string& value);
  std::string* _internal_mutable_base_station_id();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  double measurement_time() const;
  void set_measurement_time(double value);
  private:
  double _internal_measurement_time() const;
  void _internal_set_measurement_time(double value);
  public:

  // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
  bool has_sol_status() const;
  private:
  bool _internal_has_sol_status() const;
  public:
  void clear_sol_status();
  ::apollo::drivers::gnss::SolutionStatus sol_status() const;
  void set_sol_status(::apollo::drivers::gnss::SolutionStatus value);
  private:
  ::apollo::drivers::gnss::SolutionStatus _internal_sol_status() const;
  void _internal_set_sol_status(::apollo::drivers::gnss::SolutionStatus value);
  public:

  // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
  bool has_sol_type() const;
  private:
  bool _internal_has_sol_type() const;
  public:
  void clear_sol_type();
  ::apollo::drivers::gnss::SolutionType sol_type() const;
  void set_sol_type(::apollo::drivers::gnss::SolutionType value);
  private:
  ::apollo::drivers::gnss::SolutionType _internal_sol_type() const;
  void _internal_set_sol_type(::apollo::drivers::gnss::SolutionType value);
  public:

  // optional double latitude = 5;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // optional double longitude = 6;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // optional double height_msl = 7;
  bool has_height_msl() const;
  private:
  bool _internal_has_height_msl() const;
  public:
  void clear_height_msl();
  double height_msl() const;
  void set_height_msl(double value);
  private:
  double _internal_height_msl() const;
  void _internal_set_height_msl(double value);
  public:

  // optional float undulation = 8;
  bool has_undulation() const;
  private:
  bool _internal_has_undulation() const;
  public:
  void clear_undulation();
  float undulation() const;
  void set_undulation(float value);
  private:
  float _internal_undulation() const;
  void _internal_set_undulation(float value);
  public:

  // optional float latitude_std_dev = 10;
  bool has_latitude_std_dev() const;
  private:
  bool _internal_has_latitude_std_dev() const;
  public:
  void clear_latitude_std_dev();
  float latitude_std_dev() const;
  void set_latitude_std_dev(float value);
  private:
  float _internal_latitude_std_dev() const;
  void _internal_set_latitude_std_dev(float value);
  public:

  // optional float longitude_std_dev = 11;
  bool has_longitude_std_dev() const;
  private:
  bool _internal_has_longitude_std_dev() const;
  public:
  void clear_longitude_std_dev();
  float longitude_std_dev() const;
  void set_longitude_std_dev(float value);
  private:
  float _internal_longitude_std_dev() const;
  void _internal_set_longitude_std_dev(float value);
  public:

  // optional float height_std_dev = 12;
  bool has_height_std_dev() const;
  private:
  bool _internal_has_height_std_dev() const;
  public:
  void clear_height_std_dev();
  float height_std_dev() const;
  void set_height_std_dev(float value);
  private:
  float _internal_height_std_dev() const;
  void _internal_set_height_std_dev(float value);
  public:

  // optional float differential_age = 14;
  bool has_differential_age() const;
  private:
  bool _internal_has_differential_age() const;
  public:
  void clear_differential_age();
  float differential_age() const;
  void set_differential_age(float value);
  private:
  float _internal_differential_age() const;
  void _internal_set_differential_age(float value);
  public:

  // optional float solution_age = 15;
  bool has_solution_age() const;
  private:
  bool _internal_has_solution_age() const;
  public:
  void clear_solution_age();
  float solution_age() const;
  void set_solution_age(float value);
  private:
  float _internal_solution_age() const;
  void _internal_set_solution_age(float value);
  public:

  // optional uint32 num_sats_tracked = 16;
  bool has_num_sats_tracked() const;
  private:
  bool _internal_has_num_sats_tracked() const;
  public:
  void clear_num_sats_tracked();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_tracked() const;
  void set_num_sats_tracked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sats_tracked() const;
  void _internal_set_num_sats_tracked(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_sats_in_solution = 17;
  bool has_num_sats_in_solution() const;
  private:
  bool _internal_has_num_sats_in_solution() const;
  public:
  void clear_num_sats_in_solution();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_in_solution() const;
  void set_num_sats_in_solution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sats_in_solution() const;
  void _internal_set_num_sats_in_solution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_sats_l1 = 18;
  bool has_num_sats_l1() const;
  private:
  bool _internal_has_num_sats_l1() const;
  public:
  void clear_num_sats_l1();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_l1() const;
  void set_num_sats_l1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sats_l1() const;
  void _internal_set_num_sats_l1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_sats_multi = 19;
  bool has_num_sats_multi() const;
  private:
  bool _internal_has_num_sats_multi() const;
  public:
  void clear_num_sats_multi();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_multi() const;
  void set_num_sats_multi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sats_multi() const;
  void _internal_set_num_sats_multi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reserved = 20;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  ::PROTOBUF_NAMESPACE_ID::uint32 reserved() const;
  void set_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reserved() const;
  void _internal_set_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 extended_solution_status = 21;
  bool has_extended_solution_status() const;
  private:
  bool _internal_has_extended_solution_status() const;
  public:
  void clear_extended_solution_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_solution_status() const;
  void set_extended_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extended_solution_status() const;
  void _internal_set_extended_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 galileo_beidou_used_mask = 22;
  bool has_galileo_beidou_used_mask() const;
  private:
  bool _internal_has_galileo_beidou_used_mask() const;
  public:
  void clear_galileo_beidou_used_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 galileo_beidou_used_mask() const;
  void set_galileo_beidou_used_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_galileo_beidou_used_mask() const;
  void _internal_set_galileo_beidou_used_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gps_glonass_used_mask = 23;
  bool has_gps_glonass_used_mask() const;
  private:
  bool _internal_has_gps_glonass_used_mask() const;
  public:
  void clear_gps_glonass_used_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_glonass_used_mask() const;
  void set_gps_glonass_used_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gps_glonass_used_mask() const;
  void _internal_set_gps_glonass_used_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .apollo.drivers.gnss.DatumId datum_id = 9;
  bool has_datum_id() const;
  private:
  bool _internal_has_datum_id() const;
  public:
  void clear_datum_id();
  ::apollo::drivers::gnss::DatumId datum_id() const;
  void set_datum_id(::apollo::drivers::gnss::DatumId value);
  private:
  ::apollo::drivers::gnss::DatumId _internal_datum_id() const;
  void _internal_set_datum_id(::apollo::drivers::gnss::DatumId value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.GnssBestPose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_station_id_;
  ::apollo::common::Header* header_;
  double measurement_time_;
  int sol_status_;
  int sol_type_;
  double latitude_;
  double longitude_;
  double height_msl_;
  float undulation_;
  float latitude_std_dev_;
  float longitude_std_dev_;
  float height_std_dev_;
  float differential_age_;
  float solution_age_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_tracked_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_in_solution_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_l1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sats_multi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reserved_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_solution_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 galileo_beidou_used_mask_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gps_glonass_used_mask_;
  int datum_id_;
  friend struct ::TableStruct_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GnssBestPose

// optional .apollo.common.Header header = 1;
inline bool GnssBestPose::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool GnssBestPose::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& GnssBestPose::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& GnssBestPose::header() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.header)
  return _internal_header();
}
inline ::apollo::common::Header* GnssBestPose::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssBestPose.header)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* GnssBestPose::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* GnssBestPose::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssBestPose.header)
  return _internal_mutable_header();
}
inline void GnssBestPose::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssBestPose.header)
}

// optional double measurement_time = 2;
inline bool GnssBestPose::_internal_has_measurement_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GnssBestPose::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline void GnssBestPose::clear_measurement_time() {
  measurement_time_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GnssBestPose::_internal_measurement_time() const {
  return measurement_time_;
}
inline double GnssBestPose::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.measurement_time)
  return _internal_measurement_time();
}
inline void GnssBestPose::_internal_set_measurement_time(double value) {
  _has_bits_[0] |= 0x00000004u;
  measurement_time_ = value;
}
inline void GnssBestPose::set_measurement_time(double value) {
  _internal_set_measurement_time(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.measurement_time)
}

// optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
inline bool GnssBestPose::_internal_has_sol_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GnssBestPose::has_sol_status() const {
  return _internal_has_sol_status();
}
inline void GnssBestPose::clear_sol_status() {
  sol_status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::drivers::gnss::SolutionStatus GnssBestPose::_internal_sol_status() const {
  return static_cast< ::apollo::drivers::gnss::SolutionStatus >(sol_status_);
}
inline ::apollo::drivers::gnss::SolutionStatus GnssBestPose::sol_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.sol_status)
  return _internal_sol_status();
}
inline void GnssBestPose::_internal_set_sol_status(::apollo::drivers::gnss::SolutionStatus value) {
  assert(::apollo::drivers::gnss::SolutionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  sol_status_ = value;
}
inline void GnssBestPose::set_sol_status(::apollo::drivers::gnss::SolutionStatus value) {
  _internal_set_sol_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.sol_status)
}

// optional .apollo.drivers.gnss.SolutionType sol_type = 4;
inline bool GnssBestPose::_internal_has_sol_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GnssBestPose::has_sol_type() const {
  return _internal_has_sol_type();
}
inline void GnssBestPose::clear_sol_type() {
  sol_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::drivers::gnss::SolutionType GnssBestPose::_internal_sol_type() const {
  return static_cast< ::apollo::drivers::gnss::SolutionType >(sol_type_);
}
inline ::apollo::drivers::gnss::SolutionType GnssBestPose::sol_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.sol_type)
  return _internal_sol_type();
}
inline void GnssBestPose::_internal_set_sol_type(::apollo::drivers::gnss::SolutionType value) {
  assert(::apollo::drivers::gnss::SolutionType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  sol_type_ = value;
}
inline void GnssBestPose::set_sol_type(::apollo::drivers::gnss::SolutionType value) {
  _internal_set_sol_type(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.sol_type)
}

// optional double latitude = 5;
inline bool GnssBestPose::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GnssBestPose::has_latitude() const {
  return _internal_has_latitude();
}
inline void GnssBestPose::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double GnssBestPose::_internal_latitude() const {
  return latitude_;
}
inline double GnssBestPose::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.latitude)
  return _internal_latitude();
}
inline void GnssBestPose::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000020u;
  latitude_ = value;
}
inline void GnssBestPose::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.latitude)
}

// optional double longitude = 6;
inline bool GnssBestPose::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GnssBestPose::has_longitude() const {
  return _internal_has_longitude();
}
inline void GnssBestPose::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double GnssBestPose::_internal_longitude() const {
  return longitude_;
}
inline double GnssBestPose::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.longitude)
  return _internal_longitude();
}
inline void GnssBestPose::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000040u;
  longitude_ = value;
}
inline void GnssBestPose::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.longitude)
}

// optional double height_msl = 7;
inline bool GnssBestPose::_internal_has_height_msl() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GnssBestPose::has_height_msl() const {
  return _internal_has_height_msl();
}
inline void GnssBestPose::clear_height_msl() {
  height_msl_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double GnssBestPose::_internal_height_msl() const {
  return height_msl_;
}
inline double GnssBestPose::height_msl() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.height_msl)
  return _internal_height_msl();
}
inline void GnssBestPose::_internal_set_height_msl(double value) {
  _has_bits_[0] |= 0x00000080u;
  height_msl_ = value;
}
inline void GnssBestPose::set_height_msl(double value) {
  _internal_set_height_msl(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.height_msl)
}

// optional float undulation = 8;
inline bool GnssBestPose::_internal_has_undulation() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GnssBestPose::has_undulation() const {
  return _internal_has_undulation();
}
inline void GnssBestPose::clear_undulation() {
  undulation_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float GnssBestPose::_internal_undulation() const {
  return undulation_;
}
inline float GnssBestPose::undulation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.undulation)
  return _internal_undulation();
}
inline void GnssBestPose::_internal_set_undulation(float value) {
  _has_bits_[0] |= 0x00000100u;
  undulation_ = value;
}
inline void GnssBestPose::set_undulation(float value) {
  _internal_set_undulation(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.undulation)
}

// optional .apollo.drivers.gnss.DatumId datum_id = 9;
inline bool GnssBestPose::_internal_has_datum_id() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool GnssBestPose::has_datum_id() const {
  return _internal_has_datum_id();
}
inline void GnssBestPose::clear_datum_id() {
  datum_id_ = 61;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::apollo::drivers::gnss::DatumId GnssBestPose::_internal_datum_id() const {
  return static_cast< ::apollo::drivers::gnss::DatumId >(datum_id_);
}
inline ::apollo::drivers::gnss::DatumId GnssBestPose::datum_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.datum_id)
  return _internal_datum_id();
}
inline void GnssBestPose::_internal_set_datum_id(::apollo::drivers::gnss::DatumId value) {
  assert(::apollo::drivers::gnss::DatumId_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  datum_id_ = value;
}
inline void GnssBestPose::set_datum_id(::apollo::drivers::gnss::DatumId value) {
  _internal_set_datum_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.datum_id)
}

// optional float latitude_std_dev = 10;
inline bool GnssBestPose::_internal_has_latitude_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GnssBestPose::has_latitude_std_dev() const {
  return _internal_has_latitude_std_dev();
}
inline void GnssBestPose::clear_latitude_std_dev() {
  latitude_std_dev_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float GnssBestPose::_internal_latitude_std_dev() const {
  return latitude_std_dev_;
}
inline float GnssBestPose::latitude_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.latitude_std_dev)
  return _internal_latitude_std_dev();
}
inline void GnssBestPose::_internal_set_latitude_std_dev(float value) {
  _has_bits_[0] |= 0x00000200u;
  latitude_std_dev_ = value;
}
inline void GnssBestPose::set_latitude_std_dev(float value) {
  _internal_set_latitude_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.latitude_std_dev)
}

// optional float longitude_std_dev = 11;
inline bool GnssBestPose::_internal_has_longitude_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GnssBestPose::has_longitude_std_dev() const {
  return _internal_has_longitude_std_dev();
}
inline void GnssBestPose::clear_longitude_std_dev() {
  longitude_std_dev_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float GnssBestPose::_internal_longitude_std_dev() const {
  return longitude_std_dev_;
}
inline float GnssBestPose::longitude_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.longitude_std_dev)
  return _internal_longitude_std_dev();
}
inline void GnssBestPose::_internal_set_longitude_std_dev(float value) {
  _has_bits_[0] |= 0x00000400u;
  longitude_std_dev_ = value;
}
inline void GnssBestPose::set_longitude_std_dev(float value) {
  _internal_set_longitude_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.longitude_std_dev)
}

// optional float height_std_dev = 12;
inline bool GnssBestPose::_internal_has_height_std_dev() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GnssBestPose::has_height_std_dev() const {
  return _internal_has_height_std_dev();
}
inline void GnssBestPose::clear_height_std_dev() {
  height_std_dev_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float GnssBestPose::_internal_height_std_dev() const {
  return height_std_dev_;
}
inline float GnssBestPose::height_std_dev() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.height_std_dev)
  return _internal_height_std_dev();
}
inline void GnssBestPose::_internal_set_height_std_dev(float value) {
  _has_bits_[0] |= 0x00000800u;
  height_std_dev_ = value;
}
inline void GnssBestPose::set_height_std_dev(float value) {
  _internal_set_height_std_dev(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.height_std_dev)
}

// optional bytes base_station_id = 13;
inline bool GnssBestPose::_internal_has_base_station_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GnssBestPose::has_base_station_id() const {
  return _internal_has_base_station_id();
}
inline void GnssBestPose::clear_base_station_id() {
  base_station_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GnssBestPose::base_station_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.base_station_id)
  return _internal_base_station_id();
}
inline void GnssBestPose::set_base_station_id(const std::string& value) {
  _internal_set_base_station_id(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
inline std::string* GnssBestPose::mutable_base_station_id() {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.GnssBestPose.base_station_id)
  return _internal_mutable_base_station_id();
}
inline const std::string& GnssBestPose::_internal_base_station_id() const {
  return base_station_id_.GetNoArena();
}
inline void GnssBestPose::_internal_set_base_station_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  base_station_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GnssBestPose::set_base_station_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  base_station_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
inline void GnssBestPose::set_base_station_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  base_station_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
inline void GnssBestPose::set_base_station_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  base_station_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.GnssBestPose.base_station_id)
}
inline std::string* GnssBestPose::_internal_mutable_base_station_id() {
  _has_bits_[0] |= 0x00000001u;
  return base_station_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GnssBestPose::release_base_station_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.GnssBestPose.base_station_id)
  if (!_internal_has_base_station_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return base_station_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GnssBestPose::set_allocated_base_station_id(std::string* base_station_id) {
  if (base_station_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_station_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_station_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.GnssBestPose.base_station_id)
}

// optional float differential_age = 14;
inline bool GnssBestPose::_internal_has_differential_age() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool GnssBestPose::has_differential_age() const {
  return _internal_has_differential_age();
}
inline void GnssBestPose::clear_differential_age() {
  differential_age_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float GnssBestPose::_internal_differential_age() const {
  return differential_age_;
}
inline float GnssBestPose::differential_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.differential_age)
  return _internal_differential_age();
}
inline void GnssBestPose::_internal_set_differential_age(float value) {
  _has_bits_[0] |= 0x00001000u;
  differential_age_ = value;
}
inline void GnssBestPose::set_differential_age(float value) {
  _internal_set_differential_age(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.differential_age)
}

// optional float solution_age = 15;
inline bool GnssBestPose::_internal_has_solution_age() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool GnssBestPose::has_solution_age() const {
  return _internal_has_solution_age();
}
inline void GnssBestPose::clear_solution_age() {
  solution_age_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float GnssBestPose::_internal_solution_age() const {
  return solution_age_;
}
inline float GnssBestPose::solution_age() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.solution_age)
  return _internal_solution_age();
}
inline void GnssBestPose::_internal_set_solution_age(float value) {
  _has_bits_[0] |= 0x00002000u;
  solution_age_ = value;
}
inline void GnssBestPose::set_solution_age(float value) {
  _internal_set_solution_age(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.solution_age)
}

// optional uint32 num_sats_tracked = 16;
inline bool GnssBestPose::_internal_has_num_sats_tracked() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool GnssBestPose::has_num_sats_tracked() const {
  return _internal_has_num_sats_tracked();
}
inline void GnssBestPose::clear_num_sats_tracked() {
  num_sats_tracked_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::_internal_num_sats_tracked() const {
  return num_sats_tracked_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::num_sats_tracked() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_tracked)
  return _internal_num_sats_tracked();
}
inline void GnssBestPose::_internal_set_num_sats_tracked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  num_sats_tracked_ = value;
}
inline void GnssBestPose::set_num_sats_tracked(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sats_tracked(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_tracked)
}

// optional uint32 num_sats_in_solution = 17;
inline bool GnssBestPose::_internal_has_num_sats_in_solution() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool GnssBestPose::has_num_sats_in_solution() const {
  return _internal_has_num_sats_in_solution();
}
inline void GnssBestPose::clear_num_sats_in_solution() {
  num_sats_in_solution_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::_internal_num_sats_in_solution() const {
  return num_sats_in_solution_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::num_sats_in_solution() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_in_solution)
  return _internal_num_sats_in_solution();
}
inline void GnssBestPose::_internal_set_num_sats_in_solution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  num_sats_in_solution_ = value;
}
inline void GnssBestPose::set_num_sats_in_solution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sats_in_solution(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_in_solution)
}

// optional uint32 num_sats_l1 = 18;
inline bool GnssBestPose::_internal_has_num_sats_l1() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool GnssBestPose::has_num_sats_l1() const {
  return _internal_has_num_sats_l1();
}
inline void GnssBestPose::clear_num_sats_l1() {
  num_sats_l1_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::_internal_num_sats_l1() const {
  return num_sats_l1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::num_sats_l1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_l1)
  return _internal_num_sats_l1();
}
inline void GnssBestPose::_internal_set_num_sats_l1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  num_sats_l1_ = value;
}
inline void GnssBestPose::set_num_sats_l1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sats_l1(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_l1)
}

// optional uint32 num_sats_multi = 19;
inline bool GnssBestPose::_internal_has_num_sats_multi() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool GnssBestPose::has_num_sats_multi() const {
  return _internal_has_num_sats_multi();
}
inline void GnssBestPose::clear_num_sats_multi() {
  num_sats_multi_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::_internal_num_sats_multi() const {
  return num_sats_multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::num_sats_multi() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.num_sats_multi)
  return _internal_num_sats_multi();
}
inline void GnssBestPose::_internal_set_num_sats_multi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  num_sats_multi_ = value;
}
inline void GnssBestPose::set_num_sats_multi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sats_multi(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.num_sats_multi)
}

// optional uint32 reserved = 20;
inline bool GnssBestPose::_internal_has_reserved() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool GnssBestPose::has_reserved() const {
  return _internal_has_reserved();
}
inline void GnssBestPose::clear_reserved() {
  reserved_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::_internal_reserved() const {
  return reserved_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::reserved() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.reserved)
  return _internal_reserved();
}
inline void GnssBestPose::_internal_set_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  reserved_ = value;
}
inline void GnssBestPose::set_reserved(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.reserved)
}

// optional uint32 extended_solution_status = 21;
inline bool GnssBestPose::_internal_has_extended_solution_status() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool GnssBestPose::has_extended_solution_status() const {
  return _internal_has_extended_solution_status();
}
inline void GnssBestPose::clear_extended_solution_status() {
  extended_solution_status_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::_internal_extended_solution_status() const {
  return extended_solution_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::extended_solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.extended_solution_status)
  return _internal_extended_solution_status();
}
inline void GnssBestPose::_internal_set_extended_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  extended_solution_status_ = value;
}
inline void GnssBestPose::set_extended_solution_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extended_solution_status(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.extended_solution_status)
}

// optional uint32 galileo_beidou_used_mask = 22;
inline bool GnssBestPose::_internal_has_galileo_beidou_used_mask() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool GnssBestPose::has_galileo_beidou_used_mask() const {
  return _internal_has_galileo_beidou_used_mask();
}
inline void GnssBestPose::clear_galileo_beidou_used_mask() {
  galileo_beidou_used_mask_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::_internal_galileo_beidou_used_mask() const {
  return galileo_beidou_used_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::galileo_beidou_used_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.galileo_beidou_used_mask)
  return _internal_galileo_beidou_used_mask();
}
inline void GnssBestPose::_internal_set_galileo_beidou_used_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  galileo_beidou_used_mask_ = value;
}
inline void GnssBestPose::set_galileo_beidou_used_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_galileo_beidou_used_mask(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.galileo_beidou_used_mask)
}

// optional uint32 gps_glonass_used_mask = 23;
inline bool GnssBestPose::_internal_has_gps_glonass_used_mask() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool GnssBestPose::has_gps_glonass_used_mask() const {
  return _internal_has_gps_glonass_used_mask();
}
inline void GnssBestPose::clear_gps_glonass_used_mask() {
  gps_glonass_used_mask_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::_internal_gps_glonass_used_mask() const {
  return gps_glonass_used_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GnssBestPose::gps_glonass_used_mask() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.GnssBestPose.gps_glonass_used_mask)
  return _internal_gps_glonass_used_mask();
}
inline void GnssBestPose::_internal_set_gps_glonass_used_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  gps_glonass_used_mask_ = value;
}
inline void GnssBestPose::set_gps_glonass_used_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gps_glonass_used_mask(value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.GnssBestPose.gps_glonass_used_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::drivers::gnss::SolutionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::SolutionStatus>() {
  return ::apollo::drivers::gnss::SolutionStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::SolutionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::SolutionType>() {
  return ::apollo::drivers::gnss::SolutionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::DatumId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::DatumId>() {
  return ::apollo::drivers::gnss::DatumId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto
