// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/third_party_perception/proto/radar_obstacle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/error_code.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto;
namespace apollo {
namespace third_party_perception {
class RadarObstacle;
class RadarObstacleDefaultTypeInternal;
extern RadarObstacleDefaultTypeInternal _RadarObstacle_default_instance_;
class RadarObstacles;
class RadarObstaclesDefaultTypeInternal;
extern RadarObstaclesDefaultTypeInternal _RadarObstacles_default_instance_;
class RadarObstacles_RadarObstacleEntry_DoNotUse;
class RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal;
extern RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal _RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_;
}  // namespace third_party_perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::third_party_perception::RadarObstacle* Arena::CreateMaybeMessage<::apollo::third_party_perception::RadarObstacle>(Arena*);
template<> ::apollo::third_party_perception::RadarObstacles* Arena::CreateMaybeMessage<::apollo::third_party_perception::RadarObstacles>(Arena*);
template<> ::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::third_party_perception::RadarObstacles_RadarObstacleEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace third_party_perception {

// ===================================================================

class RadarObstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.third_party_perception.RadarObstacle) */ {
 public:
  RadarObstacle();
  virtual ~RadarObstacle();

  RadarObstacle(const RadarObstacle& from);
  RadarObstacle(RadarObstacle&& from) noexcept
    : RadarObstacle() {
    *this = ::std::move(from);
  }

  inline RadarObstacle& operator=(const RadarObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarObstacle& operator=(RadarObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarObstacle* internal_default_instance() {
    return reinterpret_cast<const RadarObstacle*>(
               &_RadarObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarObstacle& a, RadarObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarObstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarObstacle* New() const final {
    return CreateMaybeMessage<RadarObstacle>(nullptr);
  }

  RadarObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarObstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarObstacle& from);
  void MergeFrom(const RadarObstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarObstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.third_party_perception.RadarObstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePositionFieldNumber = 2,
    kRelativeVelocityFieldNumber = 3,
    kAbsolutePositionFieldNumber = 10,
    kAbsoluteVelocityFieldNumber = 11,
    kIdFieldNumber = 1,
    kMovableFieldNumber = 5,
    kRcsFieldNumber = 4,
    kWidthFieldNumber = 6,
    kLengthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kThetaFieldNumber = 9,
    kCountFieldNumber = 12,
    kMovingFramesCountFieldNumber = 13,
  };
  // optional .apollo.common.Point3D relative_position = 2;
  bool has_relative_position() const;
  private:
  bool _internal_has_relative_position() const;
  public:
  void clear_relative_position();
  const ::apollo::common::Point3D& relative_position() const;
  ::apollo::common::Point3D* release_relative_position();
  ::apollo::common::Point3D* mutable_relative_position();
  void set_allocated_relative_position(::apollo::common::Point3D* relative_position);
  private:
  const ::apollo::common::Point3D& _internal_relative_position() const;
  ::apollo::common::Point3D* _internal_mutable_relative_position();
  public:

  // optional .apollo.common.Point3D relative_velocity = 3;
  bool has_relative_velocity() const;
  private:
  bool _internal_has_relative_velocity() const;
  public:
  void clear_relative_velocity();
  const ::apollo::common::Point3D& relative_velocity() const;
  ::apollo::common::Point3D* release_relative_velocity();
  ::apollo::common::Point3D* mutable_relative_velocity();
  void set_allocated_relative_velocity(::apollo::common::Point3D* relative_velocity);
  private:
  const ::apollo::common::Point3D& _internal_relative_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_relative_velocity();
  public:

  // optional .apollo.common.Point3D absolute_position = 10;
  bool has_absolute_position() const;
  private:
  bool _internal_has_absolute_position() const;
  public:
  void clear_absolute_position();
  const ::apollo::common::Point3D& absolute_position() const;
  ::apollo::common::Point3D* release_absolute_position();
  ::apollo::common::Point3D* mutable_absolute_position();
  void set_allocated_absolute_position(::apollo::common::Point3D* absolute_position);
  private:
  const ::apollo::common::Point3D& _internal_absolute_position() const;
  ::apollo::common::Point3D* _internal_mutable_absolute_position();
  public:

  // optional .apollo.common.Point3D absolute_velocity = 11;
  bool has_absolute_velocity() const;
  private:
  bool _internal_has_absolute_velocity() const;
  public:
  void clear_absolute_velocity();
  const ::apollo::common::Point3D& absolute_velocity() const;
  ::apollo::common::Point3D* release_absolute_velocity();
  ::apollo::common::Point3D* mutable_absolute_velocity();
  void set_allocated_absolute_velocity(::apollo::common::Point3D* absolute_velocity);
  private:
  const ::apollo::common::Point3D& _internal_absolute_velocity() const;
  ::apollo::common::Point3D* _internal_mutable_absolute_velocity();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool movable = 5;
  bool has_movable() const;
  private:
  bool _internal_has_movable() const;
  public:
  void clear_movable();
  bool movable() const;
  void set_movable(bool value);
  private:
  bool _internal_movable() const;
  void _internal_set_movable(bool value);
  public:

  // optional double rcs = 4;
  bool has_rcs() const;
  private:
  bool _internal_has_rcs() const;
  public:
  void clear_rcs();
  double rcs() const;
  void set_rcs(double value);
  private:
  double _internal_rcs() const;
  void _internal_set_rcs(double value);
  public:

  // optional double width = 6;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // optional double length = 7;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double height = 8;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional double theta = 9;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional int32 count = 12;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 moving_frames_count = 13;
  bool has_moving_frames_count() const;
  private:
  bool _internal_has_moving_frames_count() const;
  public:
  void clear_moving_frames_count();
  ::PROTOBUF_NAMESPACE_ID::int32 moving_frames_count() const;
  void set_moving_frames_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moving_frames_count() const;
  void _internal_set_moving_frames_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.third_party_perception.RadarObstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Point3D* relative_position_;
  ::apollo::common::Point3D* relative_velocity_;
  ::apollo::common::Point3D* absolute_position_;
  ::apollo::common::Point3D* absolute_velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool movable_;
  double rcs_;
  double width_;
  double length_;
  double height_;
  double theta_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 moving_frames_count_;
  friend struct ::TableStruct_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto;
};
// -------------------------------------------------------------------

class RadarObstacles_RadarObstacleEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RadarObstacles_RadarObstacleEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RadarObstacles_RadarObstacleEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RadarObstacles_RadarObstacleEntry_DoNotUse();
  RadarObstacles_RadarObstacleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RadarObstacles_RadarObstacleEntry_DoNotUse& other);
  static const RadarObstacles_RadarObstacleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RadarObstacles_RadarObstacleEntry_DoNotUse*>(&_RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class RadarObstacles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.third_party_perception.RadarObstacles) */ {
 public:
  RadarObstacles();
  virtual ~RadarObstacles();

  RadarObstacles(const RadarObstacles& from);
  RadarObstacles(RadarObstacles&& from) noexcept
    : RadarObstacles() {
    *this = ::std::move(from);
  }

  inline RadarObstacles& operator=(const RadarObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarObstacles& operator=(RadarObstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarObstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarObstacles* internal_default_instance() {
    return reinterpret_cast<const RadarObstacles*>(
               &_RadarObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RadarObstacles& a, RadarObstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarObstacles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarObstacles* New() const final {
    return CreateMaybeMessage<RadarObstacles>(nullptr);
  }

  RadarObstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarObstacles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarObstacles& from);
  void MergeFrom(const RadarObstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarObstacles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.third_party_perception.RadarObstacles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto);
    return ::descriptor_table_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRadarObstacleFieldNumber = 1,
    kHeaderFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
  int radar_obstacle_size() const;
  private:
  int _internal_radar_obstacle_size() const;
  public:
  void clear_radar_obstacle();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle >&
      _internal_radar_obstacle() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle >*
      _internal_mutable_radar_obstacle();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle >&
      radar_obstacle() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle >*
      mutable_radar_obstacle();

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::apollo::common::ErrorCode error_code() const;
  void set_error_code(::apollo::common::ErrorCode value);
  private:
  ::apollo::common::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::apollo::common::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.third_party_perception.RadarObstacles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RadarObstacles_RadarObstacleEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > radar_obstacle_;
  ::apollo::common::Header* header_;
  int error_code_;
  friend struct ::TableStruct_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarObstacle

// optional int32 id = 1;
inline bool RadarObstacle::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarObstacle::has_id() const {
  return _internal_has_id();
}
inline void RadarObstacle::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarObstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.id)
  return _internal_id();
}
inline void RadarObstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void RadarObstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.id)
}

// optional .apollo.common.Point3D relative_position = 2;
inline bool RadarObstacle::_internal_has_relative_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || relative_position_ != nullptr);
  return value;
}
inline bool RadarObstacle::has_relative_position() const {
  return _internal_has_relative_position();
}
inline const ::apollo::common::Point3D& RadarObstacle::_internal_relative_position() const {
  const ::apollo::common::Point3D* p = relative_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& RadarObstacle::relative_position() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.relative_position)
  return _internal_relative_position();
}
inline ::apollo::common::Point3D* RadarObstacle::release_relative_position() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacle.relative_position)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Point3D* temp = relative_position_;
  relative_position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* RadarObstacle::_internal_mutable_relative_position() {
  _has_bits_[0] |= 0x00000001u;
  if (relative_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    relative_position_ = p;
  }
  return relative_position_;
}
inline ::apollo::common::Point3D* RadarObstacle::mutable_relative_position() {
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacle.relative_position)
  return _internal_mutable_relative_position();
}
inline void RadarObstacle::set_allocated_relative_position(::apollo::common::Point3D* relative_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_position_);
  }
  if (relative_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  relative_position_ = relative_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacle.relative_position)
}

// optional .apollo.common.Point3D relative_velocity = 3;
inline bool RadarObstacle::_internal_has_relative_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || relative_velocity_ != nullptr);
  return value;
}
inline bool RadarObstacle::has_relative_velocity() const {
  return _internal_has_relative_velocity();
}
inline const ::apollo::common::Point3D& RadarObstacle::_internal_relative_velocity() const {
  const ::apollo::common::Point3D* p = relative_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& RadarObstacle::relative_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.relative_velocity)
  return _internal_relative_velocity();
}
inline ::apollo::common::Point3D* RadarObstacle::release_relative_velocity() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacle.relative_velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Point3D* temp = relative_velocity_;
  relative_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* RadarObstacle::_internal_mutable_relative_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (relative_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    relative_velocity_ = p;
  }
  return relative_velocity_;
}
inline ::apollo::common::Point3D* RadarObstacle::mutable_relative_velocity() {
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacle.relative_velocity)
  return _internal_mutable_relative_velocity();
}
inline void RadarObstacle::set_allocated_relative_velocity(::apollo::common::Point3D* relative_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_velocity_);
  }
  if (relative_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  relative_velocity_ = relative_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacle.relative_velocity)
}

// optional double rcs = 4;
inline bool RadarObstacle::_internal_has_rcs() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarObstacle::has_rcs() const {
  return _internal_has_rcs();
}
inline void RadarObstacle::clear_rcs() {
  rcs_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double RadarObstacle::_internal_rcs() const {
  return rcs_;
}
inline double RadarObstacle::rcs() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.rcs)
  return _internal_rcs();
}
inline void RadarObstacle::_internal_set_rcs(double value) {
  _has_bits_[0] |= 0x00000040u;
  rcs_ = value;
}
inline void RadarObstacle::set_rcs(double value) {
  _internal_set_rcs(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.rcs)
}

// optional bool movable = 5;
inline bool RadarObstacle::_internal_has_movable() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarObstacle::has_movable() const {
  return _internal_has_movable();
}
inline void RadarObstacle::clear_movable() {
  movable_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool RadarObstacle::_internal_movable() const {
  return movable_;
}
inline bool RadarObstacle::movable() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.movable)
  return _internal_movable();
}
inline void RadarObstacle::_internal_set_movable(bool value) {
  _has_bits_[0] |= 0x00000020u;
  movable_ = value;
}
inline void RadarObstacle::set_movable(bool value) {
  _internal_set_movable(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.movable)
}

// optional double width = 6;
inline bool RadarObstacle::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarObstacle::has_width() const {
  return _internal_has_width();
}
inline void RadarObstacle::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double RadarObstacle::_internal_width() const {
  return width_;
}
inline double RadarObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.width)
  return _internal_width();
}
inline void RadarObstacle::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000080u;
  width_ = value;
}
inline void RadarObstacle::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.width)
}

// optional double length = 7;
inline bool RadarObstacle::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarObstacle::has_length() const {
  return _internal_has_length();
}
inline void RadarObstacle::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double RadarObstacle::_internal_length() const {
  return length_;
}
inline double RadarObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.length)
  return _internal_length();
}
inline void RadarObstacle::_internal_set_length(double value) {
  _has_bits_[0] |= 0x00000100u;
  length_ = value;
}
inline void RadarObstacle::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.length)
}

// optional double height = 8;
inline bool RadarObstacle::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarObstacle::has_height() const {
  return _internal_has_height();
}
inline void RadarObstacle::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double RadarObstacle::_internal_height() const {
  return height_;
}
inline double RadarObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.height)
  return _internal_height();
}
inline void RadarObstacle::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
}
inline void RadarObstacle::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.height)
}

// optional double theta = 9;
inline bool RadarObstacle::_internal_has_theta() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RadarObstacle::has_theta() const {
  return _internal_has_theta();
}
inline void RadarObstacle::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double RadarObstacle::_internal_theta() const {
  return theta_;
}
inline double RadarObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.theta)
  return _internal_theta();
}
inline void RadarObstacle::_internal_set_theta(double value) {
  _has_bits_[0] |= 0x00000400u;
  theta_ = value;
}
inline void RadarObstacle::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.theta)
}

// optional .apollo.common.Point3D absolute_position = 10;
inline bool RadarObstacle::_internal_has_absolute_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || absolute_position_ != nullptr);
  return value;
}
inline bool RadarObstacle::has_absolute_position() const {
  return _internal_has_absolute_position();
}
inline const ::apollo::common::Point3D& RadarObstacle::_internal_absolute_position() const {
  const ::apollo::common::Point3D* p = absolute_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& RadarObstacle::absolute_position() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.absolute_position)
  return _internal_absolute_position();
}
inline ::apollo::common::Point3D* RadarObstacle::release_absolute_position() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacle.absolute_position)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::Point3D* temp = absolute_position_;
  absolute_position_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* RadarObstacle::_internal_mutable_absolute_position() {
  _has_bits_[0] |= 0x00000004u;
  if (absolute_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    absolute_position_ = p;
  }
  return absolute_position_;
}
inline ::apollo::common::Point3D* RadarObstacle::mutable_absolute_position() {
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacle.absolute_position)
  return _internal_mutable_absolute_position();
}
inline void RadarObstacle::set_allocated_absolute_position(::apollo::common::Point3D* absolute_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_position_);
  }
  if (absolute_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      absolute_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  absolute_position_ = absolute_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacle.absolute_position)
}

// optional .apollo.common.Point3D absolute_velocity = 11;
inline bool RadarObstacle::_internal_has_absolute_velocity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || absolute_velocity_ != nullptr);
  return value;
}
inline bool RadarObstacle::has_absolute_velocity() const {
  return _internal_has_absolute_velocity();
}
inline const ::apollo::common::Point3D& RadarObstacle::_internal_absolute_velocity() const {
  const ::apollo::common::Point3D* p = absolute_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline const ::apollo::common::Point3D& RadarObstacle::absolute_velocity() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.absolute_velocity)
  return _internal_absolute_velocity();
}
inline ::apollo::common::Point3D* RadarObstacle::release_absolute_velocity() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacle.absolute_velocity)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::common::Point3D* temp = absolute_velocity_;
  absolute_velocity_ = nullptr;
  return temp;
}
inline ::apollo::common::Point3D* RadarObstacle::_internal_mutable_absolute_velocity() {
  _has_bits_[0] |= 0x00000008u;
  if (absolute_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    absolute_velocity_ = p;
  }
  return absolute_velocity_;
}
inline ::apollo::common::Point3D* RadarObstacle::mutable_absolute_velocity() {
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacle.absolute_velocity)
  return _internal_mutable_absolute_velocity();
}
inline void RadarObstacle::set_allocated_absolute_velocity(::apollo::common::Point3D* absolute_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_velocity_);
  }
  if (absolute_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      absolute_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  absolute_velocity_ = absolute_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacle.absolute_velocity)
}

// optional int32 count = 12;
inline bool RadarObstacle::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RadarObstacle::has_count() const {
  return _internal_has_count();
}
inline void RadarObstacle::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarObstacle::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarObstacle::count() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.count)
  return _internal_count();
}
inline void RadarObstacle::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  count_ = value;
}
inline void RadarObstacle::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.count)
}

// optional int32 moving_frames_count = 13;
inline bool RadarObstacle::_internal_has_moving_frames_count() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RadarObstacle::has_moving_frames_count() const {
  return _internal_has_moving_frames_count();
}
inline void RadarObstacle::clear_moving_frames_count() {
  moving_frames_count_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarObstacle::_internal_moving_frames_count() const {
  return moving_frames_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarObstacle::moving_frames_count() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacle.moving_frames_count)
  return _internal_moving_frames_count();
}
inline void RadarObstacle::_internal_set_moving_frames_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  moving_frames_count_ = value;
}
inline void RadarObstacle::set_moving_frames_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moving_frames_count(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacle.moving_frames_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RadarObstacles

// map<int32, .apollo.third_party_perception.RadarObstacle> radar_obstacle = 1;
inline int RadarObstacles::_internal_radar_obstacle_size() const {
  return radar_obstacle_.size();
}
inline int RadarObstacles::radar_obstacle_size() const {
  return _internal_radar_obstacle_size();
}
inline void RadarObstacles::clear_radar_obstacle() {
  radar_obstacle_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle >&
RadarObstacles::_internal_radar_obstacle() const {
  return radar_obstacle_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle >&
RadarObstacles::radar_obstacle() const {
  // @@protoc_insertion_point(field_map:apollo.third_party_perception.RadarObstacles.radar_obstacle)
  return _internal_radar_obstacle();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle >*
RadarObstacles::_internal_mutable_radar_obstacle() {
  return radar_obstacle_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::apollo::third_party_perception::RadarObstacle >*
RadarObstacles::mutable_radar_obstacle() {
  // @@protoc_insertion_point(field_mutable_map:apollo.third_party_perception.RadarObstacles.radar_obstacle)
  return _internal_mutable_radar_obstacle();
}

// optional .apollo.common.Header header = 2;
inline bool RadarObstacles::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool RadarObstacles::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& RadarObstacles::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& RadarObstacles::header() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacles.header)
  return _internal_header();
}
inline ::apollo::common::Header* RadarObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.third_party_perception.RadarObstacles.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* RadarObstacles::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* RadarObstacles::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.third_party_perception.RadarObstacles.header)
  return _internal_mutable_header();
}
inline void RadarObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.third_party_perception.RadarObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
inline bool RadarObstacles::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarObstacles::has_error_code() const {
  return _internal_has_error_code();
}
inline void RadarObstacles::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::common::ErrorCode RadarObstacles::_internal_error_code() const {
  return static_cast< ::apollo::common::ErrorCode >(error_code_);
}
inline ::apollo::common::ErrorCode RadarObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.third_party_perception.RadarObstacles.error_code)
  return _internal_error_code();
}
inline void RadarObstacles::_internal_set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  error_code_ = value;
}
inline void RadarObstacles::set_error_code(::apollo::common::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.third_party_perception.RadarObstacles.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace third_party_perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fthird_5fparty_5fperception_2fproto_2fradar_5fobstacle_2eproto
